{"version":3,"file":"154.bundle.ede8511339e82d18095f.js","mappings":"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","sources":["webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/helpers/toArray.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/helpers/codeMeaningEquals.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/helpers/downloadDICOMData.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/helpers/graphicTypeEquals.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/MeasurementReport.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/cornerstone4Tag.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Length.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/FreehandRoi.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Bidirectional.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/EllipticalRoi.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/CircleRoi.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/ArrowAnnotate.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/CobbAngle.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Angle.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/RectangleRoi.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Segmentation_3X.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/enums/Events.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Segmentation_4X.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/index.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone/Segmentation.js","webpack:///../../../../cornerstone3D/node_modules/tslib/tslib.es6.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/cornerstone3DTag.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/CodingScheme.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/MeasurementReport.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/ArrowAnnotate.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Bidirectional.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Angle.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/CobbAngle.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/isValidCornerstoneTrackingIdentifier.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/CircleROI.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/EllipticalROI.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/RectangleROI.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Length.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/PlanarFreehandROI.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Probe.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Segmentation/generateSegmentation.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Segmentation/generateToolState.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/index.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/Cornerstone3D/Segmentation/generateLabelMaps2DFrom3D.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/VTKjs/Segmentation.js","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/index.ts","webpack:///../../../../cornerstone3D/packages/adapters/src/adapters/VTKjs/index.ts"],"sourcesContent":["const toArray = x => (Array.isArray(x) ? x : [x]);\n\nexport { toArray };\n","/**\n * Returns a function that checks if a given content item's ConceptNameCodeSequence.CodeMeaning\n * matches the provided codeMeaningName.\n * @param codeMeaningName - The CodeMeaning to match against.\n * @returns A function that takes a content item and returns a boolean indicating whether the\n * content item's CodeMeaning matches the provided codeMeaningName.\n */\nconst codeMeaningEquals = (codeMeaningName: string) => {\n    return (contentItem: any) => {\n        return (\n            contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName\n        );\n    };\n};\n\nexport { codeMeaningEquals };\n","import { data } from \"dcmjs\";\nimport { Buffer } from \"buffer\";\nconst { datasetToDict } = data;\n\ninterface DicomDataset {\n    _meta?: any;\n    // other properties\n}\n\n/**\n * Trigger file download from an array buffer\n * @param bufferOrDataset - ArrayBuffer or DicomDataset\n * @param filename - name of the file to download\n */\nexport function downloadDICOMData(\n    bufferOrDataset: ArrayBuffer | DicomDataset,\n    filename: string\n) {\n    let blob;\n    if (bufferOrDataset instanceof ArrayBuffer) {\n        blob = new Blob([bufferOrDataset], { type: \"application/dicom\" });\n    } else {\n        if (!bufferOrDataset._meta) {\n            throw new Error(\"Dataset must have a _meta property\");\n        }\n\n        const buffer = Buffer.from(datasetToDict(bufferOrDataset).write());\n        blob = new Blob([buffer], { type: \"application/dicom\" });\n    }\n\n    const link = document.createElement(\"a\");\n    link.href = window.URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n}\n","/**\n * Checks if a given content item's GraphicType property matches a specified value.\n * @param {string} graphicType - The value to compare the content item's GraphicType property to.\n * @returns {function} A function that takes a content item and returns a boolean indicating whether its GraphicType property matches the specified value.\n */\nconst graphicTypeEquals = graphicType => {\n    return contentItem => {\n        return contentItem && contentItem.GraphicType === graphicType;\n    };\n};\n\nexport { graphicTypeEquals };\n","import { normalizers, data, utilities, derivations } from \"dcmjs\";\n\nimport { toArray, codeMeaningEquals } from \"../helpers\";\n\nconst { TID1500, addAccessors } = utilities;\n\nconst { StructuredReport } = derivations;\n\nconst { Normalizer } = normalizers;\n\nconst { TID1500MeasurementReport, TID1501MeasurementGroup } = TID1500;\n\nconst { DicomMetaDictionary } = data;\n\nconst FINDING = { CodingSchemeDesignator: \"DCM\", CodeValue: \"121071\" };\nconst FINDING_SITE = { CodingSchemeDesignator: \"SCT\", CodeValue: \"363698007\" };\nconst FINDING_SITE_OLD = { CodingSchemeDesignator: \"SRT\", CodeValue: \"G-C0E3\" };\n\nconst codeValueMatch = (group, code, oldCode) => {\n    const { ConceptNameCodeSequence } = group;\n    if (!ConceptNameCodeSequence) return;\n    const { CodingSchemeDesignator, CodeValue } = ConceptNameCodeSequence;\n    return (\n        (CodingSchemeDesignator == code.CodingSchemeDesignator &&\n            CodeValue == code.CodeValue) ||\n        (oldCode &&\n            CodingSchemeDesignator == oldCode.CodingSchemeDesignator &&\n            CodeValue == oldCode.CodeValue)\n    );\n};\n\nfunction getTID300ContentItem(\n    tool,\n    toolType,\n    ReferencedSOPSequence,\n    toolClass\n) {\n    const args = toolClass.getTID300RepresentationArguments(tool);\n    args.ReferencedSOPSequence = ReferencedSOPSequence;\n\n    const TID300Measurement = new toolClass.TID300Representation(args);\n\n    return TID300Measurement;\n}\n\nfunction getMeasurementGroup(toolType, toolData, ReferencedSOPSequence) {\n    const toolTypeData = toolData[toolType];\n    const toolClass =\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\n    if (\n        !toolTypeData ||\n        !toolTypeData.data ||\n        !toolTypeData.data.length ||\n        !toolClass\n    ) {\n        return;\n    }\n\n    // Loop through the array of tool instances\n    // for this tool\n    const Measurements = toolTypeData.data.map(tool => {\n        return getTID300ContentItem(\n            tool,\n            toolType,\n            ReferencedSOPSequence,\n            toolClass\n        );\n    });\n\n    return new TID1501MeasurementGroup(Measurements);\n}\n\nexport default class MeasurementReport {\n    static getSetupMeasurementData(MeasurementGroup) {\n        const { ContentSequence } = MeasurementGroup;\n\n        const contentSequenceArr = toArray(ContentSequence);\n        const findingGroup = contentSequenceArr.find(group =>\n            codeValueMatch(group, FINDING)\n        );\n        const findingSiteGroups =\n            contentSequenceArr.filter(group =>\n                codeValueMatch(group, FINDING_SITE, FINDING_SITE_OLD)\n            ) || [];\n        const NUMGroup = contentSequenceArr.find(\n            group => group.ValueType === \"NUM\"\n        );\n        const SCOORDGroup = toArray(NUMGroup.ContentSequence).find(\n            group => group.ValueType === \"SCOORD\"\n        );\n        const { ReferencedSOPSequence } = SCOORDGroup.ContentSequence;\n        const { ReferencedSOPInstanceUID, ReferencedFrameNumber } =\n            ReferencedSOPSequence;\n\n        const defaultState = {\n            sopInstanceUid: ReferencedSOPInstanceUID,\n            frameIndex: ReferencedFrameNumber || 1,\n            complete: true,\n            finding: findingGroup\n                ? addAccessors(findingGroup.ConceptCodeSequence)\n                : undefined,\n            findingSites: findingSiteGroups.map(fsg => {\n                return addAccessors(fsg.ConceptCodeSequence);\n            })\n        };\n        if (defaultState.finding) {\n            defaultState.description = defaultState.finding.CodeMeaning;\n        }\n        const findingSite =\n            defaultState.findingSites && defaultState.findingSites[0];\n        if (findingSite) {\n            defaultState.location =\n                (findingSite[0] && findingSite[0].CodeMeaning) ||\n                findingSite.CodeMeaning;\n        }\n        return {\n            defaultState,\n            findingGroup,\n            findingSiteGroups,\n            NUMGroup,\n            SCOORDGroup,\n            ReferencedSOPSequence,\n            ReferencedSOPInstanceUID,\n            ReferencedFrameNumber\n        };\n    }\n\n    static generateReport(toolState, metadataProvider, options) {\n        // ToolState for array of imageIDs to a Report\n        // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\n\n        let allMeasurementGroups = [];\n        const firstImageId = Object.keys(toolState)[0];\n        if (!firstImageId) {\n            throw new Error(\"No measurements provided.\");\n        }\n\n        /* Patient ID\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\n         */\n        const generalSeriesModule = metadataProvider.get(\n            \"generalSeriesModule\",\n            firstImageId\n        );\n\n        //const sopCommonModule = metadataProvider.get('sopCommonModule', firstImageId);\n\n        // NOTE: We are getting the Series and Study UIDs from the first imageId of the toolState\n        // which means that if the toolState is for multiple series, the report will have the incorrect\n        // SeriesInstanceUIDs\n        const { studyInstanceUID, seriesInstanceUID } = generalSeriesModule;\n\n        // Loop through each image in the toolData\n        Object.keys(toolState).forEach(imageId => {\n            const sopCommonModule = metadataProvider.get(\n                \"sopCommonModule\",\n                imageId\n            );\n            const frameNumber = metadataProvider.get(\"frameNumber\", imageId);\n            const toolData = toolState[imageId];\n            const toolTypes = Object.keys(toolData);\n\n            const ReferencedSOPSequence = {\n                ReferencedSOPClassUID: sopCommonModule.sopClassUID,\n                ReferencedSOPInstanceUID: sopCommonModule.sopInstanceUID\n            };\n\n            if (\n                Normalizer.isMultiframeSOPClassUID(sopCommonModule.sopClassUID)\n            ) {\n                ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\n            }\n\n            // Loop through each tool type for the image\n            const measurementGroups = [];\n\n            toolTypes.forEach(toolType => {\n                const group = getMeasurementGroup(\n                    toolType,\n                    toolData,\n                    ReferencedSOPSequence\n                );\n                if (group) {\n                    measurementGroups.push(group);\n                }\n            });\n\n            allMeasurementGroups =\n                allMeasurementGroups.concat(measurementGroups);\n        });\n\n        const MeasurementReport = new TID1500MeasurementReport(\n            { TID1501MeasurementGroups: allMeasurementGroups },\n            options\n        );\n\n        // TODO: what is the correct metaheader\n        // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n        // TODO: move meta creation to happen in derivations.js\n        const fileMetaInformationVersionArray = new Uint8Array(2);\n        fileMetaInformationVersionArray[1] = 1;\n\n        const derivationSourceDataset = {\n            StudyInstanceUID: studyInstanceUID,\n            SeriesInstanceUID: seriesInstanceUID\n            //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?\n            //SOPClassUID: sopClassUID,\n        };\n\n        const _meta = {\n            FileMetaInformationVersion: {\n                Value: [fileMetaInformationVersionArray.buffer],\n                vr: \"OB\"\n            },\n            //MediaStorageSOPClassUID\n            //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n            TransferSyntaxUID: {\n                Value: [\"1.2.840.10008.1.2.1\"],\n                vr: \"UI\"\n            },\n            ImplementationClassUID: {\n                Value: [DicomMetaDictionary.uid()], // TODO: could be git hash or other valid id\n                vr: \"UI\"\n            },\n            ImplementationVersionName: {\n                Value: [\"dcmjs\"],\n                vr: \"SH\"\n            }\n        };\n\n        const _vrMap = {\n            PixelData: \"OW\"\n        };\n\n        derivationSourceDataset._meta = _meta;\n        derivationSourceDataset._vrMap = _vrMap;\n\n        const report = new StructuredReport([derivationSourceDataset]);\n\n        const contentItem = MeasurementReport.contentItem(\n            derivationSourceDataset\n        );\n\n        // Merge the derived dataset with the content from the Measurement Report\n        report.dataset = Object.assign(report.dataset, contentItem);\n        report.dataset._meta = _meta;\n\n        return report;\n    }\n\n    /**\n     * Generate Cornerstone tool state from dataset\n     * @param {object} dataset dataset\n     * @param {object} hooks\n     * @param {function} hooks.getToolClass Function to map dataset to a tool class\n     * @returns\n     */\n    static generateToolState(dataset, hooks = {}) {\n        // For now, bail out if the dataset is not a TID1500 SR with length measurements\n        if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n            throw new Error(\n                \"This package can currently only interpret DICOM SR TID 1500\"\n            );\n        }\n\n        const REPORT = \"Imaging Measurements\";\n        const GROUP = \"Measurement Group\";\n        const TRACKING_IDENTIFIER = \"Tracking Identifier\";\n\n        // Identify the Imaging Measurements\n        const imagingMeasurementContent = toArray(dataset.ContentSequence).find(\n            codeMeaningEquals(REPORT)\n        );\n\n        // Retrieve the Measurements themselves\n        const measurementGroups = toArray(\n            imagingMeasurementContent.ContentSequence\n        ).filter(codeMeaningEquals(GROUP));\n\n        // For each of the supported measurement types, compute the measurement data\n        const measurementData = {};\n\n        const cornerstoneToolClasses =\n            MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\n        const registeredToolClasses = [];\n\n        Object.keys(cornerstoneToolClasses).forEach(key => {\n            registeredToolClasses.push(cornerstoneToolClasses[key]);\n            measurementData[key] = [];\n        });\n\n        measurementGroups.forEach(measurementGroup => {\n            const measurementGroupContentSequence = toArray(\n                measurementGroup.ContentSequence\n            );\n\n            const TrackingIdentifierGroup =\n                measurementGroupContentSequence.find(\n                    contentItem =>\n                        contentItem.ConceptNameCodeSequence.CodeMeaning ===\n                        TRACKING_IDENTIFIER\n                );\n\n            const TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;\n\n            const toolClass = hooks.getToolClass\n                ? hooks.getToolClass(\n                      measurementGroup,\n                      dataset,\n                      registeredToolClasses\n                  )\n                : registeredToolClasses.find(tc =>\n                      tc.isValidCornerstoneTrackingIdentifier(\n                          TrackingIdentifierValue\n                      )\n                  );\n\n            if (toolClass) {\n                const measurement =\n                    toolClass.getMeasurementData(measurementGroup);\n\n                console.log(`=== ${toolClass.toolType} ===`);\n                console.log(measurement);\n\n                measurementData[toolClass.toolType].push(measurement);\n            }\n        });\n\n        // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\n        // That is up to the consumer to derive from the SOPInstanceUIDs.\n        return measurementData;\n    }\n\n    static registerTool(toolClass) {\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[\n            toolClass.utilityToolType\n        ] = toolClass;\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[\n            toolClass.toolType\n        ] = toolClass;\n        MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] =\n            toolClass.utilityToolType;\n    }\n}\n\nMeasurementReport.MEASUREMENT_BY_TOOLTYPE = {};\nMeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\nMeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\n","export default \"cornerstoneTools@^4.0.0\";\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Length: TID300Length } = utilities.TID300;\n\nconst LENGTH = \"Length\";\n\nclass Length {\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, NUMGroup, SCOORDGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const state = {\n            ...defaultState,\n            length: NUMGroup.MeasuredValueSequence.NumericValue,\n            toolType: Length.toolType,\n            handles: {\n                start: {},\n                end: {},\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            }\n        };\n\n        [\n            state.handles.start.x,\n            state.handles.start.y,\n            state.handles.end.x,\n            state.handles.end.y\n        ] = SCOORDGroup.GraphicData;\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { handles, finding, findingSites } = tool;\n        const point1 = handles.start;\n        const point2 = handles.end;\n        const distance = tool.length;\n\n        const trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Length\";\n\n        return {\n            point1,\n            point2,\n            distance,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nLength.toolType = LENGTH;\nLength.utilityToolType = LENGTH;\nLength.TID300Representation = TID300Length;\nLength.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === LENGTH;\n};\n\nMeasurementReport.registerTool(Length);\n\nexport default Length;\n","import { utilities } from \"dcmjs\";\n\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Polyline: TID300Polyline } = utilities.TID300;\n\nclass FreehandRoi {\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, SCOORDGroup, NUMGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const state = {\n            ...defaultState,\n            toolType: FreehandRoi.toolType,\n            handles: {\n                points: [],\n                textBox: {\n                    active: false,\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            },\n            cachedStats: {\n                area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n            },\n            color: undefined,\n            invalidated: true\n        };\n        const { GraphicData } = SCOORDGroup;\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            state.handles.points.push({\n                x: GraphicData[i],\n                y: GraphicData[i + 1]\n            });\n        }\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { handles, finding, findingSites, cachedStats = {} } = tool;\n        const { points } = handles;\n        const { area = 0, perimeter = 0 } = cachedStats;\n\n        const trackingIdentifierTextValue =\n            \"cornerstoneTools@^4.0.0:FreehandRoi\";\n\n        return {\n            points,\n            area,\n            perimeter,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nFreehandRoi.toolType = \"FreehandRoi\";\nFreehandRoi.utilityToolType = \"FreehandRoi\";\nFreehandRoi.TID300Representation = TID300Polyline;\nFreehandRoi.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === FreehandRoi.toolType;\n};\n\nMeasurementReport.registerTool(FreehandRoi);\n\nexport default FreehandRoi;\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\nimport { toArray } from \"../helpers\";\n\nconst { Bidirectional: TID300Bidirectional } = utilities.TID300;\n\nconst BIDIRECTIONAL = \"Bidirectional\";\nconst LONG_AXIS = \"Long Axis\";\nconst SHORT_AXIS = \"Short Axis\";\nconst FINDING = \"121071\";\nconst FINDING_SITE = \"G-C0E3\";\n\nclass Bidirectional {\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    static getMeasurementData(MeasurementGroup) {\n        const { ContentSequence } = MeasurementGroup;\n\n        const findingGroup = toArray(ContentSequence).find(\n            group => group.ConceptNameCodeSequence.CodeValue === FINDING\n        );\n\n        const findingSiteGroups = toArray(ContentSequence).filter(\n            group => group.ConceptNameCodeSequence.CodeValue === FINDING_SITE\n        );\n\n        const longAxisNUMGroup = toArray(ContentSequence).find(\n            group => group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS\n        );\n\n        const longAxisSCOORDGroup = toArray(\n            longAxisNUMGroup.ContentSequence\n        ).find(group => group.ValueType === \"SCOORD\");\n\n        const shortAxisNUMGroup = toArray(ContentSequence).find(\n            group => group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS\n        );\n\n        const shortAxisSCOORDGroup = toArray(\n            shortAxisNUMGroup.ContentSequence\n        ).find(group => group.ValueType === \"SCOORD\");\n\n        const { ReferencedSOPSequence } = longAxisSCOORDGroup.ContentSequence;\n        const { ReferencedSOPInstanceUID, ReferencedFrameNumber } =\n            ReferencedSOPSequence;\n\n        // Long axis\n\n        const longestDiameter = String(\n            longAxisNUMGroup.MeasuredValueSequence.NumericValue\n        );\n\n        const shortestDiameter = String(\n            shortAxisNUMGroup.MeasuredValueSequence.NumericValue\n        );\n\n        const bottomRight = {\n            x: Math.max(\n                longAxisSCOORDGroup.GraphicData[0],\n                longAxisSCOORDGroup.GraphicData[2],\n                shortAxisSCOORDGroup.GraphicData[0],\n                shortAxisSCOORDGroup.GraphicData[2]\n            ),\n            y: Math.max(\n                longAxisSCOORDGroup.GraphicData[1],\n                longAxisSCOORDGroup.GraphicData[3],\n                shortAxisSCOORDGroup.GraphicData[1],\n                shortAxisSCOORDGroup.GraphicData[3]\n            )\n        };\n\n        const state = {\n            sopInstanceUid: ReferencedSOPInstanceUID,\n            frameIndex: ReferencedFrameNumber || 1,\n            toolType: Bidirectional.toolType,\n            active: false,\n            handles: {\n                start: {\n                    x: longAxisSCOORDGroup.GraphicData[0],\n                    y: longAxisSCOORDGroup.GraphicData[1],\n                    drawnIndependently: false,\n                    allowedOutsideImage: false,\n                    active: false,\n                    highlight: false,\n                    index: 0\n                },\n                end: {\n                    x: longAxisSCOORDGroup.GraphicData[2],\n                    y: longAxisSCOORDGroup.GraphicData[3],\n                    drawnIndependently: false,\n                    allowedOutsideImage: false,\n                    active: false,\n                    highlight: false,\n                    index: 1\n                },\n                perpendicularStart: {\n                    x: shortAxisSCOORDGroup.GraphicData[0],\n                    y: shortAxisSCOORDGroup.GraphicData[1],\n                    drawnIndependently: false,\n                    allowedOutsideImage: false,\n                    active: false,\n                    highlight: false,\n                    index: 2\n                },\n                perpendicularEnd: {\n                    x: shortAxisSCOORDGroup.GraphicData[2],\n                    y: shortAxisSCOORDGroup.GraphicData[3],\n                    drawnIndependently: false,\n                    allowedOutsideImage: false,\n                    active: false,\n                    highlight: false,\n                    index: 3\n                },\n                textBox: {\n                    highlight: false,\n                    hasMoved: true,\n                    active: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true,\n                    x: bottomRight.x + 10,\n                    y: bottomRight.y + 10\n                }\n            },\n            invalidated: false,\n            isCreating: false,\n            longestDiameter,\n            shortestDiameter,\n            toolName: \"Bidirectional\",\n            visible: true,\n            finding: findingGroup\n                ? findingGroup.ConceptCodeSequence\n                : undefined,\n            findingSites: findingSiteGroups.map(fsg => fsg.ConceptCodeSequence)\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { start, end, perpendicularStart, perpendicularEnd } =\n            tool.handles;\n        const { shortestDiameter, longestDiameter, finding, findingSites } =\n            tool;\n\n        const trackingIdentifierTextValue =\n            \"cornerstoneTools@^4.0.0:Bidirectional\";\n\n        return {\n            longAxis: {\n                point1: start,\n                point2: end\n            },\n            shortAxis: {\n                point1: perpendicularStart,\n                point2: perpendicularEnd\n            },\n            longAxisLength: longestDiameter,\n            shortAxisLength: shortestDiameter,\n            trackingIdentifierTextValue,\n            finding: finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nBidirectional.toolType = BIDIRECTIONAL;\nBidirectional.utilityToolType = BIDIRECTIONAL;\nBidirectional.TID300Representation = TID300Bidirectional;\nBidirectional.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === BIDIRECTIONAL;\n};\n\nMeasurementReport.registerTool(Bidirectional);\n\nexport default Bidirectional;\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Ellipse: TID300Ellipse } = utilities.TID300;\n\nconst ELLIPTICALROI = \"EllipticalRoi\";\n\nclass EllipticalRoi {\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, NUMGroup, SCOORDGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const { GraphicData } = SCOORDGroup;\n\n        const majorAxis = [\n            { x: GraphicData[0], y: GraphicData[1] },\n            { x: GraphicData[2], y: GraphicData[3] }\n        ];\n        const minorAxis = [\n            { x: GraphicData[4], y: GraphicData[5] },\n            { x: GraphicData[6], y: GraphicData[7] }\n        ];\n\n        // Calculate two opposite corners of box defined by two axes.\n\n        const minorAxisLength = Math.sqrt(\n            Math.pow(minorAxis[0].x - minorAxis[1].x, 2) +\n                Math.pow(minorAxis[0].y - minorAxis[1].y, 2)\n        );\n\n        const minorAxisDirection = {\n            x: (minorAxis[1].x - minorAxis[0].x) / minorAxisLength,\n            y: (minorAxis[1].y - minorAxis[0].y) / minorAxisLength\n        };\n\n        const halfMinorAxisLength = minorAxisLength / 2;\n\n        // First end point of major axis + half minor axis vector\n        const corner1 = {\n            x: majorAxis[0].x + minorAxisDirection.x * halfMinorAxisLength,\n            y: majorAxis[0].y + minorAxisDirection.y * halfMinorAxisLength\n        };\n\n        // Second end point of major axis - half of minor axis vector\n        const corner2 = {\n            x: majorAxis[1].x - minorAxisDirection.x * halfMinorAxisLength,\n            y: majorAxis[1].y - minorAxisDirection.y * halfMinorAxisLength\n        };\n        const state = {\n            ...defaultState,\n            toolType: EllipticalRoi.toolType,\n            active: false,\n            cachedStats: {\n                area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n            },\n            handles: {\n                end: {\n                    x: corner1.x,\n                    y: corner1.y,\n                    highlight: false,\n                    active: false\n                },\n                initialRotation: 0,\n                start: {\n                    x: corner2.x,\n                    y: corner2.y,\n                    highlight: false,\n                    active: false\n                },\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            },\n            invalidated: true,\n            visible: true\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { cachedStats = {}, handles, finding, findingSites } = tool;\n        const { start, end } = handles;\n        const { area } = cachedStats;\n\n        const halfXLength = Math.abs(start.x - end.x) / 2;\n        const halfYLength = Math.abs(start.y - end.y) / 2;\n\n        const points = [];\n\n        const center = { x: (start.x + end.x) / 2, y: (start.y + end.y) / 2 };\n\n        if (halfXLength > halfYLength) {\n            // X-axis major\n            // Major axis\n            points.push({ x: center.x - halfXLength, y: center.y });\n            points.push({ x: center.x + halfXLength, y: center.y });\n            // Minor axis\n            points.push({ x: center.x, y: center.y - halfYLength });\n            points.push({ x: center.x, y: center.y + halfYLength });\n        } else {\n            // Y-axis major\n            // Major axis\n            points.push({ x: center.x, y: center.y - halfYLength });\n            points.push({ x: center.x, y: center.y + halfYLength });\n            // Minor axis\n            points.push({ x: center.x - halfXLength, y: center.y });\n            points.push({ x: center.x + halfXLength, y: center.y });\n        }\n\n        const trackingIdentifierTextValue =\n            \"cornerstoneTools@^4.0.0:EllipticalRoi\";\n\n        return {\n            area,\n            points,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nEllipticalRoi.toolType = ELLIPTICALROI;\nEllipticalRoi.utilityToolType = ELLIPTICALROI;\nEllipticalRoi.TID300Representation = TID300Ellipse;\nEllipticalRoi.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === ELLIPTICALROI;\n};\n\nMeasurementReport.registerTool(EllipticalRoi);\n\nexport default EllipticalRoi;\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Circle: TID300Circle } = utilities.TID300;\n\nconst CIRCLEROI = \"CircleRoi\";\n\nclass CircleRoi {\n    /** Gets the measurement data for cornerstone, given DICOM SR measurement data. */\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, NUMGroup, SCOORDGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const { GraphicData } = SCOORDGroup;\n\n        const center = { x: GraphicData[0], y: GraphicData[1] };\n        const end = { x: GraphicData[2], y: GraphicData[3] };\n\n        const state = {\n            ...defaultState,\n            toolType: CircleRoi.toolType,\n            active: false,\n            cachedStats: {\n                area: NUMGroup\n                    ? NUMGroup.MeasuredValueSequence.NumericValue\n                    : 0,\n                // Dummy values to be updated by cornerstone\n                radius: 0,\n                perimeter: 0\n            },\n            handles: {\n                end: {\n                    ...end,\n                    highlight: false,\n                    active: false\n                },\n                initialRotation: 0,\n                start: {\n                    ...center,\n                    highlight: false,\n                    active: false\n                },\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            },\n            invalidated: true,\n            visible: true\n        };\n\n        return state;\n    }\n\n    /**\n     * Gets the TID 300 representation of a circle, given the cornerstone representation.\n     *\n     * @param {Object} tool\n     * @returns\n     */\n    static getTID300RepresentationArguments(tool) {\n        const { cachedStats = {}, handles, finding, findingSites } = tool;\n        const { start: center, end } = handles;\n        const { area, radius } = cachedStats;\n\n        const perimeter = 2 * Math.PI * radius;\n        const points = [];\n\n        points.push(center);\n        points.push(end);\n\n        const trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CircleRoi\";\n\n        return {\n            area,\n            perimeter,\n            radius,\n            points,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nCircleRoi.toolType = CIRCLEROI;\nCircleRoi.utilityToolType = CIRCLEROI;\nCircleRoi.TID300Representation = TID300Circle;\nCircleRoi.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === CIRCLEROI;\n};\n\nMeasurementReport.registerTool(CircleRoi);\n\nexport default CircleRoi;\n","import { utilities } from \"dcmjs\";\n\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Point: TID300Point } = utilities.TID300;\n\nconst ARROW_ANNOTATE = \"ArrowAnnotate\";\nconst CORNERSTONEFREETEXT = \"CORNERSTONEFREETEXT\";\n\nclass ArrowAnnotate {\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, SCOORDGroup, findingGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const text = findingGroup.ConceptCodeSequence.CodeMeaning;\n\n        const { GraphicData } = SCOORDGroup;\n\n        const state = {\n            ...defaultState,\n            toolType: ArrowAnnotate.toolType,\n            active: false,\n            handles: {\n                start: {\n                    x: GraphicData[0],\n                    y: GraphicData[1],\n                    highlight: true,\n                    active: false\n                },\n                // Use a generic offset if the stored data doesn't have the endpoint, otherwise\n                // use the actual endpoint.\n                end: {\n                    x:\n                        GraphicData.length == 4\n                            ? GraphicData[2]\n                            : GraphicData[0] + 20,\n                    y:\n                        GraphicData.length == 4\n                            ? GraphicData[3]\n                            : GraphicData[1] + 20,\n                    highlight: true,\n                    active: false\n                },\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            },\n            invalidated: true,\n            text,\n            visible: true\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const points = [tool.handles.start, tool.handles.end];\n\n        let { finding, findingSites } = tool;\n\n        const TID300RepresentationArguments = {\n            points,\n            trackingIdentifierTextValue: `cornerstoneTools@^4.0.0:ArrowAnnotate`,\n            findingSites: findingSites || []\n        };\n\n        // If freetext finding isn't present, add it from the tool text.\n        if (!finding || finding.CodeValue !== CORNERSTONEFREETEXT) {\n            finding = {\n                CodeValue: CORNERSTONEFREETEXT,\n                CodingSchemeDesignator: \"CST4\",\n                CodeMeaning: tool.text\n            };\n        }\n\n        TID300RepresentationArguments.finding = finding;\n\n        return TID300RepresentationArguments;\n    }\n}\n\nArrowAnnotate.toolType = ARROW_ANNOTATE;\nArrowAnnotate.utilityToolType = ARROW_ANNOTATE;\nArrowAnnotate.TID300Representation = TID300Point;\nArrowAnnotate.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === ARROW_ANNOTATE;\n};\n\nMeasurementReport.registerTool(ArrowAnnotate);\n\nexport default ArrowAnnotate;\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { CobbAngle: TID300CobbAngle } = utilities.TID300;\n\nconst COBB_ANGLE = \"CobbAngle\";\n\nclass CobbAngle {\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, NUMGroup, SCOORDGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const state = {\n            ...defaultState,\n            rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n            toolType: CobbAngle.toolType,\n            handles: {\n                start: {},\n                end: {},\n                start2: {\n                    highlight: true,\n                    drawnIndependently: true\n                },\n                end2: {\n                    highlight: true,\n                    drawnIndependently: true\n                },\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            }\n        };\n\n        [\n            state.handles.start.x,\n            state.handles.start.y,\n            state.handles.end.x,\n            state.handles.end.y,\n            state.handles.start2.x,\n            state.handles.start2.y,\n            state.handles.end2.x,\n            state.handles.end2.y\n        ] = SCOORDGroup.GraphicData;\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { handles, finding, findingSites } = tool;\n        const point1 = handles.start;\n        const point2 = handles.end;\n        const point3 = handles.start2;\n        const point4 = handles.end2;\n        const rAngle = tool.rAngle;\n\n        const trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CobbAngle\";\n\n        return {\n            point1,\n            point2,\n            point3,\n            point4,\n            rAngle,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nCobbAngle.toolType = COBB_ANGLE;\nCobbAngle.utilityToolType = COBB_ANGLE;\nCobbAngle.TID300Representation = TID300CobbAngle;\nCobbAngle.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === COBB_ANGLE;\n};\n\nMeasurementReport.registerTool(CobbAngle);\n\nexport default CobbAngle;\n","import { utilities } from \"dcmjs\";\n\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Angle: TID300Angle } = utilities.TID300;\n\nconst ANGLE = \"Angle\";\n\nclass Angle {\n    /**\n     * Generate TID300 measurement data for a plane angle measurement - use a Angle, but label it as Angle\n     */\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, NUMGroup, SCOORDGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const state = {\n            ...defaultState,\n            rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n            toolType: Angle.toolType,\n            handles: {\n                start: {},\n                middle: {},\n                end: {},\n                textBox: {\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                }\n            }\n        };\n\n        [\n            state.handles.start.x,\n            state.handles.start.y,\n            state.handles.middle.x,\n            state.handles.middle.y,\n            state.handles.middle.x,\n            state.handles.middle.y,\n            state.handles.end.x,\n            state.handles.end.y\n        ] = SCOORDGroup.GraphicData;\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { handles, finding, findingSites } = tool;\n        const point1 = handles.start;\n        const point2 = handles.middle;\n        const point3 = handles.middle;\n        const point4 = handles.end;\n        const rAngle = tool.rAngle;\n\n        const trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Angle\";\n\n        return {\n            point1,\n            point2,\n            point3,\n            point4,\n            rAngle,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nAngle.toolType = ANGLE;\nAngle.utilityToolType = ANGLE;\nAngle.TID300Representation = TID300Angle;\nAngle.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === ANGLE;\n};\n\nMeasurementReport.registerTool(Angle);\n\nexport default Angle;\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_4_TAG from \"./cornerstone4Tag\";\n\nconst { Polyline: TID300Polyline } = utilities.TID300;\n\nclass RectangleRoi {\n    static getMeasurementData(MeasurementGroup) {\n        const { defaultState, SCOORDGroup, NUMGroup } =\n            MeasurementReport.getSetupMeasurementData(MeasurementGroup);\n\n        const state = {\n            ...defaultState,\n            toolType: RectangleRoi.toolType,\n            handles: {\n                start: {},\n                end: {},\n                textBox: {\n                    active: false,\n                    hasMoved: false,\n                    movesIndependently: false,\n                    drawnIndependently: true,\n                    allowedOutsideImage: true,\n                    hasBoundingBox: true\n                },\n                initialRotation: 0\n            },\n            cachedStats: {\n                area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n            },\n            color: undefined,\n            invalidated: true\n        };\n        const intermediate = {};\n\n        [\n            state.handles.start.x,\n            state.handles.start.y,\n            intermediate.x,\n            intermediate.y,\n            state.handles.end.x,\n            state.handles.end.y\n        ] = SCOORDGroup.GraphicData;\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool) {\n        const { finding, findingSites, cachedStats = {}, handles } = tool;\n        const { start, end } = handles;\n        const points = [\n            start,\n            { x: start.x, y: end.y },\n            end,\n            { x: end.x, y: start.y }\n        ];\n        const { area, perimeter } = cachedStats;\n\n        const trackingIdentifierTextValue =\n            \"cornerstoneTools@^4.0.0:RectangleRoi\";\n\n        return {\n            points,\n            area,\n            perimeter,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nRectangleRoi.toolType = \"RectangleRoi\";\nRectangleRoi.utilityToolType = \"RectangleRoi\";\nRectangleRoi.TID300Representation = TID300Polyline;\nRectangleRoi.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone4Tag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n        return false;\n    }\n\n    return toolType === RectangleRoi.toolType;\n};\n\nMeasurementReport.registerTool(RectangleRoi);\n\nexport default RectangleRoi;\n","import { log, utilities, normalizers, derivations } from \"dcmjs\";\nimport ndarray from \"ndarray\";\n\nconst {\n    rotateDirectionCosinesInPlane,\n    flipImageOrientationPatient: flipIOP,\n    flipMatrix2D,\n    rotateMatrix902D\n} = utilities.orientation;\n\nconst { datasetToBlob, BitArray, DicomMessage, DicomMetaDictionary } =\n    utilities;\n\nconst { Normalizer } = normalizers;\nconst { Segmentation: SegmentationDerivation } = derivations;\n\nconst Segmentation = {\n    generateSegmentation,\n    generateToolState\n};\n\nexport default Segmentation;\n\n/**\n *\n * @typedef {Object} BrushData\n * @property {Object} toolState - The cornerstoneTools global toolState.\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\n *                                 seriesInstanceUid.\n */\n\n/**\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\n * imageIds, images and the cornerstoneTools brushData.\n *\n * @param  {object[]} images    An array of the cornerstone image objects.\n * @param  {BrushData} brushData and object containing the brushData.\n * @returns {type}           description\n */\nfunction generateSegmentation(\n    images,\n    brushData,\n    options = { includeSliceSpacing: true }\n) {\n    const { toolState, segments } = brushData;\n\n    // Calculate the dimensions of the data cube.\n    const image0 = images[0];\n\n    const dims = {\n        x: image0.columns,\n        y: image0.rows,\n        z: images.length\n    };\n\n    dims.xy = dims.x * dims.y;\n\n    const numSegments = _getSegCount(seg, segments);\n\n    if (!numSegments) {\n        throw new Error(\"No segments to export!\");\n    }\n\n    const isMultiframe = image0.imageId.includes(\"?frame\");\n    const seg = _createSegFromImages(images, isMultiframe, options);\n\n    const { referencedFramesPerSegment, segmentIndicies } =\n        _getNumberOfFramesPerSegment(toolState, images, segments);\n\n    let NumberOfFrames = 0;\n\n    for (let i = 0; i < referencedFramesPerSegment.length; i++) {\n        NumberOfFrames += referencedFramesPerSegment[i].length;\n    }\n\n    seg.setNumberOfFrames(NumberOfFrames);\n\n    for (let i = 0; i < segmentIndicies.length; i++) {\n        const segmentIndex = segmentIndicies[i];\n        const referencedFrameIndicies = referencedFramesPerSegment[i];\n\n        // Frame numbers start from 1.\n        const referencedFrameNumbers = referencedFrameIndicies.map(element => {\n            return element + 1;\n        });\n\n        const segment = segments[segmentIndex];\n\n        seg.addSegment(\n            segment,\n            _extractCornerstoneToolsPixelData(\n                segmentIndex,\n                referencedFrameIndicies,\n                toolState,\n                images,\n                dims\n            ),\n            referencedFrameNumbers\n        );\n    }\n\n    seg.bitPackPixelData();\n\n    const segBlob = datasetToBlob(seg.dataset);\n\n    return segBlob;\n}\n\nfunction _extractCornerstoneToolsPixelData(\n    segmentIndex,\n    referencedFrames,\n    toolState,\n    images,\n    dims\n) {\n    const pixelData = new Uint8Array(dims.xy * referencedFrames.length);\n\n    let pixelDataIndex = 0;\n\n    for (let i = 0; i < referencedFrames.length; i++) {\n        const frame = referencedFrames[i];\n\n        const imageId = images[frame].imageId;\n        const imageIdSpecificToolState = toolState[imageId];\n\n        const brushPixelData =\n            imageIdSpecificToolState.brush.data[segmentIndex].pixelData;\n\n        for (let p = 0; p < brushPixelData.length; p++) {\n            pixelData[pixelDataIndex] = brushPixelData[p];\n            pixelDataIndex++;\n        }\n    }\n\n    return pixelData;\n}\n\nfunction _getNumberOfFramesPerSegment(toolState, images, segments) {\n    const segmentIndicies = [];\n    const referencedFramesPerSegment = [];\n\n    for (let i = 0; i < segments.length; i++) {\n        if (segments[i]) {\n            segmentIndicies.push(i);\n            referencedFramesPerSegment.push([]);\n        }\n    }\n\n    for (let z = 0; z < images.length; z++) {\n        const imageId = images[z].imageId;\n        const imageIdSpecificToolState = toolState[imageId];\n\n        for (let i = 0; i < segmentIndicies.length; i++) {\n            const segIdx = segmentIndicies[i];\n\n            if (\n                imageIdSpecificToolState &&\n                imageIdSpecificToolState.brush &&\n                imageIdSpecificToolState.brush.data &&\n                imageIdSpecificToolState.brush.data[segIdx] &&\n                imageIdSpecificToolState.brush.data[segIdx].pixelData\n            ) {\n                referencedFramesPerSegment[i].push(z);\n            }\n        }\n    }\n\n    return {\n        referencedFramesPerSegment,\n        segmentIndicies\n    };\n}\n\nfunction _getSegCount(seg, segments) {\n    let numSegments = 0;\n\n    for (let i = 0; i < segments.length; i++) {\n        if (segments[i]) {\n            numSegments++;\n        }\n    }\n\n    return numSegments;\n}\n\n/**\n * _createSegFromImages - description\n *\n * @param  {Object[]} images    An array of the cornerstone image objects.\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\n * @returns {Object}              The Seg derived dataSet.\n */\nfunction _createSegFromImages(images, isMultiframe, options) {\n    const datasets = [];\n\n    if (isMultiframe) {\n        const image = images[0];\n        const arrayBuffer = image.data.byteArray.buffer;\n\n        const dicomData = DicomMessage.readFile(arrayBuffer);\n        const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n\n        dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n\n        datasets.push(dataset);\n    } else {\n        for (let i = 0; i < images.length; i++) {\n            const image = images[i];\n            const arrayBuffer = image.data.byteArray.buffer;\n            const dicomData = DicomMessage.readFile(arrayBuffer);\n            const dataset = DicomMetaDictionary.naturalizeDataset(\n                dicomData.dict\n            );\n\n            dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n            datasets.push(dataset);\n        }\n    }\n\n    const multiframe = Normalizer.normalizeToDataset(datasets);\n\n    return new SegmentationDerivation([multiframe], options);\n}\n\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds    An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\n * @param {*} metadataProvider\n * @returns {Object}  The toolState and an object from which the\n *                    segment metadata can be derived.\n */\nfunction generateToolState(imageIds, arrayBuffer, metadataProvider) {\n    const dicomData = DicomMessage.readFile(arrayBuffer);\n    const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    const multiframe = Normalizer.normalizeToDataset([dataset]);\n\n    const imagePlaneModule = metadataProvider.get(\n        \"imagePlaneModule\",\n        imageIds[0]\n    );\n\n    if (!imagePlaneModule) {\n        console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n    }\n\n    const ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines)\n        ? [...imagePlaneModule.rowCosines, ...imagePlaneModule.columnCosines]\n        : [\n              imagePlaneModule.rowCosines.x,\n              imagePlaneModule.rowCosines.y,\n              imagePlaneModule.rowCosines.z,\n              imagePlaneModule.columnCosines.x,\n              imagePlaneModule.columnCosines.y,\n              imagePlaneModule.columnCosines.z\n          ];\n\n    // Get IOP from ref series, compute supported orientations:\n    const validOrientations = getValidOrientations(ImageOrientationPatient);\n\n    const SharedFunctionalGroupsSequence =\n        multiframe.SharedFunctionalGroupsSequence;\n\n    const sharedImageOrientationPatient =\n        SharedFunctionalGroupsSequence.PlaneOrientationSequence\n            ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n                  .ImageOrientationPatient\n            : undefined;\n\n    const sliceLength = multiframe.Columns * multiframe.Rows;\n    const segMetadata = getSegmentMetadata(multiframe);\n    const pixelData = unpackPixelData(multiframe);\n\n    const PerFrameFunctionalGroupsSequence =\n        multiframe.PerFrameFunctionalGroupsSequence;\n\n    const toolState = {};\n\n    let inPlane = true;\n\n    for (let i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {\n        const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];\n\n        const ImageOrientationPatientI =\n            sharedImageOrientationPatient ||\n            PerFrameFunctionalGroups.PlaneOrientationSequence\n                .ImageOrientationPatient;\n\n        const pixelDataI2D = ndarray(\n            new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength),\n            [multiframe.Rows, multiframe.Columns]\n        );\n\n        const alignedPixelDataI = alignPixelDataWithSourceData(\n            pixelDataI2D,\n            ImageOrientationPatientI,\n            validOrientations\n        );\n\n        if (!alignedPixelDataI) {\n            console.warn(\n                \"This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. \"\n            );\n            inPlane = false;\n            break;\n        }\n\n        const segmentIndex =\n            PerFrameFunctionalGroups.SegmentIdentificationSequence\n                .ReferencedSegmentNumber - 1;\n\n        let SourceImageSequence;\n        if (\n            SharedFunctionalGroupsSequence.DerivationImageSequence &&\n            SharedFunctionalGroupsSequence.DerivationImageSequence\n                .SourceImageSequence\n        ) {\n            SourceImageSequence =\n                SharedFunctionalGroupsSequence.DerivationImageSequence\n                    .SourceImageSequence[i];\n        } else {\n            SourceImageSequence =\n                PerFrameFunctionalGroups.DerivationImageSequence\n                    .SourceImageSequence;\n        }\n\n        const imageId = getImageIdOfSourceImage(\n            SourceImageSequence,\n            imageIds,\n            metadataProvider\n        );\n\n        addImageIdSpecificBrushToolState(\n            toolState,\n            imageId,\n            segmentIndex,\n            alignedPixelDataI\n        );\n    }\n\n    if (!inPlane) {\n        return;\n    }\n\n    return { toolState, segMetadata };\n}\n\n/**\n * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.\n *\n * @param  {Object} multiframe The multiframe dataset.\n * @return {Uint8Array}      The unpacked pixelData.\n */\nfunction unpackPixelData(multiframe) {\n    const segType = multiframe.SegmentationType;\n\n    if (segType === \"BINARY\") {\n        return BitArray.unpack(multiframe.PixelData);\n    }\n\n    const pixelData = new Uint8Array(multiframe.PixelData);\n\n    const max = multiframe.MaximumFractionalValue;\n    const onlyMaxAndZero =\n        pixelData.find(element => element !== 0 && element !== max) ===\n        undefined;\n\n    if (!onlyMaxAndZero) {\n        log.warn(\n            \"This is a fractional segmentation, which is not currently supported.\"\n        );\n        return;\n    }\n\n    log.warn(\n        \"This segmentation object is actually binary... processing as such.\"\n    );\n\n    return pixelData;\n}\n\n/**\n * addImageIdSpecificBrushToolState - Adds brush pixel data to cornerstoneTools\n * formatted toolState object.\n *\n * @param  {Object} toolState    The toolState object to modify\n * @param  {String} imageId      The imageId of the toolState to add the data.\n * @param  {Number} segmentIndex The index of the segment data being added.\n * @param  {Ndarray} pixelData2D  The pixelData in Ndarry 2D format.\n */\nfunction addImageIdSpecificBrushToolState(\n    toolState,\n    imageId,\n    segmentIndex,\n    pixelData2D\n) {\n    if (!toolState[imageId]) {\n        toolState[imageId] = {};\n        toolState[imageId].brush = {};\n        toolState[imageId].brush.data = [];\n    } else if (!toolState[imageId].brush) {\n        toolState[imageId].brush = {};\n        toolState[imageId].brush.data = [];\n    } else if (!toolState[imageId].brush.data) {\n        toolState[imageId].brush.data = [];\n    }\n\n    toolState[imageId].brush.data[segmentIndex] = {};\n\n    const brushDataI = toolState[imageId].brush.data[segmentIndex];\n\n    brushDataI.pixelData = new Uint8Array(pixelData2D.data.length);\n\n    const cToolsPixelData = brushDataI.pixelData;\n\n    for (let p = 0; p < cToolsPixelData.length; p++) {\n        if (pixelData2D.data[p]) {\n            cToolsPixelData[p] = 1;\n        } else {\n            cToolsPixelData[p] = 0;\n        }\n    }\n}\n\n/**\n * getImageIdOfSourceImage - Returns the Cornerstone imageId of the source image.\n *\n * @param  {Object} SourceImageSequence Sequence describing the source image.\n * @param  {String[]} imageIds          A list of imageIds.\n * @param  {Object} metadataProvider    A Cornerstone metadataProvider to query\n *                                      metadata from imageIds.\n * @return {String}                     The corresponding imageId.\n */\nfunction getImageIdOfSourceImage(\n    SourceImageSequence,\n    imageIds,\n    metadataProvider\n) {\n    const { ReferencedSOPInstanceUID, ReferencedFrameNumber } =\n        SourceImageSequence;\n\n    return ReferencedFrameNumber\n        ? getImageIdOfReferencedFrame(\n              ReferencedSOPInstanceUID,\n              ReferencedFrameNumber,\n              imageIds,\n              metadataProvider\n          )\n        : getImageIdOfReferencedSingleFramedSOPInstance(\n              ReferencedSOPInstanceUID,\n              imageIds,\n              metadataProvider\n          );\n}\n\n/**\n * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId\n * corresponding to the specified sopInstanceUid for single-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {String[]} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                 from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\nfunction getImageIdOfReferencedSingleFramedSOPInstance(\n    sopInstanceUid,\n    imageIds,\n    metadataProvider\n) {\n    return imageIds.find(imageId => {\n        const sopCommonModule = metadataProvider.get(\n            \"sopCommonModule\",\n            imageId\n        );\n        if (!sopCommonModule) {\n            return;\n        }\n\n        return sopCommonModule.sopInstanceUID === sopInstanceUid;\n    });\n}\n\n/**\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\n * specified sopInstanceUid and frameNumber for multi-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {Number} frameNumber      The frame number.\n * @param  {String} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                   from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\nfunction getImageIdOfReferencedFrame(\n    sopInstanceUid,\n    frameNumber,\n    imageIds,\n    metadataProvider\n) {\n    const imageId = imageIds.find(imageId => {\n        const sopCommonModule = metadataProvider.get(\n            \"sopCommonModule\",\n            imageId\n        );\n        if (!sopCommonModule) {\n            return;\n        }\n\n        const imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n\n        return (\n            //frameNumber is zero indexed for cornerstoneDICOMImageLoader image Ids.\n            sopCommonModule.sopInstanceUID === sopInstanceUid &&\n            imageIdFrameNumber === frameNumber - 1\n        );\n    });\n\n    return imageId;\n}\n\n/**\n * getValidOrientations - returns an array of valid orientations.\n *\n * @param  iop - The row (0..2) an column (3..5) direction cosines.\n * @return  An array of valid orientations.\n */\nfunction getValidOrientations(iop) {\n    const orientations = [];\n\n    // [0,  1,  2]: 0,   0hf,   0vf\n    // [3,  4,  5]: 90,  90hf,  90vf\n    // [6, 7]:      180, 270\n\n    orientations[0] = iop;\n    orientations[1] = flipIOP.h(iop);\n    orientations[2] = flipIOP.v(iop);\n\n    const iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);\n\n    orientations[3] = iop90;\n    orientations[4] = flipIOP.h(iop90);\n    orientations[5] = flipIOP.v(iop90);\n\n    orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);\n    orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);\n\n    return orientations;\n}\n\n/**\n * alignPixelDataWithSourceData -\n *\n * @param pixelData2D - The data to align.\n * @param iop - The orientation of the image slice.\n * @param orientations - An array of valid imageOrientationPatient values.\n * @return The aligned pixelData.\n */\nfunction alignPixelDataWithSourceData(pixelData2D, iop, orientations) {\n    if (compareIOP(iop, orientations[0])) {\n        //Same orientation.\n        return pixelData2D;\n    } else if (compareIOP(iop, orientations[1])) {\n        //Flipped vertically.\n        return flipMatrix2D.v(pixelData2D);\n    } else if (compareIOP(iop, orientations[2])) {\n        //Flipped horizontally.\n        return flipMatrix2D.h(pixelData2D);\n    } else if (compareIOP(iop, orientations[3])) {\n        //Rotated 90 degrees.\n        return rotateMatrix902D(pixelData2D);\n    } else if (compareIOP(iop, orientations[4])) {\n        //Rotated 90 degrees and fliped horizontally.\n        return flipMatrix2D.h(rotateMatrix902D(pixelData2D));\n    } else if (compareIOP(iop, orientations[5])) {\n        //Rotated 90 degrees and fliped vertically.\n        return flipMatrix2D.v(rotateMatrix902D(pixelData2D));\n    } else if (compareIOP(iop, orientations[6])) {\n        //Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n        return rotateMatrix902D(rotateMatrix902D(pixelData2D));\n    } else if (compareIOP(iop, orientations[7])) {\n        //Rotated 270 degrees.  // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n        return rotateMatrix902D(\n            rotateMatrix902D(rotateMatrix902D(pixelData2D))\n        );\n    }\n}\n\nconst dx = 1e-5;\n\n/**\n * compareIOP - Returns true if iop1 and iop2 are equal\n * within a tollerance, dx.\n *\n * @param  iop1 - An ImageOrientationPatient array.\n * @param  iop2 - An ImageOrientationPatient array.\n * @return True if iop1 and iop2 are equal.\n */\nfunction compareIOP(iop1, iop2) {\n    return (\n        Math.abs(iop1[0] - iop2[0]) < dx &&\n        Math.abs(iop1[1] - iop2[1]) < dx &&\n        Math.abs(iop1[2] - iop2[2]) < dx &&\n        Math.abs(iop1[3] - iop2[3]) < dx &&\n        Math.abs(iop1[4] - iop2[4]) < dx &&\n        Math.abs(iop1[5] - iop2[5]) < dx\n    );\n}\n\nfunction getSegmentMetadata(multiframe) {\n    const data = [];\n\n    const segmentSequence = multiframe.SegmentSequence;\n\n    if (Array.isArray(segmentSequence)) {\n        for (let segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n            data.push(segmentSequence[segIdx]);\n        }\n    } else {\n        // Only one segment, will be stored as an object.\n        data.push(segmentSequence);\n    }\n\n    return {\n        seriesInstanceUid:\n            multiframe.ReferencedSeriesSequence.SeriesInstanceUID,\n        data\n    };\n}\n","/**\n * Cornerstone adapters events\n */\nenum Events {\n    /**\n     * Cornerstone segmentation load progress event\n     */\n    SEGMENTATION_LOAD_PROGRESS = \"CORNERSTONE_ADAPTER_SEGMENTATION_LOAD_PROGRESS\"\n}\n\nexport default Events;\n","import {\n    log,\n    data as dcmjsData,\n    utilities,\n    normalizers,\n    derivations\n} from \"dcmjs\";\nimport ndarray from \"ndarray\";\nimport cloneDeep from \"lodash.clonedeep\";\n\nimport { Events } from \"../enums\";\n\nconst {\n    rotateDirectionCosinesInPlane,\n    flipImageOrientationPatient: flipIOP,\n    flipMatrix2D,\n    rotateMatrix902D,\n    nearlyEqual\n} = utilities.orientation;\n\nconst { BitArray, DicomMessage, DicomMetaDictionary } = dcmjsData;\n\nconst { Normalizer } = normalizers;\nconst { Segmentation: SegmentationDerivation } = derivations;\n\nconst { encode, decode } = utilities.compression;\n\n/**\n *\n * @typedef {Object} BrushData\n * @property {Object} toolState - The cornerstoneTools global toolState.\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\n *                                 seriesInstanceUid.\n */\nconst generateSegmentationDefaultOptions = {\n    includeSliceSpacing: true,\n    rleEncode: false\n};\n\n/**\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\n * imageIds, images and the cornerstoneTools brushData.\n *\n * @param  {object[]} images An array of cornerstone images that contain the source\n *                           data under `image.data.byteArray.buffer`.\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\n * @param  {Object} userOptions Options to pass to the segmentation derivation and `fillSegmentation`.\n * @returns {Blob}\n */\nfunction generateSegmentation(images, inputLabelmaps3D, userOptions = {}) {\n    const isMultiframe = images[0].imageId.includes(\"?frame\");\n    const segmentation = _createSegFromImages(\n        images,\n        isMultiframe,\n        userOptions\n    );\n\n    return fillSegmentation(segmentation, inputLabelmaps3D, userOptions);\n}\n\n/**\n * Fills a given segmentation object with data from the input labelmaps3D\n *\n * @param segmentation - The segmentation object to be filled.\n * @param inputLabelmaps3D - An array of 3D labelmaps, or a single 3D labelmap.\n * @param userOptions - Optional configuration settings. Will override the default options.\n *\n * @returns {object} The filled segmentation object.\n */\nfunction fillSegmentation(segmentation, inputLabelmaps3D, userOptions = {}) {\n    const options = Object.assign(\n        {},\n        generateSegmentationDefaultOptions,\n        userOptions\n    );\n\n    // Use another variable so we don't redefine labelmaps3D.\n    const labelmaps3D = Array.isArray(inputLabelmaps3D)\n        ? inputLabelmaps3D\n        : [inputLabelmaps3D];\n\n    let numberOfFrames = 0;\n    const referencedFramesPerLabelmap = [];\n\n    for (\n        let labelmapIndex = 0;\n        labelmapIndex < labelmaps3D.length;\n        labelmapIndex++\n    ) {\n        const labelmap3D = labelmaps3D[labelmapIndex];\n        const { labelmaps2D, metadata } = labelmap3D;\n\n        const referencedFramesPerSegment = [];\n\n        for (let i = 1; i < metadata.length; i++) {\n            if (metadata[i]) {\n                referencedFramesPerSegment[i] = [];\n            }\n        }\n\n        for (let i = 0; i < labelmaps2D.length; i++) {\n            const labelmap2D = labelmaps2D[i];\n\n            if (labelmaps2D[i]) {\n                const { segmentsOnLabelmap } = labelmap2D;\n\n                segmentsOnLabelmap.forEach(segmentIndex => {\n                    if (segmentIndex !== 0) {\n                        referencedFramesPerSegment[segmentIndex].push(i);\n                        numberOfFrames++;\n                    }\n                });\n            }\n        }\n\n        referencedFramesPerLabelmap[labelmapIndex] = referencedFramesPerSegment;\n    }\n\n    segmentation.setNumberOfFrames(numberOfFrames);\n\n    for (\n        let labelmapIndex = 0;\n        labelmapIndex < labelmaps3D.length;\n        labelmapIndex++\n    ) {\n        const referencedFramesPerSegment =\n            referencedFramesPerLabelmap[labelmapIndex];\n\n        const labelmap3D = labelmaps3D[labelmapIndex];\n        const { metadata } = labelmap3D;\n\n        for (\n            let segmentIndex = 1;\n            segmentIndex < referencedFramesPerSegment.length;\n            segmentIndex++\n        ) {\n            const referencedFrameIndicies =\n                referencedFramesPerSegment[segmentIndex];\n\n            if (referencedFrameIndicies) {\n                // Frame numbers start from 1.\n                const referencedFrameNumbers = referencedFrameIndicies.map(\n                    element => {\n                        return element + 1;\n                    }\n                );\n                const segmentMetadata = metadata[segmentIndex];\n                const labelmaps = _getLabelmapsFromReferencedFrameIndicies(\n                    labelmap3D,\n                    referencedFrameIndicies\n                );\n\n                segmentation.addSegmentFromLabelmap(\n                    segmentMetadata,\n                    labelmaps,\n                    segmentIndex,\n                    referencedFrameNumbers\n                );\n            }\n        }\n    }\n    if (options.rleEncode) {\n        const rleEncodedFrames = encode(\n            segmentation.dataset.PixelData,\n            numberOfFrames,\n            segmentation.dataset.Rows,\n            segmentation.dataset.Columns\n        );\n\n        // Must use fractional now to RLE encode, as the DICOM standard only allows BitStored && BitsAllocated\n        // to be 1 for BINARY. This is not ideal and there should be a better format for compression in this manner\n        // added to the standard.\n        segmentation.assignToDataset({\n            BitsAllocated: \"8\",\n            BitsStored: \"8\",\n            HighBit: \"7\",\n            SegmentationType: \"FRACTIONAL\",\n            SegmentationFractionalType: \"PROBABILITY\",\n            MaximumFractionalValue: \"255\"\n        });\n\n        segmentation.dataset._meta.TransferSyntaxUID = {\n            Value: [\"1.2.840.10008.1.2.5\"],\n            vr: \"UI\"\n        };\n        segmentation.dataset._vrMap.PixelData = \"OB\";\n        segmentation.dataset.PixelData = rleEncodedFrames;\n    } else {\n        // If no rleEncoding, at least bitpack the data.\n        segmentation.bitPackPixelData();\n    }\n\n    return segmentation;\n}\n\nfunction _getLabelmapsFromReferencedFrameIndicies(\n    labelmap3D,\n    referencedFrameIndicies\n) {\n    const { labelmaps2D } = labelmap3D;\n\n    const labelmaps = [];\n\n    for (let i = 0; i < referencedFrameIndicies.length; i++) {\n        const frame = referencedFrameIndicies[i];\n\n        labelmaps.push(labelmaps2D[frame].pixelData);\n    }\n\n    return labelmaps;\n}\n\n/**\n * _createSegFromImages - description\n *\n * @param  {Object[]} images    An array of the cornerstone image objects.\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\n * @returns {Object}              The Seg derived dataSet.\n */\nfunction _createSegFromImages(images, isMultiframe, options) {\n    const datasets = [];\n\n    if (isMultiframe) {\n        const image = images[0];\n        const arrayBuffer = image.data.byteArray.buffer;\n\n        const dicomData = DicomMessage.readFile(arrayBuffer);\n        const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n\n        dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n\n        datasets.push(dataset);\n    } else {\n        for (let i = 0; i < images.length; i++) {\n            const image = images[i];\n            const arrayBuffer = image.data.byteArray.buffer;\n            const dicomData = DicomMessage.readFile(arrayBuffer);\n            const dataset = DicomMetaDictionary.naturalizeDataset(\n                dicomData.dict\n            );\n\n            dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n            datasets.push(dataset);\n        }\n    }\n\n    const multiframe = Normalizer.normalizeToDataset(datasets);\n\n    return new SegmentationDerivation([multiframe], options);\n}\n\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds - An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer - The SEG arrayBuffer.\n * @param  {*} metadataProvider.\n * @param  {obj} options - Options object.\n *\n * @return {[]ArrayBuffer}a list of array buffer for each labelMap\n * @return {Object} an object from which the segment metadata can be derived\n * @return {[][][]} 2D list containing the track of segments per frame\n * @return {[][][]} 3D list containing the track of segments per frame for each labelMap\n *                  (available only for the overlapping case).\n */\nasync function generateToolState(\n    imageIds,\n    arrayBuffer,\n    metadataProvider,\n    options\n) {\n    const {\n        skipOverlapping = false,\n        tolerance = 1e-3,\n        TypedArrayConstructor = Uint8Array,\n        maxBytesPerChunk = 199000000,\n        eventTarget,\n        triggerEvent\n    } = options;\n    const dicomData = DicomMessage.readFile(arrayBuffer);\n    const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    const multiframe = Normalizer.normalizeToDataset([dataset]);\n\n    const imagePlaneModule = metadataProvider.get(\n        \"imagePlaneModule\",\n        imageIds[0]\n    );\n\n    const generalSeriesModule = metadataProvider.get(\n        \"generalSeriesModule\",\n        imageIds[0]\n    );\n\n    const SeriesInstanceUID = generalSeriesModule.seriesInstanceUID;\n\n    if (!imagePlaneModule) {\n        console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n    }\n\n    const ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines)\n        ? [...imagePlaneModule.rowCosines, ...imagePlaneModule.columnCosines]\n        : [\n              imagePlaneModule.rowCosines.x,\n              imagePlaneModule.rowCosines.y,\n              imagePlaneModule.rowCosines.z,\n              imagePlaneModule.columnCosines.x,\n              imagePlaneModule.columnCosines.y,\n              imagePlaneModule.columnCosines.z\n          ];\n\n    // Get IOP from ref series, compute supported orientations:\n    const validOrientations = getValidOrientations(ImageOrientationPatient);\n\n    const sliceLength = multiframe.Columns * multiframe.Rows;\n    const segMetadata = getSegmentMetadata(multiframe, SeriesInstanceUID);\n\n    const TransferSyntaxUID = multiframe._meta.TransferSyntaxUID.Value[0];\n\n    let pixelData;\n    let pixelDataChunks;\n\n    if (TransferSyntaxUID === \"1.2.840.10008.1.2.5\") {\n        const rleEncodedFrames = Array.isArray(multiframe.PixelData)\n            ? multiframe.PixelData\n            : [multiframe.PixelData];\n\n        pixelData = decode(\n            rleEncodedFrames,\n            multiframe.Rows,\n            multiframe.Columns\n        );\n\n        if (multiframe.BitsStored === 1) {\n            console.warn(\"No implementation for rle + bitbacking.\");\n\n            return;\n        }\n\n        // Todo: need to test this with rle data\n        pixelDataChunks = [pixelData];\n    } else {\n        pixelDataChunks = unpackPixelData(multiframe, { maxBytesPerChunk });\n\n        if (!pixelDataChunks) {\n            throw new Error(\"Fractional segmentations are not yet supported\");\n        }\n    }\n\n    const orientation = checkOrientation(\n        multiframe,\n        validOrientations,\n        [imagePlaneModule.rows, imagePlaneModule.columns, imageIds.length],\n        tolerance\n    );\n\n    // Pre-compute the sop UID to imageId index map so that in the for loop\n    // we don't have to call metadataProvider.get() for each imageId over\n    // and over again.\n    const sopUIDImageIdIndexMap = imageIds.reduce((acc, imageId) => {\n        const { sopInstanceUid } = metadataProvider.get(\n            \"generalImageModule\",\n            imageId\n        );\n        acc[sopInstanceUid] = imageId;\n        return acc;\n    }, {});\n\n    let overlapping = false;\n    if (!skipOverlapping) {\n        overlapping = checkSEGsOverlapping(\n            pixelDataChunks,\n            multiframe,\n            imageIds,\n            validOrientations,\n            metadataProvider,\n            tolerance,\n            TypedArrayConstructor,\n            sopUIDImageIdIndexMap\n        );\n    }\n\n    let insertFunction;\n\n    switch (orientation) {\n        case \"Planar\":\n            if (overlapping) {\n                insertFunction = insertOverlappingPixelDataPlanar;\n            } else {\n                insertFunction = insertPixelDataPlanar;\n            }\n            break;\n        case \"Perpendicular\":\n            //insertFunction = insertPixelDataPerpendicular;\n            throw new Error(\n                \"Segmentations orthogonal to the acquisition plane of the source data are not yet supported.\"\n            );\n        case \"Oblique\":\n            throw new Error(\n                \"Segmentations oblique to the acquisition plane of the source data are not yet supported.\"\n            );\n    }\n\n    /* if SEGs are overlapping:\n    1) the labelmapBuffer will contain M volumes which have non-overlapping segments;\n    2) segmentsOnFrame will have M * numberOfFrames values to track in which labelMap are the segments;\n    3) insertFunction will return the number of LabelMaps\n    4) generateToolState return is an array*/\n\n    const segmentsOnFrameArray = [];\n    segmentsOnFrameArray[0] = [];\n    const segmentsOnFrame = [];\n\n    const arrayBufferLength =\n        sliceLength * imageIds.length * TypedArrayConstructor.BYTES_PER_ELEMENT;\n    const labelmapBufferArray = [];\n    labelmapBufferArray[0] = new ArrayBuffer(arrayBufferLength);\n\n    // Precompute the indices and metadata so that we don't have to call\n    // a function for each imageId in the for loop.\n    const imageIdMaps = imageIds.reduce(\n        (acc, curr, index) => {\n            acc.indices[curr] = index;\n            acc.metadata[curr] = metadataProvider.get(\"instance\", curr);\n            return acc;\n        },\n        { indices: {}, metadata: {} }\n    );\n\n    // This is the centroid calculation for each segment Index, the data structure\n    // is a Map with key = segmentIndex and value = {imageIdIndex: centroid, ...}\n    // later on we will use this data structure to calculate the centroid of the\n    // segment in the labelmapBuffer\n    const segmentsPixelIndices = new Map();\n\n    await insertFunction(\n        segmentsOnFrame,\n        segmentsOnFrameArray,\n        labelmapBufferArray,\n        pixelDataChunks,\n        multiframe,\n        imageIds,\n        validOrientations,\n        metadataProvider,\n        tolerance,\n        TypedArrayConstructor,\n        segmentsPixelIndices,\n        sopUIDImageIdIndexMap,\n        imageIdMaps,\n        eventTarget,\n        triggerEvent\n    );\n\n    // calculate the centroid of each segment\n    const centroidXYZ = new Map();\n\n    segmentsPixelIndices.forEach((imageIdIndexBufferIndex, segmentIndex) => {\n        const { xAcc, yAcc, zAcc, count } = calculateCentroid(\n            imageIdIndexBufferIndex,\n            multiframe\n        );\n\n        centroidXYZ.set(segmentIndex, {\n            x: Math.floor(xAcc / count),\n            y: Math.floor(yAcc / count),\n            z: Math.floor(zAcc / count)\n        });\n    });\n\n    return {\n        labelmapBufferArray,\n        segMetadata,\n        segmentsOnFrame,\n        segmentsOnFrameArray,\n        centroids: centroidXYZ\n    };\n}\n\n// function insertPixelDataPerpendicular(\n//     segmentsOnFrame,\n//     labelmapBuffer,\n//     pixelData,\n//     multiframe,\n//     imageIds,\n//     validOrientations,\n//     metadataProvider\n// ) {\n//     const {\n//         SharedFunctionalGroupsSequence,\n//         PerFrameFunctionalGroupsSequence,\n//         Rows,\n//         Columns\n//     } = multiframe;\n\n//     const firstImagePlaneModule = metadataProvider.get(\n//         \"imagePlaneModule\",\n//         imageIds[0]\n//     );\n\n//     const lastImagePlaneModule = metadataProvider.get(\n//         \"imagePlaneModule\",\n//         imageIds[imageIds.length - 1]\n//     );\n\n//     console.log(firstImagePlaneModule);\n//     console.log(lastImagePlaneModule);\n\n//     const corners = [\n//         ...getCorners(firstImagePlaneModule),\n//         ...getCorners(lastImagePlaneModule)\n//     ];\n\n//     console.log(`corners:`);\n//     console.log(corners);\n\n//     const indexToWorld = mat4.create();\n\n//     const ippFirstFrame = firstImagePlaneModule.imagePositionPatient;\n//     const rowCosines = Array.isArray(firstImagePlaneModule.rowCosines)\n//         ? [...firstImagePlaneModule.rowCosines]\n//         : [\n//               firstImagePlaneModule.rowCosines.x,\n//               firstImagePlaneModule.rowCosines.y,\n//               firstImagePlaneModule.rowCosines.z\n//           ];\n\n//     const columnCosines = Array.isArray(firstImagePlaneModule.columnCosines)\n//         ? [...firstImagePlaneModule.columnCosines]\n//         : [\n//               firstImagePlaneModule.columnCosines.x,\n//               firstImagePlaneModule.columnCosines.y,\n//               firstImagePlaneModule.columnCosines.z\n//           ];\n\n//     const { pixelSpacing } = firstImagePlaneModule;\n\n//     mat4.set(\n//         indexToWorld,\n//         // Column 1\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[0],\n//         // Column 2\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[1],\n//         // Column 3\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[2],\n//         // Column 4\n//         0,\n//         0,\n//         0,\n//         1\n//     );\n\n//     // TODO -> Get origin and (x,y,z) increments to build a translation matrix:\n//     // TODO -> Equation C.7.6.2.1-1\n\n//     // | cx*di rx* Xx 0 |  |x|\n//     // | cy*di ry Xy 0 |  |y|\n//     // | cz*di rz Xz 0 |  |z|\n//     // | tx ty tz 1 |  |1|\n\n//     // const [\n//     //     0, 0 , 0 , 0,\n//     //     0, 0 , 0 , 0,\n//     //     0, 0 , 0 , 0,\n//     //     ipp[0], ipp[1] , ipp[2] , 1,\n//     // ]\n\n//     // Each frame:\n\n//     // Find which corner the first voxel lines up with (one of 8 corners.)\n\n//     // Find how i,j,k orient with respect to source volume.\n//     // Go through each frame, find location in source to start, and whether to increment +/ix,+/-y,+/-z\n//     //   through each voxel.\n\n//     // [1,0,0,0,1,0]\n\n//     // const [\n\n//     // ]\n\n//     // Invert transformation matrix to get worldToIndex\n\n//     // Apply world to index on each point to fill up the matrix.\n\n//     // const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence\n//     //     ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n//     //           .ImageOrientationPatient\n//     //     : undefined;\n//     // const sliceLength = Columns * Rows;\n// }\n\n// function getCorners(imagePlaneModule) {\n//     // console.log(imagePlaneModule);\n\n//     const {\n//         rows,\n//         columns,\n//         rowCosines,\n//         columnCosines,\n//         imagePositionPatient: ipp,\n//         rowPixelSpacing,\n//         columnPixelSpacing\n//     } = imagePlaneModule;\n\n//     const rowLength = columns * columnPixelSpacing;\n//     const columnLength = rows * rowPixelSpacing;\n\n//     const entireRowVector = [\n//         rowLength * columnCosines[0],\n//         rowLength * columnCosines[1],\n//         rowLength * columnCosines[2]\n//     ];\n\n//     const entireColumnVector = [\n//         columnLength * rowCosines[0],\n//         columnLength * rowCosines[1],\n//         columnLength * rowCosines[2]\n//     ];\n\n//     const topLeft = [ipp[0], ipp[1], ipp[2]];\n//     const topRight = [\n//         topLeft[0] + entireRowVector[0],\n//         topLeft[1] + entireRowVector[1],\n//         topLeft[2] + entireRowVector[2]\n//     ];\n//     const bottomLeft = [\n//         topLeft[0] + entireColumnVector[0],\n//         topLeft[1] + entireColumnVector[1],\n//         topLeft[2] + entireColumnVector[2]\n//     ];\n\n//     const bottomRight = [\n//         bottomLeft[0] + entireRowVector[0],\n//         bottomLeft[1] + entireRowVector[1],\n//         bottomLeft[2] + entireRowVector[2]\n//     ];\n\n//     return [topLeft, topRight, bottomLeft, bottomRight];\n// }\n\n/**\n * Find the reference frame of the segmentation frame in the source data.\n *\n * @param  {Object}      multiframe        dicom metadata\n * @param  {Int}         frameSegment      frame dicom index\n * @param  {String[]}    imageIds          A list of imageIds.\n * @param  {Object}      sopUIDImageIdIndexMap  A map of SOPInstanceUID to imageId\n * @param  {Float}       tolerance         The tolerance parameter\n *\n * @returns {String}     Returns the imageId\n */\nfunction findReferenceSourceImageId(\n    multiframe,\n    frameSegment,\n    imageIds,\n    metadataProvider,\n    tolerance,\n    sopUIDImageIdIndexMap\n) {\n    let imageId = undefined;\n\n    if (!multiframe) {\n        return imageId;\n    }\n\n    const {\n        FrameOfReferenceUID,\n        PerFrameFunctionalGroupsSequence,\n        SourceImageSequence,\n        ReferencedSeriesSequence\n    } = multiframe;\n\n    if (\n        !PerFrameFunctionalGroupsSequence ||\n        PerFrameFunctionalGroupsSequence.length === 0\n    ) {\n        return imageId;\n    }\n\n    const PerFrameFunctionalGroup =\n        PerFrameFunctionalGroupsSequence[frameSegment];\n\n    if (!PerFrameFunctionalGroup) {\n        return imageId;\n    }\n\n    let frameSourceImageSequence = undefined;\n    if (SourceImageSequence && SourceImageSequence.length !== 0) {\n        frameSourceImageSequence = SourceImageSequence[frameSegment];\n    } else if (PerFrameFunctionalGroup.DerivationImageSequence) {\n        let DerivationImageSequence =\n            PerFrameFunctionalGroup.DerivationImageSequence;\n        if (Array.isArray(DerivationImageSequence)) {\n            if (DerivationImageSequence.length !== 0) {\n                DerivationImageSequence = DerivationImageSequence[0];\n            } else {\n                DerivationImageSequence = undefined;\n            }\n        }\n\n        if (DerivationImageSequence) {\n            frameSourceImageSequence =\n                DerivationImageSequence.SourceImageSequence;\n            if (Array.isArray(frameSourceImageSequence)) {\n                if (frameSourceImageSequence.length !== 0) {\n                    frameSourceImageSequence = frameSourceImageSequence[0];\n                } else {\n                    frameSourceImageSequence = undefined;\n                }\n            }\n        }\n    }\n\n    if (frameSourceImageSequence) {\n        imageId = getImageIdOfSourceImageBySourceImageSequence(\n            frameSourceImageSequence,\n            sopUIDImageIdIndexMap\n        );\n    }\n\n    if (imageId === undefined && ReferencedSeriesSequence) {\n        const referencedSeriesSequence = Array.isArray(ReferencedSeriesSequence)\n            ? ReferencedSeriesSequence[0]\n            : ReferencedSeriesSequence;\n        const ReferencedSeriesInstanceUID =\n            referencedSeriesSequence.SeriesInstanceUID;\n\n        imageId = getImageIdOfSourceImagebyGeometry(\n            ReferencedSeriesInstanceUID,\n            FrameOfReferenceUID,\n            PerFrameFunctionalGroup,\n            imageIds,\n            metadataProvider,\n            tolerance\n        );\n    }\n\n    return imageId;\n}\n\n/**\n * Checks if there is any overlapping segmentations.\n *  @returns {boolean} Returns a flag if segmentations overlapping\n */\n\nfunction checkSEGsOverlapping(\n    pixelData,\n    multiframe,\n    imageIds,\n    validOrientations,\n    metadataProvider,\n    tolerance,\n    TypedArrayConstructor,\n    sopUIDImageIdIndexMap\n) {\n    const {\n        SharedFunctionalGroupsSequence,\n        PerFrameFunctionalGroupsSequence,\n        SegmentSequence,\n        Rows,\n        Columns\n    } = multiframe;\n\n    let numberOfSegs = SegmentSequence.length;\n    if (numberOfSegs < 2) {\n        return false;\n    }\n\n    const sharedImageOrientationPatient =\n        SharedFunctionalGroupsSequence.PlaneOrientationSequence\n            ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n                  .ImageOrientationPatient\n            : undefined;\n    const sliceLength = Columns * Rows;\n    const groupsLen = PerFrameFunctionalGroupsSequence.length;\n\n    /** sort groupsLen to have all the segments for each frame in an array\n     * frame 2 : 1, 2\n     * frame 4 : 1, 3\n     * frame 5 : 4\n     */\n\n    let frameSegmentsMapping = new Map();\n    for (let frameSegment = 0; frameSegment < groupsLen; ++frameSegment) {\n        const segmentIndex = getSegmentIndex(multiframe, frameSegment);\n        if (segmentIndex === undefined) {\n            console.warn(\n                \"Could not retrieve the segment index for frame segment \" +\n                    frameSegment +\n                    \", skipping this frame.\"\n            );\n            continue;\n        }\n\n        const imageId = findReferenceSourceImageId(\n            multiframe,\n            frameSegment,\n            imageIds,\n            metadataProvider,\n            tolerance,\n            sopUIDImageIdIndexMap\n        );\n\n        if (!imageId) {\n            console.warn(\n                \"Image not present in stack, can't import frame : \" +\n                    frameSegment +\n                    \".\"\n            );\n            continue;\n        }\n\n        const imageIdIndex = imageIds.findIndex(element => element === imageId);\n\n        if (frameSegmentsMapping.has(imageIdIndex)) {\n            let segmentArray = frameSegmentsMapping.get(imageIdIndex);\n            if (!segmentArray.includes(frameSegment)) {\n                segmentArray.push(frameSegment);\n                frameSegmentsMapping.set(imageIdIndex, segmentArray);\n            }\n        } else {\n            frameSegmentsMapping.set(imageIdIndex, [frameSegment]);\n        }\n    }\n\n    for (let [, role] of frameSegmentsMapping.entries()) {\n        let temp2DArray = new TypedArrayConstructor(sliceLength).fill(0);\n\n        for (let i = 0; i < role.length; ++i) {\n            const frameSegment = role[i];\n\n            const PerFrameFunctionalGroups =\n                PerFrameFunctionalGroupsSequence[frameSegment];\n\n            const ImageOrientationPatientI =\n                sharedImageOrientationPatient ||\n                PerFrameFunctionalGroups.PlaneOrientationSequence\n                    .ImageOrientationPatient;\n\n            const view = readFromUnpackedChunks(\n                pixelData,\n                frameSegment * sliceLength,\n                sliceLength\n            );\n\n            const pixelDataI2D = ndarray(view, [Rows, Columns]);\n\n            const alignedPixelDataI = alignPixelDataWithSourceData(\n                pixelDataI2D,\n                ImageOrientationPatientI,\n                validOrientations,\n                tolerance\n            );\n\n            if (!alignedPixelDataI) {\n                console.warn(\n                    \"Individual SEG frames are out of plane with respect to the first SEG frame, this is not yet supported, skipping this frame.\"\n                );\n                continue;\n            }\n\n            const data = alignedPixelDataI.data;\n            for (let j = 0, len = data.length; j < len; ++j) {\n                if (data[j] !== 0) {\n                    temp2DArray[j]++;\n                    if (temp2DArray[j] > 1) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction insertOverlappingPixelDataPlanar(\n    segmentsOnFrame,\n    segmentsOnFrameArray,\n    labelmapBufferArray,\n    pixelData,\n    multiframe,\n    imageIds,\n    validOrientations,\n    metadataProvider,\n    tolerance,\n    TypedArrayConstructor,\n    segmentsPixelIndices,\n    sopUIDImageIdIndexMap\n) {\n    const {\n        SharedFunctionalGroupsSequence,\n        PerFrameFunctionalGroupsSequence,\n        Rows,\n        Columns\n    } = multiframe;\n\n    const sharedImageOrientationPatient =\n        SharedFunctionalGroupsSequence.PlaneOrientationSequence\n            ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n                  .ImageOrientationPatient\n            : undefined;\n    const sliceLength = Columns * Rows;\n    const arrayBufferLength =\n        sliceLength * imageIds.length * TypedArrayConstructor.BYTES_PER_ELEMENT;\n    // indicate the number of labelMaps\n    let M = 1;\n\n    // indicate the current labelMap array index;\n    let m = 0;\n\n    // temp array for checking overlaps\n    let tempBuffer = labelmapBufferArray[m].slice(0);\n\n    // temp list for checking overlaps\n    let tempSegmentsOnFrame = cloneDeep(segmentsOnFrameArray[m]);\n\n    /** split overlapping SEGs algorithm for each segment:\n     *  A) copy the labelmapBuffer in the array with index 0\n     *  B) add the segment pixel per pixel on the copied buffer from (A)\n     *  C) if no overlap, copy the results back on the orignal array from (A)\n     *  D) if overlap, repeat increasing the index m up to M (if out of memory, add new buffer in the array and M++);\n     */\n\n    let numberOfSegs = multiframe.SegmentSequence.length;\n    for (\n        let segmentIndexToProcess = 1;\n        segmentIndexToProcess <= numberOfSegs;\n        ++segmentIndexToProcess\n    ) {\n        for (\n            let i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length;\n            i < groupsLen;\n            ++i\n        ) {\n            const PerFrameFunctionalGroups =\n                PerFrameFunctionalGroupsSequence[i];\n\n            const segmentIndex = getSegmentIndex(multiframe, i);\n            if (segmentIndex === undefined) {\n                throw new Error(\n                    \"Could not retrieve the segment index. Aborting segmentation loading.\"\n                );\n            }\n\n            if (segmentIndex !== segmentIndexToProcess) {\n                continue;\n            }\n\n            const ImageOrientationPatientI =\n                sharedImageOrientationPatient ||\n                PerFrameFunctionalGroups.PlaneOrientationSequence\n                    .ImageOrientationPatient;\n\n            // Since we moved to the chunks approach, we need to read the data\n            // and handle scenarios where the portion of data is in one chunk\n            // and the other portion is in another chunk\n            const view = readFromUnpackedChunks(\n                pixelData,\n                i * sliceLength,\n                sliceLength\n            );\n\n            const pixelDataI2D = ndarray(view, [Rows, Columns]);\n\n            const alignedPixelDataI = alignPixelDataWithSourceData(\n                pixelDataI2D,\n                ImageOrientationPatientI,\n                validOrientations,\n                tolerance\n            );\n\n            if (!alignedPixelDataI) {\n                throw new Error(\n                    \"Individual SEG frames are out of plane with respect to the first SEG frame. \" +\n                        \"This is not yet supported. Aborting segmentation loading.\"\n                );\n            }\n\n            const imageId = findReferenceSourceImageId(\n                multiframe,\n                i,\n                imageIds,\n                metadataProvider,\n                tolerance,\n                sopUIDImageIdIndexMap\n            );\n\n            if (!imageId) {\n                console.warn(\n                    \"Image not present in stack, can't import frame : \" +\n                        i +\n                        \".\"\n                );\n                continue;\n            }\n\n            const sourceImageMetadata = metadataProvider.get(\n                \"instance\",\n                imageId\n            );\n            if (\n                Rows !== sourceImageMetadata.Rows ||\n                Columns !== sourceImageMetadata.Columns\n            ) {\n                throw new Error(\n                    \"Individual SEG frames have different geometry dimensions (Rows and Columns) \" +\n                        \"respect to the source image reference frame. This is not yet supported. \" +\n                        \"Aborting segmentation loading. \"\n                );\n            }\n\n            const imageIdIndex = imageIds.findIndex(\n                element => element === imageId\n            );\n            const byteOffset =\n                sliceLength *\n                imageIdIndex *\n                TypedArrayConstructor.BYTES_PER_ELEMENT;\n\n            const labelmap2DView = new TypedArrayConstructor(\n                tempBuffer,\n                byteOffset,\n                sliceLength\n            );\n\n            const data = alignedPixelDataI.data;\n\n            let segmentOnFrame = false;\n            for (let j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {\n                if (data[j]) {\n                    if (labelmap2DView[j] !== 0) {\n                        m++;\n                        if (m >= M) {\n                            labelmapBufferArray[m] = new ArrayBuffer(\n                                arrayBufferLength\n                            );\n                            segmentsOnFrameArray[m] = [];\n                            M++;\n                        }\n                        tempBuffer = labelmapBufferArray[m].slice(0);\n                        tempSegmentsOnFrame = cloneDeep(\n                            segmentsOnFrameArray[m]\n                        );\n\n                        i = 0;\n                        break;\n                    } else {\n                        labelmap2DView[j] = segmentIndex;\n                        segmentOnFrame = true;\n                    }\n                }\n            }\n\n            if (segmentOnFrame) {\n                if (!tempSegmentsOnFrame[imageIdIndex]) {\n                    tempSegmentsOnFrame[imageIdIndex] = [];\n                }\n\n                tempSegmentsOnFrame[imageIdIndex].push(segmentIndex);\n\n                if (!segmentsOnFrame[imageIdIndex]) {\n                    segmentsOnFrame[imageIdIndex] = [];\n                }\n\n                segmentsOnFrame[imageIdIndex].push(segmentIndex);\n            }\n        }\n\n        labelmapBufferArray[m] = tempBuffer.slice(0);\n        segmentsOnFrameArray[m] = cloneDeep(tempSegmentsOnFrame);\n\n        // reset temp variables/buffers for new segment\n        m = 0;\n        tempBuffer = labelmapBufferArray[m].slice(0);\n        tempSegmentsOnFrame = cloneDeep(segmentsOnFrameArray[m]);\n    }\n}\n\nconst getSegmentIndex = (multiframe, frame) => {\n    const { PerFrameFunctionalGroupsSequence, SharedFunctionalGroupsSequence } =\n        multiframe;\n    const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[frame];\n    return PerFrameFunctionalGroups &&\n        PerFrameFunctionalGroups.SegmentIdentificationSequence\n        ? PerFrameFunctionalGroups.SegmentIdentificationSequence\n              .ReferencedSegmentNumber\n        : SharedFunctionalGroupsSequence.SegmentIdentificationSequence\n        ? SharedFunctionalGroupsSequence.SegmentIdentificationSequence\n              .ReferencedSegmentNumber\n        : undefined;\n};\n\nfunction insertPixelDataPlanar(\n    segmentsOnFrame,\n    segmentsOnFrameArray,\n    labelmapBufferArray,\n    pixelData,\n    multiframe,\n    imageIds,\n    validOrientations,\n    metadataProvider,\n    tolerance,\n    TypedArrayConstructor,\n    segmentsPixelIndices,\n    sopUIDImageIdIndexMap,\n    imageIdMaps,\n    eventTarget,\n    triggerEvent\n) {\n    const {\n        SharedFunctionalGroupsSequence,\n        PerFrameFunctionalGroupsSequence,\n        Rows,\n        Columns\n    } = multiframe;\n\n    const sharedImageOrientationPatient =\n        SharedFunctionalGroupsSequence.PlaneOrientationSequence\n            ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n                  .ImageOrientationPatient\n            : undefined;\n    const sliceLength = Columns * Rows;\n\n    let i = 0;\n    const groupsLen = PerFrameFunctionalGroupsSequence.length;\n    const chunkSize = Math.ceil(groupsLen / 10); // 10% of total length\n\n    const shouldTriggerEvent = triggerEvent && eventTarget;\n\n    // Below, we chunk the processing of the frames to avoid blocking the main thread\n    // if the segmentation is large. We also use a promise to allow the caller to\n    // wait for the processing to finish.\n    return new Promise(resolve => {\n        function processInChunks() {\n            // process one chunk\n            for (let end = Math.min(i + chunkSize, groupsLen); i < end; ++i) {\n                const PerFrameFunctionalGroups =\n                    PerFrameFunctionalGroupsSequence[i];\n\n                const ImageOrientationPatientI =\n                    sharedImageOrientationPatient ||\n                    PerFrameFunctionalGroups.PlaneOrientationSequence\n                        .ImageOrientationPatient;\n\n                const view = readFromUnpackedChunks(\n                    pixelData,\n                    i * sliceLength,\n                    sliceLength\n                );\n\n                const pixelDataI2D = ndarray(view, [Rows, Columns]);\n\n                const alignedPixelDataI = alignPixelDataWithSourceData(\n                    pixelDataI2D,\n                    ImageOrientationPatientI,\n                    validOrientations,\n                    tolerance\n                );\n\n                if (!alignedPixelDataI) {\n                    throw new Error(\n                        \"Individual SEG frames are out of plane with respect to the first SEG frame. \" +\n                            \"This is not yet supported. Aborting segmentation loading.\"\n                    );\n                }\n\n                const segmentIndex = getSegmentIndex(multiframe, i);\n\n                if (segmentIndex === undefined) {\n                    throw new Error(\n                        \"Could not retrieve the segment index. Aborting segmentation loading.\"\n                    );\n                }\n\n                if (!segmentsPixelIndices.has(segmentIndex)) {\n                    segmentsPixelIndices.set(segmentIndex, {});\n                }\n\n                const imageId = findReferenceSourceImageId(\n                    multiframe,\n                    i,\n                    imageIds,\n                    metadataProvider,\n                    tolerance,\n                    sopUIDImageIdIndexMap\n                );\n\n                if (!imageId) {\n                    console.warn(\n                        \"Image not present in stack, can't import frame : \" +\n                            i +\n                            \".\"\n                    );\n                    continue;\n                }\n\n                const sourceImageMetadata = imageIdMaps.metadata[imageId];\n                if (\n                    Rows !== sourceImageMetadata.Rows ||\n                    Columns !== sourceImageMetadata.Columns\n                ) {\n                    throw new Error(\n                        \"Individual SEG frames have different geometry dimensions (Rows and Columns) \" +\n                            \"respect to the source image reference frame. This is not yet supported. \" +\n                            \"Aborting segmentation loading. \"\n                    );\n                }\n\n                const imageIdIndex = imageIdMaps.indices[imageId];\n\n                const byteOffset =\n                    sliceLength *\n                    imageIdIndex *\n                    TypedArrayConstructor.BYTES_PER_ELEMENT;\n\n                const labelmap2DView = new TypedArrayConstructor(\n                    labelmapBufferArray[0],\n                    byteOffset,\n                    sliceLength\n                );\n\n                const data = alignedPixelDataI.data;\n\n                const indexCache = [];\n                for (\n                    let j = 0, len = alignedPixelDataI.data.length;\n                    j < len;\n                    ++j\n                ) {\n                    if (data[j]) {\n                        for (let x = j; x < len; ++x) {\n                            if (data[x]) {\n                                labelmap2DView[x] = segmentIndex;\n                                indexCache.push(x);\n                            }\n                        }\n\n                        if (!segmentsOnFrame[imageIdIndex]) {\n                            segmentsOnFrame[imageIdIndex] = [];\n                        }\n\n                        segmentsOnFrame[imageIdIndex].push(segmentIndex);\n\n                        break;\n                    }\n                }\n\n                const segmentIndexObject =\n                    segmentsPixelIndices.get(segmentIndex);\n                segmentIndexObject[imageIdIndex] = indexCache;\n                segmentsPixelIndices.set(segmentIndex, segmentIndexObject);\n            }\n\n            // trigger an event after each chunk\n            if (shouldTriggerEvent) {\n                const percentComplete = Math.round((i / groupsLen) * 100);\n                triggerEvent(eventTarget, Events.SEGMENTATION_LOAD_PROGRESS, {\n                    percentComplete\n                });\n            }\n\n            // schedule next chunk\n            if (i < groupsLen) {\n                setTimeout(processInChunks, 0);\n            } else {\n                // resolve the Promise when all chunks have been processed\n                resolve();\n            }\n        }\n\n        processInChunks();\n    });\n}\n\nfunction checkOrientation(\n    multiframe,\n    validOrientations,\n    sourceDataDimensions,\n    tolerance\n) {\n    const { SharedFunctionalGroupsSequence, PerFrameFunctionalGroupsSequence } =\n        multiframe;\n\n    const sharedImageOrientationPatient =\n        SharedFunctionalGroupsSequence.PlaneOrientationSequence\n            ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n                  .ImageOrientationPatient\n            : undefined;\n\n    // Check if in plane.\n    const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[0];\n\n    const iop =\n        sharedImageOrientationPatient ||\n        PerFrameFunctionalGroups.PlaneOrientationSequence\n            .ImageOrientationPatient;\n\n    const inPlane = validOrientations.some(operation =>\n        compareArrays(iop, operation, tolerance)\n    );\n\n    if (inPlane) {\n        return \"Planar\";\n    }\n\n    if (\n        checkIfPerpendicular(iop, validOrientations[0], tolerance) &&\n        sourceDataDimensions.includes(multiframe.Rows) &&\n        sourceDataDimensions.includes(multiframe.Columns)\n    ) {\n        // Perpendicular and fits on same grid.\n        return \"Perpendicular\";\n    }\n\n    return \"Oblique\";\n}\n\n/**\n * checkIfPerpendicular - Returns true if iop1 and iop2 are perpendicular\n * within a tolerance.\n *\n * @param  {Number[6]} iop1 An ImageOrientationPatient array.\n * @param  {Number[6]} iop2 An ImageOrientationPatient array.\n * @param  {Number} tolerance.\n * @return {Boolean} True if iop1 and iop2 are equal.\n */\nfunction checkIfPerpendicular(iop1, iop2, tolerance) {\n    const absDotColumnCosines = Math.abs(\n        iop1[0] * iop2[0] + iop1[1] * iop2[1] + iop1[2] * iop2[2]\n    );\n    const absDotRowCosines = Math.abs(\n        iop1[3] * iop2[3] + iop1[4] * iop2[4] + iop1[5] * iop2[5]\n    );\n\n    return (\n        (absDotColumnCosines < tolerance ||\n            Math.abs(absDotColumnCosines - 1) < tolerance) &&\n        (absDotRowCosines < tolerance ||\n            Math.abs(absDotRowCosines - 1) < tolerance)\n    );\n}\n\n/**\n * unpackPixelData - Unpacks bit packed pixelData if the Segmentation is BINARY.\n *\n * @param  {Object} multiframe The multiframe dataset.\n * @param  {Object} options    Options for the unpacking.\n * @return {Uint8Array}      The unpacked pixelData.\n */\nfunction unpackPixelData(multiframe, options) {\n    const segType = multiframe.SegmentationType;\n\n    let data;\n    if (Array.isArray(multiframe.PixelData)) {\n        data = multiframe.PixelData[0];\n    } else {\n        data = multiframe.PixelData;\n    }\n\n    if (data === undefined) {\n        log.error(\"This segmentation pixeldata is undefined.\");\n    }\n\n    if (segType === \"BINARY\") {\n        // For extreme big data, we can't unpack the data at once and we need to\n        // chunk it and unpack each chunk separately.\n        // MAX 2GB is the limit right now to allocate a buffer\n        return getUnpackedChunks(data, options.maxBytesPerChunk);\n    }\n\n    const pixelData = new Uint8Array(data);\n\n    const max = multiframe.MaximumFractionalValue;\n    const onlyMaxAndZero =\n        pixelData.find(element => element !== 0 && element !== max) ===\n        undefined;\n\n    if (!onlyMaxAndZero) {\n        // This is a fractional segmentation, which is not currently supported.\n        return;\n    }\n\n    log.warn(\n        \"This segmentation object is actually binary... processing as such.\"\n    );\n\n    return pixelData;\n}\n\nfunction getUnpackedChunks(data, maxBytesPerChunk) {\n    var bitArray = new Uint8Array(data);\n    var chunks = [];\n\n    var maxBitsPerChunk = maxBytesPerChunk * 8;\n    var numberOfChunks = Math.ceil((bitArray.length * 8) / maxBitsPerChunk);\n\n    for (var i = 0; i < numberOfChunks; i++) {\n        var startBit = i * maxBitsPerChunk;\n        var endBit = Math.min(startBit + maxBitsPerChunk, bitArray.length * 8);\n\n        var startByte = Math.floor(startBit / 8);\n        var endByte = Math.ceil(endBit / 8);\n\n        var chunk = bitArray.slice(startByte, endByte);\n        var unpackedChunk = BitArray.unpack(chunk);\n\n        chunks.push(unpackedChunk);\n    }\n\n    return chunks;\n}\n\n/**\n * getImageIdOfSourceImageBySourceImageSequence - Returns the Cornerstone imageId of the source image.\n *\n * @param  {Object}   SourceImageSequence  Sequence describing the source image.\n * @param  {String[]} imageIds             A list of imageIds.\n * @param  {Object}   sopUIDImageIdIndexMap A map of SOPInstanceUIDs to imageIds.\n * @return {String}                        The corresponding imageId.\n */\nfunction getImageIdOfSourceImageBySourceImageSequence(\n    SourceImageSequence,\n    sopUIDImageIdIndexMap\n) {\n    const { ReferencedSOPInstanceUID, ReferencedFrameNumber } =\n        SourceImageSequence;\n\n    return ReferencedFrameNumber\n        ? getImageIdOfReferencedFrame(\n              ReferencedSOPInstanceUID,\n              ReferencedFrameNumber,\n              sopUIDImageIdIndexMap\n          )\n        : sopUIDImageIdIndexMap[ReferencedSOPInstanceUID];\n}\n\n/**\n * getImageIdOfSourceImagebyGeometry - Returns the Cornerstone imageId of the source image.\n *\n * @param  {String}    ReferencedSeriesInstanceUID    Referenced series of the source image.\n * @param  {String}    FrameOfReferenceUID            Frame of reference.\n * @param  {Object}    PerFrameFunctionalGroup        Sequence describing segmentation reference attributes per frame.\n * @param  {String[]}  imageIds                       A list of imageIds.\n * @param  {Object}    sopUIDImageIdIndexMap          A map of SOPInstanceUIDs to imageIds.\n * @param  {Float}     tolerance                      The tolerance parameter\n *\n * @return {String}                                   The corresponding imageId.\n */\nfunction getImageIdOfSourceImagebyGeometry(\n    ReferencedSeriesInstanceUID,\n    FrameOfReferenceUID,\n    PerFrameFunctionalGroup,\n    imageIds,\n    metadataProvider,\n    tolerance\n) {\n    if (\n        ReferencedSeriesInstanceUID === undefined ||\n        PerFrameFunctionalGroup.PlanePositionSequence === undefined ||\n        PerFrameFunctionalGroup.PlanePositionSequence[0] === undefined ||\n        PerFrameFunctionalGroup.PlanePositionSequence[0]\n            .ImagePositionPatient === undefined\n    ) {\n        return undefined;\n    }\n\n    for (\n        let imageIdsIndexc = 0;\n        imageIdsIndexc < imageIds.length;\n        ++imageIdsIndexc\n    ) {\n        const sourceImageMetadata = metadataProvider.get(\n            \"instance\",\n            imageIds[imageIdsIndexc]\n        );\n\n        if (\n            sourceImageMetadata === undefined ||\n            sourceImageMetadata.ImagePositionPatient === undefined ||\n            sourceImageMetadata.FrameOfReferenceUID !== FrameOfReferenceUID ||\n            sourceImageMetadata.SeriesInstanceUID !==\n                ReferencedSeriesInstanceUID\n        ) {\n            continue;\n        }\n\n        if (\n            compareArrays(\n                PerFrameFunctionalGroup.PlanePositionSequence[0]\n                    .ImagePositionPatient,\n                sourceImageMetadata.ImagePositionPatient,\n                tolerance\n            )\n        ) {\n            return imageIds[imageIdsIndexc];\n        }\n    }\n}\n\n/**\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\n * specified sopInstanceUid and frameNumber for multi-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {Number} frameNumber      The frame number.\n * @param  {String} imageIds         The list of imageIds.\n * @param  {Object} sopUIDImageIdIndexMap A map of SOPInstanceUIDs to imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\nfunction getImageIdOfReferencedFrame(\n    sopInstanceUid,\n    frameNumber,\n    sopUIDImageIdIndexMap\n) {\n    const imageId = sopUIDImageIdIndexMap[sopInstanceUid];\n\n    if (!imageId) {\n        return;\n    }\n\n    const imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n\n    return imageIdFrameNumber === frameNumber - 1 ? imageId : undefined;\n}\n\n/**\n * getValidOrientations - returns an array of valid orientations.\n *\n * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.\n * @return {Number[8][6]} An array of valid orientations.\n */\nfunction getValidOrientations(iop) {\n    const orientations = [];\n\n    // [0,  1,  2]: 0,   0hf,   0vf\n    // [3,  4,  5]: 90,  90hf,  90vf\n    // [6, 7]:      180, 270\n\n    orientations[0] = iop;\n    orientations[1] = flipIOP.h(iop);\n    orientations[2] = flipIOP.v(iop);\n\n    const iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);\n\n    orientations[3] = iop90;\n    orientations[4] = flipIOP.h(iop90);\n    orientations[5] = flipIOP.v(iop90);\n\n    orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);\n    orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);\n\n    return orientations;\n}\n\n/**\n * alignPixelDataWithSourceData -\n *\n * @param {Ndarray} pixelData2D - The data to align.\n * @param {Number[6]} iop - The orientation of the image slice.\n * @param {Number[8][6]} orientations - An array of valid imageOrientationPatient values.\n * @param {Number} tolerance.\n * @return {Ndarray} The aligned pixelData.\n */\nfunction alignPixelDataWithSourceData(\n    pixelData2D,\n    iop,\n    orientations,\n    tolerance\n) {\n    if (compareArrays(iop, orientations[0], tolerance)) {\n        return pixelData2D;\n    } else if (compareArrays(iop, orientations[1], tolerance)) {\n        // Flipped vertically.\n\n        // Undo Flip\n        return flipMatrix2D.v(pixelData2D);\n    } else if (compareArrays(iop, orientations[2], tolerance)) {\n        // Flipped horizontally.\n\n        // Unfo flip\n        return flipMatrix2D.h(pixelData2D);\n    } else if (compareArrays(iop, orientations[3], tolerance)) {\n        //Rotated 90 degrees\n\n        // Rotate back\n        return rotateMatrix902D(pixelData2D);\n    } else if (compareArrays(iop, orientations[4], tolerance)) {\n        //Rotated 90 degrees and fliped horizontally.\n\n        // Undo flip and rotate back.\n        return rotateMatrix902D(flipMatrix2D.h(pixelData2D));\n    } else if (compareArrays(iop, orientations[5], tolerance)) {\n        // Rotated 90 degrees and fliped vertically\n\n        // Unfo flip and rotate back.\n        return rotateMatrix902D(flipMatrix2D.v(pixelData2D));\n    } else if (compareArrays(iop, orientations[6], tolerance)) {\n        // Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n\n        return rotateMatrix902D(rotateMatrix902D(pixelData2D));\n    } else if (compareArrays(iop, orientations[7], tolerance)) {\n        // Rotated 270 degrees\n\n        // Rotate back.\n        return rotateMatrix902D(\n            rotateMatrix902D(rotateMatrix902D(pixelData2D))\n        );\n    }\n}\n\n/**\n * compareArrays - Returns true if array1 and array2 are equal\n * within a tolerance.\n *\n * @param  {Number[]} array1 - An array.\n * @param  {Number[]} array2 - An array.\n * @param {Number} tolerance.\n * @return {Boolean} True if array1 and array2 are equal.\n */\nfunction compareArrays(array1, array2, tolerance) {\n    if (array1.length != array2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i) {\n        if (!nearlyEqual(array1[i], array2[i], tolerance)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getSegmentMetadata(multiframe, seriesInstanceUid) {\n    const segmentSequence = multiframe.SegmentSequence;\n    let data = [];\n\n    if (Array.isArray(segmentSequence)) {\n        data = [undefined, ...segmentSequence];\n    } else {\n        // Only one segment, will be stored as an object.\n        data = [undefined, segmentSequence];\n    }\n\n    return {\n        seriesInstanceUid,\n        data\n    };\n}\n\n/**\n * Reads a range of bytes from an array of ArrayBuffer chunks and\n * aggregate them into a new Uint8Array.\n *\n * @param {ArrayBuffer[]} chunks - An array of ArrayBuffer chunks.\n * @param {number} offset - The offset of the first byte to read.\n * @param {number} length - The number of bytes to read.\n * @returns {Uint8Array} A new Uint8Array containing the requested bytes.\n */\nfunction readFromUnpackedChunks(chunks, offset, length) {\n    const mapping = getUnpackedOffsetAndLength(chunks, offset, length);\n\n    // If all the data is in one chunk, we can just slice that chunk\n    if (mapping.start.chunkIndex === mapping.end.chunkIndex) {\n        return new Uint8Array(\n            chunks[mapping.start.chunkIndex].buffer,\n            mapping.start.offset,\n            length\n        );\n    } else {\n        // If the data spans multiple chunks, we need to create a new Uint8Array and copy the data from each chunk\n        let result = new Uint8Array(length);\n        let resultOffset = 0;\n\n        for (\n            let i = mapping.start.chunkIndex;\n            i <= mapping.end.chunkIndex;\n            i++\n        ) {\n            let start =\n                i === mapping.start.chunkIndex ? mapping.start.offset : 0;\n            let end =\n                i === mapping.end.chunkIndex\n                    ? mapping.end.offset\n                    : chunks[i].length;\n\n            result.set(\n                new Uint8Array(chunks[i].buffer, start, end - start),\n                resultOffset\n            );\n            resultOffset += end - start;\n        }\n\n        return result;\n    }\n}\n\nfunction getUnpackedOffsetAndLength(chunks, offset, length) {\n    var totalBytes = chunks.reduce((total, chunk) => total + chunk.length, 0);\n\n    if (offset < 0 || offset + length > totalBytes) {\n        throw new Error(\"Offset and length out of bounds\");\n    }\n\n    var startChunkIndex = 0;\n    var startOffsetInChunk = offset;\n\n    while (startOffsetInChunk >= chunks[startChunkIndex].length) {\n        startOffsetInChunk -= chunks[startChunkIndex].length;\n        startChunkIndex++;\n    }\n\n    var endChunkIndex = startChunkIndex;\n    var endOffsetInChunk = startOffsetInChunk + length;\n\n    while (endOffsetInChunk > chunks[endChunkIndex].length) {\n        endOffsetInChunk -= chunks[endChunkIndex].length;\n        endChunkIndex++;\n    }\n\n    return {\n        start: { chunkIndex: startChunkIndex, offset: startOffsetInChunk },\n        end: { chunkIndex: endChunkIndex, offset: endOffsetInChunk }\n    };\n}\n\nfunction calculateCentroid(imageIdIndexBufferIndex, multiframe) {\n    let xAcc = 0;\n    let yAcc = 0;\n    let zAcc = 0;\n    let count = 0;\n\n    for (const [imageIdIndex, bufferIndices] of Object.entries(\n        imageIdIndexBufferIndex\n    )) {\n        const z = Number(imageIdIndex);\n\n        if (!bufferIndices || bufferIndices.length === 0) {\n            continue;\n        }\n\n        for (const bufferIndex of bufferIndices) {\n            const y = Math.floor(bufferIndex / multiframe.Rows);\n            const x = bufferIndex % multiframe.Rows;\n\n            xAcc += x;\n            yAcc += y;\n            zAcc += z;\n\n            count++;\n        }\n    }\n\n    return { xAcc, yAcc, zAcc, count };\n}\n\nconst Segmentation = {\n    generateSegmentation,\n    generateToolState,\n    fillSegmentation\n};\n\nexport default Segmentation;\nexport { fillSegmentation, generateSegmentation, generateToolState };\n","import MeasurementReport from \"./MeasurementReport\";\nimport Length from \"./Length\";\nimport FreehandRoi from \"./FreehandRoi\";\nimport Bidirectional from \"./Bidirectional\";\nimport EllipticalRoi from \"./EllipticalRoi\";\nimport CircleRoi from \"./CircleRoi\";\nimport ArrowAnnotate from \"./ArrowAnnotate\";\nimport CobbAngle from \"./CobbAngle\";\nimport Angle from \"./Angle\";\nimport RectangleRoi from \"./RectangleRoi\";\n// Segmentation\nimport Segmentation from \"./Segmentation\";\n\nconst CornerstoneSR = {\n    Length,\n    FreehandRoi,\n    Bidirectional,\n    EllipticalRoi,\n    CircleRoi,\n    ArrowAnnotate,\n    MeasurementReport,\n    CobbAngle,\n    Angle,\n    RectangleRoi\n};\n\nconst CornerstoneSEG = {\n    Segmentation\n};\n\nexport { CornerstoneSR, CornerstoneSEG };\n","import Segmentation_3X from \"./Segmentation_3X\";\nimport Segmentation_4X from \"./Segmentation_4X\";\n\nconst Segmentation = {\n    generateSegmentation,\n    generateToolState,\n    fillSegmentation\n};\n\nexport default Segmentation;\n\n/**\n * generateSegmentation - Generates a DICOM Segmentation object given cornerstoneTools data.\n *\n * @param  {object[]} images    An array of the cornerstone image objects.\n * @param  {Object|Object[]} labelmaps3DorBrushData For 4.X: The cornerstone `Labelmap3D` object, or an array of objects.\n *                                                  For 3.X: the BrushData.\n * @param  {number} cornerstoneToolsVersion The cornerstoneTools major version to map against.\n * @returns {Object}\n */\nfunction generateSegmentation(\n    images,\n    labelmaps3DorBrushData,\n    options = { includeSliceSpacing: true },\n    cornerstoneToolsVersion = 4\n) {\n    if (cornerstoneToolsVersion === 4) {\n        return Segmentation_4X.generateSegmentation(\n            images,\n            labelmaps3DorBrushData,\n            options\n        );\n    }\n\n    if (cornerstoneToolsVersion === 3) {\n        return Segmentation_3X.generateSegmentation(\n            images,\n            labelmaps3DorBrushData,\n            options\n        );\n    }\n\n    console.warn(\n        `No generateSegmentation adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`\n    );\n}\n\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds    An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\n * @param {*} metadataProvider\n * @param  {bool} skipOverlapping - skip checks for overlapping segs, default value false.\n * @param  {number} tolerance - default value 1.e-3.\n * @param  {number} cornerstoneToolsVersion - default value 4.\n *\n * @returns {Object}  The toolState and an object from which the\n *                    segment metadata can be derived.\n */\nfunction generateToolState(\n    imageIds,\n    arrayBuffer,\n    metadataProvider,\n    skipOverlapping = false,\n    tolerance = 1e-3,\n    cornerstoneToolsVersion = 4\n) {\n    if (cornerstoneToolsVersion === 4) {\n        return Segmentation_4X.generateToolState(\n            imageIds,\n            arrayBuffer,\n            metadataProvider,\n            skipOverlapping,\n            tolerance\n        );\n    }\n\n    if (cornerstoneToolsVersion === 3) {\n        return Segmentation_3X.generateToolState(\n            imageIds,\n            arrayBuffer,\n            metadataProvider\n        );\n    }\n\n    console.warn(\n        `No generateToolState adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`\n    );\n}\n\n/**\n * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.\n *\n * @param  {object[]} segmentation An empty segmentation derived dataset.\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\n * @param  {Object} userOptions Options object to override default options.\n * @returns {Blob}           description\n */\nfunction fillSegmentation(\n    segmentation,\n    inputLabelmaps3D,\n    options = { includeSliceSpacing: true },\n    cornerstoneToolsVersion = 4\n) {\n    if (cornerstoneToolsVersion === 4) {\n        return Segmentation_4X.fillSegmentation(\n            segmentation,\n            inputLabelmaps3D,\n            options\n        );\n    }\n\n    console.warn(\n        `No generateSegmentation adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`\n    );\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","export default \"Cornerstone3DTools@^0.1.0\";\n","// This is a custom coding scheme defined to store some annotations from Cornerstone.\n// Note: CodeMeaning is VR type LO, which means we only actually support 64 characters\n// here this is fine for most labels, but may be problematic at some point.\nconst CORNERSTONEFREETEXT = \"CORNERSTONEFREETEXT\";\n\n// Cornerstone specified coding scheme for storing findings\nconst CodingSchemeDesignator = \"CORNERSTONEJS\";\n\nconst CodingScheme = {\n    CodingSchemeDesignator,\n    codeValues: {\n        CORNERSTONEFREETEXT\n    }\n};\n\nexport default CodingScheme;\n","import { normalizers, data, utilities, derivations } from \"dcmjs\";\n\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport { toArray, codeMeaningEquals } from \"../helpers\";\nimport Cornerstone3DCodingScheme from \"./CodingScheme\";\n\nconst { TID1500, addAccessors } = utilities;\n\nconst { StructuredReport } = derivations;\n\nconst { Normalizer } = normalizers;\n\nconst { TID1500MeasurementReport, TID1501MeasurementGroup } = TID1500;\n\nconst { DicomMetaDictionary } = data;\n\nconst FINDING = { CodingSchemeDesignator: \"DCM\", CodeValue: \"121071\" };\nconst FINDING_SITE = { CodingSchemeDesignator: \"SCT\", CodeValue: \"363698007\" };\nconst FINDING_SITE_OLD = { CodingSchemeDesignator: \"SRT\", CodeValue: \"G-C0E3\" };\n\nconst codeValueMatch = (group, code, oldCode?) => {\n    const { ConceptNameCodeSequence } = group;\n    if (!ConceptNameCodeSequence) return;\n    const { CodingSchemeDesignator, CodeValue } = ConceptNameCodeSequence;\n    return (\n        (CodingSchemeDesignator == code.CodingSchemeDesignator &&\n            CodeValue == code.CodeValue) ||\n        (oldCode &&\n            CodingSchemeDesignator == oldCode.CodingSchemeDesignator &&\n            CodeValue == oldCode.CodeValue)\n    );\n};\n\nfunction getTID300ContentItem(\n    tool,\n    toolType,\n    ReferencedSOPSequence,\n    toolClass,\n    worldToImageCoords\n) {\n    const args = toolClass.getTID300RepresentationArguments(\n        tool,\n        worldToImageCoords\n    );\n    args.ReferencedSOPSequence = ReferencedSOPSequence;\n\n    const TID300Measurement = new toolClass.TID300Representation(args);\n\n    return TID300Measurement;\n}\n\nfunction getMeasurementGroup(\n    toolType,\n    toolData,\n    ReferencedSOPSequence,\n    worldToImageCoords\n) {\n    const toolTypeData = toolData[toolType];\n    const toolClass =\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\n    if (\n        !toolTypeData ||\n        !toolTypeData.data ||\n        !toolTypeData.data.length ||\n        !toolClass\n    ) {\n        return;\n    }\n\n    // Loop through the array of tool instances\n    // for this tool\n    const Measurements = toolTypeData.data.map(tool => {\n        return getTID300ContentItem(\n            tool,\n            toolType,\n            ReferencedSOPSequence,\n            toolClass,\n            worldToImageCoords\n        );\n    });\n\n    return new TID1501MeasurementGroup(Measurements);\n}\n\nexport default class MeasurementReport {\n    public static CORNERSTONE_3D_TAG = CORNERSTONE_3D_TAG;\n    public static MEASUREMENT_BY_TOOLTYPE = {};\n    public static CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\n    public static CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\n\n    static getCornerstoneLabelFromDefaultState(defaultState) {\n        const { findingSites = [], finding } = defaultState;\n\n        const cornersoneFreeTextCodingValue =\n            Cornerstone3DCodingScheme.codeValues.CORNERSTONEFREETEXT;\n\n        const freeTextLabel = findingSites.find(\n            fs => fs.CodeValue === cornersoneFreeTextCodingValue\n        );\n\n        if (freeTextLabel) {\n            return freeTextLabel.CodeMeaning;\n        }\n\n        if (finding && finding.CodeValue === cornersoneFreeTextCodingValue) {\n            return finding.CodeMeaning;\n        }\n    }\n\n    static generateDatasetMeta() {\n        // TODO: what is the correct metaheader\n        // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n        // TODO: move meta creation to happen in derivations.js\n        const fileMetaInformationVersionArray = new Uint8Array(2);\n        fileMetaInformationVersionArray[1] = 1;\n\n        const _meta = {\n            FileMetaInformationVersion: {\n                Value: [fileMetaInformationVersionArray.buffer],\n                vr: \"OB\"\n            },\n            //MediaStorageSOPClassUID\n            //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n            TransferSyntaxUID: {\n                Value: [\"1.2.840.10008.1.2.1\"],\n                vr: \"UI\"\n            },\n            ImplementationClassUID: {\n                Value: [DicomMetaDictionary.uid()], // TODO: could be git hash or other valid id\n                vr: \"UI\"\n            },\n            ImplementationVersionName: {\n                Value: [\"dcmjs\"],\n                vr: \"SH\"\n            }\n        };\n\n        return _meta;\n    }\n\n    static generateDerivationSourceDataset = instance => {\n        const _vrMap = {\n            PixelData: \"OW\"\n        };\n\n        const _meta = MeasurementReport.generateDatasetMeta();\n\n        const derivationSourceDataset = {\n            ...instance,\n            _meta: _meta,\n            _vrMap: _vrMap\n        };\n\n        return derivationSourceDataset;\n    };\n\n    static getSetupMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        metadata,\n        toolType\n    ) {\n        const { ContentSequence } = MeasurementGroup;\n\n        const contentSequenceArr = toArray(ContentSequence);\n        const findingGroup = contentSequenceArr.find(group =>\n            codeValueMatch(group, FINDING)\n        );\n        const findingSiteGroups =\n            contentSequenceArr.filter(group =>\n                codeValueMatch(group, FINDING_SITE, FINDING_SITE_OLD)\n            ) || [];\n        const NUMGroup = contentSequenceArr.find(\n            group => group.ValueType === \"NUM\"\n        );\n        const SCOORDGroup = toArray(NUMGroup.ContentSequence).find(\n            group => group.ValueType === \"SCOORD\"\n        );\n        const { ReferencedSOPSequence } = SCOORDGroup.ContentSequence;\n        const { ReferencedSOPInstanceUID, ReferencedFrameNumber } =\n            ReferencedSOPSequence;\n\n        const referencedImageId =\n            sopInstanceUIDToImageIdMap[ReferencedSOPInstanceUID];\n        const imagePlaneModule = metadata.get(\n            \"imagePlaneModule\",\n            referencedImageId\n        );\n\n        const finding = findingGroup\n            ? addAccessors(findingGroup.ConceptCodeSequence)\n            : undefined;\n        const findingSites = findingSiteGroups.map(fsg => {\n            return addAccessors(fsg.ConceptCodeSequence);\n        });\n\n        const defaultState = {\n            description: undefined,\n            sopInstanceUid: ReferencedSOPInstanceUID,\n            annotation: {\n                annotationUID: DicomMetaDictionary.uid(),\n                metadata: {\n                    toolName: toolType,\n                    referencedImageId,\n                    FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n                    label: \"\"\n                },\n                data: undefined\n            },\n            finding,\n            findingSites\n        };\n        if (defaultState.finding) {\n            defaultState.description = defaultState.finding.CodeMeaning;\n        }\n\n        defaultState.annotation.metadata.label =\n            MeasurementReport.getCornerstoneLabelFromDefaultState(defaultState);\n\n        return {\n            defaultState,\n            NUMGroup,\n            SCOORDGroup,\n            ReferencedSOPSequence,\n            ReferencedSOPInstanceUID,\n            ReferencedFrameNumber\n        };\n    }\n\n    static generateReport(\n        toolState,\n        metadataProvider,\n        worldToImageCoords,\n        options\n    ) {\n        // ToolState for array of imageIDs to a Report\n        // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\n        let allMeasurementGroups = [];\n\n        /* Patient ID\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\n        */\n\n        const sopInstanceUIDsToSeriesInstanceUIDMap = {};\n        const derivationSourceDatasets = [];\n\n        const _meta = MeasurementReport.generateDatasetMeta();\n\n        // Loop through each image in the toolData\n        Object.keys(toolState).forEach(imageId => {\n            const sopCommonModule = metadataProvider.get(\n                \"sopCommonModule\",\n                imageId\n            );\n            const instance = metadataProvider.get(\"instance\", imageId);\n\n            const { sopInstanceUID, sopClassUID } = sopCommonModule;\n            const { SeriesInstanceUID: seriesInstanceUID } = instance;\n\n            sopInstanceUIDsToSeriesInstanceUIDMap[sopInstanceUID] =\n                seriesInstanceUID;\n\n            if (\n                !derivationSourceDatasets.find(\n                    dsd => dsd.SeriesInstanceUID === seriesInstanceUID\n                )\n            ) {\n                // Entry not present for series, create one.\n                const derivationSourceDataset =\n                    MeasurementReport.generateDerivationSourceDataset(instance);\n\n                derivationSourceDatasets.push(derivationSourceDataset);\n            }\n\n            const frameNumber = metadataProvider.get(\"frameNumber\", imageId);\n            const toolData = toolState[imageId];\n            const toolTypes = Object.keys(toolData);\n\n            const ReferencedSOPSequence = {\n                ReferencedSOPClassUID: sopClassUID,\n                ReferencedSOPInstanceUID: sopInstanceUID,\n                ReferencedFrameNumber: undefined\n            };\n\n            if (\n                (instance &&\n                    instance.NumberOfFrames &&\n                    instance.NumberOfFrames > 1) ||\n                Normalizer.isMultiframeSOPClassUID(sopClassUID)\n            ) {\n                ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\n            }\n\n            // Loop through each tool type for the image\n            const measurementGroups = [];\n\n            toolTypes.forEach(toolType => {\n                const group = getMeasurementGroup(\n                    toolType,\n                    toolData,\n                    ReferencedSOPSequence,\n                    worldToImageCoords\n                );\n                if (group) {\n                    measurementGroups.push(group);\n                }\n            });\n\n            allMeasurementGroups =\n                allMeasurementGroups.concat(measurementGroups);\n        });\n\n        const tid1500MeasurementReport = new TID1500MeasurementReport(\n            { TID1501MeasurementGroups: allMeasurementGroups },\n            options\n        );\n\n        const report = new StructuredReport(derivationSourceDatasets, options);\n\n        const contentItem = tid1500MeasurementReport.contentItem(\n            derivationSourceDatasets,\n            { ...options, sopInstanceUIDsToSeriesInstanceUIDMap }\n        );\n\n        // Merge the derived dataset with the content from the Measurement Report\n        report.dataset = Object.assign(report.dataset, contentItem);\n        report.dataset._meta = _meta;\n\n        return report;\n    }\n\n    /**\n     * Generate Cornerstone tool state from dataset\n     */\n    static generateToolState(\n        dataset,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata,\n        hooks\n    ) {\n        // For now, bail out if the dataset is not a TID1500 SR with length measurements\n        if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n            throw new Error(\n                \"This package can currently only interpret DICOM SR TID 1500\"\n            );\n        }\n\n        const REPORT = \"Imaging Measurements\";\n        const GROUP = \"Measurement Group\";\n        const TRACKING_IDENTIFIER = \"Tracking Identifier\";\n\n        // Identify the Imaging Measurements\n        const imagingMeasurementContent = toArray(dataset.ContentSequence).find(\n            codeMeaningEquals(REPORT)\n        );\n\n        // Retrieve the Measurements themselves\n        const measurementGroups = toArray(\n            imagingMeasurementContent.ContentSequence\n        ).filter(codeMeaningEquals(GROUP));\n\n        // For each of the supported measurement types, compute the measurement data\n        const measurementData = {};\n\n        const cornerstoneToolClasses =\n            MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\n        const registeredToolClasses = [];\n\n        Object.keys(cornerstoneToolClasses).forEach(key => {\n            registeredToolClasses.push(cornerstoneToolClasses[key]);\n            measurementData[key] = [];\n        });\n\n        measurementGroups.forEach(measurementGroup => {\n            try {\n                const measurementGroupContentSequence = toArray(\n                    measurementGroup.ContentSequence\n                );\n\n                const TrackingIdentifierGroup =\n                    measurementGroupContentSequence.find(\n                        contentItem =>\n                            contentItem.ConceptNameCodeSequence.CodeMeaning ===\n                            TRACKING_IDENTIFIER\n                    );\n\n                const TrackingIdentifierValue =\n                    TrackingIdentifierGroup.TextValue;\n\n                const toolClass =\n                    hooks?.getToolClass?.(\n                        measurementGroup,\n                        dataset,\n                        registeredToolClasses\n                    ) ||\n                    registeredToolClasses.find(tc =>\n                        tc.isValidCornerstoneTrackingIdentifier(\n                            TrackingIdentifierValue\n                        )\n                    );\n\n                if (toolClass) {\n                    const measurement = toolClass.getMeasurementData(\n                        measurementGroup,\n                        sopInstanceUIDToImageIdMap,\n                        imageToWorldCoords,\n                        metadata\n                    );\n\n                    console.log(`=== ${toolClass.toolType} ===`);\n                    console.log(measurement);\n\n                    measurementData[toolClass.toolType].push(measurement);\n                }\n            } catch (e) {\n                console.warn(\n                    \"Unable to generate tool state for\",\n                    measurementGroup,\n                    e\n                );\n            }\n        });\n\n        // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\n        // That is up to the consumer to derive from the SOPInstanceUIDs.\n        return measurementData;\n    }\n\n    /**\n     * Register a new tool type.\n     * @param toolClass to perform I/O to DICOM for this tool\n     */\n    public static registerTool(toolClass) {\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[\n            toolClass.utilityToolType\n        ] = toolClass;\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[\n            toolClass.toolType\n        ] = toolClass;\n        MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] =\n            toolClass.utilityToolType;\n    }\n}\n","import MeasurementReport from \"./MeasurementReport\";\nimport { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport CodingScheme from \"./CodingScheme\";\n\nconst { Point: TID300Point } = utilities.TID300;\n\nconst ARROW_ANNOTATE = \"ArrowAnnotate\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${ARROW_ANNOTATE}`;\n\nconst { codeValues, CodingSchemeDesignator } = CodingScheme;\n\nclass ArrowAnnotate {\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                ArrowAnnotate.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const text = defaultState.annotation.metadata.label;\n\n        const { GraphicData } = SCOORDGroup;\n\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        // Since the arrowAnnotate measurement is just a point, to generate the tool state\n        // we derive the second point based on the image size relative to the first point.\n        if (worldCoords.length === 1) {\n            const imagePixelModule = metadata.get(\n                \"imagePixelModule\",\n                referencedImageId\n            );\n\n            let xOffset = 10;\n            let yOffset = 10;\n\n            if (imagePixelModule) {\n                const { columns, rows } = imagePixelModule;\n                xOffset = columns / 10;\n                yOffset = rows / 10;\n            }\n\n            const secondPoint = imageToWorldCoords(referencedImageId, [\n                GraphicData[0] + xOffset,\n                GraphicData[1] + yOffset\n            ]);\n\n            worldCoords.push(secondPoint);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            text,\n            handles: {\n                arrowFirst: true,\n                points: [worldCoords[0], worldCoords[1]],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, metadata } = tool;\n        let { finding, findingSites } = tool;\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"ArrowAnnotate.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const { points, arrowFirst } = data.handles;\n\n        let point;\n\n        if (arrowFirst) {\n            point = points[0];\n        } else {\n            point = points[1];\n        }\n\n        const pointImage = worldToImageCoords(referencedImageId, point);\n\n        const TID300RepresentationArguments = {\n            points: [\n                {\n                    x: pointImage[0],\n                    y: pointImage[1]\n                }\n            ],\n            trackingIdentifierTextValue,\n            findingSites: findingSites || []\n        };\n\n        // If freetext finding isn't present, add it from the tool text.\n        if (!finding || finding.CodeValue !== codeValues.CORNERSTONEFREETEXT) {\n            finding = {\n                CodeValue: codeValues.CORNERSTONEFREETEXT,\n                CodingSchemeDesignator,\n                CodeMeaning: data.text\n            };\n        }\n\n        TID300RepresentationArguments.finding = finding;\n\n        return TID300RepresentationArguments;\n    }\n}\n\nArrowAnnotate.toolType = ARROW_ANNOTATE;\nArrowAnnotate.utilityToolType = ARROW_ANNOTATE;\nArrowAnnotate.TID300Representation = TID300Point;\nArrowAnnotate.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n        return false;\n    }\n\n    return toolType === ARROW_ANNOTATE;\n};\n\nMeasurementReport.registerTool(ArrowAnnotate);\n\nexport default ArrowAnnotate;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport { toArray } from \"../helpers\";\n\nconst { Bidirectional: TID300Bidirectional } = utilities.TID300;\n\nconst BIDIRECTIONAL = \"Bidirectional\";\nconst LONG_AXIS = \"Long Axis\";\nconst SHORT_AXIS = \"Short Axis\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${BIDIRECTIONAL}`;\n\nclass Bidirectional {\n    public static toolType = BIDIRECTIONAL;\n    public static utilityToolType = BIDIRECTIONAL;\n    public static TID300Representation = TID300Bidirectional;\n    public static isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n        if (!TrackingIdentifier.includes(\":\")) {\n            return false;\n        }\n\n        const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n            return false;\n        }\n\n        return toolType === BIDIRECTIONAL;\n    };\n\n    public static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                Bidirectional.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n        const { ContentSequence } = MeasurementGroup;\n\n        const longAxisNUMGroup = toArray(ContentSequence).find(\n            group => group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS\n        );\n\n        const longAxisSCOORDGroup = toArray(\n            longAxisNUMGroup.ContentSequence\n        ).find(group => group.ValueType === \"SCOORD\");\n\n        const shortAxisNUMGroup = toArray(ContentSequence).find(\n            group => group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS\n        );\n\n        const shortAxisSCOORDGroup = toArray(\n            shortAxisNUMGroup.ContentSequence\n        ).find(group => group.ValueType === \"SCOORD\");\n\n        const worldCoords = [];\n\n        [longAxisSCOORDGroup, shortAxisSCOORDGroup].forEach(group => {\n            const { GraphicData } = group;\n            for (let i = 0; i < GraphicData.length; i += 2) {\n                const point = imageToWorldCoords(referencedImageId, [\n                    GraphicData[i],\n                    GraphicData[i + 1]\n                ]);\n                worldCoords.push(point);\n            }\n        });\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [\n                    worldCoords[0],\n                    worldCoords[1],\n                    worldCoords[2],\n                    worldCoords[3]\n                ],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    length: longAxisNUMGroup.MeasuredValueSequence.NumericValue,\n                    width: shortAxisNUMGroup.MeasuredValueSequence.NumericValue\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"Bidirectional.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const { length, width } =\n            cachedStats[`imageId:${referencedImageId}`] || {};\n        const { points } = handles;\n\n        // Find the length and width point pairs by comparing the distances of the points at 0,1 to points at 2,3\n        const firstPointPairs = [points[0], points[1]];\n        const secondPointPairs = [points[2], points[3]];\n\n        const firstPointPairsDistance = Math.sqrt(\n            Math.pow(firstPointPairs[0][0] - firstPointPairs[1][0], 2) +\n                Math.pow(firstPointPairs[0][1] - firstPointPairs[1][1], 2) +\n                Math.pow(firstPointPairs[0][2] - firstPointPairs[1][2], 2)\n        );\n\n        const secondPointPairsDistance = Math.sqrt(\n            Math.pow(secondPointPairs[0][0] - secondPointPairs[1][0], 2) +\n                Math.pow(secondPointPairs[0][1] - secondPointPairs[1][1], 2) +\n                Math.pow(secondPointPairs[0][2] - secondPointPairs[1][2], 2)\n        );\n\n        let shortAxisPoints;\n        let longAxisPoints;\n        if (firstPointPairsDistance > secondPointPairsDistance) {\n            shortAxisPoints = firstPointPairs;\n            longAxisPoints = secondPointPairs;\n        } else {\n            shortAxisPoints = secondPointPairs;\n            longAxisPoints = firstPointPairs;\n        }\n\n        const longAxisStartImage = worldToImageCoords(\n            referencedImageId,\n            shortAxisPoints[0]\n        );\n        const longAxisEndImage = worldToImageCoords(\n            referencedImageId,\n            shortAxisPoints[1]\n        );\n        const shortAxisStartImage = worldToImageCoords(\n            referencedImageId,\n            longAxisPoints[0]\n        );\n        const shortAxisEndImage = worldToImageCoords(\n            referencedImageId,\n            longAxisPoints[1]\n        );\n\n        return {\n            longAxis: {\n                point1: {\n                    x: longAxisStartImage[0],\n                    y: longAxisStartImage[1]\n                },\n                point2: {\n                    x: longAxisEndImage[0],\n                    y: longAxisEndImage[1]\n                }\n            },\n            shortAxis: {\n                point1: {\n                    x: shortAxisStartImage[0],\n                    y: shortAxisStartImage[1]\n                },\n                point2: {\n                    x: shortAxisEndImage[0],\n                    y: shortAxisEndImage[1]\n                }\n            },\n            longAxisLength: length,\n            shortAxisLength: width,\n            trackingIdentifierTextValue,\n            finding: finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(Bidirectional);\n\nexport default Bidirectional;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\n\nconst { CobbAngle: TID300CobbAngle } = utilities.TID300;\n\nconst MEASUREMENT_TYPE = \"Angle\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${MEASUREMENT_TYPE}`;\n\nclass Angle {\n    public static toolType = MEASUREMENT_TYPE;\n    public static utilityToolType = MEASUREMENT_TYPE;\n    public static TID300Representation = TID300CobbAngle;\n    public static isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n        if (!TrackingIdentifier.includes(\":\")) {\n            return false;\n        }\n\n        const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n            return false;\n        }\n\n        return toolType === MEASUREMENT_TYPE;\n    };\n\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    public static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                Angle.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [worldCoords[0], worldCoords[1], worldCoords[3]],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    angle: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : null\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    public static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"Angle.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const start1 = worldToImageCoords(referencedImageId, handles.points[0]);\n        const middle = worldToImageCoords(referencedImageId, handles.points[1]);\n\n        const end = worldToImageCoords(referencedImageId, handles.points[2]);\n\n        const point1 = { x: start1[0], y: start1[1] };\n        const point2 = { x: middle[0], y: middle[1] };\n        const point3 = point2;\n        const point4 = { x: end[0], y: end[1] };\n\n        const { angle } = cachedStats[`imageId:${referencedImageId}`] || {};\n\n        // Represented as a cobb angle\n        return {\n            point1,\n            point2,\n            point3,\n            point4,\n            rAngle: angle,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(Angle);\n\nexport default Angle;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\n\nconst { CobbAngle: TID300CobbAngle } = utilities.TID300;\n\nconst MEASUREMENT_TYPE = \"CobbAngle\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${MEASUREMENT_TYPE}`;\n\nclass CobbAngle {\n    public static toolType = MEASUREMENT_TYPE;\n    public static utilityToolType = MEASUREMENT_TYPE;\n    public static TID300Representation = TID300CobbAngle;\n    public static isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n        if (!TrackingIdentifier.includes(\":\")) {\n            return false;\n        }\n\n        const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n            return false;\n        }\n\n        return toolType === MEASUREMENT_TYPE;\n    };\n\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    public static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                CobbAngle.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [\n                    worldCoords[0],\n                    worldCoords[1],\n                    worldCoords[2],\n                    worldCoords[3]\n                ],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    angle: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : null\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    public static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"CobbAngle.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const start1 = worldToImageCoords(referencedImageId, handles.points[0]);\n        const end1 = worldToImageCoords(referencedImageId, handles.points[1]);\n\n        const start2 = worldToImageCoords(referencedImageId, handles.points[2]);\n        const end2 = worldToImageCoords(referencedImageId, handles.points[3]);\n\n        const point1 = { x: start1[0], y: start1[1] };\n        const point2 = { x: end1[0], y: end1[1] };\n        const point3 = { x: start2[0], y: start2[1] };\n        const point4 = { x: end2[0], y: end2[1] };\n\n        const { angle } = cachedStats[`imageId:${referencedImageId}`] || {};\n\n        return {\n            point1,\n            point2,\n            point3,\n            point4,\n            rAngle: angle,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(CobbAngle);\n\nexport default CobbAngle;\n","import CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\n\nexport default function isValidCornerstoneTrackingIdentifier(\n    trackingIdentifier: string\n): boolean {\n    if (!trackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone3DTag, toolType] = trackingIdentifier.split(\":\");\n\n    if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n        return false;\n    }\n\n    // The following is needed since the new cornerstone3D has changed\n    // case names such as EllipticalRoi to EllipticalROI\n    return toolType.toLowerCase() === this.toolType.toLowerCase();\n}\n","import { utilities } from \"dcmjs\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport isValidCornerstoneTrackingIdentifier from \"./isValidCornerstoneTrackingIdentifier\";\n\nconst { Circle: TID300Circle } = utilities.TID300;\n\nconst CIRCLEROI = \"CircleROI\";\n\nclass CircleROI {\n    static trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${CIRCLEROI}`;\n    static toolType = CIRCLEROI;\n    static utilityToolType = CIRCLEROI;\n    static TID300Representation = TID300Circle;\n    static isValidCornerstoneTrackingIdentifier =\n        isValidCornerstoneTrackingIdentifier;\n\n    /** Gets the measurement data for cornerstone, given DICOM SR measurement data. */\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                CircleROI.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n\n        // GraphicData is ordered as [centerX, centerY, endX, endY]\n        const pointsWorld = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const worldPos = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n\n            pointsWorld.push(worldPos);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [...pointsWorld],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    area: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : 0,\n                    // Dummy values to be updated by cornerstone\n                    radius: 0,\n                    perimeter: 0\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    /**\n     * Gets the TID 300 representation of a circle, given the cornerstone representation.\n     *\n     * @param {Object} tool\n     * @returns\n     */\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"CircleROI.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const center = worldToImageCoords(referencedImageId, handles.points[0]);\n        const end = worldToImageCoords(referencedImageId, handles.points[1]);\n\n        const points = [];\n        points.push({ x: center[0], y: center[1] });\n        points.push({ x: end[0], y: end[1] });\n\n        const { area, radius } =\n            cachedStats[`imageId:${referencedImageId}`] || {};\n        const perimeter = 2 * Math.PI * radius;\n\n        return {\n            area,\n            perimeter,\n            radius,\n            points,\n            trackingIdentifierTextValue: this.trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(CircleROI);\n\nexport default CircleROI;\n","import { vec3 } from \"gl-matrix\";\nimport { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\nimport isValidCornerstoneTrackingIdentifier from \"./isValidCornerstoneTrackingIdentifier\";\n\ntype Point3 = [number, number, number];\n\nconst { Ellipse: TID300Ellipse } = utilities.TID300;\n\nconst ELLIPTICALROI = \"EllipticalROI\";\nconst EPSILON = 1e-4;\n\nclass EllipticalROI {\n    static trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${ELLIPTICALROI}`;\n    static toolType = ELLIPTICALROI;\n    static utilityToolType = ELLIPTICALROI;\n    static TID300Representation = TID300Ellipse;\n    static isValidCornerstoneTrackingIdentifier =\n        isValidCornerstoneTrackingIdentifier;\n\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                EllipticalROI.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n\n        // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\n        // But Cornerstone3D points are ordered as top, bottom, left, right for the\n        // ellipse so we need to identify if the majorAxis is horizontal or vertical\n        // in the image plane and then choose the correct points to use for the ellipse.\n        const pointsWorld: Point3[] = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const worldPos = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n\n            pointsWorld.push(worldPos);\n        }\n\n        const majorAxisStart = vec3.fromValues(...pointsWorld[0]);\n        const majorAxisEnd = vec3.fromValues(...pointsWorld[1]);\n        const minorAxisStart = vec3.fromValues(...pointsWorld[2]);\n        const minorAxisEnd = vec3.fromValues(...pointsWorld[3]);\n\n        const majorAxisVec = vec3.create();\n        vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);\n\n        // normalize majorAxisVec to avoid scaling issues\n        vec3.normalize(majorAxisVec, majorAxisVec);\n\n        const minorAxisVec = vec3.create();\n        vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);\n        vec3.normalize(minorAxisVec, minorAxisVec);\n\n        const imagePlaneModule = metadata.get(\n            \"imagePlaneModule\",\n            referencedImageId\n        );\n\n        if (!imagePlaneModule) {\n            throw new Error(\"imageId does not have imagePlaneModule metadata\");\n        }\n\n        const { columnCosines } = imagePlaneModule;\n\n        // find which axis is parallel to the columnCosines\n        const columnCosinesVec = vec3.fromValues(\n            columnCosines[0],\n            columnCosines[1],\n            columnCosines[2]\n        );\n        const projectedMajorAxisOnColVec = vec3.dot(\n            columnCosinesVec,\n            majorAxisVec\n        );\n\n        const projectedMinorAxisOnColVec = vec3.dot(\n            columnCosinesVec,\n            minorAxisVec\n        );\n\n        const absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\n        const absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\n\n        let ellipsePoints = [];\n        if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {\n            ellipsePoints = [\n                pointsWorld[0],\n                pointsWorld[1],\n                pointsWorld[2],\n                pointsWorld[3]\n            ];\n        } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {\n            ellipsePoints = [\n                pointsWorld[2],\n                pointsWorld[3],\n                pointsWorld[0],\n                pointsWorld[1]\n            ];\n        } else {\n            console.warn(\"OBLIQUE ELLIPSE NOT YET SUPPORTED\");\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [...ellipsePoints],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    area: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : 0\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n        const rotation = data.initialRotation || 0;\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"EllipticalROI.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n        let top, bottom, left, right;\n        // this way when it's restored we can assume the initial rotation is 0.\n        if (rotation == 90 || rotation == 270) {\n            bottom = worldToImageCoords(referencedImageId, handles.points[2]);\n            top = worldToImageCoords(referencedImageId, handles.points[3]);\n            left = worldToImageCoords(referencedImageId, handles.points[0]);\n            right = worldToImageCoords(referencedImageId, handles.points[1]);\n        } else {\n            top = worldToImageCoords(referencedImageId, handles.points[0]);\n            bottom = worldToImageCoords(referencedImageId, handles.points[1]);\n            left = worldToImageCoords(referencedImageId, handles.points[2]);\n            right = worldToImageCoords(referencedImageId, handles.points[3]);\n        }\n\n        // find the major axis and minor axis\n        const topBottomLength = Math.abs(top[1] - bottom[1]);\n        const leftRightLength = Math.abs(left[0] - right[0]);\n\n        const points = [];\n        if (topBottomLength > leftRightLength) {\n            // major axis is bottom to top\n            points.push({ x: top[0], y: top[1] });\n            points.push({ x: bottom[0], y: bottom[1] });\n\n            // minor axis is left to right\n            points.push({ x: left[0], y: left[1] });\n            points.push({ x: right[0], y: right[1] });\n        } else {\n            // major axis is left to right\n            points.push({ x: left[0], y: left[1] });\n            points.push({ x: right[0], y: right[1] });\n\n            // minor axis is bottom to top\n            points.push({ x: top[0], y: top[1] });\n            points.push({ x: bottom[0], y: bottom[1] });\n        }\n\n        const { area } = cachedStats[`imageId:${referencedImageId}`] || {};\n\n        return {\n            area,\n            points,\n            trackingIdentifierTextValue: this.trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(EllipticalROI);\n\nexport default EllipticalROI;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\n\nconst { Polyline: TID300Polyline } = utilities.TID300;\n\nconst TOOLTYPE = \"RectangleROI\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${TOOLTYPE}`;\n\nclass RectangleROI {\n    public static toolType = TOOLTYPE;\n    public static utilityToolType = TOOLTYPE;\n    public static TID300Representation = TID300Polyline;\n\n    public static isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n        if (!TrackingIdentifier.includes(\":\")) {\n            return false;\n        }\n\n        const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n            return false;\n        }\n\n        return toolType === TOOLTYPE;\n    };\n\n    public static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                RectangleROI.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [\n                    worldCoords[0],\n                    worldCoords[1],\n                    worldCoords[3],\n                    worldCoords[2]\n                ],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    area: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : null\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"CobbAngle.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const corners = handles.points.map(point =>\n            worldToImageCoords(referencedImageId, point)\n        );\n\n        const { area, perimeter } = cachedStats;\n\n        return {\n            points: [\n                corners[0],\n                corners[1],\n                corners[3],\n                corners[2],\n                corners[0]\n            ],\n            area,\n            perimeter,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(RectangleROI);\n\nexport default RectangleROI;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\n\nconst { Length: TID300Length } = utilities.TID300;\n\nconst LENGTH = \"Length\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${LENGTH}`;\n\nclass Length {\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                Length.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: [worldCoords[0], worldCoords[1]],\n                activeHandleIndex: 0,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            cachedStats: {\n                [`imageId:${referencedImageId}`]: {\n                    length: NUMGroup\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\n                        : 0\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { cachedStats = {}, handles } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"Length.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const start = worldToImageCoords(referencedImageId, handles.points[0]);\n        const end = worldToImageCoords(referencedImageId, handles.points[1]);\n\n        const point1 = { x: start[0], y: start[1] };\n        const point2 = { x: end[0], y: end[1] };\n\n        const { length: distance } =\n            cachedStats[`imageId:${referencedImageId}`] || {};\n\n        return {\n            point1,\n            point2,\n            distance,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nLength.toolType = LENGTH;\nLength.utilityToolType = LENGTH;\nLength.TID300Representation = TID300Length;\nLength.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n        return false;\n    }\n\n    return toolType === LENGTH;\n};\n\nMeasurementReport.registerTool(Length);\n\nexport default Length;\n","import MeasurementReport from \"./MeasurementReport\";\nimport { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport { vec3 } from \"gl-matrix\";\n\nconst { Polyline: TID300Polyline } = utilities.TID300;\n\nconst PLANARFREEHANDROI = \"PlanarFreehandROI\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${PLANARFREEHANDROI}`;\nconst closedContourThreshold = 1e-5;\n\nclass PlanarFreehandROI {\n    public static toolType = PLANARFREEHANDROI;\n    public static utilityToolType = PLANARFREEHANDROI;\n    public static TID300Representation = TID300Polyline;\n    public static isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n        if (!TrackingIdentifier.includes(\":\")) {\n            return false;\n        }\n\n        const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n            return false;\n        }\n\n        return toolType === PLANARFREEHANDROI;\n    };\n\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                PlanarFreehandROI.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n        const { GraphicData } = SCOORDGroup;\n\n        const worldCoords = [];\n\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n\n            worldCoords.push(point);\n        }\n\n        const distanceBetweenFirstAndLastPoint = vec3.distance(\n            worldCoords[worldCoords.length - 1],\n            worldCoords[0]\n        );\n\n        let isOpenContour = true;\n\n        // If the contour is closed, this should have been encoded as exactly the same point, so check for a very small difference.\n        if (distanceBetweenFirstAndLastPoint < closedContourThreshold) {\n            worldCoords.pop(); // Remove the last element which is duplicated.\n\n            isOpenContour = false;\n        }\n\n        const points = [];\n\n        if (isOpenContour) {\n            points.push(worldCoords[0], worldCoords[worldCoords.length - 1]);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            polyline: worldCoords,\n            isOpenContour,\n            handles: {\n                points,\n                activeHandleIndex: null,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, finding, findingSites, metadata } = tool;\n        const { isOpenContour, polyline } = data;\n\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"PlanarFreehandROI.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const points = polyline.map(worldPos =>\n            worldToImageCoords(referencedImageId, worldPos)\n        );\n\n        if (!isOpenContour) {\n            // Need to repeat the first point at the end of to have an explicitly closed contour.\n            const firstPoint = points[0];\n\n            // Explicitly expand to avoid ciruclar references.\n            points.push([firstPoint[0], firstPoint[1]]);\n        }\n\n        const area = 0; // TODO -> The tool doesn't have these stats yet.\n        const perimeter = 0;\n\n        return {\n            points,\n            area,\n            perimeter,\n            trackingIdentifierTextValue,\n            finding,\n            findingSites: findingSites || []\n        };\n    }\n}\n\nMeasurementReport.registerTool(PlanarFreehandROI);\n\nexport default PlanarFreehandROI;\n","import { utilities } from \"dcmjs\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\nimport MeasurementReport from \"./MeasurementReport\";\n\nconst { Point: TID300Point } = utilities.TID300;\n\nconst PROBE = \"Probe\";\nconst trackingIdentifierTextValue = `${CORNERSTONE_3D_TAG}:${PROBE}`;\n\nclass Probe {\n    static getMeasurementData(\n        MeasurementGroup,\n        sopInstanceUIDToImageIdMap,\n        imageToWorldCoords,\n        metadata\n    ) {\n        const { defaultState, SCOORDGroup, ReferencedFrameNumber } =\n            MeasurementReport.getSetupMeasurementData(\n                MeasurementGroup,\n                sopInstanceUIDToImageIdMap,\n                metadata,\n                Probe.toolType\n            );\n\n        const referencedImageId =\n            defaultState.annotation.metadata.referencedImageId;\n\n        const { GraphicData } = SCOORDGroup;\n\n        const worldCoords = [];\n        for (let i = 0; i < GraphicData.length; i += 2) {\n            const point = imageToWorldCoords(referencedImageId, [\n                GraphicData[i],\n                GraphicData[i + 1]\n            ]);\n            worldCoords.push(point);\n        }\n\n        const state = defaultState;\n\n        state.annotation.data = {\n            handles: {\n                points: worldCoords,\n                activeHandleIndex: null,\n                textBox: {\n                    hasMoved: false\n                }\n            },\n            frameNumber: ReferencedFrameNumber\n        };\n\n        return state;\n    }\n\n    static getTID300RepresentationArguments(tool, worldToImageCoords) {\n        const { data, metadata } = tool;\n        let { finding, findingSites } = tool;\n        const { referencedImageId } = metadata;\n\n        if (!referencedImageId) {\n            throw new Error(\n                \"Probe.getTID300RepresentationArguments: referencedImageId is not defined\"\n            );\n        }\n\n        const { points } = data.handles;\n\n        const pointsImage = points.map(point => {\n            const pointImage = worldToImageCoords(referencedImageId, point);\n            return {\n                x: pointImage[0],\n                y: pointImage[1]\n            };\n        });\n\n        const TID300RepresentationArguments = {\n            points: pointsImage,\n            trackingIdentifierTextValue,\n            findingSites: findingSites || [],\n            finding\n        };\n\n        return TID300RepresentationArguments;\n    }\n}\n\nProbe.toolType = PROBE;\nProbe.utilityToolType = PROBE;\nProbe.TID300Representation = TID300Point;\nProbe.isValidCornerstoneTrackingIdentifier = TrackingIdentifier => {\n    if (!TrackingIdentifier.includes(\":\")) {\n        return false;\n    }\n\n    const [cornerstone3DTag, toolType] = TrackingIdentifier.split(\":\");\n\n    if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n        return false;\n    }\n\n    return toolType === PROBE;\n};\n\nMeasurementReport.registerTool(Probe);\n\nexport default Probe;\n","import { normalizers, derivations } from \"dcmjs\";\nimport { fillSegmentation } from \"../../Cornerstone/Segmentation_4X\";\n\nconst { Normalizer } = normalizers;\nconst { Segmentation: SegmentationDerivation } = derivations;\n\n/**\n * generateSegmentation - Generates a DICOM Segmentation object given cornerstoneTools data.\n *\n * @param images - An array of the cornerstone image objects, which includes imageId and metadata\n * @param labelmaps - An array of the 3D Volumes that contain the segmentation data.\n */\nfunction generateSegmentation(images, labelmaps, metadata, options = {}) {\n    const segmentation = _createMultiframeSegmentationFromReferencedImages(\n        images,\n        metadata,\n        options\n    );\n    return fillSegmentation(segmentation, labelmaps, options);\n}\n\n/**\n * _createMultiframeSegmentationFromReferencedImages - description\n *\n * @param images - An array of the cornerstone image objects related to the reference\n * series that the segmentation is derived from. You can use methods such as\n * volume.getCornerstoneImages() to get this array.\n *\n * @param options - the options object for the SegmentationDerivation.\n * @returns The Seg derived dataSet.\n */\nfunction _createMultiframeSegmentationFromReferencedImages(\n    images,\n    metadata,\n    options\n) {\n    const datasets = images.map(image => {\n        // add the sopClassUID to the dataset\n        const instance = metadata.get(\"instance\", image.imageId);\n        return {\n            ...image,\n            ...instance,\n            // Todo: move to dcmjs tag style\n            SOPClassUID: instance.SopClassUID || instance.SOPClassUID,\n            SOPInstanceUID: instance.SopInstanceUID || instance.SOPInstanceUID,\n            PixelData: image.getPixelData(),\n            _vrMap: {\n                PixelData: \"OW\"\n            },\n            _meta: {}\n        };\n    });\n\n    const multiframe = Normalizer.normalizeToDataset(datasets);\n\n    return new SegmentationDerivation([multiframe], options);\n}\n\nexport { generateSegmentation };\n","import { CornerstoneSEG } from \"../../Cornerstone\";\n\nconst { Segmentation } = CornerstoneSEG;\nconst { generateToolState: generateToolStateCornerstoneLegacy } = Segmentation;\n\n/**\n * generateToolState - Given a set of cornerstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param   imageIds - An array of the imageIds.\n * @param   arrayBuffer - The SEG arrayBuffer.\n * @param   skipOverlapping - skip checks for overlapping segs, default value false.\n * @param   tolerance - default value 1.e-3.\n *\n * @returns a list of array buffer for each labelMap\n *  an object from which the segment metadata can be derived\n *  list containing the track of segments per frame\n *  list containing the track of segments per frame for each labelMap                   (available only for the overlapping case).\n */\nfunction generateToolState(\n    imageIds,\n    arrayBuffer,\n    metadataProvider,\n    skipOverlapping = false,\n    tolerance = 1e-3\n) {\n    return generateToolStateCornerstoneLegacy(\n        imageIds,\n        arrayBuffer,\n        metadataProvider,\n        skipOverlapping,\n        tolerance\n    );\n}\n\nexport { generateToolState };\n","import MeasurementReport from \"./MeasurementReport\";\nimport CodeScheme from \"./CodingScheme\";\nimport CORNERSTONE_3D_TAG from \"./cornerstone3DTag\";\n\nimport ArrowAnnotate from \"./ArrowAnnotate\";\nimport Bidirectional from \"./Bidirectional\";\nimport Angle from \"./Angle\";\nimport CobbAngle from \"./CobbAngle\";\nimport CircleROI from \"./CircleROI\";\nimport EllipticalROI from \"./EllipticalROI\";\nimport RectangleROI from \"./RectangleROI\";\nimport Length from \"./Length\";\nimport PlanarFreehandROI from \"./PlanarFreehandROI\";\nimport Probe from \"./Probe\";\nimport * as Segmentation from \"./Segmentation\";\n\nconst Cornerstone3DSR = {\n    Bidirectional,\n    CobbAngle,\n    Angle,\n    Length,\n    CircleROI,\n    EllipticalROI,\n    RectangleROI,\n    ArrowAnnotate,\n    Probe,\n    PlanarFreehandROI,\n    MeasurementReport,\n    CodeScheme,\n    CORNERSTONE_3D_TAG\n};\n\nconst Cornerstone3DSEG = {\n    Segmentation\n};\n\nexport { Cornerstone3DSR, Cornerstone3DSEG };\n","/**\n * Generates 2D label maps from a 3D label map.\n * @param labelmap3D - The 3D label map object to generate 2D label maps from. It is derived\n * from the volume labelmap.\n * @returns The label map object containing the 2D label maps and segments on label maps.\n */\nfunction generateLabelMaps2DFrom3D(labelmap3D): {\n    scalarData: number[];\n    dimensions: number[];\n    segmentsOnLabelmap: number[];\n    labelmaps2D: {\n        segmentsOnLabelmap: number[];\n        pixelData: number[];\n        rows: number;\n        columns: number;\n    }[];\n} {\n    // 1. we need to generate labelmaps2D from labelmaps3D, a labelmap2D is for each\n    // slice\n    const { scalarData, dimensions } = labelmap3D;\n\n    // scalarData is a flat array of all the pixels in the volume.\n    const labelmaps2D = [];\n    const segmentsOnLabelmap3D = new Set();\n\n    // X-Y are the row and column dimensions, Z is the number of slices.\n    for (let z = 0; z < dimensions[2]; z++) {\n        const pixelData = scalarData.slice(\n            z * dimensions[0] * dimensions[1],\n            (z + 1) * dimensions[0] * dimensions[1]\n        );\n\n        const segmentsOnLabelmap = [];\n\n        for (let i = 0; i < pixelData.length; i++) {\n            const segment = pixelData[i];\n            if (!segmentsOnLabelmap.includes(segment) && segment !== 0) {\n                segmentsOnLabelmap.push(segment);\n            }\n        }\n\n        const labelmap2D = {\n            segmentsOnLabelmap,\n            pixelData,\n            rows: dimensions[1],\n            columns: dimensions[0]\n        };\n\n        if (segmentsOnLabelmap.length === 0) {\n            continue;\n        }\n\n        segmentsOnLabelmap.forEach(segmentIndex => {\n            segmentsOnLabelmap3D.add(segmentIndex);\n        });\n\n        labelmaps2D[dimensions[2] - 1 - z] = labelmap2D;\n    }\n\n    // remove segment 0 from segmentsOnLabelmap3D\n    labelmap3D.segmentsOnLabelmap = Array.from(segmentsOnLabelmap3D);\n\n    labelmap3D.labelmaps2D = labelmaps2D;\n\n    return labelmap3D;\n}\n\nexport { generateLabelMaps2DFrom3D };\n","import { data } from \"dcmjs\";\n\nconst { Colors, BitArray } = data;\n\n// TODO: Is there a better name for this? RGBAInt?\n// Should we move it to Colors.js\nfunction dicomlab2RGBA(cielab) {\n    const rgba = Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n    rgba.push(255);\n\n    return rgba;\n}\n\n// TODO: Copied these functions in from VTK Math so we don't need a dependency.\n// I guess we should put them somewhere\n// https://github.com/Kitware/vtk-js/blob/master/Sources/Common/Core/Math/index.js\nfunction cross(x, y, out) {\n    const Zx = x[1] * y[2] - x[2] * y[1];\n    const Zy = x[2] * y[0] - x[0] * y[2];\n    const Zz = x[0] * y[1] - x[1] * y[0];\n    out[0] = Zx;\n    out[1] = Zy;\n    out[2] = Zz;\n}\n\nfunction norm(x, n = 3) {\n    switch (n) {\n        case 1:\n            return Math.abs(x);\n        case 2:\n            return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n        case 3:\n            return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n        default: {\n            let sum = 0;\n            for (let i = 0; i < n; i++) {\n                sum += x[i] * x[i];\n            }\n            return Math.sqrt(sum);\n        }\n    }\n}\n\nfunction normalize(x) {\n    const den = norm(x);\n    if (den !== 0.0) {\n        x[0] /= den;\n        x[1] /= den;\n        x[2] /= den;\n    }\n    return den;\n}\n\nfunction subtract(a, b, out) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n}\n\n// TODO: This is a useful utility on its own. We should move it somewhere?\n// dcmjs.adapters.vtk.Multiframe? dcmjs.utils?\nfunction geometryFromFunctionalGroups(dataset, PerFrameFunctionalGroups) {\n    const geometry = {};\n    const pixelMeasures =\n        dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;\n    const planeOrientation =\n        dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence;\n\n    // Find the origin of the volume from the PerFrameFunctionalGroups' ImagePositionPatient values\n    //\n    // TODO: assumes sorted frames. This should read the ImagePositionPatient from each frame and\n    // sort them to obtain the first and last position along the acquisition axis.\n    const firstFunctionalGroup = PerFrameFunctionalGroups[0];\n    const lastFunctionalGroup =\n        PerFrameFunctionalGroups[PerFrameFunctionalGroups.length - 1];\n    const firstPosition =\n        firstFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(\n            Number\n        );\n    const lastPosition =\n        lastFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(\n            Number\n        );\n\n    geometry.origin = firstPosition;\n\n    // NB: DICOM PixelSpacing is defined as Row then Column,\n    // unlike ImageOrientationPatient\n    geometry.spacing = [\n        pixelMeasures.PixelSpacing[1],\n        pixelMeasures.PixelSpacing[0],\n        pixelMeasures.SpacingBetweenSlices\n    ].map(Number);\n\n    geometry.dimensions = [\n        dataset.Columns,\n        dataset.Rows,\n        PerFrameFunctionalGroups.length\n    ].map(Number);\n\n    const orientation = planeOrientation.ImageOrientationPatient.map(Number);\n    const columnStepToPatient = orientation.slice(0, 3);\n    const rowStepToPatient = orientation.slice(3, 6);\n\n    geometry.planeNormal = [];\n\n    cross(columnStepToPatient, rowStepToPatient, geometry.planeNormal);\n\n    geometry.sliceStep = [];\n    subtract(lastPosition, firstPosition, geometry.sliceStep);\n    normalize(geometry.sliceStep);\n    geometry.direction = columnStepToPatient\n        .concat(rowStepToPatient)\n        .concat(geometry.sliceStep);\n\n    return geometry;\n}\n\nexport default class Segmentation {\n    constructor() {}\n\n    /**\n     * Produces an array of Segments from an input DICOM Segmentation dataset\n     *\n     * Segments are returned with Geometry values that can be used to create\n     * VTK Image Data objects.\n     *\n     * @example Example usage to create VTK Volume actors from each segment:\n     *\n     * const actors = [];\n     * const segments = generateToolState(dataset);\n     * segments.forEach(segment => {\n     *   // now make actors using the segment information\n     *   const scalarArray = vtk.Common.Core.vtkDataArray.newInstance({\n     *        name: \"Scalars\",\n     *        numberOfComponents: 1,\n     *        values: segment.pixelData,\n     *    });\n     *\n     *    const imageData = vtk.Common.DataModel.vtkImageData.newInstance();\n     *    imageData.getPointData().setScalars(scalarArray);\n     *    imageData.setDimensions(geometry.dimensions);\n     *    imageData.setSpacing(geometry.spacing);\n     *    imageData.setOrigin(geometry.origin);\n     *    imageData.setDirection(geometry.direction);\n     *\n     *    const mapper = vtk.Rendering.Core.vtkVolumeMapper.newInstance();\n     *    mapper.setInputData(imageData);\n     *    mapper.setSampleDistance(2.);\n     *\n     *    const actor = vtk.Rendering.Core.vtkVolume.newInstance();\n     *    actor.setMapper(mapper);\n     *\n     *    actors.push(actor);\n     * });\n     *\n     * @param dataset\n     * @return {{}}\n     */\n    static generateSegments(dataset) {\n        if (dataset.SegmentSequence.constructor.name !== \"Array\") {\n            dataset.SegmentSequence = [dataset.SegmentSequence];\n        }\n\n        dataset.SegmentSequence.forEach(segment => {\n            // TODO: other interesting fields could be extracted from the segment\n            // TODO: Read SegmentsOverlay field\n            // http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.2.html\n\n            // TODO: Looks like vtkColor only wants RGB in 0-1 values.\n            // Why was this example converting to RGBA with 0-255 values?\n            const color = dicomlab2RGBA(segment.RecommendedDisplayCIELabValue);\n\n            segments[segment.SegmentNumber] = {\n                color,\n                functionalGroups: [],\n                offset: null,\n                size: null,\n                pixelData: null\n            };\n        });\n\n        // make a list of functional groups per segment\n        dataset.PerFrameFunctionalGroupsSequence.forEach(functionalGroup => {\n            const segmentNumber =\n                functionalGroup.SegmentIdentificationSequence\n                    .ReferencedSegmentNumber;\n\n            segments[segmentNumber].functionalGroups.push(functionalGroup);\n        });\n\n        // determine per-segment index into the pixel data\n        // TODO: only handles one-bit-per pixel\n        const frameSize = Math.ceil((dataset.Rows * dataset.Columns) / 8);\n        let nextOffset = 0;\n\n        Object.keys(segments).forEach(segmentNumber => {\n            const segment = segments[segmentNumber];\n\n            segment.numberOfFrames = segment.functionalGroups.length;\n            segment.size = segment.numberOfFrames * frameSize;\n            segment.offset = nextOffset;\n\n            nextOffset = segment.offset + segment.size;\n\n            const packedSegment = dataset.PixelData.slice(\n                segment.offset,\n                nextOffset\n            );\n\n            segment.pixelData = BitArray.unpack(packedSegment);\n\n            const geometry = geometryFromFunctionalGroups(\n                dataset,\n                segment.functionalGroups\n            );\n\n            segment.geometry = geometry;\n        });\n\n        return segments;\n    }\n}\n","import { CornerstoneSR, CornerstoneSEG } from \"./Cornerstone\";\nimport { Cornerstone3DSR, Cornerstone3DSEG } from \"./Cornerstone3D\";\nimport { VTKjsSEG } from \"./VTKjs\";\nimport * as Enums from \"./enums\";\nimport * as helpers from \"./helpers\";\n\nconst adaptersSR = {\n    Cornerstone: CornerstoneSR,\n    Cornerstone3D: Cornerstone3DSR\n};\n\nconst adaptersSEG = {\n    Cornerstone: CornerstoneSEG,\n    Cornerstone3D: Cornerstone3DSEG,\n    VTKjs: VTKjsSEG\n};\n\nexport { adaptersSR, adaptersSEG, Enums, helpers };\n","import Segmentation from \"./Segmentation\";\n\nconst VTKjsSEG = {\n    Segmentation\n};\n\nexport { VTKjsSEG };\n"],"names":["toArray","x","Array","isArray","codeMeaningEquals","codeMeaningName","contentItem","ConceptNameCodeSequence","CodeMeaning","datasetToDict","data","bufferOrDataset","filename","blob","ArrayBuffer","Blob","type","_meta","Error","buffer","Buffer","from","write","link","document","createElement","href","window","URL","createObjectURL","download","click","graphicType","GraphicType","TID1500$1","utilities","TID1500","addAccessors$1","addAccessors","StructuredReport$1","derivations","StructuredReport","Normalizer$4","normalizers","Normalizer","TID1500MeasurementReport$1","TID1500MeasurementReport","TID1501MeasurementGroup$1","TID1501MeasurementGroup","DicomMetaDictionary$3","DicomMetaDictionary","FINDING$2","CodingSchemeDesignator","CodeValue","FINDING_SITE$2","FINDING_SITE_OLD$1","codeValueMatch$1","group","code","oldCode","MeasurementReport$1","MeasurementReport","_classCallCheck","_createClass","key","value","MeasurementGroup","ContentSequence","contentSequenceArr","findingGroup","find","findingSiteGroups","filter","NUMGroup","ValueType","SCOORDGroup","ReferencedSOPSequence","ReferencedSOPInstanceUID","ReferencedFrameNumber","defaultState","sopInstanceUid","frameIndex","complete","finding","ConceptCodeSequence","undefined","findingSites","map","fsg","description","findingSite","location","toolState","metadataProvider","options","allMeasurementGroups","firstImageId","Object","keys","generalSeriesModule","get","studyInstanceUID","seriesInstanceUID","forEach","imageId","sopCommonModule","frameNumber","toolData","toolTypes","ReferencedSOPClassUID","sopClassUID","sopInstanceUID","isMultiframeSOPClassUID","measurementGroups","toolType","toolTypeData","toolClass","CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE","length","Measurements","tool","args","getTID300RepresentationArguments","TID300Representation","getTID300ContentItem$1","getMeasurementGroup$1","push","concat","_MeasurementReport","TID1501MeasurementGroups","fileMetaInformationVersionArray","Uint8Array","derivationSourceDataset","StudyInstanceUID","SeriesInstanceUID","FileMetaInformationVersion","Value","vr","TransferSyntaxUID","ImplementationClassUID","uid","ImplementationVersionName","_vrMap","PixelData","report","dataset","assign","hooks","arguments","ContentTemplateSequence","TemplateIdentifier","imagingMeasurementContent","measurementData","cornerstoneToolClasses","CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE","registeredToolClasses","measurementGroup","TrackingIdentifierValue","TextValue","getToolClass","tc","isValidCornerstoneTrackingIdentifier","measurement","getMeasurementData","console","log","utilityToolType","MEASUREMENT_BY_TOOLTYPE","CORNERSTONE_4_TAG","TID300Length$1","TID300","Length","LENGTH$1","Length$1","_MeasurementReport$ge","getSetupMeasurementData","state","_objectSpread2","MeasuredValueSequence","NumericValue","handles","start","end","textBox","hasMoved","movesIndependently","drawnIndependently","allowedOutsideImage","hasBoundingBox","_SCOORDGroup$GraphicD","_slicedToArray","GraphicData","y","point1","point2","distance","trackingIdentifierTextValue","TrackingIdentifier","includes","_TrackingIdentifier$s2","split","cornerstone4Tag","registerTool","TID300Polyline$3","Polyline","FreehandRoi","points","active","cachedStats","area","color","invalidated","i","_tool$cachedStats","_cachedStats$area","_cachedStats$perimete","perimeter","TID300Bidirectional$1","Bidirectional","BIDIRECTIONAL$1","Bidirectional$1","longAxisNUMGroup","longAxisSCOORDGroup","shortAxisNUMGroup","shortAxisSCOORDGroup","longestDiameter","String","shortestDiameter","bottomRight","Math","max","highlight","index","perpendicularStart","perpendicularEnd","isCreating","toolName","visible","_tool$handles","longAxis","shortAxis","longAxisLength","shortAxisLength","TID300Ellipse$1","Ellipse","ELLIPTICALROI$1","EllipticalRoi","majorAxis","minorAxis","minorAxisLength","sqrt","pow","minorAxisDirection","halfMinorAxisLength","corner1","corner2","initialRotation","halfXLength","abs","halfYLength","center","TID300Circle$1","Circle","CIRCLEROI$1","CircleRoi","radius","PI","TID300Point$2","Point","ARROW_ANNOTATE$1","CORNERSTONEFREETEXT$1","ArrowAnnotate$1","ArrowAnnotate","text","TID300RepresentationArguments","TID300CobbAngle$2","CobbAngle","COBB_ANGLE","CobbAngle$1","rAngle","start2","end2","point3","point4","TID300Angle","Angle","ANGLE","Angle$1","middle","TID300Polyline$2","RectangleRoi","_utilities$orientatio$1","orientation","rotateDirectionCosinesInPlane$1","rotateDirectionCosinesInPlane","flipIOP$1","flipImageOrientationPatient","flipMatrix2D$1","flipMatrix2D","rotateMatrix902D$1","rotateMatrix902D","datasetToBlob","BitArray$2","BitArray","DicomMessage$1","DicomMessage","DicomMetaDictionary$2","Normalizer$3","SegmentationDerivation$2","Segmentation","Segmentation$5","generateSegmentation","images","brushData","includeSliceSpacing","segments","image0","dims","columns","rows","z","xy","_getSegCount","seg","isMultiframe","datasets","arrayBuffer","byteArray","dicomData","readFile","naturalizeDataset","dict","namifyDataset","meta","_arrayBuffer","_dicomData","_dataset","multiframe","normalizeToDataset","_createSegFromImages$1","_getNumberOfFramesPer","segmentIndicies","referencedFramesPerSegment","imageIdSpecificToolState","_i2","segIdx","brush","pixelData","_getNumberOfFramesPerSegment","NumberOfFrames","setNumberOfFrames","_i","segmentIndex","referencedFrameIndicies","referencedFrameNumbers","element","segment","addSegment","_extractCornerstoneToolsPixelData","bitPackPixelData","generateToolState","imageIds","imagePlaneModule","warn","validOrientations","iop","orientations","h","v","iop90","getValidOrientations$1","rowCosines","_toConsumableArray","columnCosines","SharedFunctionalGroupsSequence","sharedImageOrientationPatient","PlaneOrientationSequence","ImageOrientationPatient","sliceLength","Columns","Rows","segMetadata","segmentSequence","SegmentSequence","seriesInstanceUid","ReferencedSeriesSequence","getSegmentMetadata$1","segType","SegmentationType","unpack","MaximumFractionalValue","onlyMaxAndZero","unpackPixelData$1","PerFrameFunctionalGroupsSequence","inPlane","PerFrameFunctionalGroups","ImageOrientationPatientI","alignedPixelDataI","alignPixelDataWithSourceData$1","ndarray","SegmentIdentificationSequence","ReferencedSegmentNumber","addImageIdSpecificBrushToolState","getImageIdOfSourceImage","DerivationImageSequence","SourceImageSequence","referencedFrames","pixelDataIndex","brushPixelData","p","numSegments","pixelData2D","brushDataI","cToolsPixelData","imageIdFrameNumber","Number","getImageIdOfReferencedFrame$1","getImageIdOfReferencedSingleFramedSOPInstance","compareIOP","Events","dx","iop1","iop2","Events$1","_utilities$orientatio","flipIOP","nearlyEqual","BitArray$1","DicomMetaDictionary$1","Normalizer$2","SegmentationDerivation$1","_utilities$compressio","compression","encode","decode","generateSegmentationDefaultOptions","rleEncode","fillSegmentation$1","segmentation","inputLabelmaps3D","userOptions","labelmaps3D","numberOfFrames","referencedFramesPerLabelmap","_loop","labelmap3D","labelmapIndex","labelmaps2D","metadata","_loop2","labelmap2D","segmentsOnLabelmap","_labelmapIndex","segmentMetadata","labelmaps","_getLabelmapsFromReferencedFrameIndicies","addSegmentFromLabelmap","rleEncodedFrames","assignToDataset","BitsAllocated","BitsStored","HighBit","SegmentationFractionalType","frame","_generateToolState","_regeneratorRuntime","mark","_callee","_options$skipOverlapp","skipOverlapping","_options$tolerance","tolerance","_options$TypedArrayCo","TypedArrayConstructor","_options$maxBytesPerC","maxBytesPerChunk","eventTarget","triggerEvent","pixelDataChunks","sopUIDImageIdIndexMap","overlapping","insertFunction","segmentsOnFrameArray","segmentsOnFrame","arrayBufferLength","labelmapBufferArray","imageIdMaps","segmentsPixelIndices","centroidXYZ","wrap","_context","prev","next","getValidOrientations","getSegmentMetadata","abrupt","unpackPixelData","checkOrientation","reduce","acc","checkSEGsOverlapping","t0","insertOverlappingPixelDataPlanar","insertPixelDataPlanar","BYTES_PER_ELEMENT","curr","indices","Map","imageIdIndexBufferIndex","_calculateCentroid","calculateCentroid","xAcc","yAcc","zAcc","count","set","floor","centroids","stop","apply","findReferenceSourceImageId","frameSegment","FrameOfReferenceUID","PerFrameFunctionalGroup","frameSourceImageSequence","getImageIdOfReferencedFrame","getImageIdOfSourceImageBySourceImageSequence","ReferencedSeriesInstanceUID","PlanePositionSequence","ImagePositionPatient","imageIdsIndexc","sourceImageMetadata","compareArrays","getImageIdOfSourceImagebyGeometry","groupsLen","frameSegmentsMapping","_loop3","getSegmentIndex","imageIdIndex","findIndex","has","segmentArray","_step","_iterator","_createForOfIteratorHelper","entries","s","n","done","role","temp2DArray","fill","_frameSegment","view","readFromUnpackedChunks","alignPixelDataWithSourceData","j","len","err","e","f","M","m","tempBuffer","slice","tempSegmentsOnFrame","cloneDeep","numberOfSegs","segmentIndexToProcess","_loop4","byteOffset","labelmap2DView","segmentOnFrame","chunkSize","ceil","shouldTriggerEvent","Promise","resolve","processInChunks","min","indexCache","segmentIndexObject","percentComplete","round","SEGMENTATION_LOAD_PROGRESS","setTimeout","sourceDataDimensions","some","operation","absDotColumnCosines","absDotRowCosines","checkIfPerpendicular","error","bitArray","chunks","maxBitsPerChunk","numberOfChunks","startBit","endBit","startByte","endByte","chunk","unpackedChunk","getUnpackedChunks","array1","array2","offset","mapping","totalBytes","total","startChunkIndex","startOffsetInChunk","endChunkIndex","endOffsetInChunk","chunkIndex","getUnpackedOffsetAndLength","result","resultOffset","_i3","_Object$entries","_Object$entries$_i","bufferIndices","_step2","_iterator2","bufferIndex","Segmentation$4","_createSegFromImages","_x","_x2","_x3","_x4","fillSegmentation","CornerstoneSR","CornerstoneSEG","labelmaps3DorBrushData","cornerstoneToolsVersion","__assign","t","prototype","hasOwnProperty","call","this","__spreadArray","to","pack","ar","l","CORNERSTONE_3D_TAG","CodingScheme","codeValues","CORNERSTONEFREETEXT","Normalizer$1","FINDING","FINDING_SITE","FINDING_SITE_OLD","codeValueMatch","getMeasurementGroup","worldToImageCoords","getTID300ContentItem","getCornerstoneLabelFromDefaultState","_a","cornersoneFreeTextCodingValue","freeTextLabel","fs","generateDatasetMeta","sopInstanceUIDToImageIdMap","referencedImageId","annotation","annotationUID","frameOfReferenceUID","label","generateReport","sopInstanceUIDsToSeriesInstanceUIDMap","derivationSourceDatasets","instance","dsd","generateDerivationSourceDataset","tid1500MeasurementReport","imageToWorldCoords","TrackingIdentifierValue_1","TID300Point$1","ARROW_ANNOTATE","trackingIdentifierTextValue$7","worldCoords","point","imagePixelModule","xOffset","yOffset","secondPoint","arrowFirst","activeHandleIndex","_data$handles","pointImage","cornerstone3DTag","TID300Bidirectional","BIDIRECTIONAL","trackingIdentifierTextValue$6","_b","width","shortAxisPoints","longAxisPoints","firstPointPairs","secondPointPairs","longAxisStartImage","longAxisEndImage","shortAxisStartImage","shortAxisEndImage","TID300CobbAngle$1","MEASUREMENT_TYPE$1","trackingIdentifierTextValue$5","angle","start1","TID300CobbAngle","MEASUREMENT_TYPE","trackingIdentifierTextValue$4","end1","trackingIdentifier","toLowerCase","TID300Circle","CIRCLEROI","CircleROI","pointsWorld","worldPos","TID300Ellipse","ELLIPTICALROI","EPSILON","EllipticalROI","majorAxisStart","vec3","majorAxisEnd","minorAxisStart","minorAxisEnd","majorAxisVec","minorAxisVec","columnCosinesVec","projectedMajorAxisOnColVec","projectedMinorAxisOnColVec","absoluteOfMajorDotProduct","absoluteOfMinorDotProduct","ellipsePoints","top","bottom","left","right","rotation","TID300Polyline$1","TOOLTYPE","trackingIdentifierTextValue$3","RectangleROI","corners","TID300Length","LENGTH","trackingIdentifierTextValue$2","_defineProperty","_data$cachedStats","TID300Polyline","PLANARFREEHANDROI","trackingIdentifierTextValue$1","PlanarFreehandROI","isOpenContour","pop","polyline","firstPoint","TID300Point","PROBE","Probe","SegmentationDerivation","generateToolStateCornerstoneLegacy","Cornerstone3DSR","CodeScheme","Cornerstone3DSEG","scalarData","dimensions","segmentsOnLabelmap3D","Set","add","image","SOPClassUID","SopClassUID","SOPInstanceUID","SopInstanceUID","getPixelData","_createMultiframeSegmentationFromReferencedImages","Colors","normalize","den","sum","norm","adaptersSR","Cornerstone","Cornerstone3D","adaptersSEG","VTKjs","constructor","name","cielab","rgba","RecommendedDisplayCIELabValue","dicomlab2RGB","SegmentNumber","functionalGroups","size","functionalGroup","segmentNumber","frameSize","nextOffset","packedSegment","geometry","pixelMeasures","PixelMeasuresSequence","planeOrientation","firstFunctionalGroup","lastFunctionalGroup","firstPosition","lastPosition","origin","spacing","PixelSpacing","SpacingBetweenSlices","out","Zx","Zy","Zz","columnStepToPatient","rowStepToPatient","planeNormal","sliceStep","a","b","subtract","direction","geometryFromFunctionalGroups"],"sourceRoot":""}