{"version":3,"file":"738.bundle.6c30f0e6e01cf0c873c0.js","mappings":"oYA2BA,MAAM,UAAEA,EAAS,QAAEC,EAAO,cAAEC,GAAkBC,EAAAA,SAY9C,SAASC,EAAeC,GACtB,IAAKA,IAAgBA,EAAYC,OAC/B,MAAO,GAGT,MAAMC,EAAU,GAgBhB,OAdAF,EAAYG,SAAQC,GAClBF,EAAQG,KAAK,CACXC,iBAAkBX,EAAUS,EAAU,aACtCG,KAAMZ,EAAUS,EAAU,aAC1BI,KAAMb,EAAUS,EAAU,aAC1BK,UAAWd,EAAUS,EAAU,cAAgB,GAC/CM,IAAKf,EAAUS,EAAU,cAAgB,GACzCO,YAAaC,EAAAA,MAAMC,SAASjB,EAAQQ,EAAU,eAAiB,GAC/DU,UAAWC,OAAOpB,EAAUS,EAAU,eAAiB,EACvDY,YAAarB,EAAUS,EAAU,cAAgB,GACjDa,WAAYtB,EAAUE,EAAcO,EAAU,YAAaA,EAAU,eAAiB,OAInFF,CACT,CA2CAgB,eAAeC,EAAOC,EAAgBd,EAAkBe,EAAmBC,GAMzE,aALyBF,EAAeG,iBAAiB,CACvDjB,sBAAkBkB,EAClBC,YAAaH,GAIjB,CAmCA,SAASI,EAAUC,GAAsB,IAAdC,EAAOC,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpC,IAAKF,EACH,OAEF,MAAMG,EAAuB,CAC3B,WACA,YAEAC,KAAK,MAED,iBAAEC,GAAqBJ,EACvBK,EAAeC,GACZF,GAAoBE,EAAS,IAAGA,KAAWA,EAG9CC,EAAa,CAEjBC,YAAaH,EAAaN,EAAOhB,aAEjC,WAAYsB,EAAaN,EAAOU,WAChCC,gBAAiBL,EAAaN,EAAOY,iBACrCC,iBAAkBP,EAAaN,EAAOc,kBACtCC,kBAAmBf,EAAOgB,kBAE1BC,MAAOjB,EAAOiB,OAAS,IACvBC,OAAQlB,EAAOkB,QAAU,EACzBC,eAAiD,IAAlClB,EAAQmB,sBACvBC,aAAclB,GAIhB,GAAIH,EAAOsB,WAAatB,EAAOuB,QAC7Bf,EAAWgB,UAAa,GAAExB,EAAOsB,aAAatB,EAAOuB,eAChD,GAAIvB,EAAOsB,UAAW,CAC3B,MAAMG,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAE9CG,EAAY,GADLR,EAAMS,gBACQH,IAAKJ,IAEhCnB,EAAWgB,UAAa,GAAExB,EAAOsB,aAAaW,GAChD,MAAO,GAAIjC,EAAOuB,QAAS,CACzB,MAAMY,EAAc,WAEpB3B,EAAWgB,UAAa,GAAEW,KAAcnC,EAAOuB,SACjD,CAGA,GAAIvB,EAAOrB,iBAAkB,CAC3B,IAAIyD,EAAYpC,EAAOrB,iBACvByD,EAAYC,MAAMC,QAAQF,GAAaA,EAAUhC,OAASgC,EAC1DA,EAAYA,EAAUG,QAAQ,YAAa,MAC3C/B,EAAWgC,iBAAmBJ,CAChC,CAGA,MAAMK,EAAQ,CAAC,EAOf,OANAC,OAAOC,KAAKnC,GAAYhC,SAAQoE,SACN/C,IAApBW,EAAWoC,IAA0C,KAApBpC,EAAWoC,KAC9CH,EAAMG,GAAOpC,EAAWoC,GAC1B,IAGKH,CACT,CCxLe,SAASI,EAAUC,GAAiD,IAAhD,SAAEC,EAAQ,MAAEC,EAAK,OAAEC,EAAM,UAAEC,GAAY,GAAOJ,EAC/E,IAAKC,EACH,OAGF,GAAIA,EAASI,IACX,OAAOJ,EAASI,IAGlB,MAAMC,EAAgBF,EAAY,qBAAuB,iBAEzD,GAAKD,EAAOG,IAA4C,YAA1BH,EAAOG,GAUnC,OCNW,SAA0BL,EAAUE,EAAQD,GAEzD,MAAMK,EAtCR,SAAqCN,EAAUE,EAAQD,GACrD,MAAMM,EANR,SAAgCP,EAAUE,GACxC,MAAM,iBAAET,EAAgB,kBAAEe,EAAiB,eAAEC,GAAmBT,EAChE,MAAQ,GAAEE,EAAOQ,oBAAoBjB,YAA2Be,eAA+BC,GACjG,CAGwBE,CAAuBX,EAAUE,GAIvD,MAAQ,GAAEK,YAFVN,EAAQA,GAAS,GAGnB,CAgCcW,CAA4BZ,EAAUE,EAAQD,GAE1D,GAAKK,EAIL,MAAQ,UAASA,GACnB,CDHWO,CAAiBb,EAAUE,EAAQD,GAVuB,CACjE,MAAMa,EApCV,SAA8BZ,EAAQF,GACpC,MAAM,iBAAEP,EAAgB,kBAAEe,EAAiB,eAAEC,GAAmBT,EAC1D/C,EAAS,GAEfA,EAAOtB,KAAK,oBACZsB,EAAOtB,KAAM,YAAW8D,KACxBxC,EAAOtB,KAAM,aAAY6E,KACzBvD,EAAOtB,KAAM,aAAY8E,KACzBxD,EAAOtB,KAAK,iCACZsB,EAAOtB,KAAK,oBAEZ,MAAMoF,EAAc9D,EAAOI,KAAK,KAEhC,MAAQ,GAAE6C,EAAOc,eAAeD,GAClC,CAsBoBE,CAAqBf,EAAQF,GAE7C,IAAIkB,EAAU,YAAcJ,EAK5B,YAJchE,IAAVmD,IACFiB,GAAW,UAAYjB,GAGlBiB,CACT,CAGF,C,eE1Ce,MAAMC,EASnBC,WAAAA,CAAYC,EAAQC,GAA4D,IAA1CC,EAAOpE,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGqE,EAAYrE,UAAA5B,OAAA,EAAA4B,UAAA,QAAAL,EAAE2E,EAAYtE,UAAA5B,OAAA,EAAA4B,UAAA,QAAAL,EAC5E4E,KAAKL,OAASA,EACdK,KAAKJ,iBAAmBA,EACxBI,KAAKH,QAAUA,EACfG,KAAKF,aAAeA,EACpBE,KAAKD,aAAeA,CACtB,CAEA,cAAME,GACJ,MAAMC,QAAoBF,KAAKG,UACzBC,QAAiBJ,KAAKK,KAAKH,GAGjC,aAF2BF,KAAKM,QAAQF,EAG1C,CAMA,gBAAMG,CAAWC,GACf,IAAIC,EACJ,IAAK,MAAMC,KAAUF,EACnB,IAEE,GADAC,QAAeC,IACXD,GAAUA,EAAO5G,OACnB,KAEJ,CAAE,MAAO8G,GACP,MAAMA,CACR,CAGF,GAAIH,EAAQI,OAAOC,OAASJ,EAC1B,MAAM,IAAIK,MAAM,iCAGlB,OAAOL,CACT,CAGA,gBAAMM,GAAc,CACpB,aAAMZ,GAAW,CACjB,UAAME,CAAKH,GAAc,CACzB,aAAMI,CAAQF,GAAW,EChDZ,MAAMY,UAAmCvB,EACtDwB,UAAAA,GACE,MAAM,iBAAErB,EAAgB,QAAEC,GAAYG,KAEhCxE,EAAU,CACdoE,qBAGI,kBAAEsB,GAAsBrB,EAK9B,OAJIqB,IACF1F,EAA2B,kBAAI0F,GAG1B1F,CACT,CAKA,WAAC2F,GACC,MAAMX,EAAU,IACV,iBAAEZ,EAAkBC,SAAS,kBAAEqB,GAAsB,CAAC,EAAC,OAAEvB,GAAWK,KAEtEkB,GACFV,EAAQvG,KACN0F,EAAOyB,uBAAuBC,KAAK1B,EAAQ,CACzCC,mBACAsB,uBAKNV,EAAQvG,KAAK0F,EAAO2B,sBAAsBD,KAAK1B,EAAQ,CAAEC,4BAElDY,CACT,CAEA,UAAMH,CAAKH,GACT,MAAMM,EAAUR,KAAKmB,aAErB,OADenB,KAAKO,WAAWC,EAEjC,CAEA,aAAMF,CAAQF,GACZ,OAAOA,CACT,ECvBa,MAAMmB,UAAoC9B,EAIvD,cAAC+B,GACC,MAAMC,EAAa,IACb,iBAAE7B,EAAkBC,SAAS,kBAAEqB,GAAsB,CAAC,EAAC,OAAEvB,GAAWK,KAE1E,GAAIkB,EAAmB,CACrB,MAAM1F,EAAU,CACdoE,mBACAvE,YAAa,CAAEyD,kBAAmBoC,IAEpCO,EAAWxH,KAAK0F,EAAO+B,gBAAgBL,KAAK1B,EAAQnE,GACtD,CAEAiG,EAAWxH,KAAK0F,EAAO+B,gBAAgBL,KAAK1B,EAAQ,CAAEC,4BAE/C6B,CACT,CAEA,aAAMtB,GACJ,MAAMsB,EAAazB,KAAKwB,gBAClBf,QAAeT,KAAKO,WAAWkB,GAC/B3B,EAAeE,KAAKF,aACpBC,EAAeC,KAAKD,cAEpB,kBAAE4B,GAAsBC,EAAAA,QAAAA,KAAWC,oBACnCC,EAAcrB,EAAOsB,IAAIJ,GAE/B,OAAOK,EAAAA,EAAAA,IACLF,EACAhC,GAAgBmC,EAAAA,GAAgBC,mBAAmBC,0BACnDpC,EAEJ,CAEA,UAAMM,CAAKH,GACT,MAAM,OAAEP,EAAM,iBAAEC,GAAqBI,KAI/BoC,EA/DV,SAA+BzC,EAAQC,EAAkByC,GACvD,OAAOpE,OAAOqE,OAAO,CACnBC,QAAOA,IACEF,EAAsBxI,OAAS,EAExC,UAAM+G,GACJ,MAAMM,EAAoBmB,EAAsBG,QAChD,OAAO7C,EAAOyB,uBAAuB,CACnCxB,mBACAsB,qBAEJ,GAEJ,CAkD8BuB,CAAsB9C,EAAQC,EAF7BM,EAAY6B,KAAIW,GAAKA,EAAE5D,qBAI5C6D,EAAW,GAEjB,KAAOP,EAAkBG,WACvBI,EAAS1I,KAAKmI,EAAkBxB,QAGlC,MAAO,CACLV,cACAyC,WAEJ,CAEA,aAAMrC,CAAOjC,GAA4B,IAA3B,YAAE6B,EAAW,SAAEyC,GAAUtE,EACrC,MAAO,CACL6B,cACAyC,WAEJ,ECtDF,QAvBA7H,eACEE,EACA+C,EACA6E,GAKA,MAGMC,EAAyB,KAFL,IAAxBD,EAAgCrB,EAA8BP,GAG9DhG,EACA+C,EATKtC,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EACCA,UAAA5B,OAAA,EAAA4B,UAAA,QAAAL,EACAK,UAAA5B,OAAA,EAAA4B,UAAA,QAAAL,GAcZ,aAFmByH,EAAuB5C,UAG5C,ECgBA,QAvCA,SACEjF,EACA+C,EACA6E,EACA/C,EACAC,EACAC,GAEA,MAAM,mBAAE+C,GAAuBjD,EAE/B,OAAO,IAAIkD,SAAQ,CAACC,EAASC,KAC3B,MAAMN,EAAWG,EAAmBf,KAAImB,IACtC,MAAMC,EAAwBlF,OAAOmF,OAAO,CAAC,EAAGvD,EAAS,CACvDqB,kBAAmBgC,IAGrB,OAAOG,EACLrI,EACA+C,EACA6E,EACAO,EACArD,EACAC,EACD,IAGHgD,QAAQO,IAAIX,GAAUY,MAAKC,IACzB,MAAMC,EAAmB,CAAEvD,YAAa,GAAIyC,SAAU,IAEtDa,EAAQzJ,SAAQsE,IAA+B,IAA9B,YAAE6B,EAAW,SAAEyC,GAAUtE,EACxCoF,EAAiBvD,YAAcuD,EAAiBvD,YAAYwD,OAAOxD,GACnEuD,EAAiBd,SAAWc,EAAiBd,SAASe,OAAOf,EAAS,IAGxEK,EAAQS,EAAiB,GACxBR,EAAO,GAEd,EClDMU,EAAa,wBAEbC,EAAwB,IAAIC,IAgB3B,SAASvC,EACdtG,EACA+C,EACA6E,EACA/C,EACAC,EACAC,GAEA,IADA+D,EAAcrI,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAMlB,IAAKT,EACH,MAAM,IAAI8F,MAAO,GAAE6C,wDAErB,IAAK5F,EACH,MAAM,IAAI+C,MAAO,GAAE6C,0DAGrB,MAAMI,EAAa,GAAED,EAAeE,QAAQjG,IAG5C,GAAI6F,EAAsBK,IAAIF,GAC5B,OAAOH,EAAsBM,IAAIH,GAGnC,IAAII,EA8BJ,OA3BEA,EADEtE,GAAWA,EAAQiD,mBACXsB,EACRpJ,EACA+C,EACA6E,EACA/C,EACAC,EACAC,GAIQ,IAAIgD,SAAQ,CAACC,EAASC,KAC9BI,EACErI,EACA+C,EACA6E,EACA/C,EACAC,EACAC,GACAwD,MAAK,SAAUc,GACfrB,EAAQqB,EACV,GAAGpB,EAAO,IAKdW,EAAsBU,IAAIP,EAAWI,GAE9BA,CACT,CAQO,SAASI,EAA2BxG,GACrC6F,EAAsBK,IAAIlG,IAC5B6F,EAAsBY,OAAOzG,EAEjC,CClFe,MAAM0G,UAAyBC,EAAAA,IAAIC,eAiBhDjF,WAAAA,CAAYkF,GACVC,MAAMD,GACN5E,KAAK8E,WAAaF,EAAWE,UAC/B,CAQA,sBAAM3J,CAAiBK,GACrB,IAAKwE,KAAK8E,WACR,OAAOD,MAAM1J,iBAAiBK,GAGhC,MAAMuJ,QAAqBF,MAAM1J,iBAAiBK,IAC5C,YAAEH,GAAgBG,EAExB,IAAKH,EACH,OAAO0J,EAGT,MAAMC,EAAchF,KAAKiF,cAAc5J,GASvC,OARiB0J,EAAaG,QAAOC,IACnC,IAAK,MAAMhH,KAAOF,OAAOC,KAAKuG,EAAiBW,iBAC7C,IAAKpF,KAAKqF,WAAWlH,EAAK6G,EAAaG,EAAOV,EAAiBW,iBAC7D,OAAO,EAGX,OAAO,CAAI,GAGf,CAEA,qBAAM1D,CAAgBlG,GACpB,IAAKwE,KAAK8E,WACR,OAAOD,MAAMnD,gBAAgBlG,GAG/B,MAAMuJ,QAAqBF,MAAMnD,gBAAgBlG,IAC3C,YAAEH,GAAgBG,EACxB,IAAKH,EACH,OAAO0J,EAET,MAAMC,EAAchF,KAAKiF,cAAc5J,GAWvC,OATiB0J,EAAaG,QAAOI,IACnC,IAAK,MAAMnH,KAAOF,OAAOC,KAAKuG,EAAiBc,kBAC7C,IAAKvF,KAAKqF,WAAWlH,EAAK6G,EAAaM,EAAQb,EAAiBc,kBAC9D,OAAO,EAGX,OAAO,CAAI,GAIf,CAcAC,aAAAA,CAAcC,EAASC,GACrB,GAAI9H,MAAMC,QAAQ4H,GAChB,OAAOA,EAAQE,MAAKC,GAAQ5F,KAAKwF,cAAcI,EAAMF,KAEvD,GAAI9H,MAAMC,QAAQ6H,GAChB,OAAOA,EAAOC,MAAKE,GAAc7F,KAAKwF,cAAcC,EAASI,KAK/D,GAHIH,GAAQI,aACVJ,EAASA,EAAOI,YAEG,iBAAVJ,EAAoB,CAC7B,GAAsB,IAAlBA,EAAO7L,OACT,OAAO,EAET,GAAuB,IAAnB4L,EAAQ5L,QAA4B,MAAZ4L,EAC1B,OAAO,EAET,GAAmB,MAAfA,EAAQ,IAA8C,MAAhCA,EAAQA,EAAQ5L,OAAS,GAEjD,OAAoE,GAA7D6L,EAAOK,QAAQN,EAAQO,UAAU,EAAGP,EAAQ5L,OAAS,IACvD,GAAoC,MAAhC4L,EAAQA,EAAQ5L,OAAS,GAClC,OAAoE,GAA7D6L,EAAOK,QAAQN,EAAQO,UAAU,EAAGP,EAAQ5L,OAAS,IACvD,GAAmB,MAAf4L,EAAQ,GACjB,OAAOC,EAAOK,QAAQN,EAAQO,UAAU,MAAQN,EAAO7L,OAAS4L,EAAQ5L,OAAS,CAErF,CACA,OAAO4L,IAAYC,CACrB,CAGAO,gBAAAA,CAAiBC,EAAOpK,GACtB,IAAKA,EACH,OAAO,EAET,MAAMqK,EAAOD,EAAMH,QAAQ,KAC3B,IAAc,IAAVI,EACF,OAAOnG,KAAKwF,cAAcU,EAAOpK,GAEnC,MAAMsK,EAAQF,EAAMF,UAAU,EAAGG,GAC3BE,EAAMH,EAAMF,UAAUG,EAAO,GACnC,QAASC,GAAStK,GAASsK,MAAYC,GAAOvK,GAASuK,EACzD,CAWAhB,UAAAA,CAAWlH,EAAa9C,EAAa8J,EAAOmB,GAC1C,MAAMC,EAASD,EAAgBnI,IAAQA,EACvC,IAAK9C,EACH,OAAO,EAET,MAAMmL,EAAYnL,EAAY8C,IAAQ9C,EAAYkL,GAClD,IAAKC,EACH,OAAO,EAET,MAAMC,EAAYtB,EAAMhH,IAAQgH,EAAMoB,GACtC,IAAKE,EACH,OAAO,EAET,GAAqB,OAAjBA,EAAUC,IAAeD,EAAUE,QAAQ,GAC7C,OAAO3G,KAAKiG,iBAAiBO,EAAWC,EAAUE,MAAM,IAE1D,MAAM7K,EAAQ2K,EAAUE,MACxB,OAAO3G,KAAKwF,cAAcgB,EAAW1K,EACvC,CAGAmJ,aAAAA,CAAc5J,GACZ,MAAM2J,EAAc,CAAC,EAIrB,OAHA/G,OAAO2I,QAAQvL,GAAatB,SAAQsE,IAAkB,IAAhBF,EAAKrC,GAAMuC,EAC/C2G,EAAY7G,EAAI0I,eAAiB/K,CAAK,IAEjCkJ,CACT,EAvKmBP,EACZW,gBAAkB,CACvB0B,iBAAkB,WAClBC,YAAa,WACb,WAAY,MACZC,iBAAkB,WAClBC,UAAW,WACXC,kBAAmB,WACnBC,gBAAiB,YARA1C,EAWZc,iBAAmB,CACxB6B,kBAAmB,WACnBC,aAAc,WACdC,SAAU,YCRd,MAmDA,EAnDqBC,CAAC/I,EAAQjD,KAC5B,MAAM,SAAEyD,EAAQ,WAAEwI,GAAehJ,GAC3B,SACJF,EAAQ,IACRmJ,EAAM,YAAW,YACjBC,EAAc,aAAY,YAC1BC,EAAc,YACdH,WAAYI,EAAY,SACtBrM,EACEO,EAAQwC,EAASmJ,GACvB,IAAK3L,EACH,OAGF,GAAIA,EAAM+L,kBACR,OAAO/L,EAAM+L,kBAEf,GAAI/L,EAAMgM,aAAc,CACtB,MAAMC,EAAOvN,EAAAA,MAAMwN,UAAUlM,EAAMgM,aAAcH,GAEjD,OADA7L,EAAM+L,kBAAoBI,IAAIC,gBAAgBH,GACvCjM,EAAM+L,iBACf,CACA,IAAKL,IAA8B,IAAfA,IAA0D,IAAnCA,EAAWzB,QAAQ6B,GAC5D,OAAI9L,EAAMqM,iBACDrM,EAAMqM,mBAAmB5E,MAAK6E,IACnCtM,EAAM+L,kBAAoBI,IAAIC,gBAAgB,IAAIG,KAAK,CAACD,GAAM,CAAEE,KAAMX,KAC/D7L,EAAM+L,0BAGjBU,QAAQC,KAAK,qBAAsBf,EAAK,OAAQnJ,GAIlD,MAAM,iBAAEP,EAAgB,kBAAEe,EAAiB,eAAEC,GAAmBT,EAC1DmK,EACH3M,GAASA,EAAM2M,aACf,UAAS3J,eAA+BC,IAAiB2I,IACtDgB,GAAyC,IAA9BD,EAAY1C,QAAQ,KAC/B4C,GAAgD,IAApCF,EAAY1C,QAAQ,WAItC,MAAY,cAAR0B,GAA+B,yBAARA,EACjB,GAAEzI,aAAoBjB,YAA2Be,eAA+BC,aAHxF0J,GAAeE,EAAY,IAAMD,EAAW,IAAM,KAAQ,UAASf,IAQrD,EC7ClB,SAASiB,EAAe9M,EAAOwC,EAAUwF,GAIvC,GAAKhI,EAAM2M,YAAYI,WAAW,SAAY/M,EAAM2M,YAAYI,WAAW,MAmB3E,GAA6B,MAAzB/M,EAAM2M,YAAY,IAChB3E,EAAe9E,SAAS6J,WAAW,QAAS,CAE9C,MAAMnK,EAAM,IAAIuJ,IAAInE,EAAe9E,UACnClD,EAAM2M,YAAe,GAAE/J,EAAIoK,SAAShN,EAAM2M,aAC5C,MAvBuD,YAAnD3E,EAAeiF,aAAaC,mBAC9BlN,EAAM2M,YAAe,GAAE3E,EAAe9E,oBAAoBV,EAASP,oBAAoBjC,EAAM2M,cAE1C,WAAnD3E,EAAeiF,aAAaC,oBAC3BlF,EAAeiF,aAAaC,qBAE7BlN,EAAM2M,YAAe,GAAE3E,EAAe9E,oBAAoBV,EAASP,2BAA2BO,EAASQ,qBAAqBhD,EAAM2M,cAqBxI,CC/BA,MAAM,oBAAE5G,EAAmB,UAAEoH,GAAcrH,EAAAA,QAAAA,MAErC,kBAAED,EAAiB,oBAAEuH,GAAwBrH,EAE7CsH,EAAyB,qDACzBC,EAA4B,oBAC5BC,EAA4B,sBAE5BC,EAAmBC,EAAAA,QAAQC,iBAejC,SAASC,EAAkB3F,EAAgB4F,GACzC,IAAIC,EACF/E,EACAgF,EACAC,EACAC,EACAC,EACAC,EAEF,MAAMC,EAAiB,CACrBC,WAAY7L,IAAuB,IAAtB,OAAE9C,EAAM,MAAE4O,GAAO9L,EACxByF,EAAesG,iBAA6D,mBAAnCtG,EAAesG,kBAC1DtG,EAAiBA,EAAesG,gBAAgBtG,EAAgB,CAC9DvI,SACA4O,WAIJR,EAAqBU,KAAKC,MAAMD,KAAKE,UAAUzG,IAE/CiG,EAA0BA,KACxB,MAAMS,EAAoB,CAAC,EACrBC,EAAcf,EAA0BgB,yBAI9C,OAHID,GAAeA,EAAYE,gBAC7BH,EAAkBG,cAAgBF,EAAYE,eAEzCH,CAAiB,EAG1BR,EAAqBA,KASZ,IARmBD,IAUxBa,OAR0BpQ,EAAAA,MAAMqQ,qBAChC/G,EAAegH,aACfhH,EAAeiH,yBACfjH,EAAekH,oCASnBpG,EAAa,CACXlG,IAAKoF,EAAemH,SACpBnG,WAAYhB,EAAegB,WAC3B0C,WAAY1D,EAAe0D,WAC3B0D,QAASxB,EAA0BgB,yBACnCS,iBAAkBC,EAAAA,GAAaC,uBAGjCzB,EAAa,CACXlL,IAAKoF,EAAe9E,SACpB8F,WAAYhB,EAAegB,WAC3B0C,WAAY1D,EAAe0D,WAC3B0D,QAASxB,EAA0BgB,yBACnCS,iBAAkBC,EAAAA,GAAaC,uBAKjCxB,EAAqB/F,EAAegB,WAChC,IAAIL,EAAiBG,GACrB,IAAIF,EAAAA,IAAIC,eAAeC,GAE3BkF,EAAqBhG,EAAegB,WAChC,IAAIL,EAAiBmF,GACrB,IAAIlF,EAAAA,IAAIC,eAAeiF,EAAW,EAExCO,MAAO,CACLrQ,QAAS,CACPwB,UAAWA,EAAU+F,OACrBtG,OAAQD,eAAgBwQ,GACtBzB,EAAmBqB,QAAUnB,IAC7B,MAAM,iBAAE7P,EAAgB,kBAAEe,KAAsBsQ,GAC9CjQ,EAAUgQ,EAAY,CACpB3O,sBAAuBmH,EAAenH,sBACtCf,iBAAkBkI,EAAelI,oBAC7B,CAAC,EAIT,OAAOjC,QAFe6R,EAAW3B,EAAoBzO,EAAWA,EAAWmQ,GAG7E,EACA5R,eAAgBA,EAAe0H,QAEjCiE,OAAQ,CAENvK,OAAQD,eAAgBZ,GACtB2P,EAAmBqB,QAAUnB,IAG7B,OZ9DH,SAA8B0B,GACnC,MAAMnG,EAAS,GAkBf,OAhBImG,GAAcA,EAAW5R,QAC3B4R,EAAW1R,SAAQ0R,GACjBnG,EAAOrL,KAAK,CACVC,iBAAkBX,EAAUkS,EAAW,aACvCxQ,kBAAmB1B,EAAUkS,EAAW,aACxCnE,SAAU/N,EAAUkS,EAAW,aAC/BC,aAAcnS,EAAUkS,EAAW,aACnCE,WAAYnR,EAAAA,MAAMoR,WAAWrS,EAAUkS,EAAW,cAClDI,mBAAoBlR,OAAOpB,EAAUkS,EAAW,cAChD7Q,YAAarB,EAAUkS,EAAW,kBAKxCzJ,EAAAA,EAAAA,IAAgBsD,GAETA,CACT,CY0CiBwG,OZjBV,SAAuB9Q,EAAgB4E,GAG5C,MACMvE,EAAc,CAClBuB,aAF2B,CAAC,WAAY,YAAYjB,KAAK,MAK3D,OAAOX,EAAe0G,gBAAgB,CAAE9B,mBAAkBvE,eAC5D,CYMgC0Q,CAAclC,EAAoB3P,GAG1D,GAGFQ,UAAW,CACTK,OAAQA,CAACb,EAAkBgB,KACzB2O,EAAmBqB,QAAUnB,IACtByB,EAAWQ,UAAK5Q,EAAWyO,EAAoB3P,EAAkB,KAAMgB,MAIpF+Q,SAAU,CAYRC,UAAW3Q,GACFgM,EACL,CACEvI,SAAU8E,EAAe9E,SACzBwI,WAAY1D,EAAe0D,YAE7BjM,GAGJwN,YAAajO,UAA6C,IAAtC,iBAAEiD,EAAgB,YAAE0K,GAAa0D,EACnDtC,EAAmBqB,QAAUnB,IAC7B,MAAMvO,EAAU,CACd4Q,WAAW,EACX3D,cACA1K,oBAEF,OAAO8L,EAAmB1B,iBAAiB3M,GAAS+H,MAAK8I,GAC1CA,GAAOA,EAAI,SAAOjR,GAE/B,EAEJkK,OAAQ,CACNgH,SAAUxR,iBAMC,IANM,iBACfiD,EAAgB,QAChB8B,EAAO,aACPC,EAAY,aACZC,EAAY,aACZwM,GAAe,GAChB9Q,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,IAAKsC,EACH,MAAM,IAAI+C,MAAM,+DAGlB,OAAIgD,EAAelB,oBACVqH,EAAeuC,6BACpBzO,EACA8B,EACAC,EACAC,EACAwM,GAIGtC,EAAewC,4BACpB1O,EACA8B,EACAC,EACAC,EACAwM,EAEJ,IAIJG,MAAO,CACLC,MAAO7R,MAAO8R,EAASC,KAErB,GADA/C,EAAmBoB,QAAUnB,IACzB6C,aAAmBE,YAAa,CAClC,MAAMtR,EAAU,CACduR,SAAU,CAACH,GACXC,iBAEI/C,EAAmBkD,eAAexR,EAC1C,KAAO,CACL,MAAMyR,EAAO,CACXC,2BAA4BN,EAAQO,OAAOD,4BAA4BvG,MACvEyG,wBAAyBR,EAAQS,YACjCC,2BAA4BV,EAAQ7N,eACpCwO,kBAAmBlE,EACnBF,yBACAC,6BAGIoE,EAAgBtE,EAAoB+D,GACpCQ,EAAY,IAAIxE,EAAUuE,GAEhCC,EAAUC,KAAOxE,EAAoB0D,GAErC,MAEMpR,EAAU,CACduR,SAAU,CAHSU,EAAUE,SAI7Bd,iBAGI/C,EAAmBkD,eAAexR,EAC1C,IAIJiR,4BAA6B3R,MAC3BiD,EACA8B,EACAC,EACAC,EACAwM,KAGAzC,EAAmBoB,QAAUlB,IAE7B,MAWM4D,SAXatM,EACjBwI,EACA/L,GAL0B,EAO1B8B,EACAC,EACAC,EACA+D,IAIwC/B,IAAIJ,GAExCkM,EAAwB,CAAC,EACzBC,EAAqB,CAAC,EAE5BF,EAA6B7T,SAAQuE,IAC9BuP,EAAsBvP,EAASQ,qBAClC+O,EAAsBvP,EAASQ,mBAAqB,CAClDf,iBAAkBO,EAASP,iBAC3B3B,iBAAkBkC,EAASlC,iBAC3B0C,kBAAmBR,EAASQ,kBAC5BiP,kBAAmBzP,EAASyP,kBAC5BC,aAAc1P,EAAS0P,aACvBC,WAAY3P,EAAS2P,WACrBZ,YAAa/O,EAAS+O,YACtBa,aAAc5P,EAAS4P,aACvBC,SAAU7P,EAAS6P,WAIlBL,EAAmBxP,EAASQ,qBAC/BgP,EAAmBxP,EAASQ,mBAAqB,IAGnD,MAAMU,EAAUyK,EAAemE,uBAAuB,CACpD9P,aAGFA,EAASkB,QAAUA,EACnBlB,EAASU,SAAW8E,EAAe9E,SACnCV,EAAS+P,QAAUvK,EAAeuK,QAElC/E,EAAiBgF,iBAAiB9O,EAAS,CACzCzB,mBACAe,kBAAmBR,EAASQ,kBAC5BC,eAAgBT,EAASS,iBAG3B+O,EAAmBxP,EAASQ,mBAAmB7E,KAAKqE,EAAS,IAI/D,MAAMiQ,EAAiBtQ,OAAOuQ,OAAOX,GAOrC,OANAY,EAAAA,mBAAmBC,kBAAkBH,EAAgBhC,GAErDtO,OAAOC,KAAK4P,GAAoB/T,SAAQmH,GACtCuN,EAAAA,mBAAmBE,aAAab,EAAmB5M,GAAoBqL,KAGlEsB,CAAqB,EAG9BrB,6BAA8B1R,eAC5BiD,EACA8B,EACAC,EACAC,GAEG,IADHwM,EAAY9Q,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,IAAAA,UAAA,GAGZqO,EAAmBoB,QAAUlB,IAE7B,MAAQ9J,YAAa2N,EAAuBlL,SAAUiM,SAC9CtN,EACJwI,EACA/L,GANwB,EAQxB8B,EACAC,EACAC,EACA+D,GASE+K,EAAsBvQ,IAC1B,MAAMwD,EAAcH,EAAkBrD,GAGtC,OAAKwF,EAAeiF,aAAa+F,SAIjC7Q,OAAOC,KAAK4D,GAAa/H,SAAQoE,IAC/B,MAAMrC,EAAQgG,EAAY3D,GAItBrC,GAASA,EAAM2M,cAAgB3M,EAAM6K,QAEvC7K,EAAMqM,iBAAmB,KAEvBS,EAAe9M,EAAOgG,EAAagC,GAEnC,MAAMtI,EAAU,CAId4Q,WAAW,EACX3D,YAAa3M,EAAM2M,YAKnB1K,iBAAkB+D,EAAY/D,kBAGhC,OAAO8L,EAAmB1B,iBAAiB3M,GAAS+H,MAAK8I,IAIvD,MAAM0C,EACH1C,aAAezO,OAASyO,EAAI1G,MAAKqJ,GAAeA,GAAaC,mBAC9D7T,EAEF,OADAU,EAAM6K,MAAQoI,EACPA,CAAG,GACV,EAEN,IAEKjN,GAxCEA,CAwCS,EA4CpB+L,EAAsB9T,SAAQmV,IAC5BA,EAAQnR,iBAAmBA,CAAgB,IAG7C0Q,EAAAA,mBAAmBC,kBAAkBb,EAAuBtB,GAE5D,MAAM4C,EAA0BP,EAAe7M,KAAIoC,GACjDA,EAAQZ,MAAK7I,KA/Cf,SAAwBA,GACtB,MAAM0U,EAAuB1U,EAAUqH,IAAI8M,GAG3CO,EAAqBrV,SAAQ,CAACuE,EAAU+Q,KACtC/Q,EAASU,SAAW8E,EAAe9E,SACnCV,EAAS+P,QAAUvK,EAAeuK,QAElC,MAAM7O,EAAUyK,EAAemE,uBAAuB,CACpD9P,aAMFA,EAASkB,QAAUA,EAKnB8J,EAAiBgF,iBAAiB9O,EAAS,CACzCzB,mBACAe,kBAAmBR,EAASQ,kBAC5BC,eAAgBT,EAASS,gBACzB,IAGJ0P,EAAAA,mBAAmBE,aAAaS,EAAsB7C,EACxD,CAoBIS,CAAetS,EAAU,MAM7B,aAHMqI,QAAQO,IAAI6L,GArBlB,WACE,MAAMhK,EAAQsJ,EAAAA,mBAAmBa,SAASvR,EAAkBwO,GACvDpH,IAGLA,EAAMoK,UAAW,EACnB,CAgBAC,GAEO3B,CACT,EACAtJ,2BAA0B,EAC1BkL,wBAAAA,CAAyBC,GACvB,MAAMC,EAASD,EAAWC,OACpBC,EAAW,GAEjB,OAAKD,GAILD,EAAWC,OAAO5V,SAAQuE,IACxB,MAAMuR,EAAiBvR,EAASuR,eAEhC,GAAIA,EAAiB,EACnB,IAAK,IAAItR,EAAQ,EAAGA,GAASsR,EAAgBtR,IAAS,CACpD,MAAMiB,EAAUQ,KAAKoO,uBAAuB,CAC1C9P,WACAC,UAEFqR,EAAS3V,KAAKuF,EAChB,KACK,CACL,MAAMA,EAAUQ,KAAKoO,uBAAuB,CAAE9P,aAC9CsR,EAAS3V,KAAKuF,EAChB,KAGKoQ,GApBEA,CAqBX,EACAxB,sBAAAA,CAAsB0B,GAAsB,IAArB,SAAExR,EAAQ,MAAEC,GAAOuR,EAMxC,OALiB1R,EAAW,CAC1BE,WACAC,QACAC,OAAQsF,GAGZ,EACAiM,UAASA,IACApG,EAETqG,oBAAAA,CAAoBC,GAAoB,IAAnB,OAAE1U,EAAM,MAAE4O,GAAO8F,EACpC,MAAQC,kBAAmBC,GAA4B5U,EACjD6U,EAAyB5V,EAAAA,MAAM6V,WAAWlG,EAAMmG,OAAO,sBAEvDJ,EACHE,EAAuBvW,QAAUuW,GAA2BD,EAM/D,OAJED,GAAqBtS,MAAMC,QAAQqS,GAC/BA,EACA,CAACA,EAGT,GCxfW,IAAUlR,ED+fvB,OAJI8E,EAAeyM,iBACjBtG,EAAehH,QC5fMjE,ED4fkB8E,EAAe9E,SC3fjD,CACLsG,OAAQA,CAACvH,EAAkBe,IAClB,IAAIiE,SAAQ,CAACC,EAASC,KAE3B,MAEMvE,EAAO,GAAEM,aAAoBjB,YAA2Be,wBAExD0R,EAAM,IAAIC,eAChBD,EAAIE,KAAK,OAAQhS,GAAK,GAKtB6J,QAAQoI,IAAIH,GAEZA,EAAII,mBAAqB,WAEvB,GAAsB,GAAlBJ,EAAIK,WACN,OAAQL,EAAIM,QACV,KAAK,IACH9N,EAAQwN,EAAIO,cAEZ,MACF,KAAK,IACH9N,EAAO,yDAGf,EACAuN,EAAIQ,MAAM,ODieTC,EAAAA,GAAkBC,OAAOjH,EAClC,CE1fA,MAAMX,EAAmB6H,EAAAA,QAAAA,QAAa3H,iBAEhC4H,EAAW,CACflX,iBAAkB,mBAClB+B,UAAW,aAGb,IAAIoV,EAAS,CACXC,KAAM,GACNC,oBAAqB,IAAI1N,KAY3B,SAAS2N,EAAcC,GACrB,OAAOxT,OAAOC,KAAKuT,GAAKC,QACtB,CAACC,EAAKxT,KACoB,iBAAbsT,EAAItT,IAAkC,OAAbsT,EAAItT,GAEtCwT,EAAIxT,GAAOqT,EAAcC,EAAItT,IAE7BwT,EAAIxT,GAAOsT,EAAItT,GAEbA,EAAIyT,SAAS,cACfD,EAAIxT,GAAOgT,EAAAA,QAAAA,MAAWU,aAAaF,EAAIxT,KAElCwT,IAET/T,MAAMC,QAAQ4T,GAAO,GAAK,CAAC,EAE/B,CACA,MAAMK,EAAmBpT,GAChB2S,EAAOC,KAAK3L,MAAKoM,GAAYA,EAASrT,MAAQA,IAGjDsT,EAAcA,CAAC7T,EAAKrC,KACxB,IAAIhC,EAAU,GAQd,OAPAuX,EAAOC,KAAKvP,KAAIgQ,IACdA,EAASjY,QAAQiI,KAAIkQ,IACfA,EAAO9T,KAASrC,GAClBhC,EAAQG,KAAKgY,EACf,GACA,IAEGnY,CAAO,EAGhB,SAASoY,EAAmBC,GAC1B,MAAM,SAAEnT,GAAamT,EAEflI,EAAiB,CACrBC,WAAYpP,UAA0B,IAAnB,MAAEqP,EAAK,IAAEzL,GAAKL,EAC1BK,IACHA,EAAMyL,EAAMjG,IAAI,QAElB,IAAI6N,EAAWD,EAAiBpT,GAKhC,GAAIqT,EACF,OAAOA,EAASjY,QAAQiI,KAAIkQ,GACnBA,EAAOlU,mBAIlB,MAAMqU,QAAiBC,MAAM3T,GACvB2F,QAAa+N,EAASE,OAE5B,IAAIvU,EACAe,EACJuF,EAAKvK,QAAQC,SAAQoL,IACnBpH,EAAmBoH,EAAMpH,iBAEzBoH,EAAMG,OAAOvL,SAAQuL,IACnBxG,EAAoBwG,EAAOxG,kBAE3BwG,EAAO5K,UAAUX,SAAQuE,IACvB,MAAQI,IAAKc,EAAS8M,SAAUiG,GAAqBjU,EAGrDgL,EAAiBgF,iBAAiB9O,EAAS,CACzCzB,mBACAe,oBACAC,eAAgBwT,EAAiBxT,gBACjC,GACF,GACF,IAGJsS,EAAOC,KAAKrX,KAAK,CACfyE,MACA5E,QAAS,IAAIuK,EAAKvK,WAEpBuX,EAAOE,oBAAoBjN,IACzB5F,EACA2F,EAAKvK,QAAQiI,KAAIoD,GAASA,EAAMpH,mBACjC,EAEHoM,MAAO,CACLrQ,QAAS,CACPwB,UAAWA,OACXP,OAAQD,UACN,MAAOqD,EAAKrC,GAASmC,OAAO2I,QAAQ4L,GAAO,GACrCC,EAAcrB,EAASjT,GAK7B,OAFgB6T,EAAYS,EAAa3W,GAE1BiG,KAAIkQ,IACV,CACL5X,UAAW4X,EAAO/V,gBAClB/B,KAAM8X,EAAOlV,UACbnC,YAAaqX,EAAO7V,iBACpB1B,UAAWuX,EAAOS,aAClB7X,WAAYoX,EAAOU,WACnBrY,IAAK2X,EAAOW,UACZrY,YAAa0X,EAAOjW,YACpB9B,iBAAkB+X,EAAOlU,iBACzB2U,aAAcT,EAAOS,aACrBtY,KAAM6X,EAAOY,aAEf,EAEJlZ,eAAgBA,KACd4O,QAAQC,KAAK,kDAAkD,GAGnElD,OAAQ,CAENvK,OAAQA,KACNwN,QAAQC,KAAK,iDAAiD,GAGlE9N,UAAW,CACTK,OAAQA,KACNwN,QAAQC,KAAK,oDAAoD,IAIvEyD,SAAU,CAcRC,UAAW3Q,GACFgM,EAAavI,EAAUzD,GAEhC+J,OAAQ,CACNgH,SAAUxR,iBAAuE,IAAhE,iBAAEiD,EAAgB,aAAEwO,GAAe,EAAK,WAAEuG,GAAYrX,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzE,IAAKsC,EACH,MAAM,IAAI+C,MAAM,+DAGlB,MAAMqE,EAAQ6M,EAAY,mBAAoBjU,GAAkB,GAChE,IAAIuH,EAGFA,EADEwN,EACOA,EAAW3N,EAAMG,QAEjBH,EAAMG,OAGjB,MAAMuI,EAAwBvI,EAAOvD,KAAIuD,IACvC,MAAMyN,EAAgB,CACpBhV,iBAAkBoH,EAAMpH,oBACrBuH,GAGL,cADOyN,EAAcrY,UACdqY,CAAa,IAQtBtE,EAAAA,mBAAmBC,kBAAkBb,EAAuBtB,GAO5D,MAAMyG,EAAiB1N,EAAOzL,OAC9ByL,EAAOvL,SAAQ,CAACuL,EAAQ+J,KACtB,MAAM3U,EAAY4K,EAAO5K,UAAUqH,KAAIzD,IAKrC,MAEMmT,EAAM,IAFaD,EAAclT,EAASgO,UAI9C5N,IAAKJ,EAASI,IACdc,QAASlB,EAASI,OACf4G,KACAH,GAIL,cAFOsM,EAAI/W,iBACJ+W,EAAInM,OACJmM,CAAG,IA7Bd,IAAwBrC,IA+BP1U,EA9Bf+T,EAAAA,mBAAmBE,aAAaS,EAAsB7C,GA+BlD8C,IAAU2D,EAAiB,IAzBjBvE,EAAAA,mBAAmBa,SAASvR,EAAkBwO,GACtDgD,UAAW,EA0BjB,GAEJ,IAGJ7C,MAAO,CACLC,MAAOA,KACLpE,QAAQC,KAAK,yCAAyC,GAG1DiH,wBAAAA,CAAyBC,GACvB,MAAMC,EAASD,EAAWC,OACpBC,EAAW,GAEjB,OAAKD,GAILD,EAAWC,OAAO5V,SAAQuE,IACxB,MAAMuR,EAAiBvR,EAASuR,eAEhC,GAAIA,EAAiB,EACnB,IAAK,IAAIoD,EAAI,EAAGA,EAAIpD,EAAgBoD,IAAK,CACvC,MAAMzT,EAAUpB,EAAW,CACzBE,WACAC,MAAO0U,EACPzU,OAAQ2T,IAEVvC,EAAS3V,KAAKuF,EAChB,KACK,CACL,MAAMA,EAAUpB,EAAW,CAAEE,WAAUE,OAAQ2T,IAC/CvC,EAAS3V,KAAKuF,EAChB,KAGKoQ,GArBEA,CAsBX,EACAxB,sBAAAA,CAAsBjC,GAAsB,IAArB,SAAE7N,EAAQ,MAAEC,GAAO4N,EAExC,OADiB/N,EAAW,CAAEE,WAAUC,SAE1C,EACAyR,qBAAsBF,IAAuB,IAAtB,OAAEvU,EAAM,MAAE4O,GAAO2F,EACtC,MAAMpR,EAAMyL,EAAMjG,IAAI,OACtB,OAAOmN,EAAOE,oBAAoBrN,IAAIxF,EAAI,GAG9C,OAAOuS,EAAAA,GAAkBC,OAAOjH,EAClC,CCjRA,MAAMX,EAAmB6H,EAAAA,QAAAA,QAAa3H,kBAChC,OAAE0J,GAAWzE,EAAAA,mBAEb0E,EAAiB,CACrBC,IAAI,EACJC,KAAK,EACLC,KAAK,GAGDC,EAAe,SAACC,EAAIC,GACxB,OAAID,IAAOC,EADoBhY,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,EAI9B+X,EAAKC,GACC,EAEH,CACT,EAGMX,EAAaA,CAACY,EAASC,KAC3B,MAAMC,EAAYF,EAAQhZ,UAAU,GAC9BmZ,EAAYF,EAAQjZ,UAAU,GAC9BoZ,EAAYF,EAAUzF,SACtB4F,EAAYF,EAAU1F,SAEtB6F,EAASb,EAAeW,GACxBG,EAASd,EAAeY,GAE9B,OAAIC,GAAUC,EAELV,EAAaK,EAAU5F,aAAc6F,EAAU7F,cAEnDgG,GAAWC,EAGTD,GAAU,EAAI,EAFZT,EAAaM,EAAU7F,aAAc4F,EAAU5F,aAElC,EAGxB,SAASkG,EAAoBC,GAC3B,MAAM,KAAEnQ,GAASmQ,EAEXlK,EAAiB,CACrBC,WAAY7L,IAAuB,IAAtB,OAAE9C,EAAM,MAAE4O,GAAO9L,CAAA,EAC9B8L,MAAO,CACLrQ,QAAS,CACPwB,UAAWA,OACXP,OAAQQ,GACYkT,EAAAA,mBAAmBuB,uBAEpBjO,KAAIhE,IACnB,IAAIqW,EAAe,EACnB,MAAMvZ,EAAa,IAAIwZ,IAIjBlP,EAAQsJ,EAAAA,mBAAmBa,SAASvR,GAC1CoH,EAAMG,OAAOvL,SAAQmV,IACnBkF,GAAgBlF,EAAQxU,UAAUb,OAClCgB,EAAWyZ,IAAIpF,EAAQxU,UAAU,GAAGyT,SAAS,IAI/C,MAAMoG,EAAgBpP,GAAOG,OAAO,IAAI5K,UAAU,GAElD,GAAI6Z,EACF,MAAO,CACLla,UAAWka,EAAcrY,gBACzB/B,KAAMoa,EAAcxX,UACpBnC,YAAa2Z,EAAcnY,iBAC3B9B,IAAKia,EAAc3B,UACnBrY,YAAaC,EAAAA,MAAMC,SAAS8Z,EAAcvY,aAC1C9B,iBAAkBqa,EAAcxW,iBAChC3D,KAAMma,EAAc1B,UAEpBnY,UAAW0Z,EACXvZ,WAAY+C,MAAM4W,KAAK3Z,GAAYc,KAAK,KACxC+W,aAAc0B,EAElB,IAGJza,eAAgBA,KACd4O,QAAQC,KAAK,mDAAmD,GAGpElD,OAAQ,CACNvK,OAAQ6E,GACQ6O,EAAAA,mBAAmBa,SAAS1P,GAC7B0F,OAAOvD,KAAImN,IACtB,MAAMqF,EAAgBrF,GAASxU,UAAU,GACzC,MAAO,CACLR,iBAAkB0F,EAClB3E,kBAAmBsZ,EAAczV,kBACjCwI,SAAUiN,EAAcpG,SACxBzC,aAAc6I,EAAcvG,aAC5BrC,WAAY4I,EAAcE,WAC1B5I,mBAAoBqD,EAAQxU,UAAUb,OACtCe,YAAa2Z,EAAcxG,kBAC5B,KAIPrT,UAAW,CACTK,OAAQA,KACNwN,QAAQC,KAAK,qDAAqD,IAIxEyD,SAAU,CACRC,UAAW3Q,IACT,MAAM,SAAE+C,EAAQ,IAAEmJ,EAAG,YAAEE,GAAgBpM,EAEjCO,EAAQwC,EAASmJ,GACvB,GAAI3L,aAAiB8B,OAAS9B,EAAM,aAAcgR,YAChD,OAAO7E,IAAIC,gBACT,IAAIG,KAAK,CAACvM,EAAM,IAAK,CACnBwM,KAAMX,IAGZ,EAEFrC,OAAQ,CACNgH,SAAUxR,iBAA2D,IAApD,iBAAEiD,EAAgB,aAAEwO,GAAe,GAAO9Q,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7D,IAAKsC,EACH,MAAM,IAAI+C,MAAM,+DAIlB,MAAMqE,EAAQsJ,EAAAA,mBAAmBa,SAASvR,EAAkBwO,GAG5DkC,EAAAA,mBAAmBiG,gBAAgBxB,EAAOyB,aAAc,CACtD5W,mBACAwO,iBAGFpH,EAAMG,OAAOvL,SAAQmV,IACnB,MAAM,kBAAEpQ,GAAsBoQ,EAExB0F,EAAe1F,EAAQxU,UAAU,GAAGmV,eAAiB,EAE3DX,EAAQxU,UAAUX,SAAQ,CAACuE,EAAU+Q,KACnC,MACE3Q,IAAKc,EAAO,iBACZzB,EAAgB,kBAChBe,EAAiB,eACjBC,GACET,EAEJA,EAASkB,QAAUA,EAGnB8J,EAAiBgF,iBAAiB9O,EAAS,CACzCzB,mBACAe,oBACAC,iBACA8V,WAAYD,EAAevF,EAAQ,GACnC,IAGJZ,EAAAA,mBAAmBiG,gBAAgBxB,EAAO4B,gBAAiB,CACzD/W,mBACAe,oBACAyN,gBACA,GAEN,IAGJG,MAAO,CACLC,MAAOoI,IACL,MAAMC,EAAapT,EAAAA,QAAAA,KAAWqT,cAAcF,GAG5C,IAAIG,EAAYjN,IAAIC,gBAAgB8M,GACpCG,OAAOC,SAAShS,OAAO8R,EAAU,GAGrCzF,wBAAAA,CAAyBC,GACvB,MAAMC,EAASD,EAAWC,OACpBC,EAAW,GAEjB,OAAKD,GAILD,EAAWC,OAAO5V,SAAQuE,IACxB,MAAMuR,EAAiBvR,EAASuR,eAChC,GAAIA,EAAiB,EAEnB,IAAK,IAAIoD,EAAI,EAAGA,GAAKpD,EAAgBoD,IAAK,CACxC,MAAMzT,EAAUQ,KAAKoO,uBAAuB,CAC1C9P,WACAC,MAAO0U,IAETrD,EAAS3V,KAAKuF,EAChB,KACK,CACL,MAAMA,EAAUQ,KAAKoO,uBAAuB,CAAE9P,aAC9CsR,EAAS3V,KAAKuF,EAChB,KAGKoQ,GApBEA,CAqBX,EACAxB,sBAAAA,CAAsBjC,GAAsB,IAArB,SAAE7N,EAAQ,MAAEC,GAAO4N,EACxC,MAAM,iBAAEpO,EAAgB,kBAAEe,EAAiB,eAAEC,GAAmBT,EAOhE,IAAIkB,EANmBiP,EAAAA,mBAAmB4G,YACxCtX,EACAe,EACAC,GAG2BL,IAM7B,YAJctD,IAAVmD,IACFiB,GAAY,UAASjB,KAGhBiB,CACT,EACA+E,0BAAAA,GACEgE,QAAQoI,IAAI,6CACd,EACAX,qBAAsBF,IAAuB,IAAtB,OAAEvU,EAAM,MAAE4O,GAAO2F,EACtC,MAAQI,kBAAmBC,GAA4B5U,EAGjD2U,EAFyB/F,EAAMmG,OAAO,sBAEQH,EAC9CmF,EACJpF,GAAqBtS,MAAMC,QAAQqS,GAC/BA,EACA,CAACA,GAGP,IAAIqF,GAAiB,EASrB,OARAD,EAAyBvb,SAAQgE,IAC/B,MAAMoH,EAAQsJ,EAAAA,mBAAmBa,SAASvR,GACtCoH,IACFA,EAAMG,OAASH,EAAMG,OAAOkQ,KAAK1C,GACjCyC,GAAiB,EACnB,IAGKA,EAAiBD,EAA2B,EAAE,GAGzD,OAAOrE,EAAAA,GAAkBC,OAAOjH,EAClC,CClPA,SAASwL,EAAuBC,EAAqBC,GACnD,MAAM,KAAE3R,GAAS0R,EACjB,IAAIE,EAEJ,MAAM3L,EAAiB,CACrBC,WAAYpP,UAA6B,IAAtB,OAAES,EAAM,MAAE4O,GAAO9L,EAClC,MAAMK,EAAMyL,EAAMjG,IAAI,OAEtB,IAAKxF,EACH,MAAM,IAAIoC,MAAO,eAAckD,MAC1B,CACL,MAAMoO,QAAiBC,MAAM3T,GAC7B,IAAI2F,QAAa+N,EAASE,OAC1B,IAAKjO,EAAKwR,SAASC,WAAW,GAC5B,MAAM,IAAIhV,MAAM,yCAGlB8U,EAAmBnM,EACjBpF,EAAKwR,QAAQC,SAAS,GAAGC,cACzBJ,GAEFC,EAAiB1L,WAAW,CAAE3O,SAAQ4O,SACxC,GAEFA,MAAO,CACLrQ,QAAS,CACPiB,OAAQQ,GAAUqa,EAAiBzL,MAAMrQ,QAAQiB,OAAOQ,IAE1D+J,OAAQ,CACNvK,OAAQ,kBAAa6a,EAAiBzL,MAAM7E,OAAOvK,UAAOU,UAAQ,GAEpEf,UAAW,CACTK,OAAQA,CAACb,EAAkBgB,IACzB0a,EAAiBzL,MAAMzP,UAAUK,OAAOb,EAAkBgB,KAGhE+Q,SAAU,CACRC,UAAW,kBAAa0J,EAAiB3J,SAASC,aAAUzQ,UAAQ,EACpE6J,OAAQ,CACNgH,SAAUxR,iBAAA,OAAmB8a,EAAiB3J,SAAS3G,OAAOgH,YAAS7Q,UAAQ,IAGnFiR,MAAO,CACLC,MAAO,kBAAaiJ,EAAiBlJ,SAAMjR,UAAQ,GAErD8I,2BAA4B,kBAAaqR,EAAiBrR,8BAA2B9I,UAAQ,EAC7FgU,yBAA0B,kBAAamG,EAAiBnG,4BAAyBhU,UAAQ,EACzF2S,uBAAwB,kBAAawH,EAAiBxH,0BAAuB3S,UAAQ,EACrFuU,oBAAAA,CAAoB7D,GAAoB,IAAnB,OAAE5Q,EAAM,MAAE4O,GAAOgC,EAChC6J,EAAoB,GAGxB,MAAM5F,EACJjG,EAAMjG,IAAI,sBAAwBiG,EAAMjG,IAAI,qBAC9C,IAAKkM,EACH,MAAM,IAAItP,MAAO,wCAAuCkD,MAG1D,OADAgS,EAAoB5F,EAAuB6F,MAAM,KAC1CD,CACT,GAEF,OAAO/E,EAAAA,GAAkBC,OAAOjH,EAClC,C,eC9DO,MAAMiM,EAAqB,CAChC,uBAAwB,CACtBC,SAAU,mBACVC,QAASC,GAAKA,GAEhB,sBAAuB,CACrBF,SAAU,oBACVC,QAASA,CAAC9Q,EAAQgR,KAChBhR,EAAOvL,SAAQuL,IACbA,EAAOiR,gBAAkBD,EACzB7H,EAAAA,mBAAmB+H,qBAAqBlR,EAAO,IAE1CA,KAcAmR,EAA6B3b,UAMD,IANQ,SAC/Cob,EAAQ,KACRQ,EAAI,KACJC,EAAI,iBACJC,EAAgB,gBAChBC,GACkCxY,EAClC,MAAM,SAAE8X,EAAQ,QAAEC,GAAYF,EAASQ,IAAS,CAAEN,QAASC,GAAKA,GAE1DS,EAAiB7Y,OAAOuQ,OAAOoI,EAAiBE,gBAChDnU,EAAW,GACXoU,EAAa,GAEnB,IAAK,MAAMC,KAAiBF,EAAgB,CAC1C,MAAM,cAAEf,EAAa,WAAEO,GAAeU,EACtC,GAAMjB,GAAiBc,EAAgBI,SAASX,GAAa,CAC3D,MAAOY,GAAcN,EAAiBO,eAAeb,GAE/CnS,GADOD,EAAAA,EAAAA,KAAIgT,EAAYR,GACRU,MAAMF,EAAYP,GACvChU,EAAS1I,KAAKkK,EAAQZ,MAAKc,GAAQ0S,EAAW9c,KAAKmc,EAAQ/R,EAAMiS,MACnE,CACF,CAIA,aAFMvT,QAAQsU,WAAW1U,IAElB2U,EAAAA,EAAAA,QAAOP,EAAWQ,QAAQ9F,GAAOA,EAAI0E,IAAU,EAY3CqB,GAAwBrL,IAKD,IALE,KACpCuK,EAAI,KACJC,EAAI,iBACJC,EAAgB,gBAChBC,GAC6B1K,EAC7B,MAAM2K,EAAiB7Y,OAAOuQ,OAAOoI,EAAiBE,gBAChDC,EAAa,GACnB,IAAK,MAAMC,KAAiBF,EAAgB,CAC1C,MAAM,cAAEf,EAAa,WAAEO,GAAeU,EACtC,GAAMjB,GAAiBc,EAAgBI,SAASX,GAAa,CAC3D,MAAOY,GAAcN,EAAiBO,eAAeb,GAE/CjS,GADOH,EAAAA,EAAAA,KAAIgT,EAAYR,GACXU,MAAMF,EAAYP,GACpCI,EAAW9c,KAAKoK,EAClB,CACF,CACA,OAAO0S,EAAWQ,MAAM,EAYbE,GAA2B3H,IAKD,IALE,KACvC4G,EAAI,KACJC,EAAI,sBACJe,EAAqB,iBACrBd,GACgC9G,EAChC,MAAOoH,GAAcN,EAAiBO,eAAeO,GAErD,OADaxT,EAAAA,EAAAA,KAAIgT,EAAYR,GACjBU,MAAMF,EAAYP,EAAK,EAWxBgB,GAAwB1H,IAKD,IALE,KACpCyG,EAAI,KACJC,EAAI,sBACJe,EAAqB,iBACrBd,GAC6B3G,EAC7B,MAAOP,GAAciH,EACfpI,EAAiBE,EAAAA,mBAAmBmJ,UACxClI,EAAW3R,iBACX2R,EAAW5Q,oBAENoY,GAAcN,EAAiBO,eACpC5I,EAAegI,iBAAmBmB,GAEpC,OAAOR,EAAWR,MAASC,EAAK,EAGlC,SAASkB,GACPC,EACAnC,EACAiB,GAEA,MAAM,YAAEmB,GAAgBD,GAClB,gBAAEjB,EAAe,sBAAEa,GAA0BK,EAE7C9N,EAAiB,CACrBC,WAAY,mBAAA8N,EAAAvc,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAoa,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJtB,EAAIsB,GAAAxc,UAAAwc,GAAA,OAClBT,GAAsB,CAAEd,KAAM,aAAcC,OAAMC,mBAAkBC,mBAAkB,EACxF1M,MAAO,CACLrQ,QAAS,CACPiB,OAAQ,mBAAAmd,EAAAzc,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAsa,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJxB,EAAIwB,GAAA1c,UAAA0c,GAAA,OACd1B,EAA2B,CACzBP,WACAQ,KAAM,uBACNC,OACAC,mBACAC,mBACA,GAENvR,OAAQ,CACNvK,OAAQ,mBAAAqd,EAAA3c,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAwa,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ1B,EAAI0B,GAAA5c,UAAA4c,GAAA,OACd5B,EAA2B,CACzBP,WACAQ,KAAM,sBACNC,OACAC,mBACAC,mBACA,GAENnc,UAAW,CACTK,OAAQ,mBAAAud,EAAA7c,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAA0a,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ5B,EAAI4B,GAAA9c,UAAA8c,GAAA,OACd9B,EAA2B,CACzBP,WACAQ,KAAM,yBACNC,OACAC,mBACAC,mBACA,IAGR5K,SAAU,CACRlD,YAAa,mBAAAyP,EAAA/c,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAA4a,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ9B,EAAI8B,GAAAhd,UAAAgd,GAAA,OACnBhC,EAA2B,CACzBP,WACAQ,KAAM,uBACNC,OACAC,mBACAC,mBACA,EACJ3K,UAAW,mBAAAwM,EAAAjd,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAA8a,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJhC,EAAIgC,GAAAld,UAAAkd,GAAA,OACjBlB,GAAyB,CACvBf,KAAM,qBACNC,OACAe,wBACAd,oBACA,EACJtR,OAAQ,CACNgH,SAAU,mBAAAsM,EAAAnd,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAgb,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJlC,EAAIkC,GAAApd,UAAAod,GAAA,OAChBpC,EAA2B,CACzBP,WACAQ,KAAM,2BACNC,OACAC,mBACAC,mBACA,IAGRnK,MAAO,CACLC,MAAO,mBAAAmM,EAAArd,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAkb,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJpC,EAAIoC,GAAAtd,UAAAsd,GAAA,OACbtB,GAAyB,CACvBf,KAAM,cACNC,OACAe,wBACAd,oBACA,GAENrS,2BAA4B,mBAAAyU,EAAAvd,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAob,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJtC,EAAIsC,GAAAxd,UAAAwd,GAAA,OAClCzB,GAAsB,CACpBd,KAAM,6BACNC,OACAC,mBACAC,mBACA,EACJpH,yBAA0B,mBAAAyJ,EAAAzd,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAsb,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJxC,EAAIwC,GAAA1d,UAAA0d,GAAA,OAChCxB,GAAsB,CACpBjB,KAAM,2BACNC,OACAe,wBACAd,oBACA,EACJxI,uBAAwB,mBAAAgL,EAAA3d,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAAwb,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ1C,EAAI0C,GAAA5d,UAAA4d,GAAA,OAC9B1B,GAAsB,CACpBjB,KAAM,2BACNC,OACAe,wBACAd,oBACA,EACJ5G,qBAAsB,mBAAAsJ,EAAA7d,UAAA5B,OAAI8c,EAAI,IAAA/Y,MAAA0b,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ5C,EAAI4C,GAAA9d,UAAA8d,GAAA,OAC5B/B,GAAsB,CACpBd,KAAM,uBACNC,OACAC,mBACAC,mBACA,GAGN,OAAO5F,EAAAA,GAAkBC,OAAOjH,EAClC,CC9MA,SA9BA,WACE,MAAO,CACL,CACEjG,KAAM,WACNsE,KAAM,SACNkR,iBAAkB/P,GAEpB,CACEzF,KAAM,gBACNsE,KAAM,SACNkR,iBAAkB/D,GAEpB,CACEzR,KAAM,YACNsE,KAAM,UACNkR,iBAAkBtH,GAEpB,CACElO,KAAM,aACNsE,KAAM,WACNkR,iBAAkBtF,GAEpB,CACElQ,KAAM,QACNsE,KAAM,WACNkR,iBAAkB3B,IAGxB,E,4WCrCe,SAAS4B,GAAOpb,GAE0B,IAFzB,gBAC9Bqb,GACiCrb,EACjC,MAAM,eAAEsb,GAAmBD,EAAgBE,UAEpCC,EAAcC,IAAuBC,EAAAA,GAAAA,OAErCC,EAAgBC,IAAqBC,EAAAA,GAAAA,UAAS,KAErDC,EAAAA,GAAAA,YAAU,KACR,MAAMC,EAAgBA,KACpB,MAAMC,EACJP,EAAoBQ,6BAA6B,gBAAkB,UACrEL,EAAkBN,EAAeY,iBAAiBF,GAAa,GAG3D,YAAEG,GAAgBb,EAAec,UACrCd,EAAezG,OAAOwH,kBACtBN,GAKF,OAFAA,IAEO,KACLI,GAAa,CACd,GACA,CAACb,EAAgBE,IAEpB,MAAMc,GAAgBC,EAAAA,GAAAA,cACpBjE,GAAQgD,EAAekB,kBAAkBlE,IACzC,CAACgD,IAGH,OACEmB,GAAAA,cAAAA,GAAAA,SAAA,KACGd,EAAejY,KAAIgZ,IAClB,MAAM,GAAEC,EAAE,UAAEC,EAAS,eAAEC,GAAmBH,EAC1C,OAGED,GAAAA,cAAA,OACE3c,IAAK6c,EACLG,UAAWC,KAAW,SAEtBN,GAAAA,cAACG,EAASI,GAAA,CACRL,GAAIA,GACAE,EAAc,CAClBP,cAAeA,EACfjB,gBAAiBA,KAEf,IAKhB,CChDA,MAAM,mBAAE4B,GAAkB,gBAAEC,GAAe,gBAAEC,IAAoBC,GAAAA,QA0GjE,SAxGA,SAAqBpd,GAAwD,IAAvD,eAAEqd,EAAc,iBAAE9E,EAAgB,gBAAE8C,GAAiBrb,EACzE,MAAOsd,IAAaC,EAAAA,GAAAA,KACdC,GAAWC,EAAAA,GAAAA,MACX1G,GAAW2G,EAAAA,GAAAA,OA0BX,EAAEC,IAAMC,EAAAA,GAAAA,OACR,KAAEC,EAAI,KAAEC,IAASC,EAAAA,GAAAA,OACjB,kBAAEC,EAAiB,eAAEC,GAAmBZ,EAIxCa,EAAc,CAClB,CACEC,MAAOR,EAAE,gBACTS,KAAM,OACNC,QAASA,IACPR,EAAK,CACHS,QAASC,GAAAA,GACTJ,MAAO,6BACPK,aAAc,CAAEC,cAXFC,gBAWiBC,WAVpBD,+CAajB,CACEP,MAAOR,EAAE,sBACTS,KAAM,WACNC,QAASA,IACPR,EAAK,CACHM,MAAOR,EAAE,yCACTW,QAASM,GAAAA,GACTJ,aAAc,CACZP,eAAgBZ,EAAewB,0BAA0BZ,GACzDD,oBACAb,gBAAiBA,KACjBF,sBACAC,mBACA4B,SAAUA,KACRC,EAAAA,GAAQC,aACRD,EAAAA,GAAQE,UACRnB,GAAM,EAERoB,SAAUpR,IAAqC,IAApC,kBAAEkQ,EAAiB,SAAEmB,GAAUrR,EACpCqR,EAAS1hB,QAAU0f,KAAkB1f,OACvC2f,GAAAA,QAAKgC,eAAeD,EAAS1hB,OAE/B4f,EAAegC,WAAWrB,GAC1BF,GAAM,EAERwB,QAASA,IAAMjC,EAAekC,yBAC9BC,cAAeT,EAAAA,QAgBzB,OAVIzB,EAAUmC,MACZvB,EAAYtiB,KAAK,CACfuiB,MAAOR,EAAE,iBACTS,KAAM,YACNC,QAAS5hB,UACP+gB,EAAU,wBAAuBkC,mBAAmB5I,OAAOC,SAAS4I,QAAQ,IAMhFlD,GAAAA,cAACmD,GAAAA,GAAM,CACL1B,YAAaA,EACb2B,kBAAmBvC,EAAUwC,cAC7BC,oBAvFwBA,KAC1B,MAAM,SAAEC,GAAajJ,EACfkJ,EAAgBD,EAAStY,QAAQ,IAAK,GAEtCwY,EADQ,IAAIC,gBAAgBrJ,OAAOC,SAASra,QAC1BmJ,IAAI,aAEtBua,EAAiBJ,EAASrY,UAAUsY,EAAgB,GACpDI,EAAqB9H,EAAiBO,eAAesH,GAErDE,EAAc,IAAIH,iBACD,IAAnBF,GAAwBI,GAC1BC,EAAYC,OAAO,cAAeP,EAASrY,UAAUsY,EAAgB,IAGnEC,GACFI,EAAYC,OAAO,YAAaL,GAGlC1C,EAAS,CACPwC,SAAU,IACVtjB,OAAQ8jB,mBAAmBF,EAAYG,aACvC,EAmEAC,cAAepD,EAAUqD,eAEzBlE,GAAAA,cAACmE,GAAAA,GAAa,CAACC,QAAQ,mBACrBpE,GAAAA,cAAA,OAAKK,UAAU,gCACbL,GAAAA,cAACrB,GAAO,CAACC,gBAAiBA,MAKpC,ECxDA,GA/C8Brb,IAMxB,IANyB,gBAC7Bqb,EAAe,KACfyF,EAAI,UACJhE,EACAiE,eAAgBC,EAAkB,KAClCC,GACDjhB,EACC,MAAMkhB,EAA6B7F,GAAiBE,UAAU2F,cAIvDC,EAAeC,IAAoBvF,EAAAA,GAAAA,WAAS,IAC5CkF,EAAgBM,IAAqBxF,EAAAA,GAAAA,UAASmF,GAsBrD,OApBAlF,EAAAA,GAAAA,YAAU,KACR,GAAIoF,EAAc,CAChB,MAAMI,EAA4BJ,EAAa9E,UAC7C8E,EAAarM,OAAO0M,gBACnBC,IACC,IAAKL,GAAiBK,EAAmBC,YAAa,CACpD,MAAMC,EAAWT,EAAKU,WAAUC,GAAOA,EAAIjF,KAAO6E,EAAmBK,WACnD,IAAdH,GACFL,EAAkBK,EAEtB,KAIJ,MAAO,KACLJ,EAA0BnF,aAAa,CAE3C,IACC,CAAC8E,EAAME,EAAeD,IAGvBzE,GAAAA,cAACqF,GAAAA,GAAS,CACRhB,KAAMA,EACNhE,UAAWA,EACXiE,eAAgBA,EAChBE,KAAMA,EACNc,OAAQA,KACNX,GAAiB,EAAK,GAEb,EC9CjB,SAASY,GAAYhiB,GAaO,IAbN,iBAEpBuY,EAAgB,gBAChB8C,EAAe,eACfgC,EAAc,gBACd4E,EAAe,UAEfC,EAAS,iBACTC,EAAgB,WAChBC,EAAa,GAAE,YACfC,EAAc,GAAE,uBAChBC,GAAyB,EAAK,wBAC9BC,GAA0B,GAC3BviB,EACC,MAAOsd,IAAaC,EAAAA,GAAAA,MAEd,uBAAEiF,GAA2BnH,EAAgBE,UAC5CkH,EAAsBC,IAA2B7G,EAAAA,GAAAA,UAASyB,EAAUmF,uBAO3E3G,EAAAA,GAAAA,YAAU,KACR6G,SAASC,KAAKC,UAAU5M,IAAI,YAC5B0M,SAASC,KAAKC,UAAU5M,IAAI,mBACrB,KACL0M,SAASC,KAAKC,UAAUC,OAAO,YAC/BH,SAASC,KAAKC,UAAUC,OAAO,kBAAkB,IAElD,IAEH,MAAMC,EAAepG,IACnB,MAAMqG,EAAQzK,EAAiB0K,eAAetG,GAE9C,IAAKqG,EACH,MAAM,IAAIvgB,MACP,GAAEka,+UAIP,IAAI2B,EACJ,IAAI0E,IAASA,EAAME,UAGjB,MAAM,IAAIzgB,MACP,qCAAoCka,6EAIzC,OAPE2B,EAAU0E,EAAME,UAOX,CAAEF,QAAO1E,UAAS,EAGrB6E,EAAexG,IACnB,MAAM,QAAE2B,EAAO,MAAE0E,GAAUD,EAAapG,GAExC,MAAO,CACLA,GAAIqG,EAAMrG,GACVyG,SAAUJ,EAAMI,SAChBC,UAAWL,EAAMK,UACjBC,MAAON,EAAMM,MACb3d,KAAMqd,EAAMrd,KACZ2Y,UACD,GAGHxC,EAAAA,GAAAA,YAAU,KACR,MAAM,YAAEK,GAAgBqG,EAAuBpG,UAC7CmH,EAAAA,GAAuB1O,OAAO2O,kBAK9B,KACEd,GAAwB,EAAM,IAIlC,MAAO,KACLvG,GAAa,CACd,GACA,CAACqG,IAEJ,MASMiB,EAAsBrB,EAAW1e,IAAIyf,GACrCO,EAAuBrB,EAAY3e,IAAIyf,GACvCQ,EAAqBzB,EAAUxe,KAXJkgB,IAC/B,MAAM,MAAEZ,GAAUD,EAAaa,EAAkBC,WAEjD,MAAO,CACLX,UAAWF,EAAME,UACjBY,qBAAsBF,EAAkBE,qBACzC,IAOH,OACErH,GAAAA,cAAA,WACEA,GAAAA,cAACsH,GAAY,CACX1G,eAAgBA,EAChB9E,iBAAkBA,EAClB8C,gBAAiBA,IAEnBoB,GAAAA,cAAA,OACEK,UAAU,mFACVkH,MAAO,CAAEC,OAAQ,sBAEjBxH,GAAAA,cAACA,GAAAA,SAAc,KACZgG,GAAwBhG,GAAAA,cAACyH,GAAAA,GAAwB,CAACpH,UAAU,2BAE5D2G,EAAoBjoB,OACnBihB,GAAAA,cAACmE,GAAAA,GAAa,CAACC,QAAQ,cACrBpE,GAAAA,cAAC0H,GAAqB,CACpBrD,KAAK,OACLC,eAAgBuB,EAAyB,KAAO,EAChDrB,KAAMwC,EACNpI,gBAAiBA,KAGnB,KAEJoB,GAAAA,cAAA,OAAKK,UAAU,+BACbL,GAAAA,cAAA,OAAKK,UAAU,oFACbL,GAAAA,cAACmE,GAAAA,GAAa,CAACC,QAAQ,QACrBpE,GAAAA,cAAC0F,EAAgB,CACf9G,gBAAiBA,EACjBsI,mBAAoBA,EACpB1B,gBAAiBA,OAKxByB,EAAqBloB,OACpBihB,GAAAA,cAACmE,GAAAA,GAAa,CAACC,QAAQ,eACrBpE,GAAAA,cAAC0H,GAAqB,CACpBrD,KAAK,QACLC,eAAgBwB,EAA0B,KAAO,EACjDtB,KAAMyC,EACNrI,gBAAiBA,KAGnB,OAKd,CAEA2G,GAAaoC,UAAY,CAEvB7L,iBAAkB8L,KAAAA,MAAgB,CAChCpB,eAAgBoB,KAAAA,KAAeC,aAC9BA,WACHrC,gBAAiBoC,KAAAA,WAAqBE,EAAAA,IACtClJ,gBAAiBgJ,KAAAA,WAAqBG,EAAAA,IAEtCpC,WAAYiC,KAAAA,MACZhC,YAAagC,KAAAA,MACb/B,uBAAwB+B,KAAAA,KAAeC,WACvC/B,wBAAyB8B,KAAAA,KAAeC,WAExCG,SAAUJ,KAAAA,UAAoB,CAACA,KAAAA,KAAgBA,KAAAA,OAAiBC,WAChEpC,UAAWmC,KAAAA,OAGb,YCzKA,MAAM,mBAAEK,GAAkB,WAAEnX,IAAepR,EAAAA,MAM3C,SAASwoB,GAAiB3kB,GAMvB,IANwB,gBACzBqb,EAAe,YACfuJ,EAAW,0BACXC,EAAyB,kCACzBC,EAAiC,WACjCjM,GACD7Y,EACC,MAAM,uBAAEwiB,EAAsB,kBAAEuC,EAAiB,sBAAEC,GACjD3J,EAAgBE,SACZiC,GAAWC,EAAAA,GAAAA,OAKX,kBAAE5L,IAAsBoT,EAAAA,GAAAA,QACvB,iBAAEC,EAAgB,UAAEhD,GAAazG,IAAuBC,EAAAA,GAAAA,OACxDyJ,EAAeC,IAAoBvJ,EAAAA,GAAAA,UAAS,YAC5CwJ,EAA2BC,IAAgCzJ,EAAAA,GAAAA,UAAS,IACtEhK,KAEE0T,EAAkBC,IAAuB3J,EAAAA,GAAAA,UAAS,KAClD4J,EAAaC,IAAkB7J,EAAAA,GAAAA,UAAS,KACxC8J,EAAsBC,IAA2B/J,EAAAA,GAAAA,UAAS,CAAC,IAwBlEC,EAAAA,GAAAA,YAAU,KA6CRjK,EAAkBnW,SAAQmqB,GA3C1BppB,eAAsCiD,GAEpC,MAAMomB,QAAwBjN,EAAW/M,MAAMrQ,QAAQiB,OAAO,CAC5Db,iBAAkB6D,IAGpB,IAAKomB,GAAiBtqB,OAEpB,MADAgiB,EAAS,iBAAkB,SACrB,IAAI/a,MAAM,qBAGlB,IAAIsjB,EAAwBD,EAI5B,IACEC,QAA8BlB,EAA0BiB,EAC1D,CAAE,MAAOE,GACP9b,QAAQC,KAAK6b,EACf,CAGA,MAAMC,EADsCF,EAmLjCriB,KAAIoD,IAEV,CACLjJ,gBAAiBiJ,EAAM9K,UACvB0C,UAAWoI,EAAMhL,KACjBiC,iBAAkB+I,EAAMvK,YACxB8X,aAAcvN,EAAMzK,UACpB4B,kBAAmB6I,EAAMtK,WACzB+X,UAAWzN,EAAM7K,IACjB0B,YAAamJ,EAAM5K,YACnBwD,iBAAkBoH,EAAMjL,iBACxB2Y,UAAW1N,EAAM/K,SA7L2B2H,KAAI/H,IACvC,CACLE,iBAAkBF,EAAU+D,iBAC5B5D,KAAMyR,GAAW5R,EAAU+C,WAC3BnC,YAAaZ,EAAUoC,iBACvBvB,WAAYb,EAAUsC,kBACtB8X,aAAcpa,EAAU0Y,iBAI5BmR,GAAoBU,IAClB,MAAMxV,EAAM,IAAIwV,GAChB,IAAK,MAAMpf,KAASmf,EACbC,EAAU5e,MAAK6e,GAAMA,EAAGtqB,mBAAqBiL,EAAMjL,oBACtD6U,EAAI9U,KAAKkL,GAGb,OAAO4J,CAAG,GAEd,CAEiC0V,CAAuBP,IAAK,GAC5D,CAAChU,EAAmBgH,EAAYgM,EAA2BrH,KAG9D1B,EAAAA,GAAAA,YAAU,KACmBiJ,EAAkBsB,kBAC1B3qB,SAAQe,UACzB,MAAM6pB,EAAmB,CAAC,EACpBjV,EAAa0T,EAAkBwB,mBAAmBC,EAAKC,uBACvDlV,EAAWsH,EAAWzH,yBAAyBC,GAC/ClQ,EAAUoQ,EAASmV,KAAKC,MAAMpV,EAAS/V,OAAS,IAGjD2F,IAAWkQ,GAAYuV,cAI5BN,EAAiBE,EAAKC,6BAA+B7B,EAAYzjB,GAEjEykB,GAAwBiB,IACf,IAAKA,KAAcP,MAC1B,GACF,GACD,CAACzU,EAAmBgH,EAAYkM,EAAmBH,KAGtD9I,EAAAA,GAAAA,YAAU,KAER,MACMgL,EAAoBC,GADChC,EAAkBsB,kBACiBV,GAC9DjB,GAAmBoC,GAEnBpB,EAAeoB,EAAkB,GAChC,CAACjV,EAAmB8T,EAAsBZ,KAG7CjJ,EAAAA,GAAAA,YAAU,KAER,MAAMkL,EAA+BjC,EAAkB3I,UACrD2I,EAAkBlQ,OAAOoS,oBACzBjhB,IACE,MAAM,iBAAEkhB,EAAgB,QAAE/pB,GAAY6I,EACtCkhB,EAAiBxrB,SAAQe,UACvB,MAAM6pB,EAAmB,CAAC,EACpBjV,EAAa0T,EAAkBwB,mBAAmBC,EAAKC,uBAC7D,GAAIpV,GAAYuV,YACd,OAGF,MAAMrV,EAAWsH,EAAWzH,yBAAyBC,GAC/ClQ,EAAUoQ,EAASmV,KAAKC,MAAMpV,EAAS/V,OAAS,IAGjD2F,IAILmlB,EAAiBE,EAAKC,6BAA+B7B,EACnDzjB,EACAqlB,EAAKW,iBAGPvB,GAAwBiB,IACf,IAAKA,KAAcP,MAC1B,GACF,IAIN,MAAO,KACLU,EAA6B7K,aAAa,CAC3C,GACA,CAACyI,EAAa/L,EAAYkM,KAE7BjJ,EAAAA,GAAAA,YAAU,KAGR,MAAMsL,EAAiCrC,EAAkB3I,UACvD2I,EAAkBlQ,OAAOwS,sBACzBC,IACE,MAAMR,EAAoBC,GAAgBO,EAAoB3B,GAC9DD,EAAeoB,EAAkB,IAI/BS,EAA4CxC,EAAkB3I,UAClE2I,EAAkBlQ,OAAO2S,yCACzB,KACE,MAAMV,EAAoBC,GACxBhC,EAAkB0C,uBAClB9B,GAGFD,EAAeoB,EAAkB,IAIrC,MAAO,KACLM,EAA+BjL,cAC/BoL,EAA0CpL,aAAa,CACxD,GACA,CAACtK,EAAmB8T,EAAsBZ,IAE7C,MAAM9D,EAmIR,SAAiCyG,EAA0BnC,EAAkBE,GAC3E,MAAMkC,EAAiB,GACjBC,EAAgB,GAChBC,EAAa,GAEnBtC,EAAiB7pB,SAAQoL,IACvB,MAAMghB,EAAsBrC,EAAY5e,QACtCkhB,GAAMA,EAAGroB,mBAAqBoH,EAAMjL,mBAEhCmsB,EAAWpoB,OAAOmF,OAAO,CAAC,EAAG+B,EAAO,CACxC2e,YAAaqC,IAGXJ,EAAyB9O,SAAS9R,EAAMjL,kBAC1C8rB,EAAe/rB,KAAKosB,IAGpBJ,EAAchsB,KAAKosB,GACnBH,EAAWjsB,KAAKosB,GAClB,IAGF,MAAM/G,EAAO,CACX,CACEtb,KAAM,UACN2d,MAAO,UACP7nB,QAASksB,GAEX,CACEhiB,KAAM,SACN2d,MAAO,SACP7nB,QAASmsB,GAEX,CACEjiB,KAAM,MACN2d,MAAO,MACP7nB,QAASosB,IAIb,OAAO5G,CACT,CA5KegH,CAAwBpW,EAAmB0T,EAAkBE,GAkB1E,MAAMyC,EAA+BhG,EAAUrc,IAAIqf,IAAmBiD,uBAEtE,OACE1L,GAAAA,cAAC2L,GAAAA,GAAY,CACXnH,KAAMA,EACN5F,gBAAiBA,EACjB8J,cAAeA,EACfkD,uBAnMkC5B,IACpC,IAAI6B,EAAmB,GACvB,MAAMC,EAAarD,EACnB,IACEoD,EAAmB9F,EAAuBgG,0BACxCD,EACA9B,EAEJ,CAAE,MAAOT,GACP9b,QAAQC,KAAK6b,GACbhB,EAAsBnH,KAAK,CACzBM,MAAO,yBACPsK,QAAS,gEACTxe,KAAM,OACNye,SAAU,KAEd,CAEAjN,EAAoBkN,2BAA2BL,EAAiB,EAkL9DJ,6BAA8BA,EAC9B7C,0BAA2BA,EAC3BuD,aAzBJ,SAA2BlpB,GACzB,MAAMmpB,EAAsBxD,EAA0BzM,SAASlZ,GACzDopB,EAAmCD,EAErC,IAAIxD,EAA0Bxe,QAAOkiB,GAAWA,IAAYrpB,KAC5D,IAAI2lB,EAA2B3lB,GAInC,GAFA4lB,EAA6BwD,IAExBD,EAAqB,CAExB/D,EAAkCC,EAAmBrlB,GADhC,EAEvB,CACF,EAaIspB,WAAYC,IACV7D,EAAiB6D,EAAe,GAIxC,CAEAtE,GAAkBP,UAAY,CAC5B/I,gBAAiBgJ,KAAAA,OAAiBC,WAClCzL,WAAYwL,KAAAA,MAAgB,CAC1BjT,yBAA0BiT,KAAAA,KAAeC,aACxCA,WACHM,YAAaP,KAAAA,KAAeC,WAC5BO,0BAA2BR,KAAAA,KAAeC,WAC1CQ,kCAAmCT,KAAAA,KAAeC,YAGpD,YAwBA,SAASyC,GAAgBtB,EAAaE,GACpC,MAAMuD,EAAuB,GACvBC,EAA8B,GAiCpC,OA/BA1D,EACG5e,QAAOkhB,IAAOA,EAAGqB,8BACjB1tB,SAAQqsB,IACP,MAAMsB,EAAW1D,EAAqBoC,EAAGtB,uBACnC6C,EAgCZ,SAA2BvB,GACzB,GAAIwB,GAA2B3Q,SAASmP,EAAGjY,WAAaiY,GAAInB,YAE1D,MAAO,mBAGT,MAAO,WACT,CAvC4B4C,CAAkBzB,IAGpB,cAAlBuB,EAAgCJ,EAAuBC,GAEnDvtB,KAAK,CACT6qB,sBAAuBsB,EAAGtB,sBAC1BlqB,YAAawrB,EAAGrY,mBAAqB,GACrCrC,aAAc0a,EAAGpY,aACjB1G,SAAU8e,EAAGjY,SACbxC,WAAYya,EAAG3R,WACfqT,WAAY1B,EAAGnY,WACfmG,aAAcgS,EAAG2B,eACjBC,UAAW5B,EAAG4B,UACdjqB,iBAAkBqoB,EAAGroB,iBACrBkqB,SAAU7B,EAAG6B,SACbN,gBACAD,WACAQ,SAAU,CACR5f,KAAM,aACNwc,sBAAuBsB,EAAGtB,uBAG5BqD,+BAAgC/B,EAAGgC,YACnC,IAGC,IAAIb,KAAyBC,EACtC,CAEA,MAAMI,GAA6B,CAAC,KAAM,MAAO,KAAM,WAAY,SAAU,UC3S7E,SAXA,SAAgCS,EAAa7oB,GAC3C,OAAO,IAAIuD,SAAQ,CAACC,EAASC,KAC3B,MAAMqlB,EAAStH,SAASuH,cAAc,UACtCF,EAAYG,UACTC,kBAAkB,CAAEH,SAAQ9oB,YAC5B+D,MAAK/D,IACJwD,EAAQslB,EAAOI,YAAY,IAE5BC,MAAM1lB,EAAO,GAEpB,ECJA,SAVAnI,eAAyCoc,EAAYiN,GACnD,OAAIA,GAAmBA,EAAgBtqB,QAAUsqB,EAAgB,GAAG7pB,IAC3D4c,EAAW/M,MAAMrQ,QAAQiB,OAAO,CACrCkB,UAAWkoB,EAAgB,GAAG7pB,OAGlCiO,QAAQoI,IAAI,mBAAoBwT,GACzBA,EACT,ECUA,SAlBA,SACEjN,EACAkM,EACArlB,EACAwO,GAIE6W,EAAkBsB,kBAAkBkE,MAClClZ,GAAcA,EAAW3R,mBAAqBA,KAMlDmZ,EAAWjL,SAAS3G,OAAOgH,SAAS,CAAEvO,mBAAkBwO,gBAC1D,ECDA,SAASsc,GAAwBxqB,GAAyD,IAAxD,gBAAEiiB,EAAe,iBAAE1J,EAAgB,gBAAE8C,GAAiBrb,EAGtF,MAAM6Y,EAAaN,EAAiBO,iBAAiB,GAC/C2R,EAA6B5F,GAA0B7hB,KAAK,KAAM6V,GAClE6R,GAA0BnO,EAAAA,GAAAA,aA6BlC,SAAyChE,GACvC,MAAM4R,EAAY5R,EAAiB0K,eACjC,oDAGF,IACE,MAAM,YAAE+G,GAAgBG,EAAUQ,QAAQC,0BAC1C,OAAOC,GAAuB7nB,KAAK,KAAMgnB,EAC3C,CAAE,MAAOc,GACP,MAAM,IAAIroB,MAAM,6BAClB,CACF,CAvCIsoB,CAAgCxS,GAChC,IAEIyS,EAAqClG,GAAkC9hB,KAC3E,KACA6V,GAGF,OACE4D,GAAAA,cAACkI,GAAiB,CAChBtJ,gBAAiBA,EACjBxC,WAAYA,EACZ+L,YAAa8F,EACb7F,0BAA2B4F,EAC3B3F,kCAAmCkG,GAGzC,CAwBAR,GAAyBpG,UAAY,CACnCnC,gBAAiBoC,KAAAA,OAAiBC,WAClC/L,iBAAkB8L,KAAAA,OAAiBC,WACnCjJ,gBAAiBgJ,KAAAA,OAAiBC,YAGpC,YC9DA,SAAS2G,GAAajrB,GAAyC,IAAxC,cAAEkrB,EAAa,oBAAEC,GAAqBnrB,EAC3D,MAAM,EAAE2d,IAAMC,EAAAA,GAAAA,IAAe,oBAE7B,OACEnB,GAAAA,cAACA,GAAAA,SAAc,KACbA,GAAAA,cAAC2O,GAAAA,GAAiB,CAChBC,MAAM,QACNC,KAAK,WAGL7O,GAAAA,cAAC8O,GAAAA,GAAY,CACXzO,UAAU,sBACVuB,QAAS6M,GAERvN,EAAE,eAELlB,GAAAA,cAAC8O,GAAAA,GAAY,CACXzO,UAAU,sBACVuB,QAAS8M,GAERxN,EAAE,mBAKb,CAEAsN,GAAc7G,UAAY,CACxB8G,cAAe7G,KAAAA,KACf8G,oBAAqB9G,KAAAA,MAGvB4G,GAAcO,aAAe,CAC3BN,cAAeA,IAAMO,MAAM,UAC3BN,oBAAqBA,IAAMM,MAAM,kBAGnC,Y,0BCvCO,MAAMC,GAAgC,CAC3CC,OAAQ,EACRC,cAAe,GAGF,SAASC,GAAyBC,EAAe9rB,GAAwB,IAAtB,iBAAEuY,GAAkBvY,EACpF,OAAO,IAAI0E,SAAQ,SAAUC,EAASC,GACpC,IAAImnB,EAEJ,MAoCMC,EAAkBpsB,OAAOC,KAAK0Y,EAAiB0T,eAClDplB,QAAOkhB,IACN,MAAMrQ,EAAgBa,EAAiBE,eAAesP,IAAKrQ,cAE3D,OADqBA,GAAewU,cAAgBxU,GAAe/W,QAChD,IAEpB+C,KAAIqkB,IACI,CACLtqB,MAAOsqB,EACPzE,MAAOyE,EACPoE,YAAapE,MAInBgE,EAAWD,EAAgBjZ,OAAO,CAChCuZ,YAAY,EACZC,aAAa,EACb/N,QAASgO,GAAAA,GACTC,iBAAiB,EACjBC,aAAa,EACbhO,aAAc,CACZL,MAAO,gBACP1gB,MAAO,CACL6lB,MAAO,GACPlD,eAAgB7H,EAAiBkU,kBAEnCC,eAAe,EACfC,QA/DiBC,KAEnBd,EAAgBe,QAAQ,CAAElQ,GAAIoP,IAE9BpnB,EAAQ,CACNmoB,OAAQpB,GAA8BC,OACtCluB,WAAOV,EACPqjB,oBAAgBrjB,GAChB,EAwDAgwB,QAAS,CACP,CAAEpQ,GAAI,SAAUqQ,KAAM,SAAU/iB,KAAMgjB,GAAAA,GAAAA,GAAiBC,WACvD,CAAEvQ,GAAI,OAAQqQ,KAAM,OAAQ/iB,KAAMgjB,GAAAA,GAAAA,GAAiBE,UAGrDjO,SArDsBpR,IAAuB,IAAtB,OAAEgf,EAAM,MAAErvB,GAAOqQ,EAE1C,OADAge,EAAgBe,QAAQ,CAAElQ,GAAIoP,IACtBe,EAAOnQ,IACb,IAAK,OACHhY,EAAQ,CACNmoB,OAAQpB,GAA8BE,cACtCnuB,MAAOA,EAAM6lB,MACblD,eAAgB3iB,EAAM2iB,iBAExB,MACF,IAAK,SACHzb,EAAQ,CACNmoB,OAAQpB,GAA8BC,OACtCluB,WAAOV,EACPqjB,oBAAgBrjB,IAGtB,EAqCE6lB,KAAMnR,IAAyB,IAAxB,MAAEhU,EAAK,SAAE2vB,GAAU3b,EAcxB,OACEgL,GAAAA,cAAAA,GAAAA,SAAA,KACGuP,EAAgBxwB,OAAS,GAAKsb,OAAO3W,QAAQktB,wBAC5C5Q,GAAAA,cAAA,WACEA,GAAAA,cAAA,SAAOK,UAAU,wCAAuC,eACxDL,GAAAA,cAAC6Q,GAAAA,GAAM,CACLC,mBAAmB,EACnBzQ,UAAU,qCACV3f,QAAS6uB,EACTwB,YACExB,EAAgB1kB,MAAKmmB,GAAUA,EAAOhwB,QAAUA,EAAM2iB,iBACnD+L,YAEL1uB,MAAOA,EAAM2iB,eACbsN,SAAUC,IACRP,GAASQ,IAAK,IAAMA,EAAGxN,eAAgBuN,EAAIlwB,SAAS,EAEtDowB,aAAa,KAInBpR,GAAAA,cAAA,OAAKK,UAAU,QACbL,GAAAA,cAACqR,GAAAA,GAAK,CACJC,WAAS,EACTzK,MAAM,wBACN0K,eAAe,uCACflR,UAAU,+BACV7S,KAAK,OACLxM,MAAOA,EAAM6lB,MACboK,SA1CgBO,IACtBA,EAAMC,UACNd,GAAS3vB,IAAS,IAAMA,EAAO6lB,MAAO2K,EAAME,OAAO1wB,SAAS,EAyCtD2wB,WAvCkBH,IACN,UAAdA,EAAMnuB,MACRgsB,EAAgBe,QAAQ,CAAElQ,GAAIoP,IAC9BpnB,EAAQ,CACNmoB,OAAQpB,GAA8BE,cACtCnuB,MAAOA,EAAM6lB,QAEjB,EAiCM+K,UAAQ,KAGX,IAKb,GACF,CC3FA,SAASC,KACP,OAAO7R,GAAAA,cAAA,OAAKK,UAAU,uBAAsB,aAC9C,CAEA,SA3CArgB,eAAgCuD,GAA6D,IAA5D,gBAAEqb,EAAe,UAAEkT,EAAS,WAAEC,EAAa,eAAexuB,EACzF,MAAM,kBAAE+kB,EAAiB,sBAAEC,EAAqB,gBAAE8G,GAAoBzQ,EAAgBE,SAChFkT,EAAkB3C,EAAgBjZ,OAAO,CAC7C2Z,aAAa,EACbH,aAAa,EACbD,YAAY,EACZ9N,QAASgQ,KAGX,IACE,MAAM5X,QAA0B6X,IAKhCne,EAAAA,mBAAmBE,aAAa,CAACoG,IAAoB,GAErD,MAEM+P,EAFa1B,EAAkB2J,0BAEIjI,sBAQzC,OANAzB,EAAsBnH,KAAK,CACzBM,MAAO,gBACPsK,QAAU,GAAE+F,uBACZvkB,KAAM,YAGD,CAACwc,EACV,CAAE,MAAOT,GACPhB,EAAsBnH,KAAK,CACzBM,MAAO,gBACPsK,QAASzC,EAAMyC,SAAY,mBAAkB+F,IAC7CvkB,KAAM,SAEV,CAAE,QACA6hB,EAAgBe,QAAQ,CAAElQ,GAAI8R,GAChC,CACF,EC5CME,GAAuB,KCed,SAASC,GACtBlf,EACAqV,GAEA,MAEM8J,EAFoB9J,EAAkB0C,uBACJ5gB,QAAOkhB,GAAsB,OAAhBA,EAAGjY,WACvBxI,MAAKygB,GAAMA,EAAGrY,oBAAsBA,IACrE,GAAImf,EAAY,CACd3kB,QAAQoI,IAAI,yBAA0Buc,GACtC,MAAM,SAAE5uB,GAAa4uB,GACf,kBAAEpuB,EAAiB,kBAAEiP,EAAiB,WAAE0G,EAAU,WAAExG,EAAU,aAAED,EAAY,SAAEG,GAClF7P,EACF,MAAO,CACLQ,oBACAiP,oBACA0G,aACAxG,aACAD,eACAG,WACAgf,eAAgBD,EAAWxyB,UAAUb,OAAS,EAElD,CAEA,MAAMmU,EDpCO,SAA+BoV,GAC5C,MAEMgK,EAFoBhK,EAAkB0C,uBACJ5gB,QAAOkhB,GAAsB,OAAhBA,EAAGjY,WAClBpM,KAAIqkB,GAAMA,EAAGpY,eAGnD,OAFwB+W,KAAKsI,OAAOD,EAAiBJ,IAE5B,CAC3B,CC6BuBM,CAAsBlK,GAC3C,MAAO,CAAErV,oBAAmBC,eAC9B,CC1BA,MAAM,kBAAEuf,IAAsB/yB,EAAAA,MAEf,SAASgzB,GAAqBnvB,GAIjB,IAJkB,gBAC5Cqb,EAAe,gBACf4G,EAAe,iBACf1J,GACDvY,EACC,MAAM,EAAE2d,IAAMC,EAAAA,GAAAA,IAAe,qBAEtBpC,EAAcC,IAAuBC,EAAAA,GAAAA,OACtC,iBAAEwJ,EAAgB,UAAEhD,GAAc1G,GAClC,mBAAE4T,EAAkB,gBAAEtD,EAAe,sBAAE9G,EAAqB,kBAAED,GAClE1J,EACAE,UACK8T,EAAqBC,IAA0BzT,EAAAA,GAAAA,UAAS,KAE/DC,EAAAA,GAAAA,YAAU,KACR,MAAMyT,EAAkCC,KAASF,EAAwB,KAEzEA,EAAuBG,GAAuBL,IAG9C,MAAMM,EAAQN,EAAmBva,OAAO8a,kBAClCC,EAAWR,EAAmBva,OAAOgb,sBACrCC,EAAUV,EAAmBva,OAAOkb,oBACpCC,EAAUZ,EAAmBva,OAAOob,oBACpCC,EAAUd,EAAmBva,OAAOsb,qBACpCC,EAAgB,GAUtB,MARA,CAACV,EAAOE,EAAUE,EAASE,EAASE,GAASx0B,SAAQiyB,IACnDyC,EAAcx0B,KACZwzB,EAAmBhT,UAAUuR,GAAK,KAChC4B,EAAgCE,GAAuBL,GAAoB,IAC1EjT,YACJ,IAGI,KACLiU,EAAc10B,SAAQ20B,IACpBA,GAAO,IAETd,EAAgCe,QAAQ,CACzC,GACA,IAoEH,MAuEMC,EAAgCC,IAAuB,IAAtB,IAAE3rB,EAAG,SAAE4rB,GAAUD,EACtD,IAAKC,EAAU,CACb,MAAMC,EAAe,IAAIrB,GACnBsB,EAAcD,EAAappB,MAAKspB,GAAKA,EAAE/rB,MAAQA,IAErD6rB,EAAah1B,SAAQk1B,GAAMA,EAAEH,SAAWG,EAAE/rB,MAAQA,IAClD8rB,EAAYF,UAAW,EACvBnB,EAAuBoB,EACzB,GAGF,OACEjU,GAAAA,cAAAA,GAAAA,SAAA,KACEA,GAAAA,cAAA,OACEK,UAAU,mDACV,UAAS,sBAETL,GAAAA,cAACoU,GAAAA,GAAgB,CACf1S,MAAOR,EAAE,gBACTtC,gBAAiBA,EACjBrV,KAAMqpB,EACNhR,QA5FYvQ,IAAuB,IAAtB,IAAEjJ,EAAG,SAAE4rB,GAAU3iB,EACpCshB,EAAmB0B,kBAAkBtV,EAAa0J,iBAAkBrgB,GAEpE0rB,EAA8B,CAAE1rB,MAAK4rB,YAAW,EA0F1CM,OAvF6Btf,IAAuB,IAAtB,IAAE5M,EAAG,SAAE4rB,GAAUhf,EACrD,MAAMkf,EAAcvB,EAAmB4B,eAAensB,GAIhDosB,EAAkBrf,IAAuB,IAAtB,OAAEkb,EAAM,MAAErvB,GAAOmU,EACxC,GACO,SADCkb,EAAOnQ,GAEXyS,EAAmB8B,OACjBrsB,EACA,IACK8rB,KACAlzB,IAEL,GAINquB,EAAgBe,QAAQ,CAAElQ,GAAI,oBAAqB,EAGrDmP,EAAgBjZ,OAAO,CACrB8J,GAAI,mBACJyP,YAAY,EACZC,aAAa,EACbG,aAAa,EACblO,QAASgO,GAAAA,GACT9N,aAAc,CACZL,MAAO,aACPuO,eAAe,EACfjvB,MAAO,CAAE6lB,MAAOqN,EAAYrN,OAAS,IACrCV,KAAMuO,IAAyB,IAAxB,MAAE1zB,EAAK,SAAE2vB,GAAU+D,EAWxB,OACE1U,GAAAA,cAACqR,GAAAA,GAAK,CACJxK,MAAM,wBACN0K,eAAe,uCACfD,WAAS,EACTpR,GAAG,aACHG,UAAU,+BACV7S,KAAK,OACLxM,MAAOA,EAAM6lB,MACboK,SAnBoBO,IACtBA,EAAMC,UACNd,GAAS3vB,IAAS,IAAMA,EAAO6lB,MAAO2K,EAAME,OAAO1wB,SAAS,EAkB1D2wB,WAfsBH,IACN,UAAdA,EAAMnuB,KACRmxB,EAAgB,CAAExzB,QAAOqvB,OAAQ,CAAEnQ,GAAI,SACzC,GAaE,EAGNoQ,QAAS,CACP,CAAEpQ,GAAI,SAAUqQ,KAAM,SAAU/iB,KAAMgjB,GAAAA,GAAAA,GAAiBC,WACvD,CAAEvQ,GAAI,OAAQqQ,KAAM,OAAQ/iB,KAAMgjB,GAAAA,GAAAA,GAAiBE,UAErDjO,SAAU+R,IAEZ,KA4BAxU,GAAAA,cAAA,OAAKK,UAAU,2BACbL,GAAAA,cAACwO,GAAa,CACZC,cApKRzuB,iBACE,MAAMi0B,EAAetB,EAAmBgC,kBAExClC,GAAkBwB,EAActB,EAClC,EAiKQiC,yBA/JR50B,iBACE2yB,EAAmBkC,mBACrB,EA8JQnG,oBA5JR1uB,iBAEE,MAAM80B,EAAiBrP,EAAUrc,IAAIqf,GAC/BwL,EAAetB,EAAmBgC,kBAClC/f,EAAa0T,EAAkBwB,mBACnCgL,EAAepJ,uBAAuB,IAElCqJ,EAAsBd,EAAa7pB,QACvC+pB,GAAKvf,EAAW3R,mBAAqBkxB,EAAEa,oBAGzC,GAAID,EAAoBh2B,QAAU,EAOhC,YANAwpB,EAAsBnH,KAAK,CACzBM,MAAO,kBACPsK,QAAS,kDACTxe,KAAM,OACNye,SAAU,MAKd,MAAMgJ,QAAqBC,GAAyB7F,EAAiB,CACnEvT,qBAGF,GAAImZ,EAAa5E,SAAWpB,GAA8BE,cAAe,CACvE,MACM/S,EADcN,EAAiBO,eAAe4Y,EAAatR,gBAClC,GAUzBjjB,EAAUyxB,QANS7xB,IAAvB20B,EAAaj0B,OAA8C,KAAvBi0B,EAAaj0B,MAC7C,0BACAi0B,EAAaj0B,MAIgDsnB,GAenE,OAAO6M,GAAkB,CAAEvW,kBAAiBkT,UAb1B9xB,SACTwlB,EAAgB4P,WACrB,oBACA,CACEC,gBAAiBN,EACjB3Y,aACAkZ,uBAAwB,CAAC,iBACzB50B,WAEF,kCAKN,CACF,KA2GF,CAMA,SAASsyB,GAAuBL,GAO9B,OANqBA,EAAmBgC,kBAEA1tB,KAAI,CAACktB,EAAG5f,IAalD,SAAkC2f,EAAa3f,EAAOghB,GACpD,MACEC,YAAaC,EAAe,IAC5BrtB,EACAye,MAAO6O,EAAS,KAChBloB,EAAI,SACJmoB,EAAQ,aACRC,EAAY,QACZC,GACE3B,EAEE4B,EAAYF,IAAe,GAC3B/O,EAAQ6O,GAAaG,GAAStF,MAAQuF,GAAWvF,MAAQ,UAC/D,IAAIiF,EAAcC,GAAmB,GACrC,GAAIG,EAAc,CAChB,MAAMG,EAAW,GACjBH,EAAa32B,SAAQ+2B,IACfA,GAAMzF,OAAS1J,GACjBkP,EAAS52B,KAAK62B,EAAKzF,KACrB,IAEFiF,EAAc,IAAIO,KAAaP,EACjC,CACIK,GAAWA,GAAStF,OAAS1J,IAC/B2O,EAAc,CAACK,EAAQtF,QAASiF,IAGlC,MAAO,CACLptB,MACAye,QACA6O,YACAO,gBAAiBzoB,EACjBgoB,cACAC,kBACAzB,SAAU2B,EACVE,UACAD,eAEJ,CAlDIM,CAAyB/B,EAAG5f,EAAOoe,EAAmBwD,cAI1D,CAZAzD,GAAsB/K,UAAY,CAChC/I,gBAAiBgJ,KAAAA,WAAqBG,EAAAA,IAAiBF,YC/LzD,SAlCA,SAAuBtkB,GAAyD,IAAxD,gBAAEiiB,EAAe,iBAAE1J,EAAgB,gBAAE8C,GAAiBrb,EAW5E,MAAO,CACL,CACE2F,KAAM,aACNyd,SAAU,cACVC,UAAW,UACXC,MAAO,UACPJ,UAAWsH,GAAyBxnB,KAAK,KAAM,CAC7Cif,kBACA1J,mBACA8C,qBAGJ,CACE1V,KAAM,UACNyd,SAAU,aACVC,UAAW,UACXC,MAAO,eACPuP,eAAgB,eAChB3P,UA5B4B4P,IAE5BrW,GAAAA,cAAC0S,GAAqB,CACpBlN,gBAAiBA,EACjB5G,gBAAiBA,EACjB9C,iBAAkBA,KA0B1B,E,0DCtCMoE,G,+CAAKoW,G,gDCWX,SAASC,GACPC,EACAC,EACAC,EACAC,GAIA,MAAMC,EAAoBC,GAAAA,GAAAA,YACxBA,GAAAA,GAAAA,SACAL,EACAE,EACAC,GAEF,OAAOE,GAAAA,GAAAA,SAAcJ,EAAgBG,GAAqBD,CAC5D,CAOe,SAASG,GAA0Bl3B,GAChD,IAAKA,GAAWb,OACd,OAAO,EAET,MAAMg4B,GAA+BC,EAAAA,GAAAA,GAASp3B,EAAU,GAAGq3B,yBAC3D,IAAKF,EACH,OAAO,EAET,MAAML,ECpCO,SAAiCQ,GAC9C,MAAMC,EAAeN,GAAAA,GAAAA,WACnBK,EAAiB,GACjBA,EAAiB,GACjBA,EAAiB,IAEbE,EAAeP,GAAAA,GAAAA,WACnBK,EAAiB,GACjBA,EAAiB,GACjBA,EAAiB,IAEnB,OAAOL,GAAAA,GAAAA,MAAWA,GAAAA,GAAAA,SAAeM,EAAcC,EACjD,CDwByBC,CAAwBN,GACzCO,GAA4BN,EAAAA,GAAAA,GAASp3B,EAAU,GAAG23B,sBAClDC,GAAUR,EAAAA,GAAAA,GAASp3B,EAAUA,EAAUb,OAAS,GAAGw4B,sBAEnDZ,GACJc,EAAAA,GAAAA,IAA0BH,EAA2BE,IAAY53B,EAAUb,OAAS,GAEtF,IAAI24B,EAA+BJ,EACnC,IAAK,IAAInf,EAAI,EAAGA,EAAIvY,EAAUb,OAAQoZ,IAAK,CACzC,MAAM3U,EAAW5D,EAAUuY,GACrBwf,GAAuBX,EAAAA,GAAAA,GAASxzB,EAAS+zB,sBAE/C,GACEhB,GACEmB,EACAC,EACAjB,EACAC,GAGF,OAAO,EAETe,EAA+BC,CACjC,CACA,OAAO,CACT,CExDe,SAASC,GACtBh4B,EACAutB,GAEIvtB,EAAUb,OAAS,ICTV,SAAoCa,GACjD,IAAKA,GAAWb,OACd,OAAO,EAET,MAAM84B,EAAaj4B,EAAU,GACvBk4B,GAAiBd,EAAAA,GAAAA,GAASa,EAAWE,MACrCC,GAAoBhB,EAAAA,GAAAA,GAASa,EAAWI,SAE9C,IAAK,IAAI9f,EAAI,EAAGA,EAAIvY,EAAUb,OAAQoZ,IAAK,CACzC,MAAM3U,EAAW5D,EAAUuY,IACrB,KAAE4f,EAAI,QAAEE,GAAYz0B,EAE1B,GAAIu0B,IAASD,GAAkBG,IAAYD,EACzC,OAAO,CAEX,CACA,OAAO,CACT,CDPSE,CAA2Bt4B,IAC9ButB,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMC,yBEXnC,SAAoC14B,GACjD,IAAKA,GAAWb,OACd,OAAO,EAET,MAAM84B,EAAaj4B,EAAU,GACvB24B,GAA4BvB,EAAAA,GAAAA,GAASa,EAAWW,iBAEtD,IAAK,IAAIrgB,EAAI,EAAGA,EAAIvY,EAAUb,OAAQoZ,IAAK,CACzC,MAAM3U,EAAW5D,EAAUuY,IACrB,gBAAEqgB,GAAoBh1B,EAE5B,GAAIg1B,IAAoBD,EACtB,OAAO,CAEX,CACA,OAAO,CACT,CFFSE,CAA2B74B,IAC9ButB,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMK,yBGdnC,SAAsC94B,GACnD,IAAKA,GAAWb,OACd,OAAO,EAET,MAAM84B,EAAaj4B,EAAU,GACvBm3B,GAA+BC,EAAAA,GAAAA,GAASa,EAAWZ,yBAEzD,IAAK,IAAI9e,EAAI,EAAGA,EAAIvY,EAAUb,OAAQoZ,IAAK,CACzC,MAAM3U,EAAW5D,EAAUuY,GACrBwgB,GAA0B3B,EAAAA,GAAAA,GAASxzB,EAASyzB,yBAElD,KAAK2B,EAAAA,GAAAA,IAAmBD,EAAyB5B,GAC/C,OAAO,CAEX,CACA,OAAO,CACT,CHCS8B,CAA6Bj5B,IAChCutB,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMS,2BAGzChC,GAA0Bl3B,IAC7ButB,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMU,mCIhBnC,SACbn5B,EACAutB,GAEA,IAAKvtB,GAAWb,OACd,OAEF,MAAMu4B,GAA4BN,EAAAA,GAAAA,GAASp3B,EAAU,GAAG23B,sBACxD,IAAKD,EACH,OAEF,MAAME,GAAUR,EAAAA,GAAAA,GAASp3B,EAAUA,EAAUb,OAAS,GAAGw4B,sBAEnDZ,GACJc,EAAAA,GAAAA,IAA0BH,EAA2BE,IAAY53B,EAAUb,OAAS,GAEtF,IAAI24B,EAA+BJ,EAEnC,MAAM0B,EAAc,GACpB,IAAK,IAAI7gB,EAAI,EAAGA,EAAIvY,EAAUb,OAAQoZ,IAAK,CACzC,MAAM3U,EAAW5D,EAAUuY,GACrBwf,GAAuBX,EAAAA,GAAAA,GAASxzB,EAAS+zB,sBAEzC0B,GAAuBxB,EAAAA,GAAAA,IAC3BE,EACAD,GAGIwB,GAAeC,EAAAA,GAAAA,IAAiBF,EAAsBtC,GAE5D,GAAIuC,EAAc,CAChB,MAAME,EAAQF,EAAaE,MAY3B,GATKJ,EAAY7c,SAASid,KACxBJ,EAAY75B,KAAKi6B,GACbA,IAAUC,GAAAA,GAAqBC,eACjCnM,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMiB,gBACnCF,IAAUC,GAAAA,GAAqBE,mBACxCpM,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMkB,oBAI5CP,EAAYj6B,OAAS,EACvB,KAEJ,CACA24B,EAA+BC,CACjC,CACF,CJ/BI6B,CAAwB55B,EAAWutB,GAEvC,CKxBe,SAASsM,GACtB75B,EACA85B,GAEA,MAAMvM,EAAW,IAAIwM,EAAAA,GACrB,IAAK/5B,EAAUb,OAEb,YADAouB,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMuB,oBAI9C,MAAMngB,EAAgB7Z,EAAU,IAC1B,SAAEyT,EAAQ,UAAEwmB,EAAS,eAAE9kB,GAAmB0E,EAEhD,GAAIogB,GAAW1d,SAAS,aACtB,OAAOgR,EAGT,IAAK2M,GAAAA,GAAwB3d,SAAS9I,GACpC,OAAO8Z,EAGT,MAAMrT,EAAe/E,EAAiB,EAEjC+E,GAAiBla,EAAUm6B,OAAMv2B,GAAYA,EAAS+zB,wBACzDpK,EAASgL,WAAWC,EAAAA,GAAkBC,MAAM2B,yBAG9C,MAAMC,GAAkBC,EAAAA,GAAAA,GAAwBt6B,GAShD,OAPAka,EC3Ba,SAAyBqgB,EAAoBhN,IACrDiN,EAAAA,GAAAA,IAAqBD,IACxBhN,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMgC,mCAGzCC,EAAAA,GAAAA,IAAeH,IAClBhN,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMkC,4BAGzCC,EAAAA,GAAAA,IAAYL,IACfhN,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMoC,mCAEhD,CDgBMC,CAAgBT,EAAgB,GAAI9M,GACpCyK,GAAkBqC,EAAiB9M,GAElCuM,GACHvM,EAASgL,WAAWC,EAAAA,GAAkBC,MAAMsC,qBAEvCxN,CACT,CE1Ce,SAASyN,GAAoCh7B,GAC1D,MAAMi7B,EAAW,IAAIC,GAAAA,EAASl7B,GACxButB,EAAW,IAAIwM,EAAAA,GACrBxM,EAASgL,WAAWC,EAAAA,GAAkBC,MAAM0C,wBAC5C,MAAMv3B,EAAW5D,EAAU,GAmB3B,OAjBAi7B,EAASG,cAAc,CACrBhR,sBAAuB6Q,EAASzyB,IAChCuR,WAAYnW,EAASmW,WACrBxG,WAAY3P,EAAS2P,WACrBnP,kBAAmBR,EAASQ,kBAC5Bf,iBAAkBO,EAASP,iBAC3BiQ,aAAc1P,EAAS0P,cAAgB,EACvC+nB,UAAWz3B,EAAS03B,UACpB3oB,YAAa/O,EAAS+O,YACtBU,kBAAmBzP,EAASyP,mBAAqB,GACjDI,SAAU7P,EAAS6P,SACnB4Z,eAAgBrtB,EAAUb,OAC1BorB,aAAa,EACbgR,kBAAmB,cACnBzB,mBAAmB,EACnBvM,aAEK,CAAC0N,EACV,CCrBA,MAAMO,GAAsB,QAEtBC,GAAe73B,GACZA,EAASuR,eAAiB,EAG7BumB,GAAiB17B,IACrB,MAAM4D,EAAW5D,EAAU,GACrBi7B,EAAW,IAAIC,GAAAA,EAASl7B,IAEtBoB,MAAO04B,EAAiB,4BAAE/C,IAChC4E,EAAAA,GAAAA,IAA4B37B,GAExButB,EAAWsM,GAAsB75B,EAAW85B,GAElDmB,EAASG,cAAc,CACrBhR,sBAAuB6Q,EAASzyB,IAChCuR,WAAYnW,EAASmW,WACrBxG,WAAY3P,EAAS2P,WACrBnP,kBAAmBR,EAASQ,kBAC5Bf,iBAAkBO,EAASP,iBAC3BiQ,aAAc1P,EAAS0P,cAAgB,EACvC+nB,UAAWz3B,EAAS03B,UACpB3oB,YAAa/O,EAAS+O,YACtBU,kBAAmBzP,EAASyP,mBAAqB,GACjDI,SAAU7P,EAAS6P,SACnBgoB,aAAcA,GAAa73B,GAC3B0pB,UAAWwM,EAAoB,gBAAap5B,EAC5C2sB,eAAgBrtB,EAAUb,OAC1Bo8B,kBAAoB,GAAEjb,4BAA4Bkb,KAClD1B,oBACAvM,WACAwJ,4BAA6BA,GAA+B,OA4B9D,OAtBEkE,EAASW,QAAO,CAACC,EAAGC,KAEVC,SAASF,EAAEpJ,iBAAmB,IAAMsJ,SAASD,EAAErJ,iBAAmB,KAoBvEwI,CAAQ,EAGXe,GAAwBpvB,GACR,OAAbA,GAAkC,OAAbA,GAAkC,OAAbA,EAsBnD,SAASqvB,GAAyBj8B,GAEhC,IAAKA,IAAcA,EAAUb,OAC3B,MAAM,IAAIiH,MAAM,8BAGlB,MAAMgjB,EAAc,GACd8S,EA1BR,SAAyBl8B,GACvB,MAAMm8B,EAA6B,IAAIxiB,IAMvC,OALA3Z,EAAUX,SAAQuE,IAChBu4B,EAA2BviB,IAAIhW,EAAS+O,YAAY,IAEjCzP,MAAM4W,KAAKqiB,EAGlC,CAkBuBC,CAAgBp8B,GAM/Bq8B,EAAqB,GAiC3B,GAhCAr8B,EAAUX,SAAQuE,IAEhB,KAAK04B,EAAAA,GAAAA,GAAQ14B,EAAS+O,eAAiB/O,EAASu0B,KAC9C,OAGF,IAAInjB,EAEAymB,GAAa73B,IACfoR,EAAa0mB,GAAe,CAAC93B,IAE7BoR,EAAWomB,cAAc,CACvBc,eACAK,QAAQ,EACRlP,eAAgBzpB,EAASuR,eACzBqnB,eAAgB54B,EAAS6uB,eACzBgK,oBAAqB74B,EAAS84B,sBAEhCtT,EAAY7pB,KAAKyV,IACRgnB,GAAsBp4B,EAAS6P,WACxCuB,EAAa0mB,GAAe,CAAC93B,IAC7BoR,EAAWomB,cAAc,CACvBc,eACAM,eAAgB54B,EAAS6uB,eACzBgK,oBAAqB74B,EAAS84B,sBAEhCtT,EAAY7pB,KAAKyV,IAEjBqnB,EAAmB98B,KAAKqE,EAC1B,IAGEy4B,EAAmBl9B,OAAQ,CAC7B,MAAM6V,EAAa0mB,GAAeW,GAClCrnB,EAAW2nB,aAAa,mBAAoB38B,EAAU,GAAGqD,kBACzD2R,EAAWomB,cAAc,CACvBc,iBAEF9S,EAAY7pB,KAAKyV,EACnB,CAEA,OAAOoU,CACT,CAEA,MAAM8S,GAAe,CACnBU,GAAAA,EAAmBC,gCACnBD,GAAAA,EAAmBE,uCACnBF,GAAAA,EAAmBG,qCACnBH,GAAAA,EAAmBI,kDACnBJ,GAAAA,EAAmBK,gDACnBL,GAAAA,EAAmBM,gDACnBN,GAAAA,EAAmBO,8CACnBP,GAAAA,EAAmBQ,eACnBR,GAAAA,EAAmBS,uBACnBT,GAAAA,EAAmBU,sCACnBV,GAAAA,EAAmBW,iCACnBX,GAAAA,EAAmBY,eACnBZ,GAAAA,EAAmBa,uBACnBb,GAAAA,EAAmBc,4BACnBd,GAAAA,EAAmBe,sCACnBf,GAAAA,EAAmBgB,uBACnBhB,GAAAA,EAAmBiB,0BACnBjB,GAAAA,EAAmBkB,6BACnBlB,GAAAA,EAAmBmB,gDACnBnB,GAAAA,EAAmBoB,oDACnBpB,GAAAA,EAAmBqB,oDACnBrB,GAAAA,EAAmBsB,gDACnBtB,GAAAA,EAAmBuB,6BACnBvB,GAAAA,EAAmBwB,uBACnBxB,GAAAA,EAAmByB,kCACnBzB,GAAAA,EAAmB0B,wBACnB1B,GAAAA,EAAmB2B,+BACnB3B,GAAAA,EAAmB4B,+BACnB5B,GAAAA,EAAmB6B,gCACnB7B,GAAAA,EAAmB8B,gDACnB9B,GAAAA,EAAmB+B,8CACnB/B,GAAAA,EAAmBgC,mEACnBhC,GAAAA,EAAmBiC,iEACnBjC,GAAAA,EAAmBkC,4BACnBlC,GAAAA,EAAmBmC,yBACnBnC,GAAAA,EAAmBoC,4BACnBpC,GAAAA,EAAmBqC,0BACnBrC,GAAAA,EAAmBsC,6BACnBtC,GAAAA,EAAmBuC,0CACnBvC,GAAAA,EAAmBwC,2BACnBxC,GAAAA,EAAmByC,8BACnBzC,GAAAA,EAAmB0C,sCACnB1C,GAAAA,EAAmB2C,uCACnB3C,GAAAA,EAAmB4C,iCACnB5C,GAAAA,EAAmB6C,mCACnB7C,GAAAA,EAAmB8C,uCACnB9C,GAAAA,EAAmB+C,wBACnB/C,GAAAA,EAAmBgD,uCACnBhD,GAAAA,EAAmBiD,eACnBjD,GAAAA,EAAmBkD,yBAkBrB,SAfA,WACE,MAAO,CACL,CACEx2B,KAAMkyB,GACNU,gBACAD,6BAEF,CACE3yB,KAAM,qCACN4yB,aAAc,GACdD,yBAA0BjB,IAGhC,ECxNe,SAAS+E,KACtB,OAAO3f,GAAAA,cAAA,QAAMK,UAAU,wDACzB,C,uOC4BA,SAASuf,GAAcvuB,GAAqD,IAApD,KAAEwuB,EAAI,QAAEC,EAAO,UAAEzf,EAAS,YAAE0f,KAAgBC,GAAM3uB,EACxE,MAAO4uB,EAAQC,IAAa9gB,EAAAA,GAAAA,WAAS,GAE/B+gB,EAAsBA,KACtBF,GACFC,GAAU,EACZ,GAGF7gB,EAAAA,GAAAA,YAAU,KACRhF,OAAO+lB,iBAAiB,QAASD,GAC1B,KACL9lB,OAAOgmB,oBAAoB,QAASF,EAAoB,IAEzD,CAACF,IAEJ,MACMK,EAAkBL,EAASM,GAAAA,GAAqB,KAEtD,OACEvgB,GAAAA,cAACwgB,GAAAA,GAAa,CACZtgB,GAAG,SACH2G,MAAM,cACNlF,KAAK,cACL9B,cARyB4gB,IAAMP,GAAWD,GAS1C5f,UAAWA,EACXqgB,QAASV,EAAKU,QACdC,gBACsB,OAApBL,GACEtgB,GAAAA,cAACsgB,EAAe,CACdT,KAAMA,EACNC,QAASA,EACTC,YAAaA,IAInB/L,SAAUiM,EACVzyB,KAAK,UAGX,CAEAoyB,GAAejY,UAAY,CACzBkY,KAAMjY,KAAAA,OACNkY,QAASlY,KAAAA,OACTgZ,eAAgBhZ,KAAAA,KAChBhJ,gBAAiBgJ,KAAAA,WAAqBG,EAAAA,KAGxC6X,GAAe7Q,aAAe,CAC5B8Q,KAAM,EACNC,QAAS,EACTc,eAAgBA,QAGlB,SAlFA,SAA0Cr9B,GAAgC,IAA/B,gBAAEqb,KAAoBiiB,GAAOt9B,EACtE,MAAM,eAAEsb,GAAmBD,EAAgBE,SAErCihB,GAAcjgB,EAAAA,GAAAA,cAClB+gB,IACEhiB,EAAekB,kBAAkB,CAC/B+gB,gBAAiB,SACjBC,SAAU,CACR,CACEC,YAAa,wBACbC,eAAgB,IAAKJ,GACrBzc,QAAS,aAGb,GAEJ,CAACvF,IAGH,OACEmB,GAAAA,cAAC4f,GAAcrf,GAAA,GACTsgB,EAAK,CACTd,YAAaA,IAGnB,E,uOCzBA,SAASmB,GAA8B39B,GAUpC,IAVqC,QACtC49B,EAAO,SACPC,EAAQ,QACRC,EAAO,QACP3Q,EAAO,UACPD,EAAS,MACT6Q,EAAK,SACLC,EAAQ,cACR1hB,EAAa,gBACbjB,GACDrb,EACC,MAAM,eAAEsb,GAAmBD,GAAiBE,SAEtC0iB,EAAkBA,CAAC12B,EAAMyJ,KAC7B,MAAM,GAAE2L,EAAE,KAAE1S,EAAI,SAAEuzB,GAAaj2B,EAC/B+U,EAAc,CACZwhB,UACAI,OAAQvhB,EACR4gB,gBAAiBtzB,EACjBuzB,aAGFW,GAASC,IAAS,IACbA,EACHjR,SAAU0Q,GAAYD,EAAU,IAAKr2B,EAAMyJ,SAAUotB,EAAMjR,QAC3DkR,YAAY,EACZN,MAAOO,EAAoBP,GAAOl3B,QAAOU,KACvCq2B,IAAYC,IAAWt2B,EAAKyJ,QAAUA,OAEvC,EAICstB,EAAsBP,GAC1BA,EAAMr6B,KAAI,CAAC6D,EAAMyJ,KAAU,IACtBzJ,EACHyJ,QACAqN,QAASA,IAAM4f,EAAgB12B,EAAMyJ,QAGlCutB,EAAcC,IAAkB3iB,EAAAA,GAAAA,UAAS,CAC9C4iB,cAAe,GACfC,QAAS,CAAC,EACVC,OAAQ,CAAC,KAGJP,EAAOD,IAAYtiB,EAAAA,GAAAA,UAAS,CACjCsR,UACA4Q,MAAOO,EAAoBP,GAAOl3B,QAAOU,KACvCq2B,IAAYC,IAAWt2B,EAAKoV,KAAOwQ,EAAQxQ,QAIzC,cAAE8hB,EAAa,QAAEC,GAAYH,EAE7BK,EAAyC,WAAvBR,EAAMjR,QAAQljB,KAEhC40B,EACoB,SAAvBT,EAAMjR,QAAQljB,MAAmBw0B,IAAkBL,EAAMjR,QAAQxQ,IACjEiiB,IAAiD,IAA9BF,EAAQN,EAAMjR,QAAQxQ,IAEtCmiB,EACJxjB,GAAgByjB,4BAA4BX,EAAMjR,QAAQ6R,SAAW/B,GAAAA,IAEvEnhB,EAAAA,GAAAA,YAAU,KACR,MAAM,YAAEK,GAAgBb,EAAec,UACrCd,EAAezG,OAAOoqB,yBACtBb,IACEI,EAAe,IAAKJ,GAAQ,IAIhC,MAAO,KACLjiB,GAAa,CACd,GACA,CAACb,IAEJ,MAAM4jB,EAAed,EAAML,MAAMr6B,KAAI6D,IACnC,MAAMkpB,EAAyB,SAAdlpB,EAAK0C,MAAmBw0B,IAAkBl3B,EAAKoV,GAMhE,MAAO,IACFpV,EACHkpB,WACD,IA8BG0O,EAAmBnB,GA3BOlwB,KAAkC,IAAjC,KAAE7D,EAAI,KAAEmU,EAAI,MAAEkF,EAAK,EAAE3F,EAAC,GAAEhB,GAAI7O,EAC3D,MAAM2iB,EAAoB,WAATxmB,IAAqC,IAAhBy0B,EAAQ/hB,GAE9C,OACEF,GAAAA,cAAA,OACEK,UAAWsiB,KACT,kEACA,2BACA3O,GAAY,kBACZA,EACI,iBACA,sEAGLrS,GACC3B,GAAAA,cAAA,QAAMK,UAAU,QACdL,GAAAA,cAAC4iB,GAAAA,GAAI,CACH15B,KAAMyY,EACNtB,UAAU,aAIhBL,GAAAA,cAAA,QAAMK,UAAU,QAAQa,EAAE2F,IACtB,GAMV,OACE7G,GAAAA,cAAC6iB,GAAAA,GAAW,CACV1B,QAASA,EACTC,SAAUA,EACV1Q,QAASiR,EAAMjR,QACfD,UAAWA,EACX6Q,MAAOmB,EACPpB,QAASA,EACTE,SAAUmB,EACV1O,SAAUoO,GAAmBK,EAAa3U,MAAKhjB,GAAQA,EAAKkpB,WAC5D8O,SAAUX,EACVtiB,cAAeA,EACfM,UAAW0gB,GACT7gB,GAAAA,cAACqiB,EAAsB9hB,GAAA,GACjBsgB,EAAK,CACTjiB,gBAAiBA,MAK3B,CAEAsiB,GAA+BvZ,UAAY,CACzCwZ,QAASvZ,KAAAA,KACTwZ,SAAUxZ,KAAAA,KACVyZ,QAASzZ,KAAAA,OACT8I,QAAS9I,KAAAA,MAAgB,CACvB1H,GAAI0H,KAAAA,OAAiBC,WACrBra,KAAMoa,KAAAA,MAAgB,CAAC,OAAQ,SAAU,WAAWC,WACpD0a,OAAQ3a,KAAAA,SAEV6I,UAAW7I,KAAAA,MAAgB,CACzB1H,GAAI0H,KAAAA,OACJjG,KAAMiG,KAAAA,OAAiBC,WACvBhB,MAAOe,KAAAA,OACPmb,QAASnb,KAAAA,OAAiBC,WAC1BmM,SAAUpM,KAAAA,OAEZ0Z,MAAO1Z,KAAAA,QACLA,KAAAA,MAAgB,CACd1H,GAAI0H,KAAAA,OAAiBC,WACrBra,KAAMoa,KAAAA,MAAgB,CAAC,OAAQ,SAAU,WAAWC,WACpDlG,KAAMiG,KAAAA,OACNf,MAAOe,KAAAA,OACPmb,QAASnb,KAAAA,UAGb2Z,SAAU3Z,KAAAA,KACV/H,cAAe+H,KAAAA,KAAeC,WAC9BjJ,gBAAiBgJ,KAAAA,MAAgB,CAC/B9I,SAAU8I,KAAAA,MAAgB,CACxB/I,eAAgB+I,KAAAA,YAKtBsZ,GAA+BnS,aAAe,CAC5CoS,SAAS,EACTC,UAAU,GAGZ,Y,uOCrLA,SAAS4B,GAAyBz/B,GAO/B,IAPgC,GACjC2c,EAAE,KACF1S,EAAI,SACJuzB,EAAQ,cACRlhB,EAAa,gBACbjB,KACGiiB,GACJt9B,EACC,MAAM,eAAEsb,GAAmBD,GAAiBE,UAAY,CAAC,GAElDgjB,EAAcC,IAAkB3iB,EAAAA,GAAAA,UAAS,CAC9C4iB,cAAe,GACfC,QAAS,CAAC,EACVC,OAAQ,CAAC,KAEL,cAAEF,GAAkBF,EAEpB9N,EACM,SAATxmB,GAAmB0S,IAAO8hB,GACjB,WAATx0B,IAAkD,IAA7Bs0B,EAAaG,QAAQ/hB,GAe7C,OAbAb,EAAAA,GAAAA,YAAU,KACR,MAAM,YAAEK,GAAgBb,EAAec,UACrCd,EAAezG,OAAOoqB,yBACtBb,IACEI,EAAe,IAAKJ,GAAQ,IAIhC,MAAO,KACLjiB,GAAa,CACd,GACA,CAACb,IAGFmB,GAAAA,cAACwgB,GAAAA,GAAajgB,GAAA,CACZwgB,SAAUA,EACV7gB,GAAIA,EACJ1S,KAAMA,EACNwmB,SAAUA,EACVnU,cAAeA,GACXghB,GAGV,CAEAmC,GAA0Brb,UAAY,CACpCzH,GAAI0H,KAAAA,OAAiBC,WACrBra,KAAMoa,KAAAA,MAAgB,CAAC,OAAQ,SAAU,WAAWC,WACpDkZ,SAAUnZ,KAAAA,QACRA,KAAAA,MAAgB,CACdoZ,YAAapZ,KAAAA,OAAiBC,WAC9BzD,QAASwD,KAAAA,UAGb/H,cAAe+H,KAAAA,KAAeC,WAC9BjJ,gBAAiBgJ,KAAAA,MAAgB,CAC/B9I,SAAU8I,KAAAA,MAAgB,CACxB/I,eAAgB+I,KAAAA,MAAgB,CAC9BjI,UAAWiI,KAAAA,KAAeC,WAC1B8Z,MAAO/Z,KAAAA,MAAgB,CACrBoa,cAAepa,KAAAA,OACfqa,QAASra,KAAAA,SAAmBA,KAAAA,MAC5Bsa,OAAQta,KAAAA,SAAmBA,KAAAA,OAC1BC,aACFA,aACFA,aACFA,YAGL,YC6BO,SAASob,GACdC,EACA1R,EACA2R,EACAC,GAIA,MAAMC,EAAW,CAAEH,gBAAe1R,SAE5B8R,EA/DD,SAAkBH,EAAetC,EAAsBuC,GAC5D,MAAM,QAAEG,GAAY1C,EAOd2C,EALN,kBA3CK,SAAsBL,EAAeM,GAC1C,GAAKA,EAIL,OAAON,EAAMt4B,MAAKy4B,GAAQA,EAAKpjB,KAAOujB,GACxC,CAsCUC,CAAaP,EAAOC,GAAgBG,SArBvC,SAAyBJ,EAAeE,GAC7C,OAAKF,EAGEA,EAAMt4B,MAAKy4B,IAASA,EAAKK,UAAYL,EAAKK,SAASN,EAASH,iBAF1D,IAGX,CAiBUU,CAAgBT,EAAOtC,EAC/B,CAEegD,GAEf,IAAIC,EAAUN,EAAO19B,OACjBw9B,EAAOQ,EAAQ9iC,MAEnB,MAAQ8iC,EAAQ/9B,MACdu9B,EAAOQ,EAAQ9iC,MAEXsiC,GACFE,EAAOO,SAETD,EAAUN,EAAO19B,OAKnB,OAFA2H,QAAQoI,IAAI,cAAeytB,GAAMpjB,IAAM,QAEhCojB,CACT,CAsCeU,CAASb,EAAOE,EAAUD,GAEvC,IAAKE,EACH,OAGF,IAAKA,EAAKhC,MAER,OADA7zB,QAAQC,KAAK,4BAA6B41B,GACnC,GAGT,IAAIW,EAAY,GAchB,OAbAX,EAAKhC,MAAMriC,SAAQ6L,IACjB,MAAM,WAAEo5B,EAAU,SAAEP,EAAQ,QAAEJ,GAAYz4B,EAE1C,IAAK64B,GAAYA,EAAST,GACxB,GAAIgB,EACFD,EAAY,IAAIA,KAAchB,GAAaC,EAAe1R,EAAO2R,EAAOI,QACnE,CACL,MAAMY,EAmBP,SAAmBr5B,EAAgBu4B,GACxC,MAAMe,EAA2B,IAC5Bt5B,EACH9J,MAAOqiC,EAASH,eAAeliC,OAGT,gBAApB8J,EAAKu5B,YAAiCD,EAAQE,YAChDF,EAAQE,UAAY,gBAEjBx5B,EAAKulB,SACR+T,EAAQ/T,OAAS,CAACkU,EAASnkB,KACzB,MAAM,MAAEoR,EAAQ,CAAC,GAAMpR,GACjB,OAAEokB,EAAS,CAAC,GAAMhT,EACxB4S,EAAQK,QAAUD,EAAOC,QAEzBrkB,EAAe8P,UACf,MAAMG,EAASjQ,EAAgB,KAAImkB,EAAQF,YAAc,aACrDhU,EACFA,EAAOnf,KAAKkP,EAAgBgkB,EAASG,EAASlB,GAE9C51B,QAAQC,KAAK,wBAAyB62B,EACxC,GAIJ,OAAOH,CACT,CA7CsBM,CAAU55B,EAAMu4B,GAC9BY,EAAU9kC,KAAKglC,EACjB,CACF,IAGKF,CACT,C,eC3He,MAAMU,GAKnB//B,WAAAA,CAAYga,EAAkC4G,GAAkC,KAJhFA,qBAAe,OACf1G,cAAQ,OACRmlB,eAAS,EAGP/+B,KAAK4Z,SAAWF,EAAgBE,SAChC5Z,KAAKsgB,gBAAkBA,CACzB,CAEAof,gBAAAA,GACE1/B,KAAK4Z,SAASuQ,gBAAgBe,QAAQ,CAAElQ,GAAI,gBAC9C,CASA2kB,eAAAA,CACEC,EACAC,EACAC,GAEA,IAAK9/B,KAAK4Z,SAASuQ,gBAEjB,YADA5hB,QAAQC,KAAK,0DAIf,MAAM,MAAE8jB,EAAK,QAAE+R,EAAO,OAAEE,EAAM,MAAEN,EAAK,cAAED,GAAkB4B,EAEzDr3B,QAAQoI,IAAI,qBAAsBstB,GAClC,MAAM7B,EAAQ2D,GACZ/B,GAAiB4B,EACjBtT,EACA2R,EACAM,GAGFv+B,KAAK4Z,SAASuQ,gBAAgBe,QAAQ,CAAElQ,GAAI,iBAC5Chb,KAAK4Z,SAASuQ,gBAAgBjZ,OAAO,CACnC8J,GAAI,eACJ0P,aAAa,EACbsV,kBAAkB,EAClBC,cAAc,EACdC,gBAAiBT,GAAsBU,oBACrCL,EACAxT,GAAOgT,OACPO,GAEFvT,QACA3P,QAASyjB,GAAAA,EAITC,eAAgBA,IAAMrgC,KAAK4Z,SAASuQ,gBAAgBe,QAAQ,CAAElQ,GAAI,iBAElE6B,aAAc,CACZuf,QACA4B,gBACAC,QACA3R,QACA+R,UACAiC,UAAWhU,GAAOgT,OAElBtU,QAASA,KACPhrB,KAAK4Z,SAASuQ,gBAAgBe,QAAQ,CAAElQ,GAAI,gBAAiB,EAS/DulB,cAAeA,CAAC36B,EAAMy5B,EAASlB,KACxBkB,EAAQhB,QAIbr+B,KAAK2/B,gBACH,IACKC,EACHrB,OAAQc,EAAQhB,SAElBwB,EACAC,GATAv3B,QAAQC,KAAK,yBAA0B5C,EAAMy5B,EAASlB,EAUvD,EAIHqC,UAAWA,CAAC56B,EAAMy5B,EAASlB,KACzBn+B,KAAKsgB,gBAAgBmgB,IAAI76B,EAAM,IAC1Bo4B,KACAqB,EACHlB,YACA,IAIV,EAtGmBsB,GAwGZiB,mBAAqB,KACnB,CACLrqB,EAAG,EACHsqB,EAAG,IA3GYlB,GA+GZmB,yBAA2BC,IAAe,CAC/CxqB,EAAGwqB,GAAeA,EAAYC,cAAcnhC,OAAO,GACnDghC,EAAGE,GAAeA,EAAYC,cAAcnhC,OAAO,KAjHlC8/B,GAoHZsB,2BAA6BxB,IAClC,GAAIA,EAAS,CACX,MAAMyB,EAAqBzB,EAAQ0B,wBACnC,MAAO,CACL5qB,EAAG2qB,EAAmB3qB,EACtBsqB,EAAGK,EAAmBL,EAE1B,CAEA,MAAO,CACLtqB,OAAGjb,EACHulC,OAAGvlC,EACJ,EAhIgBqkC,GAmIZyB,yBAA2B,WAA0B,IAAzBC,EAAM1lC,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,GAAI8jC,EAAO9jC,UAAA5B,OAAA,EAAA4B,UAAA,QAAAL,EACrD,MAAMgmC,EAAY3B,GAAsBsB,2BAA2BxB,GAEnE,IAAK,IAAI8B,EAAa,EAAGA,EAAaF,EAAOtnC,OAAQwnC,IAAc,CACjE,MAAMC,EAAQ,CACZjrB,EAAG8qB,EAAOE,GAAY,IAAMF,EAAOE,GAAe,EAClDV,EAAGQ,EAAOE,GAAY,IAAMF,EAAOE,GAAe,GAEpD,GACE5B,GAAsB8B,iBAAiBD,IACvC7B,GAAsB8B,iBAAiBH,GAEvC,MAAO,CACL/qB,EAAGirB,EAAMjrB,EAAI+qB,EAAU/qB,EACvBsqB,EAAGW,EAAMX,EAAIS,EAAUT,EAG7B,CACF,EArJmBlB,GAuJZ8B,iBAAoBC,GAClBA,GAA8B,iBAAbA,EAAOnrB,GAAsC,iBAAbmrB,EAAOb,EAxJ9ClB,GA8JZU,oBAAsB,CAACsB,EAAcZ,EAAaa,KAQvD,MAAMC,EAPN,kBACQlC,GAAsByB,yBAAyBO,EAAcC,SAC7DjC,GAAsBmB,yBAAyBC,SAC/CpB,GAAsBsB,2BAA2BW,SACjDjC,GAAsBiB,oBAC9B,CAEyBkB,GAEzB,IAAIhD,EAAU+C,EAAiB/gC,OAC3BihC,EAAWjD,EAAQ9iC,MAEvB,MAAQ8iC,EAAQ/9B,MACdghC,EAAWjD,EAAQ9iC,MAEf2jC,GAAsB8B,iBAAiBM,IACzCF,EAAiB9C,SAEnBD,EAAU+C,EAAiB/gC,OAG7B,OAAOihC,CAAQ,ECpMnB,MA8BA,GA9B2B,CACzB7mB,GAAI,0BACJ8mB,kBAAmB,mBACnB7D,MAAO,CAEL,CACEjjB,GAAI,yBACJyjB,SAAUpgC,IAAA,IAAC,eAAE0jC,GAAgB1jC,EAAA,QAAO0jC,CAAc,EAClD3F,MAAO,CACL,CACEza,MAAO,qBACPka,SAAU,CACR,CACEC,YAAa,uBAInB,CACEna,MAAO,YACPka,SAAU,CACR,CACEC,YAAa,6B,uCChB3B,MAIMkG,GAA0B,CAAEC,QAAU,UACtCC,GAAW,CACfC,kBAAoB,SACjBH,IAGL,SAASI,GAAa/jC,GAA0C,IAAzC,OAAEgkC,EAAM,MAAEC,EAAK,WAAEC,EAAU,SAAEC,GAAUnkC,EAC5D,OACEyc,GAAAA,cAAA,OACEK,UAAWsiB,KACT,2EAEFpb,MAAO2f,IAEPlnB,GAAAA,cAAA,OAAKK,UAAU,eACbL,GAAAA,cAAA,SACE2nB,IAAKJ,EACLlnB,UAAU,4DAEVL,GAAAA,cAAA,QAAMK,UAAU,iDAAgD,SAGpEL,GAAAA,cAAA,OAAKK,UAAU,eACbL,GAAAA,cAAA,SACE2nB,IAAKH,EACLnnB,UAAU,4DAEVL,GAAAA,cAAA,QAAMK,UAAU,iDAAgD,QAGpEL,GAAAA,cAAA,OAAKK,UAAU,eACbL,GAAAA,cAAA,SACE2nB,IAAKF,EACLpnB,UAAU,4DAEVL,GAAAA,cAAA,QAAMK,UAAU,iDAAgD,aAGpEL,GAAAA,cAAA,OAAKK,UAAU,oBACbL,GAAAA,cAAA,SACE2nB,IAAKD,EACLrnB,UAAU,4DAEVL,GAAAA,cAAA,QAAMK,UAAU,iDAAgD,WAK1E,CAwJA,SAtJA,SAAsBhP,GAAW,IAAV,KAAEwuB,GAAMxuB,EAC7B,MAAMu2B,GAAUC,EAAAA,GAAAA,UACVC,GAAYD,EAAAA,GAAAA,WAEXE,EAAeC,IAAoB5oB,EAAAA,GAAAA,UAAS,OAC5C6oB,EAAcC,IAAmB9oB,EAAAA,GAAAA,UAAS,OAC1C+oB,EAAmBC,IAAwBhpB,EAAAA,GAAAA,UAAS,OACpDipB,EAAiBC,IAAsBlpB,EAAAA,GAAAA,UAAS,OA6BvDC,EAAAA,GAAAA,YAAU,KACHuoB,GAAS9D,UAId8D,EAAQ9D,QAAQyE,SAAS,GACzBX,EAAQ9D,QAAQ0E,gBAAgB,GAAE,GACjC,CAAC3I,KAKJxgB,EAAAA,GAAAA,YAAU,KACR,MAAMopB,EAAkB1V,MAAS,IAAM6U,EAAQ9D,QAAQ0E,gBAAgB,IAAI,KAI3E,OAFAnuB,OAAO+lB,iBAAiB,SAAUqI,GAE3B,KACLA,EAAgB5U,SAChBxZ,OAAOgmB,oBAAoB,SAAUoI,EAAgB,CACtD,GACA,IAEH,MAAMC,GAAM5oB,EAAAA,GAAAA,cACV9K,IAAsB,IAArB,MAAET,EAAK,MAAEgT,GAAOvS,EACf,MAAM2zB,EAAM9I,EAAKtrB,GAEjB,OACEyL,GAAAA,cAAA,OACEuH,MAAO,IAAKA,KAAU6f,IACtB/mB,UAAWsiB,KACT,wIAxHiB,kBA2HnBt/B,IAAM,eAAckR,KAEpByL,GAAAA,cAAA,OAAKK,UAAU,eAAesoB,EAAI,IAClC3oB,GAAAA,cAAA,OAAKK,UAAU,eAAesoB,EAAI,IAClC3oB,GAAAA,cAAA,OAAKK,UAAU,eAAesoB,EAAI,IAClC3oB,GAAAA,cAAA,OAAKK,UAAU,oBAAoBsoB,EAAI,IACnC,GAGV,CAAC9I,IAOG+I,GAAmB9oB,EAAAA,GAAAA,cAAY,IAAwB,OAAlBioB,GAAwB,CAACA,IAO9Dc,GAAc/oB,EAAAA,GAAAA,cAClBvL,IACE,MAAMu0B,EAAe,CACnBf,EAAcgB,YACdd,EAAac,YACbZ,EAAkBY,YAClBV,EAAgBU,aAGZ3kB,EAAU0jB,EAAUhE,QAAQkF,WAAW,MAG7C,OAFA5kB,EAAQ6kB,KAAOC,iBAAiBpB,EAAUhE,SAASmF,KAE5CpJ,EAAKtrB,GACTtN,KAAI,CAACkiC,EAAS50B,KACb,MAAM60B,EAAkBhlB,EAAQilB,YAAYF,GAASG,MAErD,OAnKW,GAkKMrf,KAAKsf,KAAKH,EAAkBN,EAAav0B,IACzB,GAhKjB,CAgK6D,IAE9EqC,QAAO,CAAC4yB,EAAWC,IAAcxf,KAAKsI,IAAIiX,EAAWC,IAAW,GAErE,CAAC5J,EAAMsI,EAAmBJ,EAAeM,EAAiBJ,IAG5D,OACEjoB,GAAAA,cAAA,WACEA,GAAAA,cAAA,UACEuH,MAAO,CAAEmiB,WAAY,SAAU3C,SAAU,YACzC1mB,UAAU,YACVsnB,IAAKG,IAEP9nB,GAAAA,cAACsnB,GAAa,CACZC,OAhHSoC,IACTA,GACF3B,EAAiB2B,EACnB,EA8GInC,MA5GQmC,IACRA,GACFzB,EAAgByB,EAClB,EA0GIlC,WAxGakC,IACbA,GACFvB,EAAqBuB,EACvB,EAsGIjC,SApGWiC,IACXA,GACFrB,EAAmBqB,EACrB,IAmGE3pB,GAAAA,cAAA,OACEK,UAAU,iDACVkH,MAAO,CAAEC,OAAQ,UAEhBohB,KACC5oB,GAAAA,cAAC4pB,GAAAA,GAAI,CACHjC,IAAKC,EACLpgB,OAAQ,IACRqiB,UAAWhK,EAAK9gC,OAChB+qC,SAAUjB,EACVS,MAAO,OACPjpB,UAAU,kBAETqoB,IAMb,GCrMQ5N,SAAQA,IAAKrsB,EAAAA,SACb1H,oBAAmBA,IAAKD,EAAAA,QAAAA,MAC1B,QAAEijC,IAAYhjC,GA8JpB,SAASijC,GAAyBC,EAAMz4B,GACtC,MAAMquB,EAAO,GA6Bb,OA3BAoK,EAAKhrC,SAAQirC,IACX,GAAmB,OAAfA,EAAQt+B,GAAa,CACvBi0B,EAAK1gC,KAAK,CAAE,GAAE+qC,EAAQC,YAAYD,EAAQv9B,MAAOu9B,EAAQt+B,GAAIs+B,EAAQE,QAAS,KAE9E,MAAM,OAAE12B,GAAWw2B,EAEnBx2B,EAAOzU,SAAQ,CAAC6L,EAAMyJ,KACpB,MAAM81B,EAAuBL,GAAyBl/B,EAAM0G,GAE5DquB,EAAK1gC,KAAK,CAAE,GAAE2L,EAAK,GAAGq/B,uBAAwB,GAAK,SAAQ51B,IAAS,KAEpEsrB,EAAK1gC,QAAQkrC,EAAqB,GAEtC,KAAO,CACL,GAAmB,OAAfH,EAAQt+B,GACV,IACE,MAAMe,EAAM7F,EAAAA,QAAAA,KAAWwjC,IAAIC,YAAYL,EAAQv9B,KAAK69B,gBAC9CC,EAAkBj5B,EAAS7E,GACjCu9B,EAAQt+B,GAAK6+B,EAAgB7+B,EAC/B,CAAE,MAAO2d,GACP9b,QAAQ8b,MAAO,iDAAgD2gB,EAAQE,WACzE,CAEFvK,EAAK1gC,KAAK,CAAE,GAAE+qC,EAAQC,YAAYD,EAAQv9B,MAAOu9B,EAAQt+B,GAAIs+B,EAAQE,QAASF,EAAQlpC,OACxF,KAGK6+B,CACT,CAWA,SAAS6K,GAAQl5B,GAAqB,IAAXm5B,EAAKhqC,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,EAGjC,MAAMiqC,EAAWznC,OAAOC,KAAKoO,GAE7B,IAAI24B,EAAY,GAEhB,IAAK,IAAIhyB,EAAI,EAAGA,EAAIwyB,EAAOxyB,IACzBgyB,GAAa,IAGXQ,EAAQ,IACVR,GAAa,KAGf,MAAMtK,EAAO,GACb,IAAK,IAAI1nB,EAAI,EAAGA,EAAIyyB,EAAS7rC,OAAQoZ,IAAK,CACxC,IAAIiyB,EAAUQ,EAASzyB,GAEvB,GAAgB,WAAZiyB,EACF,SAGF,MAAMF,EAAUH,GAAQK,GAExB,IAAIppC,EAAQwQ,EAAS44B,GAErB,GAAIF,GAA0B,OAAfA,EAAQt+B,GAAvB,CACE,MAAMi/B,GAoGKC,EApGqB9pC,EAqG7B8B,MAAMC,QAAQ+nC,GAAiBA,EAAgB,CAACA,IAjG7CC,EAAW,CACfp+B,IAAKu9B,EAAQv9B,IACbw9B,YACAv+B,GAAIs+B,EAAQt+B,GACZw+B,UACA12B,OAAQ,IAKV,GAFAmsB,EAAK1gC,KAAK4rC,GAEI,OAAV/pC,EAEF,SAGF6pC,EAAgB5rC,SAAQ6L,IACtB,MAAMkgC,EAAeN,GAAQ5/B,EAAM6/B,EAAQ,GAEvCK,EAAajsC,SAEfksC,GAAaD,GACbD,EAASr3B,OAAOvU,KAAK6rC,GACvB,GAIJ,MAuCA,GArCIloC,MAAMC,QAAQ/B,IACZA,EAAMjC,OAAS,GAAwB,iBAAZiC,EAAM,KACnCA,EAAQA,EAAMH,KAAK,OAIF,iBAAVG,IACTA,EAAQA,EAAMgjB,YAGK,iBAAVhjB,IACK,OAAVA,EACFA,EAAQ,IAEa,iBAAVA,EACLA,EAAMgM,aACRhM,EAAQ,gBACCA,EAAM2M,YACf3M,EAAS,gBACAA,EAAMgK,WACfhK,EAAQA,EAAMgK,YAEdyC,QAAQC,KAAM,uBAAsB1M,SAAaopC,MACjD38B,QAAQC,KAAK1M,GACbA,EAAQ,MAGVyM,QAAQC,KAAM,uBAAsB1M,SAAaopC,MACjDppC,EAAQ,MAQdopC,EAAUA,EAAQpnC,QAAQ,WAAY,IAClCknC,EACFrK,EAAK1gC,KAAK,CACRwN,IAAKu9B,EAAQv9B,IACbw9B,YACAv+B,GAAIs+B,EAAQt+B,GACZw+B,UACAppC,cAEG,CAEL,MAAMkqC,EAAQ,kBACd,GAAId,EAAQe,MAAMD,GAAQ,CACxB,MAAMv+B,EAAO,IAAGy9B,EAAQl/B,UAAU,EAAG,MAAMk/B,EAAQl/B,UAAU,EAAG,MAChE20B,EAAK1gC,KAAK,CACRwN,MACAw9B,YACAv+B,GAAI,GACJw+B,QAAS,cACTppC,SAEJ,CACF,CACF,CASF,IAAiB8pC,EAPf,OAAOjL,CACT,CAUA,SAASoL,GAAaG,GACpBA,EAAQ1wB,MAAK,CAAC+gB,EAAGC,IACXD,EAAE9uB,IAAM+uB,EAAE/uB,KACJ,EAGH,GAEX,CAEA,SApVwBpJ,IAA4C,IAA3C,YAAEylB,EAAW,sBAAEgB,GAAuBzmB,EAO7D,MAAM8nC,EAA8C,IAAI9xB,IAAI,CAAC,KAEtD+xB,EAA+BC,IACpCnsB,EAAAA,GAAAA,UAAS4K,IACJoS,EAAgBoP,IAAqBpsB,EAAAA,GAAAA,UAAS,IAC9CqsB,EAAaC,IAAkBtsB,EAAAA,GAAAA,UAAS,IAOzCusB,EAAmB3iB,EAAYne,MACnCygB,GAAMA,EAAGtB,wBAA0BshB,IAG/BM,EAA6BD,aA4SN7Q,GA3S7B,MAAM+Q,EAAmBD,GAAgBD,EAAiB92B,OAAO9V,OAAS,EAEpE+sC,GAAiBC,EAAAA,GAAAA,UAAQ,KAC7B/iB,EAAYtO,MAAK,CAAC+gB,EAAGC,IAAMD,EAAEvoB,aAAewoB,EAAExoB,eACvC8V,EAAY/hB,KAAI2N,IACrB,MAAM,sBACJoV,EAAqB,WACrBrQ,EAAU,WACVxG,EAAU,aACVD,EAAY,kBACZD,EAAiB,SACjBI,GACEuB,EAGEo3B,EAAW,GAAEryB,KAAcxG,IAAagI,MAAM,KAAK,GAIzD,MAAO,CACLna,MAAOgpB,EACPnD,MAAQ,GAAE3T,MAAiBG,OAAcJ,IACzCnT,YANWmsC,KAAOD,EAAS,mBACJE,OAAO,oBAM/B,MAEF,CAACljB,IAEE6W,GAAOkM,EAAAA,GAAAA,UAAQ,KACnB,IAAIv6B,EAEFA,EADEo6B,EACSD,EAAiB92B,OAAOunB,EAAiB,GAEzCuP,EAAiBnoC,UAAYmoC,EAE1C,MAAM1B,EAmIV,SAAuBz4B,GACrB,MAAM45B,EAAUV,GAAQl5B,GAKxB,OAFAy5B,GAAaG,GAENA,CACT,CA1IiBe,CAAc36B,GAC3B,OAAOw4B,GAAyBC,EAAMz4B,EAAS,GAC9C,CAAC4qB,EAAgBkP,IAEdc,GAAeL,EAAAA,GAAAA,UAAQ,KAC3B,IAAKN,EACH,OAAO5L,EAGT,MAAMwM,EAAuBZ,EAAY1/B,cACzC,OAAO8zB,EAAKz1B,QAAOu+B,GACVA,EAAI/xB,QAAO,CAAC01B,EAASC,EAAKC,IAC3BF,IAKAjB,EAA+BliC,IAAIqjC,GAC9BF,EAGFA,GAAWC,EAAIxgC,cAAcoQ,SAASkwB,MAC5C,IACH,GACD,CAACxM,EAAM4L,IAEJgB,GAA0BV,EAAAA,GAAAA,UAAQ,IAC/BhZ,KAAS2Y,EAAgB,MAC/B,IAQH,OANArsB,EAAAA,GAAAA,YAAU,IACD,KACLotB,GAAyB5Y,QAAQ,GAElC,IAGD7T,GAAAA,cAAA,OAAKK,UAAU,6BACbL,GAAAA,cAAA,OAAKK,UAAU,wCACbL,GAAAA,cAAA,OAAKK,UAAU,oCACbL,GAAAA,cAAC0sB,GAAAA,GAAU,CACTC,QAAQ,WACRtsB,UAAU,QACX,UAGDL,GAAAA,cAAA,OAAKK,UAAU,aACbL,GAAAA,cAAC6Q,GAAAA,GAAM,CACL3Q,GAAG,uBACHkR,aAAa,EACbH,SA9FWjwB,IACrBuqC,EAAiCvqC,EAAMA,OACvCwqC,EAAkB,EAAE,EA6FV9qC,QAASorC,EACT9qC,MAAO8qC,EAAejhC,MAAKygB,GAAMA,EAAGtqB,QAAUsqC,IAC9CjrB,UAAU,iBAIhBL,GAAAA,cAAA,OAAKK,UAAU,oCACZwrB,GACC7rB,GAAAA,cAAC0sB,GAAAA,GAAU,CACTC,QAAQ,WACRtsB,UAAU,QACX,mBAIFwrB,GACC7rB,GAAAA,cAAA,OAAKK,UAAU,QACbL,GAAAA,cAAC4sB,GAAAA,GAAU,CACT5rC,MAAOo7B,EACP/4B,IAAKioC,EACLra,SAAUjwB,IACRwqC,EAAkB7P,SAAS36B,GAAO,EAEpC6rC,SAAU,EACVC,SAAUnB,EAAiB92B,OAAO9V,OAClCguC,KAAM,EACNC,eAAe,SACfC,cAAc,OACdC,WAAY,eAMtBltB,GAAAA,cAAA,OAAKK,UAAU,wBACfL,GAAAA,cAAA,OAAKK,UAAU,4BACbL,GAAAA,cAACmtB,GAAAA,GAAe,CACd9sB,UAAU,oBACV0Q,YAAY,qBACZqc,iBAAkB1B,KAGtB1rB,GAAAA,cAACqtB,GAAa,CAACxN,KAAMuM,IACjB,ECxFV,GA9D0BkB,CACxB3L,EACA5b,EACAwnB,KAEA,MAAM,iBAAE9kB,GAAqBkZ,GACvB,SAAE6L,GAAaznB,EAAuB0nB,oBACtCC,EAAS3nB,EAAuB4nB,YAChC,WAAEC,EAAU,WAAEC,EAAU,eAAEC,GAAmBJ,EAE7CK,EAAYR,EAAYI,WACxBK,EAAoB,IAAKD,EAAUC,mBACnCC,EAAwB,IAAKF,EAAUE,uBAEvCC,EAAQV,EAASW,OAAON,GACxBO,EAAW,GAAEN,KAAkBF,KAAcC,IAC7CQ,EAAW,GAAEP,KAAkBF,IAC/BU,EAA+B,IAChCP,EAAUO,+BAET,KAAEzO,EAAI,QAAEC,GAAYoO,EAAMK,kBAAkBC,WAC5CC,EACJP,EAAMzoB,UAAU1mB,SAAW4iC,EAAMlc,UAAUoJ,MAC3C8S,EAAM+M,OAAOC,UAAY9O,GACzB8B,EAAM+M,OAAOE,UAAY9O,EA+B3B,OA7BAwO,EAA6BD,GAAWX,EAEpCU,GAAWK,IACbT,EAAkBI,GAAW,IAAKzM,IAGpCA,EAAMlc,UAAUxmB,SAAQ,CAAC4vC,EAAU/iB,KACjC,MAAM,kBAAEgjB,EAAiB,uBAAEpjB,GAA2BmjB,EACtD,GAAKC,EAGL,IAAK,IAAI32B,EAAI,EAAGA,EAAI22B,EAAkB/vC,OAAQoZ,IAAK,CACjD,MAAM42B,EAAgBrjB,EAAuBvT,GACxC42B,IAGDjjB,IAAerD,GAA0B,IAANtQ,IACrC81B,EAAuB,GAAEH,wBAAuCiB,GAE9DD,EAAkB32B,IAAI+H,KACxB+tB,EACG,GAAEH,KAAkBgB,EAAkB32B,GAAG+H,MACxC4uB,EAAkB32B,GAAG62B,yBAA2B,KAEhDD,GAER,KAGK,CACLT,+BACAN,oBACAC,wBACD,EC3DUgB,GAAuBA,CAClClpB,EACAmpB,EACAnI,EACAoI,EACAzuC,KAEA,MAAM0uC,EAAqBF,IAAsBC,GACjD,GAAIC,EACF,MAAO,IAAKA,GAEd,MAAM,WAAExB,EAAU,WAAEC,GAAe9nB,EAAuB4nB,WAGrDjtC,EAAQ2uC,YACX3uC,EAAQ2uC,UAAY,IAAIH,EAAoBI,mBAG9C,MAAMC,EAAUxpB,EAAuBypB,mBAAmB5B,EAAYC,EAAYntC,GAClF,GAAI6uC,EAAS,CACX,MAAM7jB,EAAyB6jB,EAAQE,gBAAgBxoC,KAAIyiB,GAAMA,EAAGM,wBAEpE,OADAtpB,EAAQ2uC,UAAUlwC,QAAQusB,GACnB,CACLA,yBACAojB,kBAAmBS,EAAQE,gBAAgBxoC,KAAIyiB,GAAMA,EAAGolB,oBACxDY,gBAAiB,IACZH,EAAQG,iBAGjB,CACA,MAAO,CAAC,CAAC,EAgDX,GApCgCC,CAC9BhO,EAAKp+B,EAELgqC,KAC4C,IAF5C,QAAEoB,EAAO,QAAEC,GAASrrC,EAGpB,MAAM,UAAEkiB,GAAckc,EAEhBuN,EAAsB,IADV3B,EAAYI,WACauB,qBACrCI,EAAmB,GAEzB7pB,EAAUxmB,SAAQ4vC,IAChB,GAAIA,EAASM,WAAY,CACvB,MAAMS,EAAiB,IAClBf,EACHa,gBAAiB,IAAKb,EAASa,kBAEjCR,EAAoBL,EAASM,YAAcS,CAC7C,KAGF,IAAK,IAAIjH,EAAM,EAAGA,EAAMgG,EAAShG,IAC/B,IAAK,IAAI4D,EAAM,EAAGA,EAAMqC,EAASrC,IAAO,CACtC,MACMsC,EAAWK,EADG,GAAE3C,KAAO5D,KAEzBkG,GAAUnjB,wBACZ4jB,EAAiBnwC,QAAQ0vC,EAASnjB,uBAEtC,CAMF,OAFAwjB,EAAoBI,iBAAmBA,EAEhC,CAAEJ,sBAAqB,E,gBC9EhC,MAAM,kCAAEW,IAAsCnwC,EAAAA,MAmBxCowC,GAA2BC,GAC/BA,IACyB,uBAAxBA,EAAQ/O,aAAgE,0BAAxB+O,EAAQ/O,aAwpB3D,GAtpBuBz9B,IAGkD,IAHjD,gBACtBqb,EAAe,gBACf4G,GACiCjiB,EACjC,MAAM,qBACJysC,EAAoB,mBACpBrd,EAAkB,uBAClB5M,EAAsB,sBACtBwC,EAAqB,oBACrBvJ,EAAmB,kBACnBsJ,EAAiB,iBACjB2nB,EAAgB,eAChBpxB,GACGD,EAAoCE,SAGnCoxB,EAAwB,IAAIvL,GAAsB/lB,EAAiB4G,GAEnE8K,EAAU,CASduU,gBAAkBnkC,IAChB,MAAM,oBACJyvC,EAAmB,QACnB1L,EAAO,MACPjT,EAAK,cACL0R,EAAa,sBACb8B,EAAwB,IACtBtkC,EAEE0vC,EAAe,IAAK1vC,GAEtByvC,GACFhtC,OAAOmF,OACL8nC,EACAJ,EAAqB5mC,IAAI+mC,EAAqBE,KAKlD,MAAM,SAAE7C,EAAQ,MAAEU,GAAUnoB,EAAuB0nB,oBACnD2C,EAAalN,cAAgB,CAC3B1R,QACAgc,WACAU,WACGhL,GAGLgN,EAAsBrL,gBAAgBuL,EAAc3L,EAASO,EAAsB,EAIrFJ,iBAAkBA,KAChBsL,EAAsBtL,kBAAkB,EAG1C0L,oBAAqBj/B,IAA2B,IAA1B,KAAEkf,EAAI,MAAE7O,EAAK,KAAElU,GAAM6D,EACzCkX,EAAsBnH,KAAK,CACzBM,MAAOA,EACPsK,QAASuE,EACT/iB,KAAMA,GACN,EAEJqnB,kBAAmBA,KACjBlC,EAAmB4d,OAAO,EAO5BC,cAAeA,KACb,MAAM,SACJhD,EACAK,WAAY4C,EAAgB,MAC5BvC,GACEnoB,EAAuB0nB,oBACrBiD,EAAiBC,IACrB,IAAKA,EAAOzwB,GACV,OAEF,MAAM,SAAE6gB,EAAQ,MAAEO,GAAUqP,EAAO9P,OAAS8P,EACxCrP,GACFA,EAAMriC,QAAQyxC,GAEhB,MAAME,EAAY7P,GAAUl2B,OAAOilC,IACnC,IAAKc,EACH,OAEF,MAAM,WAAEhD,EAAU,WAAEC,EAAU,QAAEgD,GAAYD,EAAU3P,eAChDjN,IACF4Z,GAAcA,IAAeJ,EAASttB,SACxB5f,IAAfutC,GAA4BA,IAAe4C,GAC1CI,GAAWA,IAAY3C,EAAMhuB,IACjCrB,EAAeiyB,WAAWH,EAAOzwB,GAAI8T,EAAS,EAEhD7wB,OAAOuQ,OAAOmL,EAAekyB,cAAc9xC,QAAQyxC,EAAe,EA2BpEM,mBAAoBh8B,IAMkB,IANjB,eACnB84B,EAAiB,GAAE,WACnBF,EAAU,QACViD,EAAO,WACPhD,EAAU,MACVoD,GAAQ,GACcj8B,EACtB,MAAMk8B,EAA4BryB,EAAesyB,uBACjD,IAIE,MAAMxP,EAAQ3iB,EAAoB2uB,WAC5BD,EAAS3nB,EAAuB4nB,YAC9BH,SAAU4D,GAAgBrrB,EAAuB0nB,oBACnD4D,EAAkBC,GAAmB3P,EAAO5b,EAAwBkqB,IACpE,6BAAE3B,EAA4B,kBAAEN,EAAiB,sBAAEC,GACvDoD,EAEF,GAAKzD,GAME,QAAmBttC,IAAfutC,QAAwCvtC,IAAZuwC,EAAuB,CAE5D,MAAMU,EAAa,GAAEzD,GAAkBJ,EAAOI,kBAAkBF,IAChEC,EAAaS,EAA6BiD,IAAY1D,UACxD,OARED,EAAaF,EAAOE,gBACJttC,IAAZuwC,QAAwCvwC,IAAfutC,IAC3BA,EAAaH,EAAOG,YAQxB,MAAM2D,EACJ3D,GACA9nB,EAAuB0rB,cAAc7D,EAAY,CAC/CiD,UACAhD,eAGAC,GACF/nB,EAAuB2rB,kBAAkB5D,GAG3C,MAAM6D,EAAiB,GAAE5rB,EAAuB4nB,WAAWG,kBAAkBF,KAC3E4D,GAAe,IAGXI,GAAmBX,GAASjD,EAAkB2D,GAGlD/D,IAAeF,EAAOE,YACtB4D,IAAgB9D,EAAOG,YACtBC,GAQD/nB,EAAuB8rB,YAAYjE,EAAY,CAC7CK,wBACA4C,UACAhD,WAAY2D,EACZI,oBAEEA,GACF5yB,EAAoBxV,IAAIwkC,EAAkB2D,KAZ5C5rB,EAAuB8rB,YAAYjE,EAAY,CAC7CiD,UACAhD,WAAY2D,WAiBTvD,EACJ,GAAEH,GAAkBJ,EAAOI,qCAE9BmC,EAAiBr+B,MAAMy/B,GAEvB/gB,EAAQkgB,gBAGR,MAAMsB,EAAgBjzB,EAAekzB,UAAUb,GAC/C,GAAIY,EAAe,CAIjB,IAAIhR,EAAkBgR,EAAcjR,OAAOC,gBAE3C,IAAKA,GAAmBgR,EAAcjR,OAAOS,MAAO,CAClD,MAAM0Q,EAAYF,EAAcjR,MAAMS,MAAM,GAC5CR,EAAkBkR,EAAUnR,OAAOC,iBAAmBkR,EAAUnR,OAAOrzB,IACzE,CAEIszB,GACFjiB,EAAekB,kBAAkB,CAC/B+gB,qBACGgR,EAAcjR,OAGvB,CACA,OAAO,CACT,CAAE,MAAOh7B,GASP,OARA4H,QAAQ8b,MAAM1jB,GACdyqB,EAAQkgB,gBACRjoB,EAAsBnH,KAAK,CACzBM,MAAO,yBACPsK,QAAS,6CACTxe,KAAM,QACNye,SAAU,OAEL,CACT,GAGFgmB,sBAAuB98B,IAAgE,IAA/D,WAAEy4B,EAAU,WAAEC,GAAmC14B,EACvE,MAAM,SACJq4B,EACAK,WAAYqE,EAAiB,YAC7BC,GACEpsB,EAAuB0nB,qBACrB,sBAAEwE,GAA0BhC,EAAiBtC,WAC7CgE,EAAiB,GAAEQ,EAAYlvC,oBAAoB2qC,KAA2B,EAAbC,IACvE,GACEL,EAASttB,KAAO0tB,QACAttC,IAAfutC,GAA4BA,IAAeqE,EAiB5C,OATAjC,EAAiBr+B,MAAM,CACrBqgC,sBAAuB,IAClBA,EACH,CAACN,GAAgB,CACf/D,WAAYJ,EAASttB,GACrB2tB,WAAYqE,MAIX5hB,EAAQ0gB,mBAAmB,CAChCpD,aACAC,aACAoD,OAAO,IAnBT,CAEA,MAAMmB,EAAgBH,EAAsBN,IAAkB,CAC5D/D,WAAY,WAEd,OAAOtd,EAAQ0gB,mBAAmBoB,EACpC,CAeA,EAGFC,WAAY3d,IAAmB,IAAlB,UAAE4d,GAAW5d,EACxB,MAAM,WAAEkZ,EAAYC,WAAY0E,GAAkBxsB,EAAuB4nB,YACnE,SAAEH,GAAaznB,EAAuB0nB,oBAC5C,IACE,IAAII,EAAa0E,EAAgBD,EACjCzE,GAAc,GAAKA,EAAaL,EAASW,OAAOpvC,OAChD8uC,GAAcyE,EAEd,GAA2C,aAAvC9E,EAASW,OAAON,GAAY73B,OAC9B,OAAOsa,EAAQ0gB,mBAAmB,CAChCpD,aACAC,eAINtlB,EAAsBnH,KAAK,CACzBM,MAAO,eACPsK,QAAS,qDACTxe,KAAM,OACNye,SAAU,KACV,EAMJumB,sBAAuBze,IAA0B,IAAzB,QAAE4a,EAAO,QAAEC,GAAS7a,EAC1C,MAAM,SAAEyZ,GAAaznB,EAAuB0nB,oBACtC7M,EAAiB4M,EAASiF,WAAW7R,eAC3C,IAAkE,IAA9Dpb,EAAgBmgB,IAAI/E,EAAgB,CAAE+N,UAASC,YAGjD,YAFAnhC,QAAQoI,IAAI,gCAAiC+qB,EAAgB+N,EAASC,GAsBxEv0B,OAAOq4B,YAjBgBC,KACrB,MAAMhR,EAAQ3iB,EAAoB2uB,WAC5BiF,EAAcjD,GAAwBhO,EAAO,CAAEgN,UAASC,WAAWqB,GACnEhB,EAAuB4D,GAAmBtsC,KAC9C,KACAwf,EACA6sB,EAAY1D,qBAGdlwB,EAAoB8zB,UAAU,CAC5BnE,UACAC,UACAK,yBAEFgB,EAAiBr+B,MAAMghC,EAAY,GAGH,EAAE,EAGtCG,WAAAA,GACE,MAAMC,EAAoBh0B,EAAoB2uB,YACxC,iBAAEllB,EAAgB,UAAEhD,EAAS,OAAEipB,GAAWsE,GAC1C,uBAAEtnB,EAAsB,kBAAEojB,EAAiB,gBAAEY,GACjDjqB,EAAUrc,IAAIqf,GAEhB,GAAuB,IAAnBimB,EAAOE,SAAoC,IAAnBF,EAAOC,QAAe,CAEhD,MAAM,6BAAEsE,GAAiChD,EAAiBtC,WAE1D,IAAKsF,EAA6BvE,OAChC,OAIF,MAAMwE,EAAqBD,EAA6BxqB,iBAOlD0qB,EACJznB,EAAuB3sB,OAAS,EAC5B,GACA2sB,EACGzkB,KAAI+iB,GACHjE,EAAuBgG,0BACrBmnB,EACAlpB,KAGHvN,OAKHwyB,EAAuBA,CAAClI,EAAkBoI,KAE9C,MAAMiE,EAAmBtwC,MAAM4W,KAAKu5B,EAA6BxtB,UAAU/R,UAAU7I,MACnFgkC,GAAYA,EAASM,aAAeA,IAIhCN,EAAWsE,EAAsBtoC,MACrCgkC,GAAYA,EAAS/iB,aAAesnB,EAAiBtnB,aAGvD,OAAO+iB,EAEH,CAAEa,kBAAiBZ,uBAAsBD,GAEzCuE,CAAgB,EAGhBC,EAAgBr0B,EAAoBs0B,0BACxCL,GAIFj0B,EAAoB8zB,UAAU,CAC5BnE,QAASsE,EAA6BvE,OAAOC,QAC7CC,QAASqE,EAA6BvE,OAAOE,QAC7CnmB,iBAAkByqB,EAClBG,gBACApE,wBAEJ,KAAO,CAILgB,EAAiBr+B,MAAM,CACrBqhC,6BAA8BD,IAKhC,MAAM/D,EAAuBA,KACpB,CACLvjB,yBACAojB,oBACAY,oBAKJ1wB,EAAoB8zB,UAAU,CAC5BnE,QAAS,EACTC,QAAS,EACTK,yBAcFY,GAAkC7wB,GAPQu0B,KAExCtD,EAAiBr+B,MAAM,CACrBqhC,6BAFmC,CAAC,GAGpC,GAIN,CACF,EAoBAO,eAAAA,CAAgBC,GACdC,GAAAA,EAAQ3yB,SAAS0yB,EAAYE,GAAIF,EAAY/yC,QAC/C,EAEAkzC,kBAAAA,GACE,MAAM,iBAAEnrB,EAAgB,UAAEhD,GAAczG,EAAoB2uB,WACtDkG,EAA6BpuB,EAAUrc,IAAIqf,IAC3C,uBAAEiD,GAA2BmoB,EAE7B7qB,EAAcV,EAAkBsB,mBAChC,eAAEkqB,GAAmBl1B,EAAgBE,SAErCkL,EAAwB0B,EAAuB,GACrDooB,EAAe1yB,KAAK,CAClBS,QAASkyB,GACThyB,aAAc,CACZiH,cACAgB,wBACAkG,QAAS4jB,EAAezyB,MAE1BK,MAAO,qBAEX,EAOAsyB,eAAgBA,KACd,MAAMC,EAAW/tB,SAASguB,uBAAuB,oBACjD,IAAK,IAAI/7B,EAAI,EAAGA,EAAI87B,EAASl1C,OAAQoZ,IACnC87B,EAASnpC,KAAKqN,GAAGiO,UAAU+tB,OAAO,SACpC,EAGFC,8BAA+BA,KAC7B,MAAM,iBAAE3rB,EAAgB,UAAEhD,GAAczG,EAAoB2uB,WAGtD0G,EADiB5uB,EAAUrc,IAAIqf,GACciD,uBAAuB,GAEpE4oB,EAAgBpuB,SAASquB,cAAc,wBAE7C,IAAKD,EACH,OAGF,MAAME,EAAsBF,EAAcnO,wBAEpCxiC,EAAYuiB,SAASquB,cAAe,cAAaF,KAEvD,IAAK1wC,EACH,OAGF,MAAM8wC,EAAkB9wC,EAAUwiC,wBAIhCsO,EAAgBC,KAAOF,EAAoBE,KAC3CD,EAAgBC,KAAOF,EAAoBG,QAK7ChxC,EAAUixC,eAAe,CAAEC,SAAU,UAAW,EAGlDC,yBAA0BC,IAGY,IAHX,UACzBzC,EAAS,0BACT0C,GAC+BD,EAC/B,MAAME,EAAqB,CAAC,KAAM,MAAO,KAAM,WAAY,SAAU,UAI/DC,EAAWnvB,EAAuBovB,4BAClCC,EAAqB,IAAI9sB,EAAkBsB,mBAEjDwrB,EAAmB16B,KAAKw6B,GAExB,MAAM,iBAAEzsB,EAAgB,UAAEhD,GAAczG,EAAoB2uB,YAEtD,uBAAEjiB,GAA2BjG,EAAUrc,IAAIqf,GAMjD,IAAI4sB,EAEJ,IACEA,EAP4BD,EAAmBlwB,WAAUtQ,GACzD8W,EAAuBvP,SAASvH,EAAWoV,yBAMKsoB,EAChD+C,GAAyB,GAAKA,EAAwBD,EAAmBr2C,SAItEi2C,GACAC,EAAmB94B,SAASi5B,EAAmBC,GAAuBhiC,WAJzEgiC,GAAyB/C,GAU3B,GAAI+C,EAAwB,GAAKA,GAAyBD,EAAmBr2C,OAC3E,OAGF,MAAM,sBAAEirB,GAA0BorB,EAAmBC,GAErD,IAAIxpB,EAAmB,GAEvB,IACEA,EAAmB9F,EAAuBgG,0BACxCtD,EACAuB,EAEJ,CAAE,MAAOT,GACP9b,QAAQC,KAAK6b,GACbhB,EAAsBnH,KAAK,CACzBM,MAAO,gCACPsK,QACE,iHACFxe,KAAM,OACNye,SAAU,KAEd,CAEAjN,EAAoBkN,2BAA2BL,GAE/C6mB,YAAW,IAAMpiB,EAAQ8jB,iCAAiC,EAAE,GAI1DkB,EAAc,CAClBzQ,gBAAiB,CACf0Q,UAAWjlB,EAAQuU,iBAErBD,iBAAkB,CAChB2Q,UAAWjlB,EAAQsU,kBAErB/P,kBAAmB,CACjB0gB,UAAWjlB,EAAQuE,kBACnB2gB,cAAe,GACf90C,QAAS,CAAC,GAEZ4vC,oBAAqB,CACnBiF,UAAWjlB,EAAQggB,oBACnBkF,cAAe,GACf90C,QAAS,CAAC,GAEZswC,mBAAoB,CAClBuE,UAAWjlB,EAAQ0gB,mBACnBwE,cAAe,GACf90C,QAAS,CAAC,GAEZuxC,sBAAuB,CACrBsD,UAAWjlB,EAAQ2hB,sBACnBuD,cAAe,GACf90C,QAAS,CAAC,GAEZ8yC,gBAAiB,CACf+B,UAAWjlB,EAAQkjB,gBACnBgC,cAAe,GACf90C,QAAS,CAAC,GAEZ+0C,UAAW,CACTF,UAAWjlB,EAAQ+hB,WACnBmD,cAAe,GACf90C,QAAS,CAAE4xC,UAAW,IAExBoD,cAAe,CACbH,UAAWjlB,EAAQ+hB,WACnBmD,cAAe,GACf90C,QAAS,CAAE4xC,WAAY,IAEzBE,sBAAuB,CACrB+C,UAAWjlB,EAAQkiB,sBACnBgD,cAAe,GACf90C,QAAS,CAAC,GAEZqyC,YAAa,CACXwC,UAAWjlB,EAAQyiB,YACnByC,cAAe,GACf90C,QAAS,CAAC,GAEZkzC,mBAAoB,CAClB2B,UAAWjlB,EAAQsjB,oBAErBkB,yBAA0B,CACxBS,UAAWjlB,EAAQwkB,yBACnBU,cAAe,GACf90C,QAAS,CAAC,IAId,MAAO,CACL4vB,UACAglB,cACAK,eAAgB,UACjB,EClbH,GA7P6C,CAC3Cz1B,GAAI,eACJpgB,YAAa,4CACboJ,KAAM,MACN0sC,sBAAuB,CACrB,CACE11B,GAAI,kBACJ21B,OAAQ,GACRC,UAAW,gCACXC,WAAY,CACVC,YAAa,KAInBC,aAAc,CAAC,WACfC,oBAAqB,CACnBC,oBAAqB,CACnBC,oBAAqB,CACnB,CACEN,UAAW,iBACXC,WAAY,CACVC,YAAa,CAAEh1C,MAAO,IAExB4wB,UAAU,GAIZ,CACEkkB,UAAW,sBACXD,OAAQ,GACRE,WAAY,CACVM,QAAQ,OAMlBC,gBAAiB,CACf5G,gBAAiB,CACf6G,aAAc,QACdh3B,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,sBACJ8uB,yBAA0B,KAIhCb,OAAQ,CACN,CACEjuB,GAAI,MACJu2B,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CACT,CACEiqB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,yBAIV,CACEwvB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACEgmB,wBAAyB,EACzB9uB,GAAI,yBAIV,CACEwvB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACEgmB,wBAAyB,EACzB9uB,GAAI,yBAIV,CACEwvB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACEgmB,wBAAyB,EACzB9uB,GAAI,2BAQd,CACEA,GAAI,MAEJ02B,kBAAmB,EACnBC,mBAAoB,EAEpBJ,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CACT,CACEiqB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,yBAIV,CACEwvB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,sBACJ8uB,wBAAyB,KAI/B,CACEU,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,sBACJ8uB,wBAAyB,OAQnC,CACE9uB,GAAI,MACJ02B,kBAAmB,EACnBC,mBAAoB,EACpBJ,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CACT,CACEiqB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,yBAIV,CACEwvB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACEgmB,wBAAyB,EACzB9uB,GAAI,2BAQd,CACEA,GAAI,MACJ02B,kBAAmB,EACnBC,mBAAoB,EACpBJ,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CACT,CACEiqB,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,4BAOhB42B,0BAA2B,GChMvBC,GAAoB,CACxB72B,GAAI,uBAGA82B,GAAkB,CACtB92B,GAAI,qBAGA+2B,GAAmB,CACvBvH,gBAAiB,CACfnwB,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CAAC+tB,KAGVG,GAAmB,IACpBD,GACHjuB,YAAa,CACX,IACK+tB,GACH/H,wBAAyB,KAKzBmI,GAAiB,IAClBF,GACHjuB,YAAa,CAACguB,KA6FhB,GA1EoD,CAClD92B,GAAI,kBACJpgB,YAAa,yCACboJ,KAAM,sBACN4tC,yBAA0B,EAC1BlB,sBAAuB,CACrB,CACE11B,GAAI,cACJ21B,OAAQ,IACRC,UAAW,mBAGXp8B,KAAM,QACNkY,UAAU,EACVmkB,WAAY,CACVqB,SAAS,KAIfnB,aAAc,CAAC,WACfC,oBAAqB,CACnBC,oBApI8B,CAChCkB,mBAAoB,CAClB,CAGEvB,UAAW,yBACXp8B,KAAM,UACNkY,UAAU,EACVmkB,WAAY,CACVM,OAAQ,CAAEr1C,MAAO,MAIvBo1C,oBAAqB,CACnB,CACEN,UAAW,iBACXC,WAAY,CACVC,YAAa,CAAEh1C,MAAO,KAK1B,CACE80C,UAAW,sBACXD,OAAQ,GACRE,WAAY,CACVM,QAAQ,MA2GZiB,kBArG4B,CAC9BD,mBAAoB,CAClB,CAGEvB,UAAW,yBACXp8B,KAAM,UACNkY,UAAU,EACVmkB,WAAY,CACVM,OAAQ,CAAEr1C,MAAO,MAIvBo1C,oBAAqB,CACnB,CACEN,UAAW,iBACXC,WAAY,CACVC,YAAa,CAAEh1C,MAAO,KAK1B,CACE80C,UAAW,sBACXD,OAAQ,GACRE,WAAY,CACVM,QAAQ,OA6EdC,gBAAiB,CACf5G,gBAAiB,CACf6G,aAAc,QACdh3B,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,sBACJ8uB,yBAA0B,KAIhCb,OAAQ,CACN,CACEjlC,KAAM,MACNutC,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CAACwxB,GAAkBE,GAAgBD,GApE7B,IAClBC,GACHnuB,YAAa,CACX,IACKguB,GACHhI,wBAAyB,OAkE3B,CACE9lC,KAAM,MACNutC,gBAAiB,CACfziC,QAAS,CACP0iC,oBAAqB,IAGzBnI,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CAACwxB,GAAkBE,OCnL9BI,GAAkB,CACtBr3B,GAAI,UACJs3B,QAAQ,EAIRtuC,KAAM,UACNuuC,YAAa,2BACbC,aAAc,aACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbhC,sBAAuB,GACvBK,aAAc,CAAC,WAIfa,yBAA0B,EAG1BR,gBAAiB,CACf5G,gBAAiB,CACf6G,aAAc,QACdh3B,YAAa,UACbi3B,oBAAoB,GAEtBxtB,YAAa,CACX,CACE9I,GAAI,sBACJ8uB,yBAA0B,KAIhCkH,oBAAqB,CACnBC,oBAAqB,CAEnBC,oBAAqB,CAGnB,CACEN,UAAW,iBACXC,WAAY,CACVC,YAAa,CAAEh1C,MAAO,KAK1B,CACE80C,UAAW,sBACXD,OAAQ,GACRE,WAAY,CACVM,QAAQ,OAQlBlI,OAAQ,CACN,CACEjlC,KAAM,UACNqlC,kBAAmB,CACjBoI,WAAY,OACZnI,WAAY,CACV3O,KAAM,EACNC,QAAS,IAGbra,UAAW,CACT,CACEiqB,gBAAiB,CACf6G,aAAc,QACdzqB,WAAY,UACZvM,YAAa,UAGbs4B,oBAAqB,CACnBpJ,OAAQ,wBAQZzlB,YAAa,CACX,CACE9I,GAAI,0BAKZu3B,YAAa,8BAwBnB,SAnBA,WACE,MAAO,CACL,CACEvuC,KAAMquC,GAAgBr3B,GACtBstB,SAAU+J,IAGZ,CACEruC,KAAM4uC,GAAS53B,GACfstB,SAAUsK,IAGZ,CACE5uC,KAAM6uC,GAAY73B,GAClBstB,SAAUuK,IAGhB,EC/DA,SA/CA,WACE,MAAOl3B,IAAaC,EAAAA,GAAAA,KACdC,GAAWC,EAAAA,GAAAA,MAIXg3B,EAAYn3B,EAAUo3B,YAE5B,OACEj4B,GAAAA,cAAA,OAAKuH,MAAO,CAAE+hB,MAAO,OAAQ9hB,OAAQ,SACnCxH,GAAAA,cAAA,OAAKK,UAAU,uDACbL,GAAAA,cAAA,OAAKK,UAAU,2EACbL,GAAAA,cAAA,OACEK,UAAU,qBACV63B,IAAI,kBACJC,IAAI,SAENn4B,GAAAA,cAAA,OAAKK,UAAU,8BACZ23B,EACE5tC,QAAOsf,GAAwB,cAAlBA,EAAGlO,YAAgD,eAAlBkO,EAAGlO,aACjDvU,KAAIqkB,GACHtL,GAAAA,cAAA,OAAK3c,IAAKioB,EAAG9P,YACXwE,GAAAA,cAAA,MAAIK,UAAU,cACXiL,EAAGrQ,eAAem9B,cAAgB9sB,EAAG8sB,cAExCp4B,GAAAA,cAACq4B,GAAAA,GAAM,CACL7qC,KAAMgjB,GAAAA,GAAAA,GAAiBE,QACvBrQ,UAAWC,KAAW,QACtBsB,QAASA,KACPb,EAAS,CACPwC,SAAU,IACVtjB,OAAS,eAAcqrB,EAAG9P,cAC1B,GAGH8P,EAAG9P,YAENwE,GAAAA,cAAA,iBAQlB,ECiCA,SAzEA,SAA0Bzc,GAIe,IAJd,UACzB+0C,EAAS,SACTC,EAAQ,cACRC,GACuBj1C,EACvB,MAAM,EAAE2d,IAAMC,EAAAA,GAAAA,IAAe,4BACtBsqB,EAAaC,IAAkBtsB,EAAAA,GAAAA,UAAS,IAM/C,OAJAC,EAAAA,GAAAA,YAAU,KACRqsB,EAAe,GAAG,GACjB,CAAC6M,IAGFv4B,GAAAA,cAAA,OAAKK,UAAU,wCACbL,GAAAA,cAAA,OAAKK,UAAU,qCACbL,GAAAA,cAAA,OAAKK,UAAU,kCAAkCa,EAAG,UAASo3B,MAC7Dt4B,GAAAA,cAACmtB,GAAAA,GAAe,CACd9sB,UAAU,mBACVrf,MAAOyqC,EACP2B,iBAAkB1B,EAClB3a,YAAa7P,EAAG,UAASo3B,aAG7Bt4B,GAAAA,cAAA,OAAKK,UAAU,gEACA,MAAZk4B,EACCv4B,GAAAA,cAACyH,GAAAA,GAAwB,CAACpH,UAAW,kBACf,IAApBk4B,EAASx5C,OACXihB,GAAAA,cAAA,OAAKK,UAAU,iFACbL,GAAAA,cAAC4iB,GAAAA,GAAI,CACH15B,KAAK,YACLmX,UAAU,SAEZL,GAAAA,cAAA,YAAOkB,EAAG,MAAKo3B,iBAGjBt4B,GAAAA,cAAAA,GAAAA,SAAA,KACEA,GAAAA,cAAA,OAAKK,UAAU,4CAA4Ca,EAAEo3B,IAC7Dt4B,GAAAA,cAAA,OAAKK,UAAU,gCACZk4B,EACEnuC,QACCU,IACG2gC,GAAe3gC,EAAK5B,KAAK6C,cAAcoQ,SAASsvB,EAAY1/B,iBAEhE9E,KAAI6D,GAIDkV,GAAAA,cAAA,OACEK,UAAWsiB,KACT,wGAJJ,+FAOEt/B,IAAKyH,EAAKoV,IAEVF,GAAAA,cAAA,WAAMlV,EAAK5B,MACX8W,GAAAA,cAACq4B,GAAAA,GAAM,CACLz2B,QAASA,IAAM42B,EAAc1tC,GAC7BuV,UAAU,gCACVo4B,QAASz4B,GAAAA,cAAC4iB,GAAAA,GAAI,CAAC15B,KAAK,gBAEnBgY,EAAE,iBAW3B,EC5EMw3B,GAA+B,kDA2LrC,SAnLA,SAA8Cn1C,GAIC,IAJA,iBAC7Co1C,EAAgB,gBAChBC,EAAe,OACfC,GAC2Ct1C,EAC3C,MAAM,EAAE2d,IAAMC,EAAAA,GAAAA,IAAe,4BAEtBo3B,EAAUO,IAAe15B,EAAAA,GAAAA,aAEzB25B,EAAeC,IAAoB55B,EAAAA,GAAAA,UAASw5B,IAE5CK,EAAcC,IAAmB95B,EAAAA,GAAAA,aAEjC+5B,IAAc/5B,EAAAA,GAAAA,UAASu5B,EAAiBS,kBAOxCC,EAAgBC,IAAqBl6B,EAAAA,GAAAA,UAC1C+5B,EAAWp6C,SAAW65C,EAAgB75C,QASlCw6C,EAA2BF,EAC7BN,EAAch6C,OAAS,EACvBg6C,EAAch6C,OAAS,GAE3BsgB,EAAAA,GAAAA,YAAU,KACR,IAAIm6B,GAAe,EAgCnB,OA9BAN,EAAgB,MAGhBJ,EAAY,MAEiB,IAAzBC,EAAch6C,OAChB45C,EACGvpC,aACA3G,MAAK64B,IACAkY,GACFV,EAAYxX,EACd,IAEDzT,OAAMtE,GAAS2vB,EAAgB3vB,EAAMyC,WAC9BqtB,GAAkBN,EAAch6C,SAAWo6C,EAAWp6C,OAMhE45C,EACGc,eAAeV,EAAcQ,IAC7B9wC,MAAK64B,IACAkY,GACFV,EAAYxX,EACd,IAEDzT,OAAMtE,GAAS2vB,EAAgB3vB,EAAMyC,YAXxC2sB,EAAiBc,eAAeV,EAAcA,EAAch6C,OAAS,IAErE85C,KAYK,KACLW,GAAe,CAAK,CACrB,GACA,CACDT,EACAJ,EACAE,EACAM,EACAE,EACAE,IAGF,MAKMG,EAAmCC,GACvCA,EAAYZ,EAAch6C,OACtB4jC,KACE,gBACAgX,IAAcR,EAAWp6C,OAAS,EAAI,gDAAkD,IAE1F,iBAEA66C,EAA+BD,GACnCA,IAAcJ,EAA2B,EACrC5W,KAAW,WAAY,eAAgB,wBACvCgX,EAAYZ,EAAch6C,OAC1B,2FACA,8CAEA86C,EAA6BF,GACjCA,GAAaZ,EAAch6C,OAAS,qBAAuB,sBA2D7D,OACEihB,GAAAA,cAAA,OAAKK,UAAU,gEA7CbL,GAAAA,cAAA,OAAKK,UAAU,cACZ84B,EAAWlyC,KAAI,CAACqxC,EAAWwB,KAC1B,OACE95B,GAAAA,cAAA,OACE3c,IAAKi1C,EACLj4B,UAAWsiB,KACT,yEA1CuBgX,EA2CMG,EA1CzCH,IAAcR,EAAWp6C,OAAS,GAAK46C,EAAYZ,EAAch6C,OAC7D,iBACA,eAyCQ26C,EAAiCI,GACjCF,EAA6BE,GAC7BD,EAA2BC,IAE7Bl4B,QACGy3B,GAAkBS,EAAiBP,GACpCO,GAAkBP,EACd,KACED,GAAkB,GAClBN,GAAiBe,GAAWA,EAAQC,MAAM,EAAGF,IAAgB,OAE/Dx5C,GAGN0f,GAAAA,cAAA,OAAKK,UAAU,iCACZy5B,EAAiBf,EAAch6C,OAC9BihB,GAAAA,cAAC4iB,GAAAA,GAAI,CAAC15B,KAAK,mBAEX8W,GAAAA,cAAC4iB,GAAAA,GAAI,CAAC15B,KAAK,qBAEb8W,GAAAA,cAAA,OAAKK,UAAWsiB,KAAW+V,KAAgCx3B,EAAEo3B,KAE9DwB,EAAiBf,EAAch6C,OAC9BihB,GAAAA,cAAA,OAAKK,UAAWsiB,KAAW,yBAA0B+V,KAClDK,EAAce,GAAgB5wC,MAGjC8W,GAAAA,cAAA,YAvEuB25B,KAyErB,KAUZ35B,GAAAA,cAAA,OAAKK,UAAU,mCACd44B,EA3DDj5B,GAAAA,cAAA,OAAKK,UAAU,wCACbL,GAAAA,cAAA,OAAKK,UAAU,kCACZa,EAAG,kBAAiBi4B,EAAWJ,EAAch6C,iBAEhDihB,GAAAA,cAAA,OAAKK,UAAU,iCAAiC44B,IA0DhDj5B,GAAAA,cAACi6B,GAAiB,CAChB3B,UAAWa,EAAWI,EAA2B,GACjDhB,SAAUA,EACVC,cAAe1tC,IACbwuC,GAAkB,GAClBN,GAAiBe,GAAW,IAAIA,EAAQC,MAAM,EAAGT,EAA2B,GAAIzuC,IAAM,IAMlG,ECxEA,SA7GA,SAAyCvH,GAGe,IAHd,gBACxCqb,EAAe,iBACf9C,GACsCvY,EACtC,MAAM,EAAE2d,IAAMC,EAAAA,GAAAA,IAAe,4BACvB,KAAEC,EAAI,KAAEC,IAASC,EAAAA,GAAAA,OAEjB,qBAAE0uB,GAAyBpxB,EAAgBE,UAE1C65B,EAAkBuB,IAAuB96B,EAAAA,GAAAA,aAEzCw5B,EAAiBuB,IACtB/6B,EAAAA,GAAAA,aAEFC,EAAAA,GAAAA,YAAU,KACR,IAAIm6B,GAAe,EAEnB,MAAMY,EAA4Bp6C,UAChC,MAAMq6C,EAAsBv+B,EAAiBw+B,gCAE7C,IAAKD,EAAoBp/B,cAAc09B,iBACrC,OAGF,MAAQ4B,QAASC,GACfxK,EAAqB5mC,IAAIixC,EAAoBp/B,cAAc09B,mBAAqB,CAAC,EAEnF,IAAK6B,EACH,OAGF,MAAMC,EAAYD,EAAwBH,EAAoB7+B,YAC9D0+B,EAAoBO,GAGpBN,EAAmB,MAEnBM,EAAUC,qBAAqBjyC,MAAKkyC,IAC9BnB,GACFW,EAAmBQ,EACrB,GACA,EAGEC,EAAM9+B,EAAiB6D,UAC3B7D,EAAiB1D,OAAOyiC,2BACxBT,GAKF,OAFAA,IAEO,KACLZ,GAAe,EACfoB,EAAIl7B,aAAa,CAClB,GACA,IAEH,MAAMo7B,GAAyBh7B,EAAAA,GAAAA,cAAY,KACzCsB,EAAK,CACHS,QAASk5B,GACTr5B,MAAOR,EAAE,yBACTa,aAAc,CACZ42B,mBACAC,kBACAC,OAAQx3B,IAEV,GACD,CAACs3B,EAAkBC,IAatB,OAXAv5B,EAAAA,GAAAA,YAAU,KACHs5B,GAAqBC,GAItBA,EAAgB75C,SAAW45C,EAAiBS,gBAAgBr6C,QAE9D+7C,GACF,GACC,CAACnC,EAAkBC,EAAiBkC,IAEhClC,EACL54B,GAAAA,cAAA,OAAKK,UAAU,oDACbL,GAAAA,cAAC4iB,GAAAA,GAAI,CACH15B,KAAK,WACLmX,UAAU,6CACVuB,QAASk5B,IAEVlC,EAAgB3xC,KAAI,CAAC6D,EAAM6uC,IAExB35B,GAAAA,cAAA,OACE3c,IAAKs2C,EACLt5B,UAAU,wBAEVL,GAAAA,cAAA,OACE3c,IAAKs2C,EACLt5B,UAAU,mDAETvV,EAAK5B,MAEPywC,IAAcf,EAAgB75C,OAAS,GAAKihB,GAAAA,cAAA,OAAKK,UAAU,UAAS,SAM7EL,GAAAA,cAAAA,GAAAA,SAAA,KAEJ,EC5GA,IAGKg7B,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,uBAARA,EAAAA,EAAQ,yBAARA,EAAAA,EAAQ,uBAARA,EAAAA,EAAQ,6BAARA,CAAQ,EAARA,IAAQ,IAcb,MAAMC,GAAa,iDACbC,GAAoB,uCAW1B,MAAMC,GAKJv2C,WAAAA,CAAY+e,EAAgB/E,EAAiB9C,GAAkB,KAJvDs/B,uBAAiB,OACjBC,mBAAa,OACbC,qBAAe,OAYvBlC,cAAgB,IAAM,CAAC,UAAW,WAAY,WAAY,eATxDl0C,KAAKo2C,gBAAkB33B,EACvBze,KAAKk2C,kBAAoBt/B,EACzB,MAAMlN,EAA4BgQ,EAAgBE,SAASlQ,0BAC3D1J,KAAKm2C,cAAgB,CACnBE,OAAQ,MACRnrC,QAASxB,EAA0BgB,yBAEvC,CAIA,gBAAMR,GACJ,MAAMxL,EAAO,GAAEq3C,cAETO,QAAkBL,GAAsCM,SAC5D73C,EACAo3C,GAASQ,SACTt2C,KAAKm2C,eAGP,IAAKG,GAAUz8C,OACb,MAAO,GAYT,OATqBy8C,EAASv0C,KAAIy0C,IACzB,CACLx7B,GAAIw7B,EAAQC,UACZzyC,KAAMwyC,EAAQxyC,KACd0yC,SAAUZ,GAASQ,SACnB53C,IAAM,GAAEs3C,eAA8BQ,EAAQC,eAKpD,CAEA,oBAAMlC,CACJoC,GAEA,MAAMC,EAAkBD,EAExB,GAAIC,EAAgBF,WAAaZ,GAASe,YAAa,CAErD,MAAMn4C,EAAO,GAAEk4C,EAAgBl4C,eACzBo4C,EAAoBzsC,KAAKC,MAC7BD,KAAKE,UAAUvK,KAAKk2C,kBAAkBa,wBAAwB/2C,KAAKo2C,mBAcrE,OAZAU,EAAkB/gC,cAAgB,IAC7B+gC,EAAkB/gC,cACrBzW,YAAaZ,EACbuM,SAAUvM,EACVM,SAAUN,GAGZsB,KAAKk2C,kBAAkBc,8BACrBF,EAAkBxgC,WAClBwgC,EAAkB/gC,eAGb,EACT,CAEA,MAAMkhC,EAAcL,EAAgBF,SAAW,EACzCQ,EAAgB,GAAEpB,GAASmB,KAE3Bv4C,EAAO,GAAEk4C,EAAgBl4C,OAAOw4C,IAEhCC,QAAwBlB,GAAsCM,SAClE73C,EACAu4C,EACAj3C,KAAKm2C,eAGP,IAAKgB,GAAiBt9C,OACpB,MAAO,GAaT,OAViBs9C,EAAgBp1C,KAAIq1C,IACnC,MAAMC,EAAYD,EAAQpzC,KAAKiS,MAAM,KACrC,MAAO,CACL+E,GAAIo8B,EAAQpzC,KACZA,KAAMqzC,EAAUA,EAAUx9C,OAAS,GACnC68C,SAAUO,EACVv4C,IAAM,GAAEs3C,MAAqBoB,EAAQpzC,OACtC,GAIL,CAEA,wBAAMwxC,GACJ,MAIM92C,EAJuBsB,KAAKk2C,kBAAkBa,wBAClD/2C,KAAKo2C,iBAG0BrgC,cAAczW,YACzCg4C,EAAgB54C,EAAIqH,QAAQ,YAI5BwxC,EAAW74C,EAAIsH,UAAUsxC,GAAerhC,MAAM,KAE9Cy9B,EAAkB,GAExB,IACE,IAAIgD,EAAW,EAEfA,EAAW,GAAsB,GAAhBA,EAAW,GAASa,EAAS19C,OAC9C68C,GAAY,EAEZ,GAAIA,IAAaZ,GAASQ,SAAU,CAClC,MAAMG,EAAYc,EAAS,GACrBC,EAAc,GAAEzB,eAAuBU,IAMvCD,SALaP,GAAsCM,SACvDiB,EACA1B,GAASQ,SACTt2C,KAAKm2C,gBAEc,GACrBzC,EAAgBz5C,KAAK,CACnB+gB,GAAIw7B,EAAQC,UACZzyC,KAAMwyC,EAAQxyC,KACd0yC,SAAUA,EACVh4C,IAAM,GAAEs3C,eAA8BQ,EAAQC,aAElD,KAAO,CACL,MAAMgB,EAAeF,EAASzC,MAAM,EAAc,EAAX4B,EAAe,GAAG/6C,KAAK,KAC9D+3C,EAAgBz5C,KAAK,CACnB+gB,GAAIy8B,EACJzzC,KAAMuzC,EAAoB,EAAXb,EAAe,GAC9BA,SAAUA,EACVh4C,IAAM,GAAEs3C,MAAqByB,KAEjC,CAGF,OAAO/D,CACT,CAUA,qBAAqB6C,CACnBmB,EACAC,GAG4C,IAF5CC,EAAYn8C,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChBo8C,EAAyCp8C,UAAA5B,OAAA,QAAAuB,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE7C,IACE,MAAMiD,EAAM,IAAIuJ,IAAIyvC,GACpBh5C,EAAI3D,OAAS,IAAIyjB,gBAAgBq5B,GAAmB/4B,WAEpD,MAAM1M,QAAiBC,MAAM3T,EAAKk5C,GAC5BvzC,QAAa+N,EAASE,OAC5B,GAAIF,EAAStB,QAAU,KAAOsB,EAAStB,OAAS,KAAe,MAARzM,EAAc,CACnE,GAA0B,MAAtBA,EAAKyzC,cAAuB,CAC9BD,EAAkBE,UAAY1zC,EAAKyzC,cACnC,MAAME,QAAoBh4C,KAAKu2C,SAC7BmB,EACAC,EACAC,EACAC,GAEFxzC,EAAKyxC,GAAS6B,IAAkBtzC,EAAKyxC,GAAS6B,IAAgBj0C,OAAOs0C,EACvE,CACA,OAAI3zC,EAAKyxC,GAAS6B,IACTtzC,EAAKyxC,GAAS6B,IACZtzC,EAAKL,KACP,CAACK,GAED,EAEX,CAAO,CACL,MAAMyiB,EACJziB,GAAMggB,OAAOyC,SACZ,gDAA+C1U,EAAStB,YAAYsB,EAAS6lC,aAChF,MAAM,IAAIn3C,MAAMgmB,EAClB,CACF,CAAE,MAAOoxB,GAEP,MAAM,IAAIp3C,MADMo3C,GAAKpxB,SAAW,uCAElC,CACF,E,gBCpOF,MAAMxd,GAAmB6H,EAAAA,QAAAA,QAAa3H,iBCCtC,MAAMF,GAAmBC,EAAAA,QAAQC,iBA6CjC,MAAM2uC,GAAyBhsC,IAA6C,IAA5C,kBAAErN,EAAiB,iBAAEf,GAAkBoO,EACrE,MAAM,UAAEzR,GAAc+T,EAAAA,mBAAmBmJ,UAAU7Z,EAAkBe,GAErE,IAAKpE,GAAWb,OACd,OAGF,MAAMyN,EAAW5M,EAAU,GAAGyT,SAE9B,IAAK7G,GAAyB,OAAbA,EACf,OAGF,MAAMsI,EAAWlV,EAAUqH,KAAIzD,GAAYA,EAASkB,UAC9C44C,EAAwB,GAQ9B,GAPAxoC,EAAS7V,SAAQyF,IACf,MAAM64C,ED5DK,SAAsC74C,GACnD,MAAM84C,EAAgBhvC,GAAiBpF,IAAI,WAAY1E,GAEvD,IAAK84C,EACH,MAAM,IAAIx3C,MAAM,+BAGlB,QAC+B1F,IAA7Bk9C,EAAc7jC,iBACerZ,IAA7Bk9C,EAAcrqC,iBACmB7S,IAAjCk9C,EAAcC,qBACUn9C,IAAxBk9C,EAAcE,QACbF,EAAcG,6CACkEr9C,IAAjFk9C,EAAcG,uCAAuC,GAAGC,2BAC0Bt9C,IAAlFk9C,EAAcG,uCAAuC,GAAGE,4BACtBv9C,IAAlCk9C,EAAcM,sBACoBx9C,IAAlCk9C,EAAcO,sBACoBz9C,IAAlCk9C,EAAcQ,sBAEZ19C,IADDk9C,EAAcG,uCAAuC,GAAGM,uCAGrD39C,IADFk9C,EAAcG,uCAAuC,GAAGO,6BAG1D,MAAM,IAAIl4C,MAAM,sCAGkB1F,IAAhCk9C,EAAcW,eAChB1wC,QAAQC,KAAK,mDAGf,MAAM6vC,EAAqC,CACzCE,eAAgBD,EAAcC,eAC9BC,MAAOF,EAAcE,MACrBE,qBACEJ,EAAcG,uCAAuC,GAAGC,qBAC1DC,sBACEL,EAAcG,uCAAuC,GAAGE,sBAC1DI,iCACET,EAAcG,uCAAuC,GAAGM,iCAC1DC,6BACEV,EAAcG,uCAAuC,GAAGO,6BAC1DJ,gBAAiBN,EAAcM,gBAC/BK,cAAeX,EAAcW,cAC7BxkC,WAAY6jC,EAAc7jC,WAC1BxG,WAAYqqC,EAAcrqC,WAC1B4qC,gBAAiBP,EAAcO,gBAC/BC,gBAAiBR,EAAcQ,iBAGjC,GACER,EAAc,eACgBl9C,IAA9Bk9C,EAAc,UACdA,EAAc,gBACgBl9C,IAA9Bk9C,EAAc,UACd,CACA,MAAMY,EAAiD,CACrDC,eAAgBb,EAAc,SAC9Bc,iCAAkCd,EAAc,WAElDD,EAAiBgB,uBAAyBH,CAC5C,CAsBA,OApBIZ,EAAc,kBAA6Cl9C,IAA9Bk9C,EAAc,cAC7CD,EAAiBiB,+BAAiChB,EAAc,aAG9DA,EAAciB,yBAA2Dn+C,IAArCk9C,EAAciB,qBACpDlB,EAAiBkB,mBAAqBjB,EAAciB,oBAGlDjB,EAAckB,0BAA6Dp+C,IAAtCk9C,EAAckB,sBACrDnB,EAAiBmB,oBAAsBlB,EAAckB,qBAGnDlB,EAAcmB,iBAA2Cr+C,IAA7Bk9C,EAAcmB,aAC5CpB,EAAiBoB,WAAanB,EAAcmB,YAG1CnB,EAAcoB,kBAA6Ct+C,IAA9Bk9C,EAAcoB,cAC7CrB,EAAiBqB,YAAcpB,EAAcoB,aAGxCrB,CACT,CCvB6BsB,CAA6Bn6C,GAClD64C,GACFD,EAAsBn+C,KAAKo+C,EAC7B,KAGGD,EAAsBv+C,OACzB,OAIF,IAAI+/C,EACJ,IACEA,GAAoBC,EAAAA,GAAAA,GAA2BzB,EACjD,CAAE,MAAO/zB,GACP9b,QAAQoI,IAAI0T,EACd,CAEKu1B,GAILxB,EAAsBr+C,SAAQ,CAACs+C,EAAkBhpC,KAC/C/F,GAAiBwwC,kBAAkBlqC,EAASP,GAAQ,gBAAiBuqC,EAAkBvqC,GAAO,GAC9F,EC7CJ,GA3BqD,CAInD2L,GAAE,GACF++B,gBDXa,SAAa17C,GAAgD,IAA/C,gBAAEqb,EAAe,cAAE3D,EAAgB,CAAC,GAAG1X,EAClE,MAAM,iBAAE0sC,GAAqBrxB,EAAgBE,SAE7CnL,EAAAA,mBAAmBgM,UAAUhM,EAAAA,mBAAmByE,OAAO4B,gBAAiBqjC,IAIxE1pC,EAAAA,mBAAmBgM,UAAUhM,EAAAA,mBAAmByE,OAAO8mC,eAAgB7B,IAKvEpN,EAAiBkP,SAAS,oBAAqB,CAAEC,iBAAiB,IAOlEnP,EAAiBkP,SAAS,wBAAyB,CAAEC,iBAAiB,IAItEnP,EAAiBkP,SAAS,+BAAgC,CACxDC,iBAAiB,IAMnBnP,EAAiBkP,SAAS,wBAAyB,CAAEC,iBAAiB,IAKtEnP,EAAiBkP,SAAS,sBAAuB,CAAEC,iBAAiB,GACtE,ECxBEC,qBAAoB,GACpBC,wBClBa,SAAA/7C,GAAkF,IAAxE,gBAAEqb,EAAe,iBAAE9C,EAAgB,gBAAE0J,EAAe,eAAE5E,GAAgBrd,EAW7F,MAAO,CAGL,CACE2F,KAAM,eACNgX,GAAI,eACJuG,UAhBJ,SAAkCoa,GAChC,OAAOtb,GAAa,CAClB3G,kBACA9C,mBACA0J,kBACA5E,oBACGigB,GAEP,GAWF,EDDE0e,eAAc,GACdC,yBAAwB,GACxBC,yBAAwB,GACxBC,iBExBa,SAAyBn8C,GAAuC,IAAtC,gBAAEiiB,EAAe,gBAAE5G,GAAiBrb,EAC3E,MAAO,CACL,CACE2F,KAAM,eACNy2C,iBAAkBhgB,GAClBigB,aAAcA,QAEhB,CACE12C,KAAM,cACNy2C,iBAAkB3c,GAClB4c,aAAcA,QAEhB,CACE12C,KAAM,kBACNy2C,iBAAkB3c,GAClB4c,aAAcA,QAEhB,CACE12C,KAAM,mBACNy2C,iBAAkBze,GAClB0e,aAAcA,QAEhB,CACE12C,KAAM,sBACNy2C,iBAAkBE,GAClBD,aAAcA,CAAC1uB,EAAK4uB,EAAYC,KAAlBH,GAEhB,CACE12C,KAAM,cACNy2C,iBAAkB3c,GAClB4c,aAAcA,QAGpB,EFREI,kBAAiB,GACjBC,gBAAAA,CAAgB18C,GAAsB,IAArB,gBAAEqb,GAAiBrb,EAClC,MAAO,CACL,CACE2F,KAAM,SACNglB,QAAS,CACP9F,0BAAyBA,KAIjC,EAEA83B,uBG3Ba,SAA+B38C,GAAwC,IAAvC,gBAAEqb,EAAe,iBAAE9C,GAAkBvY,EAClF,MAAO,CACL,CACE2F,KAAM,YACNlI,MAAO,CACLkf,GAAI,eACJigC,OAAQ,CACN,CACEvkC,KAAM,UACNoM,SAAUA,IAAMhI,GAAAA,cAAA,MAAIuH,MAAO,CAAEqH,MAAO,UAAW,0BAOvD,CACE1lB,KAAM,cACNlI,MAAO,CACLkf,GAAI,eACJigC,OAAQ,CACN,CACEvkC,KAAM,eACNoM,SAAUo4B,OAMlB,CACEl3C,KAAM,UACNlI,MAAO,CAqCL,CACEkf,GAAI,mBACJ2B,QAAS,SAAUgf,GACjB,GAAI37B,KAAKm7C,YAAcn7C,KAAKm7C,UAAUxf,GACpC,OAAO,KAGT,MAAM,SAAEr9B,GAAaq9B,EACf7/B,EACJwC,GAAY0B,KAAK4wC,UACbtyC,EAAS0B,KAAK4wC,WACd5wC,KAAKo7C,UAAqC,mBAAlBp7C,KAAKo7C,SAC7Bp7C,KAAKo7C,SAASzf,GACd,KACN,OAAK7/B,EAKHgf,GAAAA,cAAA,QACEK,UAAU,6BACVkH,MAAO,CAAEqH,MAAO1pB,KAAK0pB,YAAStuB,GAC9BohB,MAAOxc,KAAKwc,OAAS,IAEpBxc,KAAK2hB,OAAS7G,GAAAA,cAAA,QAAMK,UAAU,iBAAiBnb,KAAK2hB,OACrD7G,GAAAA,cAAA,QAAMK,UAAU,cAAcrf,IAVzB,IAaX,GAGF,CACEkf,GAAI,mBAMJqgC,UAAW,SAAUvQ,GAEnB,MAAMwQ,EAAe,IAAKt7C,MAC1Bs7C,EAAard,MAAQj+B,KAAKi+B,MAAMl8B,KAAIq8B,IAAQ,IAAMA,MAElD,IAAK,MAAMA,KAAQkd,EAAard,MAAO,CACrC,MAAQ7B,MAAOmf,GAAkBnd,EACjCA,EAAKhC,MAAQ,GACb,IAAK,MAAMx2B,KAAQ21C,EACjBnd,EAAKhC,MAAMniC,KAAK6wC,EAAqBuQ,UAAUz1C,GAEnD,CACA,OAAO01C,CACT,GAGF,CAEEtgC,GAAI,wCACJuG,UAAWi6B,GAAiCn6C,KAAK,KAAM,CACrDqY,kBACA9C,sBAIJ,CAEEoE,GAAI,yCACJq6B,QAAU52B,GACR,IAAIw3B,GACFx3B,EACA/E,EACA9C,MAMd,E","sources":["webpack:///../../../extensions/default/src/DicomWebDataSource/qido.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getWADORSImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoader.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderSync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderAsync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/retrieveMetadataFiltered.js","webpack:///../../../extensions/default/src/DicomWebDataSource/retrieveStudyMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/StaticWadoClient.ts","webpack:///../../../extensions/default/src/utils/getDirectURL.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/fixBulkDataURI.ts","webpack:///../../../extensions/default/src/DicomWebDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebDataSource/dcm4cheeReject.js","webpack:///../../../extensions/default/src/DicomJSONDataSource/index.js","webpack:///../../../extensions/default/src/DicomLocalDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebProxyDataSource/index.js","webpack:///../../../extensions/default/src/MergeDataSource/index.ts","webpack:///../../../extensions/default/src/getDataSourcesModule.js","webpack:///../../../extensions/default/src/Toolbar/Toolbar.tsx","webpack:///../../../extensions/default/src/ViewerLayout/ViewerHeader.tsx","webpack:///../../../extensions/default/src/Components/SidePanelWithServices.tsx","webpack:///../../../extensions/default/src/ViewerLayout/index.tsx","webpack:///../../../extensions/default/src/Panels/PanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/getImageSrcFromImageId.js","webpack:///../../../extensions/default/src/Panels/getStudiesForPatientByMRN.js","webpack:///../../../extensions/default/src/Panels/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/default/src/Panels/WrappedPanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/ActionButtons.tsx","webpack:///../../../extensions/default/src/Panels/createReportDialogPrompt.tsx","webpack:///../../../extensions/default/src/Actions/createReportAsync.tsx","webpack:///../../../extensions/default/src/utils/getNextSRSeriesNumber.js","webpack:///../../../extensions/default/src/utils/findSRWithSameSeriesDescription.ts","webpack:///../../../extensions/default/src/Panels/PanelMeasurementTable.tsx","webpack:///../../../extensions/default/src/getPanelModule.tsx","webpack:///../../../extensions/default/src/id.js","webpack:///../../../extensions/default/src/utils/validations/areAllImagePositionsEqual.ts","webpack:///../../../extensions/default/src/utils/calculateScanAxisNormal.ts","webpack:///../../../extensions/default/src/utils/validations/checkSingleFrames.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageDimensionsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageComponentsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageOrientationsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageSpacingEqual.ts","webpack:///../../../extensions/default/src/getDisplaySetMessages.ts","webpack:///../../../extensions/default/src/utils/validations/checkMultiframe.ts","webpack:///../../../extensions/default/src/getDisplaySetsFromUnsupportedSeries.js","webpack:///../../../extensions/default/src/getSopClassHandlerModule.js","webpack:///../../../extensions/default/src/Toolbar/ToolbarDivider.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarLayoutSelector.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarSplitButtonWithServices.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarButtonWithServices.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuItemsBuilder.ts","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuController.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/defaultContextMenu.ts","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagTable.tsx","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagBrowser.tsx","webpack:///../../../extensions/default/src/utils/reuseCachedLayouts.ts","webpack:///../../../extensions/default/src/findViewportsByPosition.ts","webpack:///../../../extensions/default/src/commandsModule.ts","webpack:///../../../extensions/default/src/hpMNGrid.ts","webpack:///../../../extensions/default/src/hpCompare.ts","webpack:///../../../extensions/default/src/getHangingProtocolModule.js","webpack:///../../../extensions/default/src/Panels/DataSourceSelector.tsx","webpack:///../../../extensions/default/src/Components/ItemListComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationModalComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationComponent.tsx","webpack:///../../../extensions/default/src/DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI.ts","webpack:///../../../extensions/default/src/getPTImageIdInstanceMetadata.ts","webpack:///../../../extensions/default/src/init.ts","webpack:///../../../extensions/default/src/index.ts","webpack:///../../../extensions/default/src/getLayoutTemplateModule.js","webpack:///../../../extensions/default/src/getToolbarModule.tsx","webpack:///../../../extensions/default/src/getCustomizationModule.tsx"],"sourcesContent":["/**\n * QIDO - Query based on ID for DICOM Objects\n * search for studies, series and instances by patient ID, and receive their\n * unique identifiers for further usage.\n *\n * Quick: https://www.dicomstandard.org/dicomweb/query-qido-rs/\n * Standard: http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6\n *\n * Routes:\n * ==========\n * /studies?\n * /studies/{studyInstanceUid}/series?\n * /studies/{studyInstanceUid}/series/{seriesInstanceUid}/instances?\n *\n * Query Parameters:\n * ================\n * | KEY              | VALUE              |\n * |------------------|--------------------|\n * | {attributeId}    | {value}            |\n * | includeField     | {attribute} or all |\n * | fuzzymatching    | true OR false      |\n * | limit            | {number}           |\n * | offset           | {number}           |\n */\nimport { DICOMWeb, utils } from '@ohif/core';\nimport { sortStudySeries } from '@ohif/core/src/utils/sortStudy';\n\nconst { getString, getName, getModalities } = DICOMWeb;\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param {Array} qidoStudies - An array of study objects. Each object contains a keys for DICOM tags.\n * @param {object} qidoStudies[0].qidoStudy - An object where each key is the DICOM Tag group+element\n * @param {object} qidoStudies[0].qidoStudy[dicomTag] - Optional object that represents DICOM Tag\n * @param {string} qidoStudies[0].qidoStudy[dicomTag].vr - Value Representation\n * @param {string[]} qidoStudies[0].qidoStudy[dicomTag].Value - Optional string array representation of the DICOM Tag's value\n * @returns {Array} An array of Study MetaData objects\n */\nfunction processResults(qidoStudies) {\n  if (!qidoStudies || !qidoStudies.length) {\n    return [];\n  }\n\n  const studies = [];\n\n  qidoStudies.forEach(qidoStudy =>\n    studies.push({\n      studyInstanceUid: getString(qidoStudy['0020000D']),\n      date: getString(qidoStudy['00080020']), // YYYYMMDD\n      time: getString(qidoStudy['00080030']), // HHmmss.SSS (24-hour, minutes, seconds, fractional seconds)\n      accession: getString(qidoStudy['00080050']) || '', // short string, probably a number?\n      mrn: getString(qidoStudy['00100020']) || '', // medicalRecordNumber\n      patientName: utils.formatPN(getName(qidoStudy['00100010'])) || '',\n      instances: Number(getString(qidoStudy['00201208'])) || 0, // number\n      description: getString(qidoStudy['00081030']) || '',\n      modalities: getString(getModalities(qidoStudy['00080060'], qidoStudy['00080061'])) || '',\n    })\n  );\n\n  return studies;\n}\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param {Array} qidoSeries - An array of study objects. Each object contains a keys for DICOM tags.\n * @param {object} qidoSeries[0].qidoSeries - An object where each key is the DICOM Tag group+element\n * @param {object} qidoSeries[0].qidoSeries[dicomTag] - Optional object that represents DICOM Tag\n * @param {string} qidoSeries[0].qidoSeries[dicomTag].vr - Value Representation\n * @param {string[]} qidoSeries[0].qidoSeries[dicomTag].Value - Optional string array representation of the DICOM Tag's value\n * @returns {Array} An array of Study MetaData objects\n */\nexport function processSeriesResults(qidoSeries) {\n  const series = [];\n\n  if (qidoSeries && qidoSeries.length) {\n    qidoSeries.forEach(qidoSeries =>\n      series.push({\n        studyInstanceUid: getString(qidoSeries['0020000D']),\n        seriesInstanceUid: getString(qidoSeries['0020000E']),\n        modality: getString(qidoSeries['00080060']),\n        seriesNumber: getString(qidoSeries['00200011']),\n        seriesDate: utils.formatDate(getString(qidoSeries['00080021'])),\n        numSeriesInstances: Number(getString(qidoSeries['00201209'])),\n        description: getString(qidoSeries['0008103E']),\n      })\n    );\n  }\n\n  sortStudySeries(series);\n\n  return series;\n}\n\n/**\n *\n * @param {object} dicomWebClient - Client similar to what's provided by `dicomweb-client` library\n * @param {function} dicomWebClient.searchForStudies -\n * @param {string} [studyInstanceUid]\n * @param {string} [seriesInstanceUid]\n * @param {string} [queryParamaters]\n * @returns {Promise<results>} - Promise that resolves results\n */\nasync function search(dicomWebClient, studyInstanceUid, seriesInstanceUid, queryParameters) {\n  let searchResult = await dicomWebClient.searchForStudies({\n    studyInstanceUid: undefined,\n    queryParams: queryParameters,\n  });\n\n  return searchResult;\n}\n\n/**\n *\n * @param {string} studyInstanceUID - ID of study to return a list of series for\n * @returns {Promise} - Resolves SeriesMetadata[] in study\n */\nexport function seriesInStudy(dicomWebClient, studyInstanceUID) {\n  // Series Description\n  // Already included?\n  const commaSeparatedFields = ['0008103E', '00080021'].join(',');\n  const queryParams = {\n    includefield: commaSeparatedFields,\n  };\n\n  return dicomWebClient.searchForSeries({ studyInstanceUID, queryParams });\n}\n\nexport default function searchStudies(server, filter) {\n  const queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\n  const options = {\n    queryParams,\n  };\n\n  return dicomWeb.searchForStudies(options).then(resultDataToStudies);\n}\n\n/**\n * Produces a QIDO URL given server details and a set of specified search filter\n * items\n *\n * @param filter\n * @param serverSupportsQIDOIncludeField\n * @returns {string} The URL with encoded filter query data\n */\nfunction mapParams(params, options = {}) {\n  if (!params) {\n    return;\n  }\n  const commaSeparatedFields = [\n    '00081030', // Study Description\n    '00080060', // Modality\n    // Add more fields here if you want them in the result\n  ].join(',');\n\n  const { supportsWildcard } = options;\n  const withWildcard = value => {\n    return supportsWildcard && value ? `*${value}*` : value;\n  };\n\n  const parameters = {\n    // Named\n    PatientName: withWildcard(params.patientName),\n    //PatientID: withWildcard(params.patientId),\n    '00100020': withWildcard(params.patientId), // Temporarily to make the tests pass with dicomweb-server.. Apparently it's broken?\n    AccessionNumber: withWildcard(params.accessionNumber),\n    StudyDescription: withWildcard(params.studyDescription),\n    ModalitiesInStudy: params.modalitiesInStudy,\n    // Other\n    limit: params.limit || 101,\n    offset: params.offset || 0,\n    fuzzymatching: options.supportsFuzzyMatching === true,\n    includefield: commaSeparatedFields, // serverSupportsQIDOIncludeField ? commaSeparatedFields : 'all',\n  };\n\n  // build the StudyDate range parameter\n  if (params.startDate && params.endDate) {\n    parameters.StudyDate = `${params.startDate}-${params.endDate}`;\n  } else if (params.startDate) {\n    const today = new Date();\n    const DD = String(today.getDate()).padStart(2, '0');\n    const MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const YYYY = today.getFullYear();\n    const todayStr = `${YYYY}${MM}${DD}`;\n\n    parameters.StudyDate = `${params.startDate}-${todayStr}`;\n  } else if (params.endDate) {\n    const oldDateStr = `19700102`;\n\n    parameters.StudyDate = `${oldDateStr}-${params.endDate}`;\n  }\n\n  // Build the StudyInstanceUID parameter\n  if (params.studyInstanceUid) {\n    let studyUids = params.studyInstanceUid;\n    studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\n    studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\n    parameters.StudyInstanceUID = studyUids;\n  }\n\n  // Clean query params of undefined values.\n  const final = {};\n  Object.keys(parameters).forEach(key => {\n    if (parameters[key] !== undefined && parameters[key] !== '') {\n      final[key] = parameters[key];\n    }\n  });\n\n  return final;\n}\n\nexport { mapParams, search, processResults };\n","import getWADORSImageId from './getWADORSImageId';\n\nfunction buildInstanceWadoUrl(config, instance) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  const params = [];\n\n  params.push('requestType=WADO');\n  params.push(`studyUID=${StudyInstanceUID}`);\n  params.push(`seriesUID=${SeriesInstanceUID}`);\n  params.push(`objectUID=${SOPInstanceUID}`);\n  params.push('contentType=application/dicom');\n  params.push('transferSyntax=*');\n\n  const paramString = params.join('&');\n\n  return `${config.wadoUriRoot}?${paramString}`;\n}\n\n/**\n * Obtain an imageId for Cornerstone from an image instance\n *\n * @param instance\n * @param frame\n * @param thumbnail\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getImageId({ instance, frame, config, thumbnail = false }) {\n  if (!instance) {\n    return;\n  }\n\n  if (instance.url) {\n    return instance.url;\n  }\n\n  const renderingAttr = thumbnail ? 'thumbnailRendering' : 'imageRendering';\n\n  if (!config[renderingAttr] || config[renderingAttr] === 'wadouri') {\n    const wadouri = buildInstanceWadoUrl(config, instance);\n\n    let imageId = 'dicomweb:' + wadouri;\n    if (frame !== undefined) {\n      imageId += '&frame=' + frame;\n    }\n\n    return imageId;\n  } else {\n    return getWADORSImageId(instance, config, frame); // WADO-RS Retrieve Frame\n  }\n}\n","function buildInstanceWadoRsUri(instance, config) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  return `${config.wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}`;\n}\n\nfunction buildInstanceFrameWadoRsUri(instance, config, frame) {\n  const baseWadoRsUri = buildInstanceWadoRsUri(instance, config);\n\n  frame = frame || 1;\n\n  return `${baseWadoRsUri}/frames/${frame}`;\n}\n\n// function getWADORSImageUrl(instance, frame) {\n//   const wadorsuri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n//   if (!wadorsuri) {\n//     return;\n//   }\n\n//   // Use null to obtain an imageId which represents the instance\n//   if (frame === null) {\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, '');\n//   } else {\n//     // We need to sum 1 because WADO-RS frame number is 1-based\n//     frame = frame ? parseInt(frame) + 1 : 1;\n\n//     // Replaces /frame/1 by /frame/{frame}\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, `frames/${frame}`);\n//   }\n\n//   return wadorsuri;\n// }\n\n/**\n * Obtain an imageId for Cornerstone based on the WADO-RS scheme\n *\n * @param {object} instanceMetada metadata object (InstanceMetadata)\n * @param {(string\\|number)} [frame] the frame number\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getWADORSImageId(instance, config, frame) {\n  //const uri = getWADORSImageUrl(instance, frame);\n  const uri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n  if (!uri) {\n    return;\n  }\n\n  return `wadors:${uri}`;\n}\n","/**\n * Class to define inheritance of load retrieve strategy.\n * The process can be async load (lazy) or sync load\n *\n * There are methods that must be implemented at consumer level\n * To retrieve study call execLoad\n */\nexport default class RetrieveMetadataLoader {\n  /**\n   * @constructor\n   * @param {Object} client The dicomweb-client.\n   * @param {Array} studyInstanceUID Study instance ui to be retrieved\n   * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   * @param {Function} [sortSeries] - Custom sort function for series\n   */\n  constructor(client, studyInstanceUID, filters = {}, sortCriteria, sortFunction) {\n    this.client = client;\n    this.studyInstanceUID = studyInstanceUID;\n    this.filters = filters;\n    this.sortCriteria = sortCriteria;\n    this.sortFunction = sortFunction;\n  }\n\n  async execLoad() {\n    const preLoadData = await this.preLoad();\n    const loadData = await this.load(preLoadData);\n    const postLoadData = await this.posLoad(loadData);\n\n    return postLoadData;\n  }\n\n  /**\n   * It iterates over given loaders running each one. Loaders parameters must be bind when getting it.\n   * @param {Array} loaders - array of loader to retrieve data.\n   */\n  async runLoaders(loaders) {\n    let result;\n    for (const loader of loaders) {\n      try {\n        result = await loader();\n        if (result && result.length) {\n          break; // closes iterator in case data is retrieved successfully\n        }\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    if (loaders.next().done && !result) {\n      throw new Error('RetrieveMetadataLoader failed');\n    }\n\n    return result;\n  }\n\n  // Methods to be overwrite\n  async configLoad() {}\n  async preLoad() {}\n  async load(preLoadData) {}\n  async posLoad(loadData) {}\n}\n","// import { api } from 'dicomweb-client';\n// import DICOMWeb from '../../../DICOMWeb/';\nimport { createStudyFromSOPInstanceList } from './studyInstanceHelpers';\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\n\n/**\n * Class for sync load of study metadata.\n * It inherits from RetrieveMetadataLoader\n *\n * A list of loaders (getLoaders) can be created so, it will be applied a fallback load strategy.\n * I.e Retrieve metadata using all loaders possibilities.\n */\nexport default class RetrieveMetadataLoaderSync extends RetrieveMetadataLoader {\n  getOptions() {\n    const { studyInstanceUID, filters } = this;\n\n    const options = {\n      studyInstanceUID,\n    };\n\n    const { seriesInstanceUID } = filters;\n    if (seriesInstanceUID) {\n      options['seriesInstanceUID'] = seriesInstanceUID;\n    }\n\n    return options;\n  }\n\n  /**\n   * @returns {Array} Array of loaders. To be consumed as queue\n   */\n  *getLoaders() {\n    const loaders = [];\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\n\n    if (seriesInstanceUID) {\n      loaders.push(\n        client.retrieveSeriesMetadata.bind(client, {\n          studyInstanceUID,\n          seriesInstanceUID,\n        })\n      );\n    }\n\n    loaders.push(client.retrieveStudyMetadata.bind(client, { studyInstanceUID }));\n\n    yield* loaders;\n  }\n\n  async load(preLoadData) {\n    const loaders = this.getLoaders();\n    const result = this.runLoaders(loaders);\n    return result;\n  }\n\n  async posLoad(loadData) {\n    return loadData;\n  }\n}\n","import dcmjs from 'dcmjs';\nimport { sortStudySeries, sortingCriteria } from '@ohif/core/src/utils/sortStudy';\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\n\n/**\n * Creates an immutable series loader object which loads each series sequentially using the iterator interface.\n *\n * @param {DICOMWebClient} dicomWebClient The DICOMWebClient instance to be used for series load\n * @param {string} studyInstanceUID The Study Instance UID from which series will be loaded\n * @param {Array} seriesInstanceUIDList A list of Series Instance UIDs\n *\n * @returns {Object} Returns an object which supports loading of instances from each of given Series Instance UID\n */\nfunction makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDList) {\n  return Object.freeze({\n    hasNext() {\n      return seriesInstanceUIDList.length > 0;\n    },\n    async next() {\n      const seriesInstanceUID = seriesInstanceUIDList.shift();\n      return client.retrieveSeriesMetadata({\n        studyInstanceUID,\n        seriesInstanceUID,\n      });\n    },\n  });\n}\n\n/**\n * Class for async load of study metadata.\n * It inherits from RetrieveMetadataLoader\n *\n * It loads the one series and then append to seriesLoader the others to be consumed/loaded\n */\nexport default class RetrieveMetadataLoaderAsync extends RetrieveMetadataLoader {\n  /**\n   * @returns {Array} Array of preLoaders. To be consumed as queue\n   */\n  *getPreLoaders() {\n    const preLoaders = [];\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\n\n    if (seriesInstanceUID) {\n      const options = {\n        studyInstanceUID,\n        queryParams: { SeriesInstanceUID: seriesInstanceUID },\n      };\n      preLoaders.push(client.searchForSeries.bind(client, options));\n    }\n    // Fallback preloader\n    preLoaders.push(client.searchForSeries.bind(client, { studyInstanceUID }));\n\n    yield* preLoaders;\n  }\n\n  async preLoad() {\n    const preLoaders = this.getPreLoaders();\n    const result = await this.runLoaders(preLoaders);\n    const sortCriteria = this.sortCriteria;\n    const sortFunction = this.sortFunction;\n\n    const { naturalizeDataset } = dcmjs.data.DicomMetaDictionary;\n    const naturalized = result.map(naturalizeDataset);\n\n    return sortStudySeries(\n      naturalized,\n      sortCriteria || sortingCriteria.seriesSortCriteria.seriesInfoSortingCriteria,\n      sortFunction\n    );\n  }\n\n  async load(preLoadData) {\n    const { client, studyInstanceUID } = this;\n\n    const seriesInstanceUIDs = preLoadData.map(s => s.SeriesInstanceUID);\n\n    const seriesAsyncLoader = makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDs);\n\n    const promises = [];\n\n    while (seriesAsyncLoader.hasNext()) {\n      promises.push(seriesAsyncLoader.next());\n    }\n\n    return {\n      preLoadData,\n      promises,\n    };\n  }\n\n  async posLoad({ preLoadData, promises }) {\n    return {\n      preLoadData,\n      promises,\n    };\n  }\n}\n","import RetrieveMetadataLoaderSync from './retrieveMetadataLoaderSync';\nimport RetrieveMetadataLoaderAsync from './retrieveMetadataLoaderAsync';\n\n/**\n * Retrieve Study metadata from a DICOM server. If the server is configured to use lazy load, only the first series\n * will be loaded and the property \"studyLoader\" will be set to let consumer load remaining series as needed.\n *\n * @param {*} dicomWebClient The DICOMWebClient instance to be used for series load\n * @param {*} StudyInstanceUID The UID of the Study to be retrieved\n * @param {*} enableStudyLazyLoad Whether the study metadata should be loaded asynchronously\n * @param {object} filters Object containing filters to be applied on retrieve metadata process\n * @param {string} [filters.seriesInstanceUID] Series instance uid to filter results against\n * @param {array} [filters.SeriesInstanceUIDs] Series instance uids to filter results against\n * @param {function} [sortCriteria] Sort criteria function\n * @param {function} [sortFunction] Sort function\n *\n * @returns {Promise} A promises that resolves the study descriptor object\n */\nasync function RetrieveMetadata(\n  dicomWebClient,\n  StudyInstanceUID,\n  enableStudyLazyLoad,\n  filters = {},\n  sortCriteria,\n  sortFunction\n) {\n  const RetrieveMetadataLoader =\n    enableStudyLazyLoad !== false ? RetrieveMetadataLoaderAsync : RetrieveMetadataLoaderSync;\n\n  const retrieveMetadataLoader = new RetrieveMetadataLoader(\n    dicomWebClient,\n    StudyInstanceUID,\n    filters,\n    sortCriteria,\n    sortFunction\n  );\n  const data = await retrieveMetadataLoader.execLoad();\n\n  return data;\n}\n\nexport default RetrieveMetadata;\n","import RetrieveMetadata from '../wado/retrieveMetadata';\n\n/**\n * Retrieve metadata filtered.\n *\n * @param {*} dicomWebClient The DICOMWebClient instance to be used for series load\n * @param {*} StudyInstanceUID The UID of the Study to be retrieved\n * @param {*} enableStudyLazyLoad Whether the study metadata should be loaded asynchronously\n * @param {object} filters Object containing filters to be applied on retrieve metadata process\n * @param {string} [filters.seriesInstanceUID] Series instance uid to filter results against\n * @param {array} [filters.SeriesInstanceUIDs] Series instance uids to filter results against\n * @param {function} [sortCriteria] Sort criteria function\n * @param {function} [sortFunction] Sort function\n *\n * @returns\n */\nfunction retrieveMetadataFiltered(\n  dicomWebClient,\n  StudyInstanceUID,\n  enableStudyLazyLoad,\n  filters,\n  sortCriteria,\n  sortFunction\n) {\n  const { SeriesInstanceUIDs } = filters;\n\n  return new Promise((resolve, reject) => {\n    const promises = SeriesInstanceUIDs.map(uid => {\n      const seriesSpecificFilters = Object.assign({}, filters, {\n        seriesInstanceUID: uid,\n      });\n\n      return RetrieveMetadata(\n        dicomWebClient,\n        StudyInstanceUID,\n        enableStudyLazyLoad,\n        seriesSpecificFilters,\n        sortCriteria,\n        sortFunction\n      );\n    });\n\n    Promise.all(promises).then(results => {\n      const aggregatedResult = { preLoadData: [], promises: [] };\n\n      results.forEach(({ preLoadData, promises }) => {\n        aggregatedResult.preLoadData = aggregatedResult.preLoadData.concat(preLoadData);\n        aggregatedResult.promises = aggregatedResult.promises.concat(promises);\n      });\n\n      resolve(aggregatedResult);\n    }, reject);\n  });\n}\n\nexport default retrieveMetadataFiltered;\n","import retrieveMetadataFiltered from './utils/retrieveMetadataFiltered.js';\nimport RetrieveMetadata from './wado/retrieveMetadata.js';\n\nconst moduleName = 'RetrieveStudyMetadata';\n// Cache for promises. Prevents unnecessary subsequent calls to the server\nconst StudyMetaDataPromises = new Map();\n\n/**\n * Retrieves study metadata.\n *\n * @param {Object} dicomWebClient The DICOMWebClient instance to be used for series load\n * @param {string} StudyInstanceUID The UID of the Study to be retrieved\n * @param {boolean} enableStudyLazyLoad Whether the study metadata should be loaded asynchronously.\n * @param {Object} [filters] Object containing filters to be applied on retrieve metadata process\n * @param {string} [filters.seriesInstanceUID] Series instance uid to filter results against\n * @param {array} [filters.SeriesInstanceUIDs] Series instance uids to filter results against\n * @param {function} [sortCriteria] Sort criteria function\n * @param {function} [sortFunction] Sort function\n *\n * @returns {Promise} that will be resolved with the metadata or rejected with the error\n */\nexport function retrieveStudyMetadata(\n  dicomWebClient,\n  StudyInstanceUID,\n  enableStudyLazyLoad,\n  filters,\n  sortCriteria,\n  sortFunction,\n  dicomWebConfig = {}\n) {\n  // @TODO: Whenever a study metadata request has failed, its related promise will be rejected once and for all\n  // and further requests for that metadata will always fail. On failure, we probably need to remove the\n  // corresponding promise from the \"StudyMetaDataPromises\" map...\n\n  if (!dicomWebClient) {\n    throw new Error(`${moduleName}: Required 'dicomWebClient' parameter not provided.`);\n  }\n  if (!StudyInstanceUID) {\n    throw new Error(`${moduleName}: Required 'StudyInstanceUID' parameter not provided.`);\n  }\n\n  const promiseId = `${dicomWebConfig.name}:${StudyInstanceUID}`;\n\n  // Already waiting on result? Return cached promise\n  if (StudyMetaDataPromises.has(promiseId)) {\n    return StudyMetaDataPromises.get(promiseId);\n  }\n\n  let promise;\n\n  if (filters && filters.SeriesInstanceUIDs) {\n    promise = retrieveMetadataFiltered(\n      dicomWebClient,\n      StudyInstanceUID,\n      enableStudyLazyLoad,\n      filters,\n      sortCriteria,\n      sortFunction\n    );\n  } else {\n    // Create a promise to handle the data retrieval\n    promise = new Promise((resolve, reject) => {\n      RetrieveMetadata(\n        dicomWebClient,\n        StudyInstanceUID,\n        enableStudyLazyLoad,\n        filters,\n        sortCriteria,\n        sortFunction\n      ).then(function (data) {\n        resolve(data);\n      }, reject);\n    });\n  }\n\n  // Store the promise in cache\n  StudyMetaDataPromises.set(promiseId, promise);\n\n  return promise;\n}\n\n/**\n * Delete the cached study metadata retrieval promise to ensure that the browser will\n * re-retrieve the study metadata when it is next requested.\n *\n * @param {String} StudyInstanceUID The UID of the Study to be removed from cache\n */\nexport function deleteStudyMetadataPromise(StudyInstanceUID) {\n  if (StudyMetaDataPromises.has(StudyInstanceUID)) {\n    StudyMetaDataPromises.delete(StudyInstanceUID);\n  }\n}\n","import { api } from 'dicomweb-client';\n\n/**\n * An implementation of the static wado client, that fetches data from\n * a static response rather than actually doing real queries.  This allows\n * fast encoding of test data, but because it is static, anything actually\n * performing searches doesn't work.  This version fixes the query issue\n * by manually implementing a query option.\n */\nexport default class StaticWadoClient extends api.DICOMwebClient {\n  static studyFilterKeys = {\n    studyinstanceuid: '0020000D',\n    patientname: '00100010',\n    '00100020': 'mrn',\n    studydescription: '00081030',\n    studydate: '00080020',\n    modalitiesinstudy: '00080061',\n    accessionnumber: '00080050',\n  };\n\n  static seriesFilterKeys = {\n    seriesinstanceuid: '0020000E',\n    seriesnumber: '00200011',\n    modality: '00080060',\n  };\n\n  constructor(qidoConfig) {\n    super(qidoConfig);\n    this.staticWado = qidoConfig.staticWado;\n  }\n\n  /**\n   * Replace the search for studies remote query with a local version which\n   * retrieves a complete query list and then sub-selects from it locally.\n   * @param {*} options\n   * @returns\n   */\n  async searchForStudies(options) {\n    if (!this.staticWado) {\n      return super.searchForStudies(options);\n    }\n\n    const searchResult = await super.searchForStudies(options);\n    const { queryParams } = options;\n\n    if (!queryParams) {\n      return searchResult;\n    }\n\n    const lowerParams = this.toLowerParams(queryParams);\n    const filtered = searchResult.filter(study => {\n      for (const key of Object.keys(StaticWadoClient.studyFilterKeys)) {\n        if (!this.filterItem(key, lowerParams, study, StaticWadoClient.studyFilterKeys)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return filtered;\n  }\n\n  async searchForSeries(options) {\n    if (!this.staticWado) {\n      return super.searchForSeries(options);\n    }\n\n    const searchResult = await super.searchForSeries(options);\n    const { queryParams } = options;\n    if (!queryParams) {\n      return searchResult;\n    }\n    const lowerParams = this.toLowerParams(queryParams);\n\n    const filtered = searchResult.filter(series => {\n      for (const key of Object.keys(StaticWadoClient.seriesFilterKeys)) {\n        if (!this.filterItem(key, lowerParams, series, StaticWadoClient.seriesFilterKeys)) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Compares values, matching any instance of desired to any instance of\n   * actual by recursively go through the paired set of values.  That is,\n   * this is O(m*n) where m is how many items in desired and n is the length of actual\n   * Then, at the individual item node, compares the Alphabetic name if present,\n   * and does a sub-string matching on string values, and otherwise does an\n   * exact match comparison.\n   *\n   * @param {*} desired\n   * @param {*} actual\n   * @returns true if the values match\n   */\n  compareValues(desired, actual) {\n    if (Array.isArray(desired)) {\n      return desired.find(item => this.compareValues(item, actual));\n    }\n    if (Array.isArray(actual)) {\n      return actual.find(actualItem => this.compareValues(desired, actualItem));\n    }\n    if (actual?.Alphabetic) {\n      actual = actual.Alphabetic;\n    }\n    if (typeof actual == 'string') {\n      if (actual.length === 0) {\n        return true;\n      }\n      if (desired.length === 0 || desired === '*') {\n        return true;\n      }\n      if (desired[0] === '*' && desired[desired.length - 1] === '*') {\n        // console.log(`Comparing ${actual} to ${desired.substring(1, desired.length - 1)}`)\n        return actual.indexOf(desired.substring(1, desired.length - 1)) != -1;\n      } else if (desired[desired.length - 1] === '*') {\n        return actual.indexOf(desired.substring(0, desired.length - 1)) != -1;\n      } else if (desired[0] === '*') {\n        return actual.indexOf(desired.substring(1)) === actual.length - desired.length + 1;\n      }\n    }\n    return desired === actual;\n  }\n\n  /** Compares a pair of dates to see if the value is within the range */\n  compareDateRange(range, value) {\n    if (!value) {\n      return true;\n    }\n    const dash = range.indexOf('-');\n    if (dash === -1) {\n      return this.compareValues(range, value);\n    }\n    const start = range.substring(0, dash);\n    const end = range.substring(dash + 1);\n    return (!start || value >= start) && (!end || value <= end);\n  }\n\n  /**\n   * Filters the return list by the query parameters.\n   *\n   * @param anyCaseKey - a possible search key\n   * @param queryParams -\n   * @param {*} study\n   * @param {*} sourceFilterMap\n   * @returns\n   */\n  filterItem(key: string, queryParams, study, sourceFilterMap) {\n    const altKey = sourceFilterMap[key] || key;\n    if (!queryParams) {\n      return true;\n    }\n    const testValue = queryParams[key] || queryParams[altKey];\n    if (!testValue) {\n      return true;\n    }\n    const valueElem = study[key] || study[altKey];\n    if (!valueElem) {\n      return false;\n    }\n    if (valueElem.vr === 'DA' && valueElem.Value?.[0]) {\n      return this.compareDateRange(testValue, valueElem.Value[0]);\n    }\n    const value = valueElem.Value;\n    return this.compareValues(testValue, value);\n  }\n\n  /** Converts the query parameters to lower case query parameters */\n  toLowerParams(queryParams: Record<string, unknown>): Record<string, unknown> {\n    const lowerParams = {};\n    Object.entries(queryParams).forEach(([key, value]) => {\n      lowerParams[key.toLowerCase()] = value;\n    });\n    return lowerParams;\n  }\n}\n","import { utils } from '@ohif/core';\n\n/**\n * Generates a URL that can be used for direct retrieve of the bulkdata\n *\n * @param {object} params\n * @param {string} params.tag is the tag name of the URL to retrieve\n * @param {string} params.defaultPath path for the pixel data url\n * @param {object} params.instance is the instance object that the tag is in\n * @param {string} params.defaultType is the mime type of the response\n * @param {string} params.singlepart is the type of the part to retrieve\n * @param {string} params.fetchPart unknown?\n * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n */\nconst getDirectURL = (config, params) => {\n  const { wadoRoot, singlepart } = config;\n  const {\n    instance,\n    tag = 'PixelData',\n    defaultPath = '/pixeldata',\n    defaultType = 'video/mp4',\n    singlepart: fetchPart = 'video',\n  } = params;\n  const value = instance[tag];\n  if (!value) {\n    return undefined;\n  }\n\n  if (value.DirectRetrieveURL) {\n    return value.DirectRetrieveURL;\n  }\n  if (value.InlineBinary) {\n    const blob = utils.b64toBlob(value.InlineBinary, defaultType);\n    value.DirectRetrieveURL = URL.createObjectURL(blob);\n    return value.DirectRetrieveURL;\n  }\n  if (!singlepart || (singlepart !== true && singlepart.indexOf(fetchPart) === -1)) {\n    if (value.retrieveBulkData) {\n      return value.retrieveBulkData().then(arr => {\n        value.DirectRetrieveURL = URL.createObjectURL(new Blob([arr], { type: defaultType }));\n        return value.DirectRetrieveURL;\n      });\n    }\n    console.warn('Unable to retrieve', tag, 'from', instance);\n    return undefined;\n  }\n\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  const BulkDataURI =\n    (value && value.BulkDataURI) ||\n    `series/${SeriesInstanceUID}/instances/${SOPInstanceUID}${defaultPath}`;\n  const hasQuery = BulkDataURI.indexOf('?') !== -1;\n  const hasAccept = BulkDataURI.indexOf('accept=') !== -1;\n  const acceptUri =\n    BulkDataURI + (hasAccept ? '' : (hasQuery ? '&' : '?') + `accept=${defaultType}`);\n\n  if (tag === 'PixelData' || tag === 'EncapsulatedDocument') {\n    return `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}/rendered`;\n  }\n\n  // The DICOMweb standard states that the default is multipart related, and then\n  // separately states that the accept parameter is the URL parameter equivalent of the accept header.\n  return acceptUri;\n};\n\nexport default getDirectURL;\n","/**\n * Modifies a bulkDataURI to ensure it is absolute based on the DICOMWeb configuration and\n * instance data. The modification is in-place.\n *\n * If the bulkDataURI is relative to the series or study (according to the DICOM standard),\n * it is made absolute by prepending the relevant paths.\n *\n * In scenarios where the bulkDataURI is a server-relative path (starting with '/'), the function\n * handles two cases:\n *\n * 1. If the wado root is absolute (starts with 'http'), it prepends the wado root to the bulkDataURI.\n * 2. If the wado root is relative, no changes are needed as the bulkDataURI is already correctly relative to the server root.\n *\n * @param value - The object containing BulkDataURI to be fixed.\n * @param instance - The object (DICOM instance data) containing StudyInstanceUID and SeriesInstanceUID.\n * @param dicomWebConfig - The DICOMWeb configuration object, containing wadoRoot and potentially bulkDataURI.relativeResolution.\n * @returns The function modifies `value` in-place, it does not return a value.\n */\nfunction fixBulkDataURI(value, instance, dicomWebConfig) {\n  // in case of the relative path, make it absolute. The current DICOM standard says\n  // the bulkdataURI is relative to the series. However, there are situations where\n  // it can be relative to the study too\n  if (!value.BulkDataURI.startsWith('http') && !value.BulkDataURI.startsWith('/')) {\n    if (dicomWebConfig.bulkDataURI?.relativeResolution === 'studies') {\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/${value.BulkDataURI}`;\n    } else if (\n      dicomWebConfig.bulkDataURI?.relativeResolution === 'series' ||\n      !dicomWebConfig.bulkDataURI?.relativeResolution\n    ) {\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/series/${instance.SeriesInstanceUID}/${value.BulkDataURI}`;\n    }\n\n    return;\n  }\n\n  // in case it is relative path but starts at the server (e.g., /bulk/1e, note the missing http\n  // in the beginning and the first character is /) There are two scenarios, whether the wado root\n  // is absolute or relative. In case of absolute, we need to prepend the wado root to the bulkdata\n  // uri (e.g., bulkData: /bulk/1e, wado root: http://myserver.com/dicomweb, output: http://myserver.com/bulk/1e)\n  // and in case of relative wado root, we need to prepend the bulkdata uri to the wado root (e.g,. bulkData: /bulk/1e\n  // wado root: /dicomweb, output: /bulk/1e)\n  if (value.BulkDataURI[0] === '/') {\n    if (dicomWebConfig.wadoRoot.startsWith('http')) {\n      // Absolute wado root\n      const url = new URL(dicomWebConfig.wadoRoot);\n      value.BulkDataURI = `${url.origin}${value.BulkDataURI}`;\n    } else {\n      // Relative wado root, we don't need to do anything, bulkdata uri is already correct\n    }\n  }\n}\n\nexport { fixBulkDataURI };\n","import { api } from 'dicomweb-client';\nimport { DicomMetadataStore, IWebApiDataSource, utils, errorHandler, classes } from '@ohif/core';\n\nimport {\n  mapParams,\n  search as qidoSearch,\n  seriesInStudy,\n  processResults,\n  processSeriesResults,\n} from './qido.js';\nimport dcm4cheeReject from './dcm4cheeReject';\n\nimport getImageId from './utils/getImageId';\nimport dcmjs from 'dcmjs';\nimport { retrieveStudyMetadata, deleteStudyMetadataPromise } from './retrieveStudyMetadata.js';\nimport StaticWadoClient from './utils/StaticWadoClient';\nimport getDirectURL from '../utils/getDirectURL';\nimport { fixBulkDataURI } from './utils/fixBulkDataURI';\n\nconst { DicomMetaDictionary, DicomDict } = dcmjs.data;\n\nconst { naturalizeDataset, denaturalizeDataset } = DicomMetaDictionary;\n\nconst ImplementationClassUID = '2.25.270695996825855179949881587723571202391.2.0.0';\nconst ImplementationVersionName = 'OHIF-VIEWER-2.0.0';\nconst EXPLICIT_VR_LITTLE_ENDIAN = '1.2.840.10008.1.2.1';\n\nconst metadataProvider = classes.MetadataProvider;\n\n/**\n *\n * @param {string} name - Data source name\n * @param {string} wadoUriRoot - Legacy? (potentially unused/replaced)\n * @param {string} qidoRoot - Base URL to use for QIDO requests\n * @param {string} wadoRoot - Base URL to use for WADO requests\n * @param {boolean} qidoSupportsIncludeField - Whether QIDO supports the \"Include\" option to request additional fields in response\n * @param {string} imageRengering - wadors | ? (unsure of where/how this is used)\n * @param {string} thumbnailRendering - wadors | ? (unsure of where/how this is used)\n * @param {bool} supportsReject - Whether the server supports reject calls (i.e. DCM4CHEE)\n * @param {bool} lazyLoadStudy - \"enableStudyLazyLoad\"; Request series meta async instead of blocking\n * @param {string|bool} singlepart - indicates of the retrieves can fetch singlepart.  Options are bulkdata, video, image or boolean true\n */\nfunction createDicomWebApi(dicomWebConfig, userAuthenticationService) {\n  let dicomWebConfigCopy,\n    qidoConfig,\n    wadoConfig,\n    qidoDicomWebClient,\n    wadoDicomWebClient,\n    getAuthrorizationHeader,\n    generateWadoHeader;\n\n  const implementation = {\n    initialize: ({ params, query }) => {\n      if (dicomWebConfig.onConfiguration && typeof dicomWebConfig.onConfiguration === 'function') {\n        dicomWebConfig = dicomWebConfig.onConfiguration(dicomWebConfig, {\n          params,\n          query,\n        });\n      }\n\n      dicomWebConfigCopy = JSON.parse(JSON.stringify(dicomWebConfig));\n\n      getAuthrorizationHeader = () => {\n        const xhrRequestHeaders = {};\n        const authHeaders = userAuthenticationService.getAuthorizationHeader();\n        if (authHeaders && authHeaders.Authorization) {\n          xhrRequestHeaders.Authorization = authHeaders.Authorization;\n        }\n        return xhrRequestHeaders;\n      };\n\n      generateWadoHeader = () => {\n        let authorizationHeader = getAuthrorizationHeader();\n        //Generate accept header depending on config params\n        let formattedAcceptHeader = utils.generateAcceptHeader(\n          dicomWebConfig.acceptHeader,\n          dicomWebConfig.requestTransferSyntaxUID,\n          dicomWebConfig.omitQuotationForMultipartRequest\n        );\n\n        return {\n          ...authorizationHeader,\n          Accept: formattedAcceptHeader,\n        };\n      };\n\n      qidoConfig = {\n        url: dicomWebConfig.qidoRoot,\n        staticWado: dicomWebConfig.staticWado,\n        singlepart: dicomWebConfig.singlepart,\n        headers: userAuthenticationService.getAuthorizationHeader(),\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\n      };\n\n      wadoConfig = {\n        url: dicomWebConfig.wadoRoot,\n        staticWado: dicomWebConfig.staticWado,\n        singlepart: dicomWebConfig.singlepart,\n        headers: userAuthenticationService.getAuthorizationHeader(),\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\n      };\n\n      // TODO -> Two clients sucks, but its better than 1000.\n      // TODO -> We'll need to merge auth later.\n      qidoDicomWebClient = dicomWebConfig.staticWado\n        ? new StaticWadoClient(qidoConfig)\n        : new api.DICOMwebClient(qidoConfig);\n\n      wadoDicomWebClient = dicomWebConfig.staticWado\n        ? new StaticWadoClient(wadoConfig)\n        : new api.DICOMwebClient(wadoConfig);\n    },\n    query: {\n      studies: {\n        mapParams: mapParams.bind(),\n        search: async function (origParams) {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          const { studyInstanceUid, seriesInstanceUid, ...mappedParams } =\n            mapParams(origParams, {\n              supportsFuzzyMatching: dicomWebConfig.supportsFuzzyMatching,\n              supportsWildcard: dicomWebConfig.supportsWildcard,\n            }) || {};\n\n          const results = await qidoSearch(qidoDicomWebClient, undefined, undefined, mappedParams);\n\n          return processResults(results);\n        },\n        processResults: processResults.bind(),\n      },\n      series: {\n        // mapParams: mapParams.bind(),\n        search: async function (studyInstanceUid) {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          const results = await seriesInStudy(qidoDicomWebClient, studyInstanceUid);\n\n          return processSeriesResults(results);\n        },\n        // processResults: processResults.bind(),\n      },\n      instances: {\n        search: (studyInstanceUid, queryParameters) => {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          return qidoSearch.call(undefined, qidoDicomWebClient, studyInstanceUid, null, queryParameters);\n        },\n      },\n    },\n    retrieve: {\n      /**\n       * Generates a URL that can be used for direct retrieve of the bulkdata\n       *\n       * @param {object} params\n       * @param {string} params.tag is the tag name of the URL to retrieve\n       * @param {object} params.instance is the instance object that the tag is in\n       * @param {string} params.defaultType is the mime type of the response\n       * @param {string} params.singlepart is the type of the part to retrieve\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n       */\n      directURL: params => {\n        return getDirectURL(\n          {\n            wadoRoot: dicomWebConfig.wadoRoot,\n            singlepart: dicomWebConfig.singlepart,\n          },\n          params\n        );\n      },\n      bulkDataURI: async ({ StudyInstanceUID, BulkDataURI }) => {\n        qidoDicomWebClient.headers = getAuthrorizationHeader();\n        const options = {\n          multipart: false,\n          BulkDataURI,\n          StudyInstanceUID,\n        };\n        return qidoDicomWebClient.retrieveBulkData(options).then(val => {\n          const ret = (val && val[0]) || undefined;\n          return ret;\n        });\n      },\n      series: {\n        metadata: async ({\n          StudyInstanceUID,\n          filters,\n          sortCriteria,\n          sortFunction,\n          madeInClient = false,\n        } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          if (dicomWebConfig.enableStudyLazyLoad) {\n            return implementation._retrieveSeriesMetadataAsync(\n              StudyInstanceUID,\n              filters,\n              sortCriteria,\n              sortFunction,\n              madeInClient\n            );\n          }\n\n          return implementation._retrieveSeriesMetadataSync(\n            StudyInstanceUID,\n            filters,\n            sortCriteria,\n            sortFunction,\n            madeInClient\n          );\n        },\n      },\n    },\n\n    store: {\n      dicom: async (dataset, request) => {\n        wadoDicomWebClient.headers = getAuthrorizationHeader();\n        if (dataset instanceof ArrayBuffer) {\n          const options = {\n            datasets: [dataset],\n            request,\n          };\n          await wadoDicomWebClient.storeInstances(options);\n        } else {\n          const meta = {\n            FileMetaInformationVersion: dataset._meta?.FileMetaInformationVersion?.Value,\n            MediaStorageSOPClassUID: dataset.SOPClassUID,\n            MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,\n            TransferSyntaxUID: EXPLICIT_VR_LITTLE_ENDIAN,\n            ImplementationClassUID,\n            ImplementationVersionName,\n          };\n\n          const denaturalized = denaturalizeDataset(meta);\n          const dicomDict = new DicomDict(denaturalized);\n\n          dicomDict.dict = denaturalizeDataset(dataset);\n\n          const part10Buffer = dicomDict.write();\n\n          const options = {\n            datasets: [part10Buffer],\n            request,\n          };\n\n          await wadoDicomWebClient.storeInstances(options);\n        }\n      },\n    },\n\n    _retrieveSeriesMetadataSync: async (\n      StudyInstanceUID,\n      filters,\n      sortCriteria,\n      sortFunction,\n      madeInClient\n    ) => {\n      const enableStudyLazyLoad = false;\n      wadoDicomWebClient.headers = generateWadoHeader();\n      // data is all SOPInstanceUIDs\n      const data = await retrieveStudyMetadata(\n        wadoDicomWebClient,\n        StudyInstanceUID,\n        enableStudyLazyLoad,\n        filters,\n        sortCriteria,\n        sortFunction,\n        dicomWebConfig\n      );\n\n      // first naturalize the data\n      const naturalizedInstancesMetadata = data.map(naturalizeDataset);\n\n      const seriesSummaryMetadata = {};\n      const instancesPerSeries = {};\n\n      naturalizedInstancesMetadata.forEach(instance => {\n        if (!seriesSummaryMetadata[instance.SeriesInstanceUID]) {\n          seriesSummaryMetadata[instance.SeriesInstanceUID] = {\n            StudyInstanceUID: instance.StudyInstanceUID,\n            StudyDescription: instance.StudyDescription,\n            SeriesInstanceUID: instance.SeriesInstanceUID,\n            SeriesDescription: instance.SeriesDescription,\n            SeriesNumber: instance.SeriesNumber,\n            SeriesTime: instance.SeriesTime,\n            SOPClassUID: instance.SOPClassUID,\n            ProtocolName: instance.ProtocolName,\n            Modality: instance.Modality,\n          };\n        }\n\n        if (!instancesPerSeries[instance.SeriesInstanceUID]) {\n          instancesPerSeries[instance.SeriesInstanceUID] = [];\n        }\n\n        const imageId = implementation.getImageIdsForInstance({\n          instance,\n        });\n\n        instance.imageId = imageId;\n        instance.wadoRoot = dicomWebConfig.wadoRoot;\n        instance.wadoUri = dicomWebConfig.wadoUri;\n\n        metadataProvider.addImageIdToUIDs(imageId, {\n          StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          SOPInstanceUID: instance.SOPInstanceUID,\n        });\n\n        instancesPerSeries[instance.SeriesInstanceUID].push(instance);\n      });\n\n      // grab all the series metadata\n      const seriesMetadata = Object.values(seriesSummaryMetadata);\n      DicomMetadataStore.addSeriesMetadata(seriesMetadata, madeInClient);\n\n      Object.keys(instancesPerSeries).forEach(seriesInstanceUID =>\n        DicomMetadataStore.addInstances(instancesPerSeries[seriesInstanceUID], madeInClient)\n      );\n\n      return seriesSummaryMetadata;\n    },\n\n    _retrieveSeriesMetadataAsync: async (\n      StudyInstanceUID,\n      filters,\n      sortCriteria,\n      sortFunction,\n      madeInClient = false\n    ) => {\n      const enableStudyLazyLoad = true;\n      wadoDicomWebClient.headers = generateWadoHeader();\n      // Get Series\n      const { preLoadData: seriesSummaryMetadata, promises: seriesPromises } =\n        await retrieveStudyMetadata(\n          wadoDicomWebClient,\n          StudyInstanceUID,\n          enableStudyLazyLoad,\n          filters,\n          sortCriteria,\n          sortFunction,\n          dicomWebConfig\n        );\n\n      /**\n       * naturalizes the dataset, and adds a retrieve bulkdata method\n       * to any values containing BulkDataURI.\n       * @param {*} instance\n       * @returns naturalized dataset, with retrieveBulkData methods\n       */\n      const addRetrieveBulkData = instance => {\n        const naturalized = naturalizeDataset(instance);\n\n        // if we know the server doesn't use bulkDataURI, then don't\n        if (!dicomWebConfig.bulkDataURI?.enabled) {\n          return naturalized;\n        }\n\n        Object.keys(naturalized).forEach(key => {\n          const value = naturalized[key];\n\n          // The value.Value will be set with the bulkdata read value\n          // in which case it isn't necessary to re-read this.\n          if (value && value.BulkDataURI && !value.Value) {\n            // Provide a method to fetch bulkdata\n            value.retrieveBulkData = () => {\n              // handle the scenarios where bulkDataURI is relative path\n              fixBulkDataURI(value, naturalized, dicomWebConfig);\n\n              const options = {\n                // The bulkdata fetches work with either multipart or\n                // singlepart, so set multipart to false to let the server\n                // decide which type to respond with.\n                multipart: false,\n                BulkDataURI: value.BulkDataURI,\n                // The study instance UID is required if the bulkdata uri\n                // is relative - that isn't disallowed by DICOMweb, but\n                // isn't well specified in the standard, but is needed in\n                // any implementation that stores static copies of the metadata\n                StudyInstanceUID: naturalized.StudyInstanceUID,\n              };\n              // Todo: this needs to be from wado dicom web client\n              return qidoDicomWebClient.retrieveBulkData(options).then(val => {\n                // There are DICOM PDF cases where the first ArrayBuffer in the array is\n                // the bulk data and DICOM video cases where the second ArrayBuffer is\n                // the bulk data. Here we play it safe and do a find.\n                const ret =\n                  (val instanceof Array && val.find(arrayBuffer => arrayBuffer?.byteLength)) ||\n                  undefined;\n                value.Value = ret;\n                return ret;\n              });\n            };\n          }\n        });\n        return naturalized;\n      };\n\n      // Async load series, store as retrieved\n      function storeInstances(instances) {\n        const naturalizedInstances = instances.map(addRetrieveBulkData);\n\n        // Adding instanceMetadata to OHIF MetadataProvider\n        naturalizedInstances.forEach((instance, index) => {\n          instance.wadoRoot = dicomWebConfig.wadoRoot;\n          instance.wadoUri = dicomWebConfig.wadoUri;\n\n          const imageId = implementation.getImageIdsForInstance({\n            instance,\n          });\n\n          // Adding imageId to each instance\n          // Todo: This is not the best way I can think of to let external\n          // metadata handlers know about the imageId that is stored in the store\n          instance.imageId = imageId;\n\n          // Adding UIDs to metadataProvider\n          // Note: storing imageURI in metadataProvider since stack viewports\n          // will use the same imageURI\n          metadataProvider.addImageIdToUIDs(imageId, {\n            StudyInstanceUID,\n            SeriesInstanceUID: instance.SeriesInstanceUID,\n            SOPInstanceUID: instance.SOPInstanceUID,\n          });\n        });\n\n        DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\n      }\n\n      function setSuccessFlag() {\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n        if (!study) {\n          return;\n        }\n        study.isLoaded = true;\n      }\n\n      // Google Cloud Healthcare doesn't return StudyInstanceUID, so we need to add\n      // it manually here\n      seriesSummaryMetadata.forEach(aSeries => {\n        aSeries.StudyInstanceUID = StudyInstanceUID;\n      });\n\n      DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\n\n      const seriesDeliveredPromises = seriesPromises.map(promise =>\n        promise.then(instances => {\n          storeInstances(instances);\n        })\n      );\n      await Promise.all(seriesDeliveredPromises);\n      setSuccessFlag();\n\n      return seriesSummaryMetadata;\n    },\n    deleteStudyMetadataPromise,\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n\n        if (NumberOfFrames > 1) {\n          for (let frame = 1; frame <= NumberOfFrames; frame++) {\n            const imageId = this.getImageIdsForInstance({\n              instance,\n              frame,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = this.getImageIdsForInstance({ instance });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const imageIds = getImageId({\n        instance,\n        frame,\n        config: dicomWebConfig,\n      });\n      return imageIds;\n    },\n    getConfig() {\n      return dicomWebConfigCopy;\n    },\n    getStudyInstanceUIDs({ params, query }) {\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\n      const queryStudyInstanceUIDs = utils.splitComma(query.getAll('StudyInstanceUIDs'));\n\n      const StudyInstanceUIDs =\n        (queryStudyInstanceUIDs.length && queryStudyInstanceUIDs) || paramsStudyInstanceUIDs;\n      const StudyInstanceUIDsAsArray =\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\n          ? StudyInstanceUIDs\n          : [StudyInstanceUIDs];\n\n      return StudyInstanceUIDsAsArray;\n    },\n  };\n\n  if (dicomWebConfig.supportsReject) {\n    implementation.reject = dcm4cheeReject(dicomWebConfig.wadoRoot);\n  }\n\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomWebApi };\n","export default function (wadoRoot) {\n  return {\n    series: (StudyInstanceUID, SeriesInstanceUID) => {\n      return new Promise((resolve, reject) => {\n        // Reject because of Quality. (Seems the most sensible out of the options)\n        const CodeValueAndCodeSchemeDesignator = `113001%5EDCM`;\n\n        const url = `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/reject/${CodeValueAndCodeSchemeDesignator}`;\n\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', url, true);\n\n        //Send the proper header information along with the request\n        // TODO -> Auth when we re-add authorization.\n\n        console.log(xhr);\n\n        xhr.onreadystatechange = function () {\n          //Call a function when the state changes.\n          if (xhr.readyState == 4) {\n            switch (xhr.status) {\n              case 204:\n                resolve(xhr.responseText);\n\n                break;\n              case 404:\n                reject('Your dataSource does not support reject functionality');\n            }\n          }\n        };\n        xhr.send();\n      });\n    },\n  };\n}\n","import { DicomMetadataStore, IWebApiDataSource } from '@ohif/core';\nimport OHIF from '@ohif/core';\n\nimport getImageId from '../DicomWebDataSource/utils/getImageId';\nimport getDirectURL from '../utils/getDirectURL';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\n\nconst mappings = {\n  studyInstanceUid: 'StudyInstanceUID',\n  patientId: 'PatientID',\n};\n\nlet _store = {\n  urls: [],\n  studyInstanceUIDMap: new Map(), // map of urls to array of study instance UIDs\n  // {\n  //   url: url1\n  //   studies: [Study1, Study2], // if multiple studies\n  // }\n  // {\n  //   url: url2\n  //   studies: [Study1],\n  // }\n  // }\n};\n\nfunction wrapSequences(obj) {\n  return Object.keys(obj).reduce(\n    (acc, key) => {\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        // Recursively wrap sequences for nested objects\n        acc[key] = wrapSequences(obj[key]);\n      } else {\n        acc[key] = obj[key];\n      }\n      if (key.endsWith('Sequence')) {\n        acc[key] = OHIF.utils.addAccessors(acc[key]);\n      }\n      return acc;\n    },\n    Array.isArray(obj) ? [] : {}\n  );\n}\nconst getMetaDataByURL = url => {\n  return _store.urls.find(metaData => metaData.url === url);\n};\n\nconst findStudies = (key, value) => {\n  let studies = [];\n  _store.urls.map(metaData => {\n    metaData.studies.map(aStudy => {\n      if (aStudy[key] === value) {\n        studies.push(aStudy);\n      }\n    });\n  });\n  return studies;\n};\n\nfunction createDicomJSONApi(dicomJsonConfig) {\n  const { wadoRoot } = dicomJsonConfig;\n\n  const implementation = {\n    initialize: async ({ query, url }) => {\n      if (!url) {\n        url = query.get('url');\n      }\n      let metaData = getMetaDataByURL(url);\n\n      // if we have already cached the data from this specific url\n      // We are only handling one StudyInstanceUID to run; however,\n      // all studies for patientID will be put in the correct tab\n      if (metaData) {\n        return metaData.studies.map(aStudy => {\n          return aStudy.StudyInstanceUID;\n        });\n      }\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      let StudyInstanceUID;\n      let SeriesInstanceUID;\n      data.studies.forEach(study => {\n        StudyInstanceUID = study.StudyInstanceUID;\n\n        study.series.forEach(series => {\n          SeriesInstanceUID = series.SeriesInstanceUID;\n\n          series.instances.forEach(instance => {\n            const { url: imageId, metadata: naturalizedDicom } = instance;\n\n            // Add imageId specific mapping to this data as the URL isn't necessarliy WADO-URI.\n            metadataProvider.addImageIdToUIDs(imageId, {\n              StudyInstanceUID,\n              SeriesInstanceUID,\n              SOPInstanceUID: naturalizedDicom.SOPInstanceUID,\n            });\n          });\n        });\n      });\n\n      _store.urls.push({\n        url,\n        studies: [...data.studies],\n      });\n      _store.studyInstanceUIDMap.set(\n        url,\n        data.studies.map(study => study.StudyInstanceUID)\n      );\n    },\n    query: {\n      studies: {\n        mapParams: () => {},\n        search: async param => {\n          const [key, value] = Object.entries(param)[0];\n          const mappedParam = mappings[key];\n\n          // todo: should fetch from dicomMetadataStore\n          const studies = findStudies(mappedParam, value);\n\n          return studies.map(aStudy => {\n            return {\n              accession: aStudy.AccessionNumber,\n              date: aStudy.StudyDate,\n              description: aStudy.StudyDescription,\n              instances: aStudy.NumInstances,\n              modalities: aStudy.Modalities,\n              mrn: aStudy.PatientID,\n              patientName: aStudy.PatientName,\n              studyInstanceUid: aStudy.StudyInstanceUID,\n              NumInstances: aStudy.NumInstances,\n              time: aStudy.StudyTime,\n            };\n          });\n        },\n        processResults: () => {\n          console.warn(' DICOMJson QUERY processResults not implemented');\n        },\n      },\n      series: {\n        // mapParams: mapParams.bind(),\n        search: () => {\n          console.warn(' DICOMJson QUERY SERIES SEARCH not implemented');\n        },\n      },\n      instances: {\n        search: () => {\n          console.warn(' DICOMJson QUERY instances SEARCH not implemented');\n        },\n      },\n    },\n    retrieve: {\n      /**\n       * Generates a URL that can be used for direct retrieve of the bulkdata\n       *\n       * @param {object} params\n       * @param {string} params.tag is the tag name of the URL to retrieve\n       * @param {string} params.defaultPath path for the pixel data url\n       * @param {object} params.instance is the instance object that the tag is in\n       * @param {string} params.defaultType is the mime type of the response\n       * @param {string} params.singlepart is the type of the part to retrieve\n       * @param {string} params.fetchPart unknown?\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n       */\n      directURL: params => {\n        return getDirectURL(wadoRoot, params);\n      },\n      series: {\n        metadata: async ({ StudyInstanceUID, madeInClient = false, customSort } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          const study = findStudies('StudyInstanceUID', StudyInstanceUID)[0];\n          let series;\n\n          if (customSort) {\n            series = customSort(study.series);\n          } else {\n            series = study.series;\n          }\n\n          const seriesSummaryMetadata = series.map(series => {\n            const seriesSummary = {\n              StudyInstanceUID: study.StudyInstanceUID,\n              ...series,\n            };\n            delete seriesSummary.instances;\n            return seriesSummary;\n          });\n\n          // Async load series, store as retrieved\n          function storeInstances(naturalizedInstances) {\n            DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\n          }\n\n          DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\n\n          function setSuccessFlag() {\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n            study.isLoaded = true;\n          }\n\n          const numberOfSeries = series.length;\n          series.forEach((series, index) => {\n            const instances = series.instances.map(instance => {\n              // for instance.metadata if the key ends with sequence then\n              // we need to add a proxy to the first item in the sequence\n              // so that we can access the value of the sequence\n              // by using sequenceName.value\n              const modifiedMetadata = wrapSequences(instance.metadata);\n\n              const obj = {\n                ...modifiedMetadata,\n                url: instance.url,\n                imageId: instance.url,\n                ...series,\n                ...study,\n              };\n              delete obj.instances;\n              delete obj.series;\n              return obj;\n            });\n            storeInstances(instances);\n            if (index === numberOfSeries - 1) {\n              setSuccessFlag();\n            }\n          });\n        },\n      },\n    },\n    store: {\n      dicom: () => {\n        console.warn(' DICOMJson store dicom not implemented');\n      },\n    },\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n\n        if (NumberOfFrames > 1) {\n          for (let i = 0; i < NumberOfFrames; i++) {\n            const imageId = getImageId({\n              instance,\n              frame: i,\n              config: dicomJsonConfig,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = getImageId({ instance, config: dicomJsonConfig });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const imageIds = getImageId({ instance, frame });\n      return imageIds;\n    },\n    getStudyInstanceUIDs: ({ params, query }) => {\n      const url = query.get('url');\n      return _store.studyInstanceUIDMap.get(url);\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomJSONApi };\n","import { DicomMetadataStore, IWebApiDataSource, utils } from '@ohif/core';\nimport OHIF from '@ohif/core';\nimport dcmjs from 'dcmjs';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\nconst { EVENTS } = DicomMetadataStore;\n\nconst END_MODALITIES = {\n  SR: true,\n  SEG: true,\n  DOC: true,\n};\n\nconst compareValue = (v1, v2, def = 0) => {\n  if (v1 === v2) {\n    return def;\n  }\n  if (v1 < v2) {\n    return -1;\n  }\n  return 1;\n};\n\n// Sorting SR modalities to be at the end of series list\nconst customSort = (seriesA, seriesB) => {\n  const instanceA = seriesA.instances[0];\n  const instanceB = seriesB.instances[0];\n  const modalityA = instanceA.Modality;\n  const modalityB = instanceB.Modality;\n\n  const isEndA = END_MODALITIES[modalityA];\n  const isEndB = END_MODALITIES[modalityB];\n\n  if (isEndA && isEndB) {\n    // Compare by series date\n    return compareValue(instanceA.SeriesNumber, instanceB.SeriesNumber);\n  }\n  if (!isEndA && !isEndB) {\n    return compareValue(instanceB.SeriesNumber, instanceA.SeriesNumber);\n  }\n  return isEndA ? -1 : 1;\n};\n\nfunction createDicomLocalApi(dicomLocalConfig) {\n  const { name } = dicomLocalConfig;\n\n  const implementation = {\n    initialize: ({ params, query }) => {},\n    query: {\n      studies: {\n        mapParams: () => {},\n        search: params => {\n          const studyUIDs = DicomMetadataStore.getStudyInstanceUIDs();\n\n          return studyUIDs.map(StudyInstanceUID => {\n            let numInstances = 0;\n            const modalities = new Set();\n\n            // Calculating the number of instances in the study and modalities\n            // present in the study\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n            study.series.forEach(aSeries => {\n              numInstances += aSeries.instances.length;\n              modalities.add(aSeries.instances[0].Modality);\n            });\n\n            // first instance in the first series\n            const firstInstance = study?.series[0]?.instances[0];\n\n            if (firstInstance) {\n              return {\n                accession: firstInstance.AccessionNumber,\n                date: firstInstance.StudyDate,\n                description: firstInstance.StudyDescription,\n                mrn: firstInstance.PatientID,\n                patientName: utils.formatPN(firstInstance.PatientName),\n                studyInstanceUid: firstInstance.StudyInstanceUID,\n                time: firstInstance.StudyTime,\n                //\n                instances: numInstances,\n                modalities: Array.from(modalities).join('/'),\n                NumInstances: numInstances,\n              };\n            }\n          });\n        },\n        processResults: () => {\n          console.warn(' DICOMLocal QUERY processResults not implemented');\n        },\n      },\n      series: {\n        search: studyInstanceUID => {\n          const study = DicomMetadataStore.getStudy(studyInstanceUID);\n          return study.series.map(aSeries => {\n            const firstInstance = aSeries?.instances[0];\n            return {\n              studyInstanceUid: studyInstanceUID,\n              seriesInstanceUid: firstInstance.SeriesInstanceUID,\n              modality: firstInstance.Modality,\n              seriesNumber: firstInstance.SeriesNumber,\n              seriesDate: firstInstance.SeriesDate,\n              numSeriesInstances: aSeries.instances.length,\n              description: firstInstance.SeriesDescription,\n            };\n          });\n        },\n      },\n      instances: {\n        search: () => {\n          console.warn(' DICOMLocal QUERY instances SEARCH not implemented');\n        },\n      },\n    },\n    retrieve: {\n      directURL: params => {\n        const { instance, tag, defaultType } = params;\n\n        const value = instance[tag];\n        if (value instanceof Array && value[0] instanceof ArrayBuffer) {\n          return URL.createObjectURL(\n            new Blob([value[0]], {\n              type: defaultType,\n            })\n          );\n        }\n      },\n      series: {\n        metadata: async ({ StudyInstanceUID, madeInClient = false } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          // Instances metadata already added via local upload\n          const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n\n          // Series metadata already added via local upload\n          DicomMetadataStore._broadcastEvent(EVENTS.SERIES_ADDED, {\n            StudyInstanceUID,\n            madeInClient,\n          });\n\n          study.series.forEach(aSeries => {\n            const { SeriesInstanceUID } = aSeries;\n\n            const isMultiframe = aSeries.instances[0].NumberOfFrames > 1;\n\n            aSeries.instances.forEach((instance, index) => {\n              const {\n                url: imageId,\n                StudyInstanceUID,\n                SeriesInstanceUID,\n                SOPInstanceUID,\n              } = instance;\n\n              instance.imageId = imageId;\n\n              // Add imageId specific mapping to this data as the URL isn't necessarily WADO-URI.\n              metadataProvider.addImageIdToUIDs(imageId, {\n                StudyInstanceUID,\n                SeriesInstanceUID,\n                SOPInstanceUID,\n                frameIndex: isMultiframe ? index : 1,\n              });\n            });\n\n            DicomMetadataStore._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n              StudyInstanceUID,\n              SeriesInstanceUID,\n              madeInClient,\n            });\n          });\n        },\n      },\n    },\n    store: {\n      dicom: naturalizedReport => {\n        const reportBlob = dcmjs.data.datasetToBlob(naturalizedReport);\n\n        //Create a URL for the binary.\n        var objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      },\n    },\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n        if (NumberOfFrames > 1) {\n          // in multiframe we start at frame 1\n          for (let i = 1; i <= NumberOfFrames; i++) {\n            const imageId = this.getImageIdsForInstance({\n              instance,\n              frame: i,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = this.getImageIdsForInstance({ instance });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n      const storedInstance = DicomMetadataStore.getInstance(\n        StudyInstanceUID,\n        SeriesInstanceUID,\n        SOPInstanceUID\n      );\n\n      let imageId = storedInstance.url;\n\n      if (frame !== undefined) {\n        imageId += `&frame=${frame}`;\n      }\n\n      return imageId;\n    },\n    deleteStudyMetadataPromise() {\n      console.log('deleteStudyMetadataPromise not implemented');\n    },\n    getStudyInstanceUIDs: ({ params, query }) => {\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\n      const queryStudyInstanceUIDs = query.getAll('StudyInstanceUIDs');\n\n      const StudyInstanceUIDs = queryStudyInstanceUIDs || paramsStudyInstanceUIDs;\n      const StudyInstanceUIDsAsArray =\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\n          ? StudyInstanceUIDs\n          : [StudyInstanceUIDs];\n\n      // Put SRs at the end of series list to make sure images are loaded first\n      let isStudyInCache = false;\n      StudyInstanceUIDsAsArray.forEach(StudyInstanceUID => {\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n        if (study) {\n          study.series = study.series.sort(customSort);\n          isStudyInCache = true;\n        }\n      });\n\n      return isStudyInCache ? StudyInstanceUIDsAsArray : [];\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomLocalApi };\n","import { IWebApiDataSource } from '@ohif/core';\nimport { createDicomWebApi } from '../DicomWebDataSource/index';\n\n/**\n * This datasource is initialized with a url that returns a JSON object with a\n * dicomWeb datasource configuration array present in a \"servers\" object.\n *\n * Only the first array item is parsed, if there are multiple items in the\n * dicomWeb configuration array\n *\n */\nfunction createDicomWebProxyApi(dicomWebProxyConfig, UserAuthenticationService) {\n  const { name } = dicomWebProxyConfig;\n  let dicomWebDelegate = undefined;\n\n  const implementation = {\n    initialize: async ({ params, query }) => {\n      const url = query.get('url');\n\n      if (!url) {\n        throw new Error(`No url for '${name}'`);\n      } else {\n        const response = await fetch(url);\n        let data = await response.json();\n        if (!data.servers?.dicomWeb?.[0]) {\n          throw new Error('Invalid configuration returned by url');\n        }\n\n        dicomWebDelegate = createDicomWebApi(\n          data.servers.dicomWeb[0].configuration,\n          UserAuthenticationService\n        );\n        dicomWebDelegate.initialize({ params, query });\n      }\n    },\n    query: {\n      studies: {\n        search: params => dicomWebDelegate.query.studies.search(params),\n      },\n      series: {\n        search: (...args) => dicomWebDelegate.query.series.search(...args),\n      },\n      instances: {\n        search: (studyInstanceUid, queryParameters) =>\n          dicomWebDelegate.query.instances.search(studyInstanceUid, queryParameters),\n      },\n    },\n    retrieve: {\n      directURL: (...args) => dicomWebDelegate.retrieve.directURL(...args),\n      series: {\n        metadata: async (...args) => dicomWebDelegate.retrieve.series.metadata(...args),\n      },\n    },\n    store: {\n      dicom: (...args) => dicomWebDelegate.store(...args),\n    },\n    deleteStudyMetadataPromise: (...args) => dicomWebDelegate.deleteStudyMetadataPromise(...args),\n    getImageIdsForDisplaySet: (...args) => dicomWebDelegate.getImageIdsForDisplaySet(...args),\n    getImageIdsForInstance: (...args) => dicomWebDelegate.getImageIdsForInstance(...args),\n    getStudyInstanceUIDs({ params, query }) {\n      let studyInstanceUIDs = [];\n\n      // there seem to be a couple of variations of the case for this parameter\n      const queryStudyInstanceUIDs =\n        query.get('studyInstanceUIDs') || query.get('studyInstanceUids');\n      if (!queryStudyInstanceUIDs) {\n        throw new Error(`No studyInstanceUids in request for '${name}'`);\n      }\n      studyInstanceUIDs = queryStudyInstanceUIDs.split(';');\n      return studyInstanceUIDs;\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomWebProxyApi };\n","import { DicomMetadataStore, IWebApiDataSource } from '@ohif/core';\nimport { get, uniqBy } from 'lodash';\nimport {\n  MergeConfig,\n  CallForAllDataSourcesAsyncOptions,\n  CallForAllDataSourcesOptions,\n  CallForDefaultDataSourceOptions,\n  CallByRetrieveAETitleOptions,\n  MergeMap,\n} from './types';\n\nexport const mergeMap: MergeMap = {\n  'query.studies.search': {\n    mergeKey: 'studyInstanceUid',\n    tagFunc: x => x,\n  },\n  'query.series.search': {\n    mergeKey: 'seriesInstanceUid',\n    tagFunc: (series, sourceName) => {\n      series.forEach(series => {\n        series.RetrieveAETitle = sourceName;\n        DicomMetadataStore.updateSeriesMetadata(series);\n      });\n      return series;\n    },\n  },\n};\n\n/**\n * Calls all data sources asynchronously and merges the results.\n * @param {CallForAllDataSourcesAsyncOptions} options - The options for calling all data sources.\n * @param {string} options.path - The path to the function to be called on each data source.\n * @param {unknown[]} options.args - The arguments to be passed to the function.\n * @param {ExtensionManager} options.extensionManager - The extension manager.\n * @param {string[]} options.dataSourceNames - The names of the data sources to be called.\n * @returns {Promise<unknown[]>} - A promise that resolves to the merged data from all data sources.\n */\nexport const callForAllDataSourcesAsync = async ({\n  mergeMap,\n  path,\n  args,\n  extensionManager,\n  dataSourceNames,\n}: CallForAllDataSourcesAsyncOptions) => {\n  const { mergeKey, tagFunc } = mergeMap[path] || { tagFunc: x => x };\n\n  const dataSourceDefs = Object.values(extensionManager.dataSourceDefs);\n  const promises = [];\n  const mergedData = [];\n\n  for (const dataSourceDef of dataSourceDefs) {\n    const { configuration, sourceName } = dataSourceDef;\n    if (!!configuration && dataSourceNames.includes(sourceName)) {\n      const [dataSource] = extensionManager.getDataSources(sourceName);\n      const func = get(dataSource, path);\n      const promise = func.apply(dataSource, args);\n      promises.push(promise.then(data => mergedData.push(tagFunc(data, sourceName))));\n    }\n  }\n\n  await Promise.allSettled(promises);\n\n  return uniqBy(mergedData.flat(), obj => obj[mergeKey]);\n};\n\n/**\n * Calls all data sources that match the provided names and merges their data.\n * @param options - The options for calling all data sources.\n * @param options.path - The path to the function to be called on each data source.\n * @param options.args - The arguments to be passed to the function.\n * @param options.extensionManager - The extension manager instance.\n * @param options.dataSourceNames - The names of the data sources to be called.\n * @returns The merged data from all the matching data sources.\n */\nexport const callForAllDataSources = ({\n  path,\n  args,\n  extensionManager,\n  dataSourceNames,\n}: CallForAllDataSourcesOptions) => {\n  const dataSourceDefs = Object.values(extensionManager.dataSourceDefs);\n  const mergedData = [];\n  for (const dataSourceDef of dataSourceDefs) {\n    const { configuration, sourceName } = dataSourceDef;\n    if (!!configuration && dataSourceNames.includes(sourceName)) {\n      const [dataSource] = extensionManager.getDataSources(sourceName);\n      const func = get(dataSource, path);\n      const data = func.apply(dataSource, args);\n      mergedData.push(data);\n    }\n  }\n  return mergedData.flat();\n};\n\n/**\n * Calls the default data source function specified by the given path with the provided arguments.\n * @param {CallForDefaultDataSourceOptions} options - The options for calling the default data source.\n * @param {string} options.path - The path to the function within the default data source.\n * @param {unknown[]} options.args - The arguments to pass to the function.\n * @param {string} options.defaultDataSourceName - The name of the default data source.\n * @param {ExtensionManager} options.extensionManager - The extension manager instance.\n * @returns {unknown} - The result of calling the default data source function.\n */\nexport const callForDefaultDataSource = ({\n  path,\n  args,\n  defaultDataSourceName,\n  extensionManager,\n}: CallForDefaultDataSourceOptions) => {\n  const [dataSource] = extensionManager.getDataSources(defaultDataSourceName);\n  const func = get(dataSource, path);\n  return func.apply(dataSource, args);\n};\n\n/**\n * Calls the data source specified by the RetrieveAETitle of the given display set.\n * @typedef {Object} CallByRetrieveAETitleOptions\n * @property {string} path - The path of the method to call on the data source.\n * @property {unknown[]} args - The arguments to pass to the method.\n * @property {string} defaultDataSourceName - The name of the default data source.\n * @property {ExtensionManager} extensionManager - The extension manager.\n */\nexport const callByRetrieveAETitle = ({\n  path,\n  args,\n  defaultDataSourceName,\n  extensionManager,\n}: CallByRetrieveAETitleOptions) => {\n  const [displaySet] = args;\n  const seriesMetadata = DicomMetadataStore.getSeries(\n    displaySet.StudyInstanceUID,\n    displaySet.SeriesInstanceUID\n  );\n  const [dataSource] = extensionManager.getDataSources(\n    seriesMetadata.RetrieveAETitle || defaultDataSourceName\n  );\n  return dataSource[path](...args);\n};\n\nfunction createMergeDataSourceApi(\n  mergeConfig: MergeConfig,\n  UserAuthenticationService: unknown,\n  extensionManager\n) {\n  const { seriesMerge } = mergeConfig;\n  const { dataSourceNames, defaultDataSourceName } = seriesMerge;\n\n  const implementation = {\n    initialize: (...args: unknown[]) =>\n      callForAllDataSources({ path: 'initialize', args, extensionManager, dataSourceNames }),\n    query: {\n      studies: {\n        search: (...args: unknown[]) =>\n          callForAllDataSourcesAsync({\n            mergeMap,\n            path: 'query.studies.search',\n            args,\n            extensionManager,\n            dataSourceNames,\n          }),\n      },\n      series: {\n        search: (...args: unknown[]) =>\n          callForAllDataSourcesAsync({\n            mergeMap,\n            path: 'query.series.search',\n            args,\n            extensionManager,\n            dataSourceNames,\n          }),\n      },\n      instances: {\n        search: (...args: unknown[]) =>\n          callForAllDataSourcesAsync({\n            mergeMap,\n            path: 'query.instances.search',\n            args,\n            extensionManager,\n            dataSourceNames,\n          }),\n      },\n    },\n    retrieve: {\n      bulkDataURI: (...args: unknown[]) =>\n        callForAllDataSourcesAsync({\n          mergeMap,\n          path: 'retrieve.bulkDataURI',\n          args,\n          extensionManager,\n          dataSourceNames,\n        }),\n      directURL: (...args: unknown[]) =>\n        callForDefaultDataSource({\n          path: 'retrieve.directURL',\n          args,\n          defaultDataSourceName,\n          extensionManager,\n        }),\n      series: {\n        metadata: (...args: unknown[]) =>\n          callForAllDataSourcesAsync({\n            mergeMap,\n            path: 'retrieve.series.metadata',\n            args,\n            extensionManager,\n            dataSourceNames,\n          }),\n      },\n    },\n    store: {\n      dicom: (...args: unknown[]) =>\n        callForDefaultDataSource({\n          path: 'store.dicom',\n          args,\n          defaultDataSourceName,\n          extensionManager,\n        }),\n    },\n    deleteStudyMetadataPromise: (...args: unknown[]) =>\n      callForAllDataSources({\n        path: 'deleteStudyMetadataPromise',\n        args,\n        extensionManager,\n        dataSourceNames,\n      }),\n    getImageIdsForDisplaySet: (...args: unknown[]) =>\n      callByRetrieveAETitle({\n        path: 'getImageIdsForDisplaySet',\n        args,\n        defaultDataSourceName,\n        extensionManager,\n      }),\n    getImageIdsForInstance: (...args: unknown[]) =>\n      callByRetrieveAETitle({\n        path: 'getImageIdsForDisplaySet',\n        args,\n        defaultDataSourceName,\n        extensionManager,\n      }),\n    getStudyInstanceUIDs: (...args: unknown[]) =>\n      callForAllDataSources({\n        path: 'getStudyInstanceUIDs',\n        args,\n        extensionManager,\n        dataSourceNames,\n      }),\n  };\n\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createMergeDataSourceApi };\n","// TODO: Pull in IWebClientApi from @ohif/core\n// TODO: Use constructor to create an instance of IWebClientApi\n// TODO: Use existing DICOMWeb configuration (previously, appConfig, to configure instance)\n\nimport { createDicomWebApi } from './DicomWebDataSource/index.js';\nimport { createDicomJSONApi } from './DicomJSONDataSource/index.js';\nimport { createDicomLocalApi } from './DicomLocalDataSource/index.js';\nimport { createDicomWebProxyApi } from './DicomWebProxyDataSource/index.js';\nimport { createMergeDataSourceApi } from './MergeDataSource/index';\n\n/**\n *\n */\nfunction getDataSourcesModule() {\n  return [\n    {\n      name: 'dicomweb',\n      type: 'webApi',\n      createDataSource: createDicomWebApi,\n    },\n    {\n      name: 'dicomwebproxy',\n      type: 'webApi',\n      createDataSource: createDicomWebProxyApi,\n    },\n    {\n      name: 'dicomjson',\n      type: 'jsonApi',\n      createDataSource: createDicomJSONApi,\n    },\n    {\n      name: 'dicomlocal',\n      type: 'localApi',\n      createDataSource: createDicomLocalApi,\n    },\n    {\n      name: 'merge',\n      type: 'mergeApi',\n      createDataSource: createMergeDataSourceApi,\n    },\n  ];\n}\n\nexport default getDataSourcesModule;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { useViewportGrid } from '@ohif/ui';\n\nexport default function Toolbar({\n  servicesManager,\n}: Types.Extensions.ExtensionParams): React.ReactElement {\n  const { toolbarService } = servicesManager.services;\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  const [toolbarButtons, setToolbarButtons] = useState([]);\n\n  useEffect(() => {\n    const updateToolbar = () => {\n      const toolGroupId =\n        viewportGridService.getActiveViewportOptionByKey('toolGroupId') ?? 'default';\n      setToolbarButtons(toolbarService.getButtonSection(toolGroupId));\n    };\n\n    const { unsubscribe } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_MODIFIED,\n      updateToolbar\n    );\n\n    updateToolbar();\n\n    return () => {\n      unsubscribe();\n    };\n  }, [toolbarService, viewportGrid]);\n\n  const onInteraction = useCallback(\n    args => toolbarService.recordInteraction(args),\n    [toolbarService]\n  );\n\n  return (\n    <>\n      {toolbarButtons.map(toolDef => {\n        const { id, Component, componentProps } = toolDef;\n        return (\n          // The margin for separating the tools on the toolbar should go here and NOT in each individual component (button) item.\n          // This allows for the individual items to be included in other UI components where perhaps alternative margins are desired.\n          <div\n            key={id}\n            className={classnames('mr-1')}\n          >\n            <Component\n              id={id}\n              {...componentProps}\n              onInteraction={onInteraction}\n              servicesManager={servicesManager}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router';\n\nimport { ErrorBoundary, UserPreferences, AboutModal, Header, useModal } from '@ohif/ui';\nimport i18n from '@ohif/i18n';\nimport { hotkeys } from '@ohif/core';\nimport { useAppConfig } from '@state';\nimport Toolbar from '../Toolbar/Toolbar';\n\nconst { availableLanguages, defaultLanguage, currentLanguage } = i18n;\n\nfunction ViewerHeader({ hotkeysManager, extensionManager, servicesManager }) {\n  const [appConfig] = useAppConfig();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onClickReturnButton = () => {\n    const { pathname } = location;\n    const dataSourceIdx = pathname.indexOf('/', 1);\n    const query = new URLSearchParams(window.location.search);\n    const configUrl = query.get('configUrl');\n\n    const dataSourceName = pathname.substring(dataSourceIdx + 1);\n    const existingDataSource = extensionManager.getDataSources(dataSourceName);\n\n    const searchQuery = new URLSearchParams();\n    if (dataSourceIdx !== -1 && existingDataSource) {\n      searchQuery.append('datasources', pathname.substring(dataSourceIdx + 1));\n    }\n\n    if (configUrl) {\n      searchQuery.append('configUrl', configUrl);\n    }\n\n    navigate({\n      pathname: '/',\n      search: decodeURIComponent(searchQuery.toString()),\n    });\n  };\n\n  const { t } = useTranslation();\n  const { show, hide } = useModal();\n  const { hotkeyDefinitions, hotkeyDefaults } = hotkeysManager;\n  const versionNumber = process.env.VERSION_NUMBER;\n  const commitHash = process.env.COMMIT_HASH;\n\n  const menuOptions = [\n    {\n      title: t('Header:About'),\n      icon: 'info',\n      onClick: () =>\n        show({\n          content: AboutModal,\n          title: 'About Gradient OHIF Viewer',\n          contentProps: { versionNumber, commitHash },\n        }),\n    },\n    {\n      title: t('Header:Preferences'),\n      icon: 'settings',\n      onClick: () =>\n        show({\n          title: t('UserPreferencesModal:User preferences'),\n          content: UserPreferences,\n          contentProps: {\n            hotkeyDefaults: hotkeysManager.getValidHotkeyDefinitions(hotkeyDefaults),\n            hotkeyDefinitions,\n            currentLanguage: currentLanguage(),\n            availableLanguages,\n            defaultLanguage,\n            onCancel: () => {\n              hotkeys.stopRecord();\n              hotkeys.unpause();\n              hide();\n            },\n            onSubmit: ({ hotkeyDefinitions, language }) => {\n              if (language.value !== currentLanguage().value) {\n                i18n.changeLanguage(language.value);\n              }\n              hotkeysManager.setHotkeys(hotkeyDefinitions);\n              hide();\n            },\n            onReset: () => hotkeysManager.restoreDefaultBindings(),\n            hotkeysModule: hotkeys,\n          },\n        }),\n    },\n  ];\n\n  if (appConfig.oidc) {\n    menuOptions.push({\n      title: t('Header:Logout'),\n      icon: 'power-off',\n      onClick: async () => {\n        navigate(`/logout?redirect_uri=${encodeURIComponent(window.location.href)}`);\n      },\n    });\n  }\n\n  return (\n    <Header\n      menuOptions={menuOptions}\n      isReturnEnabled={!!appConfig.showStudyList}\n      onClickReturnButton={onClickReturnButton}\n      WhiteLabeling={appConfig.whiteLabeling}\n    >\n      <ErrorBoundary context=\"Primary Toolbar\">\n        <div className=\"relative flex justify-center\">\n          <Toolbar servicesManager={servicesManager} />\n        </div>\n      </ErrorBoundary>\n    </Header>\n  );\n}\n\nexport default ViewerHeader;\n","import React, { useEffect, useState } from 'react';\nimport { SidePanel } from '@ohif/ui';\nimport { PanelService, ServicesManager } from '@ohif/core';\n\nexport type SidePanelWithServicesProps = {\n  servicesManager: ServicesManager;\n  side: 'left' | 'right';\n  className: string;\n  activeTabIndex: number;\n  tabs: any;\n};\n\nconst SidePanelWithServices = ({\n  servicesManager,\n  side,\n  className,\n  activeTabIndex: activeTabIndexProp,\n  tabs,\n}) => {\n  const panelService: PanelService = servicesManager?.services?.panelService;\n\n  // Tracks whether this SidePanel has been opened at least once since this SidePanel was inserted into the DOM.\n  // Thus going to the Study List page and back to the viewer resets this flag for a SidePanel.\n  const [hasBeenOpened, setHasBeenOpened] = useState(false);\n  const [activeTabIndex, setActiveTabIndex] = useState(activeTabIndexProp);\n\n  useEffect(() => {\n    if (panelService) {\n      const activatePanelSubscription = panelService.subscribe(\n        panelService.EVENTS.ACTIVATE_PANEL,\n        (activatePanelEvent: Types.ActivatePanelEvent) => {\n          if (!hasBeenOpened || activatePanelEvent.forceActive) {\n            const tabIndex = tabs.findIndex(tab => tab.id === activatePanelEvent.panelId);\n            if (tabIndex !== -1) {\n              setActiveTabIndex(tabIndex);\n            }\n          }\n        }\n      );\n\n      return () => {\n        activatePanelSubscription.unsubscribe();\n      };\n    }\n  }, [tabs, hasBeenOpened, panelService]);\n\n  return (\n    <SidePanel\n      side={side}\n      className={className}\n      activeTabIndex={activeTabIndex}\n      tabs={tabs}\n      onOpen={() => {\n        setHasBeenOpened(true);\n      }}\n    ></SidePanel>\n  );\n};\n\nexport default SidePanelWithServices;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SidePanel, ErrorBoundary, LoadingIndicatorProgress } from '@ohif/ui';\nimport { ServicesManager, HangingProtocolService, CommandsManager } from '@ohif/core';\nimport { useAppConfig } from '@state';\nimport ViewerHeader from './ViewerHeader';\nimport SidePanelWithServices from '../Components/SidePanelWithServices';\n\nfunction ViewerLayout({\n  // From Extension Module Params\n  extensionManager,\n  servicesManager,\n  hotkeysManager,\n  commandsManager,\n  // From Modes\n  viewports,\n  ViewportGridComp,\n  leftPanels = [],\n  rightPanels = [],\n  leftPanelDefaultClosed = false,\n  rightPanelDefaultClosed = false,\n}): React.FunctionComponent {\n  const [appConfig] = useAppConfig();\n\n  const { hangingProtocolService } = servicesManager.services;\n  const [showLoadingIndicator, setShowLoadingIndicator] = useState(appConfig.showLoadingIndicator);\n\n  /**\n   * Set body classes (tailwindcss) that don't allow vertical\n   * or horizontal overflow (no scrolling). Also guarantee window\n   * is sized to our viewport.\n   */\n  useEffect(() => {\n    document.body.classList.add('bg-black');\n    document.body.classList.add('overflow-hidden');\n    return () => {\n      document.body.classList.remove('bg-black');\n      document.body.classList.remove('overflow-hidden');\n    };\n  }, []);\n\n  const getComponent = id => {\n    const entry = extensionManager.getModuleEntry(id);\n\n    if (!entry) {\n      throw new Error(\n        `${id} is not valid for an extension module. Please verify your configuration or ensure that the extension is properly registered. It's also possible that your mode is utilizing a module from an extension that hasn't been included in its dependencies (add the extension to the \"extensionDependencies\" array in your mode's index.js file)`\n      );\n    }\n\n    let content;\n    if (entry && entry.component) {\n      content = entry.component;\n    } else {\n      throw new Error(\n        `No component found from extension ${id}. Check the reference string to the extension in your Mode configuration`\n      );\n    }\n\n    return { entry, content };\n  };\n\n  const getPanelData = id => {\n    const { content, entry } = getComponent(id);\n\n    return {\n      id: entry.id,\n      iconName: entry.iconName,\n      iconLabel: entry.iconLabel,\n      label: entry.label,\n      name: entry.name,\n      content,\n    };\n  };\n\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      HangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n\n      // Todo: right now to set the loading indicator to false, we need to wait for the\n      // hangingProtocolService to finish applying the viewport matching to each viewport,\n      // however, this might not be the only approach to set the loading indicator to false. we need to explore this further.\n      () => {\n        setShowLoadingIndicator(false);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [hangingProtocolService]);\n\n  const getViewportComponentData = viewportComponent => {\n    const { entry } = getComponent(viewportComponent.namespace);\n\n    return {\n      component: entry.component,\n      displaySetsToDisplay: viewportComponent.displaySetsToDisplay,\n    };\n  };\n\n  const leftPanelComponents = leftPanels.map(getPanelData);\n  const rightPanelComponents = rightPanels.map(getPanelData);\n  const viewportComponents = viewports.map(getViewportComponentData);\n\n  return (\n    <div>\n      <ViewerHeader\n        hotkeysManager={hotkeysManager}\n        extensionManager={extensionManager}\n        servicesManager={servicesManager}\n      />\n      <div\n        className=\"relative flex w-full flex-row flex-nowrap items-stretch overflow-hidden bg-black\"\n        style={{ height: 'calc(100vh - 52px' }}\n      >\n        <React.Fragment>\n          {showLoadingIndicator && <LoadingIndicatorProgress className=\"h-full w-full bg-black\" />}\n          {/* LEFT SIDEPANELS */}\n          {leftPanelComponents.length ? (\n            <ErrorBoundary context=\"Left Panel\">\n              <SidePanelWithServices\n                side=\"left\"\n                activeTabIndex={leftPanelDefaultClosed ? null : 0}\n                tabs={leftPanelComponents}\n                servicesManager={servicesManager}\n              />\n            </ErrorBoundary>\n          ) : null}\n          {/* TOOLBAR + GRID */}\n          <div className=\"flex h-full flex-1 flex-col\">\n            <div className=\"relative flex h-full flex-1 items-center justify-center overflow-hidden bg-black\">\n              <ErrorBoundary context=\"Grid\">\n                <ViewportGridComp\n                  servicesManager={servicesManager}\n                  viewportComponents={viewportComponents}\n                  commandsManager={commandsManager}\n                />\n              </ErrorBoundary>\n            </div>\n          </div>\n          {rightPanelComponents.length ? (\n            <ErrorBoundary context=\"Right Panel\">\n              <SidePanelWithServices\n                side=\"right\"\n                activeTabIndex={rightPanelDefaultClosed ? null : 0}\n                tabs={rightPanelComponents}\n                servicesManager={servicesManager}\n              />\n            </ErrorBoundary>\n          ) : null}\n        </React.Fragment>\n      </div>\n    </div>\n  );\n}\n\nViewerLayout.propTypes = {\n  // From extension module params\n  extensionManager: PropTypes.shape({\n    getModuleEntry: PropTypes.func.isRequired,\n  }).isRequired,\n  commandsManager: PropTypes.instanceOf(CommandsManager),\n  servicesManager: PropTypes.instanceOf(ServicesManager),\n  // From modes\n  leftPanels: PropTypes.array,\n  rightPanels: PropTypes.array,\n  leftPanelDefaultClosed: PropTypes.bool.isRequired,\n  rightPanelDefaultClosed: PropTypes.bool.isRequired,\n  /** Responsible for rendering our grid of viewports; provided by consuming application */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  viewports: PropTypes.array,\n};\n\nexport default ViewerLayout;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { StudyBrowser, useImageViewer, useViewportGrid } from '@ohif/ui';\nimport { utils } from '@ohif/core';\nimport { useNavigate } from 'react-router-dom';\n\nconst { sortStudyInstances, formatDate } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowser({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}) {\n  const { hangingProtocolService, displaySetService, uiNotificationService } =\n    servicesManager.services;\n  const navigate = useNavigate();\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message: 'The selected display sets could not be added to the viewport.',\n        type: 'info',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n  }, [StudyInstanceUIDs, dataSource, getStudiesForPatientByMRN, navigate]);\n\n  // // ~~ Initial Thumbnails\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (!imageId || displaySet?.unsupported) {\n        return;\n      }\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n\n      setThumbnailImageSrcMap(prevState => {\n        return { ...prevState, ...newImageSrcEntry };\n      });\n    });\n  }, [StudyInstanceUIDs, dataSource, displaySetService, getImageSrc]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    // TODO: Are we sure `activeDisplaySets` will always be accurate?\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    const mappedDisplaySets = _mapDisplaySets(currentDisplaySets, thumbnailImageSrcMap);\n    sortStudyInstances(mappedDisplaySets);\n\n    setDisplaySets(mappedDisplaySets);\n  }, [StudyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n          if (displaySet?.unsupported) {\n            return;\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (!imageId) {\n            return;\n          }\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n          newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\n            imageId,\n            dSet.initialViewport\n          );\n\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        });\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n    };\n  }, [getImageSrc, dataSource, displaySetService]);\n\n  useEffect(() => {\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(changedDisplaySets, thumbnailImageSrcMap);\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          thumbnailImageSrcMap\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n  }, [StudyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\n\n  const tabs = _createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? // eslint-disable-next-line prettier/prettier\n        [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  const activeDisplaySetInstanceUIDs = viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      servicesManager={servicesManager}\n      activeTabName={activeTabName}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeDisplaySetInstanceUIDs}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n    />\n  );\n}\n\nPanelStudyBrowser.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowser;\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(displaySets, thumbnailImageSrcMap) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n\n      const array =\n        componentType === 'thumbnail' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n\n      array.push({\n        displaySetInstanceUID: ds.displaySetInstanceUID,\n        description: ds.SeriesDescription || '',\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: ds.SeriesDate,\n        seriesTime: ds.SeriesTime,\n        numInstances: ds.numImageFrames,\n        countIcon: ds.countIcon,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        messages: ds.messages,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID: ds.displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n      });\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    // TODO probably others.\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnail';\n}\n\n/**\n *\n * @param {string[]} primaryStudyInstanceUIDs\n * @param {object[]} studyDisplayList\n * @param {string} studyDisplayList.studyInstanceUid\n * @param {string} studyDisplayList.date\n * @param {string} studyDisplayList.description\n * @param {string} studyDisplayList.modalities\n * @param {number} studyDisplayList.numInstances\n * @param {object[]} displaySets\n * @returns tabs - The prop object expected by the StudyBrowser component\n */\nfunction _createStudyBrowserTabs(primaryStudyInstanceUIDs, studyDisplayList, displaySets) {\n  const primaryStudies = [];\n  const recentStudies = [];\n  const allStudies = [];\n\n  studyDisplayList.forEach(study => {\n    const displaySetsForStudy = displaySets.filter(\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\n    );\n    const tabStudy = Object.assign({}, study, {\n      displaySets: displaySetsForStudy,\n    });\n\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\n      primaryStudies.push(tabStudy);\n    } else {\n      // TODO: Filter allStudies to dates within one year of current date\n      recentStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    }\n  });\n\n  const tabs = [\n    {\n      name: 'primary',\n      label: 'Primary',\n      studies: primaryStudies,\n    },\n    {\n      name: 'recent',\n      label: 'Recent',\n      studies: recentStudies,\n    },\n    {\n      name: 'all',\n      label: 'All',\n      studies: allStudies,\n    },\n  ];\n\n  return tabs;\n}\n","/**\n * @param {*} cornerstone\n * @param {*} imageId\n */\nfunction getImageSrcFromImageId(cornerstone, imageId) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId })\n      .then(imageId => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\nexport default getImageSrcFromImageId;\n","async function getStudiesForPatientByMRN(dataSource, qidoForStudyUID) {\n  if (qidoForStudyUID && qidoForStudyUID.length && qidoForStudyUID[0].mrn) {\n    return dataSource.query.studies.search({\n      patientId: qidoForStudyUID[0].mrn,\n    });\n  }\n  console.log('No mrn found for', qidoForStudyUID);\n  return qidoForStudyUID;\n}\n\nexport default getStudiesForPatientByMRN;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  displaySetService,\n  StudyInstanceUID,\n  madeInClient\n) {\n  // TODO: is this already short-circuited by the map of Retrieve promises?\n  if (\n    displaySetService.activeDisplaySets.some(\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n//\nimport PanelStudyBrowser from './PanelStudyBrowser';\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\nimport getStudiesForPatientByMRN from './getStudiesForPatientByMRN';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowser({ commandsManager, extensionManager, servicesManager }) {\n  // TODO: This should be made available a different way; route should have\n  // already determined our datasource\n  const dataSource = extensionManager.getDataSources()[0];\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\n  const _getImageSrcFromImageId = useCallback(\n    _createGetImageSrcFromImageIdFn(extensionManager),\n    []\n  );\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\n    null,\n    dataSource\n  );\n\n  return (\n    <PanelStudyBrowser\n      servicesManager={servicesManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\n/**\n * Grabs cornerstone library reference using a dependent command from\n * the @ohif/extension-cornerstone extension. Then creates a helper function\n * that can take an imageId and return an image src.\n *\n * @param {func} getCommand - CommandManager's getCommand method\n * @returns {func} getImageSrcFromImageId - A utility function powered by\n * cornerstone\n */\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nWrappedPanelStudyBrowser.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n\nimport { LegacyButton, LegacyButtonGroup } from '@ohif/ui';\n\nfunction ActionButtons({ onExportClick, onCreateReportClick }) {\n  const { t } = useTranslation('MeasurementTable');\n\n  return (\n    <React.Fragment>\n      <LegacyButtonGroup\n        color=\"black\"\n        size=\"inherit\"\n      >\n        {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\n        <LegacyButton\n          className=\"px-2 py-2 text-base\"\n          onClick={onExportClick}\n        >\n          {t('Export CSV')}\n        </LegacyButton>\n        <LegacyButton\n          className=\"px-2 py-2 text-base\"\n          onClick={onCreateReportClick}\n        >\n          {t('Create Report')}\n        </LegacyButton>\n      </LegacyButtonGroup>\n    </React.Fragment>\n  );\n}\n\nActionButtons.propTypes = {\n  onExportClick: PropTypes.func,\n  onCreateReportClick: PropTypes.func,\n};\n\nActionButtons.defaultProps = {\n  onExportClick: () => alert('Export'),\n  onCreateReportClick: () => alert('Create Report'),\n};\n\nexport default ActionButtons;\n","import React from 'react';\n\nimport { ButtonEnums, Dialog, Input, Select } from '@ohif/ui';\n\nexport const CREATE_REPORT_DIALOG_RESPONSE = {\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n};\n\nexport default function CreateReportDialogPrompt(uiDialogService, { extensionManager }) {\n  return new Promise(function (resolve, reject) {\n    let dialogId = undefined;\n\n    const _handleClose = () => {\n      // Dismiss dialog\n      uiDialogService.dismiss({ id: dialogId });\n      // Notify of cancel action\n      resolve({\n        action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\n        value: undefined,\n        dataSourceName: undefined,\n      });\n    };\n\n    /**\n     *\n     * @param {string} param0.action - value of action performed\n     * @param {string} param0.value - value from input field\n     */\n    const _handleFormSubmit = ({ action, value }) => {\n      uiDialogService.dismiss({ id: dialogId });\n      switch (action.id) {\n        case 'save':\n          resolve({\n            action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\n            value: value.label,\n            dataSourceName: value.dataSourceName,\n          });\n          break;\n        case 'cancel':\n          resolve({\n            action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\n            value: undefined,\n            dataSourceName: undefined,\n          });\n          break;\n      }\n    };\n\n    const dataSourcesOpts = Object.keys(extensionManager.dataSourceMap)\n      .filter(ds => {\n        const configuration = extensionManager.dataSourceDefs[ds]?.configuration;\n        const supportsStow = configuration?.supportsStow ?? configuration?.wadoRoot;\n        return supportsStow;\n      })\n      .map(ds => {\n        return {\n          value: ds,\n          label: ds,\n          placeHolder: ds,\n        };\n      });\n\n    dialogId = uiDialogService.create({\n      centralize: true,\n      isDraggable: false,\n      content: Dialog,\n      useLastPosition: false,\n      showOverlay: true,\n      contentProps: {\n        title: 'Create Report',\n        value: {\n          label: '',\n          dataSourceName: extensionManager.activeDataSource,\n        },\n        noCloseButton: true,\n        onClose: _handleClose,\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        // TODO: Should be on button press...\n        onSubmit: _handleFormSubmit,\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              uiDialogService.dismiss({ id: dialogId });\n              resolve({\n                action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\n                value: value.label,\n              });\n            }\n          };\n          return (\n            <>\n              {dataSourcesOpts.length > 1 && window.config?.allowMultiSelectExport && (\n                <div>\n                  <label className=\"text-[14px] leading-[1.2] text-white\">Data Source</label>\n                  <Select\n                    closeMenuOnSelect={true}\n                    className=\"border-primary-main  mt-2 bg-black\"\n                    options={dataSourcesOpts}\n                    placeholder={\n                      dataSourcesOpts.find(option => option.value === value.dataSourceName)\n                        .placeHolder\n                    }\n                    value={value.dataSourceName}\n                    onChange={evt => {\n                      setValue(v => ({ ...v, dataSourceName: evt.value }));\n                    }}\n                    isClearable={false}\n                  />\n                </div>\n              )}\n              <div className=\"mt-3\">\n                <Input\n                  autoFocus\n                  label=\"Enter the report name\"\n                  labelClassName=\"text-white text-[14px] leading-[1.2]\"\n                  className=\"border-primary-main bg-black\"\n                  type=\"text\"\n                  value={value.label}\n                  onChange={onChangeHandler}\n                  onKeyPress={onKeyPressHandler}\n                  required\n                />\n              </div>\n            </>\n          );\n        },\n      },\n    });\n  });\n}\n","import React from 'react';\nimport { DicomMetadataStore } from '@ohif/core';\n\n/**\n *\n * @param {*} servicesManager\n */\nasync function createReportAsync({ servicesManager, getReport, reportType = 'measurement' }) {\n  const { displaySetService, uiNotificationService, uiDialogService } = servicesManager.services;\n  const loadingDialogId = uiDialogService.create({\n    showOverlay: true,\n    isDraggable: false,\n    centralize: true,\n    content: Loading,\n  });\n\n  try {\n    const naturalizedReport = await getReport();\n\n    // The \"Mode\" route listens for DicomMetadataStore changes\n    // When a new instance is added, it listens and\n    // automatically calls makeDisplaySets\n    DicomMetadataStore.addInstances([naturalizedReport], true);\n\n    const displaySet = displaySetService.getMostRecentDisplaySet();\n\n    const displaySetInstanceUID = displaySet.displaySetInstanceUID;\n\n    uiNotificationService.show({\n      title: 'Create Report',\n      message: `${reportType} saved successfully`,\n      type: 'success',\n    });\n\n    return [displaySetInstanceUID];\n  } catch (error) {\n    uiNotificationService.show({\n      title: 'Create Report',\n      message: error.message || `Failed to store ${reportType}`,\n      type: 'error',\n    });\n  } finally {\n    uiDialogService.dismiss({ id: loadingDialogId });\n  }\n}\n\nfunction Loading() {\n  return <div className=\"text-primary-active\">Loading...</div>;\n}\n\nexport default createReportAsync;\n","const MIN_SR_SERIES_NUMBER = 4700;\n\nexport default function getNextSRSeriesNumber(displaySetService) {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\n\n  return maxSeriesNumber + 1;\n}\n","import { DisplaySetService, Types } from '@ohif/core';\n\nimport getNextSRSeriesNumber from './getNextSRSeriesNumber';\n\n/**\n * Find an SR having the same series description.\n * This is used by the store service in order to store DICOM SR's having the\n * same Series Description into a single series under consecutive instance numbers\n * That way, they are all organized as a set and could have tools to view\n * \"prior\" SR instances.\n *\n * @param SeriesDescription - is the description to look for\n * @param displaySetService - the display sets to search for DICOM SR in\n * @returns SeriesMetadata from a DICOM SR having the same series description\n */\nexport default function findSRWithSameSeriesDescription(\n  SeriesDescription: string,\n  displaySetService: DisplaySetService\n): Types.SeriesMetadata {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const sameSeries = srDisplaySets.find(ds => ds.SeriesDescription === SeriesDescription);\n  if (sameSeries) {\n    console.log('Storing to same series', sameSeries);\n    const { instance } = sameSeries;\n    const { SeriesInstanceUID, SeriesDescription, SeriesDate, SeriesTime, SeriesNumber, Modality } =\n      instance;\n    return {\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesDate,\n      SeriesTime,\n      SeriesNumber,\n      Modality,\n      InstanceNumber: sameSeries.instances.length + 1,\n    };\n  }\n\n  const SeriesNumber = getNextSRSeriesNumber(displaySetService);\n  return { SeriesDescription, SeriesNumber };\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { utils, ServicesManager } from '@ohif/core';\nimport { MeasurementTable, Dialog, Input, useViewportGrid, ButtonEnums } from '@ohif/ui';\nimport ActionButtons from './ActionButtons';\nimport debounce from 'lodash.debounce';\n\nimport createReportDialogPrompt, {\n  CREATE_REPORT_DIALOG_RESPONSE,\n} from './createReportDialogPrompt';\nimport createReportAsync from '../Actions/createReportAsync';\nimport findSRWithSameSeriesDescription from '../utils/findSRWithSameSeriesDescription';\n\nconst { downloadCSVReport } = utils;\n\nexport default function PanelMeasurementTable({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}): React.FunctionComponent {\n  const { t } = useTranslation('MeasurementTable');\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const { activeViewportId, viewports } = viewportGrid;\n  const { measurementService, uiDialogService, uiNotificationService, displaySetService } = (\n    servicesManager as ServicesManager\n  ).services;\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n\n  useEffect(() => {\n    const debouncedSetDisplayMeasurements = debounce(setDisplayMeasurements, 100);\n    // ~~ Initial\n    setDisplayMeasurements(_getMappedMeasurements(measurementService));\n\n    // ~~ Subscription\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\n    const subscriptions = [];\n\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\n      subscriptions.push(\n        measurementService.subscribe(evt, () => {\n          debouncedSetDisplayMeasurements(_getMappedMeasurements(measurementService));\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n      debouncedSetDisplayMeasurements.cancel();\n    };\n  }, []);\n\n  async function exportReport() {\n    const measurements = measurementService.getMeasurements();\n\n    downloadCSVReport(measurements, measurementService);\n  }\n\n  async function clearMeasurements() {\n    measurementService.clearMeasurements();\n  }\n\n  async function createReport(): Promise<any> {\n    // filter measurements that are added to the active study\n    const activeViewport = viewports.get(activeViewportId);\n    const measurements = measurementService.getMeasurements();\n    const displaySet = displaySetService.getDisplaySetByUID(\n      activeViewport.displaySetInstanceUIDs[0]\n    );\n    const trackedMeasurements = measurements.filter(\n      m => displaySet.StudyInstanceUID === m.referenceStudyUID\n    );\n\n    if (trackedMeasurements.length <= 0) {\n      uiNotificationService.show({\n        title: 'No Measurements',\n        message: 'No Measurements are added to the current Study.',\n        type: 'info',\n        duration: 3000,\n      });\n      return;\n    }\n\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\n      extensionManager,\n    });\n\n    if (promptResult.action === CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT) {\n      const dataSources = extensionManager.getDataSources(promptResult.dataSourceName);\n      const dataSource = dataSources[0];\n\n      const SeriesDescription =\n        // isUndefinedOrEmpty\n        promptResult.value === undefined || promptResult.value === ''\n          ? 'Research Derived Series' // default\n          : promptResult.value; // provided value\n\n      // Reuse an existing series having the same series description to avoid\n      // creating too many series instances.\n      const options = findSRWithSameSeriesDescription(SeriesDescription, displaySetService);\n\n      const getReport = async () => {\n        return commandsManager.runCommand(\n          'storeMeasurements',\n          {\n            measurementData: trackedMeasurements,\n            dataSource,\n            additionalFindingTypes: ['ArrowAnnotate'],\n            options,\n          },\n          'CORNERSTONE_STRUCTURED_REPORT'\n        );\n      };\n\n      return createReportAsync({ servicesManager, getReport });\n    }\n  }\n\n  const jumpToImage = ({ uid, isActive }) => {\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\n\n    onMeasurementItemClickHandler({ uid, isActive });\n  };\n\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\n    const measurement = measurementService.getMeasurement(uid);\n    //Todo: why we are jumping to image?\n    // jumpToImage({ id, isActive });\n\n    const onSubmitHandler = ({ action, value }) => {\n      switch (action.id) {\n        case 'save': {\n          measurementService.update(\n            uid,\n            {\n              ...measurement,\n              ...value,\n            },\n            true\n          );\n        }\n      }\n      uiDialogService.dismiss({ id: 'enter-annotation' });\n    };\n\n    uiDialogService.create({\n      id: 'enter-annotation',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Annotation',\n        noCloseButton: true,\n        value: { label: measurement.label || '' },\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              onSubmitHandler({ value, action: { id: 'save' } });\n            }\n          };\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              id=\"annotation\"\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={onChangeHandler}\n              onKeyPress={onKeyPressHandler}\n            />\n          );\n        },\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n      },\n    });\n  };\n\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\n    if (!isActive) {\n      const measurements = [...displayMeasurements];\n      const measurement = measurements.find(m => m.uid === uid);\n\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\n      measurement.isActive = true;\n      setDisplayMeasurements(measurements);\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title={t(\"Measurements\")}\n          servicesManager={servicesManager}\n          data={displayMeasurements}\n          onClick={jumpToImage}\n          onEdit={onMeasurementItemEditHandler}\n        />\n      </div>\n      <div className=\"flex justify-center p-4\">\n        <ActionButtons\n          onExportClick={exportReport}\n          onClearMeasurementsClick={clearMeasurements}\n          onCreateReportClick={createReport}\n        />\n      </div>\n    </>\n  );\n}\n\nPanelMeasurementTable.propTypes = {\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\n};\n\nfunction _getMappedMeasurements(measurementService) {\n  const measurements = measurementService.getMeasurements();\n\n  const mappedMeasurements = measurements.map((m, index) =>\n    _mapMeasurementToDisplay(m, index, measurementService.VALUE_TYPES)\n  );\n\n  return mappedMeasurements;\n}\n\n/**\n * Map the measurements to the display text.\n * Adds finding and site information to the displayText and/or label,\n * and provides as 'displayText' and 'label', while providing the original\n * values as baseDisplayText and baseLabel\n */\nfunction _mapMeasurementToDisplay(measurement, index, types) {\n  const {\n    displayText: baseDisplayText,\n    uid,\n    label: baseLabel,\n    type,\n    selected,\n    findingSites,\n    finding,\n  } = measurement;\n\n  const firstSite = findingSites?.[0];\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\n  let displayText = baseDisplayText || [];\n  if (findingSites) {\n    const siteText = [];\n    findingSites.forEach(site => {\n      if (site?.text !== label) {\n        siteText.push(site.text);\n      }\n    });\n    displayText = [...siteText, ...displayText];\n  }\n  if (finding && finding?.text !== label) {\n    displayText = [finding.text, ...displayText];\n  }\n\n  return {\n    uid,\n    label,\n    baseLabel,\n    measurementType: type,\n    displayText,\n    baseDisplayText,\n    isActive: selected,\n    finding,\n    findingSites,\n  };\n}\n","import React from 'react';\nimport { WrappedPanelStudyBrowser, PanelMeasurementTable } from './Panels';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const wrappedMeasurementPanel = () => {\n    return (\n      <PanelMeasurementTable\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'tab-studies',\n      iconLabel: 'Studies',\n      label: 'Studies',\n      component: WrappedPanelStudyBrowser.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { vec3 } from 'gl-matrix';\nimport toNumber from '@ohif/core/src/utils/toNumber';\nimport { _getPerpendicularDistance } from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport calculateScanAxisNormal from '../calculateScanAxisNormal';\n\n/**\n * Checks if there is a position shift between consecutive frames\n * @param {*} previousPosition\n * @param {*} actualPosition\n * @param {*} scanAxisNormal\n * @param {*} averageSpacingBetweenFrames\n * @returns\n */\nfunction _checkSeriesPositionShift(\n  previousPosition,\n  actualPosition,\n  scanAxisNormal,\n  averageSpacingBetweenFrames\n) {\n  // predicted position should be the previous position added by the multiplication\n  // of the scanAxisNormal and the average spacing between frames\n  const predictedPosition = vec3.scaleAndAdd(\n    vec3.create(),\n    previousPosition,\n    scanAxisNormal,\n    averageSpacingBetweenFrames\n  );\n  return vec3.distance(actualPosition, predictedPosition) > averageSpacingBetweenFrames;\n}\n\n/**\n * Checks if a series has position shifts between consecutive frames\n * @param {*} instances\n * @returns\n */\nexport default function areAllImagePositionsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImageOrientationPatient = toNumber(instances[0].ImageOrientationPatient);\n  if (!firstImageOrientationPatient) {\n    return false;\n  }\n  const scanAxisNormal = calculateScanAxisNormal(firstImageOrientationPatient);\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\n\n  const averageSpacingBetweenFrames =\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\n\n  let previousImagePositionPatient = firstImagePositionPatient;\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\n\n    if (\n      _checkSeriesPositionShift(\n        previousImagePositionPatient,\n        imagePositionPatient,\n        scanAxisNormal,\n        averageSpacingBetweenFrames\n      )\n    ) {\n      return false;\n    }\n    previousImagePositionPatient = imagePositionPatient;\n  }\n  return true;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * Calculates the scanAxisNormal based on a image orientation vector extract from a frame\n * @param {*} imageOrientation\n * @returns\n */\nexport default function calculateScanAxisNormal(imageOrientation) {\n  const rowCosineVec = vec3.fromValues(\n    imageOrientation[0],\n    imageOrientation[1],\n    imageOrientation[2]\n  );\n  const colCosineVec = vec3.fromValues(\n    imageOrientation[3],\n    imageOrientation[4],\n    imageOrientation[5]\n  );\n  return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n}\n","import areAllImageDimensionsEqual from './areAllImageDimensionsEqual';\nimport areAllImageComponentsEqual from './areAllImageComponentsEqual';\nimport areAllImageOrientationsEqual from './areAllImageOrientationsEqual';\nimport areAllImagePositionsEqual from './areAllImagePositionsEqual';\nimport areAllImageSpacingEqual from './areAllImageSpacingEqual';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Runs various checks in a single frame series\n * @param {*} instances\n * @param {*} warnings\n */\nexport default function checkSingleFrames(\n  instances: Array<any>,\n  messages: DisplaySetMessageList\n): void {\n  if (instances.length > 2) {\n    if (!areAllImageDimensionsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_DIMENSIONS);\n    }\n\n    if (!areAllImageComponentsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_COMPONENTS);\n    }\n\n    if (!areAllImageOrientationsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_ORIENTATIONS);\n    }\n\n    if (!areAllImagePositionsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_POSITION_INFORMATION);\n    }\n    areAllImageSpacingEqual(instances, messages);\n  }\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\n\n/**\n * Check if the frames in a series has different dimensions\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageDimensionsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageRows = toNumber(firstImage.Rows);\n  const firstImageColumns = toNumber(firstImage.Columns);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const { Rows, Columns } = instance;\n\n    if (Rows !== firstImageRows || Columns !== firstImageColumns) {\n      return false;\n    }\n  }\n  return true;\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\n\n/**\n * Check if all voxels in series images has same number of components (samplesPerPixel)\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageComponentsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageSamplesPerPixel = toNumber(firstImage.SamplesPerPixel);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const { SamplesPerPixel } = instance;\n\n    if (SamplesPerPixel !== firstImageSamplesPerPixel) {\n      return false;\n    }\n  }\n  return true;\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\nimport { _isSameOrientation } from '@ohif/core/src/utils/isDisplaySetReconstructable';\n\n/**\n * Check is the series has frames with different orientations\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageOrientationsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageOrientationPatient = toNumber(firstImage.ImageOrientationPatient);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imageOrientationPatient = toNumber(instance.ImageOrientationPatient);\n\n    if (!_isSameOrientation(imageOrientationPatient, firstImageOrientationPatient)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import {\n  _getPerpendicularDistance,\n  _getSpacingIssue,\n  reconstructionIssues,\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage } from '@ohif/core';\nimport toNumber from '@ohif/core/src/utils/toNumber';\nimport { DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Checks if series has spacing issues\n * @param {*} instances\n * @param {*} warnings\n */\nexport default function areAllImageSpacingEqual(\n  instances: Array<any>,\n  messages: DisplaySetMessageList\n): void {\n  if (!instances?.length) {\n    return;\n  }\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\n  if (!firstImagePositionPatient) {\n    return;\n  }\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\n\n  const averageSpacingBetweenFrames =\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\n\n  let previousImagePositionPatient = firstImagePositionPatient;\n\n  const issuesFound = [];\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\n\n    const spacingBetweenFrames = _getPerpendicularDistance(\n      imagePositionPatient,\n      previousImagePositionPatient\n    );\n\n    const spacingIssue = _getSpacingIssue(spacingBetweenFrames, averageSpacingBetweenFrames);\n\n    if (spacingIssue) {\n      const issue = spacingIssue.issue;\n\n      // avoid multiple warning of the same thing\n      if (!issuesFound.includes(issue)) {\n        issuesFound.push(issue);\n        if (issue === reconstructionIssues.MISSING_FRAMES) {\n          messages.addMessage(DisplaySetMessage.CODES.MISSING_FRAMES);\n        } else if (issue === reconstructionIssues.IRREGULAR_SPACING) {\n          messages.addMessage(DisplaySetMessage.CODES.IRREGULAR_SPACING);\n        }\n      }\n      // we just want to find issues not how many\n      if (issuesFound.length > 1) {\n        break;\n      }\n    }\n    previousImagePositionPatient = imagePositionPatient;\n  }\n}\n","import sortInstancesByPosition from '@ohif/core/src/utils/sortInstancesByPosition';\nimport { constructableModalities } from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\nimport checkMultiFrame from './utils/validations/checkMultiframe';\nimport checkSingleFrames from './utils/validations/checkSingleFrames';\n/**\n * Checks if a series is reconstructable to a 3D volume.\n *\n * @param {Object[]} instances An array of `OHIFInstanceMetadata` objects.\n */\nexport default function getDisplaySetMessages(\n  instances: Array<any>,\n  isReconstructable: boolean\n): DisplaySetMessageList {\n  const messages = new DisplaySetMessageList();\n  if (!instances.length) {\n    messages.addMessage(DisplaySetMessage.CODES.NO_VALID_INSTANCES);\n    return;\n  }\n\n  const firstInstance = instances[0];\n  const { Modality, ImageType, NumberOfFrames } = firstInstance;\n  // Due to current requirements, LOCALIZER series doesn't have any messages\n  if (ImageType?.includes('LOCALIZER')) {\n    return messages;\n  }\n\n  if (!constructableModalities.includes(Modality)) {\n    return messages;\n  }\n\n  const isMultiframe = NumberOfFrames > 1;\n  // Can't reconstruct if all instances don't have the ImagePositionPatient.\n  if (!isMultiframe && !instances.every(instance => instance.ImagePositionPatient)) {\n    messages.addMessage(DisplaySetMessage.CODES.NO_POSITION_INFORMATION);\n  }\n\n  const sortedInstances = sortInstancesByPosition(instances);\n\n  isMultiframe\n    ? checkMultiFrame(sortedInstances[0], messages)\n    : checkSingleFrames(sortedInstances, messages);\n\n  if (!isReconstructable) {\n    messages.addMessage(DisplaySetMessage.CODES.NOT_RECONSTRUCTABLE);\n  }\n  return messages;\n}\n","import {\n  hasPixelMeasurements,\n  hasOrientation,\n  hasPosition,\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Check various multi frame issues. It calls OHIF core functions\n * @param {*} multiFrameInstance\n * @param {*} warnings\n */\nexport default function checkMultiFrame(multiFrameInstance, messages: DisplaySetMessageList): void {\n  if (!hasPixelMeasurements(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_PIXEL_MEASUREMENTS);\n  }\n\n  if (!hasOrientation(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_ORIENTATION);\n  }\n\n  if (!hasPosition(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_POSITION_INFORMATION);\n  }\n}\n","import ImageSet from '@ohif/core/src/classes/ImageSet';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n/**\n * Default handler for a instance list with an unsupported sopClassUID\n */\nexport default function getDisplaySetsFromUnsupportedSeries(instances) {\n  const imageSet = new ImageSet(instances);\n  const messages = new DisplaySetMessageList();\n  messages.addMessage(DisplaySetMessage.CODES.UNSUPPORTED_DISPLAYSET);\n  const instance = instances[0];\n\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    FrameRate: instance.FrameTime,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: instance.SeriesDescription || '',\n    Modality: instance.Modality,\n    numImageFrames: instances.length,\n    unsupported: true,\n    SOPClassHandlerId: 'unsupported',\n    isReconstructable: false,\n    messages,\n  });\n  return [imageSet];\n}\n","import { isImage } from '@ohif/core/src/utils/isImage';\nimport sopClassDictionary from '@ohif/core/src/utils/sopClassDictionary';\nimport ImageSet from '@ohif/core/src/classes/ImageSet';\nimport isDisplaySetReconstructable from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { id } from './id';\nimport getDisplaySetMessages from './getDisplaySetMessages';\nimport getDisplaySetsFromUnsupportedSeries from './getDisplaySetsFromUnsupportedSeries';\n\nconst sopClassHandlerName = 'stack';\n\nconst isMultiFrame = instance => {\n  return instance.NumberOfFrames > 1;\n};\n\nconst makeDisplaySet = instances => {\n  const instance = instances[0];\n  const imageSet = new ImageSet(instances);\n\n  const { value: isReconstructable, averageSpacingBetweenFrames } =\n    isDisplaySetReconstructable(instances);\n  // set appropriate attributes to image set...\n  const messages = getDisplaySetMessages(instances, isReconstructable);\n\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    FrameRate: instance.FrameTime,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: instance.SeriesDescription || '',\n    Modality: instance.Modality,\n    isMultiFrame: isMultiFrame(instance),\n    countIcon: isReconstructable ? 'icon-mpr' : undefined,\n    numImageFrames: instances.length,\n    SOPClassHandlerId: `${id}.sopClassHandlerModule.${sopClassHandlerName}`,\n    isReconstructable,\n    messages,\n    averageSpacingBetweenFrames: averageSpacingBetweenFrames || null,\n  });\n\n  // Sort the images in this series if needed\n  const shallSort = true; //!OHIF.utils.ObjectPath.get(Meteor, 'settings.public.ui.sortSeriesByIncomingOrder');\n  if (shallSort) {\n    imageSet.sortBy((a, b) => {\n      // Sort by InstanceNumber (0020,0013)\n      return (parseInt(a.InstanceNumber) || 0) - (parseInt(b.InstanceNumber) || 0);\n    });\n  }\n\n  // Include the first image instance number (after sorted)\n  /*imageSet.setAttribute(\n    'instanceNumber',\n    imageSet.getImage(0).InstanceNumber\n  );*/\n\n  /*const isReconstructable = isDisplaySetReconstructable(series, instances);\n\n  imageSet.isReconstructable = isReconstructable.value;\n\n  if (isReconstructable.missingFrames) {\n    // TODO -> This is currently unused, but may be used for reconstructing\n    // Volumes with gaps later on.\n    imageSet.missingFrames = isReconstructable.missingFrames;\n  }*/\n\n  return imageSet;\n};\n\nconst isSingleImageModality = modality => {\n  return modality === 'CR' || modality === 'MG' || modality === 'DX';\n};\n\nfunction getSopClassUids(instances) {\n  const uniqueSopClassUidsInSeries = new Set();\n  instances.forEach(instance => {\n    uniqueSopClassUidsInSeries.add(instance.SOPClassUID);\n  });\n  const sopClassUids = Array.from(uniqueSopClassUidsInSeries);\n\n  return sopClassUids;\n}\n\n/**\n * Basic SOPClassHandler:\n * - For all Image types that are stackable, create\n *   a displaySet with a stack of images\n *\n * @param {Array} sopClassHandlerModules List of SOP Class Modules\n * @param {SeriesMetadata} series The series metadata object from which the display sets will be created\n * @returns {Array} The list of display sets created for the given series object\n */\nfunction getDisplaySetsFromSeries(instances) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const displaySets = [];\n  const sopClassUids = getSopClassUids(instances);\n\n  // Search through the instances (InstanceMetadata object) of this series\n  // Split Multi-frame instances and Single-image modalities\n  // into their own specific display sets. Place the rest of each\n  // series into another display set.\n  const stackableInstances = [];\n  instances.forEach(instance => {\n    // All imaging modalities must have a valid value for sopClassUid (x00080016) or rows (x00280010)\n    if (!isImage(instance.SOPClassUID) && !instance.Rows) {\n      return;\n    }\n\n    let displaySet;\n\n    if (isMultiFrame(instance)) {\n      displaySet = makeDisplaySet([instance]);\n\n      displaySet.setAttributes({\n        sopClassUids,\n        isClip: true,\n        numImageFrames: instance.NumberOfFrames,\n        instanceNumber: instance.InstanceNumber,\n        acquisitionDatetime: instance.AcquisitionDateTime,\n      });\n      displaySets.push(displaySet);\n    } else if (isSingleImageModality(instance.Modality)) {\n      displaySet = makeDisplaySet([instance]);\n      displaySet.setAttributes({\n        sopClassUids,\n        instanceNumber: instance.InstanceNumber,\n        acquisitionDatetime: instance.AcquisitionDateTime,\n      });\n      displaySets.push(displaySet);\n    } else {\n      stackableInstances.push(instance);\n    }\n  });\n\n  if (stackableInstances.length) {\n    const displaySet = makeDisplaySet(stackableInstances);\n    displaySet.setAttribute('studyInstanceUid', instances[0].StudyInstanceUID);\n    displaySet.setAttributes({\n      sopClassUids,\n    });\n    displaySets.push(displaySet);\n  }\n\n  return displaySets;\n}\n\nconst sopClassUids = [\n  sopClassDictionary.ComputedRadiographyImageStorage,\n  sopClassDictionary.DigitalXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalXRayImageStorageForProcessing,\n  sopClassDictionary.DigitalMammographyXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalMammographyXRayImageStorageForProcessing,\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForProcessing,\n  sopClassDictionary.CTImageStorage,\n  sopClassDictionary.EnhancedCTImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedCTImageStorage,\n  sopClassDictionary.UltrasoundMultiframeImageStorage,\n  sopClassDictionary.MRImageStorage,\n  sopClassDictionary.EnhancedMRImageStorage,\n  sopClassDictionary.EnhancedMRColorImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedMRImageStorage,\n  sopClassDictionary.UltrasoundImageStorage,\n  sopClassDictionary.UltrasoundImageStorageRET,\n  sopClassDictionary.SecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeSingleBitSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeGrayscaleByteSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeGrayscaleWordSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeTrueColorSecondaryCaptureImageStorage,\n  sopClassDictionary.XRayAngiographicImageStorage,\n  sopClassDictionary.EnhancedXAImageStorage,\n  sopClassDictionary.XRayRadiofluoroscopicImageStorage,\n  sopClassDictionary.EnhancedXRFImageStorage,\n  sopClassDictionary.XRay3DAngiographicImageStorage,\n  sopClassDictionary.XRay3DCraniofacialImageStorage,\n  sopClassDictionary.BreastTomosynthesisImageStorage,\n  sopClassDictionary.BreastProjectionXRayImageStorageForPresentation,\n  sopClassDictionary.BreastProjectionXRayImageStorageForProcessing,\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForPresentation,\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForProcessing,\n  sopClassDictionary.NuclearMedicineImageStorage,\n  sopClassDictionary.VLEndoscopicImageStorage,\n  sopClassDictionary.VideoEndoscopicImageStorage,\n  sopClassDictionary.VLMicroscopicImageStorage,\n  sopClassDictionary.VideoMicroscopicImageStorage,\n  sopClassDictionary.VLSlideCoordinatesMicroscopicImageStorage,\n  sopClassDictionary.VLPhotographicImageStorage,\n  sopClassDictionary.VideoPhotographicImageStorage,\n  sopClassDictionary.OphthalmicPhotography8BitImageStorage,\n  sopClassDictionary.OphthalmicPhotography16BitImageStorage,\n  sopClassDictionary.OphthalmicTomographyImageStorage,\n  sopClassDictionary.VLWholeSlideMicroscopyImageStorage,\n  sopClassDictionary.PositronEmissionTomographyImageStorage,\n  sopClassDictionary.EnhancedPETImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedPETImageStorage,\n  sopClassDictionary.RTImageStorage,\n  sopClassDictionary.EnhancedUSVolumeStorage,\n];\n\nfunction getSopClassHandlerModule() {\n  return [\n    {\n      name: sopClassHandlerName,\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n    {\n      name: 'not-supported-display-sets-handler',\n      sopClassUids: [],\n      getDisplaySetsFromSeries: getDisplaySetsFromUnsupportedSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import React from 'react';\n\nexport default function ToolbarDivider() {\n  return <span className=\"border-common-dark mx-2 h-8 w-4 self-center border-l\" />;\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { LayoutSelector as OHIFLayoutSelector, ToolbarButton } from '@ohif/ui';\nimport { ServicesManager } from '@ohif/core';\n\nfunction ToolbarLayoutSelectorWithServices({ servicesManager, ...props }) {\n  const { toolbarService } = servicesManager.services;\n\n  const onSelection = useCallback(\n    props => {\n      toolbarService.recordInteraction({\n        interactionType: 'action',\n        commands: [\n          {\n            commandName: 'setViewportGridLayout',\n            commandOptions: { ...props },\n            context: 'DEFAULT',\n          },\n        ],\n      });\n    },\n    [toolbarService]\n  );\n\n  return (\n    <LayoutSelector\n      {...props}\n      onSelection={onSelection}\n    />\n  );\n}\n\nfunction LayoutSelector({ rows, columns, className, onSelection, ...rest }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const closeOnOutsideClick = () => {\n    if (isOpen) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', closeOnOutsideClick);\n    return () => {\n      window.removeEventListener('click', closeOnOutsideClick);\n    };\n  }, [isOpen]);\n\n  const onInteractionHandler = () => setIsOpen(!isOpen);\n  const DropdownContent = isOpen ? OHIFLayoutSelector : null;\n\n  return (\n    <ToolbarButton\n      id=\"Layout\"\n      label=\"Grid Layout\"\n      icon=\"tool-layout\"\n      onInteraction={onInteractionHandler}\n      className={className}\n      rounded={rest.rounded}\n      dropdownContent={\n        DropdownContent !== null && (\n          <DropdownContent\n            rows={rows}\n            columns={columns}\n            onSelection={onSelection}\n          />\n        )\n      }\n      isActive={isOpen}\n      type=\"toggle\"\n    />\n  );\n}\n\nLayoutSelector.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  onLayoutChange: PropTypes.func,\n  servicesManager: PropTypes.instanceOf(ServicesManager),\n};\n\nLayoutSelector.defaultProps = {\n  rows: 3,\n  columns: 3,\n  onLayoutChange: () => {},\n};\n\nexport default ToolbarLayoutSelectorWithServices;\n","import { SplitButton, Icon, ToolbarButton } from '@ohif/ui';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nfunction ToolbarSplitButtonWithServices({\n  isRadio,\n  isAction,\n  groupId,\n  primary,\n  secondary,\n  items,\n  renderer,\n  onInteraction,\n  servicesManager,\n}) {\n  const { toolbarService } = servicesManager?.services;\n\n  const handleItemClick = (item, index) => {\n    const { id, type, commands } = item;\n    onInteraction({\n      groupId,\n      itemId: id,\n      interactionType: type,\n      commands,\n    });\n\n    setState(state => ({\n      ...state,\n      primary: !isAction && isRadio ? { ...item, index } : state.primary,\n      isExpanded: false,\n      items: getSplitButtonItems(items).filter(item =>\n        isRadio && !isAction ? item.index !== index : true\n      ),\n    }));\n  };\n\n  /* Bubbles up individual item clicks */\n  const getSplitButtonItems = items =>\n    items.map((item, index) => ({\n      ...item,\n      index,\n      onClick: () => handleItemClick(item, index),\n    }));\n\n  const [buttonsState, setButtonState] = useState({\n    primaryToolId: '',\n    toggles: {},\n    groups: {},\n  });\n\n  const [state, setState] = useState({\n    primary,\n    items: getSplitButtonItems(items).filter(item =>\n      isRadio && !isAction ? item.id !== primary.id : true\n    ),\n  });\n\n  const { primaryToolId, toggles } = buttonsState;\n\n  const isPrimaryToggle = state.primary.type === 'toggle';\n\n  const isPrimaryActive =\n    (state.primary.type === 'tool' && primaryToolId === state.primary.id) ||\n    (isPrimaryToggle && toggles[state.primary.id] === true);\n\n  const PrimaryButtonComponent =\n    toolbarService?.getButtonComponentForUIType(state.primary.uiType) ?? ToolbarButton;\n\n  useEffect(() => {\n    const { unsubscribe } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\n      state => {\n        setButtonState({ ...state });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [toolbarService]);\n\n  const updatedItems = state.items.map(item => {\n    const isActive = item.type === 'tool' && primaryToolId === item.id;\n\n    // We could have added the\n    // item.type === 'toggle' && toggles[item.id] === true\n    // too but that makes the button active when the toggle is active under it\n    // which feels weird\n    return {\n      ...item,\n      isActive,\n    };\n  });\n\n  const DefaultListItemRenderer = ({ type, icon, label, t, id }) => {\n    const isActive = type === 'toggle' && toggles[id] === true;\n\n    return (\n      <div\n        className={classNames(\n          'hover:bg-primary-dark flex h-8 w-full flex-row items-center p-3',\n          'whitespace-pre text-base',\n          isActive && 'bg-primary-dark',\n          isActive\n            ? 'text-[#348CFD]'\n            : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n        )}\n      >\n        {icon && (\n          <span className=\"mr-4\">\n            <Icon\n              name={icon}\n              className=\"h-5 w-5\"\n            />\n          </span>\n        )}\n        <span className=\"mr-5\">{t(label)}</span>\n      </div>\n    );\n  };\n\n  const listItemRenderer = renderer || DefaultListItemRenderer;\n\n  return (\n    <SplitButton\n      isRadio={isRadio}\n      isAction={isAction}\n      primary={state.primary}\n      secondary={secondary}\n      items={updatedItems}\n      groupId={groupId}\n      renderer={listItemRenderer}\n      isActive={isPrimaryActive || updatedItems.some(item => item.isActive)}\n      isToggle={isPrimaryToggle}\n      onInteraction={onInteraction}\n      Component={props => (\n        <PrimaryButtonComponent\n          {...props}\n          servicesManager={servicesManager}\n        />\n      )}\n    />\n  );\n}\n\nToolbarSplitButtonWithServices.propTypes = {\n  isRadio: PropTypes.bool,\n  isAction: PropTypes.bool,\n  groupId: PropTypes.string,\n  primary: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\n    uiType: PropTypes.string,\n  }),\n  secondary: PropTypes.shape({\n    id: PropTypes.string,\n    icon: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    tooltip: PropTypes.string.isRequired,\n    isActive: PropTypes.bool,\n  }),\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\n      icon: PropTypes.string,\n      label: PropTypes.string,\n      tooltip: PropTypes.string,\n    })\n  ),\n  renderer: PropTypes.func,\n  onInteraction: PropTypes.func.isRequired,\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      toolbarService: PropTypes.object,\n    }),\n  }),\n};\n\nToolbarSplitButtonWithServices.defaultProps = {\n  isRadio: false,\n  isAction: false,\n};\n\nexport default ToolbarSplitButtonWithServices;\n","import { ToolbarButton } from '@ohif/ui';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ToolbarButtonWithServices({\n  id,\n  type,\n  commands,\n  onInteraction,\n  servicesManager,\n  ...props\n}) {\n  const { toolbarService } = servicesManager?.services || {};\n\n  const [buttonsState, setButtonState] = useState({\n    primaryToolId: '',\n    toggles: {},\n    groups: {},\n  });\n  const { primaryToolId } = buttonsState;\n\n  const isActive =\n    (type === 'tool' && id === primaryToolId) ||\n    (type === 'toggle' && buttonsState.toggles[id] === true);\n\n  useEffect(() => {\n    const { unsubscribe } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\n      state => {\n        setButtonState({ ...state });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [toolbarService]);\n\n  return (\n    <ToolbarButton\n      commands={commands}\n      id={id}\n      type={type}\n      isActive={isActive}\n      onInteraction={onInteraction}\n      {...props}\n    />\n  );\n}\n\nToolbarButtonWithServices.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\n  commands: PropTypes.arrayOf(\n    PropTypes.shape({\n      commandName: PropTypes.string.isRequired,\n      context: PropTypes.string,\n    })\n  ),\n  onInteraction: PropTypes.func.isRequired,\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      toolbarService: PropTypes.shape({\n        subscribe: PropTypes.func.isRequired,\n        state: PropTypes.shape({\n          primaryToolId: PropTypes.string,\n          toggles: PropTypes.objectOf(PropTypes.bool),\n          groups: PropTypes.objectOf(PropTypes.any),\n        }).isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ToolbarButtonWithServices;\n","import { Types } from '@ohif/ui';\nimport { Menu, SelectorProps, MenuItem, ContextMenuProps } from './types';\n\ntype ContextMenuItem = Types.ContextMenuItem;\n\n/**\n * Finds menu by menu id\n *\n * @returns Menu having the menuId\n */\nexport function findMenuById(menus: Menu[], menuId?: string): Menu {\n  if (!menuId) {\n    return;\n  }\n\n  return menus.find(menu => menu.id === menuId);\n}\n\n/**\n * Default finding menu method.  This method will go through\n * the list of menus until it finds the first one which\n * has no selector, OR has the selector, when applied to the\n * check props, return true.\n * The selectorProps are a set of provided properties which can be\n * passed into the selector function to determine when to display a menu.\n * For example, a selector function of:\n * `({displayset}) => displaySet?.SeriesDescription?.indexOf?.('Left')!==-1\n * would match series descriptions containing 'Left'.\n *\n * @param {Object[]} menus List of menus\n * @param {*} subProps\n * @returns\n */\nexport function findMenuDefault(menus: Menu[], subProps: Record<string, unknown>): Menu {\n  if (!menus) {\n    return null;\n  }\n  return menus.find(menu => !menu.selector || menu.selector(subProps.selectorProps));\n}\n\n/**\n * Finds the menu to be used for different scenarios:\n * This will first look for a subMenu with the specified subMenuId\n * Next it will look for the first menu whose selector returns true.\n *\n * @param menus - List of menus\n * @param props - root props\n * @param menuIdFilter - menu id identifier (to be considered on selection)\n *      This is intended to support other types of filtering in the future.\n */\nexport function findMenu(menus: Menu[], props?: Types.IProps, menuIdFilter?: string) {\n  const { subMenu } = props;\n\n  function* findMenuIterator() {\n    yield findMenuById(menus, menuIdFilter || subMenu);\n    yield findMenuDefault(menus, props);\n  }\n\n  const findIt = findMenuIterator();\n\n  let current = findIt.next();\n  let menu = current.value;\n\n  while (!current.done) {\n    menu = current.value;\n\n    if (menu) {\n      findIt.return();\n    }\n    current = findIt.next();\n  }\n\n  console.log('Menu chosen', menu?.id || 'NONE');\n\n  return menu;\n}\n\n/**\n * Returns the menu from a list of possible menus, based on the actual state of component props and tool data nearby.\n * This uses the findMenu command above to first find the appropriate\n * menu, and then it chooses the actual contents of that menu.\n * A menu item can be optional by implementing the 'selector',\n * which will be called with the selectorProps, and if it does not return true,\n * then the item is excluded.\n *\n * Other menus can be delegated to by setting the delegating value to\n * a string id for another menu.  That menu's content will replace the\n * current menu item (only if the item would be included).\n *\n * This allows single id menus to be chosen by id, but have varying contents\n * based on the delegated menus.\n *\n * Finally, for each item, the adaptItem call is made.  This allows\n * items to modify themselves before being displayed, such as\n * incorporating additional information from translation sources.\n * See the `test-mode` examples for details.\n *\n * @param selectorProps\n * @param {*} event event that originates the context menu\n * @param {*} menus List of menus\n * @param {*} menuIdFilter\n * @returns\n */\nexport function getMenuItems(\n  selectorProps: SelectorProps,\n  event: Event,\n  menus: Menu[],\n  menuIdFilter?: string\n): MenuItem[] | void {\n  // Include both the check props and the ...check props as one is used\n  // by the child menu and the other used by the selector function\n  const subProps = { selectorProps, event };\n\n  const menu = findMenu(menus, subProps, menuIdFilter);\n\n  if (!menu) {\n    return undefined;\n  }\n\n  if (!menu.items) {\n    console.warn('Must define items in menu', menu);\n    return [];\n  }\n\n  let menuItems = [];\n  menu.items.forEach(item => {\n    const { delegating, selector, subMenu } = item;\n\n    if (!selector || selector(selectorProps)) {\n      if (delegating) {\n        menuItems = [...menuItems, ...getMenuItems(selectorProps, event, menus, subMenu)];\n      } else {\n        const toAdd = adaptItem(item, subProps);\n        menuItems.push(toAdd);\n      }\n    }\n  });\n\n  return menuItems;\n}\n\n/**\n * Returns item adapted to be consumed by ContextMenu component\n * and then goes through the item to add action behaviour for clicking the item,\n * making it compatible with the default ContextMenu display.\n *\n * @param {Object} item\n * @param {Object} subProps\n * @returns a MenuItem that is compatible with the base ContextMenu\n *    This requires having a label and set of actions to be called.\n */\nexport function adaptItem(item: MenuItem, subProps: ContextMenuProps): ContextMenuItem {\n  const newItem: ContextMenuItem = {\n    ...item,\n    value: subProps.selectorProps?.value,\n  };\n\n  if (item.actionType === 'ShowSubMenu' && !newItem.iconRight) {\n    newItem.iconRight = 'chevron-menu';\n  }\n  if (!item.action) {\n    newItem.action = (itemRef, componentProps) => {\n      const { event = {} } = componentProps;\n      const { detail = {} } = event;\n      newItem.element = detail.element;\n\n      componentProps.onClose();\n      const action = componentProps[`on${itemRef.actionType || 'Default'}`];\n      if (action) {\n        action.call(componentProps, newItem, itemRef, subProps);\n      } else {\n        console.warn('No action defined for', itemRef);\n      }\n    };\n  }\n\n  return newItem;\n}\n","import * as ContextMenuItemsBuilder from './ContextMenuItemsBuilder';\nimport ContextMenu from '../../../../platform/ui/src/components/ContextMenu/ContextMenu';\nimport { CommandsManager, ServicesManager, Types } from '@ohif/core';\nimport { Menu, MenuItem, Point, ContextMenuProps } from './types';\n\n/**\n * The context menu controller is a helper class that knows how\n * to manage context menus based on the UI Customization Service.\n * There are a few parts to this:\n *    1. Basic controls to manage displaying and hiding context menus\n *    2. Menu selection services, which use the UI customization service\n *       to choose which menu to display\n *    3. Menu item adapter services to convert menu items into displayable and actionable items.\n *\n * The format for a menu is defined in the exported type MenuItem\n */\nexport default class ContextMenuController {\n  commandsManager: CommandsManager;\n  services: Types.Services;\n  menuItems: Menu[] | MenuItem[];\n\n  constructor(servicesManager: ServicesManager, commandsManager: CommandsManager) {\n    this.services = servicesManager.services as Obj;\n    this.commandsManager = commandsManager;\n  }\n\n  closeContextMenu() {\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\n  }\n\n  /**\n   * Figures out which context menu is appropriate to display and shows it.\n   *\n   * @param contextMenuProps - the context menu properties, see ./types.ts\n   * @param viewportElement - the DOM element this context menu is related to\n   * @param defaultPointsPosition - a default position to show the context menu\n   */\n  showContextMenu(\n    contextMenuProps: ContextMenuProps,\n    viewportElement,\n    defaultPointsPosition\n  ): void {\n    if (!this.services.uiDialogService) {\n      console.warn('Unable to show dialog; no UI Dialog Service available.');\n      return;\n    }\n\n    const { event, subMenu, menuId, menus, selectorProps } = contextMenuProps;\n\n    console.log('Getting items from', menus);\n    const items = ContextMenuItemsBuilder.getMenuItems(\n      selectorProps || contextMenuProps,\n      event,\n      menus,\n      menuId\n    );\n\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\n    this.services.uiDialogService.create({\n      id: 'context-menu',\n      isDraggable: false,\n      preservePosition: false,\n      preventCutOf: true,\n      defaultPosition: ContextMenuController._getDefaultPosition(\n        defaultPointsPosition,\n        event?.detail,\n        viewportElement\n      ),\n      event,\n      content: ContextMenu,\n\n      // This naming is part of the uiDialogService convention\n      // Clicking outside simply closes the dialog box.\n      onClickOutside: () => this.services.uiDialogService.dismiss({ id: 'context-menu' }),\n\n      contentProps: {\n        items,\n        selectorProps,\n        menus,\n        event,\n        subMenu,\n        eventData: event?.detail,\n\n        onClose: () => {\n          this.services.uiDialogService.dismiss({ id: 'context-menu' });\n        },\n\n        /**\n         * Displays a sub-menu, removing this menu\n         * @param {*} item\n         * @param {*} itemRef\n         * @param {*} subProps\n         */\n        onShowSubMenu: (item, itemRef, subProps) => {\n          if (!itemRef.subMenu) {\n            console.warn('No submenu defined for', item, itemRef, subProps);\n            return;\n          }\n          this.showContextMenu(\n            {\n              ...contextMenuProps,\n              menuId: itemRef.subMenu,\n            },\n            viewportElement,\n            defaultPointsPosition\n          );\n        },\n\n        // Default is to run the specified commands.\n        onDefault: (item, itemRef, subProps) => {\n          this.commandsManager.run(item, {\n            ...selectorProps,\n            ...itemRef,\n            subProps,\n          });\n        },\n      },\n    });\n  }\n\n  static getDefaultPosition = (): Point => {\n    return {\n      x: 0,\n      y: 0,\n    };\n  };\n\n  static _getEventDefaultPosition = eventDetail => ({\n    x: eventDetail && eventDetail.currentPoints.client[0],\n    y: eventDetail && eventDetail.currentPoints.client[1],\n  });\n\n  static _getElementDefaultPosition = element => {\n    if (element) {\n      const boundingClientRect = element.getBoundingClientRect();\n      return {\n        x: boundingClientRect.x,\n        y: boundingClientRect.y,\n      };\n    }\n\n    return {\n      x: undefined,\n      y: undefined,\n    };\n  };\n\n  static _getCanvasPointsPosition = (points = [], element) => {\n    const viewerPos = ContextMenuController._getElementDefaultPosition(element);\n\n    for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\n      const point = {\n        x: points[pointIndex][0] || points[pointIndex]['x'],\n        y: points[pointIndex][1] || points[pointIndex]['y'],\n      };\n      if (\n        ContextMenuController._isValidPosition(point) &&\n        ContextMenuController._isValidPosition(viewerPos)\n      ) {\n        return {\n          x: point.x + viewerPos.x,\n          y: point.y + viewerPos.y,\n        };\n      }\n    }\n  };\n\n  static _isValidPosition = (source): boolean => {\n    return source && typeof source.x === 'number' && typeof source.y === 'number';\n  };\n\n  /**\n   * Returns the context menu default position. It look for the positions of: canvasPoints (got from selected), event that triggers it, current viewport element\n   */\n  static _getDefaultPosition = (canvasPoints, eventDetail, viewerElement) => {\n    function* getPositionIterator() {\n      yield ContextMenuController._getCanvasPointsPosition(canvasPoints, viewerElement);\n      yield ContextMenuController._getEventDefaultPosition(eventDetail);\n      yield ContextMenuController._getElementDefaultPosition(viewerElement);\n      yield ContextMenuController.getDefaultPosition();\n    }\n\n    const positionIterator = getPositionIterator();\n\n    let current = positionIterator.next();\n    let position = current.value;\n\n    while (!current.done) {\n      position = current.value;\n\n      if (ContextMenuController._isValidPosition(position)) {\n        positionIterator.return();\n      }\n      current = positionIterator.next();\n    }\n\n    return position;\n  };\n}\n","const defaultContextMenu = {\n  id: 'measurementsContextMenu',\n  customizationType: 'ohif.contextMenu',\n  menus: [\n    // Get the items from the UI Customization for the menu name (and have a custom name)\n    {\n      id: 'forExistingMeasurement',\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          label: 'Delete measurement',\n          commands: [\n            {\n              commandName: 'deleteMeasurement',\n            },\n          ],\n        },\n        {\n          label: 'Add Label',\n          commands: [\n            {\n              commandName: 'setMeasurementLabel',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport default defaultContextMenu;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { VariableSizeList as List } from 'react-window';\nimport classNames from 'classnames';\nimport debounce from 'lodash.debounce';\n\nconst lineHeightPx = 20;\nconst lineHeightClassName = `leading-[${lineHeightPx}px]`;\nconst rowVerticalPaddingPx = 10;\nconst rowBottomBorderPx = 1;\nconst rowVerticalPaddingStyle = { padding: `${rowVerticalPaddingPx}px 0` };\nconst rowStyle = {\n  borderBottomWidth: `${rowBottomBorderPx}px`,\n  ...rowVerticalPaddingStyle,\n};\n\nfunction ColumnHeaders({ tagRef, vrRef, keywordRef, valueRef }) {\n  return (\n    <div\n      className={classNames(\n        'bg-secondary-dark ohif-scrollbar flex w-full flex-row overflow-y-scroll'\n      )}\n      style={rowVerticalPaddingStyle}\n    >\n      <div className=\"w-4/24 px-3\">\n        <label\n          ref={tagRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Tag</span>\n        </label>\n      </div>\n      <div className=\"w-2/24 px-3\">\n        <label\n          ref={vrRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">VR</span>\n        </label>\n      </div>\n      <div className=\"w-6/24 px-3\">\n        <label\n          ref={keywordRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Keyword</span>\n        </label>\n      </div>\n      <div className=\"w-5/24 grow px-3\">\n        <label\n          ref={valueRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Value</span>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction DicomTagTable({ rows }) {\n  const listRef = useRef();\n  const canvasRef = useRef();\n\n  const [tagHeaderElem, setTagHeaderElem] = useState(null);\n  const [vrHeaderElem, setVrHeaderElem] = useState(null);\n  const [keywordHeaderElem, setKeywordHeaderElem] = useState(null);\n  const [valueHeaderElem, setValueHeaderElem] = useState(null);\n\n  // Here the refs are inturn stored in state to trigger a render of the table.\n  // This virtualized table does NOT render until the header is rendered because the header column widths are used to determine the row heights in the table.\n  // Therefore whenever the refs change (in particular the first time the refs are set), we want to trigger a render of the table.\n  const tagRef = elem => {\n    if (elem) {\n      setTagHeaderElem(elem);\n    }\n  };\n  const vrRef = elem => {\n    if (elem) {\n      setVrHeaderElem(elem);\n    }\n  };\n  const keywordRef = elem => {\n    if (elem) {\n      setKeywordHeaderElem(elem);\n    }\n  };\n  const valueRef = elem => {\n    if (elem) {\n      setValueHeaderElem(elem);\n    }\n  };\n\n  /**\n   * When new rows are set, scroll to the top and reset the virtualization.\n   */\n  useEffect(() => {\n    if (!listRef?.current) {\n      return;\n    }\n\n    listRef.current.scrollTo(0);\n    listRef.current.resetAfterIndex(0);\n  }, [rows]);\n\n  /**\n   * When the browser window resizes, update the row virtualization (i.e. row heights)\n   */\n  useEffect(() => {\n    const debouncedResize = debounce(() => listRef.current.resetAfterIndex(0), 100);\n\n    window.addEventListener('resize', debouncedResize);\n\n    return () => {\n      debouncedResize.cancel();\n      window.removeEventListener('resize', debouncedResize);\n    };\n  }, []);\n\n  const Row = useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n\n      return (\n        <div\n          style={{ ...style, ...rowStyle }}\n          className={classNames(\n            'hover:bg-secondary-main border-secondary-light flex w-full flex-row items-center break-all bg-black text-base transition duration-300',\n            lineHeightClassName\n          )}\n          key={`DICOMTagRow-${index}`}\n        >\n          <div className=\"w-4/24 px-3\">{row[0]}</div>\n          <div className=\"w-2/24 px-3\">{row[1]}</div>\n          <div className=\"w-6/24 px-3\">{row[2]}</div>\n          <div className=\"w-5/24 grow px-3\">{row[3]}</div>\n        </div>\n      );\n    },\n    [rows]\n  );\n\n  /**\n   * Whenever any one of the column headers is set, then the header is rendered.\n   * Here we chose the tag header.\n   */\n  const isHeaderRendered = useCallback(() => tagHeaderElem !== null, [tagHeaderElem]);\n\n  /**\n   * Get the item/row size. We use the header column widths to calculate the various row heights.\n   * @param index the row index\n   * @returns the row height\n   */\n  const getItemSize = useCallback(\n    index => {\n      const headerWidths = [\n        tagHeaderElem.offsetWidth,\n        vrHeaderElem.offsetWidth,\n        keywordHeaderElem.offsetWidth,\n        valueHeaderElem.offsetWidth,\n      ];\n\n      const context = canvasRef.current.getContext('2d');\n      context.font = getComputedStyle(canvasRef.current).font;\n\n      return rows[index]\n        .map((colText, index) => {\n          const colOneLineWidth = context.measureText(colText).width;\n          const numLines = Math.ceil(colOneLineWidth / headerWidths[index]);\n          return numLines * lineHeightPx + 2 * rowVerticalPaddingPx + rowBottomBorderPx;\n        })\n        .reduce((maxHeight, colHeight) => Math.max(maxHeight, colHeight));\n    },\n    [rows, keywordHeaderElem, tagHeaderElem, valueHeaderElem, vrHeaderElem]\n  );\n\n  return (\n    <div>\n      <canvas\n        style={{ visibility: 'hidden', position: 'absolute' }}\n        className=\"text-base\"\n        ref={canvasRef}\n      />\n      <ColumnHeaders\n        tagRef={tagRef}\n        vrRef={vrRef}\n        keywordRef={keywordRef}\n        valueRef={valueRef}\n      />\n      <div\n        className=\"relative m-auto border-2 border-black bg-black\"\n        style={{ height: '32rem' }}\n      >\n        {isHeaderRendered() && (\n          <List\n            ref={listRef}\n            height={500}\n            itemCount={rows.length}\n            itemSize={getItemSize}\n            width={'100%'}\n            className=\"ohif-scrollbar\"\n          >\n            {Row}\n          </List>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default DicomTagTable;\n","import dcmjs from 'dcmjs';\nimport moment from 'moment';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { classes } from '@ohif/core';\nimport { InputRange, Select, Typography, InputFilterText } from '@ohif/ui';\nimport debounce from 'lodash.debounce';\n\nimport DicomTagTable from './DicomTagTable';\nimport './DicomTagBrowser.css';\n\nconst { ImageSet } = classes;\nconst { DicomMetaDictionary } = dcmjs.data;\nconst { nameMap } = DicomMetaDictionary;\n\nconst DicomTagBrowser = ({ displaySets, displaySetInstanceUID }) => {\n  // The column indices that are to be excluded during a filter of the table.\n  // At present the column indices are:\n  // 0: DICOM tag\n  // 1: VR\n  // 2: Keyword\n  // 3: Value\n  const excludedColumnIndicesForFilter: Set<number> = new Set([1]);\n\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] =\n    useState(displaySetInstanceUID);\n  const [instanceNumber, setInstanceNumber] = useState(1);\n  const [filterValue, setFilterValue] = useState('');\n\n  const onSelectChange = value => {\n    setSelectedDisplaySetInstanceUID(value.value);\n    setInstanceNumber(1);\n  };\n\n  const activeDisplaySet = displaySets.find(\n    ds => ds.displaySetInstanceUID === selectedDisplaySetInstanceUID\n  );\n\n  const isImageStack = _isImageStack(activeDisplaySet);\n  const showInstanceList = isImageStack && activeDisplaySet.images.length > 1;\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => a.SeriesNumber - b.SeriesNumber);\n    return displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDate,\n        SeriesTime,\n        SeriesNumber,\n        SeriesDescription,\n        Modality,\n      } = displaySet;\n\n      /* Map to display representation */\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0];\n      const date = moment(dateStr, 'YYYYMMDD:HHmmss');\n      const displayDate = date.format('ddd, MMM Do YYYY');\n\n      return {\n        value: displaySetInstanceUID,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate,\n      };\n    });\n  }, [displaySets]);\n\n  const rows = useMemo(() => {\n    let metadata;\n    if (isImageStack) {\n      metadata = activeDisplaySet.images[instanceNumber - 1];\n    } else {\n      metadata = activeDisplaySet.instance || activeDisplaySet;\n    }\n    const tags = getSortedTags(metadata);\n    return getFormattedRowsFromTags(tags, metadata);\n  }, [instanceNumber, selectedDisplaySetInstanceUID]);\n\n  const filteredRows = useMemo(() => {\n    if (!filterValue) {\n      return rows;\n    }\n\n    const filterValueLowerCase = filterValue.toLowerCase();\n    return rows.filter(row => {\n      return row.reduce((keepRow, col, colIndex) => {\n        if (keepRow) {\n          // We are already keeping the row, why do more work so return now.\n          return keepRow;\n        }\n\n        if (excludedColumnIndicesForFilter.has(colIndex)) {\n          return keepRow;\n        }\n\n        return keepRow || col.toLowerCase().includes(filterValueLowerCase);\n      }, false);\n    });\n  }, [rows, filterValue]);\n\n  const debouncedSetFilterValue = useMemo(() => {\n    return debounce(setFilterValue, 200);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      debouncedSetFilterValue?.cancel();\n    };\n  }, []);\n\n  return (\n    <div className=\"dicom-tag-browser-content\">\n      <div className=\"mb-6 flex flex-row items-center pl-1\">\n        <div className=\"flex w-1/2 flex-row items-center\">\n          <Typography\n            variant=\"subtitle\"\n            className=\"mr-4\"\n          >\n            Series\n          </Typography>\n          <div className=\"mr-8 grow\">\n            <Select\n              id=\"display-set-selector\"\n              isClearable={false}\n              onChange={onSelectChange}\n              options={displaySetList}\n              value={displaySetList.find(ds => ds.value === selectedDisplaySetInstanceUID)}\n              className=\"text-white\"\n            />\n          </div>\n        </div>\n        <div className=\"flex w-1/2 flex-row items-center\">\n          {showInstanceList && (\n            <Typography\n              variant=\"subtitle\"\n              className=\"mr-4\"\n            >\n              Instance Number\n            </Typography>\n          )}\n          {showInstanceList && (\n            <div className=\"grow\">\n              <InputRange\n                value={instanceNumber}\n                key={selectedDisplaySetInstanceUID}\n                onChange={value => {\n                  setInstanceNumber(parseInt(value));\n                }}\n                minValue={1}\n                maxValue={activeDisplaySet.images.length}\n                step={1}\n                inputClassName=\"w-full\"\n                labelPosition=\"left\"\n                trackColor={'#3a3f99'}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"h-1 w-full bg-black\"></div>\n      <div className=\"my-3 flex w-1/2 flex-row\">\n        <InputFilterText\n          className=\"mr-8 block w-full\"\n          placeholder=\"Search metadata...\"\n          onDebounceChange={setFilterValue}\n        ></InputFilterText>\n      </div>\n      <DicomTagTable rows={filteredRows} />\n    </div>\n  );\n};\n\nfunction getFormattedRowsFromTags(tags, metadata) {\n  const rows = [];\n\n  tags.forEach(tagInfo => {\n    if (tagInfo.vr === 'SQ') {\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, '']);\n\n      const { values } = tagInfo;\n\n      values.forEach((item, index) => {\n        const formatedRowsFromTags = getFormattedRowsFromTags(item, metadata);\n\n        rows.push([`${item[0].tagIndent}(FFFE,E000)`, '', `Item #${index}`, '']);\n\n        rows.push(...formatedRowsFromTags);\n      });\n    } else {\n      if (tagInfo.vr === 'xs') {\n        try {\n          const tag = dcmjs.data.Tag.fromPString(tagInfo.tag).toCleanString();\n          const originalTagInfo = metadata[tag];\n          tagInfo.vr = originalTagInfo.vr;\n        } catch (error) {\n          console.error(`Failed to parse value representation for tag '${tagInfo.keyword}'`);\n        }\n      }\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, tagInfo.value]);\n    }\n  });\n\n  return rows;\n}\n\nfunction getSortedTags(metadata) {\n  const tagList = getRows(metadata);\n\n  // Sort top level tags, sequence groups are sorted when created.\n  _sortTagList(tagList);\n\n  return tagList;\n}\n\nfunction getRows(metadata, depth = 0) {\n  // Tag, Type, Value, Keyword\n\n  const keywords = Object.keys(metadata);\n\n  let tagIndent = '';\n\n  for (let i = 0; i < depth; i++) {\n    tagIndent += '>';\n  }\n\n  if (depth > 0) {\n    tagIndent += ' '; // If indented, add a space after the indents.\n  }\n\n  const rows = [];\n  for (let i = 0; i < keywords.length; i++) {\n    let keyword = keywords[i];\n\n    if (keyword === '_vrMap') {\n      continue;\n    }\n\n    const tagInfo = nameMap[keyword];\n\n    let value = metadata[keyword];\n\n    if (tagInfo && tagInfo.vr === 'SQ') {\n      const sequenceAsArray = toArray(value);\n\n      // Push line defining the sequence\n\n      const sequence = {\n        tag: tagInfo.tag,\n        tagIndent,\n        vr: tagInfo.vr,\n        keyword,\n        values: [],\n      };\n\n      rows.push(sequence);\n\n      if (value === null) {\n        // Type 2 Sequence\n        continue;\n      }\n\n      sequenceAsArray.forEach(item => {\n        const sequenceRows = getRows(item, depth + 1);\n\n        if (sequenceRows.length) {\n          // Sort the sequence group.\n          _sortTagList(sequenceRows);\n          sequence.values.push(sequenceRows);\n        }\n      });\n\n      continue;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length > 0 && typeof value[0] != 'object') {\n        value = value.join('\\\\');\n      }\n    }\n\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n\n    if (typeof value !== 'string') {\n      if (value === null) {\n        value = ' ';\n      } else {\n        if (typeof value === 'object') {\n          if (value.InlineBinary) {\n            value = 'Inline Binary';\n          } else if (value.BulkDataURI) {\n            value = `Bulk Data URI`; //: ${value.BulkDataURI}`;\n          } else if (value.Alphabetic) {\n            value = value.Alphabetic;\n          } else {\n            console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\n            console.warn(value);\n            value = ' ';\n          }\n        } else {\n          console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\n          value = ' ';\n        }\n      }\n    }\n\n    // tag / vr/ keyword/ value\n\n    // Remove retired tags\n    keyword = keyword.replace('RETIRED_', '');\n    if (tagInfo) {\n      rows.push({\n        tag: tagInfo.tag,\n        tagIndent,\n        vr: tagInfo.vr,\n        keyword,\n        value,\n      });\n    } else {\n      // skip properties without hex tag numbers\n      const regex = /[0-9A-Fa-f]{6}/g;\n      if (keyword.match(regex)) {\n        const tag = `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`;\n        rows.push({\n          tag,\n          tagIndent,\n          vr: '',\n          keyword: 'Private Tag',\n          value,\n        });\n      }\n    }\n  }\n\n  return rows;\n}\n\nfunction _isImageStack(displaySet) {\n  return displaySet instanceof ImageSet;\n}\n\nfunction toArray(objectOrArray) {\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nfunction _sortTagList(tagList) {\n  tagList.sort((a, b) => {\n    if (a.tag < b.tag) {\n      return -1;\n    }\n\n    return 1;\n  });\n}\n\nexport default DicomTagBrowser;\n","import { HangingProtocolService, StateSyncService, Types } from '@ohif/core';\n\nexport type ReturnType = {\n  hangingProtocolStageIndexMap: Record<string, Types.HangingProtocol.HPInfo>;\n  viewportGridStore: Record<string, unknown>;\n  displaySetSelectorMap: Record<string, string>;\n};\n\n/**\n * Calculates a set of state information for hanging protocols and viewport grid\n * which defines the currently applied hanging protocol state.\n * @param state is the viewport grid state\n * @param syncService is the state sync service to use for getting existing state\n * @returns Set of states that can be applied to the state sync to remember\n *   the current view state.\n */\nconst reuseCachedLayout = (\n  state,\n  hangingProtocolService: HangingProtocolService,\n  syncService: StateSyncService\n): ReturnType => {\n  const { activeViewportId } = state;\n  const { protocol } = hangingProtocolService.getActiveProtocol();\n  const hpInfo = hangingProtocolService.getState();\n  const { protocolId, stageIndex, activeStudyUID } = hpInfo;\n\n  const syncState = syncService.getState();\n  const viewportGridStore = { ...syncState.viewportGridStore };\n  const displaySetSelectorMap = { ...syncState.displaySetSelectorMap };\n\n  const stage = protocol.stages[stageIndex];\n  const storeId = `${activeStudyUID}:${protocolId}:${stageIndex}`;\n  const cacheId = `${activeStudyUID}:${protocolId}`;\n  const hangingProtocolStageIndexMap = {\n    ...syncState.hangingProtocolStageIndexMap,\n  };\n  const { rows, columns } = stage.viewportStructure.properties;\n  const custom =\n    stage.viewports.length !== state.viewports.size ||\n    state.layout.numRows !== rows ||\n    state.layout.numCols !== columns;\n\n  hangingProtocolStageIndexMap[cacheId] = hpInfo;\n\n  if (storeId && custom) {\n    viewportGridStore[storeId] = { ...state };\n  }\n\n  state.viewports.forEach((viewport, viewportId) => {\n    const { displaySetOptions, displaySetInstanceUIDs } = viewport;\n    if (!displaySetOptions) {\n      return;\n    }\n    for (let i = 0; i < displaySetOptions.length; i++) {\n      const displaySetUID = displaySetInstanceUIDs[i];\n      if (!displaySetUID) {\n        continue;\n      }\n      if (viewportId === activeViewportId && i === 0) {\n        displaySetSelectorMap[`${activeStudyUID}:activeDisplaySet:0`] = displaySetUID;\n      }\n      if (displaySetOptions[i]?.id) {\n        displaySetSelectorMap[\n          `${activeStudyUID}:${displaySetOptions[i].id}:${\n            displaySetOptions[i].matchedDisplaySetsIndex || 0\n          }`\n        ] = displaySetUID;\n      }\n    }\n  });\n\n  return {\n    hangingProtocolStageIndexMap,\n    viewportGridStore,\n    displaySetSelectorMap,\n  };\n};\n\nexport default reuseCachedLayout;\n","import { StateSyncService } from '@ohif/core';\n\n/**\n * This find or create viewport is paired with the reduce results from\n * below, and the action of this viewport is to look for previously filled\n * viewports, and to reuse by position id.  If there is no filled viewport,\n * then one can be re-used from the display set if it isn't going to be displayed.\n * @param hangingProtocolService - bound parameter supplied before using this\n * @param viewportsByPosition - bound parameter supplied before using this\n * @param position - the position in the grid to retrieve\n * @param positionId - the current position on screen to retrieve\n * @param options - the set of options used, so that subsequent calls can\n *                  store state that is reset by the setLayout.\n *                  This class uses the options to store the already viewed\n *                  display sets, filling it initially with the pre-existing viewports.\n */\nexport const findOrCreateViewport = (\n  hangingProtocolService,\n  viewportsByPosition,\n  position: number,\n  positionId: string,\n  options: Record<string, unknown>\n) => {\n  const byPositionViewport = viewportsByPosition?.[positionId];\n  if (byPositionViewport) {\n    return { ...byPositionViewport };\n  }\n  const { protocolId, stageIndex } = hangingProtocolService.getState();\n\n  // Setup the initial in display correctly for initial view/select\n  if (!options.inDisplay) {\n    options.inDisplay = [...viewportsByPosition.initialInDisplay];\n  }\n  // See if there is a default viewport for new views.\n  const missing = hangingProtocolService.getMissingViewport(protocolId, stageIndex, options);\n  if (missing) {\n    const displaySetInstanceUIDs = missing.displaySetsInfo.map(it => it.displaySetInstanceUID);\n    options.inDisplay.push(...displaySetInstanceUIDs);\n    return {\n      displaySetInstanceUIDs,\n      displaySetOptions: missing.displaySetsInfo.map(it => it.displaySetOptions),\n      viewportOptions: {\n        ...missing.viewportOptions,\n      },\n    };\n  }\n  return {};\n};\n\n/**\n * Records the information on what viewports are displayed in which position.\n * Also records what instances from the existing positions are going to be in\n * view initially.\n * @param state is the viewport grid state\n * @param syncService is the state sync service to use for getting existing state\n * @returns Set of states that can be applied to the state sync to remember\n *   the current view state.\n */\nconst findViewportsByPosition = (\n  state,\n  { numRows, numCols },\n  syncService: StateSyncService\n): Record<string, Record<string, unknown>> => {\n  const { viewports } = state;\n  const syncState = syncService.getState();\n  const viewportsByPosition = { ...syncState.viewportsByPosition };\n  const initialInDisplay = [];\n\n  viewports.forEach(viewport => {\n    if (viewport.positionId) {\n      const storedViewport = {\n        ...viewport,\n        viewportOptions: { ...viewport.viewportOptions },\n      };\n      viewportsByPosition[viewport.positionId] = storedViewport;\n    }\n  });\n\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      const positionId = `${col}-${row}`;\n      const viewport = viewportsByPosition[positionId];\n      if (viewport?.displaySetInstanceUIDs) {\n        initialInDisplay.push(...viewport.displaySetInstanceUIDs);\n      }\n    }\n  }\n\n  // Store the initially displayed elements\n  viewportsByPosition.initialInDisplay = initialInDisplay;\n\n  return { viewportsByPosition };\n};\n\nexport default findViewportsByPosition;\n","import { ServicesManager, utils, Types } from '@ohif/core';\n\nimport { ContextMenuController, defaultContextMenu } from './CustomizableContextMenu';\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser';\nimport reuseCachedLayouts from './utils/reuseCachedLayouts';\nimport findViewportsByPosition, {\n  findOrCreateViewport as layoutFindOrCreate,\n} from './findViewportsByPosition';\n\nimport { ContextMenuProps } from './CustomizableContextMenu/types';\nimport { NavigateHistory } from './types/commandModuleTypes';\nimport { history } from '@ohif/app';\n\nconst { subscribeToNextViewportGridChange } = utils;\n\nexport type HangingProtocolParams = {\n  protocolId?: string;\n  stageIndex?: number;\n  activeStudyUID?: string;\n  stageId?: string;\n};\n\nexport type UpdateViewportDisplaySetParams = {\n  direction: number;\n  excludeNonImageModalities?: boolean;\n};\n\n/**\n * Determine if a command is a hanging protocol one.\n * For now, just use the two hanging protocol commands that are in this\n * commands module, but if others get added elsewhere this may need enhancing.\n */\nconst isHangingProtocolCommand = command =>\n  command &&\n  (command.commandName === 'setHangingProtocol' || command.commandName === 'toggleHangingProtocol');\n\nconst commandsModule = ({\n  servicesManager,\n  commandsManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    customizationService,\n    measurementService,\n    hangingProtocolService,\n    uiNotificationService,\n    viewportGridService,\n    displaySetService,\n    stateSyncService,\n    toolbarService,\n  } = (servicesManager as ServicesManager).services;\n\n  // Define a context menu controller for use with any context menus\n  const contextMenuController = new ContextMenuController(servicesManager, commandsManager);\n\n  const actions = {\n    /**\n     * Show the context menu.\n     * @param options.menuId defines the menu name to lookup, from customizationService\n     * @param options.defaultMenu contains the default menu set to use\n     * @param options.element is the element to show the menu within\n     * @param options.event is the event that caused the context menu\n     * @param options.selectorProps is the set of selection properties to use\n     */\n    showContextMenu: (options: ContextMenuProps) => {\n      const {\n        menuCustomizationId,\n        element,\n        event,\n        selectorProps,\n        defaultPointsPosition = [],\n      } = options;\n\n      const optionsToUse = { ...options };\n\n      if (menuCustomizationId) {\n        Object.assign(\n          optionsToUse,\n          customizationService.get(menuCustomizationId, defaultContextMenu)\n        );\n      }\n\n      // TODO - make the selectorProps richer by including the study metadata and display set.\n      const { protocol, stage } = hangingProtocolService.getActiveProtocol();\n      optionsToUse.selectorProps = {\n        event,\n        protocol,\n        stage,\n        ...selectorProps,\n      };\n\n      contextMenuController.showContextMenu(optionsToUse, element, defaultPointsPosition);\n    },\n\n    /** Close a context menu currently displayed */\n    closeContextMenu: () => {\n      contextMenuController.closeContextMenu();\n    },\n\n    displayNotification: ({ text, title, type }) => {\n      uiNotificationService.show({\n        title: title,\n        message: text,\n        type: type,\n      });\n    },\n    clearMeasurements: () => {\n      measurementService.clear();\n    },\n\n    /**\n     * Toggles off all tools which contain a commandName of setHangingProtocol\n     * or toggleHangingProtocol, and which match/don't match the protocol id/stage\n     */\n    toggleHpTools: () => {\n      const {\n        protocol,\n        stageIndex: toggleStageIndex,\n        stage,\n      } = hangingProtocolService.getActiveProtocol();\n      const enableListener = button => {\n        if (!button.id) {\n          return;\n        }\n        const { commands, items } = button.props || button;\n        if (items) {\n          items.forEach(enableListener);\n        }\n        const hpCommand = commands?.find?.(isHangingProtocolCommand);\n        if (!hpCommand) {\n          return;\n        }\n        const { protocolId, stageIndex, stageId } = hpCommand.commandOptions;\n        const isActive =\n          (!protocolId || protocolId === protocol.id) &&\n          (stageIndex === undefined || stageIndex === toggleStageIndex) &&\n          (!stageId || stageId === stage.id);\n        toolbarService.setToggled(button.id, isActive);\n      };\n      Object.values(toolbarService.getButtons()).forEach(enableListener);\n    },\n\n    /**\n     *  Sets the specified protocol\n     *    1. Records any existing state using the viewport grid service\n     *    2. Finds the destination state - this can be one of:\n     *       a. The specified protocol stage\n     *       b. An alternate (toggled or restored) protocol stage\n     *       c. A restored custom layout\n     *    3. Finds the parameters for the specified state\n     *       a. Gets the displaySetSelectorMap\n     *       b. Gets the map by position\n     *       c. Gets any toggle mapping to map position to/from current view\n     *    4. If restore, then sets layout\n     *       a. Maps viewport position by currently displayed viewport map id\n     *       b. Uses toggle information to map display set id\n     *    5. Else applies the hanging protocol\n     *       a. HP Service is provided displaySetSelectorMap\n     *       b. HP Service will throw an exception if it isn't applicable\n     * @param options - contains information on the HP to apply\n     * @param options.activeStudyUID - the updated study to apply the HP to\n     * @param options.protocolId - the protocol ID to change to\n     * @param options.stageId - the stageId to apply\n     * @param options.stageIndex - the index of the stage to go to.\n     * @param options.reset - flag to indicate if the HP should be reset to its original and not restored to a previous state\n     */\n    setHangingProtocol: ({\n      activeStudyUID = '',\n      protocolId,\n      stageId,\n      stageIndex,\n      reset = false,\n    }: HangingProtocolParams): boolean => {\n      const primaryToolBeforeHPChange = toolbarService.getActivePrimaryTool();\n      try {\n        // Stores in the state the display set selector id to displaySetUID mapping\n        // Pass in viewportId for the active viewport.  This item will get set as\n        // the activeViewportId\n        const state = viewportGridService.getState();\n        const hpInfo = hangingProtocolService.getState();\n        const { protocol: oldProtocol } = hangingProtocolService.getActiveProtocol();\n        const stateSyncReduce = reuseCachedLayouts(state, hangingProtocolService, stateSyncService);\n        const { hangingProtocolStageIndexMap, viewportGridStore, displaySetSelectorMap } =\n          stateSyncReduce;\n\n        if (!protocolId) {\n          // Reuse the previous protocol id, and optionally stage\n          protocolId = hpInfo.protocolId;\n          if (stageId === undefined && stageIndex === undefined) {\n            stageIndex = hpInfo.stageIndex;\n          }\n        } else if (stageIndex === undefined && stageId === undefined) {\n          // Re-set the same stage as was previously used\n          const hangingId = `${activeStudyUID || hpInfo.activeStudyUID}:${protocolId}`;\n          stageIndex = hangingProtocolStageIndexMap[hangingId]?.stageIndex;\n        }\n\n        const useStageIdx =\n          stageIndex ??\n          hangingProtocolService.getStageIndex(protocolId, {\n            stageId,\n            stageIndex,\n          });\n\n        if (activeStudyUID) {\n          hangingProtocolService.setActiveStudyUID(activeStudyUID);\n        }\n\n        const storedHanging = `${hangingProtocolService.getState().activeStudyUID}:${protocolId}:${\n          useStageIdx || 0\n        }`;\n\n        const restoreProtocol = !reset && viewportGridStore[storedHanging];\n\n        if (\n          protocolId === hpInfo.protocolId &&\n          useStageIdx === hpInfo.stageIndex &&\n          !activeStudyUID\n        ) {\n          // Clear the HP setting to reset them\n          hangingProtocolService.setProtocol(protocolId, {\n            stageId,\n            stageIndex: useStageIdx,\n          });\n        } else {\n          hangingProtocolService.setProtocol(protocolId, {\n            displaySetSelectorMap,\n            stageId,\n            stageIndex: useStageIdx,\n            restoreProtocol,\n          });\n          if (restoreProtocol) {\n            viewportGridService.set(viewportGridStore[storedHanging]);\n          }\n        }\n        // Do this after successfully applying the update\n        // Note, don't store the active display set - it is only needed while\n        // changing display sets.  This causes jump to measurement to fail on\n        // multi-study display.\n        delete displaySetSelectorMap[\n          `${activeStudyUID || hpInfo.activeStudyUID}:activeDisplaySet:0`\n        ];\n        stateSyncService.store(stateSyncReduce);\n        // This is a default action applied\n        actions.toggleHpTools();\n\n        // try to use the same tool in the new hanging protocol stage\n        const primaryButton = toolbarService.getButton(primaryToolBeforeHPChange);\n        if (primaryButton) {\n          // is there any type of interaction on this button, if not it might be in the\n          // items. This is a bit of a hack, but it works for now.\n\n          let interactionType = primaryButton.props?.interactionType;\n\n          if (!interactionType && primaryButton.props?.items) {\n            const firstItem = primaryButton.props.items[0];\n            interactionType = firstItem.props?.interactionType || firstItem.props?.type;\n          }\n\n          if (interactionType) {\n            toolbarService.recordInteraction({\n              interactionType,\n              ...primaryButton.props,\n            });\n          }\n        }\n        return true;\n      } catch (e) {\n        console.error(e);\n        actions.toggleHpTools();\n        uiNotificationService.show({\n          title: 'Apply Hanging Protocol',\n          message: 'The hanging protocol could not be applied.',\n          type: 'error',\n          duration: 3000,\n        });\n        return false;\n      }\n    },\n\n    toggleHangingProtocol: ({ protocolId, stageIndex }: HangingProtocolParams): boolean => {\n      const {\n        protocol,\n        stageIndex: desiredStageIndex,\n        activeStudy,\n      } = hangingProtocolService.getActiveProtocol();\n      const { toggleHangingProtocol } = stateSyncService.getState();\n      const storedHanging = `${activeStudy.StudyInstanceUID}:${protocolId}:${stageIndex | 0}`;\n      if (\n        protocol.id === protocolId &&\n        (stageIndex === undefined || stageIndex === desiredStageIndex)\n      ) {\n        // Toggling off - restore to previous state\n        const previousState = toggleHangingProtocol[storedHanging] || {\n          protocolId: 'default',\n        };\n        return actions.setHangingProtocol(previousState);\n      } else {\n        stateSyncService.store({\n          toggleHangingProtocol: {\n            ...toggleHangingProtocol,\n            [storedHanging]: {\n              protocolId: protocol.id,\n              stageIndex: desiredStageIndex,\n            },\n          },\n        });\n        return actions.setHangingProtocol({\n          protocolId,\n          stageIndex,\n          reset: true,\n        });\n      }\n    },\n\n    deltaStage: ({ direction }) => {\n      const { protocolId, stageIndex: oldStageIndex } = hangingProtocolService.getState();\n      const { protocol } = hangingProtocolService.getActiveProtocol();\n      for (\n        let stageIndex = oldStageIndex + direction;\n        stageIndex >= 0 && stageIndex < protocol.stages.length;\n        stageIndex += direction\n      ) {\n        if (protocol.stages[stageIndex].status !== 'disabled') {\n          return actions.setHangingProtocol({\n            protocolId,\n            stageIndex,\n          });\n        }\n      }\n      uiNotificationService.show({\n        title: 'Change Stage',\n        message: 'The hanging protocol has no more applicable stages',\n        type: 'info',\n        duration: 3000,\n      });\n    },\n\n    /**\n     * Changes the viewport grid layout in terms of the MxN layout.\n     */\n    setViewportGridLayout: ({ numRows, numCols }) => {\n      const { protocol } = hangingProtocolService.getActiveProtocol();\n      const onLayoutChange = protocol.callbacks?.onLayoutChange;\n      if (commandsManager.run(onLayoutChange, { numRows, numCols }) === false) {\n        console.log('setViewportGridLayout running', onLayoutChange, numRows, numCols);\n        // Don't apply the layout if the run command returns false\n        return;\n      }\n\n      const completeLayout = () => {\n        const state = viewportGridService.getState();\n        const stateReduce = findViewportsByPosition(state, { numRows, numCols }, stateSyncService);\n        const findOrCreateViewport = layoutFindOrCreate.bind(\n          null,\n          hangingProtocolService,\n          stateReduce.viewportsByPosition\n        );\n\n        viewportGridService.setLayout({\n          numRows,\n          numCols,\n          findOrCreateViewport,\n        });\n        stateSyncService.store(stateReduce);\n      };\n      // Need to finish any work in the callback\n      window.setTimeout(completeLayout, 0);\n    },\n\n    toggleOneUp() {\n      const viewportGridState = viewportGridService.getState();\n      const { activeViewportId, viewports, layout } = viewportGridState;\n      const { displaySetInstanceUIDs, displaySetOptions, viewportOptions } =\n        viewports.get(activeViewportId);\n\n      if (layout.numCols === 1 && layout.numRows === 1) {\n        // The viewer is in one-up. Check if there is a state to restore/toggle back to.\n        const { toggleOneUpViewportGridStore } = stateSyncService.getState();\n\n        if (!toggleOneUpViewportGridStore.layout) {\n          return;\n        }\n        // There is a state to toggle back to. The viewport that was\n        // originally toggled to one up was the former active viewport.\n        const viewportIdToUpdate = toggleOneUpViewportGridStore.activeViewportId;\n\n        // We are restoring the previous layout but taking into the account that\n        // the current one up viewport might have a new displaySet dragged and dropped on it.\n        // updatedViewportsViaHP below contains the viewports applicable to the HP that existed\n        // prior to the toggle to one-up - including the updated viewports if a display\n        // set swap were to have occurred.\n        const updatedViewportsViaHP =\n          displaySetInstanceUIDs.length > 1\n            ? []\n            : displaySetInstanceUIDs\n                .map(displaySetInstanceUID =>\n                  hangingProtocolService.getViewportsRequireUpdate(\n                    viewportIdToUpdate,\n                    displaySetInstanceUID\n                  )\n                )\n                .flat();\n\n        // findOrCreateViewport returns either one of the updatedViewportsViaHP\n        // returned from the HP service OR if there is not one from the HP service then\n        // simply returns what was in the previous state for a given position in the layout.\n        const findOrCreateViewport = (position: number, positionId: string) => {\n          // Find the viewport for the given position prior to the toggle to one-up.\n          const preOneUpViewport = Array.from(toggleOneUpViewportGridStore.viewports.values()).find(\n            viewport => viewport.positionId === positionId\n          );\n\n          // Use the viewport id from before the toggle to one-up to find any updates to the viewport.\n          const viewport = updatedViewportsViaHP.find(\n            viewport => viewport.viewportId === preOneUpViewport.viewportId\n          );\n\n          return viewport\n            ? // Use the applicable viewport from the HP updated viewports\n              { viewportOptions, displaySetOptions, ...viewport }\n            : // Use the previous viewport for the given position\n              preOneUpViewport;\n        };\n\n        const layoutOptions = viewportGridService.getLayoutOptionsFromState(\n          toggleOneUpViewportGridStore\n        );\n\n        // Restore the previous layout including the active viewport.\n        viewportGridService.setLayout({\n          numRows: toggleOneUpViewportGridStore.layout.numRows,\n          numCols: toggleOneUpViewportGridStore.layout.numCols,\n          activeViewportId: viewportIdToUpdate,\n          layoutOptions,\n          findOrCreateViewport,\n        });\n      } else {\n        // We are not in one-up, so toggle to one up.\n\n        // Store the current viewport grid state so we can toggle it back later.\n        stateSyncService.store({\n          toggleOneUpViewportGridStore: viewportGridState,\n        });\n\n        // This findOrCreateViewport only return one viewport - the active\n        // one being toggled to one up.\n        const findOrCreateViewport = () => {\n          return {\n            displaySetInstanceUIDs,\n            displaySetOptions,\n            viewportOptions,\n          };\n        };\n\n        // Set the layout to be 1x1/one-up.\n        viewportGridService.setLayout({\n          numRows: 1,\n          numCols: 1,\n          findOrCreateViewport,\n        });\n\n        // Subscribe to ANY (i.e. manual and hanging protocol) layout changes so that\n        // any grid layout state to toggle to from one up is cleared. This is performed on\n        // a timeout to avoid clearing the state for the actual to one up change.\n        // Whenever the next layout change event is fired, the subscriptions are unsubscribed.\n        const clearToggleOneUpViewportGridStore = () => {\n          const toggleOneUpViewportGridStore = {};\n          stateSyncService.store({\n            toggleOneUpViewportGridStore,\n          });\n        };\n\n        subscribeToNextViewportGridChange(viewportGridService, clearToggleOneUpViewportGridStore);\n      }\n    },\n\n    /**\n     * Exposes the browser history navigation used by OHIF. This command can be used to either replace or\n     * push a new entry into the browser history. For example, the following will replace the current\n     * browser history entry with the specified relative URL which changes the study displayed to the\n     * study with study instance UID 1.2.3. Note that as a result of using `options.replace = true`, the\n     * page prior to invoking this command cannot be returned to via the browser back button.\n     *\n     * navigateHistory({\n     *   to: 'viewer?StudyInstanceUIDs=1.2.3',\n     *   options: { replace: true },\n     * });\n     *\n     * @param historyArgs - arguments for the history function;\n     *                      the `to` property is the URL;\n     *                      the `options.replace` is a boolean indicating if the current browser history entry\n     *                      should be replaced or a new entry pushed onto the history (stack); the default value\n     *                      for `replace` is false\n     */\n    navigateHistory(historyArgs: NavigateHistory) {\n      history.navigate(historyArgs.to, historyArgs.options);\n    },\n\n    openDICOMTagViewer() {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n      const activeViewportSpecificData = viewports.get(activeViewportId);\n      const { displaySetInstanceUIDs } = activeViewportSpecificData;\n\n      const displaySets = displaySetService.activeDisplaySets;\n      const { UIModalService } = servicesManager.services;\n\n      const displaySetInstanceUID = displaySetInstanceUIDs[0];\n      UIModalService.show({\n        content: DicomTagBrowser,\n        contentProps: {\n          displaySets,\n          displaySetInstanceUID,\n          onClose: UIModalService.hide,\n        },\n        title: 'DICOM Tag Browser',\n      });\n    },\n\n    /**\n     * Toggle viewport overlay (the information panel shown on the four corners\n     * of the viewport)\n     * @see ViewportOverlay and CustomizableViewportOverlay components\n     */\n    toggleOverlays: () => {\n      const overlays = document.getElementsByClassName('viewport-overlay');\n      for (let i = 0; i < overlays.length; i++) {\n        overlays.item(i).classList.toggle('hidden');\n      }\n    },\n\n    scrollActiveThumbnailIntoView: () => {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n\n      const activeViewport = viewports.get(activeViewportId);\n      const activeDisplaySetInstanceUID = activeViewport.displaySetInstanceUIDs[0];\n\n      const thumbnailList = document.querySelector('#ohif-thumbnail-list');\n\n      if (!thumbnailList) {\n        return;\n      }\n\n      const thumbnailListBounds = thumbnailList.getBoundingClientRect();\n\n      const thumbnail = document.querySelector(`#thumbnail-${activeDisplaySetInstanceUID}`);\n\n      if (!thumbnail) {\n        return;\n      }\n\n      const thumbnailBounds = thumbnail.getBoundingClientRect();\n\n      // This only handles a vertical thumbnail list.\n      if (\n        thumbnailBounds.top >= thumbnailListBounds.top &&\n        thumbnailBounds.top <= thumbnailListBounds.bottom\n      ) {\n        return;\n      }\n\n      thumbnail.scrollIntoView({ behavior: 'smooth' });\n    },\n\n    updateViewportDisplaySet: ({\n      direction,\n      excludeNonImageModalities,\n    }: UpdateViewportDisplaySetParams) => {\n      const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\n      // Sort the display sets as per the hanging protocol service viewport/display set scoring system.\n      // The thumbnail list uses the same sorting.\n      const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\n      const currentDisplaySets = [...displaySetService.activeDisplaySets];\n\n      currentDisplaySets.sort(dsSortFn);\n\n      const { activeViewportId, viewports } = viewportGridService.getState();\n\n      const { displaySetInstanceUIDs } = viewports.get(activeViewportId);\n\n      const activeDisplaySetIndex = currentDisplaySets.findIndex(displaySet =>\n        displaySetInstanceUIDs.includes(displaySet.displaySetInstanceUID)\n      );\n\n      let displaySetIndexToShow: number;\n\n      for (\n        displaySetIndexToShow = activeDisplaySetIndex + direction;\n        displaySetIndexToShow > -1 && displaySetIndexToShow < currentDisplaySets.length;\n        displaySetIndexToShow += direction\n      ) {\n        if (\n          !excludeNonImageModalities ||\n          !nonImageModalities.includes(currentDisplaySets[displaySetIndexToShow].Modality)\n        ) {\n          break;\n        }\n      }\n\n      if (displaySetIndexToShow < 0 || displaySetIndexToShow >= currentDisplaySets.length) {\n        return;\n      }\n\n      const { displaySetInstanceUID } = currentDisplaySets[displaySetIndexToShow];\n\n      let updatedViewports = [];\n\n      try {\n        updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n          activeViewportId,\n          displaySetInstanceUID\n        );\n      } catch (error) {\n        console.warn(error);\n        uiNotificationService.show({\n          title: 'Navigate Viewport Display Set',\n          message:\n            'The requested display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\n          type: 'info',\n          duration: 3000,\n        });\n      }\n\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n      setTimeout(() => actions.scrollActiveThumbnailIntoView(), 0);\n    },\n  };\n\n  const definitions = {\n    showContextMenu: {\n      commandFn: actions.showContextMenu,\n    },\n    closeContextMenu: {\n      commandFn: actions.closeContextMenu,\n    },\n    clearMeasurements: {\n      commandFn: actions.clearMeasurements,\n      storeContexts: [],\n      options: {},\n    },\n    displayNotification: {\n      commandFn: actions.displayNotification,\n      storeContexts: [],\n      options: {},\n    },\n    setHangingProtocol: {\n      commandFn: actions.setHangingProtocol,\n      storeContexts: [],\n      options: {},\n    },\n    toggleHangingProtocol: {\n      commandFn: actions.toggleHangingProtocol,\n      storeContexts: [],\n      options: {},\n    },\n    navigateHistory: {\n      commandFn: actions.navigateHistory,\n      storeContexts: [],\n      options: {},\n    },\n    nextStage: {\n      commandFn: actions.deltaStage,\n      storeContexts: [],\n      options: { direction: 1 },\n    },\n    previousStage: {\n      commandFn: actions.deltaStage,\n      storeContexts: [],\n      options: { direction: -1 },\n    },\n    setViewportGridLayout: {\n      commandFn: actions.setViewportGridLayout,\n      storeContexts: [],\n      options: {},\n    },\n    toggleOneUp: {\n      commandFn: actions.toggleOneUp,\n      storeContexts: [],\n      options: {},\n    },\n    openDICOMTagViewer: {\n      commandFn: actions.openDICOMTagViewer,\n    },\n    updateViewportDisplaySet: {\n      commandFn: actions.updateViewportDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'DEFAULT',\n  };\n};\n\nexport default commandsModule;\n","import { Types } from '@ohif/core';\n\n/**\n * This hanging protocol can be activated on the primary mode by directly\n * referencing it in a URL or by directly including it within a mode, e.g.:\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\n * It is not included in the viewer mode by default.\n */\nconst hpMN: Types.HangingProtocol.Protocol = {\n  id: '@ohif/mnGrid',\n  description: 'Has various hanging protocol grid layouts',\n  name: '2x2',\n  protocolMatchingRules: [\n    {\n      id: 'OneOrMoreSeries',\n      weight: 25,\n      attribute: 'numberOfDisplaySetsWithImages',\n      constraint: {\n        greaterThan: 0,\n      },\n    },\n  ],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n          required: true,\n        },\n        // This display set will select the specified items by preference\n        // It has no affect if nothing is specified in the URL.\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 10,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n    },\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  stages: [\n    {\n      id: '2x2',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 4,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 1,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 2,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 3,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n\n    // 3x1 stage\n    {\n      id: '3x1',\n      // Obsolete settings:\n      requiredViewports: 1,\n      preferredViewports: 3,\n      // New equivalent:\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 3,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n              matchedDisplaySetsIndex: 1,\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n              matchedDisplaySetsIndex: 2,\n            },\n          ],\n        },\n      ],\n    },\n\n    // A 2x1 stage\n    {\n      id: '2x1',\n      requiredViewports: 1,\n      preferredViewports: 2,\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 2,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 1,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n\n    // A 1x1 stage - should be automatically activated if there is only 1 viewable instance\n    {\n      id: '1x1',\n      requiredViewports: 1,\n      preferredViewports: 1,\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 1,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  numberOfPriorsReferenced: -1,\n};\n\nexport default hpMN;\n","import { Types } from '@ohif/core';\n\nconst defaultDisplaySetSelector = {\n  studyMatchingRules: [\n    {\n      // The priorInstance is a study counter that indicates what position this study is in\n      // and the value comes from the options parameter.\n      attribute: 'studyInstanceUIDsIndex',\n      from: 'options',\n      required: true,\n      constraint: {\n        equals: { value: 0 },\n      },\n    },\n  ],\n  seriesMatchingRules: [\n    {\n      attribute: 'numImageFrames',\n      constraint: {\n        greaterThan: { value: 0 },\n      },\n    },\n    // This display set will select the specified items by preference\n    // It has no affect if nothing is specified in the URL.\n    {\n      attribute: 'isDisplaySetFromUrl',\n      weight: 10,\n      constraint: {\n        equals: true,\n      },\n    },\n  ],\n};\n\nconst priorDisplaySetSelector = {\n  studyMatchingRules: [\n    {\n      // The priorInstance is a study counter that indicates what position this study is in\n      // and the value comes from the options parameter.\n      attribute: 'studyInstanceUIDsIndex',\n      from: 'options',\n      required: true,\n      constraint: {\n        equals: { value: 1 },\n      },\n    },\n  ],\n  seriesMatchingRules: [\n    {\n      attribute: 'numImageFrames',\n      constraint: {\n        greaterThan: { value: 0 },\n      },\n    },\n    // This display set will select the specified items by preference\n    // It has no affect if nothing is specified in the URL.\n    {\n      attribute: 'isDisplaySetFromUrl',\n      weight: 10,\n      constraint: {\n        equals: true,\n      },\n    },\n  ],\n};\n\nconst currentDisplaySet = {\n  id: 'defaultDisplaySetId',\n};\n\nconst priorDisplaySet = {\n  id: 'priorDisplaySetId',\n};\n\nconst currentViewport0 = {\n  viewportOptions: {\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [currentDisplaySet],\n};\n\nconst currentViewport1 = {\n  ...currentViewport0,\n  displaySets: [\n    {\n      ...currentDisplaySet,\n      matchedDisplaySetsIndex: 1,\n    },\n  ],\n};\n\nconst priorViewport0 = {\n  ...currentViewport0,\n  displaySets: [priorDisplaySet],\n};\n\nconst priorViewport1 = {\n  ...priorViewport0,\n  displaySets: [\n    {\n      ...priorDisplaySet,\n      matchedDisplaySetsIndex: 1,\n    },\n  ],\n};\n\n/**\n * This hanging protocol can be activated on the primary mode by directly\n * referencing it in a URL or by directly including it within a mode, e.g.:\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\n * It is not included in the viewer mode by default.\n */\nconst hpMNCompare: Types.HangingProtocol.Protocol = {\n  id: '@ohif/hpCompare',\n  description: 'Compare two studies in various layouts',\n  name: 'Compare Two Studies',\n  numberOfPriorsReferenced: 1,\n  protocolMatchingRules: [\n    {\n      id: 'Two Studies',\n      weight: 1000,\n      attribute: 'StudyInstanceUID',\n      // The 'from' attribute says where to get the 'attribute' value from.  In this case\n      // prior means the second study in the study list.\n      from: 'prior',\n      required: true,\n      constraint: {\n        notNull: true,\n      },\n    },\n  ],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    defaultDisplaySetId: defaultDisplaySetSelector,\n    priorDisplaySetId: priorDisplaySetSelector,\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  stages: [\n    {\n      name: '2x2',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 4,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [currentViewport0, priorViewport0, currentViewport1, priorViewport1],\n    },\n\n    {\n      name: '2x1',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 2,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 2,\n        },\n      },\n      viewports: [currentViewport0, priorViewport0],\n    },\n  ],\n};\n\nexport default hpMNCompare;\n","import hpMNGrid from './hpMNGrid';\nimport hpMNCompare from './hpCompare';\n\nconst defaultProtocol = {\n  id: 'default',\n  locked: true,\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2023-04-01',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        // Try to match series with images by default, to prevent weird display\n        // on SEG/SR containing studies\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n        },\n        // This display set will select the specified items by preference\n        // It has no affect if nothing is specified in the URL.\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 10,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n      // Can be used to select matching studies\n      // studyMatchingRules: [],\n    },\n  },\n  stages: [\n    {\n      name: 'default',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            viewportType: 'stack',\n            viewportId: 'default',\n            toolGroupId: 'default',\n            // This will specify the initial image options index if it matches in the URL\n            // and will otherwise not specify anything.\n            initialImageOptions: {\n              custom: 'sopInstanceLocation',\n            },\n            // Other options for initialImageOptions, which can be included in the default\n            // custom attribute, or can be provided directly.\n            //   index: 180,\n            //   preset: 'middle', // 'first', 'last', 'middle'\n            // },\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n      createdDate: '2021-02-23T18:32:42.850Z',\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: defaultProtocol.id,\n      protocol: defaultProtocol,\n    },\n    // Create a MxN hanging protocol available by default\n    {\n      name: hpMNGrid.id,\n      protocol: hpMNGrid,\n    },\n    // Create a MxN comparison hanging protocol available by default\n    {\n      name: hpMNCompare.id,\n      protocol: hpMNCompare,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppConfig } from '@state';\n\nimport { Button, ButtonEnums } from '@ohif/ui';\n\nfunction DataSourceSelector() {\n  const [appConfig] = useAppConfig();\n  const navigate = useNavigate();\n\n  // This is frowned upon, but the raw config is needed here to provide\n  // the selector\n  const dsConfigs = appConfig.dataSources;\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <div className=\"flex h-screen w-screen items-center justify-center \">\n        <div className=\"bg-secondary-dark mx-auto space-y-2 rounded-lg py-8 px-8 drop-shadow-md\">\n          <img\n            className=\"mx-auto block h-14\"\n            src=\"./ohif-logo.svg\"\n            alt=\"OHIF\"\n          />\n          <div className=\"space-y-2 pt-4 text-center\">\n            {dsConfigs\n              .filter(it => it.sourceName !== 'dicomjson' && it.sourceName !== 'dicomlocal')\n              .map(ds => (\n                <div key={ds.sourceName}>\n                  <h1 className=\"text-white\">\n                    {ds.configuration?.friendlyName || ds.friendlyName}\n                  </h1>\n                  <Button\n                    type={ButtonEnums.type.primary}\n                    className={classnames('ml-2')}\n                    onClick={() => {\n                      navigate({\n                        pathname: '/',\n                        search: `datasources=${ds.sourceName}`,\n                      });\n                    }}\n                  >\n                    {ds.sourceName}\n                  </Button>\n                  <br />\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DataSourceSelector;\n","import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Icon, InputFilterText, LoadingIndicatorProgress } from '@ohif/ui';\nimport { Types } from '@ohif/core';\n\ntype ItemListComponentProps = {\n  itemLabel: string;\n  itemList: Array<Types.BaseDataSourceConfigurationAPIItem>;\n  onItemClicked: (item: Types.BaseDataSourceConfigurationAPIItem) => void;\n};\n\nfunction ItemListComponent({\n  itemLabel,\n  itemList,\n  onItemClicked,\n}: ItemListComponentProps): ReactElement {\n  const { t } = useTranslation('DataSourceConfiguration');\n  const [filterValue, setFilterValue] = useState('');\n\n  useEffect(() => {\n    setFilterValue('');\n  }, [itemList]);\n\n  return (\n    <div className=\"flex min-h-[1px] grow flex-col gap-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-primary-light text-[20px]\">{t(`Select ${itemLabel}`)}</div>\n        <InputFilterText\n          className=\"max-w-[40%] grow\"\n          value={filterValue}\n          onDebounceChange={setFilterValue}\n          placeholder={t(`Search ${itemLabel} list`)}\n        ></InputFilterText>\n      </div>\n      <div className=\"relative flex min-h-[1px] grow flex-col bg-black text-[14px]\">\n        {itemList == null ? (\n          <LoadingIndicatorProgress className={'h-full w-full'} />\n        ) : itemList.length === 0 ? (\n          <div className=\"text-primary-light flex h-full flex-col items-center justify-center px-6 py-4\">\n            <Icon\n              name=\"magnifier\"\n              className=\"mb-4\"\n            />\n            <span>{t(`No ${itemLabel} available`)}</span>\n          </div>\n        ) : (\n          <>\n            <div className=\"bg-secondary-dark px-3 py-1.5 text-white\">{t(itemLabel)}</div>\n            <div className=\"ohif-scrollbar overflow-auto\">\n              {itemList\n                .filter(\n                  item =>\n                    !filterValue || item.name.toLowerCase().includes(filterValue.toLowerCase())\n                )\n                .map(item => {\n                  const border =\n                    'rounded border-transparent border-b-secondary-light border-[1px] hover:border-primary-light';\n                  return (\n                    <div\n                      className={classNames(\n                        'hover:text-primary-light hover:bg-primary-dark group mx-2 flex items-center justify-between px-6 py-2',\n                        border\n                      )}\n                      key={item.id}\n                    >\n                      <div>{item.name}</div>\n                      <Button\n                        onClick={() => onItemClicked(item)}\n                        className=\"invisible group-hover:visible\"\n                        endIcon={<Icon name=\"arrow-left\" />}\n                      >\n                        {t('Select')}\n                      </Button>\n                    </div>\n                  );\n                })}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ItemListComponent;\n","import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\nimport { Types } from '@ohif/core';\nimport ItemListComponent from './ItemListComponent';\n\nconst NO_WRAP_ELLIPSIS_CLASS_NAMES = 'text-ellipsis whitespace-nowrap overflow-hidden';\n\ntype DataSourceConfigurationModalComponentProps = {\n  configurationAPI: Types.BaseDataSourceConfigurationAPI;\n  configuredItems: Array<Types.BaseDataSourceConfigurationAPIItem>;\n  onHide: () => void;\n};\n\nfunction DataSourceConfigurationModalComponent({\n  configurationAPI,\n  configuredItems,\n  onHide,\n}: DataSourceConfigurationModalComponentProps) {\n  const { t } = useTranslation('DataSourceConfiguration');\n\n  const [itemList, setItemList] = useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\n\n  const [selectedItems, setSelectedItems] = useState(configuredItems);\n\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const [itemLabels] = useState(configurationAPI.getItemLabels());\n\n  // Determines whether to show the full/existing configuration for the data source.\n  // A full or complete configuration is one where the data source (path) has the\n  // maximum/required number of path items. Anything less is considered not complete and\n  // the configuration starts from scratch (i.e. as if no items are configured at all).\n  // TODO: consider configuration starting from a partial (i.e. non-empty) configuration\n  const [showFullConfig, setShowFullConfig] = useState(\n    itemLabels.length === configuredItems.length\n  );\n\n  /**\n   * The index of the selected item that is considered current and for which\n   * its sub-items should be displayed in the items list component. When the\n   * full/existing configuration for a data source is to be shown, the current\n   * selected item is the second to last in the `selectedItems` list.\n   */\n  const currentSelectedItemIndex = showFullConfig\n    ? selectedItems.length - 2\n    : selectedItems.length - 1;\n\n  useEffect(() => {\n    let shouldUpdate = true;\n\n    setErrorMessage(null);\n\n    // Clear out the former/old list while we fetch the next sub item list.\n    setItemList(null);\n\n    if (selectedItems.length === 0) {\n      configurationAPI\n        .initialize()\n        .then(items => {\n          if (shouldUpdate) {\n            setItemList(items);\n          }\n        })\n        .catch(error => setErrorMessage(error.message));\n    } else if (!showFullConfig && selectedItems.length === itemLabels.length) {\n      // The last item to configure the data source (path) has been selected.\n      configurationAPI.setCurrentItem(selectedItems[selectedItems.length - 1]);\n      // We can hide the modal dialog now.\n      onHide();\n    } else {\n      configurationAPI\n        .setCurrentItem(selectedItems[currentSelectedItemIndex])\n        .then(items => {\n          if (shouldUpdate) {\n            setItemList(items);\n          }\n        })\n        .catch(error => setErrorMessage(error.message));\n    }\n\n    return () => {\n      shouldUpdate = false;\n    };\n  }, [\n    selectedItems,\n    configurationAPI,\n    onHide,\n    itemLabels,\n    showFullConfig,\n    currentSelectedItemIndex,\n  ]);\n\n  const getSelectedItemCursorClasses = itemIndex =>\n    itemIndex !== itemLabels.length - 1 && itemIndex < selectedItems.length\n      ? 'cursor-pointer'\n      : 'cursor-auto';\n\n  const getSelectedItemBackgroundClasses = itemIndex =>\n    itemIndex < selectedItems.length\n      ? classNames(\n          'bg-black/[.4]',\n          itemIndex !== itemLabels.length - 1 ? 'hover:bg-transparent active:bg-secondary-dark' : ''\n        )\n      : 'bg-transparent';\n\n  const getSelectedItemBorderClasses = itemIndex =>\n    itemIndex === currentSelectedItemIndex + 1\n      ? classNames('border-2', 'border-solid', 'border-primary-light')\n      : itemIndex < selectedItems.length\n      ? 'border border-solid border-primary-active hover:border-primary-light active:border-white'\n      : 'border border-dashed border-secondary-light';\n\n  const getSelectedItemTextClasses = itemIndex =>\n    itemIndex <= selectedItems.length ? 'text-primary-light' : 'text-primary-active';\n\n  const getErrorComponent = (): ReactElement => {\n    return (\n      <div className=\"flex min-h-[1px] grow flex-col gap-4\">\n        <div className=\"text-primary-light text-[20px]\">\n          {t(`Error fetching ${itemLabels[selectedItems.length]} list`)}\n        </div>\n        <div className=\"grow bg-black p-4 text-[14px]\">{errorMessage}</div>\n      </div>\n    );\n  };\n\n  const getSelectedItemsComponent = (): ReactElement => {\n    return (\n      <div className=\"flex gap-4\">\n        {itemLabels.map((itemLabel, itemLabelIndex) => {\n          return (\n            <div\n              key={itemLabel}\n              className={classNames(\n                'flex min-w-[1px] shrink basis-[200px] flex-col gap-1 rounded-md p-3.5',\n                getSelectedItemCursorClasses(itemLabelIndex),\n                getSelectedItemBackgroundClasses(itemLabelIndex),\n                getSelectedItemBorderClasses(itemLabelIndex),\n                getSelectedItemTextClasses(itemLabelIndex)\n              )}\n              onClick={\n                (showFullConfig && itemLabelIndex < currentSelectedItemIndex) ||\n                itemLabelIndex <= currentSelectedItemIndex\n                  ? () => {\n                      setShowFullConfig(false);\n                      setSelectedItems(theList => theList.slice(0, itemLabelIndex));\n                    }\n                  : undefined\n              }\n            >\n              <div className=\"text- flex items-center gap-2\">\n                {itemLabelIndex < selectedItems.length ? (\n                  <Icon name=\"status-tracked\" />\n                ) : (\n                  <Icon name=\"status-untracked\" />\n                )}\n                <div className={classNames(NO_WRAP_ELLIPSIS_CLASS_NAMES)}>{t(itemLabel)}</div>\n              </div>\n              {itemLabelIndex < selectedItems.length ? (\n                <div className={classNames('text-[14px] text-white', NO_WRAP_ELLIPSIS_CLASS_NAMES)}>\n                  {selectedItems[itemLabelIndex].name}\n                </div>\n              ) : (\n                <br></br>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex h-[calc(100vh-300px)] select-none flex-col gap-4 pt-0.5\">\n      {getSelectedItemsComponent()}\n      <div className=\"h-0.5 w-full shrink-0 bg-black\"></div>\n      {errorMessage ? (\n        getErrorComponent()\n      ) : (\n        <ItemListComponent\n          itemLabel={itemLabels[currentSelectedItemIndex + 1]}\n          itemList={itemList}\n          onItemClicked={item => {\n            setShowFullConfig(false);\n            setSelectedItems(theList => [...theList.slice(0, currentSelectedItemIndex + 1), item]);\n          }}\n        ></ItemListComponent>\n      )}\n    </div>\n  );\n}\n\nexport default DataSourceConfigurationModalComponent;\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, useModal } from '@ohif/ui';\nimport { ExtensionManager, ServicesManager, Types } from '@ohif/core';\nimport DataSourceConfigurationModalComponent from './DataSourceConfigurationModalComponent';\n\ntype DataSourceConfigurationComponentProps = {\n  servicesManager: ServicesManager;\n  extensionManager: ExtensionManager;\n};\n\nfunction DataSourceConfigurationComponent({\n  servicesManager,\n  extensionManager,\n}: DataSourceConfigurationComponentProps): ReactElement {\n  const { t } = useTranslation('DataSourceConfiguration');\n  const { show, hide } = useModal();\n\n  const { customizationService } = servicesManager.services;\n\n  const [configurationAPI, setConfigurationAPI] = useState<Types.BaseDataSourceConfigurationAPI>();\n\n  const [configuredItems, setConfiguredItems] =\n    useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\n\n  useEffect(() => {\n    let shouldUpdate = true;\n\n    const dataSourceChangedCallback = async () => {\n      const activeDataSourceDef = extensionManager.getActiveDataSourceDefinition();\n\n      if (!activeDataSourceDef.configuration.configurationAPI) {\n        return;\n      }\n\n      const { factory: configurationAPIFactory } =\n        customizationService.get(activeDataSourceDef.configuration.configurationAPI) ?? {};\n\n      if (!configurationAPIFactory) {\n        return;\n      }\n\n      const configAPI = configurationAPIFactory(activeDataSourceDef.sourceName);\n      setConfigurationAPI(configAPI);\n\n      // New configuration API means that the existing configured items must be cleared.\n      setConfiguredItems(null);\n\n      configAPI.getConfiguredItems().then(list => {\n        if (shouldUpdate) {\n          setConfiguredItems(list);\n        }\n      });\n    };\n\n    const sub = extensionManager.subscribe(\n      extensionManager.EVENTS.ACTIVE_DATA_SOURCE_CHANGED,\n      dataSourceChangedCallback\n    );\n\n    dataSourceChangedCallback();\n\n    return () => {\n      shouldUpdate = false;\n      sub.unsubscribe();\n    };\n  }, []);\n\n  const showConfigurationModal = useCallback(() => {\n    show({\n      content: DataSourceConfigurationModalComponent,\n      title: t('Configure Data Source'),\n      contentProps: {\n        configurationAPI,\n        configuredItems,\n        onHide: hide,\n      },\n    });\n  }, [configurationAPI, configuredItems]);\n\n  useEffect(() => {\n    if (!configurationAPI || !configuredItems) {\n      return;\n    }\n\n    if (configuredItems.length !== configurationAPI.getItemLabels().length) {\n      // Not the correct number of configured items, so show the modal to configure the data source.\n      showConfigurationModal();\n    }\n  }, [configurationAPI, configuredItems, showConfigurationModal]);\n\n  return configuredItems ? (\n    <div className=\"text-aqua-pale flex items-center overflow-hidden\">\n      <Icon\n        name=\"settings\"\n        className=\"mr-2.5 h-3.5 w-3.5 shrink-0 cursor-pointer\"\n        onClick={showConfigurationModal}\n      ></Icon>\n      {configuredItems.map((item, itemIndex) => {\n        return (\n          <div\n            key={itemIndex}\n            className=\"flex overflow-hidden\"\n          >\n            <div\n              key={itemIndex}\n              className=\"overflow-hidden text-ellipsis whitespace-nowrap\"\n            >\n              {item.name}\n            </div>\n            {itemIndex !== configuredItems.length - 1 && <div className=\"px-2.5\">|</div>}\n          </div>\n        );\n      })}\n    </div>\n  ) : (\n    <></>\n  );\n}\n\nexport default DataSourceConfigurationComponent;\n","import { ExtensionManager, Types } from '@ohif/core';\n\n/**\n * This file contains the implementations of BaseDataSourceConfigurationAPIItem\n * and BaseDataSourceConfigurationAPI for the Google cloud healthcare API. To\n * better understand this implementation and/or to implement custom implementations,\n * see the platform\\core\\src\\types\\DataSourceConfigurationAPI.ts and its JS doc\n * comments as a guide.\n */\n\n/**\n * The various Google Cloud Healthcare path item types.\n */\nenum ItemType {\n  projects = 0,\n  locations = 1,\n  datasets = 2,\n  dicomStores = 3,\n}\n\ninterface NamedItem {\n  name: string;\n}\ninterface Project extends NamedItem {\n  projectId: string;\n}\n\nconst initialUrl = 'https://cloudresourcemanager.googleapis.com/v1';\nconst baseHealthcareUrl = 'https://healthcare.googleapis.com/v1';\n\nclass GoogleCloudDataSourceConfigurationAPIItem\n  implements Types.BaseDataSourceConfigurationAPIItem\n{\n  id: string;\n  name: string;\n  url: string;\n  itemType: ItemType;\n}\n\nclass GoogleCloudDataSourceConfigurationAPI implements Types.BaseDataSourceConfigurationAPI {\n  private _extensionManager: ExtensionManager;\n  private _fetchOptions: { method: string; headers: unknown };\n  private _dataSourceName: string;\n\n  constructor(dataSourceName, servicesManager, extensionManager) {\n    this._dataSourceName = dataSourceName;\n    this._extensionManager = extensionManager;\n    const userAuthenticationService = servicesManager.services.userAuthenticationService;\n    this._fetchOptions = {\n      method: 'GET',\n      headers: userAuthenticationService.getAuthorizationHeader(),\n    };\n  }\n\n  getItemLabels = () => ['Project', 'Location', 'Data set', 'DICOM store'];\n\n  async initialize(): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\n    const url = `${initialUrl}/projects`;\n\n    const projects = (await GoogleCloudDataSourceConfigurationAPI._doFetch(\n      url,\n      ItemType.projects,\n      this._fetchOptions\n    )) as Array<Project>;\n\n    if (!projects?.length) {\n      return [];\n    }\n\n    const projectItems = projects.map(project => {\n      return {\n        id: project.projectId,\n        name: project.name,\n        itemType: ItemType.projects,\n        url: `${baseHealthcareUrl}/projects/${project.projectId}`,\n      };\n    });\n\n    return projectItems;\n  }\n\n  async setCurrentItem(\n    anItem: Types.BaseDataSourceConfigurationAPIItem\n  ): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\n    const googleCloudItem = anItem as GoogleCloudDataSourceConfigurationAPIItem;\n\n    if (googleCloudItem.itemType === ItemType.dicomStores) {\n      // Last configurable item, so update the data source configuration.\n      const url = `${googleCloudItem.url}/dicomWeb`;\n      const dataSourceDefCopy = JSON.parse(\n        JSON.stringify(this._extensionManager.getDataSourceDefinition(this._dataSourceName))\n      );\n      dataSourceDefCopy.configuration = {\n        ...dataSourceDefCopy.configuration,\n        wadoUriRoot: url,\n        qidoRoot: url,\n        wadoRoot: url,\n      };\n\n      this._extensionManager.updateDataSourceConfiguration(\n        dataSourceDefCopy.sourceName,\n        dataSourceDefCopy.configuration\n      );\n\n      return [];\n    }\n\n    const subItemType = googleCloudItem.itemType + 1;\n    const subItemField = `${ItemType[subItemType]}`;\n\n    const url = `${googleCloudItem.url}/${subItemField}`;\n\n    const fetchedSubItems = await GoogleCloudDataSourceConfigurationAPI._doFetch(\n      url,\n      subItemType,\n      this._fetchOptions\n    );\n\n    if (!fetchedSubItems?.length) {\n      return [];\n    }\n\n    const subItems = fetchedSubItems.map(subItem => {\n      const nameSplit = subItem.name.split('/');\n      return {\n        id: subItem.name,\n        name: nameSplit[nameSplit.length - 1],\n        itemType: subItemType,\n        url: `${baseHealthcareUrl}/${subItem.name}`,\n      };\n    });\n\n    return subItems;\n  }\n\n  async getConfiguredItems(): Promise<Array<GoogleCloudDataSourceConfigurationAPIItem>> {\n    const dataSourceDefinition = this._extensionManager.getDataSourceDefinition(\n      this._dataSourceName\n    );\n\n    const url = dataSourceDefinition.configuration.wadoUriRoot;\n    const projectsIndex = url.indexOf('projects');\n    // Split the configured URL into (essentially) pairs (i.e. item type followed by item)\n    // Explicitly: ['projects','aProject','locations','aLocation','datasets','aDataSet','dicomStores','aDicomStore']\n    // Note that a partial configuration will have a subset of the above.\n    const urlSplit = url.substring(projectsIndex).split('/');\n\n    const configuredItems = [];\n\n    for (\n      let itemType = 0;\n      // the number of configured items is either the max (4) or the number extracted from the url split\n      itemType < 4 && (itemType + 1) * 2 < urlSplit.length;\n      itemType += 1\n    ) {\n      if (itemType === ItemType.projects) {\n        const projectId = urlSplit[1];\n        const projectUrl = `${initialUrl}/projects/${projectId}`;\n        const data = await GoogleCloudDataSourceConfigurationAPI._doFetch(\n          projectUrl,\n          ItemType.projects,\n          this._fetchOptions\n        );\n        const project = data[0] as Project;\n        configuredItems.push({\n          id: project.projectId,\n          name: project.name,\n          itemType: itemType,\n          url: `${baseHealthcareUrl}/projects/${project.projectId}`,\n        });\n      } else {\n        const relativePath = urlSplit.slice(0, itemType * 2 + 2).join('/');\n        configuredItems.push({\n          id: relativePath,\n          name: urlSplit[itemType * 2 + 1],\n          itemType: itemType,\n          url: `${baseHealthcareUrl}/${relativePath}`,\n        });\n      }\n    }\n\n    return configuredItems;\n  }\n\n  /**\n   * Fetches an array of items the specified item type.\n   * @param urlStr the fetch url\n   * @param fetchItemType the type to fetch\n   * @param fetchOptions the header options for the fetch (e.g. authorization header)\n   * @param fetchSearchParams any search query params; currently only used for paging results\n   * @returns an array of items of the specified type\n   */\n  private static async _doFetch(\n    urlStr: string,\n    fetchItemType: ItemType,\n    fetchOptions = {},\n    fetchSearchParams: Record<string, string> = {}\n  ): Promise<Array<Project> | Array<NamedItem>> {\n    try {\n      const url = new URL(urlStr);\n      url.search = new URLSearchParams(fetchSearchParams).toString();\n\n      const response = await fetch(url, fetchOptions);\n      const data = await response.json();\n      if (response.status >= 200 && response.status < 300 && data != null) {\n        if (data.nextPageToken != null) {\n          fetchSearchParams.pageToken = data.nextPageToken;\n          const subPageData = await this._doFetch(\n            urlStr,\n            fetchItemType,\n            fetchOptions,\n            fetchSearchParams\n          );\n          data[ItemType[fetchItemType]] = data[ItemType[fetchItemType]].concat(subPageData);\n        }\n        if (data[ItemType[fetchItemType]]) {\n          return data[ItemType[fetchItemType]];\n        } else if (data.name) {\n          return [data];\n        } else {\n          return [];\n        }\n      } else {\n        const message =\n          data?.error?.message ||\n          `Error returned from Google Cloud Healthcare: ${response.status} - ${response.statusText}`;\n        throw new Error(message);\n      }\n    } catch (err) {\n      const message = err?.message || 'Error occurred during fetch request.';\n      throw new Error(message);\n    }\n  }\n}\n\nexport { GoogleCloudDataSourceConfigurationAPI };\n","import OHIF from '@ohif/core';\n\nimport { InstanceMetadata, PhilipsPETPrivateGroup } from '@cornerstonejs/calculate-suv/src/types';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\n\nexport default function getPTImageIdInstanceMetadata(imageId: string): InstanceMetadata {\n  const dicomMetaData = metadataProvider.get('instance', imageId);\n\n  if (!dicomMetaData) {\n    throw new Error('dicom metadata are required');\n  }\n\n  if (\n    dicomMetaData.SeriesDate === undefined ||\n    dicomMetaData.SeriesTime === undefined ||\n    dicomMetaData.CorrectedImage === undefined ||\n    dicomMetaData.Units === undefined ||\n    !dicomMetaData.RadiopharmaceuticalInformationSequence ||\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife === undefined ||\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose === undefined ||\n    dicomMetaData.DecayCorrection === undefined ||\n    dicomMetaData.AcquisitionDate === undefined ||\n    dicomMetaData.AcquisitionTime === undefined ||\n    (dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime ===\n      undefined &&\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime ===\n        undefined)\n  ) {\n    throw new Error('required metadata are missing');\n  }\n\n  if (dicomMetaData.PatientWeight === undefined) {\n    console.warn('PatientWeight missing from PT instance metadata');\n  }\n\n  const instanceMetadata: InstanceMetadata = {\n    CorrectedImage: dicomMetaData.CorrectedImage,\n    Units: dicomMetaData.Units,\n    RadionuclideHalfLife:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\n    RadionuclideTotalDose:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\n    RadiopharmaceuticalStartDateTime:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\n    DecayCorrection: dicomMetaData.DecayCorrection,\n    PatientWeight: dicomMetaData.PatientWeight,\n    SeriesDate: dicomMetaData.SeriesDate,\n    SeriesTime: dicomMetaData.SeriesTime,\n    AcquisitionDate: dicomMetaData.AcquisitionDate,\n    AcquisitionTime: dicomMetaData.AcquisitionTime,\n  };\n\n  if (\n    dicomMetaData['70531000'] ||\n    dicomMetaData['70531000'] !== undefined ||\n    dicomMetaData['70531009'] ||\n    dicomMetaData['70531009'] !== undefined\n  ) {\n    const philipsPETPrivateGroup: PhilipsPETPrivateGroup = {\n      SUVScaleFactor: dicomMetaData['70531000'],\n      ActivityConcentrationScaleFactor: dicomMetaData['70531009'],\n    };\n    instanceMetadata.PhilipsPETPrivateGroup = philipsPETPrivateGroup;\n  }\n\n  if (dicomMetaData['0009100d'] && dicomMetaData['0009100d'] !== undefined) {\n    instanceMetadata.GEPrivatePostInjectionDateTime = dicomMetaData['0009100d'];\n  }\n\n  if (dicomMetaData.FrameReferenceTime && dicomMetaData.FrameReferenceTime !== undefined) {\n    instanceMetadata.FrameReferenceTime = dicomMetaData.FrameReferenceTime;\n  }\n\n  if (dicomMetaData.ActualFrameDuration && dicomMetaData.ActualFrameDuration !== undefined) {\n    instanceMetadata.ActualFrameDuration = dicomMetaData.ActualFrameDuration;\n  }\n\n  if (dicomMetaData.PatientSex && dicomMetaData.PatientSex !== undefined) {\n    instanceMetadata.PatientSex = dicomMetaData.PatientSex;\n  }\n\n  if (dicomMetaData.PatientSize && dicomMetaData.PatientSize !== undefined) {\n    instanceMetadata.PatientSize = dicomMetaData.PatientSize;\n  }\n\n  return instanceMetadata;\n}\n\nfunction convertInterfaceTimeToString(time): string {\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\n\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(6, '0');\n\n  const timeString = `${hours}${minutes}${seconds}.${fractionalSeconds}`;\n  return timeString;\n}\n\nfunction convertInterfaceDateToString(date): string {\n  const month = `${date.month}`.padStart(2, '0');\n  const day = `${date.day}`.padStart(2, '0');\n  const dateString = `${date.year}${month}${day}`;\n  return dateString;\n}\n\nexport { getPTImageIdInstanceMetadata };\n","import { DicomMetadataStore, classes } from '@ohif/core';\nimport { calculateSUVScalingFactors } from '@cornerstonejs/calculate-suv';\n\nimport getPTImageIdInstanceMetadata from './getPTImageIdInstanceMetadata';\n\nconst metadataProvider = classes.MetadataProvider;\n\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n */\nexport default function init({ servicesManager, configuration = {} }): void {\n  const { stateSyncService } = servicesManager.services;\n  // Add\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handlePETImageMetadata);\n\n  // If the metadata for PET has changed by the user (e.g. manually changing the PatientWeight)\n  // we need to recalculate the SUV Scaling Factors\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_UPDATED, handlePETImageMetadata);\n\n  // viewportGridStore is a sync state which stores the entire\n  // ViewportGridService getState, by the keys `<activeStudyUID>:<protocolId>:<stageIndex>`\n  // Used to recover manual changes to the layout of a stage.\n  stateSyncService.register('viewportGridStore', { clearOnModeExit: true });\n\n  // displaySetSelectorMap stores a map from\n  // `<activeStudyUID>:<displaySetSelectorId>:<matchOffset>` to\n  // a displaySetInstanceUID, used to display named display sets in\n  // specific spots within a hanging protocol and be able to remember what the\n  // user did with those named spots between stages and protocols.\n  stateSyncService.register('displaySetSelectorMap', { clearOnModeExit: true });\n\n  // Stores a map from `<activeStudyUID>:${protocolId}` to the getHPInfo results\n  // in order to recover the correct stage when returning to a Hanging Protocol.\n  stateSyncService.register('hangingProtocolStageIndexMap', {\n    clearOnModeExit: true,\n  });\n\n  // Stores a map from the to be applied hanging protocols `<activeStudyUID>:<protocolId>`\n  // to the previously applied hanging protolStageIndexMap key, in order to toggle\n  // off the applied protocol and remember the old state.\n  stateSyncService.register('toggleHangingProtocol', { clearOnModeExit: true });\n\n  // Stores the viewports by `rows-cols` position so that when the layout\n  // changes numRows and numCols, the viewports can be remembers and then replaced\n  // afterwards.\n  stateSyncService.register('viewportsByPosition', { clearOnModeExit: true });\n}\n\nconst handlePETImageMetadata = ({ SeriesInstanceUID, StudyInstanceUID }) => {\n  const { instances } = DicomMetadataStore.getSeries(StudyInstanceUID, SeriesInstanceUID);\n\n  if (!instances?.length) {\n    return;\n  }\n\n  const modality = instances[0].Modality;\n\n  if (!modality || modality !== 'PT') {\n    return;\n  }\n\n  const imageIds = instances.map(instance => instance.imageId);\n  const instanceMetadataArray = [];\n  imageIds.forEach(imageId => {\n    const instanceMetadata = getPTImageIdInstanceMetadata(imageId);\n    if (instanceMetadata) {\n      instanceMetadataArray.push(instanceMetadata);\n    }\n  });\n\n  if (!instanceMetadataArray.length) {\n    return;\n  }\n\n  // try except block to prevent errors when the metadata is not correct\n  let suvScalingFactors;\n  try {\n    suvScalingFactors = calculateSUVScalingFactors(instanceMetadataArray);\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (!suvScalingFactors) {\n    return;\n  }\n\n  instanceMetadataArray.forEach((instanceMetadata, index) => {\n    metadataProvider.addCustomMetadata(imageIds[index], 'scalingModule', suvScalingFactors[index]);\n  });\n};\n","import { Types } from '@ohif/core';\n\nimport getDataSourcesModule from './getDataSourcesModule.js';\nimport getLayoutTemplateModule from './getLayoutTemplateModule.js';\nimport getPanelModule from './getPanelModule';\nimport getSopClassHandlerModule from './getSopClassHandlerModule.js';\nimport getToolbarModule from './getToolbarModule';\nimport getCommandsModule from './commandsModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getStudiesForPatientByMRN from './Panels/getStudiesForPatientByMRN';\nimport getCustomizationModule from './getCustomizationModule';\nimport { id } from './id.js';\nimport preRegistration from './init';\nimport { ContextMenuController, CustomizableContextMenuTypes } from './CustomizableContextMenu';\nimport * as dicomWebUtils from './DicomWebDataSource/utils';\nimport { createReportDialogPrompt } from './Panels';\nimport createReportAsync from './Actions/createReportAsync';\n\nconst defaultExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration,\n  getDataSourcesModule,\n  getLayoutTemplateModule,\n  getPanelModule,\n  getHangingProtocolModule,\n  getSopClassHandlerModule,\n  getToolbarModule,\n  getCommandsModule,\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'common',\n        exports: {\n          getStudiesForPatientByMRN,\n        },\n      },\n    ];\n  },\n\n  getCustomizationModule,\n};\n\nexport default defaultExtension;\n\nexport {\n  ContextMenuController,\n  CustomizableContextMenuTypes,\n  getStudiesForPatientByMRN,\n  dicomWebUtils,\n  createReportDialogPrompt,\n  createReportAsync,\n};\n","import ViewerLayout from './ViewerLayout';\n/*\n- Define layout for the viewer in mode configuration.\n- Pass in the viewport types that can populate the viewer.\n- Init layout based on the displaySets and the objects.\n*/\n\nexport default function ({ servicesManager, extensionManager, commandsManager, hotkeysManager }) {\n  function ViewerLayoutWithServices(props) {\n    return ViewerLayout({\n      servicesManager,\n      extensionManager,\n      commandsManager,\n      hotkeysManager,\n      ...props,\n    });\n  }\n\n  return [\n    // Layout Template Definition\n    // TODO: this is weird naming\n    {\n      name: 'viewerLayout',\n      id: 'viewerLayout',\n      component: ViewerLayoutWithServices,\n    },\n  ];\n}\n","import ToolbarDivider from './Toolbar/ToolbarDivider';\nimport ToolbarLayoutSelectorWithServices from './Toolbar/ToolbarLayoutSelector';\nimport ToolbarSplitButtonWithServices from './Toolbar/ToolbarSplitButtonWithServices';\nimport ToolbarButtonWithServices from './Toolbar/ToolbarButtonWithServices';\n\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\n  return [\n    {\n      name: 'ohif.divider',\n      defaultComponent: ToolbarDivider,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.action',\n      defaultComponent: ToolbarButtonWithServices,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.radioGroup',\n      defaultComponent: ToolbarButtonWithServices,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.splitButton',\n      defaultComponent: ToolbarSplitButtonWithServices,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.layoutSelector',\n      defaultComponent: ToolbarLayoutSelectorWithServices,\n      clickHandler: (evt, clickedBtn, btnSectionName) => {},\n    },\n    {\n      name: 'ohif.toggle',\n      defaultComponent: ToolbarButtonWithServices,\n      clickHandler: () => {},\n    },\n  ];\n}\n","import { CustomizationService } from '@ohif/core';\nimport React from 'react';\nimport DataSourceSelector from './Panels/DataSourceSelector';\nimport DataSourceConfigurationComponent from './Components/DataSourceConfigurationComponent';\nimport { GoogleCloudDataSourceConfigurationAPI } from './DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI';\n\n/**\n *\n * Note: this is an example of how the customization module can be used\n * using the customization module. Below, we are adding a new custom route\n * to the application at the path /custom and rendering a custom component\n * Real world use cases of the having a custom route would be to add a\n * custom page for the user to view their profile, or to add a custom\n * page for login etc.\n */\nexport default function getCustomizationModule({ servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'helloPage',\n      value: {\n        id: 'customRoutes',\n        routes: [\n          {\n            path: '/custom',\n            children: () => <h1 style={{ color: 'white' }}>Hello Custom Route</h1>,\n          },\n        ],\n      },\n    },\n\n    // Example customization to list a set of datasources\n    {\n      name: 'datasources',\n      value: {\n        id: 'customRoutes',\n        routes: [\n          {\n            path: '/datasources',\n            children: DataSourceSelector,\n          },\n        ],\n      },\n    },\n\n    {\n      name: 'default',\n      value: [\n        /**\n         * Customization Component Type definition for overlay items.\n         * Overlay items are texts (or other components) that will be displayed\n         * on a Viewport Overlay, which contains the information panels on the\n         * four corners of a viewport.\n         *\n         * @definition of a overlay item using this type\n         * The value to be displayed is defined by\n         *  - setting DICOM image instance's property to this field,\n         *  - or defining contentF()\n         *\n         * {\n         *   id: string - unique id for the overlay item\n         *   customizationType: string - indicates customization type definition to this\n         *   label: string - Label, to be displayed for the item\n         *   title: string - Tooltip, for the item\n         *   color: string - Color of the text\n         *   condition: ({ instance }) => boolean - decides whether to display the overlay item or not\n         *   attribute: string - property name of the DICOM image instance\n         *   contentF: ({ instance, formatters }) => string | component,\n         * }\n         *\n         * @example\n         *  {\n         *    id: 'PatientNameOverlay',\n         *    customizationType: 'ohif.overlayItem',\n         *    label: 'PN:',\n         *    title: 'Patient Name',\n         *    color: 'yellow',\n         *    condition: ({ instance }) => instance && instance.PatientName && instance.PatientName.Alphabetic,\n         *    attribute: 'PatientName',\n         *    contentF: ({ instance, formatters: { formatPN } }) => `${formatPN(instance.PatientName.Alphabetic)} ${(instance.PatientSex ? '(' + instance.PatientSex + ')' : '')}`,\n         *  },\n         *\n         * @see CustomizableViewportOverlay\n         */\n        {\n          id: 'ohif.overlayItem',\n          content: function (props) {\n            if (this.condition && !this.condition(props)) {\n              return null;\n            }\n\n            const { instance } = props;\n            const value =\n              instance && this.attribute\n                ? instance[this.attribute]\n                : this.contentF && typeof this.contentF === 'function'\n                ? this.contentF(props)\n                : null;\n            if (!value) {\n              return null;\n            }\n\n            return (\n              <span\n                className=\"overlay-item flex flex-row\"\n                style={{ color: this.color || undefined }}\n                title={this.title || ''}\n              >\n                {this.label && <span className=\"mr-1 shrink-0\">{this.label}</span>}\n                <span className=\"font-light\">{value}</span>\n              </span>\n            );\n          },\n        },\n\n        {\n          id: 'ohif.contextMenu',\n\n          /** Applies the customizationType to all the menu items.\n           * This function clones the object and child objects to prevent\n           * changes to the original customization object.\n           */\n          transform: function (customizationService: CustomizationService) {\n            // Don't modify the children, as those are copied by reference\n            const clonedObject = { ...this };\n            clonedObject.menus = this.menus.map(menu => ({ ...menu }));\n\n            for (const menu of clonedObject.menus) {\n              const { items: originalItems } = menu;\n              menu.items = [];\n              for (const item of originalItems) {\n                menu.items.push(customizationService.transform(item));\n              }\n            }\n            return clonedObject;\n          },\n        },\n\n        {\n          // the generic GUI component to configure a data source using an instance of a BaseDataSourceConfigurationAPI\n          id: 'ohif.dataSourceConfigurationComponent',\n          component: DataSourceConfigurationComponent.bind(null, {\n            servicesManager,\n            extensionManager,\n          }),\n        },\n\n        {\n          // The factory for creating an instance of a BaseDataSourceConfigurationAPI for Google Cloud Healthcare\n          id: 'ohif.dataSourceConfigurationAPI.google',\n          factory: (dataSourceName: string) =>\n            new GoogleCloudDataSourceConfigurationAPI(\n              dataSourceName,\n              servicesManager,\n              extensionManager\n            ),\n        },\n      ],\n    },\n  ];\n}\n"],"names":["getString","getName","getModalities","DICOMWeb","processResults","qidoStudies","length","studies","forEach","qidoStudy","push","studyInstanceUid","date","time","accession","mrn","patientName","utils","formatPN","instances","Number","description","modalities","async","search","dicomWebClient","seriesInstanceUid","queryParameters","searchForStudies","undefined","queryParams","mapParams","params","options","arguments","commaSeparatedFields","join","supportsWildcard","withWildcard","value","parameters","PatientName","patientId","AccessionNumber","accessionNumber","StudyDescription","studyDescription","ModalitiesInStudy","modalitiesInStudy","limit","offset","fuzzymatching","supportsFuzzyMatching","includefield","startDate","endDate","StudyDate","today","Date","DD","String","getDate","padStart","MM","getMonth","todayStr","getFullYear","oldDateStr","studyUids","Array","isArray","replace","StudyInstanceUID","final","Object","keys","key","getImageId","_ref","instance","frame","config","thumbnail","url","renderingAttr","uri","baseWadoRsUri","SeriesInstanceUID","SOPInstanceUID","wadoRoot","buildInstanceWadoRsUri","buildInstanceFrameWadoRsUri","getWADORSImageId","wadouri","paramString","wadoUriRoot","buildInstanceWadoUrl","imageId","RetrieveMetadataLoader","constructor","client","studyInstanceUID","filters","sortCriteria","sortFunction","this","execLoad","preLoadData","preLoad","loadData","load","posLoad","runLoaders","loaders","result","loader","e","next","done","Error","configLoad","RetrieveMetadataLoaderSync","getOptions","seriesInstanceUID","getLoaders","retrieveSeriesMetadata","bind","retrieveStudyMetadata","RetrieveMetadataLoaderAsync","getPreLoaders","preLoaders","searchForSeries","naturalizeDataset","dcmjs","DicomMetaDictionary","naturalized","map","sortStudySeries","sortingCriteria","seriesSortCriteria","seriesInfoSortingCriteria","seriesAsyncLoader","seriesInstanceUIDList","freeze","hasNext","shift","makeSeriesAsyncLoader","s","promises","enableStudyLazyLoad","retrieveMetadataLoader","SeriesInstanceUIDs","Promise","resolve","reject","uid","seriesSpecificFilters","assign","RetrieveMetadata","all","then","results","aggregatedResult","concat","moduleName","StudyMetaDataPromises","Map","dicomWebConfig","promiseId","name","has","get","promise","retrieveMetadataFiltered","data","set","deleteStudyMetadataPromise","delete","StaticWadoClient","api","DICOMwebClient","qidoConfig","super","staticWado","searchResult","lowerParams","toLowerParams","filter","study","studyFilterKeys","filterItem","series","seriesFilterKeys","compareValues","desired","actual","find","item","actualItem","Alphabetic","indexOf","substring","compareDateRange","range","dash","start","end","sourceFilterMap","altKey","testValue","valueElem","vr","Value","entries","toLowerCase","studyinstanceuid","patientname","studydescription","studydate","modalitiesinstudy","accessionnumber","seriesinstanceuid","seriesnumber","modality","getDirectURL","singlepart","tag","defaultPath","defaultType","fetchPart","DirectRetrieveURL","InlineBinary","blob","b64toBlob","URL","createObjectURL","retrieveBulkData","arr","Blob","type","console","warn","BulkDataURI","hasQuery","hasAccept","fixBulkDataURI","startsWith","origin","bulkDataURI","relativeResolution","DicomDict","denaturalizeDataset","ImplementationClassUID","ImplementationVersionName","EXPLICIT_VR_LITTLE_ENDIAN","metadataProvider","classes","MetadataProvider","createDicomWebApi","userAuthenticationService","dicomWebConfigCopy","wadoConfig","qidoDicomWebClient","wadoDicomWebClient","getAuthrorizationHeader","generateWadoHeader","implementation","initialize","query","onConfiguration","JSON","parse","stringify","xhrRequestHeaders","authHeaders","getAuthorizationHeader","Authorization","Accept","generateAcceptHeader","acceptHeader","requestTransferSyntaxUID","omitQuotationForMultipartRequest","qidoRoot","headers","errorInterceptor","errorHandler","getHTTPErrorHandler","origParams","mappedParams","qidoSearch","qidoSeries","seriesNumber","seriesDate","formatDate","numSeriesInstances","processSeriesResults","seriesInStudy","call","retrieve","directURL","_ref2","multipart","val","metadata","madeInClient","_retrieveSeriesMetadataAsync","_retrieveSeriesMetadataSync","store","dicom","dataset","request","ArrayBuffer","datasets","storeInstances","meta","FileMetaInformationVersion","_meta","MediaStorageSOPClassUID","SOPClassUID","MediaStorageSOPInstanceUID","TransferSyntaxUID","denaturalized","dicomDict","dict","write","naturalizedInstancesMetadata","seriesSummaryMetadata","instancesPerSeries","SeriesDescription","SeriesNumber","SeriesTime","ProtocolName","Modality","getImageIdsForInstance","wadoUri","addImageIdToUIDs","seriesMetadata","values","DicomMetadataStore","addSeriesMetadata","addInstances","seriesPromises","addRetrieveBulkData","enabled","ret","arrayBuffer","byteLength","aSeries","seriesDeliveredPromises","naturalizedInstances","index","getStudy","isLoaded","setSuccessFlag","getImageIdsForDisplaySet","displaySet","images","imageIds","NumberOfFrames","_ref3","getConfig","getStudyInstanceUIDs","_ref4","StudyInstanceUIDs","paramsStudyInstanceUIDs","queryStudyInstanceUIDs","splitComma","getAll","supportsReject","xhr","XMLHttpRequest","open","log","onreadystatechange","readyState","status","responseText","send","IWebApiDataSource","create","OHIF","mappings","_store","urls","studyInstanceUIDMap","wrapSequences","obj","reduce","acc","endsWith","addAccessors","getMetaDataByURL","metaData","findStudies","aStudy","createDicomJSONApi","dicomJsonConfig","response","fetch","json","naturalizedDicom","param","mappedParam","NumInstances","Modalities","PatientID","StudyTime","customSort","seriesSummary","numberOfSeries","i","EVENTS","END_MODALITIES","SR","SEG","DOC","compareValue","v1","v2","seriesA","seriesB","instanceA","instanceB","modalityA","modalityB","isEndA","isEndB","createDicomLocalApi","dicomLocalConfig","numInstances","Set","add","firstInstance","from","SeriesDate","_broadcastEvent","SERIES_ADDED","isMultiframe","frameIndex","INSTANCES_ADDED","naturalizedReport","reportBlob","datasetToBlob","objectUrl","window","location","getInstance","StudyInstanceUIDsAsArray","isStudyInCache","sort","createDicomWebProxyApi","dicomWebProxyConfig","UserAuthenticationService","dicomWebDelegate","servers","dicomWeb","configuration","studyInstanceUIDs","split","mergeMap","mergeKey","tagFunc","x","sourceName","RetrieveAETitle","updateSeriesMetadata","callForAllDataSourcesAsync","path","args","extensionManager","dataSourceNames","dataSourceDefs","mergedData","dataSourceDef","includes","dataSource","getDataSources","apply","allSettled","uniqBy","flat","callForAllDataSources","callForDefaultDataSource","defaultDataSourceName","callByRetrieveAETitle","getSeries","createMergeDataSourceApi","mergeConfig","seriesMerge","_len","_key","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","_len10","_key10","_len11","_key11","_len12","_key12","createDataSource","Toolbar","servicesManager","toolbarService","services","viewportGrid","viewportGridService","useViewportGrid","toolbarButtons","setToolbarButtons","useState","useEffect","updateToolbar","toolGroupId","getActiveViewportOptionByKey","getButtonSection","unsubscribe","subscribe","TOOL_BAR_MODIFIED","onInteraction","useCallback","recordInteraction","React","toolDef","id","Component","componentProps","className","classnames","_extends","availableLanguages","defaultLanguage","currentLanguage","i18n","hotkeysManager","appConfig","useAppConfig","navigate","useNavigate","useLocation","t","useTranslation","show","hide","useModal","hotkeyDefinitions","hotkeyDefaults","menuOptions","title","icon","onClick","content","AboutModal","contentProps","versionNumber","process","commitHash","UserPreferences","getValidHotkeyDefinitions","onCancel","hotkeys","stopRecord","unpause","onSubmit","language","changeLanguage","setHotkeys","onReset","restoreDefaultBindings","hotkeysModule","oidc","encodeURIComponent","href","Header","isReturnEnabled","showStudyList","onClickReturnButton","pathname","dataSourceIdx","configUrl","URLSearchParams","dataSourceName","existingDataSource","searchQuery","append","decodeURIComponent","toString","WhiteLabeling","whiteLabeling","ErrorBoundary","context","side","activeTabIndex","activeTabIndexProp","tabs","panelService","hasBeenOpened","setHasBeenOpened","setActiveTabIndex","activatePanelSubscription","ACTIVATE_PANEL","activatePanelEvent","forceActive","tabIndex","findIndex","tab","panelId","SidePanel","onOpen","ViewerLayout","commandsManager","viewports","ViewportGridComp","leftPanels","rightPanels","leftPanelDefaultClosed","rightPanelDefaultClosed","hangingProtocolService","showLoadingIndicator","setShowLoadingIndicator","document","body","classList","remove","getComponent","entry","getModuleEntry","component","getPanelData","iconName","iconLabel","label","HangingProtocolService","PROTOCOL_CHANGED","leftPanelComponents","rightPanelComponents","viewportComponents","viewportComponent","namespace","displaySetsToDisplay","ViewerHeader","style","height","LoadingIndicatorProgress","SidePanelWithServices","propTypes","PropTypes","isRequired","CommandsManager","ServicesManager","children","sortStudyInstances","PanelStudyBrowser","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","displaySetService","uiNotificationService","useImageViewer","activeViewportId","activeTabName","setActiveTabName","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","sid","qidoForStudyUID","qidoStudiesForPatient","error","actuallyMappedStudies","prevArray","it","fetchStudiesForPatient","activeDisplaySets","newImageSrcEntry","getDisplaySetByUID","dSet","displaySetInstanceUID","Math","floor","unsupported","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","initialViewport","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","ds","tabStudy","_createStudyBrowserTabs","activeDisplaySetInstanceUIDs","displaySetInstanceUIDs","StudyBrowser","onDoubleClickThumbnail","updatedViewports","viewportId","getViewportsRequireUpdate","message","duration","setDisplaySetsForViewports","onClickStudy","shouldCollapseStudy","updatedExpandedStudyInstanceUIDs","stdyUid","onClickTab","clickedTabName","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","seriesTime","numImageFrames","countIcon","messages","dragData","isHydratedForDerivedDisplaySet","isHydrated","cornerstone","canvas","createElement","utilities","loadImageToCanvas","toDataURL","catch","some","WrappedPanelStudyBrowser","_getStudiesForPatientByMRN","_getImageSrcFromImageId","exports","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","LegacyButtonGroup","color","size","LegacyButton","defaultProps","alert","CREATE_REPORT_DIALOG_RESPONSE","CANCEL","CREATE_REPORT","CreateReportDialogPrompt","uiDialogService","dialogId","dataSourcesOpts","dataSourceMap","supportsStow","placeHolder","centralize","isDraggable","Dialog","useLastPosition","showOverlay","activeDataSource","noCloseButton","onClose","_handleClose","dismiss","action","actions","text","ButtonEnums","secondary","primary","setValue","allowMultiSelectExport","Select","closeMenuOnSelect","placeholder","option","onChange","evt","v","isClearable","Input","autoFocus","labelClassName","event","persist","target","onKeyPress","required","Loading","getReport","reportType","loadingDialogId","getMostRecentDisplaySet","MIN_SR_SERIES_NUMBER","findSRWithSameSeriesDescription","sameSeries","InstanceNumber","srSeriesNumbers","max","getNextSRSeriesNumber","downloadCSVReport","PanelMeasurementTable","measurementService","displayMeasurements","setDisplayMeasurements","debouncedSetDisplayMeasurements","debounce","_getMappedMeasurements","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","unsub","cancel","onMeasurementItemClickHandler","_ref6","isActive","measurements","measurement","m","MeasurementTable","jumpToMeasurement","onEdit","getMeasurement","onSubmitHandler","update","_ref5","getMeasurements","onClearMeasurementsClick","clearMeasurements","activeViewport","trackedMeasurements","referenceStudyUID","promptResult","createReportDialogPrompt","createReportAsync","runCommand","measurementData","additionalFindingTypes","types","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","_mapMeasurementToDisplay","VALUE_TYPES","secondaryLabel","wrappedMeasurementPanel","packageJson","_checkSeriesPositionShift","previousPosition","actualPosition","scanAxisNormal","averageSpacingBetweenFrames","predictedPosition","vec3","areAllImagePositionsEqual","firstImageOrientationPatient","toNumber","ImageOrientationPatient","imageOrientation","rowCosineVec","colCosineVec","calculateScanAxisNormal","firstImagePositionPatient","ImagePositionPatient","lastIpp","_getPerpendicularDistance","previousImagePositionPatient","imagePositionPatient","checkSingleFrames","firstImage","firstImageRows","Rows","firstImageColumns","Columns","areAllImageDimensionsEqual","addMessage","DisplaySetMessage","CODES","INCONSISTENT_DIMENSIONS","firstImageSamplesPerPixel","SamplesPerPixel","areAllImageComponentsEqual","INCONSISTENT_COMPONENTS","imageOrientationPatient","_isSameOrientation","areAllImageOrientationsEqual","INCONSISTENT_ORIENTATIONS","INCONSISTENT_POSITION_INFORMATION","issuesFound","spacingBetweenFrames","spacingIssue","_getSpacingIssue","issue","reconstructionIssues","MISSING_FRAMES","IRREGULAR_SPACING","areAllImageSpacingEqual","getDisplaySetMessages","isReconstructable","DisplaySetMessageList","NO_VALID_INSTANCES","ImageType","constructableModalities","every","NO_POSITION_INFORMATION","sortedInstances","sortInstancesByPosition","multiFrameInstance","hasPixelMeasurements","MULTIFRAME_NO_PIXEL_MEASUREMENTS","hasOrientation","MULTIFRAME_NO_ORIENTATION","hasPosition","MULTIFRAME_NO_POSITION_INFORMATION","checkMultiFrame","NOT_RECONSTRUCTABLE","getDisplaySetsFromUnsupportedSeries","imageSet","ImageSet","UNSUPPORTED_DISPLAYSET","setAttributes","FrameRate","FrameTime","SOPClassHandlerId","sopClassHandlerName","isMultiFrame","makeDisplaySet","isDisplaySetReconstructable","sortBy","a","b","parseInt","isSingleImageModality","getDisplaySetsFromSeries","sopClassUids","uniqueSopClassUidsInSeries","getSopClassUids","stackableInstances","isImage","isClip","instanceNumber","acquisitionDatetime","AcquisitionDateTime","setAttribute","sopClassDictionary","ComputedRadiographyImageStorage","DigitalXRayImageStorageForPresentation","DigitalXRayImageStorageForProcessing","DigitalMammographyXRayImageStorageForPresentation","DigitalMammographyXRayImageStorageForProcessing","DigitalIntraOralXRayImageStorageForPresentation","DigitalIntraOralXRayImageStorageForProcessing","CTImageStorage","EnhancedCTImageStorage","LegacyConvertedEnhancedCTImageStorage","UltrasoundMultiframeImageStorage","MRImageStorage","EnhancedMRImageStorage","EnhancedMRColorImageStorage","LegacyConvertedEnhancedMRImageStorage","UltrasoundImageStorage","UltrasoundImageStorageRET","SecondaryCaptureImageStorage","MultiframeSingleBitSecondaryCaptureImageStorage","MultiframeGrayscaleByteSecondaryCaptureImageStorage","MultiframeGrayscaleWordSecondaryCaptureImageStorage","MultiframeTrueColorSecondaryCaptureImageStorage","XRayAngiographicImageStorage","EnhancedXAImageStorage","XRayRadiofluoroscopicImageStorage","EnhancedXRFImageStorage","XRay3DAngiographicImageStorage","XRay3DCraniofacialImageStorage","BreastTomosynthesisImageStorage","BreastProjectionXRayImageStorageForPresentation","BreastProjectionXRayImageStorageForProcessing","IntravascularOpticalCoherenceTomographyImageStorageForPresentation","IntravascularOpticalCoherenceTomographyImageStorageForProcessing","NuclearMedicineImageStorage","VLEndoscopicImageStorage","VideoEndoscopicImageStorage","VLMicroscopicImageStorage","VideoMicroscopicImageStorage","VLSlideCoordinatesMicroscopicImageStorage","VLPhotographicImageStorage","VideoPhotographicImageStorage","OphthalmicPhotography8BitImageStorage","OphthalmicPhotography16BitImageStorage","OphthalmicTomographyImageStorage","VLWholeSlideMicroscopyImageStorage","PositronEmissionTomographyImageStorage","EnhancedPETImageStorage","LegacyConvertedEnhancedPETImageStorage","RTImageStorage","EnhancedUSVolumeStorage","ToolbarDivider","LayoutSelector","rows","columns","onSelection","rest","isOpen","setIsOpen","closeOnOutsideClick","addEventListener","removeEventListener","DropdownContent","OHIFLayoutSelector","ToolbarButton","onInteractionHandler","rounded","dropdownContent","onLayoutChange","props","interactionType","commands","commandName","commandOptions","ToolbarSplitButtonWithServices","isRadio","isAction","groupId","items","renderer","handleItemClick","itemId","setState","state","isExpanded","getSplitButtonItems","buttonsState","setButtonState","primaryToolId","toggles","groups","isPrimaryToggle","isPrimaryActive","PrimaryButtonComponent","getButtonComponentForUIType","uiType","TOOL_BAR_STATE_MODIFIED","updatedItems","listItemRenderer","classNames","Icon","SplitButton","isToggle","tooltip","ToolbarButtonWithServices","getMenuItems","selectorProps","menus","menuIdFilter","subProps","menu","subMenu","findIt","menuId","findMenuById","selector","findMenuDefault","findMenuIterator","current","return","findMenu","menuItems","delegating","toAdd","newItem","actionType","iconRight","itemRef","detail","element","adaptItem","ContextMenuController","closeContextMenu","showContextMenu","contextMenuProps","viewportElement","defaultPointsPosition","ContextMenuItemsBuilder","preservePosition","preventCutOf","defaultPosition","_getDefaultPosition","ContextMenu","onClickOutside","eventData","onShowSubMenu","onDefault","run","getDefaultPosition","y","_getEventDefaultPosition","eventDetail","currentPoints","_getElementDefaultPosition","boundingClientRect","getBoundingClientRect","_getCanvasPointsPosition","points","viewerPos","pointIndex","point","_isValidPosition","source","canvasPoints","viewerElement","positionIterator","getPositionIterator","position","customizationType","nearbyToolData","rowVerticalPaddingStyle","padding","rowStyle","borderBottomWidth","ColumnHeaders","tagRef","vrRef","keywordRef","valueRef","ref","listRef","useRef","canvasRef","tagHeaderElem","setTagHeaderElem","vrHeaderElem","setVrHeaderElem","keywordHeaderElem","setKeywordHeaderElem","valueHeaderElem","setValueHeaderElem","scrollTo","resetAfterIndex","debouncedResize","Row","row","isHeaderRendered","getItemSize","headerWidths","offsetWidth","getContext","font","getComputedStyle","colText","colOneLineWidth","measureText","width","ceil","maxHeight","colHeight","visibility","elem","List","itemCount","itemSize","nameMap","getFormattedRowsFromTags","tags","tagInfo","tagIndent","keyword","formatedRowsFromTags","Tag","fromPString","toCleanString","originalTagInfo","getRows","depth","keywords","sequenceAsArray","objectOrArray","sequence","sequenceRows","_sortTagList","regex","match","tagList","excludedColumnIndicesForFilter","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","activeDisplaySet","isImageStack","showInstanceList","displaySetList","useMemo","dateStr","moment","format","getSortedTags","filteredRows","filterValueLowerCase","keepRow","col","colIndex","debouncedSetFilterValue","Typography","variant","InputRange","minValue","maxValue","step","inputClassName","labelPosition","trackColor","InputFilterText","onDebounceChange","DicomTagTable","reuseCachedLayout","syncService","protocol","getActiveProtocol","hpInfo","getState","protocolId","stageIndex","activeStudyUID","syncState","viewportGridStore","displaySetSelectorMap","stage","stages","storeId","cacheId","hangingProtocolStageIndexMap","viewportStructure","properties","custom","layout","numRows","numCols","viewport","displaySetOptions","displaySetUID","matchedDisplaySetsIndex","findOrCreateViewport","viewportsByPosition","positionId","byPositionViewport","inDisplay","initialInDisplay","missing","getMissingViewport","displaySetsInfo","viewportOptions","findViewportsByPosition","storedViewport","subscribeToNextViewportGridChange","isHangingProtocolCommand","command","customizationService","stateSyncService","contextMenuController","menuCustomizationId","optionsToUse","defaultContextMenu","displayNotification","clear","toggleHpTools","toggleStageIndex","enableListener","button","hpCommand","stageId","setToggled","getButtons","setHangingProtocol","reset","primaryToolBeforeHPChange","getActivePrimaryTool","oldProtocol","stateSyncReduce","reuseCachedLayouts","hangingId","useStageIdx","getStageIndex","setActiveStudyUID","storedHanging","restoreProtocol","setProtocol","primaryButton","getButton","firstItem","toggleHangingProtocol","desiredStageIndex","activeStudy","previousState","deltaStage","direction","oldStageIndex","setViewportGridLayout","callbacks","setTimeout","completeLayout","stateReduce","layoutFindOrCreate","setLayout","toggleOneUp","viewportGridState","toggleOneUpViewportGridStore","viewportIdToUpdate","updatedViewportsViaHP","preOneUpViewport","layoutOptions","getLayoutOptionsFromState","clearToggleOneUpViewportGridStore","navigateHistory","historyArgs","history","to","openDICOMTagViewer","activeViewportSpecificData","UIModalService","DicomTagBrowser","toggleOverlays","overlays","getElementsByClassName","toggle","scrollActiveThumbnailIntoView","activeDisplaySetInstanceUID","thumbnailList","querySelector","thumbnailListBounds","thumbnailBounds","top","bottom","scrollIntoView","behavior","updateViewportDisplaySet","_ref7","excludeNonImageModalities","nonImageModalities","dsSortFn","getDisplaySetSortFunction","currentDisplaySets","displaySetIndexToShow","definitions","commandFn","storeContexts","nextStage","previousStage","defaultContext","protocolMatchingRules","weight","attribute","constraint","greaterThan","toolGroupIds","displaySetSelectors","defaultDisplaySetId","seriesMatchingRules","equals","defaultViewport","viewportType","allowUnmatchedView","stageActivation","minViewportsMatched","layoutType","requiredViewports","preferredViewports","numberOfPriorsReferenced","currentDisplaySet","priorDisplaySet","currentViewport0","currentViewport1","priorViewport0","notNull","studyMatchingRules","priorDisplaySetId","defaultProtocol","locked","createdDate","modifiedDate","availableTo","editableBy","initialImageOptions","hpMNGrid","hpMNCompare","dsConfigs","dataSources","src","alt","friendlyName","Button","itemLabel","itemList","onItemClicked","endIcon","NO_WRAP_ELLIPSIS_CLASS_NAMES","configurationAPI","configuredItems","onHide","setItemList","selectedItems","setSelectedItems","errorMessage","setErrorMessage","itemLabels","getItemLabels","showFullConfig","setShowFullConfig","currentSelectedItemIndex","shouldUpdate","setCurrentItem","getSelectedItemBackgroundClasses","itemIndex","getSelectedItemBorderClasses","getSelectedItemTextClasses","itemLabelIndex","theList","slice","ItemListComponent","setConfigurationAPI","setConfiguredItems","dataSourceChangedCallback","activeDataSourceDef","getActiveDataSourceDefinition","factory","configurationAPIFactory","configAPI","getConfiguredItems","list","sub","ACTIVE_DATA_SOURCE_CHANGED","showConfigurationModal","DataSourceConfigurationModalComponent","ItemType","initialUrl","baseHealthcareUrl","GoogleCloudDataSourceConfigurationAPI","_extensionManager","_fetchOptions","_dataSourceName","method","projects","_doFetch","project","projectId","itemType","anItem","googleCloudItem","dicomStores","dataSourceDefCopy","getDataSourceDefinition","updateDataSourceConfiguration","subItemType","subItemField","fetchedSubItems","subItem","nameSplit","projectsIndex","urlSplit","projectUrl","relativePath","urlStr","fetchItemType","fetchOptions","fetchSearchParams","nextPageToken","pageToken","subPageData","statusText","err","handlePETImageMetadata","instanceMetadataArray","instanceMetadata","dicomMetaData","CorrectedImage","Units","RadiopharmaceuticalInformationSequence","RadionuclideHalfLife","RadionuclideTotalDose","DecayCorrection","AcquisitionDate","AcquisitionTime","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","PatientWeight","philipsPETPrivateGroup","SUVScaleFactor","ActivityConcentrationScaleFactor","PhilipsPETPrivateGroup","GEPrivatePostInjectionDateTime","FrameReferenceTime","ActualFrameDuration","PatientSex","PatientSize","getPTImageIdInstanceMetadata","suvScalingFactors","calculateSUVScalingFactors","addCustomMetadata","preRegistration","SERIES_UPDATED","register","clearOnModeExit","getDataSourcesModule","getLayoutTemplateModule","getPanelModule","getHangingProtocolModule","getSopClassHandlerModule","getToolbarModule","defaultComponent","clickHandler","ToolbarLayoutSelectorWithServices","clickedBtn","btnSectionName","getCommandsModule","getUtilityModule","getCustomizationModule","routes","DataSourceSelector","condition","contentF","transform","clonedObject","originalItems","DataSourceConfigurationComponent"],"sourceRoot":""}