{"version":3,"file":"135.bundle.ffd694f053ebce7c1f27.js","mappings":"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,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,MCvNjB,SAzBAnO,eACE3E,EACA+S,EACAC,GAKA,IAFkB7I,GAAanK,GAG7B,MAAM,IAAIzT,MAAM,wCAAwCyT,KAG1D,MAAMiT,EAAWF,EAAyBhc,KAAK8b,GCdjDlO,eACE3E,EACA6S,EACAK,GAEA,MAAM,eAAEvT,EAAc,QAAEwT,EAAU,CAAC,GAAMN,EACnChS,EAAgCrS,GAAAA,UAAAA,SAIhCuY,EAAiB,IAAIngB,IAErBwsB,EAAuBD,EAAQE,gBACrC,IAAIC,EAEJ,GAAoC,iBAAzBF,EACTE,EAAqBF,MAChB,CACL,MAAMG,EAAY/T,KAIlB4C,GAHsBta,MAAM0rB,QAAQJ,GAChCA,EACAK,GACyCF,GAC7CD,EAAqBC,C,CAGvB,MAAMG,EAAmE,CACvE/T,iBACAkB,gCACAjL,KAAMid,EAAoBjd,KAC1BmR,iBACAxE,cAAe+Q,EACf7R,QAAQ,EACRI,yCAA0C,CAAC,EAC3CI,sBAAuB,CAAC,EACxBzB,OAAQoS,GAAgCC,IAI1C,GAAIK,EAAyB,CAI3B,MAAMS,EACJC,GAA8C5T,GAE1C6T,EAAerlB,GAAAA,UAAAA,UACnBmlB,EACAT,GAGFU,GAA8C5T,EAAa,CACzDlB,4BACE+U,EAAa/U,8BAA+B,EAC9CC,gBAAiB,IACZ8U,EAAa9U,kB,CAUtB,OALA+U,GACE9T,EACA0T,GAGK7S,CACT,CDnDWP,CACLN,EACA6S,EACAG,KAMJ,aAF6Ce,QAAQC,IAAIf,EAG3D,EE/BA,SAASgB,GACPjU,GAEA,MAEMiB,EAF2B6C,KAGN/D,+BAA+BC,GAE1D,IAAKiB,EACH,OAOF,OAJ6BA,EAAqCrB,MAC/DkB,GAAmBA,EAAeW,QAIvC,CAUA,SAASH,GACPtB,EACAa,GAEiCiD,KAERxC,oCACvBtB,EACAa,GAGFgC,GACE7C,EACAa,EAEJ,CCxCA,SAASqT,GACPvU,EACAqC,GAEA,MAAMnC,EAAeH,GAAgBC,GAErC,IAAKE,EACH,MAAM,IAAItT,MAAM,mCAAmCoT,KAGrD,MAAM,eAAE+D,GAAmB7D,EAC3B,OAAO6D,EAAevc,IAAI6a,EAC5B,CAQA,SAASmS,GACPxU,EACAqC,EACAjb,GAAS,GAET,MAAM8Y,EAAeH,GAAgBC,GAErC,IAAKE,EACH,MAAM,IAAItT,MAAM,mCAAmCoT,KAGrD,MAAM,eAAE+D,GAAmB7D,EAEvB9Y,EACF2c,EAAetc,IAAI4a,GAEnB0B,EAAeva,OAAO6Y,GAGxBe,GAA4BpD,EAC9B,CAQA,SAASyU,GAAkBzU,GACzB,MAAME,EAAeH,GAAgBC,GAErC,IAAKE,EACH,MAAM,IAAItT,MAAM,mCAAmCoT,KAGrD,MAAM,eAAE+D,GAAmB7D,EAC3B,OAAO/X,MAAMC,KAAK2b,EACpB,CCxDA,SAAStB,GAAYzD,EAA0B4D,GAC7C,IAAK5D,EACH,MAAM,IAAIpS,MAAM,qCAIbiC,GAAAA,UAAAA,QAAkBmQ,EAAS,GAAI,CAAC,EAAG,EAAG,EAAG,MAC5CwC,QAAQC,KACN,uHAEFzC,EAAS0V,QAAQ,CAAC,EAAG,EAAG,EAAG,KAG7BpM,GAA8BtJ,EAAU4D,EAC1C,CASA,SAAS+R,GACPtU,EACAa,EACA0B,GAEA,MAAMgS,EACJtM,GACEjI,EACAa,GAGJ,IAAK0T,EACH,MAAM,IAAIhoB,MACR,oEAAoEsU,KAIxE,IAAKoH,GAA8B1F,GACjC,MAAM,IAAIhW,MACR,mDAAmDgW,KAIvDgS,EAAkBhS,cAAgBA,EAElCM,GACE7C,EACAa,EAEJ,CAYA,SAAS2T,GACPxU,EACAa,EACAmB,GAEA,MAAMzB,EACJ0H,GACEjI,EACAa,GAGJ,IAAKN,EACH,MAAM,IAAIhU,MACR,wCAAwCsU,mCAA+Db,KAI3G,MAAM,cAAEuC,GAAkBhC,EAGpB5B,EAAWsJ,GAA8B1F,GAC/C,IAAIkS,EAAa9V,EAASqD,GAC1B,IAAKyS,EAAY,CACf,GAA4B,iBAAjBzS,EACT,MAAM,IAAIzV,MAAM,qCAAqCyV,KAEvDyS,EAAa9V,EAASqD,GAAgB,CAAC,EAAG,EAAG,EAAG,E,CAElD,OAAOyS,CACT,CAEA,SAASC,GACP1U,EACAa,EACAmB,EACAwL,GAGA,MAAMmH,EAAiBH,GACrBxU,EACAa,EACAmB,GAIF,IAAK,IAAIhL,EAAI,EAAGA,EAAIwW,EAAMpkB,OAAQ4N,IAChC2d,EAAe3d,GAAKwW,EAAMxW,GAG5B6L,GACE7C,EACAa,EAEJ,CC5DA,SAAS+T,GACP5U,EACAa,EACAoE,GAEA,MAAMhE,EACJlB,GAA+BC,GAEjC,IAAKiB,EACH,OAGF,MAAMH,EAAiBG,EAAqCrB,MACzDkB,GACCA,EAAeD,gCACfA,IAGJ,IAAKC,EACH,OAGF,MAAM,eAAEiG,EAAc,eAAEpH,GAAmBmB,EAErC+T,EAnFR,SAAgClV,GAC9B,MAAME,EAAeoI,GAAkCtI,GAEjDmV,EAAqBA,CAACC,EAAOC,KACjC,IAAK,IAAIhe,EAAI,EAAGA,EAAI+d,EAAM3rB,OAAQ4N,IAChCge,EAAQD,EAAM/d,KAAM,C,EAIxB,GAAI6I,EAAajK,OAASpP,GAA4BwY,SAAU,CAC9D,MAAMgW,EAAU,CAAC,EAEjB,GAEInV,EAAa+D,mBACVqR,SACHvQ,SACF,CACA,MAAMkE,EAASN,GAAAA,MAAMC,UAAU5I,GAC/BmV,EAAmBlM,EAAOsM,gBAAiBF,E,KACtC,CACL,MAAM,oBAAEzP,GAAwB1F,EAAa+D,mBAC1CqR,SAEH1P,EAAoB5d,SAASwtB,IAC3B,MAAMC,EAAQ9M,GAAAA,MAAM+M,SAASF,GAC7BL,EAAmBM,EAAME,eAAgBN,EAAQ,G,CAIrD,OAAO1sB,OAAOwE,KAAKkoB,GAChBje,KAAKwe,GAAMC,SAASD,EAAG,MACvBlrB,QAAQkrB,GAAY,IAANA,G,CACZ,GAAI1V,EAAajK,OAASpP,GAA4ByY,QAAS,CACpE,MAAMgM,EAAcpL,EAAa+D,mBAAmBgH,SAASK,YAE7D,IAAKA,EACH,MAAM,IAAI1e,MACR,2CAA2CoT,KAI/C,OAAOsL,EAAYlU,KAAKyU,GACLlD,GAAAA,MAAMoD,YAAYF,GAClB3H,KAA2B8H,mB,CAGlD,CAoCkB8J,CAAuB9V,GAKnCsF,EACF8B,EAAe2O,QAEfb,EAAQltB,SAASkG,IACfkZ,EAAe3f,IAAIyG,EAAM,IAI7BgV,GACE7C,EACAc,EAAeD,8BAEnB,CAWA,SAAS8U,GACP3V,EACAa,GAEA,MAGMC,EAFJf,GAA+BC,GAE2BJ,MACzDkB,GACCA,EAAeD,gCACfA,IAGJ,IAAKC,EACH,OAGF,MAAM,eAAEiG,GAAmBjG,EAE3B,OAA+B,IAAxBiG,EAAe7e,IACxB,CAcA,SAAS0tB,GACP5V,EACAa,EACAgV,EACA5Q,GAEA,MAAMsP,EACJtM,GACEjI,EACAa,GAGC0T,IAILsB,EAAeluB,SAASqa,IACtBiD,EACIsP,EAAkBxN,eAAe5d,OAAO6Y,GACxCuS,EAAkBxN,eAAe3f,IAAI4a,EAAa,IAGxDa,GACE7C,EACAa,GAEJ,CAEA,SAASiV,GACP9V,EACAa,EACAmB,EACAiD,GAEA,MAAMsP,EACJtM,GACEjI,EACAa,GAGC0T,IAILtP,EACIsP,EAAkBxN,eAAe5d,OAAO6Y,GACxCuS,EAAkBxN,eAAe3f,IAAI4a,GAEzCa,GACE7C,EACAa,GAEJ,CCrMA,SAASkV,GACPpW,EACAqC,GAEA,MAAMnC,EAAeH,GAAgBC,GAEjCE,GAAc8D,qBAAuB3B,IACvCnC,EAAa8D,mBAAqB3B,EAElCe,GAA4BpD,GAEhC,CAOA,SAASqW,GAAsBrW,GAC7B,MAAME,EAAeH,GAAgBC,GAErC,GAAIE,EACF,OAAOA,EAAa8D,kBAExB,CCFA,MAAesS,GAUbjqB,WAAAA,CAAYkqB,EAA4BC,GACtC,MAAMC,EAAe5nB,GAAAA,UAAAA,UAAoB2nB,EAAkBD,IAErD,cACJG,EAAgB,CAAC,EAAC,0BAClBC,EAAyB,YACzBtW,GACEoW,EAGCC,EAAcE,aACjBF,EAAcE,WAAa,CAAC,EAC5BF,EAAcG,qBAAkBzpB,EAChCspB,EAAcI,oBAAiB1pB,EAC/BspB,EAAcK,gBAAkB,CAAC,GAGnCjtB,KAAKuW,YAAcA,EACnBvW,KAAK6sB,0BAA4BA,GAA6B,GAC9D7sB,KAAK4sB,cAAgB/tB,OAAOqmB,OAAO,CAAC,EAAG0H,GACvC5sB,KAAKktB,KAAOtwB,GAAUuwB,QACxB,CAMOC,WAAAA,GAEL,OAAyBptB,KAAKuC,YAAa5B,QAC7C,CASO0sB,mBAAAA,CACLzqB,EACAoY,GAEA,MAAM,WAAE8R,EAAU,eAAEE,GAAmBhtB,KAAK4sB,cAC5C,OAAOE,EAAWE,IAAiBM,KACjCttB,KACA4C,EACAoY,EAEJ,CAaOuS,2BAAAA,CACL3qB,EACAoY,EACAwS,GAEA,MAAM,WAAEV,EAAU,eAAEE,GAAmBhtB,KAAK4sB,cAC5C,OAAOE,EAAWE,GAAgBQ,IAAeF,KAC/CttB,KACA4C,EACAoY,EAEJ,CAMOyS,gBAAAA,CAAiBC,GACtB1tB,KAAK4sB,cAAgB7nB,GAAAA,UAAAA,UACnB/E,KAAK4sB,cACLc,EAEJ,CASOC,iBAAAA,CAAkBC,GACvB5tB,KAAKytB,iBAAiB,CAAET,eAAgBY,GAC1C,CAcQC,iBAAAA,CAAkBrnB,GACxB,GAAIxG,KAAK4sB,cAAc3R,SACrB,OAAOjb,KAAK4sB,cAAc3R,SAK5B,MAAM6S,EAAetnB,EAAS6gB,YAE9B,OAAKyG,EAKEA,EAAa3X,MACjBuI,GAAmD,cAApCA,EAAWmB,MAAMkO,kBAChCvrB,SAPH,CAQF,CAaUwrB,gBAAAA,CACRC,EACA7S,GAEA,GAAI6S,EAASC,WAAW,YAAa,CACnC,MAAMrS,EAAUoS,EAASE,MAAM,YAAY,GACrCC,EAAWrpB,GAAAA,UAAAA,aAAuB8W,GACxC,IAAIwS,EAAYtpB,GAAAA,UAAAA,yBACdqpB,EACAhT,EAAgBC,IAGlB,IAAKgT,IAAcA,EAAU1uB,OAC3B,OAOF,GAJA0uB,EAAYA,EAAUztB,QAAQ4F,GACrBA,EAASuV,sBAAwBF,KAGrCwS,IAAcA,EAAU1uB,OAC3B,OAGF,OAAO0uB,EAAU,GAAGC,c,CACf,GAAIL,EAASC,WAAW,aAAc,CAC3C,MAAMjT,EAAWgT,EAASE,MAAM,aAAa,GACvCE,EAAYtpB,GAAAA,UAAAA,yBAChBkW,EACAG,EAAgBC,IAGlB,IAAKgT,IAAcA,EAAU1uB,OAC3B,OAGF,OAAO0uB,EAAU,GAAGC,c,CACf,GAAIL,EAASC,WAAW,YAAa,CAE1C,MAAME,EAAWrpB,GAAAA,UAAAA,aAAuBkpB,GAClCI,EAAYtpB,GAAAA,UAAAA,yBAChBqpB,EACAhT,EAAgBC,IAGlB,IAAKgT,IAAcA,EAAU1uB,OAC3B,OAGF,OAAO0uB,EAAU,GAAGC,c,CAEpB,MAAM,IAAIxrB,MACR,uEAGN,CAYUyrB,WAAAA,CAAY/nB,GACpB,GAAIA,aAAoB0V,GAAAA,cACtB,MAAO,WAAW1V,EAASuV,sBACtB,GAAIvV,aAAoBgoB,GAAAA,mBAC7B,MAAO,YAAYxuB,KAAK6tB,kBAAkBrnB,KACrC,GAAIA,aAAoBioB,GAAAA,cAC7B,MAAO,WAAWjoB,EAASuV,sBAE3B,MAAM,IAAIjZ,MACR,kEAGN,EAKF0pB,GAAS7rB,SAAW,WACpB,Y,gBCvQA,MAAM+tB,GAAmB,mBA4CzB,SAASC,GAAWC,EAAYC,GAE9B,GAAKlqB,GAAMS,aAAawpB,GAIxB,OAAIjqB,GAAMS,aAAawpB,GAAYC,GAC1BlqB,GAAMS,aAAawpB,GAAYC,GAAUC,YADlD,CAGF,CAEA,SAASC,GAAWC,EAAiBJ,EAAYK,EAASJ,GAExD,IAAKlqB,GAAMS,aAAawpB,GACtB,OAAO,KAGTjqB,GAAMS,aAAawpB,GAAYC,GAAY,CACzCK,SAAS,EACTJ,OAAQG,GAGVD,EAAgBG,YAAYF,EAC9B,CAEA,SAASG,GAAeR,EAAYC,GAE7BlqB,GAAMS,aAAawpB,IAIpBjqB,GAAMS,aAAawpB,GAAYC,KACjClqB,GAAMS,aAAawpB,GAAYC,GAAUK,SAAU,EAEvD,CAEA,SAASG,GAAeL,EAAiBJ,GAElCjqB,GAAMS,aAAawpB,IAIxB/vB,OAAOwE,KAAKsB,GAAMS,aAAawpB,IAAa1wB,SAAS2wB,IACnD,MAAMS,EAAa3qB,GAAMS,aAAawpB,GAAYC,IAE7CS,EAAWJ,SAAWI,EAAWR,SACpCE,EAAgBO,YAAYD,EAAWR,eAChCnqB,GAAMS,aAAawpB,GAAYC,G,GAG5C,CAEA,SAzFA,SAA6BlsB,GAC3B,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,EAAU,kBAAEC,GAAsBpF,EACpCgsB,EAAa,GAAG7mB,KAAcC,IAC9BgnB,EAsBR,SAAsBrsB,GACpB,MAAM6sB,EAAkB,IAAId,KACtBe,EAAqB9sB,EAAQ+sB,cAAcF,GAMjD,OAFiBC,EAAmBC,cAAc,sBAGpD,CA/B0BC,CAAahtB,GAOrC,OAJA9D,OAAOwE,KAAKsB,GAAMS,aAAawpB,IAAa1wB,SAAS2wB,IACnDlqB,GAAMS,aAAawpB,GAAYC,GAAUK,SAAU,CAAK,IAGnD,CACLF,gBAAiBA,EACjBY,sBAAuBjrB,GAAMS,aAC7BupB,WAAYA,GAAWliB,KAAKzM,KAAM4uB,GAClCG,WAAYA,GAAWtiB,KAAKzM,KAAMgvB,EAAiBJ,GACnDQ,eAAgBA,GAAe3iB,KAAKzM,KAAM4uB,GAC1CS,eAAgBA,GAAe5iB,KAAKzM,KAAMgvB,EAAiBJ,GAE/D,ECfA,SAbA,SACEjsB,EACAktB,GAEA,MAAMC,EAAmBC,GAAoBptB,GAG7CktB,EAAGC,GAGHA,EAAiBT,gBACnB,ECLA,SARA,SACElvB,EACA6vB,EACAC,GAEA,MAAO,GAAG9vB,MAAkB6vB,MAAuBC,GACrD,ECMA,SAZM,SAAmCC,EAAYjB,GACnDpwB,OAAOwE,KAAK6sB,GAAYhyB,SAASuV,IAC/B,MAAM0c,EAAelB,EAAQmB,aAAa3c,GACpC4c,EAAWH,EAAWzc,QACXnQ,IAAb+sB,GAAuC,KAAbA,EAC5BpB,EAAQqB,gBAAgB7c,GACf0c,IAAiBE,GAC1BpB,EAAQsB,aAAa9c,EAAK4c,E,GAGhC,ECDA,SATM,SAAkCH,EAAYjB,GAClDpwB,OAAOwE,KAAK6sB,GAAYhyB,SAASuV,IAC/B,MAAM4c,EAAWH,EAAWzc,QACXnQ,IAAb+sB,GAAuC,KAAbA,GAC5BpB,EAAQsB,aAAa9c,EAAK4c,E,GAGhC,ECoEA,SAnEA,SACEP,EACA3vB,EACAqwB,EACAC,EACAC,EACAhH,EAAU,CAAC,EACXiH,EAAS,IAET,MAAM,MACJ5M,EAAK,KACL6M,EAAI,MACJC,EAAK,UACLC,EAAS,SACTC,EAAQ,YACRC,EAAW,cACXC,GACEpyB,OAAOqmB,OACT,CACEnB,MAAO,aACP6M,KAAM,cACNC,MAAO,IACPE,cAAUztB,EACVwtB,eAAWxtB,EACX2tB,cAAe,EACfD,YAAa,GAEftH,GAIIwH,EAAcJ,GAAaD,EAI3BM,EAAcC,GAASjxB,EAAe,SAAUqwB,GAChDa,EAAwBvB,EAAiBnB,WAAWwC,GAEpDjB,EAAa,CACjBoB,GAAI,GAAGb,EAAO,KACdc,GAAI,GAAGd,EAAO,KACde,EAAG,GAAGd,IACNe,OAAQ1N,EACR6M,OACA,eAAgBM,EAChB,mBAAoBH,EACpB,eAAgBC,EAChB,iBAAkBC,GAGpB,GAAII,EACFK,GAAyBxB,EAAYmB,GAErCvB,EAAiBV,eAAe+B,OAC3B,CACL,MAAMQ,EAAmBtnB,SAASunB,gBArBtB,6BAqB6C,UAE1C,KAAXjB,GACFgB,EAAiBpB,aAAa,UAAWI,GAG3CkB,GAAwB3B,EAAYyB,GAEpC7B,EAAiBf,WAAW4C,EAAkBR,E,CAElD,ECDA,SAjEA,SACErB,EACA3vB,EACA2xB,EACAC,EACArI,EAAU,CAAC,EACXiH,EAAS,IAET,MAAM,MAAE5M,EAAK,MAAE8M,EAAK,UAAEC,EAAS,SAAEC,GAAalyB,OAAOqmB,OACnD,CACEnB,MAAO,aACP8M,MAAO,IACPC,eAAWxtB,EACXytB,cAAUztB,GAEZomB,GAIIwH,EAAcJ,GAAaD,EAG3BM,EAAcC,GAASjxB,EAAe,UAAW2xB,GACjDE,EAAkBlC,EAAiBnB,WAAWwC,IAE7Cc,EAAQ1qB,EAAKH,EAAM8qB,GAASH,EAE7BI,EAAI1nB,KAAK2nB,MAAMhrB,EAAK,GAAK8qB,EAAM,GAAI9qB,EAAK,GAAK8qB,EAAM,IACnDG,EAAI5nB,KAAK2nB,MAAM7qB,EAAI,GAAK0qB,EAAO,GAAI1qB,EAAI,GAAK0qB,EAAO,IACnDK,EACkD,IAArD7nB,KAAK8nB,MAAMnrB,EAAK,GAAK8qB,EAAM,GAAI9qB,EAAK,GAAK8qB,EAAM,IAAaznB,KAAK+nB,GAE9D/B,EAAS,EAAErpB,EAAK,GAAK8qB,EAAM,IAAM,GAAI3qB,EAAI,GAAK0qB,EAAO,IAAM,GAI3D/B,EAAa,CACjBoB,GAAI,GAAGb,EAAO,KACdc,GAAI,GAAGd,EAAO,KACdgC,GAAI,GANUN,EAAI,IAOlBO,GAAI,GANUL,EAAI,IAOlBZ,OAAQ1N,EACR6M,KAAM,cACN+B,UAAW,UAAUL,KAAS7B,EAAO,MAAMA,EAAO,MAClD,eAAgBS,EAChB,mBAAoBH,GAGtB,GAAIiB,EACFN,GAAyBxB,EAAY8B,GAErClC,EAAiBV,eAAe+B,OAC3B,CACL,MAAMyB,EAAoBvoB,SAASunB,gBAhCvB,6BAgC8C,WAE3C,KAAXjB,GACFiC,EAAkBrC,aAAa,UAAWI,GAG5CkB,GAAwB3B,EAAY0C,GAEpC9C,EAAiBf,WAAW6D,EAAmBzB,E,CAEnD,ECxCA,SAxBA,SACErB,EACA3vB,EACA2xB,EACAe,EACAC,EACApJ,EAAU,CAAC,EACXiH,EAAS,IAET,MAAMppB,EAAoB,EAAEsrB,EAAQ,GAAKC,EAAQ,IAAM,EAAGD,EAAQ,IAC5DZ,EAAuB,EAAEY,EAAQ,GAAKC,EAAQ,IAAM,EAAGA,EAAQ,IAC/D1rB,EAAqB,CAACyrB,EAAQ,IAAKA,EAAQ,GAAKC,EAAQ,IAAM,GAC9DZ,EAAsB,CAACY,EAAQ,IAAKD,EAAQ,GAAKC,EAAQ,IAAM,GAErEC,GACEjD,EACA3vB,EACA2xB,EACA,CAACG,EAAQ1qB,EAAKH,EAAM8qB,GACT,CAAC,EACF,GAEd,EC2DA,SAhFA,SACEpC,EACA3vB,EACA6yB,EACAC,EACAvJ,EAAU,CAAC,EACXwJ,GAEA,MAAM,MAAEnP,EAAK,aAAEne,EAAY,MAAEirB,EAAK,UAAEC,EAAS,KAAEF,EAAI,KAAEzkB,EAAI,QAAEgnB,GACzDt0B,OAAOqmB,OACL,CACEnB,MAAO,aACPne,aAAc,IACdirB,MAAO,IACPC,eAAWxtB,EACXstB,KAAM,cACNzkB,KAAM,SACNgnB,QAAS,GAEXzJ,GAIEwH,EAAcJ,GAAaD,EAI3BM,EAAcC,GAClBjxB,EACA,SACA,MAAM6yB,WAAwBE,KAGhC,IAAIhD,EACJ,GAAa,WAAT/jB,EACF+jB,EAAa,CACXoB,GAAI,GAAG2B,EAAO,KACd1B,GAAI,GAAG0B,EAAO,KACdzB,EACAC,OAAQ1N,EACR6M,OACA,eAAgBM,EAChBiC,QAASA,OAEN,IAAa,SAAThnB,EAkBT,MAAM,IAAIrJ,MAAM,4BAA4BqJ,KAlBlB,CAC1B,MACMinB,EAA2B,IADPC,WAAWztB,GAKrCsqB,EAAa,CACX3e,EAAG,GAJK0hB,EAAO,GAAY,GAAPG,IAKpB5hB,EAAG,GAJKyhB,EAAO,GAAY,GAAPG,IAKpBvC,MAAO,GAAGuC,IACVE,OAAQ,GAAGF,IACX3B,OAAQ1N,EACR6M,OACA,eAAgBM,EAChBuB,GAAI,GAAU,GAAPW,EACPD,QAASA,E,EAMb,MAAMI,EAAwBzD,EAAiBnB,WAAWwC,GAE1D,GAAIoC,EACF7B,GAAyBxB,EAAYqD,GAErCzD,EAAiBV,eAAe+B,OAC3B,CACL,MAAMqC,EAAmBnpB,SAASunB,gBA9CtB,6BA8C6CzlB,GAEzD0lB,GAAwB3B,EAAYsD,GAEpC1D,EAAiBf,WAAWyE,EAAkBrC,E,CAElD,EC7DA,SAnBA,SACErB,EACA3vB,EACA6yB,EACAS,EACA/J,EAAU,CAAC,GAEX+J,EAAav1B,SAAQ,CAAC+0B,EAAQ1lB,KAC5BmmB,GACE5D,EACA3vB,EACA6yB,EACAC,EACAvJ,EACAnc,EACD,GAEL,ECfc,SAAUomB,GACtB7D,EACA3vB,EACAyzB,EACAC,EACAC,EACApK,EAAU,CAAC,EACXiH,EAAS,IAGT,GAAIoD,MAAMF,EAAM,KAAOE,MAAMF,EAAM,KAAOE,MAAMD,EAAI,KAAOC,MAAMD,EAAI,IACnE,OAGF,MAAM,MAAE/P,EAAK,MAAE8M,EAAK,UAAEC,EAAS,SAAEC,EAAQ,OAAEiD,GAAWn1B,OAAOqmB,OAC3D,CACEnB,MAAO,aACP8M,MAAO,IACPC,eAAWxtB,EACXytB,cAAUztB,EACV0wB,YAAQ1wB,GAEVomB,GAIIwH,EAAcJ,GAAaD,EAG3BM,EAAcC,GAASjxB,EAAe,OAAQyzB,GAC9CK,EAAenE,EAAiBnB,WAAWwC,GAC3C+C,EAAkBF,EACpB,sBAAsBlE,EAAiBd,gBAAgB3T,OACvD,GAEE6U,EAAa,CACjBiE,GAAI,GAAGN,EAAM,KACbO,GAAI,GAAGP,EAAM,KACbQ,GAAI,GAAGP,EAAI,KACXQ,GAAI,GAAGR,EAAI,KACXrC,OAAQ1N,EACRwQ,MAAOL,EACP,eAAgBhD,EAChB,mBAAoBH,GAGtB,GAAIkD,EAEFvC,GAAyBxB,EAAY+D,GAErCnE,EAAiBV,eAAe+B,OAC3B,CACL,MAAMqD,EAAUnqB,SAASunB,gBAxBb,6BAwBoC,QAEjC,KAAXjB,GACF6D,EAAQjE,aAAa,UAAWI,GAGlCkB,GAAwB3B,EAAYsE,GAEpC1E,EAAiBf,WAAWyF,EAASrD,E,CAEzC,CCzDc,SAAUsD,GACtB3E,EACA3vB,EACAu0B,EACAzpB,EACAye,GAUA,GAAIze,EAAOtL,OAAS,EAClB,OAGF,MAAM,UAAEg1B,EAAS,YAAE3D,EAAW,MAAEjN,EAAK,MAAE8M,EAAK,UAAEC,EAAS,SAAEC,GACvDlyB,OAAOqmB,OACL,CACEnB,MAAO,aACP8M,MAAO,IACP8D,UAAW,OACX3D,YAAa,EACbF,eAAWxtB,EACXytB,cAAUztB,EACVsxB,oBAAoB,GAEtBlL,GAIEwH,EAAcJ,GAAaD,EAG3BM,EAAcC,GAASjxB,EAAe,WAAYu0B,GAClDG,EAAmB/E,EAAiBnB,WAAWwC,GAErD,IAAI2D,EAAkB,GAEtB,IAAK,MAAMC,KAAS9pB,EAClB6pB,GAAmB,GAAGC,EAAM,OAAOA,EAAM,MAG3C,GAAIrL,EAAQkL,mBAAoB,CAC9B,MAAMI,EAAa/pB,EAAO,GAE1B6pB,GAAmB,GAAGE,EAAW,OAAOA,EAAW,I,CAGrD,MAAM9E,EAAa,CACjBjlB,OAAQ6pB,EACRrD,OAAQ1N,EACR6M,KAAM+D,EACN,eAAgB3D,EAChB,eAAgBE,EAChB,mBAAoBH,GAGtB,GAAI8D,EAEFnD,GAAyBxB,EAAY2E,GAErC/E,EAAiBV,eAAe+B,OAC3B,CACL,MAAM8D,EAAc5qB,SAASunB,gBA/BjB,6BA+BwC,YAEpDC,GAAwB3B,EAAY+E,GAEpCnF,EAAiBf,WAAWkG,EAAa9D,E,CAE7C,CC4EA,SAAS+D,GAAgBC,GACvB,MACMC,EAAkB/qB,SAASunB,gBADnB,6BAC0C,SAUxD,OAJAwD,EAAgB7E,aAAa,IAAK,KAClC6E,EAAgB7E,aAAa,KAAM,SACnC6E,EAAgBC,YAAcF,EAEvBC,CACT,CAEA,SAASE,GAAoBC,EAAoBxR,GAC/C,IAAIphB,EAAU4yB,EAAM7F,cAAc,mBAIlC,IAAK3L,EAKH,OAJIphB,GACF4yB,EAAMhG,YAAY5sB,GAGb4yB,EAAMC,UAIV7yB,IACHA,EAAU0H,SAASunB,gBAAgB,6BAA8B,QACjEjvB,EAAQ4tB,aAAa,QAAS,cAC9BgF,EAAME,aAAa9yB,EAAS4yB,EAAMG,aAIpC,MAAMC,EAAOJ,EAAMC,UAEbtF,EAAa,CACjB3e,EAAG,GAAGokB,EAAKpkB,IACXC,EAAG,GAAGmkB,EAAKnkB,IACXqf,MAAO,GAAG8E,EAAK9E,QACfyC,OAAQ,GAAGqC,EAAKrC,SAChB1C,KAAM7M,GAKR,OAFA2N,GAAyBxB,EAAYvtB,GAE9BgzB,CACT,CAEA,SAtMA,SACE7F,EACA3vB,EACAy1B,EACAC,EACAC,EACApM,EAAU,CAAC,GAyBX,OAGF,SACEoG,EACA3vB,EACAy1B,EACAC,EAA2B,CAAC,IAC5BC,EACApM,GAEA,MAAM,QAAEqM,EAAO,MAAEhS,EAAK,WAAEiS,EAAU,SAAEC,EAAQ,WAAEC,GAAexM,EAE7D,IAAIyM,EACJ,MAAO5kB,EAAGC,GAAK,CAACskB,EAAS,GAAKC,EAASD,EAAS,GAAKC,GAC/CK,EAAQ,6BACRjF,EAAcC,GAASjxB,EAAe,OAAQy1B,GAC9CS,EAAoBvG,EAAiBnB,WAAWwC,GAItD,GAAIkF,EAAmB,CAErB,MAAMC,EAAcD,EAAkB3G,cAAc,QAC9C6G,EAAYl4B,MAAMC,KAAKg4B,EAAYE,UAEzC,IAAK,IAAIjpB,EAAI,EAAGA,EAAIgpB,EAAU52B,OAAQ4N,IAAK,CACzC,MAAM6nB,EAAkBmB,EAAUhpB,GAC5B4nB,EAAOU,EAAUtoB,IAAM,GAE7B6nB,EAAgBC,YAAcF,C,CAIhC,GAAIU,EAAUl2B,OAAS42B,EAAU52B,OAAQ,CACvC,IAAK,IAAI4N,EAAI,EAAGA,EAAIsoB,EAAUl2B,OAAS42B,EAAU52B,OAAQ4N,IAAK,CAC5D,MACMkpB,EAAWvB,GADAW,EAAUtoB,EAAIgpB,EAAU52B,SAGzC22B,EAAYnH,YAAYsH,E,CAG1BJ,EAAkBlH,YAAYmH,GAC9BxG,EAAiBf,WAAWsH,EAAmBlF,E,CAGjD,MAMMuF,EAAsB,CAC1B/D,UAAW,aAAaphB,KAAKC,MAI/BkgB,GAXuB,CACrBd,KAAM7M,EACN,YAAakS,EACb,cAAeD,GAQwBM,GACzC5E,GAAyBgF,EAAqBL,GAE9CF,EAAuBb,GAAoBe,EAAmBH,GAE9DpG,EAAiBV,eAAe+B,E,KAC3B,CACL,MAAMwF,EAAYtsB,SAASunB,gBAAgBwE,EAAO,KAElDO,EAAUpG,aAAa,YAAa,aAAahf,KAAKC,MAGtD,MAAM8kB,EAwBV,SACExG,EACApG,GAEA,MAAM,MAAE3F,EAAK,WAAEiS,EAAU,SAAEC,GAAavM,EAClC0M,EAAQ,6BACRE,EAAcjsB,SAASunB,gBAAgBwE,EAAO,QAC9CQ,EACJ,iGACI1C,EAAkB,sBAAsBpE,EAAiBd,gBAAgB3T,OACzEwb,EAAgB,GAAGD,IAAgB1C,IAUzC,OAPAoC,EAAY/F,aAAa,IAAK,KAC9B+F,EAAY/F,aAAa,IAAK,KAC9B+F,EAAY/F,aAAa,OAAQxM,GACjCuS,EAAY/F,aAAa,cAAeyF,GACxCM,EAAY/F,aAAa,YAAa0F,GACtCK,EAAY/F,aAAa,QAASsG,GAE3BP,CACT,CA7CwBQ,CAAmBhH,EAAkBpG,GACzD,IAAK,IAAInc,EAAI,EAAGA,EAAIsoB,EAAUl2B,OAAQ4N,IAAK,CACzC,MACMkpB,EAAWvB,GADAW,EAAUtoB,IAG3B+oB,EAAYnH,YAAYsH,E,CAG1BE,EAAUxH,YAAYmH,GACtBxG,EAAiBf,WAAW4H,EAAWxF,GACvCgF,EAAuBb,GAAoBqB,EAAWT,E,CAMxD,OAAOr3B,OAAOqmB,OAAO,CAAC,EAAGiR,EAAsB,CAC7C5kB,IACAC,IACA8hB,OAAQ6C,EAAqB7C,OAASyC,EACtClF,MAAOsF,EAAqBtF,MAAQkF,GAExC,CApG+BgB,CAC3BjH,EACA3vB,EACAy1B,EACAC,EACAC,EAnBoBj3B,OAAOqmB,OAC3B,CACE8Q,WAAY,+BACZC,SAAU,OACVlS,MAAO,mBACPmS,WAAY,GACZH,QAAS,GACTiB,SAAS,EACTC,SAAS,GAEXvN,GAcJ,ECrCc,SAAUwN,GACtBC,EACAC,GAEA,IAAIC,EAAW,CAAC,EAAG,GACfC,EAAcC,OAAOC,iBAWzB,OATAL,EAAaj5B,SAAQ,SAAUu5B,GAC7B,MAAMC,EAiBV,SAA0BC,EAAkBC,GAC1C,MAAOzD,EAAIC,GAAMuD,GACVtD,EAAIC,GAAMsD,EAEjB,OAAOntB,KAAKuE,KAAKvE,KAAKwE,IAAIklB,EAAKE,EAAI,GAAK5pB,KAAKwE,IAAImlB,EAAKE,EAAI,GAC5D,CAtBqBuD,CAAiBT,EAAaK,GAE3CC,EAAWJ,IACbA,EAAcI,EACdL,EAAW,IAAII,GAEnB,IAEOJ,CACT,CCiDA,SAlEA,SACEvH,EACA3vB,EACA23B,EAEAC,EACAC,EAGAC,EACAvO,EAAU,CAAC,GAIX,MAAMmK,EACJkE,EAAuBp4B,OAAS,EAC5Bu3B,GAAiBa,EAAwBC,GACzCA,EAGAE,EA+BR,SACED,GAEA,MAAQ1mB,EAAGnK,EAAMoK,EAAGjK,EAAG,OAAE+rB,EAAM,MAAEzC,GAAUoH,EACrCE,EAAYtH,EAAQ,EACpBuH,EAAa9E,EAAS,EAO5B,MAAO,CALW,CAAClsB,EAAO+wB,EAAW5wB,GAClB,CAACH,EAAMG,EAAM6wB,GACX,CAAChxB,EAAO+wB,EAAW5wB,EAAM+rB,GAC1B,CAAClsB,EAAOypB,EAAOtpB,EAAM6wB,GAG3C,CA5C4BC,CAAmBJ,GAc7CtE,GACE7D,EACA3vB,EACA,QAAQ23B,IACRjE,EAhBUqD,GAAiBgB,EAAmBrE,GAG1Bh1B,OAAOqmB,OAC3B,CACEnB,MAAO,mBACP+M,UAAW,IACXC,SAAU,OAEZrH,GAWJ,ECYA,SAzDA,SACEoG,EACA3vB,EACAm4B,EAEAzC,EACA0C,EACAR,EACAS,EACA9O,EAAU,CAAC,GAGX,MAAM+O,EAAgB55B,OAAOqmB,OAC3B,CACEtf,aAAc,IACd8yB,UAAW,CACTnnB,GAAG,EACHC,GAAG,IAGPkY,GAIIiP,EAAoBC,GACxB9I,EACA3vB,EACAm4B,EACAzC,EACA0C,EACAE,GAwBF,OApBAI,GACE/I,EACA3vB,EACAm4B,EACAP,EACAQ,EACAI,EACAF,GAaKE,CACT,ECrDc,SAAUG,GACtBhJ,EACA3vB,EACA44B,EACAlF,EACAC,EACApK,EAAU,CAAC,EACXiH,EAAS,IAET,MAAM,MACJ5M,EACA8M,MAAOmI,EAAM,UACblI,EAAS,SACTC,GACElyB,OAAOqmB,OACT,CACEnB,MAAO,aACP8M,MAAO,IACPC,eAAWxtB,EACXytB,cAAUztB,GAEZomB,GAIIwH,EAAcJ,GAAakI,EAG3B7H,EAAcC,GAASjxB,EAAe,OAAQ44B,GAC9CE,EAAenJ,EAAiBnB,WAAWwC,GAE3C+H,EAAO,CAACzuB,KAAK8U,IAAIsU,EAAM,GAAIC,EAAI,IAAKrpB,KAAK8U,IAAIsU,EAAM,GAAIC,EAAI,KAC3DjD,EAAQpmB,KAAKC,IAAImpB,EAAM,GAAKC,EAAI,IAChCR,EAAS7oB,KAAKC,IAAImpB,EAAM,GAAKC,EAAI,IAEjC5D,EAAa,CACjB3e,EAAG,GAAG2nB,EAAK,KACX1nB,EAAG,GAAG0nB,EAAK,KACXrI,MAAO,GAAGA,IACVyC,OAAQ,GAAGA,IACX7B,OAAQ1N,EACR6M,KAAM,cACN,eAAgBM,EAChB,mBAAoBH,GAGtB,GAAIkI,EACFvH,GAAyBxB,EAAY+I,GAErCnJ,EAAiBV,eAAe+B,OAC3B,CACL,MAAMgI,EAAiB9uB,SAASunB,gBAxBpB,6BAwB2C,QAExC,KAAXjB,GACFwI,EAAe5I,aAAa,UAAWI,GAGzCkB,GAAwB3B,EAAYiJ,GAEpCrJ,EAAiBf,WAAWoK,EAAgBhI,E,CAEhD,CCjEc,SAAUiI,GACtBtJ,EACA3vB,EACAk5B,EACAxF,EACAC,EACApK,EAAU,CAAC,GAGX,GAAIqK,MAAMF,EAAM,KAAOE,MAAMF,EAAM,KAAOE,MAAMD,EAAI,KAAOC,MAAMD,EAAI,IACnE,OAGF,MAAM,MAAE/P,EAAK,MAAE8M,EAAK,UAAEC,EAAS,SAAEC,GAAalyB,OAAOqmB,OACnD,CACEnB,MAAO,aACP8M,MAAO,IACPC,eAAWxtB,EACXytB,cAAUztB,GAEZomB,GAIFiK,GAAS7D,EAAkB3vB,EAAek5B,EAAUxF,EAAOC,EAAK,CAC9D/P,QACA8M,QACAC,YACAC,aAKF,MACMuB,EAAQ7nB,KAAK8nB,MAAMuB,EAAI,GAAKD,EAAM,GAAIC,EAAI,GAAKD,EAAM,IAErDyF,EAAY,CAChBzF,MAAO,CACLC,EAAI,GALW,GAKOrpB,KAAK8uB,IAAIjH,EAAQ7nB,KAAK+nB,GAAK,GACjDsB,EAAI,GANW,GAMOrpB,KAAK+uB,IAAIlH,EAAQ7nB,KAAK+nB,GAAK,IAEnDsB,IAAKA,GAGD2F,EAAa,CACjB5F,MAAO,CACLC,EAAI,GAbW,GAaOrpB,KAAK8uB,IAAIjH,EAAQ7nB,KAAK+nB,GAAK,GACjDsB,EAAI,GAdW,GAcOrpB,KAAK+uB,IAAIlH,EAAQ7nB,KAAK+nB,GAAK,IAEnDsB,IAAKA,GAGPH,GACE7D,EACA3vB,EACA,IACAm5B,EAAUzF,MACVyF,EAAUxF,IACV,CACE/P,QACA8M,QACAC,cAIJ6C,GACE7D,EACA3vB,EACA,IACAs5B,EAAW5F,MACX4F,EAAW3F,IACX,CACE/P,QACA8M,QACAC,aAGN,CC5Ec,SAAU4I,GACtB5J,EACA3vB,EACA44B,EACAlF,EACAC,EACApK,EAAU,CAAC,GAEX,MAAM,MACJ3F,EACA8M,MAAOmI,EAAM,UACblI,EAAS,SACTC,GACElyB,OAAOqmB,OACT,CACEnB,MAAO,aACP8M,MAAO,IACPC,eAAWxtB,EACXytB,cAAUztB,GAEZomB,GAIIwH,EAAcJ,GAAakI,EAG3B7H,EAAcC,GAASjxB,EAAe,OAAQ44B,GAC9CE,EAAenJ,EAAiBnB,WAAWwC,GAE3C+H,EAAO,CAACzuB,KAAK8U,IAAIsU,EAAM,GAAIC,EAAI,IAAKrpB,KAAK8U,IAAIsU,EAAM,GAAIC,EAAI,KAC3DjD,EAAQpmB,KAAKC,IAAImpB,EAAM,GAAKC,EAAI,IAChCR,EAAS7oB,KAAKC,IAAImpB,EAAM,GAAKC,EAAI,IAEjC5D,EAAa,CACjB3e,EAAG,GAAG2nB,EAAK,KACX1nB,EAAG,GAAG0nB,EAAK,KACXrI,MAAO,GAAGA,IACVyC,OAAQ,GAAGA,IACX7B,OAAQ1N,EACR6M,KAAM,QACN,eAAgBM,EAChB,mBAAoBH,GAGtB,GAAIkI,EACFU,GAA0BzJ,EAAY+I,GAEtCnJ,EAAiBV,eAAe+B,OAC3B,CACL,MAAMgI,EAAiB9uB,SAASunB,gBAxBpB,6BAwB2C,QAEvDgI,GAAyB1J,EAAYiJ,GAErCrJ,EAAiBf,WAAWoK,EAAgBhI,E,CAEhD,CC9Cc,SAAU0I,GACtBl3B,EACAm3B,GAEA,MAAMl3B,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,kBAAEqF,EAAiB,WAAED,GAAenF,EAEpC6d,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,MAAO,GAGT,MAAMuZ,EAAe,GAEfC,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAEjD,IAAK,IAAInrB,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BmrB,EAAczZ,EAAUyZ,YAAYv5B,GAG1C,GAAKu5B,GAIDJ,EAAY7T,SAASiU,EAAYhN,MAAO,CAC1C,MAAMiN,EAAe1Z,EAAU2Z,gBAAgBz5B,GAC/Cq5B,EAAan8B,KAAKs8B,E,EAItB,OAAOH,CACT,CC1CA,MAAM,OAAEK,GAAM,QAAEC,GAAO,QAAEC,IAAY39B,GAsNrC,MAAM49B,GAA4B,IAxMlC,MAOEj4B,WAAAA,GALQ,KAAAk4B,aAAoC,IAAIt9B,IACxC,KAAAu9B,oBAAqB,EACrB,KAAAC,sBAAuC,KAyDvC,KAAAC,wBAA0B,KAChC56B,KAAK66B,oBAEL,MAAMC,EAAWz8B,MAAMC,KAAK0B,KAAK+6B,kBAAkBvU,UAEnD,IAAK,IAAIjZ,EAAI,EAAGA,EAAIutB,EAASn7B,OAAQ4N,IAAK,CACxC,MAAM5K,EAAUm4B,EAASvtB,GACzB,GAAIvN,KAAKy6B,aAAa/8B,IAAIiF,KACxB3C,KAAKg7B,eAAer4B,GAGpB3C,KAAKy6B,aAAa/6B,OAAOiD,GAIM,IAA3B3C,KAAKy6B,aAAah8B,MAGpB,OAFAuB,KAAK06B,oBAAqB,OAC1B16B,KAAK26B,sBAAwB,K,GAtEnC36B,KAAK+6B,kBAAoB,IAAIze,GAC/B,CASO2e,kBAAAA,CAAmBlzB,EAAoBpF,GAC5C3C,KAAK+6B,kBAAkB/7B,IAAI+I,EAAYpF,EACzC,CAMOu4B,qBAAAA,CAAsBnzB,EAAoBpF,GAC/C3C,KAAK+6B,kBAAkBr7B,OAAOqI,GAG9B/H,KAAKy6B,aAAa/6B,OAAOiD,GAMzB3C,KAAKm7B,QACP,CAQOC,cAAAA,CAAez4B,GACpB3C,KAAKq7B,mCAAmC,CAAC14B,GAC3C,CAMQk4B,iBAAAA,GACN,GAAI76B,KAAKs7B,iBACP,MAAM,IAAIx4B,MACR,uHAGN,CA0BQy4B,qCAAAA,GACW,IAAIv7B,KAAK+6B,kBAAkBvU,UAEnCtoB,SAASyE,IAChB3C,KAAKy6B,aAAa98B,IAAIgF,EAAQ,IAGhC3C,KAAK46B,yBACP,CAEQS,kCAAAA,CAAmCP,GACzC,MAAMU,EAAkB,IAAIx7B,KAAK+6B,kBAAkBvU,UAGnDsU,EAAS58B,SAASyE,KAE0B,IAAtC64B,EAAgBC,QAAQ94B,IAC1B3C,KAAKy6B,aAAa98B,IAAIgF,E,IAK1B3C,KAAK07B,SACP,CAKQA,OAAAA,GAGF17B,KAAKy6B,aAAah8B,KAAO,IAAiC,IAA5BuB,KAAK06B,qBACrC16B,KAAK26B,sBAAwBtzB,OAAOs0B,sBAClC37B,KAAK46B,yBAIP56B,KAAK06B,oBAAqB,EAE9B,CAEAM,cAAAA,CAAer4B,GACb,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEzC,IAAKC,EAEH,YADA8U,QAAQC,KAAK,6BAOf,KAHwBikB,EAAAA,GAAAA,oBACtBh5B,EAAeoF,mBAIf,YADA0P,QAAQC,KAAK,uCAIf,MAAMqiB,EAAeH,GAA4Bl3B,EAAS,CACxD03B,GACAC,GACAC,MAGI,kBAAEvyB,EAAiB,WAAED,GAAenF,EACpCM,EAA6C,CACjDP,UACAqF,oBACAD,cAQF8zB,GAAQl5B,GAAUmtB,IAChB,IAAIgM,GAAc,EAiBlB9B,EAAa97B,SAhBU69B,IACrB,GAAIA,EAAKC,iBAAkB,CACzB,MAAMC,EAAWF,EAAKC,iBACpBp5B,EACAktB,GAEFgM,EAAcA,GAAeG,C,KAY7BH,IACFj8B,EAAAA,GAAAA,cAAa8C,EAAS7F,GAAOo/B,oBAAqB,IAAKh5B,G,GAG7D,CAKQi4B,MAAAA,GACN9zB,OAAO80B,qBAAqBn8B,KAAK26B,uBAEjC36B,KAAKy6B,aAAaxO,QAClBjsB,KAAK06B,oBAAqB,EAC1B16B,KAAK26B,sBAAwB,KAE7B36B,KAAKu7B,uCACP,GAgBF,SANA,SAAiC54B,GAC/B63B,GAA0BY,eAAez4B,EAC3C,GClOM,QAAEy5B,IAAYC,GAAAA,UAEdC,GAAqB,EAAIF,GAYjB,SAAUG,GACtBn5B,EACAiF,EACAm0B,GAEA,MAAM,gBAAEC,GAAoBp0B,EAStBq0B,EAAiCt5B,EAAYxC,QAChD+7B,IACC,IAAIC,EAA4BD,EAAG77B,SAAS27B,gBAE5C,IAAKG,EAA2B,CAG9B,MAAM,kBAAEC,GAAsBF,EAAG77B,UAC3B,wBAAEg8B,GAA4BC,GAAAA,SAAAA,IAClC,mBACAF,GAEIG,EAAeC,GAAAA,GAAAA,WACnBH,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAGpBI,EAAeD,GAAAA,GAAAA,WACnBH,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAG1BF,EAA4BK,GAAAA,GAAAA,SAE5BA,GAAAA,GAAAA,MAAWL,EAA2BI,EAAcE,GACpDP,EAAG77B,SAAS27B,gBAAkBG,C,CAEhC,MAAMO,EACJ1yB,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASR,EAAiBG,IACnCN,GAEF,OAAOM,GAA6BO,CAAU,IAKlD,IAAKT,EAA+B/8B,OAClC,MAAO,GAMT,MAAMy9B,EAA+BZ,EAA2B,GAC1D,WAAEa,GAAeh1B,EAEjBi1B,EAAyB,GAE/B,IAAK,MAAMjgC,KAAcq/B,EAAgC,CACvD,MACM3H,EADO13B,EAAW+c,KACLmjB,QAAQtyB,OAAO,GAElC,IAAK5N,EAAW0E,UACd,SASF,MAAMy7B,EAAMP,GAAAA,GAAAA,SAEZA,GAAAA,GAAAA,IAASO,EAAKH,EAAYtI,GAE1B,MAAM0I,EAAMR,GAAAA,GAAAA,IAASO,EAAKf,GAEtBhyB,KAAKC,IAAI+yB,GAAOL,GAClBE,EAAuBz/B,KAAKR,E,CAIhC,OAAOigC,CACT,CCnGc,MAAOI,GAIT,sBAAOC,CAAgB9hB,GAC/B,MAAM+hB,EAAQ/hB,EAAQ+hB,MAAM59B,KAAK69B,qBACjC,IAAKD,IAAUA,EAAM,GACnB,OAAO,KAET,MAAME,EAAQF,EAAM,GAAGzP,MAAM,KAAK7gB,KAAKywB,GAAOxG,OAAOwG,KACrD,OAAqB,IAAjBD,EAAMn+B,OACDm+B,EAAM,GAERA,CACT,CAEO,qBAAOE,CAAeF,GAC3B,OAAIz/B,MAAM0rB,QAAQ+T,GACT,GAAGA,EAAM,MAAMA,EAAM,KAEvBG,OAAOH,EAChB,CAEU,sBAAOI,CACfriB,EACAiiB,GAEA,MAAMF,EAAQ/hB,EAAQ+hB,MAAM59B,KAAK69B,qBACjC,IAAKD,IAAUA,EAAM,GACnB,OAAO,KAET,MAAMO,EAAiBn+B,KAAKg+B,eAAeF,GAC3C,OAAOjiB,EAAQuiB,QACbp+B,KAAK69B,oBACL,GAAGD,EAAM,KAAKO,IAElB,CAQO,oBAAOE,CACZhhC,EACAygC,EACAQ,GAEA,MAAM,kBAAEzB,GAAsBx/B,EAAWyD,SACzCzD,EAAWyD,SAAS+7B,kBAAoB78B,KAAKk+B,gBAC3CrB,EACAiB,GAEF,MAAM56B,EAAc,IACfo7B,EACHjhC,eAEFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAahD,GAAOyhC,oBAAqBr7B,EACxD,CAEO,oBAAOs7B,CACZnhC,GAEA,OAAO2C,KAAK29B,gBAAgBtgC,EAAWyD,SAAS+7B,kBAClD,EAjEmBa,GACFG,oBACf,0CCDJ,MAAMY,GAAmB,4CAQX,SAAUC,GACtBl4B,EACApD,GAEA,GAAIoD,aAAoB0V,GAAAA,cAAe,CAErC,MAAML,EAAUrV,EAASuV,oBAKnB4iB,EAAa9iB,EAAQ4f,QAAQ,KAC7BrN,EAAWvS,EAAQ+iB,UAAUD,EAAa,GAOhD,OAAOv7B,EAAYxC,QAAQvD,IACzB,IAAKA,EAAW0E,UACd,OAAO,EAGT,MAAM8Z,EAAUxe,EAAWyD,SAAS+7B,kBAEpC,QAAgBv5B,IAAZuY,EAGF,OAAO,EAGT,MAAM8iB,EAAa9iB,EAAQ4f,QAAQ,KAEnC,OAD0B5f,EAAQ+iB,UAAUD,EAAa,KAC5BvQ,CAAQ,G,CAElC,GAAI5nB,aAAoBioB,GAAAA,cAAe,CAC5C,MAAM9qB,EAA8B6C,EAASq4B,yBAE7C,OAAOz7B,EAAYxC,QAAQvD,IACzB,IAAKA,EAAW0E,UACd,OAAO,EAET,GAAI1E,EAAWyD,SAASiC,sBAAwBY,EAC9C,OAAO,EAET,MAAMm7B,EAAUzhC,EAAWyD,SAAS+7B,kBAAkBuB,QACpDK,GACA,IAGF,IAAKj4B,EAASu4B,YAAYD,GACxB,OAAO,EAET,MAAMhB,EAAQkB,GAAqBR,cAAcnhC,GAC3C4hC,EAAcz4B,EAAS04B,iBAC7B,OAAI7gC,MAAM0rB,QAAQ+T,GACTmB,GAAenB,EAAM,IAAMmB,GAAenB,EAAM,GAMlDrzB,KAAKC,IAAIu0B,EAAcnB,IAAU,CAAC,G,CAEtC,GAAIt3B,aAAoB24B,GAAAA,eAAgB,CAC7C,MAAM92B,EAAS7B,EAAS44B,aAElB,yBAAE5C,GACN9mB,GAAAA,UAAAA,qCAA6ClP,EAAU6B,GAGzD,OAAOk0B,GACLn5B,EACAiF,EACAm0B,E,CAGF,MAAM,IAAI15B,MAAM,iBAAiB0D,EAAS2F,qBAE9C,CCkLA,MAEA,GAFkB,IA7PlB,MAGE5J,WAAAA,GAsBEvC,KAAKq/B,kBArBiB,CACpBtb,MAAO,mBACPub,iBAAkB,iBAClBC,cAAe,iBACfC,YAAa,mBACb1O,UAAW,IACXC,SAAU,GACViD,QAAQ,EACRyL,mBAAmB,EACnBC,kBAAmB,+CACnBC,gBAAiB,OACjBC,aAAc,mBACdC,wBAAyB,iBACzBC,qBAAsB,iBACtBC,mBAAoB,mBACpBC,kBAAmB,GACnBC,qBAAsB,IACtBC,oBAAqB,MACrBC,eAAe,GAInB,CAOAC,uBAAAA,CAAwBjgC,GACtB,OAAOH,KAAK+W,OAAO3T,aAAepD,KAAK+W,OAAO3T,YAAYjD,EAC5D,CAQAkgC,qBAAAA,CAAsBt4B,GACpB,OAAO/H,KAAK+W,OAAOsX,WAAaruB,KAAK+W,OAAOsX,UAAUtmB,EACxD,CAQAu4B,sBAAAA,CAAuB/pB,GACrB,OAAOvW,KAAK+W,OAAOtR,YAAczF,KAAK+W,OAAOtR,WAAW8Q,EAC1D,CAOAgqB,oBAAAA,GACE,OAAOvgC,KAAK+W,OAAOypB,OACrB,CASAC,mBAAAA,CAAoBtgC,EAAuBugC,GACzC,IAAIC,EAA2B3gC,KAAK+W,OAAO3T,YAEtCu9B,IACH3gC,KAAK+W,OAAS,IACT/W,KAAK+W,OACR3T,YAAa,CAAC,GAGhBu9B,EAA2B3gC,KAAK+W,OAAO3T,aAGzCu9B,EAAyBxgC,GAAiBugC,CAC5C,CAQAE,qBAAAA,CAAsB74B,EAAoB24B,GACxC,IAAIG,EAAyB7gC,KAAK+W,OAAOsX,UAEpCwS,IACH7gC,KAAK+W,OAAS,IACT/W,KAAK+W,OACRsX,UAAW,CAAC,GAGdwS,EAAyB7gC,KAAK+W,OAAOsX,WAGvCwS,EAAuB94B,GAAc24B,CACvC,CASAI,sBAAAA,CAAuBvqB,EAAqBmqB,GAC1C,IAAIK,EAA0B/gC,KAAK+W,OAAOtR,WAErCs7B,IACH/gC,KAAK+W,OAAS,IACT/W,KAAK+W,OACRtR,WAAY,CAAC,GAGfs7B,EAA0B/gC,KAAK+W,OAAOtR,YAGxCs7B,EAAwBxqB,GAAemqB,CACzC,CAOAM,oBAAAA,CAAqBN,GACnB1gC,KAAK+W,OAAOypB,QAAUE,CACxB,CAYAO,gBAAAA,CAAiBC,EAAmBC,GAClC,MAAM,cAAEhhC,EAAa,WAAE4H,EAAU,YAAEwO,EAAW,SAAE5V,GAAawgC,EAE7D,OAAOnhC,KAAKohC,cACVF,EACA/gC,EACA4H,EACAwO,EACA5V,EAEJ,CAEQygC,aAAAA,CACNC,EACAlhC,EACA4H,EACAwO,EACA5V,GAEA,GAAIR,EAAe,CACjB,MAAMmhC,EAAuBthC,KAAKogC,wBAAwBjgC,GAE1D,GAAImhC,QAEqCh+B,IAAnCg+B,EAAqBD,GACvB,OAAOC,EAAqBD,E,CAKlC,GAAIt5B,EAAY,CACd,MAAMw5B,EAAqBvhC,KAAKqgC,sBAAsBt4B,GAEtD,GAAIw5B,EAAoB,CAGtB,GACEA,EAAmB5gC,SACwB2C,IAA3Ci+B,EAAmB5gC,GAAU0gC,GAE7B,OAAOE,EAAmB5gC,GAAU0gC,GAItC,GACEE,EAAmBC,aACqBl+B,IAAxCi+B,EAAmBC,OAAOH,GAE1B,OAAOE,EAAmBC,OAAOH,E,EAKvC,GAAI9qB,EAAa,CACf,MAAMkrB,EAAsBzhC,KAAKsgC,uBAAuB/pB,GAExD,GAAIkrB,EAAqB,CAEvB,GACEA,EAAoB9gC,SACwB2C,IAA5Cm+B,EAAoB9gC,GAAU0gC,GAE9B,OAAOI,EAAoB9gC,GAAU0gC,GAIvC,GACEI,EAAoBD,aACqBl+B,IAAzCm+B,EAAoBD,OAAOH,GAE3B,OAAOI,EAAoBD,OAAOH,E,EAKxC,MAAMK,EAAe1hC,KAAKugC,uBAE1B,OACEmB,EAAa/gC,SACwB2C,IAArCo+B,EAAa/gC,GAAU0gC,GAEhBK,EAAa/gC,GAAU0gC,GAG5BK,EAAaF,aAA4Cl+B,IAAlCo+B,EAAaF,OAAOH,GACtCK,EAAaF,OAAOH,QAD7B,CAGF,CAEQhC,iBAAAA,CAAkBtoB,GACxB,MAAM4qB,EAAa,CAAC,EACpB,IAAK,MAAMz7B,KAAQ6Q,EACjB4qB,EAAWz7B,GAAQ6Q,EAAO7Q,GAG5BlG,KAAK+W,OAAS,CACZypB,QAAS,CACPgB,OAAQG,GAGd,GC9OF,SAASV,GACPI,EACAO,EACAj9B,EACAuoB,GAQA,MAAM2U,EAtCR,SACER,EACA18B,EACAuoB,GAEA,MAAM4U,EAAO,CAAC,GAAGT,KAOjB,OANI18B,GACFm9B,EAAKjkC,KAAK,GAAGikC,EAAK,KAAKn9B,KAErBuoB,GACF4U,EAAKjkC,KAAK,GAAGikC,EAAKA,EAAKniC,OAAS,KAAKutB,KAEhC4U,CACT,CAyBuBC,CAA4BV,EAAU18B,EAAOuoB,GAClE,IAAK,IAAI3f,EAAIs0B,EAAaliC,OAAS,EAAG4N,GAAK,IAAKA,EAAG,CACjD,MAAMgnB,EAAQ2M,GAAUD,iBAAiBY,EAAat0B,GAAIq0B,GAC1D,QAAct+B,IAAVixB,EACF,OAAOA,C,CAGb,CC3BA,SAlBA,SAAkBl3B,GAChB,GAAIA,EAAY,CACd,GAAIA,EAAW+c,MAAQ/c,EAAW2kC,YAChC,OAAOnlC,GAAsBolC,YAE/B,GAAIlhC,GAAqB1D,EAAW8C,eAClC,OAAOtD,GAAsBqlC,SAI/B,GAAI3jC,GAAmBlB,GACrB,OAAOR,GAAsBslC,M,CAIjC,OAAOtlC,GAAsBulC,OAC/B,ECQA,SArBA,SACER,EACAj9B,EACAuoB,GAeA,MAAO,GAbU+T,GACf,kBACAW,EACAj9B,EACAuoB,QAEiB+T,GACjB,oBACAW,EACAj9B,EACAuoB,IAIJ,ECLA,MAAemV,WAA8B7V,GAA7CjqB,WAAAA,G,oBAqDS,KAAA+/B,yBACLr/B,IAEA,MAAM,QAAEN,EAAO,QAAEkZ,GAAY5Y,EAAI1F,OAE3B6wB,EAAWrpB,GAAAA,UAAAA,aAAuB8W,GAClC0mB,EAAoBC,KACAD,EAAkB/+B,uBAG1BtF,SAASukC,IACzB,MAGM5+B,EAFJ0+B,EAAkB9+B,eAAeg/B,GAGGziC,KAAKotB,eAEtCvpB,GAA4BA,EAAwBlE,SAKzDkE,EAAwB3F,SAASb,IAC/B,IAAKA,EAAWyD,UAAU+7B,kBACxB,OAIyB93B,GAAAA,UAAAA,aACzB1H,EAAWyD,SAAS+7B,qBAGKzO,IAGzB/wB,EAAWkG,aAAc,EACzBlG,EAAW+c,KAAKN,YAAc,CAAC,E,IAGnC4oB,GAAwB//B,GAAQ,GAChC,CAwDN,CAvHEggC,uCAAAA,CACEhgC,EACAS,GAEA,IAAKA,IAAgBA,EAAYzD,OAC/B,OAGF,MAAMiD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAErB,OAAO87B,GAA4Bl4B,EAAUpD,EAC/C,CAsDUw/B,oBAAAA,CACRp8B,EACAq8B,EACApG,EACAqG,GAEA,MAAM7U,EAAWjuB,KAAKuuB,YAAY/nB,GAElC,IAAIq2B,EAEJ,GAAIr2B,aAAoB0V,GAAAA,cACtB2gB,EAAoB5O,EAASE,MAAM,YAAY,QAC1C,GAAI3nB,aAAoBioB,GAAAA,cAC7BoO,EAAoB5O,EAASE,MAAM,YAAY,OAC1C,CACL,MAAMlT,EAAWgT,EAASE,MAAM,aAAa,GACvC4U,EAAclkB,GAAAA,MAAMC,UAAU7D,GAEpC4hB,EAAoB93B,GAAAA,UAAAA,kBAClBg+B,EACAF,EACApG,E,CAIJ,OAAOI,CACT,CAeOmG,QAAAA,CACL3B,EACAF,EACA9jC,GAEA,OAAO4jC,GACLI,EACAF,EACAxrB,GAAStY,GACT2C,KAAKktB,KAET,EAGFmV,GAAsB1hC,SAAW,wBACjC,YClJA,MAAesiC,WAAuBZ,GAMpC9/B,WAAAA,CAAYkqB,EAA4BC,GACtCwW,MAAMzW,EAAWC,GAqFZ,KAAAyW,kBAAoB,CACzBlgC,EACAmgC,KAEA,IAAKA,EACH,OAAO,EAGT,MAAM,QAAEzgC,EAAO,cAAE4F,GAAkBtF,EAAI1F,OACjC8lC,EAAe96B,EAAcX,OACnC,IAAI07B,GAA6B,EAEjC,IAAK,MAAMjmC,KAAc+lC,EAAqB,CAE5C,GACE7kC,GAAmBlB,KAClBwE,GAAoBxE,EAAW8C,eAEhC,SAGF,MAAM,KAAEia,GAAS/c,EACXkmC,EAAsBnpB,EAAKmjB,QAC7BnjB,EAAKmjB,QAAQiG,uBACblgC,EAIEmgC,EAAOzjC,KAAK0jC,4BAChB/gC,EACAtF,EACAgmC,EACA,GAGIM,EAA6BF,IAASpmC,EAAW2kC,YACjD4B,GAA8BH,GAAQpmC,EAAW2kC,YACnD2B,GAA8BC,GAChCvmC,EAAW2kC,aAAe3kC,EAAW2kC,YACrCsB,GAA6B,GAE7BlpB,EAAKmjB,SACLnjB,EAAKmjB,QAAQiG,oBAAsBD,IAGnCD,GAA6B,E,CAIjC,OAAOA,CAA0B,EApI7B7W,EAAUG,eAAeiX,eAC3B7jC,KAAK4sB,cAAciX,aAAepX,EAAUG,cAAciX,cAGxDpX,EAAUG,eAAekX,kBAC3B9jC,KAAK4sB,cAAckX,gBACjBrX,EAAUG,cAAckX,gBAE9B,CA4IAC,uBAAAA,CACEphC,EACAtF,EACAgmC,EACAW,GAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,EAAM,QAAEutB,GAAYpe,EAAKmjB,QAEjC,GAAI/E,EAAS,CACX,MAAM,iBAAEyL,GAAqBzL,EAC7B,GAAIyL,EAAkB,CACpB,MAAMtL,EAAoB,CACxBuL,QAAS19B,EAAS29B,cAAcF,EAAiBC,SACjDE,SAAU59B,EAAS29B,cAAcF,EAAiBG,UAClDC,WAAY79B,EAAS29B,cAAcF,EAAiBI,YACpDC,YAAa99B,EAAS29B,cAAcF,EAAiBK,cAGvD,GACEjB,EAAa,IAAM1K,EAAkBuL,QAAQ,IAC7Cb,EAAa,IAAM1K,EAAkB2L,YAAY,IACjDjB,EAAa,IAAM1K,EAAkBuL,QAAQ,IAC7Cb,EAAa,IAAM1K,EAAkB2L,YAAY,GAGjD,OADAlqB,EAAKmjB,QAAQiG,kBAAoB,KAC1BhL,C,EAKb,IAAK,IAAIjrB,EAAI,EAAGA,EAAItC,EAAOtL,OAAQ4N,IAAK,CACtC,MAAMwnB,EAAQ9pB,EAAOsC,GACfg3B,EAA6B/9B,EAAS29B,cAAcpP,GAK1D,IAAa,IAFXyP,GAAAA,GAAAA,SAAcnB,EAAckB,GAA8BP,EAI1D,OADA5pB,EAAKmjB,QAAQiG,kBAAoBj2B,EAC1BwnB,C,CAIX3a,EAAKmjB,QAAQiG,kBAAoB,IACnC,CAYOiB,qBAAAA,CACLtD,EACA9jC,GAKA,MAAO,CACLme,WAAYxb,KAAKgjC,SACf,oBACA7B,EACA9jC,GAEF24B,WAAYh2B,KAAKgjC,SACf,oBACA7B,EACA9jC,GAEF44B,SAAUj2B,KAAKgjC,SAAS,kBAAmB7B,EAAgB9jC,GAC3D0mB,MAAO/jB,KAAKgjC,SAAS,eAAgB7B,EAAgB9jC,GACrD22B,OAAQh0B,KAAKgjC,SAAS,gBAAiB7B,EAAgB9jC,GACvD64B,WAAYl2B,KAAKgjC,SACf,oBACA7B,EACA9jC,GAEFyzB,UAAW9wB,KAAKgjC,SACd,uBACA7B,EACA9jC,GAEF0zB,SAAU/wB,KAAKgjC,SACb,sBACA7B,EACA9jC,GAGN,CASAqnC,WAAAA,CACEl+B,EACAynB,EACApS,GAEA,GAAIrV,aAAoBgoB,GAAAA,mBAAoB,CAC1C,MAAMvT,EAAWgT,EAASE,MAAM,aAAa,GACvChP,EAASN,GAAAA,MAAMC,UAAU7D,GAC/B,YAA8B3X,IAAvB6b,EAAOwlB,SAASC,E,CAEzB,MAAMC,EACJhpB,GAAWkhB,GAAAA,SAAAA,IAAa,gBAAiBlhB,GAC3C,MAAuC,iBAAzBgpB,GAAeC,KAC/B,CAYQpB,2BAAAA,CACN/gC,EACAtF,EACAgmC,EACAW,GAUA,GAP6BhkC,KAAK+jC,wBAChCphC,EACAtF,EACAgmC,EACAW,GAIA,OAAO,EAYT,QAR0BhkC,KAAK+kC,gBAC7BpiC,EACAtF,EACAgmC,EACAW,EACA,eAGF,CAGF,EAGFf,GAAetiC,SAAW,iBAC1B,YClUA,SArBA,SACEgC,EACAyU,EACA6E,GAAkB,GAElB,MAAMrZ,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAKfwkB,EAHgB5gB,EAAmC6gB,YAItD/Z,KAAI,EAAG9K,SACNA,EAAI0rB,WAAW9W,GAAiC5U,OAAMc,IAEvD1C,OAAO0mB,SAGV9gB,EAAS+gB,aAAaH,EACxB,E,gBChCM,SAAU4d,GAAcjQ,EAAOkQ,EAAW,GAC9C,OACE5R,WAAW0B,EAAM,IAAImQ,QAAQD,GAC7B,IACA5R,WAAW0B,EAAM,IAAImQ,QAAQD,GAC7B,IACA5R,WAAW0B,EAAM,IAAImQ,QAAQD,GAC7B,GAEJ,CCGA,MAAME,GAAgB,IAAI7oB,IAgE1B,SAAS8oB,GAAoBniC,GAC3B,MAAM,WAAEyb,EAAU,UAAE2mB,EAAS,SAAE7+B,GAAavD,EAAI1F,OAChD,IAAKmhB,GAAY4mB,eACf,OAGF,MAAMzgB,EAASnG,EAAWmB,MAAM8F,aAE1B,gBAAE8W,GAAoBj2B,EAAS44B,YAC/BmG,EAAa/+B,EAASg/B,yBAItBC,EAAU,GAAGj/B,EAAS6U,MAAM2pB,GAChCvI,MACG8I,IAEL,IAAIG,EAAaP,GAAcjmC,IAAIwf,EAAWlc,KACzCkjC,IACHA,EAAa,IAAIppB,IACjB6oB,GAAcnmC,IAAI0f,EAAWlc,IAAKkjC,IAGpC,IAAIrjB,EAAWqjB,EAAWxmC,IAAIumC,GAC9B,IAAKpjB,EAAU,CACb,MAAMijB,EAAiB5mB,EAAW4mB,eAClCA,EAAeK,kBAAkBN,GACjC,IACEC,EAAeM,SACfvjB,EAAWijB,EAAe1gB,gBAC1B8gB,EAAW1mC,IAAIymC,EAASpjB,E,CACxB,MAAOjW,GACPsL,QAAQmuB,MAAM,yBAA0Bz5B,E,EAG5CyY,EAAOJ,aAAapC,EACtB,CAEA,SApGA,SACE1f,EACAmjC,EACAvqB,GAEA,MAAM3Y,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAKfqI,EAAS66B,EAAQhjB,YACjBijB,EAAQD,EAAQE,WAChBjiB,EAAQ+hB,EAAQ9hB,WAEhB3B,EAAWsB,GAAAA,GAAAA,cACjBtB,EAASS,YAAYW,QAAQxY,EAAQ,GAErC,MAAMg7B,EAAYxjB,GAAAA,GAAAA,YAAyB,CACzC+D,OAAQjD,aAAajlB,KAAKynC,KAE5B1jB,EAAS6jB,SAASD,GAElB,MAAMphB,EAASC,GAAAA,GAAAA,YAAsB,CAAC,GACtC,IAAIwgB,EACJ,GAAM9+B,aAAoB2/B,GAAAA,iBAaxBthB,EAAOJ,aAAapC,OAbuB,CAC3CijB,EAAiBc,GAAAA,GAAAA,YAAiC,CAChDC,eAAgB,GAChBC,cAAe,EACfC,eAAe,IAEjBjB,EAAe7gB,aAAapC,GAC5BijB,EAAekB,oBAAmB,GAClClB,EAAemB,kBAAiB,GAChCnB,EAAeM,SACf,MAAMc,EAAepB,EAAe1gB,gBACpCC,EAAOJ,aAAaiiB,E,CAKtB,MAAM7mB,EAAQkF,GAAAA,GAAAA,cACdlF,EAAMmF,UAAUH,GAGhBhF,EAAMC,cAAc6mB,SAAS5iB,EAAM,GAAK,IAAKA,EAAM,GAAK,IAAKA,EAAM,GAAK,KACxEvd,EAAS4e,SAAS,CAChBvF,QACArd,IAAK+Y,EACL+pB,mBAGF3iC,EAAQqC,iBACNC,GAAAA,MAAAA,OAAa2hC,wBACbxB,GAEJ,ECiFA,UACE/mB,OA5FFnD,eACE1U,EACA6Q,EACAiH,GAEA,MAAM,cACJxF,EAAa,OACbd,EAAM,eACN9B,EAAc,8BACdkB,EAA6B,eAC7BkG,GACEjG,EAGEwvB,EADeroB,GAAkCtI,GACtBiE,mBAAmBsE,GAAgBqoB,UAC9D,WAAE/kB,GAAe8kB,EAElB9kB,GACHrK,QAAQC,KACN,wCAAwCzB,uBAI5C,MAAM8L,EAAWnD,GAAAA,MAAMoD,YAAYF,GACnC,IAAKC,EACH,MAAM,IAAIlf,MAAM,oCAAoCif,KAGtD,GAAIC,EAAS7V,OAASlH,GAAAA,MAAAA,aAAmB8hC,QAEvC,MAAM,IAAIjkC,MACR,iBAAiBkf,EAAS7V,qCAI9B,IAAK6V,EAAS5H,KAIZ,YAHA1C,QAAQC,KACN,oCAAoCoK,uBAKxC,MAAM+jB,EAAU9jB,EAAS5H,MAS3B,SACE5T,EACAs/B,EACAkB,GAEA,MAAMzrB,EAAWyrB,EACXtoB,EAAalY,EAASmY,SAASpD,GAErC,GAAKmD,EAGH,MAAM,IAAI5b,MAAM,yCAFhBmkC,GAAoBzgC,EAAS7D,QAASmjC,EAASvqB,EAInD,CAnBE2rB,CAAe1gC,EAAUs/B,EADN,GAAG1uB,KAAiC0uB,EAAQzqB,OAG/D7U,EAAS6e,cACT7e,EAAS6X,QACX,EA4CE9G,iCA7HF,SACEhB,EACAa,EACAoJ,GAAkB,GAWlB,GAoFF,SACEjK,EACAa,GAEA,MAAMqJ,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,MAAM,IAAI3d,MAAM,8BAA8ByT,oBAGhD,MAAM,cAAEoK,GAAkBF,EAE1B,IAAK,MAAMG,KAAgBD,EAAe,CACxC,MAAM,WAAE5Y,EAAU,kBAAEC,GAAsB4Y,EACpChe,GAAiBie,EAAAA,GAAAA,wBACrB9Y,EACAC,GAEFm/B,GACEvkC,EAAe4D,SAAS7D,QACxByU,E,CAGN,CApHEgwB,CACE7wB,EACAa,GAEFoH,GACEjI,EACAa,GAGEoJ,EAAiB,CACGE,GAAanK,GAAayK,mBAClC9iB,SAAQ,EAAG6J,aAAYC,yBACZ6Y,EAAAA,GAAAA,wBACrB9Y,EACAC,GAEaxB,SAAS6X,QAAQ,G,CAGtC,GCTA,MAAMgpB,WAAgC7a,GAEpCjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BE,cAAe,CAAC,IAGlBsW,MAAMzW,EAAWC,GA0DnB,KAAA4a,mBAAsB/wB,IACpB,MAAMkK,EAAYC,GAAanK,GAE/B,IAAKkK,EACH,OAGF,MAAMjJ,EACJlB,GAA+BC,GAEjC,IACGiB,GAC+C,IAAhDA,EAAqC7X,OAErC,OAIF,MAAM4nC,EAAqB9mB,EAAUE,cAAcrT,KACjD,EAAGtF,oBAAmBD,iBACpB,MAAMnF,GAAiBie,EAAAA,GAAAA,wBACrB9Y,EACAC,GAGF,GAAIpF,EACF,OAAOA,EAAe4D,Q,IAMtBghC,EAAyBhwB,EAAqClK,KACjE+J,IACC,MAAMN,EAAS/W,KAAKynC,gCAAgClxB,GAE9CmxB,EAAsB,GAQtBC,EANY,CAChB,CAAClpB,GAAgBlJ,UAAW+S,GAC5B,CAAC7J,GAAgBjJ,SAAU+S,GAC3B,CAAC9J,GAAgBqoB,SAAUc,IAGHvwB,EAAelL,MAEzC,IAAK,MAAM3F,KAAY+gC,EAAoB,CACzC,MAAMM,EAAmBF,EAAQtpB,OAC/B7X,EACA6Q,EACAN,GAGF2wB,EAAoB7pC,KAAKgqC,E,CAE3B,OAAOH,CAAmB,IAI9Bpd,QAAQwd,WAAWN,GAAwBO,MAAK,KAE9CR,EAAmBrpC,SAASsI,IAC1BA,EAAS6X,QAAQ,GACjB,GACF,CAzHJ,CAEA2pB,gBAAAA,GACE,MAAMzxB,EAAcvW,KAAKuW,YACnBiB,EACJlB,GAA+BC,GAG9BiB,GAC+C,IAAhDA,EAAqC7X,QAMvC6X,EAAqCtZ,SAClC4Y,IACCqU,GACE5U,EACAO,EAA2BM,+BAC3B,EACD,GAGP,CAEA6wB,iBAAAA,GACE,MAAM1xB,EAAcvW,KAAKuW,YACnBiB,EACJlB,GAA+BC,GAG9BiB,GAC+C,IAAhDA,EAAqC7X,QAMvC6X,EAAqCtZ,SAClC4Y,IACCqU,GACE5U,EACAO,EAA2BM,+BAC3B,EACD,GAGP,CAiFAqwB,+BAAAA,CACElxB,GAEA,MAAM+H,EACJwK,GAA8CvS,GAC1CnB,EAAe0T,KAKrB,OAFqBpT,GAAAA,UAAAA,UAAkBN,EAAckJ,EAGvD,EAGF+oB,GAAwB1mC,SAAW,sBACnC,YCFA,MAAMunC,GAA8B,IAvKpC,MAAA3lC,WAAAA,GACU,KAAAk4B,aAA4B,IAAIt9B,IAChC,KAAAu9B,oBAAqB,EACrB,KAAAC,sBAAuC,KAuDvC,KAAAwN,yBAA2B,KACjCnoC,KAAK66B,oBAGL,MAAMngB,EAAerc,MAAMC,KAAK0B,KAAKy6B,aAAajU,UAElD,IAAK,MAAMjQ,KAAemE,EAQxB,GAPA1a,KAAKg7B,eAAezkB,GAGpBvW,KAAKy6B,aAAa/6B,OAAO6W,GAIM,IAA3BvW,KAAKy6B,aAAah8B,KAGpB,OAFAuB,KAAK06B,oBAAqB,OAC1B16B,KAAK26B,sBAAwB,K,CA2FrC,CA/JSyN,eAAAA,CAAgB7xB,GACrBvW,KAAKy6B,aAAa/6B,OAAO6W,GAEM,IAA3BvW,KAAKy6B,aAAah8B,MACpBuB,KAAKm7B,QAET,CAEOkN,4BAAAA,CAA6B9xB,GAClCvW,KAAKsoC,+CAA+C,CAAC/xB,GACvD,CAMQskB,iBAAAA,GACN,GAAI76B,KAAKs7B,iBACP,MAAM,IAAIx4B,MACR,uHAGN,CAEQwlC,8CAAAA,CACN5tB,GAGAA,EAAaxc,SAASqY,IACpBvW,KAAKy6B,aAAa98B,IAAI4Y,EAAY,IAIpCvW,KAAK07B,SACP,CAKQA,OAAAA,GAGF17B,KAAKy6B,aAAah8B,KAAO,IAAiC,IAA5BuB,KAAK06B,qBACrC16B,KAAK26B,sBAAwBtzB,OAAOs0B,sBAClC37B,KAAKmoC,0BAIPnoC,KAAK06B,oBAAqB,EAE9B,CAuBAM,cAAAA,CAAezkB,GACb,MAAMkK,EAAYC,GAAanK,GAE/B,IAAKkK,EAEH,YADA/I,QAAQC,KAAK,yCAAyCpB,KAIxD,MAAM,cAAEoK,GAAkBF,EACpB4N,EAAY,GAElB1N,EAAcziB,SAAQ,EAAG6J,aAAYC,wBACnC,MAAMoT,GAAkBwgB,EAAAA,GAAAA,oBAAmB5zB,GAEtCoT,EAKLiT,EAAUxwB,KAAKud,EAAgBmtB,YAAYxgC,IAJzC2P,QAAQC,KAAK,sCAIwC,IAGzD,MAAM6wB,EAAkC/nB,EAAU2Z,gBAChDiN,GAAwB1mC,UAO1B,SAAS8nC,EAAqBxlC,GAC5B,MAAM,QAAEN,EAAO,WAAEoF,EAAU,kBAAEC,GAAsB/E,EAAI1F,OAEvDoF,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAayjC,eACbD,GAGF,MAAMhoB,EAAYkoB,GAAwB5gC,EAAYC,GAEtD,IAAKyY,EAEH,YADA/I,QAAQC,KAAK,gCAIf,MAAMzU,EAA+C,CACnDqT,YAAakK,EAAUpF,GACvBtT,eAGFlI,EAAAA,GAAAA,cAAaC,GAAAA,YAAa8oC,GAAcC,sBAAuB,IAC1D3lC,GAEP,CA5BKslC,GAyCLna,EAAUnwB,SAAQ,EAAGyE,cACnBA,EAAQqC,iBACNC,GAAAA,MAAAA,OAAayjC,eACbD,EACD,IAGHD,EAAgClB,mBAAmB/wB,IA/CjDmB,QAAQC,KAAK,oCAAqCpB,EAgDtD,CAKQ4kB,MAAAA,GACN9zB,OAAO80B,qBAAqBn8B,KAAK26B,uBAEjC36B,KAAKy6B,aAAaxO,QAClBjsB,KAAK06B,oBAAqB,EAC1B16B,KAAK26B,sBAAwB,IAC/B,GASF,SAASmO,GAA0BvyB,GACjC2xB,GAA4BG,6BAA6B9xB,EAC3D,CAGA,YC/LA,GAPmD,SACjDtT,GAEA,MAAM,YAAEsT,GAAgBtT,EAAI1F,OAC5BurC,GAA0BvyB,EAC5B,EC6GA,GArGmC,SACjCtT,GAEA,MAAM,eAAEiT,EAAc,oBAAEyD,GAAwB1W,EAAI1F,QAE9C,mBAAE4c,EAAkB,KAAEhO,GAC1BqS,GAAkCtI,GAE9BwE,EACJ8D,GAAkDtI,GAEpD,GAAI/J,IAASpP,GAA4BwY,SACvC,MAAM,IAAIzS,MACR,kDAAkDqJ,uBAItD,GAAI4O,GAAqBZ,EAAmBhO,IAAQ,CAElD,MAAM48B,EAAqBlqB,GAAAA,MAAMC,UAC9B3E,EAAmBhO,GAAyC8O,UAG/D,IAAK8tB,EAEH,YADArxB,QAAQC,KAAK,mCAIf,MAAM,UAAEqxB,EAAS,iBAAEC,GAAqBF,EAGxC,IAAIG,EACJ,GAAIvvB,GAAuBtb,MAAM0rB,QAAQpQ,GACvCuvB,EAAiBvvB,MACZ,CACL,MAAMwvB,EAAYH,EAAUI,gBAAgB,GAC5CF,EAAiB,IAAI7qC,MAAM8qC,GAAW9lC,O,CAGxC6lC,EAAehrC,SAASqP,IACtB07B,EAAiBI,gBAAgB97B,EAAE,IAIrCy7B,EAAU9hB,U,MAEVxM,EAAaxc,SAASqY,IACpB,MAAMiB,EACJgH,GAAiDjI,GAG7CoK,EADYD,GAAanK,GACCyK,mBAEhCxJ,EAAqCtZ,SAASmZ,IACxCA,EAAenB,iBAAmBA,GAItCyK,EAAcziB,SAAQ,EAAG6J,aAAYC,wBACnC,MAAMxB,GAAWqa,EAAAA,GAAAA,wBACf9Y,EACAC,GACAxB,SAEIkY,EAAalY,EAASmY,SAC1BtH,EAAeD,+BAGjB,IAAKsH,EACH,OAGF,MAAM4qB,EAAiB9iC,EAASuV,oBAE1BwtB,EAAe7qB,EAAWmB,MAAM8F,YAAYgB,gBAE5C,oBAAE7K,GAAwB3B,EAC9BhO,GAGIq9B,EACJ1tB,EAAoB5c,IAAIoqC,GAEpBG,EAAoB5qB,GAAAA,MAAM+M,SAAS4d,GACzCD,EAAariB,WAGbxR,GAAAA,UAAAA,uCACE6zB,EACAE,EACD,GACD,GACF,IAIN/uB,EAAaxc,SAASqY,IACpBuyB,GAA0BvyB,EAAY,GAE1C,ECxGA,GARuD,SACrDtT,GAEA,MAAM,YAAEsT,EAAW,8BAAEa,GAAkCnU,EAAI1F,OAE3DurC,GAA0BvyB,EAC5B,ECkBA,GApBqC,SACnCtT,GAEA,MAAM,eAAEiT,GAAmBjT,EAAI1F,OAEVkd,GAAgCvE,GAExChY,SAASqY,IACOD,GAA+BC,GACvCrY,SAASmZ,IACtBA,EAAenB,iBAAmBA,GACpCkD,GACE7C,EACAc,EAAeD,8B,GAGnB,GAEN,E,gBCmCA,SAASsyB,GAA0BzmC,GACjC,MAAM0mC,EAAY1mC,EAAI1F,QAChB,WAAEwK,EAAU,kBAAEC,GAAsB2hC,GACpC,SAAEnjC,IAAaqa,EAAAA,GAAAA,wBACnB9Y,EACAC,GAGIyY,EAAYkoB,GAAwB5gC,EAAYC,GAEtD,IAAKyY,EACH,OAGF,IAAIjJ,EACFgH,GAAiDiC,EAAUpF,KAAO,GAOpE,GALA7D,EACEA,EAAqC5W,QAClCyW,GAAmBA,EAAelL,OAASsS,GAAgBlJ,YAG3DiC,GAAsC7X,OACzC,OAGF,MAAM8W,EAA8B,CAAC,EACrCe,EAAqCtZ,SAASmZ,IAC5C,MAAMjB,EAAeoI,GACnBnH,EAAenB,gBAGjB,IAAKE,EACH,OAGF,MAAM+H,EACJ/H,EAAa+D,mBAAmBsE,GAAgBlJ,UAElD,GAAIwF,GAAqBoD,GACvB,OAGF,MAAM,oBAAErC,GACNqC,EAEF1H,EAA4BY,EAAeD,+BACzC,CACE0E,sBACD,IAGL,MAAM8tB,EAAqB/qC,OAAOwE,KAAKoT,GACjC6yB,EAAiB9iC,EAASuV,oBACjBvV,EAAS6gB,YAEjBnpB,SAAS2hB,IACd,IAAK+pB,EAAmB3jB,SAASpG,EAAMrd,KACrC,OAEF,MAAMqnC,EAAoBhqB,EAAMA,OAE1B,oBAAE/D,GAAwBrF,EAA4BoJ,EAAMrd,KAE5DsnC,EAAiBhuB,EAAoB5c,IAAIoqC,GAEzCS,EAAwBF,EAAkBlkB,YAAYgB,eAE5D,IAAKmjB,EAAgB,CAInB,MAAME,EAAc7lB,GAAAA,GAAAA,YAAyB,CAC3Cje,KAAM,SACNke,mBAAoB,EACpBoC,OAAQ,IAAIyjB,WAAWF,EAAsB9lB,uBAGzC+kB,EAAYkB,GAAAA,GAAAA,cAGlB,OAFAlB,EAAUzkB,eAAeC,WAAWwlB,QACpCH,EAAkBlkB,YAAYlB,aAAaukB,E,CAI7C,MAAMmB,EAAetrB,GAAAA,MAAM+M,SAASke,IAE9B,OAAEM,EAAM,WAAEC,EAAU,QAAEC,EAAO,UAAEj3B,GACnC7M,EAAS+jC,qBAAqBJ,GAKhC,GAHAJ,EAAsBS,UAAUJ,GAChCL,EAAsB7iB,WAGpB6iB,EAAsBX,gBAAgB,KAAOiB,EAAW,IACxDN,EAAsBX,gBAAgB,KAAOiB,EAAW,GAoCxD,OA9BA7jC,EAAS+gB,aAAa,CAAC1H,EAAMrd,MAC7BgE,EAASikC,UACP,CACE,CACE5uB,QAASiuB,EACTvuB,SAAUsE,EAAMrd,IAChBkoC,SAAUA,EAAGC,iBACX,MAAMX,EAAc7lB,GAAAA,GAAAA,YAAyB,CAC3Cje,KAAM,SACNke,mBAAoB,EACpBoC,OAAQ,IAAI2jB,EAAate,kBAGrBmd,EAAYkB,GAAAA,GAAAA,cAElBlB,EAAU4B,cAAcP,EAAW,GAAIA,EAAW,GAAI,GACtDrB,EAAU6B,WAAWP,GACrBtB,EAAU8B,aAAaz3B,GACvB21B,EAAUwB,UAAUJ,GACpBpB,EAAUzkB,eAAeC,WAAWwlB,GAEpCW,EAAWhlB,YAAYlB,aAAaukB,EAAU,KAIpD,GACA,QAGFF,GAA0BroB,EAAUpF,IAItCtW,GAAAA,UAAAA,uCACEglC,EACAI,GAEF3jC,EAAS6X,SAKLpb,EAAIkJ,OAASlH,GAAAA,MAAAA,OAAayjC,gBAE5BliC,EAAS7D,QAAQ2H,oBACfrF,GAAAA,MAAAA,OAAayjC,eACbgB,G,GAIR,CAEA,UACE99B,OAtMa,SAAUjJ,GACvB,MAAM,SAAE6D,IAAa3D,EAAAA,GAAAA,mBAAkBF,GAEjC6D,aAAoB0V,GAAAA,gBAI1BvZ,EAAQqC,iBACNC,GAAAA,MAAAA,OAAa8lC,gBACbrB,IAGF/mC,EAAQqC,iBACNC,GAAAA,MAAAA,OAAayjC,eACbgB,IAEJ,EAuLEl+B,QArLc,SAAU7I,GACxB,MAAM,SAAE6D,IAAa3D,EAAAA,GAAAA,mBAAkBF,GAEjC6D,aAAoB0V,GAAAA,gBAI1BvZ,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAa8lC,gBACbrB,IAEF/mC,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAayjC,eACbgB,IAEJ,GCnCA,SAASsB,GACProC,EACAsE,EACA+8B,EAAY,GAIZ,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GACzC,IAAKC,EACH,MAAM,IAAIE,MAAM,oDAGlB,OAAOmoC,GACLroC,EACAqE,EACA+8B,EAEJ,CAYA,SAASiH,GACProC,EACAmyB,EACAiP,GAIA,MAAM,kBAAEh8B,EAAiB,WAAED,GAAenF,EACpC6d,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO,KAGT,MAAQyqB,eAAgB1lC,GAAUib,EAClC,IAAK,MAAMva,KAAQV,EAAO,CACxB,MAAM2lC,EAAQC,GACZ5lC,EAAMU,GACNtD,EACAmyB,EACAiP,GAEF,GAAImH,EACF,OAAOA,C,CAIX,OAAO,IACT,CAcA,SAASC,GACPrP,EACAn5B,EACAmyB,EACAiP,GAKA,MAAM,SAAEx9B,GAAa5D,EAEfQ,EAAcK,GACjBs4B,EAAKx5B,YAAgC5B,SACtC6F,GAAU7D,SAEN0oC,EAAY7kC,GAAUuV,sBAC5B,GAAI3Y,GAAazD,OAAQ,CACvB,MAAM,QAAEgD,GAAYC,EAAe4D,SACnC,IAAK,MAAMnJ,KAAc+F,EAAa,CACpC,MAAMy5B,EAAoBx/B,EAAWyD,UAAU+7B,kBAC/C,KACGwO,GAAaxO,GAAqBwO,IAAcxO,IAChDd,EAAKgJ,mBAMNhJ,EAAKgJ,gBAAgBpiC,EAAStF,EAAY03B,EAAOiP,EAAW,KAC5DjI,EAAKgI,wBAAwBphC,EAAStF,EAAY03B,EAAOiP,IAEzD,OAAO3mC,C,EAIb,OAAO,IACT,CCnGA,SANA,SAAkB8D,GAChB,MAAMgL,SAAchL,EAEpB,OAAiB,OAAVA,IAA4B,WAATgL,GAA8B,aAATA,EACjD,EC8LA,SA3JA,SAAkBm/B,EAAMC,EAAM7hB,GAC5B,IAAI8hB,EAAUC,EAAUC,EAASC,EAAQC,EAASC,EAE9CC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAGf,MAAMC,GACHX,GAAiB,IAATA,GAAsD,mBAAjClkC,OAAOs0B,sBAEvC,GAAoB,mBAAT2P,EACT,MAAM,IAAIa,UAAU,uBAUtB,SAASC,EAAWC,GAClB,MAAMC,EAAOd,EACPe,EAAUd,EAMhB,OAJAD,EAAWC,OAAWnoC,EACtBwoC,EAAiBO,EACjBV,EAASL,EAAKkB,MAAMD,EAASD,GAEtBX,CACT,CAEA,SAASc,EAAWC,EAAanB,GAC/B,OAAIW,EACK7kC,OAAOs0B,sBAAsB+Q,GAG/BnhC,WAAWmhC,EAAanB,EACjC,CA6BA,SAASoB,EAAaN,GACpB,MAAMO,EAAoBP,EAAOR,EAMjC,YACmBvoC,IAAjBuoC,GACAe,GAAqBrB,GACrBqB,EAAoB,GACnBZ,GATyBK,EAAOP,GASCJ,CAEtC,CAEA,SAASmB,IACP,MAAMR,EAAO//B,KAAKD,MAElB,GAAIsgC,EAAaN,GACf,OAAOS,EAAaT,GAGtBT,EAAUa,EAAWI,EAhCvB,SAAuBR,GACrB,MACMU,EAAsBV,EAAOP,EAC7BkB,EAAczB,GAFMc,EAAOR,GAIjC,OAAOG,EACHvhC,KAAK8U,IAAIytB,EAAatB,EAAUqB,GAChCC,CACN,CAwBqCC,CAAcZ,GACnD,CAEA,SAASS,EAAaT,GAKpB,OAJAT,OAAUtoC,EAIN2oC,GAAYT,EACPY,EAAWC,IAEpBb,EAAWC,OAAWnoC,EAEfqoC,EACT,CAkBA,SAASuB,KAAaZ,GACpB,MAAMD,EAAO//B,KAAKD,MACZ8gC,EAAaR,EAAaN,GAMhC,GAJAb,EAAWc,EACXb,EAAWzrC,KACX6rC,EAAeQ,EAEXc,EAAY,CACd,QAAgB7pC,IAAZsoC,EACF,OApFN,SAAqBS,GAOnB,OALAP,EAAiBO,EAEjBT,EAAUa,EAAWI,EAActB,GAG5BQ,EAAUK,EAAWC,GAAQV,CACtC,CA4EayB,CAAYvB,GAErB,GAAIG,EAIF,OAFAJ,EAAUa,EAAWI,EAActB,GAE5Ba,EAAWP,E,CAOtB,YAJgBvoC,IAAZsoC,IACFA,EAAUa,EAAWI,EAActB,IAG9BI,CACT,CAKA,OAzIAJ,EAAOhU,OAAOgU,IAAS,EACnB8B,GAAS3jB,KACXqiB,EAAUzkB,QAAQoC,EAAQqiB,SAC1BC,EAAS,YAAatiB,EACtBgiB,EAAUM,EAASvhC,KAAK6iC,IAAI/V,OAAO7N,EAAQgiB,UAAY,EAAGH,GAAQG,EAClEO,EAAW,aAAcviB,EAAUpC,QAAQoC,EAAQuiB,UAAYA,GAgIjEiB,EAAUK,OAzCV,gBACkBjqC,IAAZsoC,GAlEN,SAAqBvwB,GACnB,GAAI6wB,EACF,OAAO7kC,OAAO80B,qBAAqB9gB,GAErCnR,aAAamR,EACf,CA8DImyB,CAAY5B,GAEdE,EAAiB,EACjBN,EAAWK,EAAeJ,EAAWG,OAAUtoC,CACjD,EAoCA4pC,EAAUO,MAlCV,WACE,YAAmBnqC,IAAZsoC,EAAwBD,EAASmB,EAAaxgC,KAAKD,MAC5D,EAiCA6gC,EAAUQ,QA/BV,WACE,YAAmBpqC,IAAZsoC,CACT,EA+BOsB,CACT,EClJA,SAnBA,SAAkB5B,EAAMC,EAAM7hB,GAC5B,IAAIqiB,GAAU,EACVE,GAAW,EAEf,GAAoB,mBAATX,EACT,MAAM,IAAIa,UAAU,uBAOtB,OALIkB,GAAS3jB,KACXqiB,EAAU,YAAariB,EAAUpC,QAAQoC,EAAQqiB,SAAWA,EAC5DE,EAAW,aAAcviB,EAAUpC,QAAQoC,EAAQuiB,UAAYA,GAG1D0B,GAASrC,EAAMC,EAAM,CAC1BQ,UACAE,WACAP,QAASH,GAEb,ECxDM,SAAUqC,GAAKC,EAAKC,EAAKC,GAC7B,OAAOtjC,KAAK8U,IAAI9U,KAAK6iC,IAAIQ,EAAKD,GAAME,EACtC,CAiBA,aC1BM,uCAAEC,IAA2CjpC,GAAAA,UAUrC,SAAUkpC,GACtBpyB,EACAT,EACA8yB,GAGkC,iBAAvBA,IACTA,EAAqB,CACnB/hC,KAAMlH,GAAAA,MAAAA,iBAAuBkpC,KAC7BC,MAAOF,IAIXF,GAAuCrwC,IAAIke,EAASqyB,GAGlC9yB,EAAgBizB,oBAGxBnwC,SAASsI,IACAA,EAAS8nC,cACbroB,SAASpK,IACpBrV,EAAS+nC,iBAAiB1yB,E,GAOhC,CCxCA,MAAM,iBAAE2yB,IAAqBvpC,GAAAA,MACvBwpC,GAAc,KAEdC,GAA8B,CAClC,GAGIC,GAA2B,CAC/B,OAGIC,GAA0B,CAC9B,OAGIC,GAAe,CACnB,EAAG,KACH,EAAG,WAqBCC,GAA2BA,CAACvR,EAAS5R,KACzC,MAAM,YAAEojB,EAAW,gBAAEC,GAAoBrjB,EAEnCsjB,EAAQD,EAAkB,KAAOP,GACvC,OACGM,IACCA,EAAY5iC,MAAS4iC,EAAYG,6BAIjCH,EAAY5iC,OAASqiC,GAAiBW,aACjCV,GAELM,EAAYG,4BACP,YAEF,GAAGD,KAASF,EAAY5iC,OARtB8iC,CAQ4B,EAGjCG,GAAS,IAITC,GAAyBA,CAAC9R,EAAS5R,KACvC,MAAM,YAAEojB,EAAW,gBAAEC,GAAoBrjB,EACnCsjB,GAASD,EAAkB,KAAOP,IAAeW,GACvD,OAAKL,GAAgBA,EAAY5iC,KAG7B4iC,EAAYG,4BACP,YAEF,GAAGD,KAASF,EAAY5iC,OALtB8iC,CAK4B,EAOjCK,GAAqBA,CAAC3jB,EAAO4R,EAAU,MAC3C,IAAI5R,EAAMojB,aAAaG,4BAEhB,OAAIvjB,EAAMojB,aAAaX,MACrBziB,EAAMojB,YAAYX,MAElB,C,EAYLmB,GAAmCA,CAAC5jB,EAAO4R,KAC/C,MAAOiS,EAAaC,GAAelS,GAC7B,YAAEwR,EAAW,gBAAEC,GAAoBrjB,EACzC,IAAIsjB,EAAQD,EAAkB,KAAOP,GACrC,MAAMiB,EAAYT,EAAQG,GAC1B,IAAIhB,EAAQ,EACRuB,EAAkB,GAEtB,IACGZ,IACCA,EAAY5iC,OAAS4iC,EAAYG,4BAEnC,MAAO,CAAED,QAAOS,YAAWtB,SAG7B,GAAIW,EAAY5iC,OAASqiC,GAAiBW,aACxC,MAAO,CAAEF,MAAOR,GAAaiB,UAAWjB,GAAcW,GAAQhB,SAGhE,GAAIW,EAAYG,4BAA6B,CAC3C,IAAIU,EAAUb,EAAYG,4BAA4BtuC,QACnDivC,GACCL,EAAY,IAAMK,EAAOC,qBACzBN,EAAY,IAAMK,EAAOE,qBACzBP,EAAY,IAAMK,EAAOG,qBACzBR,EAAY,IAAMK,EAAOI,qBACzBR,EAAY,IAAMI,EAAOC,qBACzBL,EAAY,IAAMI,EAAOE,qBACzBN,EAAY,IAAMI,EAAOG,qBACzBP,EAAY,IAAMI,EAAOI,sBAK7B,IAAKL,GAASjwC,OACZ,MAAO,CAAEsvC,QAAOS,YAAWtB,SAc7B,GARAwB,EAAUA,EAAQhvC,QACfivC,GACCnB,GAA4BzoB,SAAS4pB,EAAOK,iBAC5CvB,GAAyB1oB,SACvB,GAAG4pB,EAAOM,0BAA0BN,EAAOO,6BAI5CR,EAAQjwC,OACX,MAAO,CAAEsvC,MAAOR,GAAaiB,UAAWjB,GAAcW,GAAQhB,SAIhE,MAAMyB,EAASD,EAAQ,GAEjBS,EAAiB5lC,KAAKC,IAAImlC,EAAOQ,gBACjCC,EAAiB7lC,KAAKC,IAAImlC,EAAOS,gBAYvC,IAN4BvrC,GAAAA,UAAAA,QAC1BsrC,EACAC,EA5IM,MAqJN,MAAO,CAAErB,MAAOR,GAAaiB,UAAWjB,GAAcW,GAAQhB,SAJ9DA,EAAQ,GAAKiC,EAAiBC,EAAiB,KAC/CX,EAAkB,YAClBV,EAAQ,I,MAIDF,EAAYX,QACrBA,EAAQW,EAAYX,OAGtB,MAAO,CACLa,MAAOA,GAASU,EAAkB,IAAIA,IAAoB,IAC1DD,UAAWA,GAAaC,EAAkB,IAAIA,IAAoB,IAClEvB,QACD,EAGGmC,GAAkCA,CAAC5kB,EAAO4R,KAC9C,MAAOgI,GAAchI,GACf,YAAEwR,GAAgBpjB,EACxB,IAAIsjB,EAAQ,CAAC,OACTzoB,EAAS,CAAC,MACVmpB,EAAkB,GAEtB,IACGZ,IACCA,EAAY5iC,OAAS4iC,EAAYG,4BAEnC,MAAO,CAAED,QAAOzoB,UAIlB,GAAIuoB,EAAYG,4BAA6B,CAE3C,MAAMsB,EACJzB,EAAYG,4BAA4BtuC,QACrCivC,GACCnB,GAA4BzoB,SAAS4pB,EAAOK,iBAC5CtB,GAAwB3oB,SACtB,GAAG4pB,EAAOM,0BAA0BN,EAAOO,4BAInD,IAAKI,GAA0B7wC,OAC7B,MAAO,CAAEsvC,QAAOzoB,UAGlB,MAAMqpB,EAASW,EAAyBr6B,MACrC05B,GACCtK,EAAW,IAAMsK,EAAOC,qBACxBvK,EAAW,IAAMsK,EAAOE,qBACxBxK,EAAW,IAAMsK,EAAOG,qBACxBzK,EAAW,IAAMsK,EAAOI,sBAG5B,IAAKJ,EACH,MAAO,CAAEZ,QAAOzoB,UAKlB,MAAM,iBAAEiqB,EAAmB,EAAC,iBAAEC,EAAmB,GAAMb,GACjD,eAAEQ,EAAc,eAAEC,GAAmBT,EAErCc,GACHpL,EAAW,GAAKsK,EAAOG,oBAAsBU,GAC9CJ,EAMFX,EAAkB,YAClBnpB,EAAS,EAJN+e,EAAW,GAAKsK,EAAOC,oBAAsBW,GAC9CJ,EAGgBM,GAClB1B,EAAQ,CACNJ,GAAagB,EAAOM,wBACpBtB,GAAagB,EAAOO,wB,CAIxB,MAAO,CACLnB,QACAzoB,SACAmpB,kBACD,EASGiB,GAAuBjlB,GAAUA,EAAMojB,aAAa8B,QAAU,ECnPpE,SAdM,SACJz1B,EACA01B,GAEKA,EAAoBnxC,QAIzBmxC,EAAoB5yC,SAAS6J,IAC3B,MAAM,QAAEpF,GAAYyY,EAAgBmtB,YAAYxgC,GAChD26B,GAAwB//B,EAAQ,GAEpC,ECMc,SAAUouC,GACtBvqC,EACAkjB,GAKA,KAFuB7mB,EAAAA,GAAAA,mBAAkB2D,EAAS7D,SAGhD,MAAM,IAAIG,MAAM,0DAGlB,GACE0D,aAAoB0V,GAAAA,eACc,IAAlC1V,EAAS8nC,cAAc3uC,OAEvB,MAAM,IAAImD,MAAM,wCAGlB,MAAQqJ,KAAM6kC,GAAiBxqC,GACzB,SAAEyU,EAAQ,MAAEzQ,EAAK,YAAEymC,GAAgBvnB,EAEzC,GAAIljB,aAAoB0V,GAAAA,cACtB1V,EAASuqC,OAAOvmC,EAAOkf,EAAQwnB,gBAAiBxnB,EAAQynB,WACnD,GAAI3qC,aAAoB24B,GAAAA,gBAS3B,SACJ34B,EACAyU,EACAzQ,EACAymC,GAAc,GAEd,MAAMG,EAAmBH,GAEnB,eAAEI,EAAc,iBAAEC,EAAgB,eAAEC,GACxC77B,GAAAA,UAAAA,4BAAoClP,EAAUyU,EAAUm2B,GAE1D,IAAKG,EACH,OAGF,MAAM,WAAEC,EAAU,yBAAEhV,EAAwB,OAAEn0B,GAAWkpC,GACnD,WAAElU,EAAU,gBAAEZ,EAAe,SAAE3G,GAAaztB,GAE5C,cAAEopC,EAAa,YAAEC,GAAgBh8B,GAAAA,UAAAA,sBACrC2nB,EACAvH,EACA0b,EACA/U,EACAD,EACAhyB,GAGFhE,EAASmrC,UAAU,CACjBtU,WAAYoU,EACZ3b,SAAU4b,IAEZlrC,EAAS6X,SAET,MAAMuzB,EAAmBN,EAAmB9mC,EAE5C,IACGonC,EAAmBP,GAAkBO,EAAmB,IACzDprC,EAASuV,oBACT,CAIA,MAAM81B,EAA0B,CAC9B52B,WACAzU,WACAgE,QACAonC,mBACAN,mBACAD,iBACA/H,eAAgB9iC,EAASuV,qBAG3BrG,GAAAA,UAAAA,aACE5V,GAAAA,YACAgyC,GAAAA,OAAOC,4BACPF,E,CAGN,CAlEIG,CAAaxrC,EAAUyU,EAAUzQ,EAAOymC,OACnC,MAAIzqC,aAAoBioB,GAAAA,eAG7B,MAAM,IAAI3rB,MAAM,sCAAsCkuC,KAFtDxqC,EAASuqC,OAAOvmC,E,CAIpB,CCqBA,SAnDA0Q,eACEvY,EACA+mB,EAAU,CAAC,GAEX,MAAM,WAAE6b,EAAU,gBAAE2L,EAAe,SAAEj2B,GAAayO,EAC5C9mB,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEzC,IAAKC,EACH,MAAM,IAAIE,MAAM,6BAGlB,MAAM,SAAE0D,GAAa5D,GAEb2iC,WAAY0M,EAAiB,eAAEC,GAWzC,SACE1rC,EACA0qC,GAEA,GAAI1qC,aAAoB0V,GAAAA,cACtB,MAAO,CACLg2B,eAAgB1rC,EAAS8nC,cAAc3uC,OACvC4lC,WAAY2L,EACR1qC,EAAS2rC,wBACT3rC,EAASg/B,0BAEV,GAAIh/B,aAAoB24B,GAAAA,eAC7B,OAAOzpB,GAAAA,UAAAA,mCAA2ClP,GAElD,MAAM,IAAI1D,MAAM,4BAEpB,CA3B4DsvC,CACxD5rC,EACA0qC,GAGImB,EAwBR,SACEH,EACA3M,GAEA,MAAM+M,EAAiBJ,EAAiB,EAExC,OAAOtE,GAAKrI,EAAY,EAAG+M,EAC7B,CA/B2BC,CAAqBL,EAAgB3M,GAG9DwL,GAAOvqC,EAAU,CAAEgE,MAFL6nC,EAAmBJ,EAEPf,kBAAiBj2B,YAC7C,ECHc,SAAUu3B,GACtBxJ,EACAyJ,EACA/H,EACAgI,GAEA,IAAIC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAE9BC,EAIFA,EADGjK,EAAiCvd,cACtBud,EAAiCvd,gBAEjCud,EACXzkB,eACAsC,aACAC,UAGL,MAAMujB,EAAarB,EAAUI,gBAExBsJ,IAQDC,EAAMC,IAAQC,EAAMC,IAAQC,EAAMC,IAASN,GAP7CC,EAAO,EACPC,EAAOvI,EAAW,GAClBwI,EAAO,EACPC,EAAOzI,EAAW,GAClB0I,EAAO,EACPC,EAAO3I,EAAW,IAKpB,MAAMxW,EAAQoJ,GAAAA,GAAAA,WAAgB0V,EAAME,EAAME,GAEpC1/B,EAAY21B,EAAUkK,eACtBC,EAAa9/B,EAAUoK,MAAM,EAAG,GAChC21B,EAAgB//B,EAAUoK,MAAM,EAAG,GACnC41B,EAAiBhgC,EAAUoK,MAAM,EAAG,GAEpC6sB,EAAUtB,EAAUsK,cACnBC,EAAYC,EAAeC,GAAmBnJ,EAG/CoJ,EAAgB1K,EAAU2K,aAAa9f,GAEvC+f,EAAU3W,GAAAA,GAAAA,WACdkW,EAAW,GAAKI,EAChBJ,EAAW,GAAKI,EAChBJ,EAAW,GAAKI,GAGZM,EAAa5W,GAAAA,GAAAA,WACjBmW,EAAc,GAAKI,EACnBJ,EAAc,GAAKI,EACnBJ,EAAc,GAAKI,GAGfM,EAAe7W,GAAAA,GAAAA,WACnBoW,EAAe,GAAKI,EACpBJ,EAAe,GAAKI,EACpBJ,EAAe,GAAKI,GAGhBM,EACJd,EAAWtzC,OAAS0qC,EAAW,GAAKA,EAAW,GAAKA,EAAW,GAC3D2J,EAAY3J,EAAW,GAAK0J,EAC5BE,EAAY5J,EAAW,GAAK2J,EAE5BE,EAAqC,GAErCC,EAAalX,GAAAA,GAAAA,MAAWyW,GAE9B,IAAK,IAAI5nB,EAAIinB,EAAMjnB,GAAKknB,EAAMlnB,IAAK,CACjC,MAAMsoB,EAAYnX,GAAAA,GAAAA,MAAWkX,GAE7B,IAAK,IAAIplC,EAAI8jC,EAAM9jC,GAAK+jC,EAAM/jC,IAAK,CACjC,MAAMslC,EAAYpX,GAAAA,GAAAA,MAAWkX,GAE7B,IAAK,IAAI5mC,EAAIolC,EAAMplC,GAAKqlC,EAAMrlC,IAAK,CACjC,MAAM+mC,EAAyB,CAAC/mC,EAAGwB,EAAG+c,GAGtC,GAAI2mB,EAAe0B,EAA4BA,GAAa,CAC1D,MAAM/vC,EAAQ0nB,EAAImoB,EAAYllC,EAAIilC,EAAYzmC,EAAIwmC,EAClD,IAAI5yC,EAEFA,EADE4yC,EAAY,EACN,CACNd,EAAW7uC,GACX6uC,EAAW7uC,EAAQ,GACnB6uC,EAAW7uC,EAAQ,IAGb6uC,EAAW7uC,GAGrB8vC,EAAcr2C,KAAK,CAAEsD,QAAOiD,QAAOkwC,WAAUC,SAAUJ,IACnDzJ,GACFA,EAAS,CAAEvpC,QAAOiD,QAAOkwC,WAAUC,SAAUJ,G,CAKjDlX,GAAAA,GAAAA,IAASkX,EAAYA,EAAYP,E,CAInC3W,GAAAA,GAAAA,KAAUkX,EAAYE,GACtBpX,GAAAA,GAAAA,IAASkX,EAAYA,EAAYN,E,CAInC5W,GAAAA,GAAAA,KAAUkX,EAAYC,GACtBnX,GAAAA,GAAAA,IAASkX,EAAYA,EAAYL,E,CAGnC,OAAOI,CACT,CCpIc,SAAUM,GAAcC,EAAgBF,GACpD,MAAM,OAAE9jB,EAAM,OAAEC,GAAW+jB,EACrBC,EAAUD,EAAOC,SAAWhkB,EAASA,EAE3C,OACG6jB,EAAS,GAAK9jB,EAAO,KAAO8jB,EAAS,GAAK9jB,EAAO,KAC/C8jB,EAAS,GAAK9jB,EAAO,KAAO8jB,EAAS,GAAK9jB,EAAO,KACjD8jB,EAAS,GAAK9jB,EAAO,KAAO8jB,EAAS,GAAK9jB,EAAO,KACpDikB,CAEJ,CCPA,SAjBA,SACEhC,EACAiC,GAGA,MAAMC,EAAmBlC,EAAUruC,WAAU,EAAEkb,EAAK+tB,KAAS/tB,IAAQ+tB,IAErE,IAA0B,IAAtBsH,EACF,MAAM,IAAI9xC,MAAM,uDAMlB,OAFA4vC,EAAUkC,GAAkB,IAAMD,EAClCjC,EAAUkC,GAAkB,IAAMD,EAC3BjC,CACT,EC8BA,SA7CA,SACEznC,EACAo/B,GAEA,IAAIwK,EAAOC,IACPC,EAAO,EACPC,EAAOF,IACPG,EAAO,EACPC,EAAOJ,IACPK,EAAO,EAkBX,GAhBAlqC,EAAO/M,SAASk3C,IACdP,EAAOpqC,KAAK8U,IAAI61B,EAAE,GAAIP,GACtBE,EAAOtqC,KAAK6iC,IAAI8H,EAAE,GAAIL,GACtBC,EAAOvqC,KAAK8U,IAAI61B,EAAE,GAAIJ,GACtBC,EAAOxqC,KAAK6iC,IAAI8H,EAAE,GAAIH,GACtBC,EAAOzqC,KAAK8U,IAAI61B,EAAE,GAAIF,GACtBC,EAAO1qC,KAAK6iC,IAAI8H,EAAE,GAAID,EAAK,IAG7BN,EAAOpqC,KAAK4qC,MAAMR,GAClBE,EAAOtqC,KAAK4qC,MAAMN,GAClBC,EAAOvqC,KAAK4qC,MAAML,GAClBC,EAAOxqC,KAAK4qC,MAAMJ,GAClBC,EAAOzqC,KAAK4qC,MAAMH,GAClBC,EAAO1qC,KAAK4qC,MAAMF,GAEd9K,EAAY,CAEd,MAAOxZ,EAAOyC,EAAQgiB,GAASjL,EAC/BwK,EAAOpqC,KAAK6iC,IAAI,EAAGuH,GACnBE,EAAOtqC,KAAK8U,IAAIsR,EAAQ,EAAGkkB,GAC3BC,EAAOvqC,KAAK6iC,IAAI,EAAG0H,GACnBC,EAAOxqC,KAAK8U,IAAI+T,EAAS,EAAG2hB,GAC5BC,EAAOzqC,KAAK6iC,IAAI,EAAG4H,GACnBC,EAAO1qC,KAAK8U,IAAI+1B,EAAQ,EAAGH,E,CAG7B,MAAO,CACL,CAACN,EAAME,GACP,CAACC,EAAMC,GACP,CAACC,EAAMC,GAEX,GC1CM,sBAAEI,IAA0B7/B,GAAAA,UAiBpB,SAAU8/B,GACtBxM,EACAyM,EACA/K,EACAlkC,GAMA,MAAM,UAAEksC,EAAS,YAAEgD,EAAW,YAAEC,GAmBlC,SACEF,EACAzM,EACAxiC,GAMA,MAAOyrB,EAAQ1qB,GAAOkuC,EAGhBC,EAAczY,GAAAA,GAAAA,YACjBhL,EAAO,GAAK1qB,EAAI,IAAM,GACtB0qB,EAAO,GAAK1qB,EAAI,IAAM,GACtB0qB,EAAO,GAAK1qB,EAAI,IAAM,GAInBouC,EAAc1Y,GAAAA,GAAAA,SAAchL,EAAQ1qB,GAAO,EAEjD,IAAImrC,EAEJ,IAAKlsC,EAAU,CAUb,MAAMovC,EAAYL,GAChBvM,EACA0M,GAGIG,EAAW7M,EAAUsK,aACrBwC,EAAarrC,KAAK8U,OAAOs2B,GAEzBE,EAAetrC,KAAKurC,KAAKL,EAAcG,GAQ7C,OANApD,EAAY,CACV,CAACkD,EAAU,GAAKG,EAAcH,EAAU,GAAKG,GAC7C,CAACH,EAAU,GAAKG,EAAcH,EAAU,GAAKG,GAC7C,CAACH,EAAU,GAAKG,EAAcH,EAAU,GAAKG,IAGxC,CACLrD,YACAgD,YAAaA,EACbC,c,CAYJ,OARAjD,EAeF,SACE1J,EACAxiC,EACAivC,EACAC,EACAC,GAEA,MAAO1jB,EAAQ1qB,GAAOkuC,EAEhBpL,EAAarB,EAAUI,gBACvB/gC,EAAS7B,EAAS44B,YAKlB0D,EAAS7F,GAAAA,GAAAA,WACb50B,EAAOy6B,OAAO,GACdz6B,EAAOy6B,OAAO,GACdz6B,EAAOy6B,OAAO,IAEVrG,EAAkBQ,GAAAA,GAAAA,WACtB50B,EAAOo0B,gBAAgB,GACvBp0B,EAAOo0B,gBAAgB,GACvBp0B,EAAOo0B,gBAAgB,IAEnBwZ,EAAYhZ,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,MAAWgZ,EAAWnT,EAAQrG,GAQ9B,MAAMyZ,EAAejZ,GAAAA,GAAAA,SACfkZ,EAAmBlZ,GAAAA,GAAAA,SAEzBA,GAAAA,GAAAA,YAAiBiZ,EAAc3uC,EAAKk1B,EAAiBkZ,GACrD1Y,GAAAA,GAAAA,YAAiBkZ,EAAkBlkB,EAAQwK,GAAkBkZ,GAG7D1Y,GAAAA,GAAAA,YAAiBiZ,EAAcA,EAAcD,GAAYN,GACzD1Y,GAAAA,GAAAA,YAAiBkZ,EAAkBA,EAAkBF,EAAWN,GAIhE,MAAMS,EAAmB,CACTb,GAAsBvM,EAAyBkN,GAE3DX,GAAsBvM,EAAyBmN,IAK7CzD,EAAY2D,GAA0BD,EAAkB/L,GAE9D,OAAOqI,CACT,CAzEc4D,CACVtN,EACAxiC,EACAivC,EACAC,EACAC,GAGK,CACLjD,YACAgD,YAAaA,EACbC,cAEJ,CAxFkDY,CAC9Cd,EACAzM,EACAxiC,GAGIgwC,EAAY,CAChB/lB,OAAQilB,EACRhlB,OAAQilB,GAGVnD,GACExJ,GACCuL,GAAaC,GAAcgC,EAAWjC,IACvC7J,EACAgI,EAEJ,CCbA,SA/BA,SAAS+D,EACPt1C,EACAu1C,EAAY,GAEZ,GAAIr4C,MAAM0rB,QAAQ5oB,GAChB,OAAOA,EAAMmM,KAAKqpC,GAAMF,EAAYE,EAAGD,KAAYE,KAAK,MAE1D,GAAIz1C,SAAmD,KAAVA,EAC3C,MAAO,MAGT,IADAA,EAAQo2B,OAAOp2B,IACH,KACV,MAAO,GAAGA,IAEZ,MAAM01C,EACJ11C,GAAS,IACLu1C,EAAY,EACZv1C,GAAS,GACTu1C,EAAY,EACZv1C,GAAS,EACTu1C,EACAv1C,GAAS,GACTu1C,EAAY,EACZv1C,GAAS,IACTu1C,EAAY,EACZv1C,GAAS,KACTu1C,EAAY,EACZA,EAAY,EAClB,OAAOv1C,EAAM+jC,QAAQ2R,EACvB,ECdc,SAAUC,GACtBC,EACAxC,EACAyC,EAAmB,CAAC,GAKpB,OAHKA,EAAQC,eACXC,GAA2BH,EAASC,GAE/BA,EAAQC,cAAc1C,EAC/B,CAcA,MAAM2C,GAA6BA,CAACH,EAASC,EAAmB,CAAC,KAC/D,MAAM,QAAEG,EAAO,QAAEC,EAAO,QAAEC,GAAYN,OAKXzzC,IAAzB0zC,EAAQM,mBACiBh0C,IAAzB0zC,EAAQO,mBACiBj0C,IAAzB0zC,EAAQQ,eAERR,EAAQM,aAA2B,IAAZH,EAAgB,EAAIA,GAAW,EAAI,EAC1DH,EAAQO,aAA2B,IAAZH,EAAgB,EAAIA,GAAW,EAAI,EAC1DJ,EAAQQ,aAA2B,IAAZH,EAAgB,EAAIA,GAAW,EAAI,GAG5D,MAAM,aAAEC,EAAY,aAAEC,EAAY,aAAEC,GAAiBR,GAC/C,OAAEvmB,GAAWsmB,GACZU,EAASC,EAASC,GAAWlnB,EAuBpC,OArBAumB,EAAQC,cAAiB1C,IAEvB,MAAMqD,EAAKrD,EAAS,GAAKkD,EACzB,IAAII,EAASD,EAAKA,EAAKN,EACvB,GAAIO,EAAS,EACX,OAAO,EAGT,MAAMC,EAAKvD,EAAS,GAAKmD,EAEzB,GADAG,GAAUC,EAAKA,EAAKP,EAChBM,EAAS,EACX,OAAO,EAGT,MAAME,EAAKxD,EAAS,GAAKoD,EAIzB,OAHAE,GAAUE,EAAKA,EAAKP,EAGbK,GAAU,CAAC,EAGbb,CAAO,EC1EF,SAAUgB,GACtBC,GAEA,MAAOhmB,EAAQ1qB,EAAKH,EAAM8qB,GAAS+lB,EAKnC,MAAO,CAHuB,CAAC7wC,EAAK,GAAIG,EAAI,IACV,CAAC2qB,EAAM,GAAID,EAAO,IAGtD,CCLA,UACE,CAACh1B,GAAkBi7C,YAAcl9B,IAC/B,MAAM,8BAAEm9B,GAAkCn9B,EAC1C,IAAKm9B,EACH,OAEF,MAAM,mBAAEC,GAAuBD,EAC3BC,IACFp9B,EAAczC,aAAe6/B,EAAmB7/B,a,EAIpD,CAACtb,GAAkBo7C,oBACjBr9B,IAEA,MAAM,aACJzC,EAAY,oBACZ+/B,EACAC,yBAA0BA,EAAwB,UAClD3C,EAAS,8BACTuC,EACAK,kBAAmBA,EAAiB,sBACpCzO,EAAqB,QACrB0O,GACEz9B,EACJ,IAAKm9B,GAA+BO,sBAClC,cAGKP,EAA8BC,mBAErC,IAAIO,GAAkB,EAClBC,GAAkB,EAatB,GAPApG,GACEzI,EACAyO,EAAkBK,YAPHnO,EAAGvpC,YAClBw3C,IAAoBx3C,IAAUoX,EAC9BqgC,IAAoBz3C,IAAUm3C,CAAmB,GAOjDC,EAAyB7F,YAGtBiG,IAAoBC,EACvB,OAGF,IAAIE,EAAgBP,EAAyBQ,cAAcnD,GAC3D,GAAIkD,IAAkBR,EAAqB,CACzC,IAAIG,EAGF,OAFAK,EAAgBL,EAAQlgC,Y,MAIjBqgC,IAETE,EAAgB,MAElB99B,EAAczC,aAAeugC,EAC7BX,EAA8BC,mBAAqB,CACjD7/B,aAAcugC,EACf,GCvEL,IACE,CAAC77C,GAAkBi7C,YAAcl9B,IAC/B,MAAM,UACJ46B,EAAS,8BACTuC,EACAI,yBAA0BA,EAC1BC,kBAAmBA,EAAiB,aACpCjgC,GACEyC,GACE,UAAEg+B,GAAcb,EAEtB,IAAKa,GAAWC,YAAcrD,IAAcr9B,EAC1C,OAGF,MAAM,UAAEm6B,GAAc6F,GACdW,UAAWC,EAAY,cAAEC,EAAgB,GAAMJ,EACjDK,EAAWF,EAAe,EAAIC,EAC9BE,EAAe5G,EAAUplC,KAAI,CAACisC,EAAKC,KACvC,MAAOj6B,EAAK+tB,GAAOiM,EACnB,MAAO,CACL9uC,KAAK6iC,IAAI/tB,EAAKq2B,EAAU4D,GAAOH,GAC/B5uC,KAAK8U,IAAI+tB,EAAKsI,EAAU4D,GAAOH,GAChC,IAGGH,EAAYC,GAAgB,CAACrE,KAAWA,KAK9C0D,EAAkBt6C,SAJDwsC,EAAGvpC,YAClB+3C,EAAU,GAAKzuC,KAAK8U,IAAIpe,EAAO+3C,EAAU,IACzCA,EAAU,GAAKzuC,KAAK6iC,IAAInsC,EAAO+3C,EAAU,GAAG,GAEV,CAAExG,UAAW4G,IAEjDt+B,EAAcm9B,8BAA8Ba,UAAUE,UAAYA,CAAS,EAG7E,CAACj8C,GAAkBo7C,oBACjBr9B,IAEA,MAAM,8BAAEm9B,EAA6B,QAAEM,GAAYz9B,GAC9Cm9B,GAA+Ba,WAAWC,WAAcR,KAG7DN,EAA8Ba,UAAUE,UAAY,KAAI,GCjD5D,IACE,CAACj8C,GAAkBi7C,YAAcl9B,IAC/BA,EAAczC,aAAe,CAAC,GCkKlC,SAASkhC,GAAcC,EAAGC,GACxB,OAAOD,IAAMC,CACf,CAcA,SAASC,GAAKC,EAAQC,EAAWn6C,GAI/B,OAHc,IAAItB,MAAMsB,EAAS,GACfi3C,KAAKkD,GAETD,GAAQp8B,OAAO9d,EAC/B,CAEA,SAvKA,SACEo6C,EACAC,EACAtwB,EAA4B,CAAC,GAE7B,MAAMuwB,EAAUvwB,EAAQuwB,QAClBC,EAAaxwB,EAAQwwB,WACrBC,EAASzwB,EAAQywB,QAAUV,GAC3BW,EAAY1wB,EAAQ0wB,YAAa,EACjCC,EAAYn7C,EAAI86C,GAChBM,EA6FN,WACE,MAAMA,EASR,SAAiB36C,GACf,MAAM46C,EAAQ,GAERC,EAAc,SAAUX,GAC5B,OAAOA,EAAO1rB,MAAM,IAAI7gB,KAAI,SAAUmtC,GACpC,OAAO1uB,SAAS0uB,EAAG,IAAM,CAC3B,GACF,EAEA,IAAK,IAAIltC,EAAI,EAAGA,EAAI9C,KAAKwE,IAAI,EAAGtP,GAAS4N,GAAK,EAAG,CAC/C,MAAMssC,EAASD,GAAKrsC,EAAEmtC,SAAS,GAAI,IAAK/6C,GAExC46C,EAAM18C,KAAK28C,EAAYX,G,CAGzB,OAAOU,CACT,CAzBuBI,CAAQX,EAAKr6C,QAElC,OAAO26C,EAAa15C,QAAO,SAAUg6C,GACnC,MAAM/1C,EAyCZ,SAAwBymB,GACtB,IAAIzmB,EAAQ,EAEZ,IAAK,IAAI0I,EAAI,EAAGA,EAAI+d,EAAM3rB,OAAQ4N,GAAK,EACpB,IAAb+d,EAAM/d,KACR1I,GAAS,GAIb,OAAOA,CACT,CAnDoBg2C,CAAeD,GAE7B,OAAiB,IAAV/1C,IAA0B,IAAVA,GAAeu1C,EACxC,GACF,CArGqBU,GACfC,EAAQ,GACRC,EAAU,GACVC,EAAS,CAAC,EACVC,EAAS,CAAC,EAIhB,IAFAH,EAAMl9C,KAAK,CAAEs9C,YAAanB,IAEnBe,EAAMp7C,OAAS,GACpBy7C,EAAML,EAAMM,OAGd,MAAO,CACLL,UACAM,WA2GF,WACE,MAAMhwB,EAAQ,GAEd,IAAK,MAAM7X,KAAOynC,OACI53C,IAAhB43C,EAAOznC,IACT6X,EAAMV,QAAQswB,EAAOznC,IAIzB,OAAO6X,CACT,CArHcgwB,IAGd,SAASF,EAAMG,GACb,MAAMC,EAAUD,EAAIJ,YACdM,EAAWF,EAAIG,cAgBE,IAAhBT,EAdKO,MAiBd,SAAuB/nC,GACrBwnC,EAAOxnC,IAAO,CAChB,CAhBEkoC,CAAcH,GAkBhB,SAAgBA,GACd,MAAMI,EAAOC,EAAO38C,EAAK,CAACs8C,IAE1B,OAAOK,EAAO1B,EAAQ,CAACyB,EAAMvB,GAC/B,CApBMyB,CAAON,IAsBb,SAAuBA,GACrBR,EAAQn9C,KAAK29C,GACTvB,GAEFA,KAAWuB,EAEf,CA3BIO,CAAcP,GAqClB,SAAsBA,GACpB,IAAK,IAAIjuC,EAAI,EAAGA,EAAI+sC,EAAa36C,OAAQ4N,GAAK,EAAG,CAC/C,MAAMqtC,EAAON,EAAa/sC,GACpByuC,EAAWR,EAAQ/9B,MAAM,GAE/B,IAAK,IAAI1O,EAAI,EAAGA,EAAIysC,EAAQ77C,OAAQoP,GAAK,EACvCitC,EAASjtC,IAAM6rC,EAAK7rC,GAGtBgsC,EAAMl9C,KAAK,CACTs9C,YAAaa,EACbN,aAAcF,G,CAGpB,CAlDIS,CAAaT,IA4BjB,SAAwBC,GACtBP,EAAOO,GAAYA,EACfvB,GAEFA,KAAcuB,EAElB,CAhCIS,CAAeT,GAEnB,CAgDA,SAASv8C,EAAIs8C,GAEX,OAAOzB,KAAUyB,EACnB,CAEA,SAASK,EAAOM,EAAG7P,GACjB,IACE,OAAO6P,KAAK7P,E,CACZ,MAAOzG,GACP,M,CAEJ,CAyCF,EC5JA,IACE,CAAC5oC,GAAkBm/C,kBACjBphC,IAEA,MACEqhC,oBAAqBA,EACrB9D,yBAA0BA,EAAwB,8BAClDJ,EAA6B,oBAC7BG,EAAmB,aACnB//B,GACEyC,EAEJ,IAAKm9B,EAA8Ba,WAA8B,OAAjBzgC,EAC9C,OAGF,MAAM+jC,EAAgBD,EAAoBv5B,YAC1C,IAAKw5B,GAAe38C,OAClB,OAGF,QAA4B2D,IAAxBg1C,EACF,OAKF,MAAM5F,EAAY2J,EACfE,eACAjvC,KAAI,CAACkvC,EAAOjvC,IAAM,CACjB9C,KAAK8U,IAAIi9B,EAAM,MAAOF,EAAchvC,KAAKynB,GAAUA,EAAMxnB,MACzD9C,KAAK6iC,IAAIkP,EAAM,MAAOF,EAAchvC,KAAKynB,GAAUA,EAAMxnB,SAG7D,GAAImlC,EAAUv8B,MAAM4nB,GAAOA,EAAG,GAAK,GAAKA,EAAG,GAAK,QAE9C,OAGF,MAAM0e,EAAa,IAAIt/C,IAEjB48C,EAASA,CAACxsC,EAAGwB,EAAG+c,KACpB,GACEve,EAAImlC,EAAU,GAAG,IACjBnlC,EAAImlC,EAAU,GAAG,IACjB3jC,EAAI2jC,EAAU,GAAG,IACjB3jC,EAAI2jC,EAAU,GAAG,IACjB5mB,EAAI4mB,EAAU,GAAG,IACjB5mB,EAAI4mB,EAAU,GAAG,GAEjB,OAAQ,EAEV,MAAMtuC,EAAQm0C,EAAyBmE,QAAQ,CAACnvC,EAAGwB,EAAG+c,IACtD,GAAI2wB,EAAW/+C,IAAI0G,GAEjB,OAAQ,EAEV,MAAMu4C,EAASpE,EAAyBqE,WAAWx4C,GAC7Cy4C,EACJF,IAAWrE,GAAuBqE,IAAWpkC,EAAe,EAAI,EAKlE,OAJKskC,GACHtE,EAAyB37B,SAASxY,GAG7By4C,CAAI,EAGb,IAAIC,EAAe,EAEnB,MAAM7C,EAAUA,CAAC1sC,EAAGwB,EAAG+c,KACrB,MAAM1nB,EAAQm0C,EAAyBmE,QAAQ,CAACnvC,EAAGwB,EAAG+c,IAClD2wB,EAAW/+C,IAAI0G,KAInBi4C,EAAoBU,SAASxvC,EAAGwB,EAAG+c,EAAGwsB,GACtCmE,EAAW9+C,IAAIyG,GACf04C,IAAc,EAGhBR,EAAcp+C,SAAQ,CAAC8+C,EAAc54C,KAEH,IAA5B21C,KAAUiD,IACZC,GAAUlD,EAAQiD,EAAc,CAC9B/C,UACAG,WAAW,G,IAKjB,IAAI8C,EAAe,EACfC,EAAe,EAgBnBd,EAAoBn+C,SAdHwsC,EAAGtmC,QAAOkwC,WAAUnzC,MAAOi8C,MAC1C,MAAMj8C,EAAQo3C,EAAyBqE,WAAWx4C,GAClD,GAAIq4C,EAAW/+C,IAAI0G,GAAQ,CACzB+4C,IACA,MAAM9sB,EACJ+sB,IAAe7kC,EAAeA,EAAe+/B,EAC/C+D,EAAoBgB,cAAc/I,EAAUjkB,E,MACvC,GAAIlvB,IAAUm3C,EAAqB,CACxC4E,IACA,MAAM7sB,EAAW+sB,GAAc,EAC/Bf,EAAoBgB,cAAc/I,EAAUjkB,E,IAIV,CAAC,GAEnCysB,EAAeK,GAAiB,GAClCzlC,QAAQC,KACN,sBACAmlC,EACA,WACAI,EACA,iBACAC,EACA,cACAL,EAAeK,GAGnB,MAAMG,EAAY,IAAIngD,IAAIo7C,EAAyBttC,QAAU,IAC7DwxC,EAAWxwB,QAEX,IAAK,MAAM7nB,KAASk5C,EAAUj6C,OAAQ,CACpC,GAAIo5C,EAAW/+C,IAAI0G,GACjB,SAEF,IAAIm5C,GAAa,EACjB,MAAMC,EAAc,IAAIrgD,IAClBsgD,EAAkBA,CAAClwC,EAAGwB,EAAG+c,KAC7B,MAAM4xB,EAAarB,EAAoBK,QAAQ,CAACnvC,EAAGwB,EAAG+c,IACtD2wB,EAAW9+C,IAAI+/C,IAEZhL,EAAU,GAAG,KAAOA,EAAU,GAAG,IAC/BnlC,IAAMmlC,EAAU,GAAG,IAAMnlC,IAAMmlC,EAAU,GAAG,MAC9CA,EAAU,GAAG,KAAOA,EAAU,GAAG,IAC/B3jC,IAAM2jC,EAAU,GAAG,IAAM3jC,IAAM2jC,EAAU,GAAG,MAC9CA,EAAU,GAAG,KAAOA,EAAU,GAAG,IAC/B5mB,IAAM4mB,EAAU,GAAG,IAAM5mB,IAAM4mB,EAAU,GAAG,MAE/C6K,GAAa,GAEXA,GACFC,EAAY7/C,IAAI+/C,E,EAGdpJ,EAAW+H,EAAoBsB,MAAMv5C,GAC3C,GAA4B,IAAxB21C,KAAUzF,KAGd2I,GAAUlD,EAAQzF,EAAU,CAC1B2F,QAASwD,EACTrD,WAAW,IAETmD,GACF,IAAK,MAAMn5C,KAASo5C,EAClBnB,EAAoBuB,WAAWx5C,EAAOk0C,E,CAI5C5+B,GACEsB,EAAc9E,eACdmmC,EAAoBwB,mBACrB,GCnKL,IACE,CAAC5gD,GAAkB6gD,SAAU,SAC3B9iC,GAEA,MAAM,cAAE+iC,EAAa,8BAAE5F,EAA6B,eAAEv1C,GACpDoY,EACF,IAAK+iC,IAAkB5F,EACrB,OAIEn9B,EAAcy9B,gBACTz9B,EAAcy9B,eAEhBN,EAA8BC,mBAGrCp4C,KAAKg+C,qBAAqBp7C,EAAgBoY,GAC1C,MAAMy9B,EAAUz4C,KAAK4wB,KAAKhuB,EAAgBoY,GAM1C,OALIy9B,IACFA,EAAQwF,oBAAqB,EAC7BjjC,EAAcy9B,QAAUA,EACxBz4C,KAAKk+C,mBAAmBt7C,EAAgBoY,IAEnCy9B,CACT,EAEA,CAACx7C,GAAkBi7C,YAAcl9B,IAC/B,MAAM,YACJzE,EAAW,aACXgC,EAAY,8BACZnB,EAA6B,oBAC7BkhC,EAAmB,cACnByF,EAAa,QACbtF,GACEz9B,EACJ,QAAsB1X,IAAlBy6C,EACF,OASF,GAPItF,IACFA,EAAQ4D,oBAAoB8B,mBAC1BnjC,EAAcu9B,yBAEhBv9B,EAAcqhC,oBAAsB5D,EAAQ4D,qBAGzB,OAAjB9jC,IAA0B+/B,EAE5B,OAGF,MAAM8F,EAAcL,IAAgBxlC,GAC9B8E,EAAeyL,GACnBvS,EACAa,EACAmB,GAEF,IAAK6lC,IAAgB/gC,EACnB,OAGFyL,GACEvS,EACAa,EACAkhC,EAJmB8F,GAAe/gC,EAAa/P,KAAKywB,GAAY,GAALA,IAM5D,EAGH,CAAC9gC,GAAkBohD,eACjBrjC,IAEA,MACEu9B,yBAA0BA,EAC1B8D,oBAAqBA,EAAmB,oBACxC/D,EAAmB,QACnBG,GACEz9B,EACJ,QAA4B1X,IAAxBg1C,EACF,OAEF,MAAM//B,EAAekgC,GAASlgC,cAAgByC,EAAczC,aACtD+lC,EAAWjC,EACjB,IAAKiC,GAA6C,IAAjCA,EAASC,eAAe9/C,KACvC,OASF6/C,EAASpgD,SANQwsC,EAAGtmC,YACDm0C,EAAyBqE,WAAWx4C,KACpCk0C,GACfC,EAAyBqF,WAAWx5C,EAAOmU,E,GAGpB,CAAC,GAE5BmB,GACEsB,EAAc9E,eACdooC,EAAST,oBAEXS,EAASryB,OAAO,EAGlB,CAAChvB,GAAkBuhD,eACjBxjC,IAEA,MACEqhC,oBAAqBA,EACrB9D,yBAA0BA,GACxBv9B,EACJ,GAAgD,IAA5CqhC,EAAoBkC,eAAe9/C,KACrC,OAMF49C,EAAoBn+C,SAHHwsC,EAAGtmC,QAAOjD,YACzBo3C,EAAyBqF,WAAWx5C,EAAOjD,EAAM,IAInDuY,GACEsB,EAAc9E,eACdmmC,EAAoBwB,oBAEtBxB,EAAoBpwB,OAAO,GC7H/B,IACE,CAAChvB,GAAkBwhD,MAAQzjC,IACzB,MAAM,eACJf,EAAc,sBACd8vB,EACAwO,yBAA0BA,EAC1B8D,oBAAqBA,EACrB7D,kBAAmBA,EAAiB,cACpCkG,EAAa,UACb9I,GACE56B,EACE2jC,EACJD,EAAcE,sBAAsB5jC,IAChC,SAAE6jC,GAAaH,EAEfhU,EAAWiU,EACZvkC,IACC,MAAM,MAAEjZ,EAAK,MAAEiD,GAAUgW,GACrBH,EAAegM,SAAS9kB,IAAWw9C,EAAkBv6C,IAGzDy6C,EAAS7jC,EAAeZ,EAAK,EAE9BA,GAASykC,EAAS7jC,EAAeZ,GAEtCo4B,GACEzI,EACAyO,EAAkBK,WAClBnO,EACA6N,EAAyB7F,WAG3B2J,EAAoBz/B,SAASg5B,EAAU,GCjC3C,IACEkJ,sBAAqB,GACrBC,iBAAgB,GAChBC,MAAK,GACLC,cAAa,GACbxG,QAAO,GACPyG,WAAU,GACVL,SCNF,CACE,CAAC5hD,GAAkBkiD,mBAAoB,CACrCnkC,GACE7Z,QAAOiD,YAET,MAAM,eACJ6V,EAAc,aACd1B,EACA8jC,oBAAqBA,EAAmB,oBACxC/D,EACAC,yBAA0BA,GACxBv9B,EACE89B,EAAgBP,EAAyBqE,WAAWx4C,GAC1D,GAAqB,OAAjBmU,EAAuB,CACzB,MAAM6mC,EAAW/C,EAAoBO,WAAWx4C,GAIhD,iBAHiBd,IAAb87C,GACF/C,EAAoBuB,WAAWx5C,EAAOg7C,G,CAK1C,GAAItG,IAAkBvgC,GAAgB0B,EAAegM,SAAS9kB,GAC5D,OAGF,GAAI23C,IAAkBR,EAAqB,CACzC,QAA8Ch1C,IAA1C+4C,EAAoBO,WAAWx4C,GAIjC,OAFAm0C,EAAyBqF,WAAWx5C,EAAOmU,E,CAO/C,MAAM8mC,EAAkB/G,GAAuB//B,EAE/C8jC,EAAoBuB,WAAWx5C,EAAOi7C,EAAgB,GD9BxDnG,UETF,CACE,CAACj8C,GAAkBqiD,qBACjBtkC,IAEA,MACEw9B,kBAAmBA,EAAiB,8BACpCL,EAA6B,aAC7B5/B,GACEyC,EACJ,GAAKm9B,GAAkC5/B,EAGvC,OAAQnU,IACN,MAAM,UAAE40C,EAAS,wBAAEuG,GACjBpH,EAEIqH,EAAahH,EAAkBoE,WAAWx4C,IAG1C,UAAE80C,GAAcF,GAAauG,GAA2B,CAAC,EAC/D,OAAKrG,GAAWv5C,QAGTu5C,EAAU,IAAMsG,GAAcA,GAActG,EAAU,EAAE,CAChE,KC3BC,aAAEuG,IAAiB16C,GAAAA,UAEzB,SAAS26C,IAAgB,cAAE1kC,EAAa,SAAExU,IACxC,IAAIujC,EAAuB4V,EAAwBC,EAC/CvV,EACJ,GAAItvB,GAAqBC,GAAgB,CACvC,MAAM,SAAEC,EAAQ,mBAAE8D,GAAuB/D,EAEnC+tB,EAAqBlqB,GAAAA,MAAMC,UAAU7D,GACrC8nB,EAAclkB,GAAAA,MAAMC,UAAUC,GAEpC,IAAKgqB,IAAuBhG,EAC1B,SAGCiG,UAAWe,GAA0BhB,GACxC4W,EAAyB5W,EAAmBtd,gBAC5Cm0B,EAAkB7c,EAAYtX,gBAC9B4e,EAAatH,EAAYsH,U,KACpB,CACL,MAAM,oBAAEvuB,EAAmB,8BAAE1E,GAC3B4D,EAEF,IAAKc,EACH,OAGF,MAAMwtB,EAAiB9iC,EAASuV,oBAChC,IAAKutB,EACH,OAOFS,EADcvjC,EAASmY,SAASvH,GACFyI,MAAM8F,YAAYgB,eAChD,MAAM6iB,EAA6B1tB,EAAoB5c,IAAIoqC,GAG3DqW,EAD0B9gC,GAAAA,MAAM+M,SAAS4d,GACE3d,eAE3C,MAAMF,EAAQ9M,GAAAA,MAAM+M,SAAS0d,GAK7BsW,EAAkBj0B,EAAME,eACxBwe,EAAa,CAAC1e,EAAMk0B,QAASl0B,EAAMm0B,KAAM,E,CAG3C,MAAO,CACL/V,wBACA4V,yBACApH,yBAA0BkH,GAAaM,yBACrC1V,EACAsV,GAEFC,kBACApH,kBAAmBiH,GAAaM,yBAC9B1V,EACAuV,GAGN,C,OCxDA,MAAQH,aAAYA,IAAK/pC,GAAAA,UAyDX,MAAOsqC,GAkDnBz9C,WAAAA,CAAY2D,KAAS+5C,GALX,KAAAC,YAAc,GACd,KAAAC,MAAQ,GAER,KAAAC,oBAAsB,GA+BzB,KAAAxvB,KAAO,CACZhuB,EACAoY,KAEA,MAAMqlC,EAAkBrgD,KAAKsgD,WAAW19C,EAAgBoY,IAElD,8BAAEm9B,EAAgC,CAAC,EAAC,UAAEvC,GAAcyK,EAG1D,GAAI3qC,GAAAA,UAAAA,QAAgBkgC,EAAWuC,EAA8BvC,WAC3D,OAAO56B,EAAcy9B,QAErBN,EAA8BvC,UAAYA,EAG5C51C,KAAKmgD,MAAMjiD,SAASotC,GAASA,EAAK+U,KAElC,MAAM,yBACJ9H,EAAwB,oBACxB8D,EAAmB,oBACnB/D,GACE+H,EAQJ,OANA3mC,GACE2mC,EAAgBnqC,eAChBqiC,EAAyBsF,oBAItBvF,GAAwB+D,EAAoBkC,eAAe9/C,KAIzD4hD,EAAgB5H,SAAW4H,EAHzB,IAGwC,EAmE5C,KAAArC,mBAAqB,CAC1Bp7C,EACAoY,KAEA,MAAM,QAAEy9B,GAAYz9B,EAGpB,GAAIy9B,GAASwF,mBAEX,YADAxF,EAAQwF,oBAAqB,GAG/B,MAAMoC,EAAkBrgD,KAAKsgD,WAAW19C,EAAgBoY,GACxDhb,KAAKogD,oBAAoBliD,SAASotC,GAChCA,EAAKhe,KAAKttB,KAAMqgD,IACjB,EA9IDrgD,KAAKugD,kBAAoBr6C,EACzBlG,KAAKwgD,aAAeP,EACpBA,EAAa/hD,SAASuiD,IACpB,MAAM9U,EACmB,mBAAhB8U,EAA6BA,IAAgBA,EACtD,GAAK9U,EAGL,IAAK,MAAMl4B,KAAOk4B,EAAQ,CACxB,IAAKqU,GAAcU,eAAejtC,GAChC,MAAM,IAAI3Q,MAAM,eAAe2Q,yBAEjCusC,GAAcU,eAAejtC,GAAKzT,KAAM2rC,EAAOl4B,G,KAGnDzT,KAAK2gD,iBAAmB,CAAC/9C,EAAgBoY,IACvChb,KAAK4wB,KAAKhuB,EAAgBoY,GAE5B,IAAK,MAAMvH,KAAO5U,OAAOwE,KAAK28C,GAAcU,gBAC1C1gD,KAAK2gD,iBAAiBltC,GAAOzT,KAAKyT,EAEtC,CA2CU6sC,UAAAA,CACR19C,EACAoY,GAEA,MAAM,SAAExU,GAAa5D,EACfwX,EAAOslC,GAAgB,CAAE1kC,gBAAexU,aAE9C,IAAK4T,EAEH,OADA1C,QAAQC,KAAK,mCACNqD,EAAcy9B,QAGvB,GAAI19B,GAAqBC,GAAgB,CACvC,MAAM,mBAAE+D,EAAkB,SAAE9D,GAC1BD,EAEI+nB,EAAclkB,GAAAA,MAAMC,UAAUC,GAC9B3I,EAAeyI,GAAAA,MAAMC,UAAU7D,GAErC,IACGvF,GAAAA,UAAAA,QAAgBU,EAAai0B,WAAYtH,EAAYsH,cACrD30B,GAAAA,UAAAA,QAAgBU,EAAa/C,UAAW0vB,EAAY1vB,WAErD,MAAM,IAAIvQ,MACR,iG,CAKN,MAAM,kBACJ01C,EAAiB,yBACjBD,EAAwB,sBACxBxO,GACE3vB,EACEiiC,EACJrhC,EAAcy9B,SAAS4D,qBACvBoD,GAAamB,0BAA0BrI,GAInC8H,EAA4C,CAChD/H,sBAJuBt9B,EAAc+iC,cACM,SAAMz6C,KAI9C0X,EACHpY,iBACA41C,oBACAD,2BACAxO,wBACAsS,sBACA71C,WAEAkvC,YAAa,KACbgJ,cAAe1+C,MAKjB,OAFAA,KAAKkgD,YAAYhiD,SAASotC,GAASA,EAAK+U,KAEjCA,CACT,EAiFF,SAASQ,GAAc36C,EAAc46C,GACnC,MAAMC,EAAW,IAAI76C,IACrB,MAAO,CAACw4C,EAAepT,KACrBoT,EAAcqC,KAAc,GAC5BrC,EAAcqC,GAAUljD,KAAKytC,GAC7BoT,EAAcx4C,KAAU46C,EACpB,CAACl+C,EAAgBoY,KACf,MAAMqlC,EAAkB3B,EAAcoC,GACpCl+C,EACAoY,GAEF0jC,EAAcqC,GAAU7iD,SAASotC,GAC/BA,EAAKhe,KAAKoxB,EAAe2B,IAC1B,EAEFrlC,IACC0jC,EAAcqC,GAAU7iD,SAASotC,GAC/BA,EAAKhe,KAAKoxB,EAAe1jC,IAC1B,CACF,CAET,CAKA,SAASgmC,GAAmB96C,EAAc+6C,GAAgB,GACxD,MAAO,CAACvC,EAAepT,KACrB,GAAIoT,EAAcx4C,GAChB,MAAM,IAAIpD,MAAM,wBAAwBoD,oBAE1Cw4C,EAAcx4C,GAAQ+6C,EAClB3V,EACA,CAAC1oC,EAAgBoY,KAGfA,EAAcpY,eAAiBA,EACxB0oC,EAAKhe,KAAKoxB,EAAe1jC,GACjC,CAET,E,GArSqBglC,IAKLkB,aAAeV,GAEZW,GAAAT,eAAiB,CAChC,CAACzjD,GAAkBo7C,oBAAqBwI,GACtC5jD,GAAkBo7C,mBAClBp7C,GAAkBi7C,YAEpB,CAACj7C,GAAkBm/C,kBAAmByE,GACpC5jD,GAAkBm/C,iBAClBn/C,GAAkBi7C,YAEpB,CAACj7C,GAAkBwhD,MAAOoC,GAAc5jD,GAAkBwhD,MAC1D,CAACxhD,GAAkBi7C,YAAa2I,GAAc5jD,GAAkBi7C,YAChE,CAACj7C,GAAkBqiD,qBAAsB0B,GACvC/jD,GAAkBqiD,qBAEpB,CAACriD,GAAkBohD,eAAgBwC,GACjC5jD,GAAkBohD,cAClBphD,GAAkBi7C,YAEpB,CAACj7C,GAAkBuhD,eAAgBqC,GACjC5jD,GAAkBuhD,cAClBvhD,GAAkBi7C,YAEpB,CAACj7C,GAAkBkiD,mBAAoB6B,GACrC/jD,GAAkBkiD,mBAEpB,CAACliD,GAAkB6gD,SAAUkD,GAC3B/jD,GAAkB6gD,SAClB,GAIF0C,aAAc,MC5FlB,MAAQjL,sBAAqBA,IAAK7/B,GAAAA,UAC5B0mB,GAAU,KACVglB,GAAaA,CAACC,EAAWC,IAC7B72C,KAAKC,IAAI22C,GAAajlB,IAAW3xB,KAAKC,IAAI22C,EAAYC,GAAallB,GAE/DmlB,GAAmB,CACvB,CAACtkD,GAAkBi7C,YAAcl9B,IAC/B,MAAM,OACJ/P,EACAutC,kBAAmBA,EAAiB,SACpChyC,EAAQ,sBACRujC,EACAwO,yBAA0BA,GACxBv9B,EAGJ,IAAK/P,EACH,OAGF,MAAMwlB,EAASwM,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GACrChyB,EAAO/M,SAAS62B,IACdkI,GAAAA,GAAAA,IAASxM,EAAQA,EAAQsE,EAAM,IAEjCkI,GAAAA,GAAAA,MAAWxM,EAAQA,EAAQ,EAAIxlB,EAAOtL,QAEtCqb,EAAc06B,YAAcjlB,EAC5BzV,EAAc46B,UAAYL,GACxBxL,EACAtZ,GAEF,MAAMsB,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,MAKlBoM,EAAeC,GACpBzJ,GAAwBjmB,GAGpBmkB,EAAe1vC,EAASsB,cAAc05C,GACtCrL,EAAmB3vC,EAASsB,cAAc25C,GAE1CC,EAAsB,CACZnM,GAAsBxL,EAAuBmM,GAEzDX,GAAsBxL,EAAuBoM,IAIjDoC,EAAyB7F,UAAY2D,GACnCqL,EACAnJ,EAAyBlO,YAE3BmO,EAAkBK,WAAa8I,GAAqB,CAClDzL,eACAC,mBACA1lB,UACA,GAYN,SAASkxB,GAAqBC,GAK5B,MAAM,aAAE1L,EAAY,iBAAEC,EAAgB,OAAE1lB,GAAWmxB,EAE7CzK,EAAU1sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC5DiB,EAAU3sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC5DkB,EAAU5sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAE5DzlB,EAASjmB,KAAK6iC,IAAI6J,EAASC,EAASC,GAC1C,GACE+J,GAAWjK,EAASzmB,IACpB0wB,GAAWhK,EAAS1mB,IACpB0wB,GAAW/J,EAAS3mB,GACpB,CACA,MAAM8lB,EAAY,CAChB/lB,SACAC,SACAgkB,QAAShkB,EAASA,GAEpB,OAAQ6jB,GAAaC,GAAcgC,EAAWjC,E,CAGhD,MAMMyC,EAAUE,GANG,CACjBzmB,OAAQA,EACR0mB,UACAC,UACAC,aAGI,cAAEJ,GAAkBD,EAE1B,OAAOC,CACT,CAEA,MAAM4K,GAAkB,IAAI7B,GAC1B,SACAQ,GAAatB,WACbsB,GAAa3B,SACb0C,GACAf,GAAa1B,sBACb0B,GAAa/H,SAGTqJ,GAA4B,IAAI9B,GACpC,kBACAQ,GAAatB,WACbsB,GAAa3B,SACb0C,GACAf,GAAa1B,sBACb0B,GAAazB,iBACbyB,GAAatH,UACbsH,GAAa/H,QACb+H,GAAavB,eAST8C,GAAmBF,GAAgBlB,iBAQnCqB,GAAwBF,GAA0BnB,iBCnJxD,MAAQpL,sBAAqBA,IAAK7/B,GAAAA,UAE5BusC,GAAoB,CACxB,CAAChlD,GAAkBi7C,YAAcl9B,IAC/B,MAAM,OACJ/P,EACAutC,kBAAmBA,EAAiB,SACpChyC,EAAQ,sBACRujC,EACAwO,yBAA0BA,GACxBv9B,EAGJ,IAAK/P,EACH,OAGF,MAAMwlB,EAASwM,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GACrChyB,EAAO/M,SAAS62B,IACdkI,GAAAA,GAAAA,IAASxM,EAAQA,EAAQsE,EAAM,IAEjCkI,GAAAA,GAAAA,MAAWxM,EAAQA,EAAQ,EAAIxlB,EAAOtL,QAEtCqb,EAAc06B,YAAcjlB,EAC5BzV,EAAc46B,UAAYL,GACxBxL,EACAtZ,GAEF,MAAMsB,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,MAKlBoM,EAAeC,GACpBzJ,GAAwBjmB,GAGpBmkB,EAAe1vC,EAASsB,cAAc05C,GACtCrL,EAAmB3vC,EAASsB,cAAc25C,GAE1CS,EAAYhM,EAAa5oC,KAAI,CAAClG,EAAMhD,IACxCqG,KAAKC,IAAIyrC,EAAiB/xC,GAASgD,KAE/BspB,EAASjmB,KAAK6iC,OAAO4U,GAAa,EAExChM,EAAah4C,SAAQ,CAACkJ,EAAMhD,KAEtBgD,IADU+uC,EAAiB/xC,KAE7B8xC,EAAa9xC,GAASgD,EAAOspB,EAC7BylB,EAAiB/xC,GAASgD,EAAOspB,E,IAIrC,MAAMgxB,EAAsB,CACZnM,GAAsBxL,EAAuBmM,GAEzDX,GAAsBxL,EAAuBoM,IAIjDoC,EAAyB7F,UAAY2D,GACnCqL,EACAnJ,EAAyBlO,YAG3BmO,EAAkBK,WAAasJ,GAAqB,CAClDjM,eACAC,mBACA1lB,UACA,GAIA2xB,GAAkB,IAAIpC,GAC1B,SACAQ,GAAatB,WACbsB,GAAa3B,SACboD,GACAzB,GAAa1B,sBACb0B,GAAa/H,SAST4J,GAAmBD,GAAgBzB,iBAiBnC2B,GAf4B,IAAItC,GACpC,qBACGoC,GAAgB5B,aACnBA,GAAazB,iBACbyB,GAAatH,UACbsH,GAAavB,eAUyC0B,iBClHxD,MAMM4B,GANwB,IAAIvC,GAChC,cACAQ,GAAaxB,SACVoD,GAAgB5B,cAG2BG,iBCA1C6B,GANwB,IAAIxC,GAChC,cACAQ,GAAaxB,SACV6C,GAAgBrB,cAG2BG,iBCV1C8B,GAAkBC,OAAO,kBACzBC,GAAmB,IAAIxlD,IAAI,CAC/B,QACA,aACA,OACA,OACA,aACA,eACA,OACA,YACA,UACA,WACA,YACA,OACA,WACA,OACA,OACA,YACA,cACA,UACA,OACA,cACA,WACA,YACA,YACA,cACA,UACA,WACA,aACA,YACA,WACA,YACA,OACA,gBACA,OACA,WACA,UACA,aAGY,MAAOylD,GAInBrgD,WAAAA,CAAY2D,EAAc28C,GACxB7iD,KAAKkG,KAAOA,EAAO,GACnBlG,KAAK6iD,SAAWA,CAClB,CAEAC,OAAAA,GACE,OAAO9iD,KAAKkG,KAAO,EACrB,CAEA68C,wBAAAA,CAAyBxuB,GACvB,MAAM,SAAEsuB,GAAa7iD,KACrB,OAAI6iD,aAAoBD,GACf,GAAGruB,MAAUsuB,EAAS5hB,qBAExB1M,EAAQ,EACjB,CAEA0M,gBAAAA,GACE,OAAOjhC,KAAK+iD,yBAAyB/iD,KAAKkG,MAAQ,EACpD,CAEA,uBAAO88C,CAAiB98C,GACtB,MAAM+8C,EAAiBC,GAErBN,GACAH,IAEF,IAAIU,EAAcF,EAAe/jD,IAAIgH,GACrC,OAAIi9C,aAAuBP,GAClBO,EAELR,GAAiBjlD,IAAIwI,IACvBi9C,EAAc,IAAIP,GAAY18C,GAC9B+8C,EAAejkD,IAAIkH,EAAMi9C,GAClBA,QAHT,CAKF,CAEA,uBAAOC,CAAiBl9C,EAAcm9C,GACpC,GAAIA,aAAkBT,GAAa,CAOjC,OANuBM,GAErBN,GACAH,IAEazjD,IAAIkH,EAAMm9C,IAClB,C,CAET,OAAO,CACT,EAOF,SAASH,GACPI,EACAC,GAEA,IAAIN,EAAiBK,EAAQC,GAK7B,OAJMN,aAA0B3mC,MAC9B2mC,EAAiB,IAAI3mC,IACrBzd,OAAOS,eAAegkD,EAASC,EAAQ,CAAEpiD,MAAO8hD,KAE3CA,CACT,CAEA,MAAMO,GAAsBb,GAAiBn8B,SC3G/B,MAAOi9B,WAAyBb,GAK5CrgD,WAAAA,CACEmhD,EACAnyC,EACAC,EACAtL,EACA28C,GAEA3f,MACEh9B,GAAQu9C,GAAiBE,sBAfV,gBAgBfd,GAEF7iD,KAAK0jD,IAAMA,EACX1jD,KAAKuR,EAAIgmB,OAAOhmB,IAAM,EACtBvR,KAAKwR,EAAI+lB,OAAO/lB,IAAM,CACxB,CAEAyvB,gBAAAA,GACE,MAAM,IAAEyiB,EAAG,EAAEnyC,EAAC,EAAEC,GAAMxR,KACtB,IAAIu0B,EAAQ,QAAQmvB,MAIpB,OAHInyC,GAAK,GAAKC,GAAK,IAAMD,EAAI,GAAKC,EAAI,KACpC+iB,GAAS,IAAIhjB,KAAKC,KAEbxR,KAAK+iD,yBAAyBxuB,EACvC,CAEA,4BAAOovB,CAAsBC,GAC3B,MAAO,GAAGA,KAAU7+C,GAAAA,UAAAA,aAAuB0+C,KAC7C,EC/BF,MAAMI,GAA4B,CAChCC,YAAa,GACbC,SAAU,GACVC,QAAS,CACPzyC,EAAG,GACHC,EAAG,IAELyyC,WAAY,CACV1yC,EAAG,EACHC,EAAG,GAEL0yC,wBAAyB,gHAMrBC,GAAiC,CACrC5yC,EAAG,IACHC,EAAG,IAGC4yC,GAAa,gFAIbC,GAAY,0JAKZC,GAAe,2iBACfC,GAAiB,+HACjBC,GAAc,+MAEdC,GAAiD,CACrDC,MAAOC,GAAOd,GAAM,CAClBC,YAAa,uMAGbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPozC,cAAeD,GAAOd,GAAM,CAC1BC,YAAa,+NAGbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPqzC,cAAeF,GAAOd,GAAM,CAC1BC,YAAa,i0BAQbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPszC,UAAWH,GAAOd,GAAM,CACtBC,YAAa,gVAQbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPuzC,UAAWJ,GAAOd,GAAM,CACtBC,YAAa,oFACbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPwzC,cAAeL,GAAOd,GAAM,CAC1BC,YAAa,sNAGbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPyzC,YAAaN,GAAOd,GAAM,CACxBC,YAAa,w8EAgCbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGP0zC,oBAAqBP,GAAOd,GAAM,CAChCC,YAAa,usFAkCbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGP2zC,OAAQR,GAAOd,GAAM,CACnBC,YAAa,oOAGbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGP4zC,MAAOT,GAAOd,GAAM,CAClBC,YAAa,wXAKbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGP6zC,aAAcV,GAAOd,GAAM,CACzBC,YAAa,ySAIbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGP8zC,WAAYX,GAAOd,GAAM,CACvBC,YAAa,6oBASbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGP+zC,WAAYZ,GAAOd,GAAM,CACvBC,YAAa,+uBAWbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPg0C,OAAQb,GAAOd,GAAM,CACnBC,YAAa,sSAIbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPi0C,QAASd,GAAOd,GAAM,CACpBC,YAAa,4XAKbE,QAAS,CACPzyC,EAAG,IACHC,EAAG,OAGPk0C,IAAKf,GAAOd,GAAM,CAChBC,YAAa,ggBAObE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPm0C,OAAQhB,GAAOd,GAAM,CACnBC,YAAa,+dAObE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPo0C,YAAajB,GAAOd,GAAM,CACxBC,YAAa,gWAKbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPq0C,kBAAmBlB,GAAOd,GAAM,CAC9BC,YAAa,0LAGbE,QAAS,CACPzyC,EAAG,KACHC,EAAG,QAGPs0C,YAAanB,GAAOd,GAAM,CACxBC,YAAa,oLAGbE,QAAS,CACPzyC,EAAG,GACHC,EAAG,MAGPu0C,KAAMpB,GAAOd,GAAM,CACjBC,YAAa,srBAUbE,QAAS,CACPzyC,EAAG,IACHC,EAAG,OAQPw0C,gCAAiCrB,GAAOd,GAAM,CAC5CC,YAAa,GAAGQ,MAAgBF,KAChCJ,QAASG,KAGX8B,+BAAgCtB,GAAOd,GAAM,CAC3CC,YAAa,GAAGQ,MAAgBD,KAChCL,QAASG,KAGX+B,iCAAkCvB,GAAOd,GAAM,CAC7CC,YAAa,GAAGQ,MAAgBF,KAChCJ,QAASG,KAGXgC,gCAAiCxB,GAAOd,GAAM,CAC5CC,YAAa,GAAGQ,MAAgBD,KAChCL,QAASG,KAGXiC,iCAAkCzB,GAAOd,GAAM,CAC7CC,YAAa,GAAGS,MAAkBH,KAClCJ,QAASG,KAIXkC,iBAAkB1B,GAAOd,GAAM,CAC7BC,YAAa,GAAGS,MAAkBF,KAClCL,QAASG,KAGX,+BAAgCQ,GAAOd,GAAM,CAC3CC,YAAa,GAAGS,MAAkBF,KAClCL,QAASG,KAGX,gCAAiCQ,GAAOd,GAAM,CAC5CC,YAAa,GAAGS,MAAkBF,KAClCL,QAASG,KAGX,iCAAkCQ,GAAOd,GAAM,CAC7CC,YAAa,GAAGS,MAAkBH,KAClCJ,QAASG,KAGX,gCAAiCQ,GAAOd,GAAM,CAC5CC,YAAa,GAAGS,MAAkBH,KAClCJ,QAASG,KAGXmC,cAAe3B,GAAOd,GAAM,CAC1BC,YAAa,GAAGU,MAAeH,KAC/BL,QAASG,KAGX,4BAA6BQ,GAAOd,GAAM,CACxCC,YAAa,GAAGU,MAAeH,KAC/BL,QAASG,KAGX,8BAA+BQ,GAAOd,GAAM,CAC1CC,YAAa,GAAGU,MAAeJ,KAC/BJ,QAASG,KAGX,6BAA8BQ,GAAOd,GAAM,CACzCC,YAAa,GAAGU,MAAeH,KAC/BL,QAASG,MAQb,SAASQ,GACP4B,EACA//B,GAEA,OAAO3nB,OAAOqmB,OAAOrmB,OAAO2nD,OAAOD,GAAO//B,EAC5C,CAUA,SAASigC,GACP9lD,EACAmjD,EACAE,GAEAS,GAAU9jD,GAAYgkD,GAAOd,GAAM,CACjCC,cACAE,WAEJ,CAWA,MAAM0C,GAAiB7nD,OAAOwE,KAAKohD,IC1b7BkC,GAAQ9pD,GAAsBolC,YAC9B2kB,GAAOhqD,GAAUy9B,OAET,MAAOwsB,WAAuBpD,GAC1ClhD,WAAAA,CACEmhD,EACAnyC,EACAC,EACAtL,EACA28C,GAEA3f,MAAMwgB,EAAKnyC,EAAGC,EAAGtL,EAAM28C,EACzB,CAYA,uBAAOG,CACL98C,EACA4gD,GAAU,EACV/iC,GAEKA,IACHA,EAAQkd,GA/BG,QA+BwB,CAAC,EAAqB0lB,GAAOC,KAElE,MAAMG,EA+BV,SAAsB7gD,EAAc4gD,EAAkB/iC,GACpD,MAAM5X,EAAO26C,EAAU,UAAY,SACnC,MAAO,GAAG36C,KAAQjG,KAAQ6d,GAC5B,CAlCgBijC,CAAa9gD,EAAM4gD,EAAS/iC,GACxC,IAAIs/B,EAASngB,MAAM8f,iBAAiB+D,GACpC,IAAK1D,EAAQ,CACX,MAAMzkD,ED8YZ,SACEsH,GAEA,OAAOu+C,GAAUv+C,EACnB,CClZyB+gD,CAA8B/gD,GAC7CtH,IACFykD,EA+BR,SACEzkD,EACAsH,EACA4gD,EACA/iC,EACA8+B,GAEA,MAAM,EAAEtxC,EAAC,EAAEC,GAAM5S,EAAWqlD,WAC5B,OAAO,IAAI4C,GASb,SACEjoD,EACAkoD,EACAp9B,GAEA,OAAOw9B,IAAIC,gBAGb,SACEvoD,EACAkoD,EACAp9B,GAEA,MAAM09B,GAAaN,EAAUO,GAA2BC,IACtD1oD,EACA8qB,GAEF,OAAO,IAAI69B,KAAK,CAACH,GAAY,CAAEj7C,KAAM,iBACvC,CAb6Bq7C,CAAkB5oD,EAAYkoD,EAASp9B,GACpE,CAdI+9B,CAAiB7oD,EAAYkoD,EAAS,CAAE/iC,UACxCxS,EACAC,EACAtL,EACA28C,EAEJ,CA9CiB6E,CACP9oD,EACAmoD,EACAD,EACA/iC,EACAmf,MAAM8f,iBAAiB,YAEzB9f,MAAMkgB,iBAAiB2D,EAAK1D,G,CAGhC,OAAOA,CACT,EAOF,SAASsE,GAAOC,EAAkBC,GAChC,MAAMC,EAAOjpD,OAAOgpD,GACdE,EAAUlpD,OAAOmpD,UAAUC,eAAex7C,KAAKq7C,GACrD,OAAQF,EAAW,IAAIxpB,QAAQ,kBAAkB,CAACR,EAAOnqB,IAChDs0C,EAAQt0C,GAAOq0C,EAAKr0C,GAAO,GAAK,IAE3C,CA4CA,SAAS6zC,GACP1oD,EACA8qB,GAEA,MAAM,YAAEo6B,EAAW,SAAEC,EAAQ,QAAEC,GAAYplD,EAO3C,OAAO+oD,GANW,6FAEL5D,cAAqBA,0BAC5BC,EAAQzyC,KAAKyyC,EAAQxyC,cACrBsyC,gBAEmBp6B,EAC3B,CAEA,SAAS29B,GACPzoD,EACA8qB,GAEA,MAAM,YAAEo6B,EAAW,SAAEC,EAAQ,QAAEC,EAAO,wBAAEE,GACtCtlD,EAEIspD,EAAU,GAAKnE,EAOrB,OAAO4D,GANW,6FAELO,cAAoBA,mBAAyBA,KAAWA,iBAC5DhE,sDALKH,EAAWt5C,KAAK6iC,IAAI0W,EAAQzyC,EAAGyyC,EAAQxyC,EAAG,QAMDsyC,oBAE9Bp6B,EAC3B,CChHA,SAnBA,SACE/mB,EACAwlD,GAEA,IAAI9E,EAASwD,GAAe7D,iBAAiBmF,GAAY,GACpD9E,IACHA,EAAST,GAAYI,iBAAiBmF,IAGnC9E,IACH3rC,QAAQ0wC,IACN,UAAUD,2DAEZ9E,EAAST,GAAYI,iBAAiBmF,IAGxCE,GAAiB1lD,EAAS0gD,EAC5B,EClBMiF,GAAc,IAAI5B,MAAmBlD,ICVrC+E,GAAsB7F,OAAO,qBAMnC,SAAS8F,GACP7lD,EACA0gD,GAEAoF,GAAmB9lD,GAAS,GAAK0gD,EACjCqF,GAAkB/lD,EAAS0gD,EAC7B,CAEA,SAASqF,GACP/lD,EACA0gD,GAEA,MAAMsF,EAAUF,GAAmB9lD,GACnCgmD,EAAQ,GAAKA,EAAQ,GACrBA,EAAQ,GAAKtF,EACb1gD,EAAQ4xB,MAAM8uB,QACZA,aAAkBT,GACdS,EACAT,GAAYI,iBAAiB,SACjC/hB,kBACJ,CAEA,SAAS2nB,GAAmBjmD,GAC1B+lD,GAAkB/lD,EAAS8lD,GAAmB9lD,GAAS,GACzD,CAEA,SAASkmD,GAAkBlmD,GACzB+lD,GAAkB/lD,EAASigD,GAAYI,iBAAiB,QAC1D,CAMA,SAASyF,GACP9lD,GAEA,IAAI2K,EAAMm7C,GAAmBF,IACvBj7C,aAAew7C,UACnBx7C,EAAM,IAAIw7C,QACVjqD,OAAOS,eAAempD,GAAoBF,GAAqB,CAC7DpnD,MAAOmM,KAGX,IAAIq7C,EAAUr7C,EAAIpO,IAAIyD,GAKtB,OAJKgmD,IACHA,EAAU,CAAC,KAAM,MACjBr7C,EAAItO,IAAI2D,EAASgmD,IAEZA,CACT,CCQA,MAAMI,WAAkBv8B,GA4BtBjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbE,WAAY,CACVk8B,mBAAoBjH,GACpBkH,oBAAqBzG,GACrB0G,mBAAoB7G,GACpB8G,oBAAqB5G,GACrBhD,wBAAyByC,GACzBoH,wBAAyB9G,IAE3BnK,8BAA+B,CAC7Ba,UAAW,CACTE,UAAW,EAAE,KAAM,MAGvBnsB,gBAAiB,qBACjBC,eAAgB,qBAChBq8B,UAAW,GACX5Q,QAAS,CAEP6Q,SAAS,EACTvL,cAAe,CAAC,EAEhBwL,cAAe,IAEfC,oBAAqB,EAErBC,iBAAkB,EAElBC,WAAY,KAGdC,aAAc,EACdC,QAAS,CACP,CAAC3sD,GAAkBohD,eAAgB,CACjCwL,OAAQ5sD,GAAkBohD,cAC1ByL,SAAU,CACR,CACEr2C,IAAK,WAIX,CAACxW,GAAkBuhD,eAAgB,CACjCqL,OAAQ5sD,GAAkBuhD,cAC1BsL,SAAU,CACR,CACEr2C,IAAK,gBAQjByvB,MAAMzW,EAAWC,GAlEX,KAAAq9B,aAA6B,CACnCtR,QAAS,KACT91C,QAAS,KACTqnD,WAAY,EACZC,MAAO,KACPC,WAAY,CAACC,IAAKA,KAClBC,QAAQ,GA+DV,KAAAC,iBAAoBpnD,IAClBjD,KAAKsqD,eAAe,EAGtB,KAAAtiB,iBAAmB,KACjBhoC,KAAKsqD,eAAe,EAGtB,KAAAriB,kBAAqBhlC,IACnBjD,KAAKsqD,eAAe,EA+FtB,KAAAC,qBACEtnD,IAEA,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,EACd/mC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAwB5B,OAtBA5C,KAAKwqD,UAAYxqD,KAAKyqD,eAAe9nD,GACrC3C,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAGJ1I,KAAK+pD,aAAaK,QAAS,EAC3BpqD,KAAK+pD,aAAaC,WAAa19C,KAAKD,MAEpCs+C,GACEvvC,EACApb,KAAK4qD,WAAW9Z,qBAGlB9wC,KAAKutB,4BACH3qB,EACA5C,KAAK6qD,iBAAiBloD,GACtB1F,GAAkBo7C,qBAGb,CAAI,EAsBb,KAAAlV,kBAAqBlgC,IACnB,GAAIjD,KAAKktB,OAAStwB,GAAUy9B,OAAQ,CAElC,GADAr6B,KAAK8qD,aAAa7nD,IACbjD,KAAK4sB,cAAc6rB,QAAQ6Q,QAC9B,OAEF,MAAM,cAAEC,EAAa,oBAAEC,EAAmB,iBAAEC,GAC1CzpD,KAAK4sB,cAAc6rB,SACf,cAAElwC,EAAa,QAAE5F,GAAYM,EAAI1F,QACjC,OAAEqK,GAAWW,GAEb,QAAEkwC,EAAO,WAAEyR,EAAU,MAAED,EAAK,WAAED,EAAU,OAAEI,GAC9CpqD,KAAK+pD,aACDv/C,EAAQg6B,GAAAA,GAAAA,SAAc58B,EAAQsiD,GAC9B7d,EAAO//B,KAAKD,MAAQ29C,EAa1B,IAXEx/C,EAAQg/C,GACPnd,EAAOkd,GAAiB/+C,EAAQi/C,KAE7BQ,IACF5iD,OAAO6C,aAAa+/C,GACpBjqD,KAAK+pD,aAAaE,MAAQ,MAExBxR,IAAY2R,GACdpqD,KAAK+qD,cAAcpoD,KAGlB3C,KAAK+pD,aAAaE,MAAO,CAC5B,MAAMA,EAAQ5iD,OAAOkE,WAAWvL,KAAKgrD,gBAAiB,KACtDnsD,OAAOqmB,OAAOllB,KAAK+pD,aAAc,CAC/BC,WAAY19C,KAAKD,MACjB49C,QACAC,WAAYtiD,EACZjF,W,IAMR,KAAAqoD,gBAAkB,KACZhrD,KAAK+pD,aAAatR,UAGtBz4C,KAAK+pD,aAAaE,MAAQ,KAC1BjqD,KAAK+pD,aAAatR,QAAUz4C,KAAKutB,6BAC/B1qB,EAAAA,GAAAA,mBAAkB7C,KAAK+pD,aAAapnD,SACpC3C,KAAK6qD,iBAAiB7qD,KAAK+pD,aAAapnD,SACxC1F,GAAkB6gD,SACnB,EA8EK,KAAAmN,cAAiBhoD,IACvB,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,EAAO,cAAE4F,GAAkBohC,EAC7B/mC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B5C,KAAK8qD,aAAa7nD,GAElB,MAAM,oBAAE6tC,GAAwB9wC,KAAK4qD,WAErCD,GACEvvC,EACA01B,GAGF,MAAMtmC,EAAQg6B,GAAAA,GAAAA,SACZj8B,EAAcX,OACd5H,KAAK+pD,aAAaG,aAEd,WAAER,EAAU,iBAAED,GAAqBzpD,KAAK4sB,cAAc6rB,SAEzDz4C,KAAK+pD,aAAaK,QACnBpqD,KAAK+pD,aAAatR,SAClBnsC,KAAKD,MAAQrM,KAAK+pD,aAAaC,WAAaN,GAC5Cl/C,EAAQi/C,IAOVzpD,KAAK+pD,aAAatR,QAAUz4C,KAAKqtB,oBAC/BzqB,EACA5C,KAAK6qD,oBAEP7qD,KAAK+pD,aAAapnD,QAAUA,EAG5B3C,KAAK+pD,aAAaC,WAAa19C,KAAKD,MAAQq9C,EAC5C1pD,KAAK+pD,aAAaK,QAAS,EAC3BpqD,KAAK+pD,aAAaG,WAAa3hD,EAAcX,OAAM,EAiG7C,KAAAsjD,aAAgBjoD,IACtB,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,EACd/mC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCqY,EAAgBhb,KAAK6qD,iBAAiBloD,GAGvC3C,KAAK+pD,aAAatR,SAAYz4C,KAAK+pD,aAAaK,QACnDpqD,KAAKqtB,oBAAoBzqB,EAAgBoY,GAG3Chb,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB3C,KAAK8qD,aAAa7nD,GAElBjD,KAAKwqD,UAAY,KAEjBxqD,KAAKutB,4BACH3qB,EACAoY,EACA/d,GAAkBm/C,kBAGfp8C,KAAK+pD,aAAaK,QACrBpqD,KAAKorD,cAAczoD,E,EA0Cf,KAAA+nD,cAAiB/nD,IACvBA,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,aACN,EAMK,KAAAC,gBAAmBxoD,IACzBA,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,aACN,CAxgBH,CAcQZ,aAAAA,GACNtqD,KAAK4qD,gBAAatnD,EAClBtD,KAAK+qD,eACP,CAEAN,cAAAA,CAAe9nD,GACb,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAIhCyoD,EACJC,GAHkBtrD,KAAKuW,aAIzB,IAAK80C,EACH,MAAM,IAAIvoD,MACR,2EAIJ,MAAM,eAAEoT,EAAc,KAAE/J,EAAI,8BAAEiL,GAC5Bi0C,EAEF,GAAIl/C,IAASpP,GAA4ByY,QACvC,MAAM,IAAI1S,MAAM,uBAGlB,MAAMmX,EAAiBsxC,GAAiCr1C,IAElD,mBAAEiE,GACNqxC,GAAkCt1C,GAE9BiI,EACJhE,EAAmBpd,GAA4BwY,UAEpB/O,EAAS6U,GAEtC,GAAIN,GAAqBoD,GAAe,CACtC,MAAM,SAAElD,GAAad,EACnBhO,GAQF,MAAO,CACL8O,WACA8D,mBARavY,EAAS6gB,YAIW,GAAG7kB,IAKpCyX,iBACA7C,gC,CAEG,CACL,MAAM,oBAAE0E,GACNqC,EAEImrB,EAAiB9iC,EAASuV,oBAEhC,IAAKD,EAAoB5c,IAAIoqC,GAG3B,OASF,OAAItpC,KAAK4sB,cAAcI,eAAe/G,SAAS,eAC7CvO,QAAQC,KACN,qEAYG,CACLmE,sBACA7B,iBACA7C,gC,CAGN,CAyGQq0C,eAAAA,CAAgB9oD,EAAS+oD,GAC/B,MAAM9oD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfyF,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9BkO,EAAcvW,KAAKuW,YAEnB80C,EACJC,GAAuD/0C,GACzD,IAAK80C,EAIH,YAHA3zC,QAAQC,KACN,2EAKJ,MAAM,8BAAEP,EAA6B,eAAElB,GACrCm1C,EACI9yC,EACJozC,GAA6Cz1C,GAEzCmH,EAAeyL,GACnBvS,EACAa,EACAmB,GAGIu4B,EAAsB,CAACtqC,EAAS6U,IAgBtC,MAAO,CACLuwC,YAbkB,CAClB9qD,SAAU,CACR27B,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,oBAAqByD,EAASq4B,yBAC9BhC,kBAAmB,GACnBl8B,SAAUX,KAAKotB,cACf/P,gBAEFjD,KAAM,CAAC,GAKPsxC,eACAnzC,eACArC,iBACAkB,gCACAiG,eACAyzB,sBAEJ,CAMUga,YAAAA,CAAa7nD,GACrB,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,GACd,cAAEphC,GAAkBohC,EACpB+hB,EAAenjD,EAAcX,OACnC5H,KAAK4qD,WAAa5qD,KAAKyrD,gBAAgB9oD,EAAS+oD,GAEhD1rD,KAAK6rD,iBAAiBlpD,EAAS+oD,GAE/Bf,IACE9nD,EAAAA,GAAAA,mBAAkBF,GAASyY,gBAC3Bpb,KAAK4qD,WAAW9Z,oBAEpB,CA6CU+Z,gBAAAA,CAAiBloD,GACzB,MAAMmpD,EAAW9rD,KAAKwqD,WAAaxqD,KAAKyqD,eAAe9nD,IAEjD,aACJ4V,EAAY,eACZrC,EAAc,8BACdkB,EAA6B,YAC7Bw0C,GACE5rD,KAAK4qD,YAAc5qD,KAAKyrD,gBAAgB9oD,IACtC,KAAEyX,EAAI,SAAEtZ,EAAW,CAAC,GAAM8qD,GAAe,CAAC,GAC1C,gBAAEnvB,EAAe,OAAEqG,GAAWhiC,EAkBpC,MAjBsB,IACjBgrD,EACH7gD,OAAQmP,GAAMmjB,SAAStyB,OACvBsN,eACAwlC,cAAe/9C,KAAK4sB,cAAc6rB,QAAQ6Q,QACtCtpD,KAAK4sB,cAAc6rB,QAAQsF,cAC3B,KACJthB,kBACAlmB,YAAavW,KAAKuW,YAClBL,iBACAkB,gCACA0rB,SACAqV,8BACEn4C,KAAK4sB,cAAcurB,8BAErBM,QAASz4C,KAAK+pD,cAActR,QAGhC,CAEQoT,gBAAAA,CAAiBlpD,EAAS+oD,GAChC,MAAM9oD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,cAAEkF,GAAkBtB,EACpB6B,EAAS7B,EAAS44B,aAClB,UAAEiqB,GAAcrpD,KAAK4sB,cAErBkW,EAAS7F,GAAAA,GAAAA,WACb50B,EAAOy6B,OAAO,GACdz6B,EAAOy6B,OAAO,GACdz6B,EAAOy6B,OAAO,IAEVrG,EAAkBQ,GAAAA,GAAAA,WACtB50B,EAAOo0B,gBAAgB,GACvBp0B,EAAOo0B,gBAAgB,GACvBp0B,EAAOo0B,gBAAgB,IAEnBwZ,EAAYhZ,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,MAAWgZ,EAAWnT,EAAQrG,GAI9B,MAAMsvB,EAAoCjkD,EAAc,CACtD4jD,EAAa,GACbA,EAAa,KAGTM,EAAsB/uB,GAAAA,GAAAA,SACtBgvB,EAAmBhvB,GAAAA,GAAAA,SACnBivB,EAAoBjvB,GAAAA,GAAAA,SACpBkvB,EAAqBlvB,GAAAA,GAAAA,SAG3B,IAAK,IAAI1vB,EAAI,EAAGA,GAAK,EAAGA,IACtBy+C,EAAoBz+C,GAAKw+C,EAAoBx+C,GAAKu1B,EAAOv1B,GAAK87C,EAC9D4C,EAAiB1+C,GAAKw+C,EAAoBx+C,GAAKu1B,EAAOv1B,GAAK87C,EAC3D6C,EAAkB3+C,GAAKw+C,EAAoBx+C,GAAK0oC,EAAU1oC,GAAK87C,EAC/D8C,EAAmB5+C,GAAKw+C,EAAoBx+C,GAAK0oC,EAAU1oC,GAAK87C,EAGlE,MAAM,YAAEuC,GAAgB5rD,KAAK4qD,YACvB,KAAExwC,GAASwxC,OAEItoD,IAAjB8W,EAAKmjB,UACPnjB,EAAKmjB,QAAU,CAAC,GAGlBnjB,EAAKmjB,QAAQtyB,OAAS,CACpB+gD,EACAC,EACAC,EACAC,GAGF/xC,EAAK7W,aAAc,CACrB,CAyCOwnD,aAAAA,CAAcpoD,EAAU3C,KAAK+pD,aAAapnD,SAC/C,IAAKA,IAAY3C,KAAK+pD,aAAatR,QACjC,OAEF,MAAM71C,GAAiBC,EAAAA,GAAAA,mBAAkBF,GACzC3C,KAAKutB,4BACH3qB,EACA5C,KAAK6qD,iBAAiBloD,GACtB1F,GAAkBuhD,eAEpBx+C,KAAK+pD,aAAatR,QAAU,KAC5Bz4C,KAAK+pD,aAAaK,QAAS,CAC7B,CAKOgB,aAAAA,CAAczoD,EAAU3C,KAAK+pD,aAAapnD,SAC/C,IAAKA,EACH,OAEF,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEzC3C,KAAKutB,4BACH3qB,EACA5C,KAAK6qD,iBAAiBloD,GACtB1F,GAAkBohD,eAEpBr+C,KAAK+pD,aAAaK,QAAS,EAC3BpqD,KAAK+pD,aAAatR,QAAU,IAC9B,CAsCO2T,qBAAAA,GACL,QAAwB9oD,IAApBtD,KAAK4qD,WAA0B,CACjC,MAAM,KAAExwC,GAASpa,KAAK4qD,WAAWgB,YAEjCxxC,EAAK7W,aAAc,C,CAEvB,CAEAy4B,gBAAAA,CACEp5B,EACAktB,GAEA,IAAK9vB,KAAK4qD,WACR,OAGF,MAAM,SAAEpkD,GAAa5D,EAIrB,IAF4B5C,KAAK4qD,WAAW9Z,oBAEnB7qB,SAASzf,EAAS6U,IACzC,OAGF,MAAMuwC,EAAc5rD,KAAK4qD,WAAWgB,YAEpC,IAAqC,IAAjCA,EAAYxxC,KAAK7W,YAAsB,CACzC,MAAM,aAAEmoD,GAAiB1rD,KAAK4qD,YACxB,QAAEjoD,GAAY6D,EAIpBxG,KAAK6rD,iBAAiBlpD,EAAS+oD,E,CAGjC,MAAMW,EAAeT,EAAY9qD,SAC3BX,EAAgBksD,EAAaC,eAE7BlyC,EAAOwxC,EAAYxxC,MACnB,OAAEnP,GAAWmP,EAAKmjB,QAClBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAE7DnjB,EAASF,EAAkB,GAC3BxqB,EAAMwqB,EAAkB,GAExBtB,EAAS,CACbhmB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,GAClCkD,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAG9BmpB,EAASjmB,KAAKC,IAAIunB,EAAO,GAAKxnB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAEhEwc,EAAQ,OAAOsoC,EAAahvC,aAAaI,MAAM,EAAG,MAGxD,IAAKjX,EAASo1B,qBAEZ,YADAlkB,QAAQC,KAAK,uCAKf40C,GACEz8B,EACA3vB,EAHgB,IAKhBswB,EACAC,EACA,CACE3M,UAIJ,MAAM,aAAE4lC,GAAiB3pD,KAAK4sB,cAC9B,GAAI+8B,GAAgB,EAAG,CAErB4C,GACEz8B,EACA3vB,EAHiB,IAKjBswB,EACA,EACA,CACE1M,S,CAIR,EAGFglC,GAAUpoD,SAAW,QACrB,YCjvBc,SAAU6rD,GACtBj2C,EACA5V,GAEA,MAAM8f,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,OAGF,MAAMgsC,EAAgBhsC,EAAUyqB,eAEhC,IAAKrsC,OAAOwE,KAAKopD,GAAe9sD,OAC9B,OAGF,GAAIgB,GAAY8rD,EAAc9rD,GAC5B,MAAO,CAAC8rD,EAAc9rD,IAQxB,OAJgC9B,OAAO2nB,OAAOimC,GAAe7rD,QAC1Du5B,GAAiBA,aAAwB4uB,IAI9C,CAEA,MAAM2D,GAAcA,CAAChT,EAAGC,IACf7uC,KAAKE,UAAU0uC,KAAO5uC,KAAKE,UAAU2uC,GAOxC,SAAUgT,GACd3jB,EACAqB,EACAuiB,EACAC,GAEA,MAAMC,EAAoB,GAC1B,IAAK,IAAIv/C,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIwB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI+c,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMiJ,EAAQ,IAAI83B,GAClB93B,EAAM,GAAKA,EAAM,IAAW,EAAJxnB,EAAQ,GAAKq/C,EAAa,GAAM,EACxD73B,EAAM,GAAKA,EAAM,IAAW,EAAJhmB,EAAQ,GAAK69C,EAAa,GAAM,EACxD73B,EAAM,GAAKA,EAAM,IAAW,EAAJjJ,EAAQ,GAAK8gC,EAAa,GAAM,EACxDE,EAAkBjvD,KAAKk3B,E,CAI7B,MAAMg4B,EAAkBD,EAAkBx/C,KACvCzF,GAAU6N,GAAAA,UAAAA,sBAA8BszB,EAAWnhC,KAItD,OAFsBwuC,GAA0B0W,EAAiB1iB,EAGnE,CAKM,SAAU2iB,GACdjkB,EACAkkB,GAEA,MAAQ3iB,QAAS4iB,GAAwBnkB,EACnCkK,EAAalK,EAAmBtd,gBAGhC0hC,EAAiB,GACvB,IAAIC,EAAgB,EACpB,IAAK,IAAI7/C,EAAI,EAAGA,EAAI0/C,EAA2BttD,OAAQ4N,IAAK,CAC1D,MAAM,UAAEy7B,EAAS,QAAEsB,EAAO,WAAED,GAC1B4iB,EAA2B1/C,GAAG4R,OAE1BkuC,EACJJ,EAA2B1/C,GAAG4R,OAAOsM,gBAAgB9rB,OAGrD0tD,IAAepa,EAAWtzC,QAC1B+sD,GAAYpiB,EAAS4iB,KAErBE,EAAgB7/C,GAIlB,MAAM+/C,EAAkBtkB,EAAUzkB,eAAesC,aAAaC,UACxDymC,EAAQN,EAA2B1/C,GAAGggD,MACtCC,EAAQP,EAA2B1/C,GAAGigD,MAE5CL,EAAetvD,KAAK,CAClBmrC,YACAskB,kBACAC,QACAC,QACAljB,UACAD,aACAgjB,c,CAIJ,MAAO,CACLF,iBACAC,gBAEJ,CC8BA,SApHA,SACErkB,EACAkkB,EACAvjC,GAEA,MAAQsf,UAAWe,GAA0BhB,EACvCkK,EAAalK,EAAmBtd,iBAEhC,UAAEgiC,EAAS,UAAE/a,GAAchpB,EAC3BgkC,EAAchkC,GAASgkC,aAAe,EAG5C,GAAID,EACF,IAAK,IAAIlgD,EAAI,EAAGA,EAAI0lC,EAAWtzC,OAAQ4N,IACrC0lC,EAAW1lC,GAAK,EAIpB,MAAM,cAAE6/C,EAAa,eAAED,GAAmBH,GACxCjkB,EACAkkB,GAIF,IAAIU,EAAU5pD,EAAO+5B,EAErB,MAAM8vB,EAAmBA,CAACC,EAAYjB,EAAcC,KAMlD,MAOM,UAAE7jB,EAAS,WAAEqB,EAAU,MAAEkjB,EAAK,MAAEC,GAAUK,EAE1CC,EAAgBnB,GACpB3jB,EACAqB,EACAuiB,EACAC,GAIF9oD,EAAQ,EACR4pD,EAAW,EACX7vB,EAAQ,CAAEyvB,QAAOC,SAEjB,IAAIO,GAAc,EAUlB,OAPAvb,GAAqBxJ,GAAW,KAAM,IAxBdglB,EAAG7sD,YACzB4C,GAAgB,EACZ5C,GAAS28B,EAAMyvB,OAASpsD,GAAS28B,EAAM0vB,QACzCG,GAAsB,E,GAqBmCG,GAEzC,IAAhBJ,EACFK,EAAcJ,EAAW,EACD,GAAfD,IACTK,EAAcJ,IAAa5pD,GAEtBgqD,CAAW,EAIdE,EAAYA,CAACJ,EAAYvZ,KAC7B,MAAM,UAAEtL,EAAS,gBAAEskB,EAAe,MAAEC,EAAK,MAAEC,GAAUK,EAG/C1sD,EAAQmsD,EAFCtkB,EAAUklB,mBAAmB5Z,IAG5C,QAAInzC,GAASosD,GAASpsD,GAASqsD,E,EAyCjC,OAJAhb,GAAqBzI,GAAuB,KAAM,IAzBjCW,EAAGtmC,QAAOkwC,WAAUC,eACnC,IAAI4Z,EAAShB,EAAextD,OAAS,EACrC,IAAK,IAAI4N,EAAI,EAAGA,EAAI4/C,EAAextD,SAG/BwuD,EADEhB,EAAe5/C,GAAG8/C,aAAepa,EAAWtzC,OACrCsuD,EAAUd,EAAe5/C,GAAI+mC,GAG7BsZ,EACPT,EAAe5/C,GACf4/C,EAAeC,GAAe9iB,QAC9BiK,GAGC4Z,GAZoC5gD,KAkBvC4gD,IACFlb,EAAW7uC,GAAS,E,GAI0CsuC,GAElEh5B,GAAgCqvB,EAAmB9tB,UAE5C8tB,CACT,ECxIc,MAAOqlB,GAMnB7rD,WAAAA,GALQ,KAAA8rD,eAAiB,IAAIlxD,IACrB,KAAAmxD,YAAa,EAKnBtuD,KAAKuuD,cAAgBvuD,KAAKwuD,qBAAqB/hD,KAAKzM,KACtD,CAMUwuD,oBAAAA,CAAqBhsD,GAC7B,OAAQxC,KAAKsuD,aAAetuD,KAAKquD,eAAe3wD,IAAI8E,EACtD,CAEO9E,GAAAA,CAAI8E,GACT,OAAOxC,KAAKquD,eAAe3wD,IAAI8E,EACjC,CAMOisD,UAAAA,CACL1sD,GAAY,EACZ2sD,EACA9tD,GAEIZ,KAAKsuD,aAAevsD,IAGxB/B,KAAKsuD,WAAavsD,EAClB/B,KAAKquD,eAAenwD,SAASsE,IAC3B,MAAMnF,EAAawD,GAAc2B,GACjC,IAAKnF,EAEH,YADA2C,KAAKquD,eAAe3uD,OAAO8C,GAG7B,GAAInF,EAAW0E,YAAcA,EAC3B,OAEF,IAAKA,IAA+B,IAAlBnB,IAAS4B,GACzB,OAEFnF,EAAW0E,UAAYA,EACvB,MAAMmB,EAAc,IACfwrD,EACHrxD,eAEFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAahD,GAAOyhC,oBAAqBr7B,EAAY,IAEtE,CAEA,aAAWnB,GACT,OAAO/B,KAAKsuD,UACd,CAGOK,UAAAA,CAAWnsD,EAAa6Q,GAC7B,MAAMu7C,EAAO,IAAI5uD,KAAKquD,gBACtB,GAAoB,IAAhBO,EAAKjvD,OACP,OAAO,KAET,IAAK6C,EACH,OAAOosD,EAAmB,IAAdv7C,EAAkB,EAAIu7C,EAAKjvD,OAAS,GAElD,MAAMyE,EAAQwqD,EAAKnzB,QAAQj5B,GAC3B,OACa,IAAX4B,GACAA,EAAQiP,EAAY,GACpBjP,EAAQiP,GAAau7C,EAAKjvD,OAEnB,KAEFivD,EAAKxqD,EAAQiP,EACtB,CAMO1V,GAAAA,IAAO0wD,GACZA,EAAenwD,SAASiC,GACtBH,KAAKquD,eAAe1wD,IAAIwC,IAE5B,CAMO0uD,MAAAA,IAAUR,GACfA,EAAenwD,SAASiC,GACtBH,KAAKquD,eAAe3uD,OAAOS,IAE/B,CAKO8rB,KAAAA,GACLjsB,KAAKquD,eAAepiC,OACtB,EC7GF,MAAM6iC,WAAgBtiC,GAEpBjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,WAGvCqW,MAAMzW,EAAWC,EACnB,CAEAqiC,iBAAAA,CAAkB9rD,GAChBjD,KAAKirD,cAAchoD,EACrB,CAEA+rD,iBAAAA,CAAkB/rD,GAChBjD,KAAKirD,cAAchoD,EACrB,CAEAgoD,aAAAA,CAAchoD,GACZ,MAAM,QAAEN,EAAO,YAAE6F,GAAgBvF,EAAI1F,OAC/BqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCssD,EAAmBzmD,EAAYX,MAC/BQ,EAASzF,EAAe4D,SAAS44B,aACjC,WAAE/B,EAAU,SAAEvH,GAAaztB,EAE3B6mD,EAAgC,CACpCp5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,IAG3BE,EAAkC,CACtC9xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,IAGnCrsD,EAAe4D,SAASmrC,UAAU,CAChCtU,WAAY8xB,EACZr5B,SAAUo5B,IAEZtsD,EAAe4D,SAAS6X,QAC1B,EAGFywC,GAAQnuD,SAAW,MACnB,Y,gBC9CA,MAAMyuD,WAA4B5iC,GAKhCjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbyiC,uBAAwB,KAI5BnsB,MAAMzW,EAAWC,GAMnB,KAAA4iC,aAAe,CAAC9oD,EAAUkvC,EAAa6Z,EAAMj9B,KAC3C,MAAMk9B,EAAYhpD,EAASipD,qBACrB3sB,EAAS0sB,EAAUE,YACnBryB,EAAamyB,EAAUG,gBACvB75B,EAAW05B,EAAUI,cAErBle,EAA4B,CAAC,EAAG,EAAG,GACnCD,EAA8B,CAAC,EAAG,EAAG,GACrCoe,EAA0B,CAAC,EAAG,EAAG,GAEjCl9B,EAAYm9B,GAAAA,GAAAA,SAAc,IAAIvsC,aAAa,KACjDusC,GAAAA,GAAAA,UAAen9B,EAAWA,EAAW+iB,GACrCoa,GAAAA,GAAAA,OAAYn9B,EAAWA,EAAWL,EAAOi9B,GACzCO,GAAAA,GAAAA,UAAen9B,EAAWA,EAAW,EAClC+iB,EAAY,IACZA,EAAY,IACZA,EAAY,KAEfzY,GAAAA,GAAAA,cAAmByU,EAAa5b,EAAUnD,GAC1CsK,GAAAA,GAAAA,cAAmBwU,EAAepU,EAAY1K,GAE9Cm9B,GAAAA,GAAAA,SAAcn9B,GACdm9B,GAAAA,GAAAA,OAAYn9B,EAAWA,EAAWL,EAAOi9B,GACzCtyB,GAAAA,GAAAA,cAAmB4yB,EAAW/sB,EAAQnQ,GAEtCnsB,EAASmrC,UAAU,CACjB7b,SAAU4b,EACV5O,OAAQ+sB,EACRxyB,WAAYoU,GACZ,EAjCFzxC,KAAK+uD,kBAAoB/uD,KAAKirD,cAAcx+C,KAAKzM,MACjDA,KAAKgvD,kBAAoBhvD,KAAKirD,cAAcx+C,KAAKzM,KACnD,CAoCAirD,aAAAA,CAAchoD,GACZ,MAAM,QAAEN,EAAO,cAAE4F,EAAa,WAAED,GAAerF,EAAI1F,OAC7CwyD,EAAsBxnD,EAAcX,OACpCooD,EAAmB1nD,EAAWV,QAC9B,uBAAEynD,GAA2BrvD,KAAK4sB,cAClChqB,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EACfyF,EAAS7B,EAAS44B,YAClBvO,EAAQluB,EAAQstD,YAChB38B,EAAS3wB,EAAQutD,aAEjBC,EAAqB,CACzBJ,EAAoB,GAAKl/B,EACzBk/B,EAAoB,GAAKz8B,GAGrB88B,EAA6B,CACjCJ,EAAiB,GAAKn/B,EACtBm/B,EAAiB,GAAK18B,GAGlB7C,EAAuB,CAAS,GAARI,EAAsB,GAATyC,GAErCoiB,EAAclvC,EAASsB,cAAc2oB,GAGrC4/B,GAAS,EAAM5lD,KAAKC,IAFA,MAE6B,EACjD4lD,EAAK,CAACF,EAA2B,GAAI,EAAG,GACxCG,EAAK,CAACJ,EAAmB,GAAI,EAAG,GAEhCK,EAAOF,EAAG,IAAM,EAChBG,EAAOF,EAAG,IAAM,EAEhBG,EAAMF,EAAOH,EAAQ,EAAI5lD,KAAKuE,KAAKqhD,EAAQG,GAC3CG,EAAMF,EAAOJ,EAAQ,EAAI5lD,KAAKuE,KAAKqhD,EAAQI,GAE3CG,EAAoB,CAACN,EAAG,GAAI,EAAGI,GACrCG,GAAAA,GAAAA,UAAkBD,GAClB,MAAME,EAAoB,CAACP,EAAG,GAAI,EAAGI,GACrCE,GAAAA,GAAAA,UAAkBC,GAElB,MAAMrzB,EAAMozB,GAAAA,GAAAA,IAAYD,EAAKE,GAC7B,GAAIrmD,KAAKC,IAAI+yB,GAAO,KAAQ,CAC1B,MAAMszB,GACH,EACDtmD,KAAKumD,KAAKH,GAAAA,GAAAA,WAAmBpzB,GAAM,EAAK,IACxChzB,KAAKwmD,KAAKd,EAAmB,GAAKC,EAA2B,IAC7Df,EAEI6B,EAAQ7oD,EAAOy6B,OACfquB,EAAM9oD,EAAOo0B,gBACb20B,EAAuB,CAAC,EAAG,EAAG,GAC9BC,EAAyB,CAAC,EAAG,EAAG,GAEtCR,GAAAA,GAAAA,MAAcK,EAAOC,EAAKC,GAC1BP,GAAAA,GAAAA,UAAkBO,GAElBP,GAAAA,GAAAA,MAAcM,EAAKC,EAAQC,GAC3BR,GAAAA,GAAAA,UAAkBQ,GAClBR,GAAAA,GAAAA,UAAkBK,GAElBlxD,KAAKsvD,aAAa9oD,EAAUkvC,EAAa2b,EAAUN,GAEnD,MAAMO,GACHlB,EAA2B,GAAKD,EAAmB,IACpDd,EAEFrvD,KAAKsvD,aAAa9oD,EAAUkvC,EAAa0b,EAAQE,GAEjD9qD,EAAS6X,Q,CAEb,EAGF+wC,GAAoBzuD,SAAW,kBAC/B,YCtHA,MAAM4wD,WAAwB/kC,GAE5BjqB,WAAAA,CACEkqB,EAAY,CAAC,EACbC,EAAmB,CACjBG,0BAA2B,CAAC,QAAS,WAGvCqW,MAAMzW,EAAWC,GAwMnB,KAAA8kC,qCAAuC,CAACve,EAAY5I,KAClD,MAAMonB,EAAmBhnD,KAAK4qC,MAAMhL,EAAW,GAAK,GAE9CqnB,EAAcrnB,EAAW,GAAKA,EAAW,GAC/C,IAAIsnB,EACAC,EAEA3e,aAAsB1vB,cACxBouC,EAAgB,EAChBC,EAAwBruC,cACf0vB,aAAsBhJ,YAC/B0nB,EAAgB,EAChBC,EAAwB3nB,YACfgJ,aAAsB4e,aAC/BF,EAAgB,EAChBC,EAAwBC,aACf5e,aAAsB6e,aAC/BH,EAAgB,EAChBC,EAAwBE,YAG1B,MAEMC,EAAQ,IAAIH,EAFH3e,EAAW+e,OACPP,EAAmBC,EAAcC,EACQD,IAEtD,IAAEpkB,EAAG,IAAE/tB,GAAQvf,KAAKiyD,WAAWF,EAAOL,GAE5C,OAAOpkB,EAAM/tB,CAAG,CAlOlB,CAEAwvC,iBAAAA,CAAkB9rD,GAChBjD,KAAKgvD,kBAAkB/rD,EACzB,CAEA+rD,iBAAAA,CAAkB/rD,GAChB,MAAM,QAAEN,EAAO,YAAE6F,GAAgBvF,EAAI1F,OAC/BqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,EAEtC,IAAIqY,EACFsyC,EACAC,EACA0E,EACAC,EACAC,EACEC,GAAc,EAElB,MAAMC,EAAa9rD,EAAS+rD,gBAC5B,GAAI/rD,aAAoB24B,GAAAA,eAAgB,CAEtClkB,EADiBjb,KAAKuuB,YAAY/nB,GACd2nB,MAAM,aAAa,GACvCikC,EAA+BrtD,GAAAA,UAAAA,yBAC7BkW,EACAG,EAAgBC,MAEfkyC,QAAOC,SAAU8E,EAAWE,UAC/B,MAAMrzC,EAASN,GAAAA,MAAMC,UAAU7D,GAC/B,IAAKkE,EACH,MAAM,IAAIrc,MAAM,oBAAsBmY,GAExCi3C,EAAW/yC,EAAOre,SAAS2xD,SAC3BJ,EAAclzC,EAAOwlB,SAAW9lC,OAAOwE,KAAK8b,EAAOwlB,SAAShlC,OAAS,C,KAChE,KAAI2yD,EAAWE,SAOpB,MAAM,IAAI1vD,MAAM,gCAPc,CAC9BovD,EAAY1rD,EAAiB0rD,WAC1B3E,QAAOC,SAAU8E,EAAWE,UAC/B,MAAM,SAAEE,EAAW,CAAEC,QAAQ,IAAYnsD,EAAS8nB,kBAAoB,CAAC,EACvE+jC,EACEK,EAASC,aAAgDrvD,IAAtCovD,EAASE,mBAAmB9tB,K,EAUjDqtB,EAlEK,OAiEHD,EACSlyD,KAAK6yD,oBAAoB,CAClCC,kBAAmBtqD,EAAYZ,OAC/B2lD,QACAC,QACA0C,aAAcvtD,EAAQutD,aACtBmC,cACA7rD,WACAyU,aAGSjb,KAAK+yD,YAAY,CAC1BvsD,WACAssD,kBAAmBtqD,EAAYZ,OAC/BqT,WACAsyC,QACAC,UAIJhnD,EAASwsD,cAAc,CACrBR,SAAUL,IAGZ3rD,EAAS6X,SAEL7X,aAAoB24B,GAAAA,gBACtBizB,EAA6Bl0D,SAAS+0D,IAChCzsD,IAAaysD,GACfA,EAAG50C,Q,GAKX,CAEAw0C,mBAAAA,EAAoB,kBAClBC,EAAiB,MACjBvF,EAAK,MACLC,EAAK,aACL0C,EAAY,SACZ1pD,EAAQ,SACRyU,EAAQ,YACRo3C,IAEA,IAAIa,EAhHmB,EAmHrBA,EADEb,EACW,EAAInC,EAGflwD,KAAKmzD,+BAA+B3sD,EAAUyU,IAtH3B,EAgIvB,OAHAuyC,GAHesF,EAAkB,GACRI,EAKlB,CAAE3F,QAAOC,MAFhBA,EAAQ6E,EAAc5nD,KAAK6iC,IAAIkgB,EAAO,IAAOA,EAG/C,CAEAuF,WAAAA,EAAY,SAAEvsD,EAAQ,kBAAEssD,EAAiB,SAAE73C,EAAQ,MAAEsyC,EAAK,MAAEC,IAC1D,MAAM0F,EACJlzD,KAAKmzD,+BAA+B3sD,EAAUyU,IArIzB,EAwIjBm4C,EAAUN,EAAkB,GAAKI,EACjCG,EAAUP,EAAkB,GAAKI,EAEvC,IAAI,YAAEI,EAAW,aAAEC,GAAiBxuD,GAAAA,UAAAA,YAAAA,cAClCwoD,EACAC,GASF,OANA8F,GAAeF,EACfG,GAAgBF,EAEhBC,EAAc7oD,KAAK6iC,IAAIgmB,EAAa,GAG7BvuD,GAAAA,UAAAA,YAAAA,eAAqCuuD,EAAaC,EAC3D,CAEAJ,8BAAAA,CAA+B3sD,EAAUyU,GACvC,IAAIu4C,EAEJ,GAAIv4C,EAAU,CACZ,MAAM8nB,EAAclkB,GAAAA,MAAMC,UAAU7D,IAC9B,WAAEovB,GAAetH,EACjBkQ,EAAalQ,EAAYtX,gBACzBgoC,EAAyBzzD,KAAKwxD,qCAClCve,EACA5I,GAEIqpB,EAAa3wB,GAAajiC,UAAU4yD,WACpCC,EAAuBD,EAAa,GAAKA,EAAa5e,IAK5D0e,EAAoB/oD,KAAK8U,IACvBk0C,EACAE,E,MAGFH,EAAoBxzD,KAAK4zD,kCAAkCptD,GAG7D,MAAMqtD,EAAQL,EAjLkB,KAmLhC,IAAIN,EApLmB,EAyLvB,OAHIW,EAAQ,IACVX,EAAazoD,KAAKqpD,MAAMD,IAEnBX,CACT,CAEAU,iCAAAA,CAAkCptD,GAChC,MAAM,UAAEwiC,GAAcxiC,EAAS8nB,eACzB+b,EAAarB,EAAUI,gBAE7B,GAAIJ,EAAU+qB,SACZ,OAAO/qB,EAAU+qB,WAEnB,IAAI9gB,EAYAnV,EAJJ,GALEmV,EADEjK,EAAUvd,cACCud,EAAUvd,gBAEVud,EAAUzkB,eAAesC,aAGlB,IAAlBwjB,EAAW,GACb,OAAOrqC,KAAKwxD,qCAAqCve,EAAY5I,GAI/D,GAAI4I,EAAW8gB,SACbj2B,EAAQmV,EAAW8gB,eACd,CACL,MAAM,IAAEx0C,EAAG,IAAE+tB,GAAQttC,KAAKiyD,WAAWhf,EAAYA,EAAWtzC,QAC5Dm+B,EAAQ,CAACve,EAAK+tB,E,CAGhB,OAAOxP,EAAM,GAAKA,EAAM,EAC1B,CAgCQm0B,UAAAA,CAAWF,EAAkCL,GACnD,IAAInyC,EAAMu1B,IACNxH,GAAOwH,IAEX,IAAK,IAAIvnC,EAAI,EAAGA,EAAImkD,EAAankD,IAAK,CACpC,MAAMymD,EAAQjC,EAAMxkD,GAEhBymD,EAAQz0C,IACVA,EAAMy0C,GAGJA,EAAQ1mB,IACVA,EAAM0mB,E,CAGV,MAAO,CAAE1mB,MAAK/tB,MAChB,EAGFgyC,GAAgB5wD,SAAW,cAC3B,YC/QA,MAAMszD,WAAwBznC,GAG5BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbsnC,QAAQ,EACRC,qBAAqB,EACrBhjB,MAAM,KAIVjO,MAAMzW,EAAWC,GACjB1sB,KAAK0S,OAAS,CAChB,CAEAs8C,iBAAAA,CAAkB/rD,GAChBjD,KAAKirD,cAAchoD,EACrB,CACA8rD,iBAAAA,CAAkB9rD,GAChBjD,KAAKirD,cAAchoD,EACrB,CAEAgoD,aAAAA,CAAchoD,GACZ,MAAM,YAAEuF,EAAW,WAAET,EAAU,kBAAEC,GAAsB/E,EAAI1F,QACrD,SAAEiJ,IAAaqa,EAAAA,GAAAA,wBAAuB9Y,EAAYC,GAElDimB,EAAWjuB,KAAKuuB,YAAY/nB,IAC5B,oBAAE2tD,EAAmB,OAAED,EAAM,KAAE/iB,GAASnxC,KAAK4sB,cAE7CwnC,EAAc5rD,EAAYZ,OAAO,GACvC,IAAIqT,EACAzU,aAAoB24B,GAAAA,iBACtBlkB,EAAWgT,EAASE,MAAM,aAAa,IAGzC,MAAMkmC,EAAiBr0D,KAAKs0D,kBAAkB9tD,GACxCkM,EAAS0hD,EAAcp0D,KAAK0S,OAElC,GAAK2hD,EAIL,GAAI5pD,KAAKC,IAAIgI,IAAW2hD,EAAgB,CACtC,MAAME,EAAqB9pD,KAAKqpD,MAAMphD,EAAS2hD,GAE/CtjB,GAAOvqC,EAAU,CACfgE,MAAO0pD,GAAUK,EAAqBA,EACtCt5C,WACAi2B,gBAAiBijB,EACjBhjB,KAAMA,IAGRnxC,KAAK0S,OAASA,EAAS2hD,C,MAEvBr0D,KAAK0S,OAASA,CAElB,CAEA4hD,iBAAAA,CAAkB9tD,GAChB,MAAM,QAAE7D,GAAY6D,EACd0rC,EAAiB1rC,EAASguD,oBAGhC,OAAO/pD,KAAK6iC,IAAI,EAAG3qC,EAAQ8xD,aAAehqD,KAAK6iC,IAAI4E,EAAgB,GACrE,EAGF+hB,GAAgBtzD,SAAW,cAC3B,YCzBc,SAAU+zD,GAAkBC,EAAaC,GAErD,OADiC,IAApBD,EAAM,GAAGh1D,OA9CxB,SAA6Bg1D,EAAeC,GAC1C,MAAOj9B,EAAIC,GAAM+8B,GACVE,EAAIC,GAAMF,EAEXG,EAAK93B,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAerF,EAAID,GACjCq9B,EAAK/3B,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAe43B,EAAIC,GAOjCv7B,EALM0D,GAAAA,GAAAA,IAAS83B,EAAIC,IAER/3B,GAAAA,GAAAA,OAAY83B,GACZ93B,GAAAA,GAAAA,OAAY+3B,IAM7B,OAAiB,IAFFvqD,KAAKumD,KAAKz3B,GAED9uB,KAAK+nB,EAC/B,CA+BMyiC,CAAoBN,EAAiBC,GA1B3C,SAA6BD,EAAeC,GAC1C,MAAOj9B,EAAIC,GAAM+8B,GACVE,EAAIC,GAAMF,EAEXG,EAAKvwB,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAe5M,EAAID,GACjCq9B,EAAKxwB,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAeqwB,EAAIC,GAMjCv7B,EAJMiL,GAAAA,GAAAA,IAASuwB,EAAIC,IACRxwB,GAAAA,GAAAA,OAAYuwB,GACZvwB,GAAAA,GAAAA,OAAYwwB,IAG7B,OAAOvqD,KAAKumD,KAAKz3B,IAAQ,IAAM9uB,KAAK+nB,GACtC,CAcM0iC,CAAoBP,EAAiBC,EAC3C,CC9CA,MAAMO,WAAyB3oC,GAK7BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,WAGvCqW,MAAMzW,EAAWC,GAEjB1sB,KAAK+uD,kBAAoB/uD,KAAKirD,cAAcx+C,KAAKzM,MACjDA,KAAKgvD,kBAAoBhvD,KAAKirD,cAAcx+C,KAAKzM,KACnD,CAEAirD,aAAAA,CAAchoD,GACZ,MAAM,QAAEN,EAAO,cAAE4F,EAAa,YAAEN,GAAgBhF,EAAI1F,OAC9C63D,EAAoB7sD,EAAcV,MAClCwtD,EAAkBptD,EAAYJ,MAC9BjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EACfyF,EAAS7B,EAAS44B,YAIlBssB,EAA6B,CAAS,GAH9B/oD,EAAQstD,YAGoC,GAF3CttD,EAAQutD,cAGjBxa,EAAclvC,EAASsB,cAAc4jD,GAE3C,IAAIp5B,EAAQoiC,GACV,CAACW,EAAiB3f,GAClB,CAACA,EAAa0f,IAGhB,MAAM,gBAAE34B,EAAe,OAAEqG,GAAWz6B,EAE9B0sD,EAAK93B,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAeyY,EAAa2f,GAC1CL,EAAK/3B,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAeyY,EAAa0f,GAC1CE,EAAQr4B,GAAAA,GAAAA,MAAWA,GAAAA,GAAAA,SAAe83B,EAAIC,GAK5C,GAJI/3B,GAAAA,GAAAA,IAASR,EAAiB64B,GAAS,IACrChjC,GAASA,IAGPiF,OAAOxD,MAAMzB,GAAjB,CAIA,GAAI9rB,aAAoBgoB,GAAAA,mBAAoB,CAC1C,MAAM+mC,EAAYjjC,EAAQ7nB,KAAK+nB,GAAM,IAC/BgjC,EAAS1F,GAAAA,GAAAA,SAAc,IAAIvsC,aAAa,KAC9CusC,GAAAA,GAAAA,OAAY0F,EAAQA,EAAQD,EAAU94B,GACtC,MAAMg5B,EAAgBx4B,GAAAA,GAAAA,cAAmBA,GAAAA,GAAAA,SAAe6F,EAAQ0yB,GAChEhvD,EAASmrC,UAAU,CAAE7O,OAAQ2yB,G,KACxB,CACL,MAAM,SAAEC,GAAclvD,EAAkC+rD,gBACxD/rD,EAASwsD,cAAc,CAAE0C,SAAUA,EAAWpjC,G,CAGhD9rB,EAAS6X,Q,CACX,EAGF82C,GAAiBx0D,SAAW,eAC5B,YCrEA,MAAMg1D,WAAkCnpC,GAKtCjqB,WAAAA,CACEkqB,EAAY,CAAC,EACbC,EAAmB,CACjBG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbsnC,QAAQ,EACRC,qBAAqB,EACrBhjB,MAAM,EACNF,aAAa,KAIjB/N,MAAMzW,EAAWC,EACnB,CAEAkpC,kBAAAA,CAAmB3yD,GACjB,MAAM,MAAEsQ,EAAK,QAAE5Q,GAAYM,EAAI1F,QACzB,UAAE8V,GAAcE,GAChB,OAAE2gD,GAAWl0D,KAAK4sB,eAClB,SAAEpmB,IAAa3D,EAAAA,GAAAA,mBAAkBF,GACjC6H,EAAQ6I,GAAa6gD,GAAU,EAAI,GAGnCj5C,EADWjb,KAAKuuB,YAAY/nB,GACR2nB,MAAM,aAAa,GAE7C4iB,GAAOvqC,EAAU,CACfgE,QACA0mC,gBAAiBlxC,KAAK4sB,cAAcunC,oBACpChjB,KAAMnxC,KAAK4sB,cAAcukB,KACzBl2B,WACAg2B,YAAajxC,KAAK4sB,cAAcqkB,aAEpC,EAGF0kB,GAA0Bh1D,SAAW,wBACrC,YCvCA,MAAMk1D,WAAiBrpC,GAOrBjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CAEbkpC,cAAc,EACdC,aAAc,GACdC,aAAc,GACdC,aAAa,EACbC,KAAK,EACLhC,QAAQ,KAIZhxB,MAAMzW,EAAWC,GAWnB,KAAA69B,qBAAwBtnD,IACtB,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,EAAO,cAAE4F,GAAkBohC,EAC7B9G,EAAWt6B,EAAcV,MAGzBQ,GAFiBxF,EAAAA,GAAAA,mBAAkBF,GAEX6D,SAAS44B,aACjC,WAAE/B,GAAeh1B,EAEvBrI,KAAKm2D,qBAAuBtzB,EAI5B,IAAIuzB,EAASn5B,GAAAA,GAAAA,WACXI,EAAW,GAAKwF,EAAS,GACzBxF,EAAW,GAAKwF,EAAS,GACzBxF,EAAW,GAAKwF,EAAS,IAY3B,OATAuzB,EAASn5B,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAem5B,GAEvCp2D,KAAKo2D,OAASA,GAOP,CAAK,EAGd,KAAAC,sBAAyBpzD,IACvB,IAAKjD,KAAK4sB,cAAcqpC,YACtB,OAAOj2D,KAAKuqD,qBAAqBtnD,E,EAwDrC,KAAAqzD,wBAA0B,CACxBrzD,EACAuD,EACA6B,EACAkuD,GAAQ,KAER,MAAM,QAAE5zD,EAAO,YAAE6F,GAAgBvF,EAAI1F,OAC/BmV,EAAS6jD,EACVtzD,EAAsC1F,OAAO4T,cAAcvJ,OAC5DY,EAAYZ,OAAO,GAEjBnJ,EAAO,CAACkE,EAAQstD,YAAattD,EAAQutD,eACrC,cAAEsG,EAAa,WAAEn5B,EAAU,SAAEvH,GAAaztB,EAG1CyjB,EAAIpZ,GADQ,EAAIjU,EAAK,KACKuB,KAAK4sB,cAAcsnC,QAAU,EAAI,GAE3DuC,GAAsB,EAAM3qC,GAAK0qC,EAEvC,IAAIE,EAAkBr5B,EAClBs5B,EAAgB7gC,EAKpB,IAAK91B,KAAK4sB,cAAckpC,aAAc,CAGpC,MAAMc,EAAyB35B,GAAAA,GAAAA,SAC7BI,EACAr9B,KAAKm2D,sBAGPQ,EAAgB15B,GAAAA,GAAAA,YACdA,GAAAA,GAAAA,SACAnH,EACA91B,KAAKo2D,QACJQ,EAAyB9qC,GAG5B4qC,EAAkBz5B,GAAAA,GAAAA,YAChBA,GAAAA,GAAAA,SACAI,EACAr9B,KAAKo2D,QACJQ,EAAyB9qC,E,CAO9B,MAAMkd,EAAYxiC,EAAS8nB,eAC3B,IAAIgc,EAAU,CAAC,EAAG,EAAG,GACjBtB,IACFsB,EAAUtB,EAAUsB,SAGtB,MAAM,aAAEyrB,EAAY,aAAEC,GAAiBh2D,KAAK4sB,cAEtCiqC,EAAIl0D,EAAQutD,aAAe5lB,EAAQ,GAAK,GACxC8D,EAAQyoB,EAAIJ,EAElB,IAAIK,EAAsBL,EACtBM,GAAoB,EAEpB/tB,IACEoF,EAAQ2nB,GACVe,EAAsBD,EAAId,EAC1BgB,GAAoB,GACX3oB,GAAS4nB,IAClBc,EAAsBD,EAAIb,EAC1Be,GAAoB,IAIxBvwD,EAASmrC,UAAU,CACjB6kB,cAAeM,EACfz5B,WAAY05B,EAAoB15B,EAAaq5B,EAC7C5gC,SAAUihC,EAAoBjhC,EAAW6gC,GACzC,EAGJ,KAAAK,2BAA6B,CAC3B/zD,EACAuD,EACA6B,EACAkuD,GAAQ,KAER,MAAM,QAAE5zD,EAAO,YAAE6F,GAAgBvF,EAAI1F,OAC/BmV,EAAS6jD,EACVtzD,EAAsC1F,OAAO4T,cAAcvJ,OAC5DY,EAAYZ,OAAO,GAEjBnJ,EAAO,CAACkE,EAAQstD,YAAattD,EAAQutD,eACrC,SAAEp6B,EAAQ,WAAEuH,EAAU,gBAAEZ,GAAoBp0B,EAE5CqvB,EAAWm5B,GAAAA,GAAAA,uBAA+B/6B,EAAUuH,GACpD45B,EAAYxsD,KAAKuE,KAAK0oB,GAAYj5B,EAAK,GAEvCy4D,EAAwB,EAC3Bz6B,EAAgB,IAChBA,EAAgB,IAChBA,EAAgB,IAGb3Q,EAAI9rB,KAAK4sB,cAAcsnC,OACzBxhD,EAASukD,EACTvkD,EAASukD,EAEb,IAAIE,EAAMrrC,EAAIorC,EAAsB,GACpCphC,EAAS,IAAMqhC,EACf95B,EAAW,IAAM85B,EAEjBA,EAAMrrC,EAAIorC,EAAsB,GAChCphC,EAAS,IAAMqhC,EACf95B,EAAW,IAAM85B,EAEjBA,EAAMrrC,EAAIorC,EAAsB,GAChCphC,EAAS,IAAMqhC,EACf95B,EAAW,IAAM85B,EAEjB3wD,EAASmrC,UAAU,CAAE7b,WAAUuH,cAAa,EA5N5Cr9B,KAAKm2D,qBAAuB,CAAC,EAAG,EAAG,GACnCn2D,KAAKo2D,OAAS,CAAC,EAAG,EAAG,GACjBp2D,KAAK4sB,cAAcqpC,YACrBj2D,KAAK+uD,kBAAoB/uD,KAAKo3D,eAAe3qD,KAAKzM,MAElDA,KAAK+uD,kBAAoB/uD,KAAKirD,cAAcx+C,KAAKzM,MAEnDA,KAAKgvD,kBAAoBhvD,KAAKirD,cAAcx+C,KAAKzM,KACnD,CAuCAo3D,cAAAA,CAAen0D,GAIb,GAHoBA,EAAuC1F,OACxD0T,kBAEYtR,OAAS,EAAG,CACzB,MAAM,QAAEgD,EAAO,cAAE4F,GAAkBtF,EAAI1F,OACjCqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EACfyF,EAAS7B,EAAS44B,YAClByD,EAAWt6B,EAAcV,OACzB,WAAEw1B,GAAeh1B,EACvBrI,KAAKm2D,qBAAuBtzB,EAG5B,IAAIuzB,EAASn5B,GAAAA,GAAAA,WACXI,EAAW,GAAKwF,EAAS,GACzBxF,EAAW,GAAKwF,EAAS,GACzBxF,EAAW,GAAKwF,EAAS,IAE3BuzB,EAASn5B,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAem5B,GAEvCp2D,KAAKo2D,OAASA,EACV/tD,EAAOgvD,mBACTr3D,KAAKs2D,wBAAwBrzD,EAAKuD,EAAU6B,GAAQ,GAEpDrI,KAAKg3D,2BAA2B/zD,EAAKuD,EAAU6B,GAAQ,GAEzD7B,EAAS6X,Q,CAGPre,KAAK4sB,cAAcspC,KACrBl2D,KAAKs3D,aAAar0D,EAEtB,CAGAgoD,aAAAA,CAAchoD,GACZ,MAAM,QAAEN,GAAYM,EAAI1F,OAClBqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfyF,EAAS7B,EAAS44B,YAEpB/2B,EAAOgvD,mBACTr3D,KAAKs2D,wBAAwBrzD,EAAKuD,EAAU6B,GAE5CrI,KAAKg3D,2BAA2B/zD,EAAKuD,EAAU6B,GAGjD7B,EAAS6X,QACX,CA8HAi5C,YAAAA,CAAar0D,GACX,MAAM,QAAEN,EAAO,YAAE6F,GAAgBvF,EAAI1F,OAC/BqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCssD,EAAmBzmD,EAAYX,MAC/BQ,EAASzF,EAAe4D,SAAS44B,aACjC,WAAE/B,EAAU,SAAEvH,GAAaztB,EAE3B6mD,EAAgC,CACpCp5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,IAG3BE,EAAkC,CACtC9xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,IAGnCrsD,EAAe4D,SAASmrC,UAAU,CAChCtU,WAAY8xB,EACZr5B,SAAUo5B,IAEZtsD,EAAe4D,SAAS6X,QAC1B,EAGFw3C,GAASl1D,SAAW,OACpB,YCtRM42D,GAGD,CAAC,EAAG,EAAG,GAUZ,MAAMC,WAAmChrC,GAIvCjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbvZ,UAAWkkD,GACXlI,uBAAwB,MAI5BnsB,MAAMzW,EAAWC,EACnB,CAEAkpC,kBAAAA,CAAmB3yD,GAEjB,MAAM,QAAEN,EAAO,MAAE4Q,GAAUtQ,EAAI1F,OACzBqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,UAAEyQ,EAAS,uBAAEg8C,GAA2BrvD,KAAK4sB,cAE7CvkB,EAAS7B,EAAS44B,aAClB,OAAE0D,EAAM,SAAEhN,EAAQ,WAAEuH,GAAeh1B,GAEjCgL,UAAWX,GAAWa,GAEvB+d,EAAIC,EAAIkmC,GAAMp6B,GACdq6B,EAAIC,EAAIC,GAAMvkD,EAGfif,EAAS5f,GAAU28C,EAAyB5kD,KAAK+nB,IAAO,IAMxDkf,EAA4B,CAAC,EAAG,EAAG,GACnCD,EAA8B,CAAC,EAAG,EAAG,GACrCoe,EAA0B,CAAC,EAAG,EAAG,GAEjCl9B,EAAYm9B,GAAAA,GAAAA,SAAc,IAAIvsC,aAAa,KACjDusC,GAAAA,GAAAA,UAAen9B,EAAWA,EAAW,CAACrB,EAAIC,EAAIkmC,IAC9C3H,GAAAA,GAAAA,OAAYn9B,EAAWA,EAAWL,EAAO,CAAColC,EAAIC,EAAIC,IAClD9H,GAAAA,GAAAA,UAAen9B,EAAWA,EAAW,EAAErB,GAAKC,GAAKkmC,IACjDx6B,GAAAA,GAAAA,cAAmByU,EAAa5b,EAAUnD,GAC1CsK,GAAAA,GAAAA,cAAmBwU,EAAepU,EAAY1K,GAE9Cm9B,GAAAA,GAAAA,SAAcn9B,GACdm9B,GAAAA,GAAAA,OAAYn9B,EAAWA,EAAWL,EAAO,CAAColC,EAAIC,EAAIC,IAClD36B,GAAAA,GAAAA,cAAiC4yB,EAAW/sB,EAAQnQ,GAEpDnsB,EAASmrC,UAAU,CACjB7b,SAAU4b,EACV5O,OAAQ+sB,EACRxyB,WAAYoU,IAGdjrC,EAAS6X,QACX,EAGFm5C,GAA2B72D,SAAW,yBACtC,YCrEc,SAAUk3D,GACtBp7B,EACAqG,EACAoT,EACAC,GAEA,MAAMF,EAAYhZ,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,MAAWgZ,EAAiBnT,EAAcrG,GAE1C,MAAMq7B,EAAO76B,GAAAA,GAAAA,cAAmBiZ,GAC1B6hB,EAAO96B,GAAAA,GAAAA,cAAmBkZ,GAE1B6hB,EAAW/6B,GAAAA,GAAAA,SACjBA,GAAAA,GAAAA,SAAc+6B,EAAUF,EAAMC,GAE9B,MAAME,EAAiBh7B,GAAAA,GAAAA,OAAY+6B,GAInC,GAAIC,EAAiB,KACnB,MAAO,CAAEC,WAAY,EAAGC,YAAa,GAGvC,MAAMC,EACJn7B,GAAAA,GAAAA,IAAS+6B,EAAU/hB,IAAcgiB,EAAiBh7B,GAAAA,GAAAA,OAAYgZ,IAOhE,MAAO,CAAEiiB,WALQztD,KAAKuE,KAAK,EAAIopD,EAAWA,GAEZH,EAGTE,YAFDC,EAAWH,EAGjC,CC/Bc,SAAUI,GACtB7xD,EACAq8B,EACAy1B,EACAC,EACAC,EAAW,KAGX,MAAMnwD,EAAS7B,EAAS44B,aAChBtJ,SAAU2iC,GAAmBpwD,GAI/B,yBAAEm0B,GACN9mB,GAAAA,UAAAA,qCACElP,EACA6B,EACAiwD,GAGEI,EAAOl8B,EAA2Bg8B,EAKlCtd,EAAS10C,EAASmyD,YAClB9jB,EAAOqG,EAAO,GACdnG,EAAOmG,EAAO,GAGd0d,EAAuB,CAAC,EAAG,EAAG,GAGpC,IAKIC,EALA9jC,EAAsB,CAAC,EAAG,EAAG,GAGjC87B,GAAAA,GAAAA,SAAiBhuB,EAAU41B,EAAgBG,GAM3C,IAAK,IAAIE,EAASjkB,EAAMikB,GAAU/jB,EAAM+jB,GAAkBJ,EAAM,CAE9D3jC,EAAQ,CAAC+jC,EAAQ,EAAG,GAEpB,MAAMjC,GAAKiC,EAASL,EAAe,IAAMG,EAAO,GAKhD,GAJA7jC,EAAM,GAAK8hC,EAAI+B,EAAO,GAAKH,EAAe,GAC1C1jC,EAAM,GAAK8hC,EAAI+B,EAAO,GAAKH,EAAe,GAGtCM,GAAUhkC,EAAOmmB,GAAS,CAE5B,MAGM8d,EAAcT,EAHF/xD,EAASyyD,sBAAsBlkC,GAGDA,GAC5CikC,IACFH,EAAcG,E,EAKpB,OAAOH,CACT,CAOA,MAAME,GAAY,SAChBhkC,EACAmmB,GAEA,MAAOrG,EAAME,EAAMC,EAAMC,EAAMC,EAAMC,GAAQ+F,EAC7C,OACEnmB,EAAM,GAAK8f,GACX9f,EAAM,GAAKggB,GACXhgB,EAAM,GAAKigB,GACXjgB,EAAM,GAAKkgB,GACXlgB,EAAM,GAAKmgB,GACXngB,EAAM,GAAKogB,CAEf,EClGA,IACE5Y,6BAA4B,GAC5Bs7B,kCAAiC,GACjCn5B,4BAA2B,GAC3B25B,kCAAiCA,ICGrB,SAAUa,GACtB1yD,EACA2yD,GAGA,KAAM3yD,aAAoB24B,GAAAA,gBACxB,OAGF,MAAM,WAAE9B,GAAe72B,EAAS44B,YAE1B50B,EAAsB,CAAC,EAAG,EAAG,GAKnC,OAJAyyB,GAAAA,GAAAA,IAASzyB,EAAO2uD,EAAW97B,GAO7B,SAAqB72B,EAAUgE,GAC7B,MAAMnC,EAAS7B,EAAS44B,YAClBg6B,EAAS/wD,EAAOo0B,gBAEhB48B,EAAUp8B,GAAAA,GAAAA,IAASzyB,EAAO4uD,GAC1BE,EAAiBr8B,GAAAA,GAAAA,WAAgBm8B,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAIpE,GAFAn8B,GAAAA,GAAAA,MAAWq8B,EAAgBA,EAAgBD,GAGzC5uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,KAC9B,CACA,MAAM7nB,EAA8B,CAAC,EAAG,EAAG,GACrCC,EAA4B,CAAC,EAAG,EAAG,GAEzCzU,GAAAA,GAAAA,IAASwU,EAAeppC,EAAOg1B,WAAYi8B,GAC3Cr8B,GAAAA,GAAAA,IAASyU,EAAarpC,EAAOytB,SAAUwjC,GAEvC9yD,EAASmrC,UAAU,CACjBtU,WAAYoU,EACZ3b,SAAU4b,IAEZlrC,EAAS6X,Q,CAEb,CA/BEk7C,CAAY/yD,EAAUgE,IAEf,CACT,CCfA,MAAMgvD,WAA2BhtC,GAK/BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACb6sC,kBAAmB,MAIvBv2B,MAAMzW,EAAWC,EACnB,CAWAgtC,kBAAAA,CAAmBz2D,GACjB,MAAM,QAAEN,EAAO,cAAE4F,GAAkBtF,EAAI1F,OAGjCqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAGhCqrB,EAAWjuB,KAAKuuB,YAAY/nB,GAElC,IAAKynB,EAASC,WAAW,YACvB,MAAM,IAAIprB,MACR,0HAIJ,MAAMmY,EAAWgT,EAASE,MAAM,aAAa,GAG7C,IAAIwrC,GAAgB7kB,IACpB,MAQM8kB,EAAiBvB,GACrB7xD,EACA+B,EAAcV,MACdoT,GAXY4+C,CAACC,EAAW/kC,KACxB,GAAI+kC,EAAYH,EAEd,OADAA,EAAeG,EACR/kC,C,IAYX,IAAK6kC,IAAmBA,EAAej6D,OACrC,OAGF,MAAM,kBAAE85D,EAAiB,YAAEljD,GAAgBvW,KAAK4sB,cAE9BxR,EAAgB2+C,eAAen5D,QAAQqyD,IACvD,GAAIwG,GAAmBh+B,QAAQw3B,EAAG53C,KAAO,EACvC,OAAO,EAET,MAAM2+C,EAAiBrxB,GAAwBsqB,EAAG53C,GAAID,EAAgBC,IACtE,SAAI9E,GAAeA,IAAgByjD,GAAgB3+C,GAGvC,IAIJnd,SAASsI,IAGbA,aAAoB24B,GAAAA,eACtB+5B,GAAY1yD,EAAUozD,GAEtBliD,QAAQC,KACN,yF,GAIR,EAGF6hD,GAAmB74D,SAAW,qBAC9B,Y,gBCjGc,SAAUs5D,GACtB5rC,EACAtrB,GAEA,MAAMm3D,EAAe7rC,EAAU1uB,OACzBw6D,EAAmC,GAEzC,IAAK,IAAIlH,EAAK,EAAGA,EAAKiH,EAAcjH,IAAM,CACxC,MAAMzsD,EAAW6nB,EAAU4kC,GAEvBzsD,EAASq4B,2BAA6B97B,GACxCo3D,EAAiCt8D,KAAK2I,E,CAI1C,OAAO2zD,CACT,CCtBA,MAAQ9/B,OAAM,GAAEC,QAAO,GAAEC,QAAOA,IAAK39B,GAUvB,SAAUw9D,GACtB/rC,EACA1tB,GAEA,MAAMu5D,EAAe7rC,EAAU1uB,OAEzB06D,EAA2B,GAEjC,IAAK,IAAIpH,EAAK,EAAGA,EAAKiH,EAAcjH,IAAM,CACxC,MAAMzsD,EAAW6nB,EAAU4kC,GAErBxyC,EAAYsZ,GAChBvzB,EAAS6U,GACT7U,EAASwB,mBAGX,IAAKyY,EACH,SAGc65C,GACd75C,EACA9f,IAIA05D,EAAyBx8D,KAAK2I,E,CAIlC,OAAO6zD,CACT,CAWA,SAASC,GACP75C,EACA9f,GAEA,MAAM,YAAEu5B,GAAgBzZ,EAClBsb,EAAO7B,EAAYv5B,GAEzB,IAAKo7B,EACH,OAAO,EAGT,MAAMw+B,EAAWx+B,EAAK7O,KAEtB,OAAOqtC,IAAalgC,IAAUkgC,IAAajgC,IAAWigC,IAAahgC,EACrE,CC9CA,SAhBM,SACJlM,EACAhmB,EACAmyD,EAAM,MAEN,OAAOnsC,EAAUztB,QAAQ4F,IACvB,MAAMi0D,EAAWj0D,EAAS44B,YAM1B,OAHE30B,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASw9B,EAASh+B,gBAAiBp0B,EAAOo0B,kBACnD+9B,CAEe,GAErB,ECPc,SAAUE,GACtB/3D,EACAhC,EACAg6D,GAAyB,GAEzB,MAAM/3D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,oBAAErY,GAAwBH,EAEjD,IAAIyrB,EAAYjT,EAAgB2+C,eAEhC1rC,EAAY4rC,GACV5rC,EACAtrB,GAEFsrB,EAAY+rC,GAA+B/rC,EAAW1tB,GAEtD,MAAM6F,EAAW4U,EAAgBmtB,YAAY3lC,EAAemF,YAExD4yD,IACFtsC,EAAYusC,GACVvsC,EACA7nB,EAAS44B,cAMb,OAFoB/Q,EAAU/gB,KAAK2lD,GAAOA,EAAG53C,IAG/C,CClCA,MAAM+gB,GAAU,KACVy+B,GAAS,EACTC,GAAU,EAEhB,SAASC,GAAMC,EAAKC,EAAOxgB,GACzB,MAAOygB,EAAIC,GAAM1gB,EACjB,GAAIhwC,KAAKC,IAAIuwD,GAAS7+B,GACpB,OAAO4+B,EAAM,EAEf,MAAMnE,EAAImE,EAAMC,EAEhB,GAAIA,EAAQ,EAAG,CACb,GAAIpE,EAAIsE,EACN,OAAO,EAELtE,EAAIqE,IACNzgB,EAAE,GAAKoc,E,KAEJ,CACL,GAAIA,EAAIqE,EACN,OAAO,EAELrE,EAAIsE,IACN1gB,EAAE,GAAKoc,E,CAGX,OAAO,CACT,CAUc,SAAUjpB,GAAK8L,EAAGC,EAAGyhB,EAAKC,EAAKC,GAC3C,MAAOnnC,EAAIC,GAAMslB,GACVrlB,EAAIC,GAAMqlB,EACX/B,EAAKvjB,EAAKF,EACV2jB,EAAKxjB,EAAKF,EAYhB,QAVW9wB,IAAP+3D,QAA2B/3D,IAAPg4D,GACtBD,EAAK3hB,EACL4hB,EAAK3hB,IAEL0hB,EAAG,GAAK3hB,EAAE,GACV2hB,EAAG,GAAK3hB,EAAE,GACV4hB,EAAG,GAAK3hB,EAAE,GACV2hB,EAAG,GAAK3hB,EAAE,IAIVlvC,KAAKC,IAAIktC,GAAMxb,IACf3xB,KAAKC,IAAIotC,GAAM1b,IACfjI,GAAMinC,EAAI,IACVjnC,GAAMinC,EAAI,IACVhnC,GAAMgnC,EAAI,IACVhnC,GAAMgnC,EAAI,GAEV,OAAOP,GAGT,MAAMpgB,EAAI,CAAC,EAAG,GACd,GACEsgB,GAAMK,EAAI,GAAKjnC,EAAIyjB,EAAI6C,IACvBsgB,GAAM5mC,EAAKinC,EAAI,IAAKxjB,EAAI6C,IACxBsgB,GAAMK,EAAI,GAAKhnC,EAAI0jB,EAAI2C,IACvBsgB,GAAM3mC,EAAKgnC,EAAI,IAAKtjB,EAAI2C,GACxB,CACA,MAAOygB,EAAIC,GAAM1gB,EASjB,OARI0gB,EAAK,IACPG,EAAG,GAAKnnC,EAAKgnC,EAAKvjB,EAClB0jB,EAAG,GAAKlnC,EAAK+mC,EAAKrjB,GAEhBojB,EAAK,IACPG,EAAG,IAAMH,EAAKtjB,EACdyjB,EAAG,IAAMH,EAAKpjB,GAET+iB,E,CAET,OAAOC,EACT,CCjFc,SAAUS,GACtBC,EACAzmC,GAEA,MAAM0mC,EAAYD,EAAKE,KAAOF,EAAKG,KAC7BC,EAAaJ,EAAKK,KAAOL,EAAKM,KAC9BC,EAAW,CAACN,EAAWG,GACvBI,EAA2B,CAC/BR,EAAKG,KAAOF,EAAY,EACxBD,EAAKM,KAAOF,EAAa,GAKrBK,EAAkB,CACtBxxD,KAAKC,IAAIqqB,EAAM,GAAKinC,EAAW,IAC/BvxD,KAAKC,IAAIqqB,EAAM,GAAKinC,EAAW,KAI3BpkB,EAAKqkB,EAAgB,GAAmB,GAAdF,EAAS,GACnCjkB,EAAKmkB,EAAgB,GAAmB,GAAdF,EAAS,GAMzC,GAAInkB,EAAK,GAAKE,EAAK,EACjB,OAAOF,EAAKA,EAAKE,EAAKA,EAGxB,MAAMokB,EAAOzxD,KAAK6iC,IAAIsK,EAAI,GAAKntC,KAAK6iC,IAAIwK,EAAI,GAE5C,OAAOokB,EAAOA,CAChB,CChCc,SAAUC,GACtBX,EACAzmC,GAEA,OAAOtqB,KAAKuE,KAAKusD,GAAuBC,EAAMzmC,GAChD,CCZA,SALA,Q,OCCc,MAAOqnC,WAA6BC,IAkFlD,SAASC,GAAoBzuB,GAC3B,OAAsB,IAAfA,EAAIluC,OAAekuC,EAAI,GAAKA,CACrC,CC5Ec,SAAU0tB,GAAuB5jC,EAAWC,GACxD,GAAID,EAAGh4B,SAAWi4B,EAAGj4B,OACnB,MAAMmD,MAAM,mDAGd,MAAOqxB,EAAIC,EAAImoC,EAAK,GAAK5kC,GAClBtD,EAAIC,EAAIkoC,EAAK,GAAK5kC,EAEzB,OAAOntB,KAAKwE,IAAIklB,EAAKE,EAAI,GAAK5pB,KAAKwE,IAAImlB,EAAKE,EAAI,GAAK7pB,KAAKwE,IAAIstD,EAAKC,EAAI,EACzE,CCRc,SAAUL,GAAgBxkC,EAAWC,GACjD,OAAOntB,KAAKuE,KAAKusD,GAAuB5jC,EAAIC,GAC9C,CCLc,SAAU6kC,GACtBC,EACAC,GAEA,MAAOxoC,EAAIC,GAAMsoC,GACVroC,EAAIC,GAAMqoC,EAKjB,MAAO,CAHM,EAAItoC,EAAKF,EACT,EAAIG,EAAKF,EAGxB,CCwBA,SAASwoC,GACP3xD,EACA0sB,EACAklC,EACAC,GAAS,GAET,MAAMnxB,EAAS,GACToxB,EA3CR,SACE9xD,EACA0sB,EACAklC,EACAC,GAAS,GAET,IAAIE,EACAjuD,EACJ,MAAMkuD,EAAgC,GAElCH,GACF/tD,EAAI9D,EAAOtL,OAAS,EACpBq9D,EAAW,IAEXjuD,EAAI,EACJiuD,EAAW,GAGb,IAAK,IAAIzvD,EAAIyvD,EAAUzvD,EAAItC,EAAOtL,OAAQ4N,IAIpC2vD,GAAcvlC,EAAIklC,EAHX5xD,EAAO8D,GACP9D,EAAOsC,KAGhB0vD,EAAcp/D,KAAK,CAACkR,EAAGxB,IAGzBwB,EAAIxB,EAGN,OAAO0vD,CACT,CAa0BE,CACtBlyD,EACA0sB,EACAklC,EACAC,GAGF,IAAK,IAAIvvD,EAAI,EAAGA,EAAIwvD,EAAgBp9D,OAAQ4N,IAAK,CAC/C,MAEM6vD,EAAeC,GAAgB1lC,EAAIklC,EAF9B5xD,EAAO8xD,EAAgBxvD,GAAG,IAC1BtC,EAAO8xD,EAAgBxvD,GAAG,KAErCo+B,EAAO9tC,KAAKu/D,E,CAEd,OAAOzxB,CACT,CAMA,SAAS2xB,GACPryD,EACA0sB,EACAklC,EACAC,GAAS,GAET,IAAIE,EACAjuD,EAEA+tD,GACF/tD,EAAI9D,EAAOtL,OAAS,EACpBq9D,EAAW,IAEXjuD,EAAI,EACJiuD,EAAW,GAGb,IAAK,IAAIzvD,EAAIyvD,EAAUzvD,EAAItC,EAAOtL,OAAQ4N,IAAK,CAI7C,GAAI2vD,GAAcvlC,EAAIklC,EAHX5xD,EAAO8D,GACP9D,EAAOsC,IAGhB,MAAO,CAACwB,EAAGxB,GAGbwB,EAAIxB,C,CAER,CAMA,SAASgwD,GACPtyD,EACA0sB,EACAklC,EACAC,GAAS,GAET,IAAIE,EACAjuD,EAEA+tD,GACF/tD,EAAI9D,EAAOtL,OAAS,EACpBq9D,EAAW,IAEXjuD,EAAI,EACJiuD,EAAW,GAGb,MAAMC,EAAgB,GAEtB,IAAK,IAAI1vD,EAAIyvD,EAAUzvD,EAAItC,EAAOtL,OAAQ4N,IAAK,CAC7C,MAAMqqB,EAAK3sB,EAAO8D,GACZyuD,EAAKvyD,EAAOsC,GAEd2vD,GAAcvlC,EAAIklC,EAAIjlC,EAAI4lC,IAC5BP,EAAcp/D,KAAK,CAACkR,EAAGxB,IAGzBwB,EAAIxB,C,CAGN,GAA6B,IAAzB0vD,EAAct9D,OAChB,OAIF,MAAM89D,EAAY,GAElBR,EAAc/+D,SAASk/D,IACrB,MAAMM,EAAqB,CACzBzyD,EAAOmyD,EAAa,IACpBnyD,EAAOmyD,EAAa,KAGhBO,EAAW,EACdD,EAAmB,GAAG,GAAKA,EAAmB,GAAG,IAAM,GACvDA,EAAmB,GAAG,GAAKA,EAAmB,GAAG,IAAM,GAG1DD,EAAU5/D,KAAK2mC,GAAAA,GAAAA,SAAoBm5B,EAAUhmC,GAAI,IAGnD,MAAML,EAAc7sB,KAAK8U,OAAOk+C,GAGhC,MAAO,CACLG,QAASX,EAHgBQ,EAAUhiC,QAAQnE,IAI3CI,SAAUJ,EAEd,CAKA,SAAS4lC,GACPvlC,EACAklC,EACAjlC,EACA4lC,GAEA,IAAI7xB,GAAS,EAEb,MAAMkyB,EAAS,CACbC,GAAYnmC,EAAIklC,EAAIjlC,GACpBkmC,GAAYnmC,EAAIklC,EAAIW,GACpBM,GAAYlmC,EAAI4lC,EAAI7lC,GACpBmmC,GAAYlmC,EAAI4lC,EAAIX,IAItB,OAAIgB,EAAO,KAAOA,EAAO,IAAMA,EAAO,KAAOA,EAAO,MAKlC,IAAdA,EAAO,IAAYE,GAAUpmC,EAAIC,EAAIilC,IAGhB,IAAdgB,EAAO,IAAYE,GAAUpmC,EAAI6lC,EAAIX,IAGvB,IAAdgB,EAAO,IAAYE,GAAUnmC,EAAID,EAAI6lC,IAGvB,IAAdK,EAAO,IAAYE,GAAUnmC,EAAIilC,EAAIW,MAP9C7xB,GAAS,GAYJA,EACT,CAMA,SAASmyB,GACP1oB,EACA4oB,EACAxsC,GAEA,MAAMysC,GACHD,EAAE,GAAK5oB,EAAE,KAAO5jB,EAAE,GAAKwsC,EAAE,KAAOA,EAAE,GAAK5oB,EAAE,KAAO5jB,EAAE,GAAKwsC,EAAE,IAE5D,OAAyB,IAArBC,EACK,EAGFA,EAAmB,EAAI,EAAI,CACpC,CAKA,SAASF,GAAU3oB,EAAiB4oB,EAAiBxsC,GACnD,OACEwsC,EAAE,IAAMvzD,KAAK6iC,IAAI8H,EAAE,GAAI5jB,EAAE,KACzBwsC,EAAE,IAAMvzD,KAAK8U,IAAI61B,EAAE,GAAI5jB,EAAE,KACzBwsC,EAAE,IAAMvzD,KAAK6iC,IAAI8H,EAAE,GAAI5jB,EAAE,KACzBwsC,EAAE,IAAMvzD,KAAK8U,IAAI61B,EAAE,GAAI5jB,EAAE,GAM7B,CAOA,SAAS6rC,GACP1lC,EACAklC,EACAjlC,EACA4lC,GAEA,MAAMU,GACHV,EAAG,GAAK5lC,EAAG,KAAOilC,EAAG,GAAKllC,EAAG,KAAO6lC,EAAG,GAAK5lC,EAAG,KAAOilC,EAAG,GAAKllC,EAAG,IACpE,GAAmB,GAAfumC,EACF,OAEF,IAAIxkB,EAAI/hB,EAAG,GAAKC,EAAG,GACf+hB,EAAIhiB,EAAG,GAAKC,EAAG,GACnB,MAAMumC,GAAcX,EAAG,GAAK5lC,EAAG,IAAM8hB,GAAK8jB,EAAG,GAAK5lC,EAAG,IAAM+hB,EACrDykB,GAAcvB,EAAG,GAAKllC,EAAG,IAAM+hB,GAAKmjB,EAAG,GAAKllC,EAAG,IAAMgiB,EAC3DD,EAAIykB,EAAaD,EACjBvkB,EAAIykB,EAAaF,EAKjB,MAAO,CAHSvmC,EAAG,GAAK+hB,GAAKmjB,EAAG,GAAKllC,EAAG,IACxBA,EAAG,GAAK+hB,GAAKmjB,EAAG,GAAKllC,EAAG,IAG1C,E,GJxQqBykC,IACJ9uB,IAAM,EAAEwH,KACRqM,GAAAkd,IAAM,CAAC,GACPld,GAAAmd,WAAa,CAAC,GACdnd,GAAAod,eAAiB,CAAC,GAClBpd,GAAAt8C,MAAQ,EAOhBs8C,GAAAqd,cAAgB,EAAGr9D,MAAOkvB,MAE7BhyB,MAAM0rB,QAAQsG,IACdA,EAAS1wB,OAAS,GACE,IAApBwhD,GAAK7T,IAAI3tC,SAETwhD,GAAK7T,IAAIzvC,KAAKsjD,GAAK7T,IAAI,GAAI6T,GAAK7T,IAAI,IACpC6T,GAAKkd,IAAIxgE,KAAKsjD,GAAKkd,IAAI,GAAIld,GAAKkd,IAAI,IACpCld,GAAKmd,WAAWzgE,KAAKsjD,GAAKmd,WAAW,GAAInd,GAAKmd,WAAW,IACzDnd,GAAKod,eAAe1gE,KAAKsjD,GAAKod,eAAe,GAAIpd,GAAKod,eAAe,KAGvE,MAAME,EAAWpgE,MAAM0rB,QAAQsG,GAAYA,EAAW,CAACA,GACvD8wB,GAAKt8C,OAAS,EAEds8C,GAAK7T,IAAIpvC,SACP,CAAC6/B,EAAIyb,IAAS2H,GAAK7T,IAAIkM,GAAO/uC,KAAK6iC,IAAIvP,EAAI0gC,EAASjlB,MAEtD2H,GAAKkd,IAAI/wD,KAAI,CAACywB,EAAIyb,IAAS2H,GAAKkd,IAAI7kB,IAAQilB,EAASjlB,KACrD2H,GAAKmd,WAAWhxD,KACd,CAACywB,EAAIyb,IAAS2H,GAAKmd,WAAW9kB,IAAQilB,EAASjlB,IAAQ,IAEzD2H,GAAKod,eAAejxD,KAClB,CAACywB,EAAIyb,IACF2H,GAAKod,eAAe/kB,IAAQ/uC,KAAKwE,IAChCwvD,EAASjlB,GAAO2H,GAAKkd,IAAI7kB,GAAO2H,GAAKt8C,MACrC,IAEL,EAaIs8C,GAAAud,cAAgB,KACrB,MAAMC,EAAOxd,GAAKkd,IAAI/wD,KAAK+wD,GAAQA,EAAMld,GAAKt8C,QACxC+5D,EAASzd,GAAKod,eAAejxD,KAAKixD,GACtC9zD,KAAKuE,KAAKuvD,EAAiBpd,GAAKt8C,SAE5Bg6D,EAAsB1d,GAAKmd,WAAWhxD,KAAI,CAACywB,EAAIyb,IACnD/uC,KAAKuE,KAAKmyC,GAAKmd,WAAW9kB,GAAO2H,GAAKt8C,MAAQ85D,EAAKnlB,IAAQ,KAEvDslB,EAAa3d,GAAK7T,IAQxB,OANA6T,GAAK7T,IAAM,EAAEwH,KACbqM,GAAKkd,IAAM,CAAC,GACZld,GAAKmd,WAAa,CAAC,GACnBnd,GAAKod,eAAiB,CAAC,GACvBpd,GAAKt8C,MAAQ,EAEN,CACL,CAAEqB,KAAM,MAAO/E,MAAOm7D,GAAoBwC,GAAaC,KAAM,MAC7D,CAAE74D,KAAM,OAAQ/E,MAAOm7D,GAAoBqC,GAAOI,KAAM,MACxD,CAAE74D,KAAM,SAAU/E,MAAOm7D,GAAoBsC,GAASG,KAAM,MAC5D,CACE74D,KAAM,sBACN/E,MAAOm7D,GAAoBuC,GAC3BE,KAAM,MAET,EK7EL,MAAM3iC,GAAU,KA8FhB,GAhF0C4iC,CACxCx4D,EACAy4D,KAEA,IAAI30B,EACA40B,EACAC,EAEJ,GAAI34D,aAAoB0V,GAAAA,cAAe,CAErC,MAAM8sB,EAAYxiC,EAAS8nB,eAE3B4wC,EAAOl2B,EAAU31B,UAAUoK,MAAM,EAAG,GACpC0hD,EAAOn2B,EAAU31B,UAAUoK,MAAM,EAAG,GAEpC6sB,EAAUtB,EAAUsB,O,KACf,CAEL,MAAMtB,EAAYxiC,EAAS8nB,gBACrB,UAAEjb,EAAWi3B,QAAS80B,GAAkBp2B,GACxC,gBAAEvM,EAAe,OAAEqG,GAAWt8B,EAAS44B,YAGvCigC,EAAUhsD,EAAUoK,MAAM,EAAG,GAC7B6hD,EAAUjsD,EAAUoK,MAAM,EAAG,GAC7B8hD,EAAUlsD,EAAUoK,MAAM,EAAG,GAE7Bw4B,EAAYhZ,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,MAAWgZ,EAAiBnT,EAAcrG,GAE1C,MAAM+iC,EAAmB/0D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASgZ,EAAWopB,IAChDI,EAAmBh1D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASgZ,EAAWqpB,IAChDI,EAAmBj1D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASgZ,EAAWspB,IAGtD,IAAII,EACJ,GAAIl1D,KAAKC,IAAI,EAAI80D,GAAoBpjC,GACnCujC,EAAWP,EAAc,GACzBF,EAAOG,OACF,GAAI50D,KAAKC,IAAI,EAAI+0D,GAAoBrjC,GAC1CujC,EAAWP,EAAc,GACzBF,EAAOI,MACF,MAAI70D,KAAKC,IAAI,EAAIg1D,GAAoBtjC,IAI1C,MAAM,IAAIt5B,MAAM,oDAHhB68D,EAAWP,EAAc,GACzBF,EAAOK,C,CAKT,MAAMK,EAAgBn1D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAAS6F,EAAQu8B,IAC1CQ,EAAgBp1D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAAS6F,EAAQw8B,IAC1CQ,EAAgBr1D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAAS6F,EAAQy8B,IAGhD,IAAIQ,EACJ,GAAIt1D,KAAKC,IAAI,EAAIk1D,GAAiBxjC,GAChC2jC,EAAWX,EAAc,GACzBD,EAAOE,OACF,GAAI50D,KAAKC,IAAI,EAAIm1D,GAAiBzjC,GACvC2jC,EAAWX,EAAc,GACzBD,EAAOG,MACF,MAAI70D,KAAKC,IAAI,EAAIo1D,GAAiB1jC,IAIvC,MAAM,IAAIt5B,MAAM,oDAHhBi9D,EAAWX,EAAc,GACzBD,EAAOI,C,CAKTj1B,EAAU,CAACq1B,EAAUI,E,CAQvB,MAAO,CAAEz1B,QAL6B,CACpCA,EAAQ,GAAK20B,EACb30B,EAAQ,GAAK20B,GAGoBC,OAAMC,OAAM,ECjFjD,GAR6Ca,CAC3CroC,EACAC,EACAqoC,IAEOz7B,GAAAA,GAAAA,KAAU7M,EAAIC,GAAMqoC,ECkD7B,GArD+BC,CAC7Bv9D,EACAw9D,EACAC,EACAC,KAEA,MAAM,KAAEnB,EAAI,KAAEC,EAAI,QAAE70B,GAAY+1B,EAC1Bz9D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEf09D,EAAe95D,EAASsB,cAC5Bq4D,EAAaA,EAAaxgE,OAAS,IAE/B4gE,EAAc/5D,EAASsB,cAAcs4D,GAErCI,EAAevjC,GAAAA,GAAAA,SAErBA,GAAAA,GAAAA,SAAcujC,EAAcD,EAAaD,GAEzC,MAAMG,EAAQh2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAActB,IACxCwB,EAAQj2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAAcrB,IAExCwB,EAAiBl2D,KAAK6iC,IAC1B7iC,KAAK4qC,MAAMorB,EAAQn2B,EAAQ,IAC3B7/B,KAAK4qC,MAAMqrB,EAAQp2B,EAAQ,KAG7B,GAAIq2B,EAAiB,EAAG,CACtB,MAAMC,EAAkBT,EAAaA,EAAaxgE,OAAS,GAErDkhE,EAAar8B,GAAAA,GAAAA,KAAUo8B,EAAiBR,GAExCU,EAAYt8B,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,SAAcs8B,EAAWV,EAAgBQ,GAEzCp8B,GAAAA,GAAAA,IAASs8B,EAAWA,EAAU,GAAKD,EAAYC,EAAU,GAAKD,GAE9D,MAAME,EAAeF,EAAaF,EAElC,IAAK,IAAIpzD,EAAI,EAAGA,GAAKozD,EAAgBpzD,IACnC4yD,EAAatiE,KAAK,CAChB+iE,EAAgB,GAAKG,EAAeD,EAAU,GAAKvzD,EACnDqzD,EAAgB,GAAKG,EAAeD,EAAU,GAAKvzD,G,MAIvD4yD,EAAatiE,KAAKuiE,GAGpB,OAAOO,CAAc,ECFvB,GAjD8BK,CAC5B5rB,EACAzd,EACAC,EACAoM,KAGA,MAAMi9B,EAAM,CAAC7rB,EAAE,GAAKzd,EAAG,GAAIyd,EAAE,GAAKzd,EAAG,IAC/BupC,EAAO,CAACtpC,EAAG,GAAKD,EAAG,GAAIC,EAAG,GAAKD,EAAG,IAElC8F,EAAMwjC,EAAI,GAAKC,EAAK,GAAKD,EAAI,GAAKC,EAAK,GAG7C,GAAIzjC,EAAM,EACR,OAAO,EAGT,MAAM0jC,EAAU12D,KAAKuE,KAAKkyD,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAE7D,GAAgB,IAAZC,EACF,OAAO,EAGT,MAAMC,EAAsB3jC,EAAM0jC,EAC5BE,EAAiB,CAACH,EAAK,GAAKC,EAASD,EAAK,GAAKC,GAC/CG,EAAmB,CACvBD,EAAe,GAAKD,EACpBC,EAAe,GAAKD,GAEhBG,EAAgC,CACpC5pC,EAAG,GAAK2pC,EAAiB,GACzB3pC,EAAG,GAAK2pC,EAAiB,IAK3B,QAFiB98B,GAAAA,GAAAA,SAAc4Q,EAAGmsB,GAEnBv9B,MAMXQ,GAAAA,GAAAA,SAAc7M,EAAI4pC,GAAmB/8B,GAAAA,GAAAA,SAAc7M,EAAIC,GAIhD,EC5CC,SAAU4pC,GAAsBv2D,GAE5C,MAAMw2D,EAAIx2D,EAAOtL,OACjB,IAAI+hE,EAAO,EACP3yD,EAAI0yD,EAAI,EAEZ,IAAK,IAAIl0D,EAAI,EAAGA,EAAIk0D,EAAGl0D,IACrBm0D,IAASz2D,EAAO8D,GAAG,GAAK9D,EAAOsC,GAAG,KAAOtC,EAAO8D,GAAG,GAAK9D,EAAOsC,GAAG,IAClEwB,EAAIxB,EAIN,OAAO9C,KAAKC,IAAIg3D,EAAO,EACzB,CCkCc,SAAUvF,GACtBj1D,EACA6tB,GAEA,GAAoB,IAAhB7tB,EAAKvH,QAAiC,IAAjBo1B,EAAMp1B,OAC7B,MAAMmD,MACJ,8EAIJ,MAAOsE,EAAMG,EAAKspB,EAAOyC,GAAUpsB,EAEnC,IAAIowB,EAAc,OAClB,MAAMqqC,EAjDR,SACEv6D,EACAG,EACAspB,EACAyC,GAqBA,MAPqB,CACnB/rB,IAAK,CAb4B,CAACH,EAAMG,GACT,CAACH,EAAOypB,EAAOtpB,IAa9C2qB,MAAO,CAX4B,CAAC9qB,EAAOypB,EAAOtpB,GACjB,CAACH,EAAOypB,EAAOtpB,EAAM+rB,IAWtDrB,OAAQ,CAT4B,CAAC7qB,EAAOypB,EAAOtpB,EAAM+rB,GACvB,CAAClsB,EAAMG,EAAM+rB,IAS/ClsB,KAAM,CAP4B,CAACA,EAAMG,EAAM+rB,GACf,CAAClsB,EAAMG,IAU3C,CAuBuBq6D,CAAmBx6D,EAAMG,EAAKspB,EAAOyC,GAW1D,OATAz0B,OAAOwE,KAAKs+D,GAAczjE,SAAS0/D,IACjC,MAAOiE,EAAWC,GAAWH,EAAa/D,GACpClmC,EAAWqqC,GAA4BF,EAAWC,EAAS/sC,GAE7D2C,EAAWJ,IACbA,EAAcI,E,IAIXJ,CACT,CClEc,SAAU0qC,GACtBH,EACAC,EACA/sC,GAKA,IAAIktC,EACJ,MAAMC,EAAkBC,GAAkCN,EAAWC,GAOrE,GAJID,EAAU,KAAOC,EAAQ,IAAMD,EAAU,KAAOC,EAAQ,KAC1DG,EAAeJ,IAGZI,EAAc,CACjB,MAAMG,IACFrtC,EAAM,GAAK8sC,EAAU,KAAOC,EAAQ,GAAKD,EAAU,KAClD9sC,EAAM,GAAK8sC,EAAU,KAAOC,EAAQ,GAAKD,EAAU,KACtDK,EAGAD,EADEG,EAAa,EACAP,EACNO,EAAa,EACPN,EAEA,CACbD,EAAU,GAAKO,GAAcN,EAAQ,GAAKD,EAAU,IACpDA,EAAU,GAAKO,GAAcN,EAAQ,GAAKD,EAAU,I,CAK1D,MAAO,CACL9sC,MAAO,IAAIktC,GACXC,gBAAiBC,GAAkCptC,EAAOktC,GAE9D,CC1Cc,SAAU1G,GACtBsG,EACAC,EACA/sC,GAEA,OAAOitC,GAA2BH,EAAWC,EAAS/sC,GAAOmtC,eAC/D,CCNc,SAAU/F,GACtB0F,EACAC,EACA/sC,GAEA,GAAyB,IAArB8sC,EAAUliE,QAAmC,IAAnBmiE,EAAQniE,QAAiC,IAAjBo1B,EAAMp1B,OAC1D,MAAMmD,MACJ,kEAIJ,OAAO2H,KAAKuE,KAAKusD,GAAuBsG,EAAWC,EAAS/sC,GAC9D,CCpBA,SAASk8B,GAAK1/C,GACZ,MAAoB,iBAANA,EACVA,EACEA,EAAI,GACD,EACD,EACFA,GAAMA,EACN,EACA44C,IACFA,GACN,CAYc,SAAUkY,GACtBC,EACAC,EACAC,EACAC,GAEA,MAAOtuC,EAAIC,GAAMkuC,GACVjuC,EAAIC,GAAMiuC,GACVG,EAAIC,GAAMH,GACVI,EAAIC,GAAMJ,EAGXK,EAAKxuC,EAAKF,EACV2uC,EAAK5uC,EAAKE,EACV2uC,EAAK3uC,EAAKD,EAAKD,EAAKG,EAGpB2uC,EAAKH,EAAKJ,EAAKK,EAAKJ,EAAKK,EACzBE,EAAKJ,EAAKF,EAAKG,EAAKF,EAAKG,EAM/B,GAAW,IAAPC,GAAmB,IAAPC,GAAYjS,GAAKgS,KAAQhS,GAAKiS,GAC5C,OAIF,MAAMC,EAAKN,EAAKF,EACVS,EAAKV,EAAKE,EACVS,EAAKT,EAAKD,EAAKD,EAAKG,EAGpBS,EAAKH,EAAKhvC,EAAKivC,EAAKhvC,EAAKivC,EACzBE,EAAKJ,EAAK9uC,EAAK+uC,EAAK9uC,EAAK+uC,EAO/B,GAAW,IAAPC,GAAmB,IAAPC,GAAYtS,GAAKqS,KAAQrS,GAAKsS,GAC5C,OAMF,MAAMtI,EAAQ6H,EAAKM,EAAKD,EAAKJ,EAC7B,IAAI/H,EAOJA,EAAM+H,EAAKM,EAAKD,EAAKJ,EACrB,MAAMzxD,EAAIypD,EAAMC,EAEhBD,EAAMmI,EAAKH,EAAKF,EAAKO,EAKrB,MAF0B,CAAC9xD,EAFjBypD,EAAMC,EAKlB,CCrCA,MAAM,mBAAEuI,IAAuBnnC,GAAAA,UAoC/B,SAASonC,KACP,MAAO,gBACT,CAEA,SAASC,KACP,OAAO,CACT,CAEA,SAASC,KACP,OAAO,CACT,CAEA,SAASC,KACP,OAAO,CACT,CAEA,MAAMC,GACE,EADFA,GAEI,EAFJA,GAGE,EAcR,MAAMC,WAAuB7gC,GAa3B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,SAC5BD,cAAe,CACboH,QAAQ,EAGR+vC,oBAAoB,EAOpBC,QAAS,CACP1a,SAAS,EACT2a,QAAS,IAKXC,8BAA+B,GAG/BC,kCAAmC,GAEnCC,uBAAwBn/D,GAAAA,MAAAA,WAAiByW,wBACzC2oD,OAAQ,CACN/a,SAAS,EACTn2B,QAAS,GACTvtB,aAAc,MAKpBs9B,MAAMzW,EAAWC,GA9CnB,KAAA43C,WAA2B,CAAC,EAAG,EAAG,GAqElC,KAAAC,mBAAqB,EACnBv8D,oBACAD,iBAKA,MAAMnF,GAAiBie,EAAAA,GAAAA,wBACrB9Y,EACAC,IAEI,oBAAEjF,EAAmB,SAAEyD,GAAa5D,GACpC,QAAED,GAAY6D,GACd,SAAEsvB,EAAQ,WAAEuH,EAAU,gBAAEZ,GAAoBj2B,EAAS44B,YAG3D,IAAIh8B,EAAcpD,KAAKwkE,gBAAgB5hE,GACvCQ,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,GAGEA,EAAYzD,QAEdsE,GAAiBb,EAAY,GAAGjD,eAyBlC,OAFA6D,GApBmB,CACjBg+B,aAAa,EACblhC,SAAU,CACR23D,eAA8B,IAAI3iC,GAClC2uC,iBAAgC,IAAIpnC,GACpCt6B,sBACApC,SAAUX,KAAKotB,eAEjBhT,KAAM,CACJmjB,QAAS,CACPmnC,eAAgB,GAChBC,oBAAqB,GACrBL,WAAYtkE,KAAKskE,YAEnBM,gBAAiB,KACjBC,kBAAmB,GACnB98D,eAIsBpF,GAEnB,CACLy2D,OAAQ38B,EACR1H,MAAOvuB,EAASsB,cAAc,CAC5BtB,EAASoB,OAAOqoD,YAAc,EAC9BzpD,EAASoB,OAAOsoD,aAAe,IAElC,EAGH,KAAA4U,kBAAoB,IACApkD,GAAa1gB,KAAKuW,aAAaoK,cAoEnD,KAAAokD,kBAAqBpkD,IACnB,IAAKA,EAAchhB,QAAmC,IAAzBghB,EAAchhB,OACzC,MAAM,IAAImD,MACR,oEAKJ,MAAOkiE,EAAeC,EAAgBC,GAAiBvkD,GAG/Cy4C,OAAQ+L,EAASpwC,MAAO3pB,GAC9BpL,KAAKukE,mBAAmBS,IAGlB5L,OAAQgM,EAASrwC,MAAOswC,GAC9BrlE,KAAKukE,mBAAmBU,GAE1B,IAAIK,EAAwB,CAAC,EAAG,EAAG,GAC/BC,EAAStoC,GAAAA,GAAAA,SAGTioC,IACC9L,OAAQkM,EAASvwC,MAAOwwC,GACzBvlE,KAAKukE,mBAAmBW,KAM1BjoC,GAAAA,GAAAA,IAASsoC,EAAQn6D,EAAQi6D,GACzBpoC,GAAAA,GAAAA,MAAWsoC,EAAQA,EAAQ,IAC3BtoC,GAAAA,GAAAA,MAAWqoC,EAASH,EAASC,IAI/B,MAAMI,EAAa9vD,GAAAA,UAAAA,OAAAA,cAA6ByvD,EAAS/5D,GACnDq6D,EAAc/vD,GAAAA,UAAAA,OAAAA,cAA6B0vD,EAASC,GACpDK,EAAahwD,GAAAA,UAAAA,OAAAA,cAA6B4vD,EAASC,GAIzDvlE,KAAKskE,WAAa5uD,GAAAA,UAAAA,OAAAA,uBAAsC8vD,EAAYC,EAAaC,GAGjF,MAAM,gBAAEtqD,IAAoByF,EAAAA,GAAAA,wBAC1BF,EAAc,GAAG5Y,WACjB4Y,EAAc,GAAG3Y,mBAGnB29D,GACEvqD,EACAuF,EAAcrT,KAAI,EAAGvF,gBAAiBA,IACvC,EAWH,KAAA69D,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,cAAEqF,GAAkBrF,EACpBi2D,EAAY5wD,EAAcV,MAE1BjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EACrB5C,KAAK6lE,MAAMjjE,EAAgBu2D,GAE3B,MAAM/1D,EAAcpD,KAAKwkE,gBAAgB5hE,GACnCwgC,EAAsBpjC,KAAK2iC,wCAC/Bn8B,EAAS7D,QACTS,IAII,KAAEgX,GAASgpB,EAAoB,IAE/B,eAAEshC,GAAmBtqD,EAAKmjB,QAC1BuoC,EAAkB,GAExB,IAAK,IAAIv4D,EAAI,EAAGA,EAAIm3D,EAAe/kE,OAAS,IAAK4N,EAAG,CAClD,MAAMw4D,EAAgBrB,EAAen3D,GAAG,GAClCy4D,EAAuBhmE,KAAKimE,8BAChCF,EAAc1qD,IAEV6qD,EACJlmE,KAAKmmE,oCAAoCJ,EAAc1qD,IACpD2qD,GAAyBE,IAG9BJ,EAAgBjoE,KAAKkoE,EAAc1qD,IAEnC9N,I,CAYF,OATA6M,EAAKyqD,kBAAoB,IAAIiB,GAE7B1rD,EAAKmjB,QAAQqnC,gBAAkBf,GAE/B5gE,EAAIyF,iBAEJmgD,GAAkBlmD,GAElB3C,KAAKomE,gBAAgBzjE,GACdygC,EAAoB,EAAE,EAG/B,KAAAmK,OAAS,KACP71B,QAAQ0wC,IAAI,sBAAsB,EAgDpC,KAAAie,uBAAyB,CACvBpjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACpB7F,EAAW2kC,aAAc,EAOzBhiC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElBM,EAAIyF,gBAAgB,EActB,KAAAq8B,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,MAEIhkC,KAAKsmE,eAAe3jE,EAAStF,EAAYgmC,EAAc,GAO7D,KAAAkjC,qBAAuB,CACrBtjE,EACA5F,EACAwP,KAEA,MAAM3J,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACpB7F,EAAW2kC,aAAc,EACzBhiC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElBM,EAAIyF,gBAAgB,EAGtB,KAAA89D,iBAAoBvjE,IAClB,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EACtB4D,EAAW5D,EAAe4D,SAE1BpD,EAAcpD,KAAKwkE,gBAAgB5hE,GAKnC6jE,EAHJzmE,KAAK2iC,wCAAwChgC,EAASS,GAI9B,GAE1B,IAAKqjE,EACH,OASF,MAAMC,EAAgBlgE,EAAS44B,YACzBunC,EAAoBF,EAAmB3lE,SAAS23D,eAChDmO,EAAoC,CAAC,EAAG,EAAG,GACjD/V,GAAAA,GAAAA,SACE6V,EAAc5wC,SACd6wC,EACAC,GAGF,MAAMC,EAAsBJ,EAAmB3lE,SAAS2jE,iBAClDqC,EAAsC,CAAC,EAAG,EAAG,GACnDjW,GAAAA,GAAAA,SACE6V,EAAcrpC,WACdwpC,EACAC,GAIFL,EAAmB3lE,SAAS23D,eAAiB,IAAIiO,EAAc5wC,UAC/D2wC,EAAmB3lE,SAAS2jE,iBAAmB,IAC1CiC,EAAcrpC,YAGnB,MAAM2oC,EAAuBhmE,KAAKimE,8BAChCz/D,EAAS6U,IAEL6qD,EAA6BlmE,KAAKmmE,oCACtC3/D,EAAS6U,IAEX,IACG3F,GAAAA,UAAAA,QAAgBgxD,EAAc5wC,SAAU6wC,EAAmB,OAC5DX,GACAE,EACA,CAEA,IAAIa,GAAa,EAK6BrxD,GAAAA,UAAAA,QAC5CkxD,EACAE,EACA,QAKAC,GAAa,GAGf,MAAMC,EACJv8D,KAAKC,IACHmmD,GAAAA,GAAAA,IAAY+V,EAAqBF,EAAcjqC,kBAC7C,IAKDsqC,GAAeC,IAClBhnE,KAAKskE,WAAW,IAAMsC,EAAoB,GAC1C5mE,KAAKskE,WAAW,IAAMsC,EAAoB,GAC1C5mE,KAAKskE,WAAW,IAAMsC,EAAoB,G,CAK9C,GAAI5mE,KAAK4sB,cAAco3C,SAAS1a,QAAS,CACrB3gB,GAChBniC,EAAS6U,GACTD,EAAgBC,IAIf4rD,iBACArmE,QAAQya,GAAOA,IAAO7U,EAAS6U,KAEjBnd,SAAS6J,IACxB/H,KAAKknE,4BAA4Bn/D,EAAYqT,EAAgB,G,CAIjE,MACM01B,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAHwB,GAO/Bu4C,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA3N,kBAAoB,CAClBlgC,EACAkkE,KAEA,MAAM,QAAExkE,EAAO,cAAE4F,GAAkBtF,EAAI1F,OACjC8lC,EAAe96B,EAAcX,OACnC,IAAIw/D,GAAmB,EAEvB,IAAK,IAAI75D,EAAI,EAAGA,EAAI45D,EAAwBxnE,OAAQ4N,IAAK,CACvD,MAAMlQ,EAAa8pE,EAAwB55D,GAE3C,GAAIhP,GAAmBlB,GACrB,SAGF,MAAM,KAAE+c,EAAI,YAAE4nB,GAAgB3kC,EAC9B,IAAK+c,EAAKmjB,QACR,SAGF,MAAM8pC,EAA0BjtD,EAAKmjB,QAAQqnC,gBACvC0C,EACJltD,EAAKyqD,mBAAqBzqD,EAAKyqD,kBAAkBllE,OAAS,EACtD,IAAIya,EAAKyqD,mBACT,GAGNzqD,EAAKyqD,kBAAoB,GACzBzqD,EAAKmjB,QAAQqnC,gBAAkB,KAS/B,IAAInhC,GAAO,EAETA,IAT2BzjC,KAAK+jC,wBAChCphC,EACAtF,EACAgmC,EACA,IAOOrjC,KAAKsmE,eAAe3jE,EAAStF,EAAYgmC,EAAc,GAG7BI,IAASzB,IACRyB,GAAQzB,GAE1C3kC,EAAW2kC,aAAeA,EAC1BolC,GAAmB,GAEnBhtD,EAAKmjB,QAAQqnC,kBAAoByC,GAChCrnE,KAAKunE,0BACJntD,EAAKyqD,kBACLyC,KAGFF,GAAmB,E,CAIvB,OAAOA,CAAgB,EAGzB,KAAAzkC,wCAA0C,CAAChgC,EAASS,KAClD,IAAKA,IAAgBA,EAAYzD,OAC/B,MAAO,GAGT,MAAMiD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,GAAenF,EAMvB,OAJsCQ,EAAYxC,QAC/CvD,GAAeA,EAAW+c,KAAKrS,aAAeA,GAGb,EAStC,KAAAi0B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,EAAQ,gBAAE4U,GAAoBxY,GAChC,QAAED,GAAY6D,EACdpD,EAAcpD,KAAKwkE,gBAAgB5hE,GACnCyF,EAAS7B,EAAS44B,YAKlBqnC,EAHJzmE,KAAK2iC,wCAAwChgC,EAASS,GAGL,GACnD,IAAKA,GAAazD,SAAW8mE,GAAoBrsD,KAE/C,OAAOotD,EAGT,MAAMrnE,EAAgBsmE,EAAmBtmE,eAOnC,YAAE8vD,EAAW,aAAEC,GAAiB1pD,EAASoB,OACzC6/D,EAAuBh9D,KAAKuE,KAChCihD,EAAcA,EAAcC,EAAeA,GAEvCwX,EAA2Bj9D,KAAK8U,IAAI0wC,EAAaC,GAEjD91C,EAAOqsD,EAAmBrsD,KAC1ButD,EAAwBnhE,EAAS29B,cAAcnkC,KAAKskE,YAEpDsD,EACJ5nE,KAAK6nE,+CACHjlE,EACAQ,GAGE0kE,EAAiB,GAGjBC,EAAY,CAAC,EAAG,EAAG9X,EAAaC,GAEtC0X,EAAyB1pE,SAASb,IAChC,MAAM,KAAE+c,GAAS/c,EAEjB+c,EAAKmjB,QAAQ+mC,WAAatkE,KAAKskE,WAE/B,MAAMyB,EAAgB3qD,EAAgBmtB,YACpCnuB,EAAKrS,YAGDigE,EAAcjC,EAAc3mC,YAE5B6oC,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAEV6sD,EACJloE,KAAKmmE,oCAAoCJ,EAAc1qD,IACnD8sD,EACJnoE,KAAKooE,yCAAyCrC,EAAc1qD,KAGxD,YAAE40C,EAAW,aAAEC,GAAiB6V,EAAcn+D,OAC9CygE,EAA4B59D,KAAKuE,KACrCihD,EAAcA,EAAcC,EAAeA,GAEvCoY,EAAkC,CACxB,GAAdrY,EACe,GAAfC,GAEIqY,EACJxC,EAAcj+D,cAAcwgE,GAExBj1D,EAA0B,CAAC,EAAG,EAAG,GACvCw9C,GAAAA,GAAAA,MACExoD,EAAOo0B,gBACPurC,EAAYvrC,gBACZppB,GAEFw9C,GAAAA,GAAAA,UAAkBx9C,GAClBw9C,GAAAA,GAAAA,eACgBx9C,EACdg1D,GAGF,MAAMG,EAA4B,CAAC,EAAG,EAAG,GACzC3X,GAAAA,GAAAA,IAAY0X,EAA0Bl1D,EAAWm1D,GAEjD,MAAMC,EAA4B,CAAC,EAAG,EAAG,GACzC5X,GAAAA,GAAAA,SAAiB0X,EAA0Bl1D,EAAWo1D,GAEtD,MAAMC,EAAeliE,EAAS29B,cAAcqkC,GAEtCG,EAA4BniE,EAAS29B,cACzCokC,GAGIK,EAA6BpkC,GAAAA,GAAAA,SACnCA,GAAAA,GAAAA,SACEokC,EACAF,EACAC,GAEFnkC,GAAAA,GAAAA,UAAeokC,EAA4BA,GA8B3C,MAAMC,EAA6BrkC,GAAAA,GAAAA,SAEnCA,GAAAA,GAAAA,MACEqkC,EACAD,EACuB,IAAvBnB,GAEF,MAAMqB,EAA4BtkC,GAAAA,GAAAA,SAClCA,GAAAA,GAAAA,MACEskC,EACAF,EAI2B,GAA3BlB,GAEF,MAAMqB,EAA8BvkC,GAAAA,GAAAA,SACpCA,GAAAA,GAAAA,MACEukC,EACAH,EAE2B,GAA3BlB,GAEF,MAAMsB,EAA8BxkC,GAAAA,GAAAA,SAC9BykC,EAAYjpE,KAAK4sB,cAAcs3C,8BACrC1/B,GAAAA,GAAAA,MACEwkC,EACAJ,EAEoC,IAApChB,EAAyBjoE,OAAespE,EAAY,GAItD,MAAMC,EAAkB1kC,GAAAA,GAAAA,SAClB2kC,EAAkB3kC,GAAAA,GAAAA,SAClB4kC,EAAoB5kC,GAAAA,GAAAA,SACpB6kC,EAAmB7kC,GAAAA,GAAAA,SAEzB,IAAI8kC,EAAiB9kC,GAAAA,GAAAA,MAAWmjC,GAC3BO,GAAoCD,IACvCqB,EAAiB9kC,GAAAA,GAAAA,MAAWmkC,IAG9BnkC,GAAAA,GAAAA,IAAS0kC,EAAiBI,EAAgBN,GAC1CxkC,GAAAA,GAAAA,IAAS2kC,EAAiBG,EAAgBT,GAC1CrkC,GAAAA,GAAAA,SACE4kC,EACAE,EACAN,GAEFxkC,GAAAA,GAAAA,SACE6kC,EACAC,EACAT,GAKFU,GAAgBL,EAAiBC,EAAiBpB,GAClDwB,GAAgBH,EAAmBC,EAAkBtB,GAGrD,MAAMyB,EAAehlC,GAAAA,GAAAA,SACrBA,GAAAA,GAAAA,SACEglC,EACA7B,EACAmB,GAGF,MAAMW,EAAejlC,GAAAA,GAAAA,SACrBA,GAAAA,GAAAA,IAASilC,EAAc9B,EAAuBmB,GAK9C,IAAIY,EAAwBllC,GAAAA,GAAAA,MAAWmjC,IAEpCO,GACDC,IAEAuB,EAAwBllC,GAAAA,GAAAA,MAAWmkC,IAIrC,IAAIgB,EAAqC,IAAI3pE,KAAKskE,aAE/C4D,GACDC,IAEAwB,EAAuB,IAAIpB,IAG7B,MAAMqB,EAA0C,CAAC,EAAG,EAAG,GACvD/Y,GAAAA,GAAAA,SAAiB2X,EAAaC,EAAamB,GAC3C/Y,GAAAA,GAAAA,UAAkB+Y,GAElB,MAAM,gBAAEntC,GAAoBp0B,GAEtB,OAAEwhE,GAAWC,GAAAA,EAChBC,kBAEAC,OAAO,GAAIvtC,GAERwtC,EAA+C,CAAC,EAAG,EAAG,GAC5DhtC,GAAAA,GAAAA,cACEgtC,EACAL,EACAC,GAGF,MAAMK,EAAqBnE,EAAcoE,mBACnCC,EAA2C,IAC5CH,GAELpZ,GAAAA,GAAAA,eAAuBuZ,EAA4BF,GAEnD,MAAMG,EAAsC,CAAC,EAAG,EAAG,GACnDxZ,GAAAA,GAAAA,IACE8Y,EACAS,EACAC,GAIF,MAAMC,EAAyB9jE,EAAS29B,cACtCkmC,GAIIE,EAA8B/lC,GAAAA,GAAAA,SACpCA,GAAAA,GAAAA,SACE+lC,EACAb,EACAY,GAGF,MAAME,EAAiBhmC,GAAAA,GAAAA,SACvBA,GAAAA,GAAAA,SACEgmC,EACAd,EACAb,GAEFrkC,GAAAA,GAAAA,IAASgmC,EAAgBA,EAAgBD,GAEzC,MAAME,EAAiBjmC,GAAAA,GAAAA,SACvBA,GAAAA,GAAAA,IACEimC,EACAf,EACAb,GAEFrkC,GAAAA,GAAAA,IAASimC,EAAgBA,EAAgBF,GAEzChB,GAAgBiB,EAAgBC,EAAgB1C,GAEhD,MAAM2C,EAAmBlmC,GAAAA,GAAAA,SACzBA,GAAAA,GAAAA,IACEkmC,EACAhB,EACAb,GAEFrkC,GAAAA,GAAAA,SACEkmC,EACAA,EACAH,GAGF,MAAMI,EAAkBnmC,GAAAA,GAAAA,SACxBA,GAAAA,GAAAA,SACEmmC,EACAjB,EACAb,GAEFrkC,GAAAA,GAAAA,SACEmmC,EACAA,EACAJ,GAGFhB,GAAgBmB,EAAkBC,EAAiB5C,GAGnD,MAAM6C,GAAcpmC,GAAAA,GAAAA,SACdqmC,GAAcrmC,GAAAA,GAAAA,SACdsmC,GAAgBtmC,GAAAA,GAAAA,SAChBumC,GAAevmC,GAAAA,GAAAA,SAErBA,GAAAA,GAAAA,SACEomC,GACAlB,EACAX,GAEFvkC,GAAAA,GAAAA,IAASomC,GAAaA,GAAaL,GACnC/lC,GAAAA,GAAAA,IAASqmC,GAAanB,EAAuBX,GAC7CvkC,GAAAA,GAAAA,IAASqmC,GAAaA,GAAaN,GACnC/lC,GAAAA,GAAAA,SACEsmC,GACApB,EACAX,GAEFvkC,GAAAA,GAAAA,SAAcsmC,GAAeA,GAAeP,GAC5C/lC,GAAAA,GAAAA,IACEumC,GACArB,EACAX,GAEFvkC,GAAAA,GAAAA,SAAcumC,GAAcA,GAAcR,GAE1CzC,EAAejqE,KAAK,CAClBkoE,EACAmD,EACAC,EACAC,EACAC,EACAmB,EACAC,EACAC,EACAC,EACAnB,EACAC,EACAmB,GACAC,GACAC,GACAC,IACA,IAGJ,MAAMC,EAAc,GACdC,EAAc,GACdC,EAAgBlrE,KAAKmrE,uBAAuB3kE,EAAS6U,IACrD0I,OACczgB,IAAlB4nE,EAA8BA,EAAgB,qBAuShD,GArSApD,EAAe5pE,SAAQ,CAACktE,EAAMC,KAE5B,MAAMtF,EAAgBqF,EAAK,GACrBF,EAAgBlrE,KAAKmrE,uBAAuBpF,EAAc1qD,IAC1D2qD,EAAuBhmE,KAAKimE,8BAChCF,EAAc1qD,IAEV6qD,EACJlmE,KAAKmmE,oCAAoCJ,EAAc1qD,KACvDrb,KAAK4sB,cAAcy3C,QAAQ/a,QACvBgiB,EACJtrE,KAAKooE,yCAAyCrC,EAAc1qD,KAC5Drb,KAAK4sB,cAAcy3C,QAAQ/a,QACvBiiB,EAAqBnxD,EAAKyqD,kBAAkB1uD,MAC/CkF,GAAOA,IAAO0qD,EAAc1qD,KAG/B,IAAI0I,OACgBzgB,IAAlB4nE,EAA8BA,EAAgB,qBAE5Cp6C,EAAY,EAEhB,MAAM06C,EAC6B,OAAjCpxD,EAAKmjB,QAAQqnC,iBACbxqD,EAAKmjB,QAAQqnC,kBAAoBf,IACjC0H,EAEEC,IACF16C,EAAY,KAGd,IAAI8C,EAAU,GAAGy3C,IAyCjB,GAxCIrF,GAAwBE,GAC1BtyC,EAAU,GAAGy3C,OACbI,GACE37C,EACA3vB,EACAyzB,EACAw3C,EAAK,GACLA,EAAK,GACL,CACErnD,QACA+M,cAIJ8C,EAAU,GAAGy3C,OACbI,GACE37C,EACA3vB,EACAyzB,EACAw3C,EAAK,GACLA,EAAK,GACL,CACErnD,QACA+M,eAIJ26C,GACE37C,EACA3vB,EACAyzB,EACAw3C,EAAK,GACLA,EAAK,GACL,CACErnD,QACA+M,cAKFk1C,EAAsB,CACxBjiD,OACoBzgB,IAAlB4nE,EAA8BA,EAAgB,qBAEhD,MAAMQ,EACJtxD,EAAKmjB,QAAQqnC,kBAAoBf,GAC7B8H,EAAkB,CAACP,EAAK,GAAIA,EAAK,KAEjCQ,EAAoB,CACxBplE,EAASsB,cAAcsjE,EAAK,IAC5BrF,EACAqF,EAAK,GACLA,EAAK,IAEDS,EAAoB,CACxBrlE,EAASsB,cAAcsjE,EAAK,KAC5BrF,EACAqF,EAAK,GACLA,EAAK,IAEPJ,EAAYntE,KAAK+tE,EAAmBC,GAEpC,MAAMC,EACJ1xD,EAAKmjB,QAAQqnC,kBAAoBf,GAC7BkI,EAAuB,CAACX,EAAK,IAAKA,EAAK,IAAKA,EAAK,IAAKA,EAAK,KAE3DY,EAA8B,CAClCxlE,EAASsB,cAAcsjE,EAAK,KAC5BrF,EACAqF,EAAK,GACLA,EAAK,IAEDa,EAA8B,CAClCzlE,EAASsB,cAAcsjE,EAAK,KAC5BrF,EACAqF,EAAK,GACLA,EAAK,IAEDc,EAAgC,CACpC1lE,EAASsB,cAAcsjE,EAAK,KAC5BrF,EACAqF,EAAK,GACLA,EAAK,IAEDe,EAA+B,CACnC3lE,EAASsB,cAAcsjE,EAAK,KAC5BrF,EACAqF,EAAK,GACLA,EAAK,IASP,GAPAH,EAAYptE,KACVmuE,EACAC,EACAC,EACAC,IAICX,GAAcxrE,KAAK4sB,cAAcy3C,QAAQ/a,WACzCoiB,IACAI,GACD5F,GACAoF,EACA,CAEA,IAAIc,EAAY,GAAGf,OACnBgB,GACEv8C,EACA3vB,EACAisE,EACAT,EACA,CACE5nD,QACAne,aAAc5F,KAAK4sB,cAAcy3C,QAAQ/a,QACrCtpD,KAAK4sB,cAAcy3C,QAAQz+D,aAC3B,EACJutB,QAASnzB,KAAK4sB,cAAcy3C,QAAQ/a,QAChCtpD,KAAK4sB,cAAcy3C,QAAQlxC,QAC3B,EACJhnB,KAAM,WAGVigE,EAAY,GAAGf,OACfgB,GACEv8C,EACA3vB,EACAisE,EACAL,EACA,CACEhoD,QACAne,aAAc5F,KAAK4sB,cAAcy3C,QAAQ/a,QACrCtpD,KAAK4sB,cAAcy3C,QAAQz+D,aAC3B,EACJutB,QAASnzB,KAAK4sB,cAAcy3C,QAAQ/a,QAChCtpD,KAAK4sB,cAAcy3C,QAAQlxC,QAC3B,EACJhnB,KAAM,Q,MAGL,GACLq/D,IACCE,IACAI,GACD5F,EACA,CAGAmG,GACEv8C,EACA3vB,EAJgB,GAAGkrE,IAMnBM,EACA,CACE5nD,QACAne,aAAc5F,KAAK4sB,cAAcy3C,QAAQ/a,QACrCtpD,KAAK4sB,cAAcy3C,QAAQz+D,aAC3B,EACJutB,QAASnzB,KAAK4sB,cAAcy3C,QAAQ/a,QAChCtpD,KAAK4sB,cAAcy3C,QAAQlxC,QAC3B,EACJhnB,KAAM,U,MAGL,GACLo/D,IACCG,IACAI,GACDR,EACA,CAGAe,GACEv8C,EACA3vB,EAJgB,GAAGkrE,IAMnBU,EACA,CACEhoD,QACAne,aAAc5F,KAAK4sB,cAAcy3C,QAAQ/a,QACrCtpD,KAAK4sB,cAAcy3C,QAAQz+D,aAC3B,EACJutB,QAASnzB,KAAK4sB,cAAcy3C,QAAQ/a,QAChCtpD,KAAK4sB,cAAcy3C,QAAQlxC,QAC3B,EACJhnB,KAAM,Q,MAGL,GAAIu/D,GAAoBxF,EAA4B,CAGzDmG,GACEv8C,EACA3vB,EAJgB,GAAGkrE,IAMnBM,EACA,CACE5nD,QACAne,aAAc,EACdgrB,KAAM7M,EACN5X,KAAM,U,MAIV2/D,GACAP,GACAD,GAGAe,GACEv8C,EACA3vB,EACAyzB,EACAm4C,EACA,CACEhoD,QACAne,aAAc,EACdgrB,KAAM7M,EACN5X,KAAM,SAIe45D,EAAcoE,mBAChB,IAAOmB,IAE9B13C,EAAU,GAAGy3C,SACbI,GACE37C,EACA3vB,EACAyzB,EACAw3C,EAAK,GACLA,EAAK,GACL,CACErnD,QACA8M,MAAO,EACPE,SAAU,CAAC,EAAG,KAIlB6C,EAAU,GAAGy3C,SACbI,GACE37C,EACA3vB,EACAyzB,EACAw3C,EAAK,GACLA,EAAK,GACL,CACErnD,QACA8M,MAAOu6C,EACPr6C,SAAU,CAAC,EAAG,K,KAOxBy2C,GAAe,EAGfptD,EAAKmjB,QAAQmnC,eAAiBsG,EAC9B5wD,EAAKmjB,QAAQonC,oBAAsBsG,EAE/BjrE,KAAK4sB,cAAcm3C,mBAAoB,CAUzCxX,GACEz8B,EACA3vB,EAHgB,IANgB,CAClB,IAAd8vD,EACe,IAAfC,GAE0C,IAAvBuX,EASnB,CAAE1jD,QAAO6M,KAAM7M,G,CAInB,OAAOyjD,CAAY,EAGrB,KAAAhD,gBAAmB5hE,IACjB,MAAM,SAAE4D,GAAa5D,EACfQ,EACJK,GAAezD,KAAKotB,cAAe5mB,EAAS7D,UAAY,GACpD2pE,EAActsE,KAAK8kE,oBAAoBx3D,KAC3C,EAAGvF,gBAAiBA,IAStB,OAL6B3E,EAAYxC,QAAQvD,IAC/C,MAAM,KAAE+c,GAAS/c,EACjB,OAAOivE,EAAYrmD,SAAS7L,EAAKrS,WAAW,GAGnB,EAG7B,KAAAwkE,aAAgBngE,IACd,MAAMuU,EAAgB3gB,KAAK8kE,oBAC3B9kE,KAAK+kE,kBAAkBpkD,EAAc,EAwGvC,KAAA4mD,0BAA4B,CAACiF,EAAoBC,IAC3CD,EAAmB7sE,SAAW8sE,EAAmB9sE,SAIrD6sE,EAAmBtuE,SAASmd,IAC1B,IAAIqxD,GAAY,EAChB,IAAK,IAAIn/D,EAAI,EAAGA,EAAIk/D,EAAmB9sE,SAAU4N,EAC/C,GAAI8N,IAAOoxD,EAAmBl/D,GAAI,CAChCm/D,GAAY,EACZ,K,CAGJ,IAAkB,IAAdA,EACF,OAAO,C,KAIJ,GAKT,KAAAC,gDAAkD,CAChD/pE,EACAQ,KAEA,MAAM,WAAE2E,EAAU,gBAAEqT,EAAe,SAAE5U,GAAa5D,EAE5CglE,EAA2BxkE,EAAYxC,QAC1CvD,GAAeA,EAAW+c,KAAKrS,aAAeA,IAGjD,IAAK6/D,IAA6BA,EAAyBjoE,OACzD,MAAO,GAGT,MAAM0I,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,SAAE3G,GAAaztB,EAEhCukE,EAAgChF,EAAyBhnE,QAC5DvD,IACC,MAAM,WAAE0K,GAAe1K,EAAW+c,KAE5ByyD,EADiBzxD,EAAgBmtB,YAAYxgC,GACbq3B,YAEtC,QACE1pB,GAAAA,UAAAA,QACEm3D,EAAepwC,gBACfA,EACA,MACG/mB,GAAAA,UAAAA,QAAgBm3D,EAAe/2C,SAAUA,EAAU,GACzD,IAIL,OAAO82C,CAA6B,EAGtC,KAAAE,mCAAqC,CACnClqE,EACAmqE,EACA3pE,KAEA,MAAM,gBAAEgY,GAAoBxY,GACtB,KAAEwX,GAAS2yD,EACXvmE,EAAW4U,EAAgBmtB,YAAYnuB,EAAKrS,YAE5CilE,EAA4B5pE,EAAYxC,QAAQvD,IACpD,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YAKvD,OAAqC,IAJH/H,KAAKimE,8BACrCF,EAAc1qD,GAGyB,IAG3C,IAAK2xD,IAA8BA,EAA0BrtE,OAC3D,MAAO,GAGT,MAAM0I,EAAS7B,EAAS44B,YAClB3C,EAAkBp0B,EAAOo0B,gBAC/Bo0B,GAAAA,GAAAA,UAAkBp0B,GAgBlB,OAbEuwC,EAA0BpsE,QAAQvD,IAChC,MAAM,WAAE0K,GAAe1K,EAAW+c,KAE5B4tD,EADgB5sD,EAAgBmtB,YAAYxgC,GAChBq3B,YAC5B6tC,EAAuBjF,EAAYvrC,gBAGzC,OAFAo0B,GAAAA,GAAAA,UAAkBoc,GAGhBv3D,GAAAA,UAAAA,QAAgB+mB,EAAiBwwC,EAAsB,MACvDv3D,GAAAA,UAAAA,QAAgBrN,EAAOy6B,OAAQklC,EAAYllC,OAAQ,IAAK,GAIP,EAGzD,KAAA+kC,+CAAiD,CAC/CjlE,EACAQ,KAEA,MAAM,gBAAEgY,EAAe,SAAE5U,GAAa5D,EAEhC65B,EADSj2B,EAAS44B,YACO3C,gBAC/Bo0B,GAAAA,GAAAA,UAAkBp0B,GAElB,MAAMywC,EAA8C9pE,EAAYxC,QAC7DvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDkgE,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAGhB,OACE7U,IAAau/D,IAEiB,IAA9BkC,CAAkC,IAKlCkF,EAA6C,GAEnD,IACE,IAAI5/D,EAAI,EACRA,EAAI2/D,EAA4CvtE,SAC9C4N,EACF,CACA,MAAMlQ,EAAa6vE,EAA4C3/D,IACzD,WAAExF,GAAe1K,EAAW+c,KAE5B4tD,EADgB5sD,EAAgBmtB,YAAYxgC,GAChBq3B,YAC5B6tC,EAAuBjF,EAAYvrC,gBAGzC,GAFAo0B,GAAAA,GAAAA,UAAkBoc,GAGhBv3D,GAAAA,UAAAA,QAAgB+mB,EAAiBwwC,EAAsB,MACvDv3D,GAAAA,UAAAA,WAAmB+mB,EAAiBwwC,EAAsB,KAE1D,SAGF,IAAIG,GAAc,EAClB,IACE,IAAIC,EAAK,EACTA,EAAKF,EAA2CxtE,SAC9C0tE,EACF,CACA,MAAMhwE,EAAa8vE,EAA2CE,IACxD,WAAEtlE,GAAe1K,EAAW+c,KAE5BkzD,EADkBlyD,EAAgBmtB,YAAYxgC,GACZq3B,YAGtC1pB,GAAAA,UAAAA,QACE43D,EAAgB7wC,gBAChBurC,EAAYvrC,gBACZ,MAEF/mB,GAAAA,UAAAA,QAAgB43D,EAAgBx3C,SAAUkyC,EAAYlyC,SAAU,KAEhEs3C,GAAc,E,CAIbA,GACHD,EAA2CtvE,KAAKR,E,CAIpD,MAAMkwE,EAAiDnqE,EAAYxC,QAChEvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDkgE,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAGhB,OACE7U,IAAau/D,IAEiB,IAA9BkC,CAAkC,IAMxC,IACE,IAAI16D,EAAI,EACRA,EAAIggE,EAA+C5tE,SACjD4N,EACF,CACA,MAAMlQ,EAAakwE,EAA+ChgE,IAC5D,WAAExF,GAAe1K,EAAW+c,KAG5B4tD,EAFgB5sD,EAAgBmtB,YAAYxgC,GAEhBq3B,YAC5B6tC,EAAuBjF,EAAYvrC,gBAGzC,GAFAo0B,GAAAA,GAAAA,UAAkBoc,GAGhBv3D,GAAAA,UAAAA,QAAgB+mB,EAAiBwwC,EAAsB,MACvDv3D,GAAAA,UAAAA,WAAmB+mB,EAAiBwwC,EAAsB,KAE1D,SAGF,IAAIG,GAAc,EAClB,IACE,IAAIC,EAAK,EACTA,EAAKF,EAA2CxtE,SAC9C0tE,EACF,CACA,MAAMhwE,EAAa8vE,EAA2CE,IACxD,WAAEtlE,GAAe1K,EAAW+c,KAE5BkzD,EADkBlyD,EAAgBmtB,YAAYxgC,GACZq3B,YAGtC1pB,GAAAA,UAAAA,QACE43D,EAAgB7wC,gBAChBurC,EAAYvrC,gBACZ,MAEF/mB,GAAAA,UAAAA,QAAgB43D,EAAgBx3C,SAAUkyC,EAAYlyC,SAAU,KAEhEs3C,GAAc,E,CAIbA,GACHD,EAA2CtvE,KAAKR,E,CAKpD,MAAMuqE,EACJ5nE,KAAK2sE,gDACH/pE,EACAQ,GAGJ,IAAK,IAAImK,EAAI,EAAGA,EAAIq6D,EAAyBjoE,SAAU4N,EAAG,CACxD,MAAMlQ,EAAauqE,EAAyBr6D,GAC5C,GACE4/D,EAA2C1mD,MACxC9jB,GAAYA,IAAYtF,IAG3B,SAGF,MAAM,WAAE0K,GAAe1K,EAAW+c,KAE5B4tD,EADgB5sD,EAAgBmtB,YAAYxgC,GAChBq3B,YAC5B6tC,EAAuBjF,EAAYvrC,gBAGzC,GAFAo0B,GAAAA,GAAAA,UAAkBoc,GAGhBv3D,GAAAA,UAAAA,QAAgB+mB,EAAiBwwC,EAAsB,MACvDv3D,GAAAA,UAAAA,WAAmB+mB,EAAiBwwC,EAAsB,KAE1D,SAGF,IAAIG,GAAc,EAClB,IACE,IAAIC,EAAK,EACTA,EAAKF,EAA2CxtE,SAC9C0tE,EACF,CACA,MAAMhwE,EAAa8vE,EAA2CE,IACxD,WAAEtlE,GAAe1K,EAAW+c,KAE5BkzD,EADkBlyD,EAAgBmtB,YAAYxgC,GACZq3B,YAGtC1pB,GAAAA,UAAAA,QACE43D,EAAgB7wC,gBAChBurC,EAAYvrC,gBACZ,MAEF/mB,GAAAA,UAAAA,QAAgB43D,EAAgBx3C,SAAUkyC,EAAYlyC,SAAU,KAEhEs3C,GAAc,E,CAIbA,GACHD,EAA2CtvE,KAAKR,E,CAIpD,OAAO8vE,CAA0C,EAGnD,KAAAK,oCAAsC,CAAChnE,EAAUu/D,KAC/C,MAAM0H,EAASjnE,EAAS6gB,YAClBqmD,EAAsB3H,EAAc1+C,YAE1C,IAAIsmD,GAAY,EAWhB,OATAF,EAAOvvE,SAAS2hB,IAEZ4tD,EAAO9tE,SAAW+tE,EAAoB/tE,aACuB2D,IAA7DoqE,EAAoBv3D,MAAK,EAAG3T,SAAUA,IAAQqd,EAAMrd,QAEpDmrE,GAAY,E,IAITA,CAAS,EAGlB,KAAA9H,MAAQ,CAACjjE,EAAgBu2D,KACvBx0D,GAAMW,uBAAwB,EAC9B,MAAM,SAAEkB,EAAQ,gBAAE4U,GAAoBxY,EAEhCQ,EAAcpD,KAAKwkE,gBAAgB5hE,GAEnC4H,EAAsB,CAAC,EAAG,EAAG,GACnCqmD,GAAAA,GAAAA,SAAiBsI,EAAWn5D,KAAKskE,WAAY95D,GAI7C,MAMMojE,EALJ5tE,KAAK2sE,gDACH/pE,EACAQ,GAG0DxC,QAC3DvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YAEjD4lE,EAAY3tE,KAAKwtE,oCACrBhnE,EACAu/D,GAGF,OACE/lE,KAAKimE,8BAA8BF,EAAc1qD,KACjDrb,KAAKmmE,oCAAoCJ,EAAc1qD,KACvDsyD,CAAS,IAKf,OAA4C,IAAxCC,EAA6BjuE,QAC/BgF,GAAMW,uBAAwB,GACvB,IAGTtF,KAAK6tE,0CACHzyD,EACAwyD,EACApjE,GAGF7F,GAAMW,uBAAwB,GAEvB,EAAI,EAGb,KAAA8gE,gBAAmBzjE,IAIjBgC,GAAMW,uBAAyBtF,KAAK4sB,cAAcy3C,QAAQ/a,QAE1D3mD,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAGlE,KAAAA,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpBlD,KAAK8rD,SAASzuD,WAAW+c,KAAKmjB,QAAQqnC,gBAAkB,KACxD5kE,KAAK8rD,SAASzuD,WAAW+c,KAAKyqD,kBAAoB,GAElD7kE,KAAK8tE,kBAAkBnrE,GAEvBimD,GAAmBjmD,GAEnB3C,KAAK8rD,SAAW,KAEhB,MAAMlpD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAGtBkuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAHwB,GAO/Bu4C,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAma,cAAiBhoD,IACf,MAAMC,EAAcD,EAAI1F,OAClBiN,EAAQtH,EAAYsF,YAAYX,MAEtC,GACE4C,KAAKC,IAAIF,EAAM,IAAM,MACrBC,KAAKC,IAAIF,EAAM,IAAM,MACrBC,KAAKC,IAAIF,EAAM,IAAM,KAErB,OAGF,MAAM,QAAE7H,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,EAChCQ,EAAcpD,KAAKwkE,gBACvB5hE,GAMI6jE,EAHJzmE,KAAK2iC,wCAAwChgC,EAASS,GAGL,GACnD,IAAKqjE,EACH,OAGF,MAAM,QAAElpC,GAAYkpC,EAAmBrsD,MACjC,cAAE7R,GAAkBtF,EAAI1F,OACxB8lC,EAAe96B,EAAcX,OAEnC,GAAI21B,EAAQqnC,kBAAoBf,GAAgB,CAG9C,MAMM+J,EALJ5tE,KAAK2sE,gDACH/pE,EACAQ,GAG0DxC,QAC3DvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDkgE,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAEV6sD,EACJloE,KAAKmmE,oCAAoCJ,EAAc1qD,IAEzD,OACgC,IAA9B4sD,IACoC,IAApCC,GACAzB,EAAmBrsD,KAAKyqD,kBAAkB1uD,MACvCkF,GAAOA,IAAO0qD,EAAc1qD,IAC9B,IAKPrb,KAAK6tE,0CACHzyD,EACAwyD,EACApjE,E,MAEG,GAAI+yB,EAAQqnC,kBAAoBf,GAAkB,CAEvD,MAMM+J,EALJ5tE,KAAK2sE,gDACH/pE,EACAQ,GAG0DxC,QAC3DvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDkgE,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAEV6sD,EACJloE,KAAKmmE,oCAAoCJ,EAAc1qD,IAEzD,OACgC,IAA9B4sD,IACoC,IAApCC,CAAwC,IAKxC6F,EAAOvpC,GAAAA,GAAAA,SACPwpC,EAAOxpC,GAAAA,GAAAA,SAEP/T,EAAuB,CAC3BzwB,KAAKskE,WAAW,GAChBtkE,KAAKskE,WAAW,GAChBtkE,KAAKskE,WAAW,IAGZ5Y,EAAellD,EAAS29B,cAAc1T,GAEtCw9C,EAAmB/qE,EAAYqF,cAAcX,OAC7CsmE,EAAsB1pC,GAAAA,GAAAA,SAC5BA,GAAAA,GAAAA,IACE0pC,EACAD,EACA/qE,EAAYsF,YAAYZ,QAE1B48B,GAAAA,GAAAA,IAASupC,EAAMG,EAA2BxiB,GAC1ClnB,GAAAA,GAAAA,IAASwpC,EAAMC,EAAwBviB,GAEvC,IAAIp5B,EAAQkS,GAAAA,GAAAA,MAAWupC,EAAMC,GAG3BhuE,KAAKmuE,aAAaziB,EAAcwiB,EAAqBD,KAErD37C,IAAU,GAOZA,EAAQ7nB,KAAKqpD,MAAc,IAARxhC,GAAe,IAElC,MAAM87C,EAAe5nE,EAAS44B,YAAY3C,iBAEpC,OAAEotC,GAAWC,GAAAA,EAChBuE,kBACAC,UAAU79C,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAEvCu5C,OAAO13C,EAAO87C,GACdE,WAAW79C,EAAO,IAAKA,EAAO,IAAKA,EAAO,IAEvC89C,EAAoB,GAG1BX,EAA6B1vE,SAASb,IACpC,MAAM,KAAE+c,GAAS/c,EACjB+c,EAAKmjB,QAAQ+mC,WAAa7zC,EAE1B,MAAMs1C,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDM,EAAS09D,EAAc3mC,aACvB,OAAE0D,EAAM,SAAEhN,EAAQ,WAAEuH,GAAeh1B,EAEzCy6B,EAAO,IAAMhN,EAAS,GACtBgN,EAAO,IAAMhN,EAAS,GACtBgN,EAAO,IAAMhN,EAAS,GAEtBmH,GAAAA,GAAAA,cAAmBI,EAAYA,EAAYwsC,GAC3C5sC,GAAAA,GAAAA,cAAmBnH,EAAUA,EAAU+zC,GACvC5sC,GAAAA,GAAAA,cAAmB6F,EAAQA,EAAQ+mC,GAEnC/mC,EAAO,IAAMhN,EAAS,GACtBgN,EAAO,IAAMhN,EAAS,GACtBgN,EAAO,IAAMhN,EAAS,GAEtBiwC,EAAcp0B,UAAU,CACtB7b,WACAgN,SACAzF,eAEFkxC,EAAkB1wE,KAAKkoE,EAAc1qD,GAAG,IAE1CD,EAAgBozD,gBAAgBD,E,MAC3B,GAAIhxC,EAAQqnC,kBAAoBf,GAAgB,CAGrD,MAMM4K,EALJzuE,KAAK2sE,gDACH/pE,EACAQ,GAGkDxC,QACnDvD,IACC,MAAM,KAAE+c,GAAS/c,EACX0oE,EAAgB3qD,EAAgBmtB,YAAYnuB,EAAKrS,YACjDkgE,EAA4BjoE,KAAKimE,8BACrCF,EAAc1qD,IAEV8sD,EACJnoE,KAAKooE,yCAAyCrC,EAAc1qD,IAE9D,OACgC,IAA9B4sD,IACyC,IAAzCE,GACA1B,EAAmBrsD,KAAKyqD,kBAAkB1uD,MACvCkF,GAAOA,IAAO0qD,EAAc1qD,IAC9B,IAKP,GAAoC,IAAhCozD,EAAqB9uE,OACvB,OAEF,MAAMiuE,EACJ5tE,KAAK8sE,mCACHlqE,EACA6rE,EAAqB,GACrBrrE,GAGEsrE,EAAe,GACrBA,EAAa7wE,KAAK2I,EAAS6U,IAC3BuyD,EAA6B1vE,SAC1Bb,IACC,MAAM,KAAE+c,GAAS/c,EAEX0oE,EAAgB3qD,EAAgBmtB,YACpCnuB,EAAKrS,YAGDqxD,EADS2M,EAAc3mC,YACP3C,gBAEhB48B,EAAUxI,GAAAA,GAAAA,IAAYrmD,EAAO4uD,GAC7BE,EAA+B,IAAIF,GAGzC,GAFAvI,GAAAA,GAAAA,eAAuByI,EAAgBD,GAGrC5uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,KAC9B,CACA,MAAMqV,EAAMlkE,KAAKuE,KACfsqD,EAAe,GAAKA,EAAe,GACjCA,EAAe,GAAKA,EAAe,GACnCA,EAAe,GAAKA,EAAe,IAGjCsV,EAAe1rE,EAAYoF,WAAWT,MACtCwL,EAA0B,CAAC,EAAG,EAAG,GAEjCw7D,EAA8B,CAClC7uE,KAAKskE,WAAW,GAChBtkE,KAAKskE,WAAW,GAChBtkE,KAAKskE,WAAW,IAMlB,IADEtkE,KAAKmmE,oCAAoCJ,EAAc1qD,IACxB,CAC/B,MAAM,eAAEqpD,GAAmB1kE,KAAK8rD,SAASzuD,WAAW+c,KAAKmjB,QAEnDuxC,EAA8BpK,EAAe9jE,QAChDm0B,GAAUA,EAAM,GAAGvyB,MAAQujE,EAAc1qD,KAE5C,GAA2C,IAAvCyzD,EAA4BnvE,OAAc,CAC5C,MAAMyL,EAAS5E,EAASsB,cACtBgnE,EAA4B,GAAG,IAE3BzJ,EAAS7+D,EAASsB,cACtBgnE,EAA4B,GAAG,IAEjCje,GAAAA,GAAAA,IAAYzlD,EAAQi6D,EAAQwJ,GAC5Bhe,GAAAA,GAAAA,eAAqCge,EAAe,G,EAIxDhe,GAAAA,GAAAA,SAAiB+d,EAAcC,EAAex7D,GAC9C,MAAM07D,EAAmBle,GAAAA,GAAAA,IAAYx9C,EAAW+lD,GAC1C4V,EAAmC,IAAI5V,GAC7CvI,GAAAA,GAAAA,eAAuBme,EAAoBD,GAC3C,MAAME,EAA6C,CACjDD,EAAmB,GACnBA,EAAmB,GACnBA,EAAmB,IAErB/xC,GAAAA,GAAAA,UACEgyC,EACAA,GAEF,MAAMC,EAAyC,CAC7C5V,EAAe,GACfA,EAAe,GACfA,EAAe,IAEjBr8B,GAAAA,GAAAA,UAAeiyC,EAA0BA,GAEzC,IAAIhF,EAAqBnE,EAAcoE,mBAErCz0D,GAAAA,UAAAA,WACEu5D,EACAC,EACA,MAGFhF,GAAsByE,EAEtBzE,GAAsByE,EAGxBzE,EAAqBz/D,KAAKC,IAAIw/D,GAC9BA,EAAqBz/D,KAAK6iC,IACxBk2B,GAAmB2L,uBACnBjF,GAGWlqE,KAAKovE,wBAChB3I,EACApjC,EACA,EACA0iC,KAIAmE,EAAqB1G,GAAmB2L,wBAWxBxmC,GAChBo9B,EAAc1qD,GACdD,EAAgBC,IAEmB+e,gBACnCp6B,KAAKotB,eAEYiiD,iBACjBtJ,EACAmE,GAGFwE,EAAa7wE,KAAKkoE,EAAc1qD,G,KAItCD,EAAgBozD,gBAAgBE,E,GAiFpC,KAAAU,wBAA0B,CACxB/xE,EACAgmC,EACAW,EACAsrC,KAEA,MAAM,KAAEl1D,GAAS/c,GACX,eAAEqnE,GAAmBtqD,EAAKmjB,QAEhC,IAAK,IAAIhwB,EAAI,EAAGA,EAAIm3D,EAAe/kE,OAAS,IAAK4N,EAAG,CAClD,MAAMw4D,EAAgBrB,EAAen3D,GAAG,GACxC,GAAIw4D,EAAc1qD,KAAOi0D,EAAaj0D,GACpC,SAMF,IAH6Brb,KAAKimE,8BAChCF,EAAc1qD,IAGd,SAGF,MAAMk0D,EAAe,CACnB17C,MAAO,CACLtiB,EAAGmzD,EAAen3D,GAAG,GAAG,GACxBiE,EAAGkzD,EAAen3D,GAAG,GAAG,IAE1BumB,IAAK,CACHviB,EAAGmzD,EAAen3D,GAAG,GAAG,GACxBiE,EAAGkzD,EAAen3D,GAAG,GAAG,KAItBiiE,EAAmBzN,GACvB,CAACwN,EAAa17C,MAAMtiB,EAAGg+D,EAAa17C,MAAMriB,GAC1C,CAAC+9D,EAAaz7C,IAAIviB,EAAGg+D,EAAaz7C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,KAG3BosC,EAAe,CACnB57C,MAAO,CACLtiB,EAAGmzD,EAAen3D,EAAI,GAAG,GAAG,GAC5BiE,EAAGkzD,EAAen3D,EAAI,GAAG,GAAG,IAE9BumB,IAAK,CACHviB,EAAGmzD,EAAen3D,EAAI,GAAG,GAAG,GAC5BiE,EAAGkzD,EAAen3D,EAAI,GAAG,GAAG,KAI1BmiE,EAAmB3N,GACvB,CAAC0N,EAAa57C,MAAMtiB,EAAGk+D,EAAa57C,MAAMriB,GAC1C,CAACi+D,EAAa37C,IAAIviB,EAAGk+D,EAAa37C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,KAGjC,GAAImsC,GAAoBxrC,GAAa0rC,GAAoB1rC,EACvD,OAAO,EAITz2B,G,CAGF,OAAO,CAAK,EA9uEZvN,KAAKmrE,uBACH1+C,EAAUG,eAAe+iD,uBACzBlM,GACFzjE,KAAKimE,8BACHx5C,EAAUG,eAAegjD,8BACzBlM,GACF1jE,KAAKmmE,oCACH15C,EAAUG,eAAeijD,oCACzBlM,GACF3jE,KAAKooE,yCACH37C,EAAUG,eAAekjD,yCACzBlM,EACJ,CAyEAmM,eAAAA,GACE,MAAMpvD,EAAgB3gB,KAAK8kE,oBAK3B9kE,KAAKgwE,mCAAmCrvD,GACxC3gB,KAAKiwE,iCAAiCtvD,GAEtC3gB,KAAK+kE,kBAAkBpkD,EACzB,CAEA0pC,gBAAAA,GACE,MAAM1pC,EAAgB3gB,KAAK8kE,oBAE3B9kE,KAAK+kE,kBAAkBpkD,EACzB,CAEAqnB,gBAAAA,GACE,MAAMrnB,EAAgB3gB,KAAK8kE,oBAE3B9kE,KAAK+kE,kBAAkBpkD,EACzB,CAEAsnB,iBAAAA,GACE,MAAMtnB,EAAgB3gB,KAAK8kE,oBAE3B9kE,KAAKgwE,mCAAmCrvD,GAOxCA,EAAcziB,SAAQ,EAAG8J,oBAAmBD,iBAC1C,MAAMnF,GAAiBie,EAAAA,GAAAA,wBACrB9Y,EACAC,GAGF,IAAKpF,EACH,OAGF,MAAMQ,EAAcpD,KAAKwkE,gBAAgB5hE,GAErCQ,GAAazD,QACfyD,EAAYlF,SAASb,IACnB4G,GAAiB5G,EAAW8C,cAAc,G,GAIlD,CAgJA4jC,uBAAAA,CACEphC,EACAtF,EACAgmC,EACAW,GAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAErB,IAAImyB,EAAQ/0B,KAAKkwE,iCACf1pE,EACAnJ,EACAgmC,EACAW,GAGF,OAAc,OAAVjP,EACKA,GAGTA,EAAQ/0B,KAAKmwE,sCACX3pE,EACAnJ,EACAgmC,EACAW,GAGY,OAAVjP,EACKA,OADT,EAGF,CAy8BAi7C,kCAAAA,CAAmCrvD,GACjCA,EAAcziB,SAAQ,EAAG6J,aAAYC,wBACnC,MAAM,SAAExB,IAAaqa,EAAAA,GAAAA,wBACnB9Y,EACAC,IAEI,QAAErF,GAAY6D,EAEpB7D,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAamrE,2BACbpwE,KAAKusE,aACN,GAEL,CAEA0D,gCAAAA,CAAiC5hD,GAC/BA,EAAUnwB,SAAQ,EAAG6J,aAAYC,wBAC/B,MAAM,SAAExB,IAAaqa,EAAAA,GAAAA,wBACnB9Y,EACAC,IAEI,QAAErF,GAAY6D,EAEpB7D,EAAQqC,iBACNC,GAAAA,MAAAA,OAAamrE,2BACbpwE,KAAKusE,aACN,GAEL,CAEArF,2BAAAA,CACEn/D,EACAqT,GAKA,MAAM5U,EAAW4U,EAAgBmtB,YAAYxgC,IACvC,YAAEkoD,EAAW,aAAEC,GAAiB1pD,EAASoB,OAEzCyoE,EAAmB7pE,EAAS29B,cAAcnkC,KAAKskE,YAI/CpO,EAAMl2D,KAAK4sB,cAAco3C,QAAQC,QAEjCqM,EAAmC,CACvCD,EAAiB,GACjBA,EAAiB,IAenB,GAZIA,EAAiB,GAAK,EACxBC,EAAmB,GAAKpa,EACfma,EAAiB,GAAKpgB,IAC/BqgB,EAAmB,GAAKrgB,EAAciG,GAGpCma,EAAiB,GAAK,EACxBC,EAAmB,GAAKpa,EACfma,EAAiB,GAAKngB,IAC/BogB,EAAmB,GAAKpgB,EAAegG,GAIvCoa,EAAmB,KAAOD,EAAiB,IAC3CC,EAAmB,KAAOD,EAAiB,GAE3C,OAGF,MAAME,EAAoB/pE,EAASsB,cAAcwoE,GAE3CrhB,EAAmB,CACvBshB,EAAkB,GAAKvwE,KAAKskE,WAAW,GACvCiM,EAAkB,GAAKvwE,KAAKskE,WAAW,GACvCiM,EAAkB,GAAKvwE,KAAKskE,WAAW,IAGnCj8D,EAAS7B,EAAS44B,aAClB,WAAE/B,EAAU,SAAEvH,GAAaztB,EAE3B6mD,EAAgC,CACpCp5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,IAG3BE,EAAkC,CACtC9xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,IAGnCzoD,EAASmrC,UAAU,CACjBtU,WAAY8xB,EACZr5B,SAAUo5B,IAGZ1oD,EAAS6X,QACX,CA8vBAgxD,gBAAAA,CAAiB7oE,EAAUgqE,GACzB,IAAIC,EACJ,MAAM,kCAAEtM,GAAsCnkE,KAAK4sB,cAEjDu3C,GACAA,EAAkCxkE,OAAS,IAE3C8wE,EAAYtM,GAGd,IAAIuM,EAAiB1wE,KAAK4sB,cAAcw3C,uBACpCoM,IAAkBhN,GAAmB2L,yBACvCuB,EAAiBzrE,GAAAA,MAAAA,WAAiB0rE,WAIpCnqE,EAASoqE,aAAaF,EAAgBD,GADpB,GAElBjqE,EAAS6oE,iBAAiBmB,EAAeC,EAC3C,CAEAtC,YAAAA,CAAaz0B,EAAGC,EAAGc,GAEjB,OAAQd,EAAE,GAAKD,EAAE,KAAOe,EAAE,GAAKf,EAAE,KAAOC,EAAE,GAAKD,EAAE,KAAOe,EAAE,GAAKf,EAAE,IAAM,CACzE,CAEAm0B,yCAAAA,CACEzyD,EACAwyD,EACApjE,GAKAojE,EAA6B1vE,SAASb,IACpC2C,KAAK6wE,iCAAiCz1D,EAAiB/d,EAAYmN,EAAM,GAE7E,CAEAqmE,gCAAAA,CACEz1D,EACA/d,EACAmN,GAKA,MAAM,KAAE4P,GAAS/c,EAEXmJ,EAAW4U,EAAgBmtB,YAAYnuB,EAAKrS,YAC5CM,EAAS7B,EAAS44B,YAClBg6B,EAAS/wD,EAAOo0B,gBAIhB48B,EAAUxI,GAAAA,GAAAA,IAAYrmD,EAAO4uD,GAC7BE,EAA+B,IAAIF,GAGzC,GAFAvI,GAAAA,GAAAA,eAAuByI,EAAgBD,GAGrC5uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,MAC9B7uD,KAAKC,IAAI4uD,EAAe,IAAM,KAC9B,CACA,MAAM7nB,EAA8B,CAAC,EAAG,EAAG,GACrCC,EAA4B,CAAC,EAAG,EAAG,GAEzCmf,GAAAA,GAAAA,IAAYxoD,EAAOg1B,WAAYi8B,EAAgB7nB,GAC/Cof,GAAAA,GAAAA,IAAYxoD,EAAOytB,SAAUwjC,EAAgB5nB,GAE7ClrC,EAASmrC,UAAU,CACjBtU,WAAYoU,EACZ3b,SAAU4b,IAEZlrC,EAAS6X,Q,CAEb,CAqEA6xD,gCAAAA,CACE1pE,EACAnJ,EACAgmC,EACAW,GAEA,MAAM,KAAE5pB,GAAS/c,GACX,eAAEqnE,GAAmBtqD,EAAKmjB,QAEhC,IAAK,IAAIhwB,EAAI,EAAGA,EAAIm3D,EAAe/kE,OAAQ4N,IAAK,CAC9C,MAAMwnB,EAAQ2vC,EAAen3D,GAAG,GAC1Bw4D,EAAgBrB,EAAen3D,GAAG,GAIxC,IAH6BvN,KAAKimE,8BAChCF,EAAc1qD,IAGd,SAKF,IADErb,KAAKmmE,oCAAoCJ,EAAc1qD,IAEvD,SAGF,MAAMkpB,EAA6B/9B,EAAS29B,cAAcpP,GAC1D,GAAIyP,GAAAA,GAAAA,SAAcnB,EAAckB,GAA8BP,EAO5D,OANA5pB,EAAKmjB,QAAQqnC,gBAAkBf,GAE/B7jE,KAAK8rD,SAAW,CACdzuD,cAGK03B,C,CAIX,OAAO,IACT,CAEAo7C,qCAAAA,CACE3pE,EACAnJ,EACAgmC,EACAW,GAEA,MAAM,KAAE5pB,GAAS/c,GACX,oBAAEsnE,GAAwBvqD,EAAKmjB,QAErC,IAAK,IAAIhwB,EAAI,EAAGA,EAAIo3D,EAAoBhlE,OAAQ4N,IAAK,CACnD,MAAMwnB,EAAQ4vC,EAAoBp3D,GAAG,GAC/Bw4D,EAAgBpB,EAAoBp3D,GAAG,GAI7C,IAH6BvN,KAAKimE,8BAChCF,EAAc1qD,IAGd,SAKF,IADErb,KAAKooE,yCAAyCrC,EAAc1qD,IAE5D,SAGF,MAAMkpB,EAA6B/9B,EAAS29B,cAAcpP,GAC1D,GAAIyP,GAAAA,GAAAA,SAAcnB,EAAckB,GAA8BP,EAS5D,OARA5pB,EAAKmjB,QAAQqnC,gBAAkBf,GAE/BzpD,EAAKyqD,kBAAoB,CAACkB,EAAc1qD,IAExCrb,KAAK8rD,SAAW,CACdzuD,cAGK03B,C,CAIX,OAAO,IACT,CAEAuxC,cAAAA,CAAe3jE,EAAStF,EAAYgmC,EAAcW,GAChD,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,YAAEqtD,EAAW,aAAEC,GAAiB1pD,EAASoB,OACzC6/D,EAAuBh9D,KAAKuE,KAChCihD,EAAcA,EAAcC,EAAeA,IAEvC,KAAE91C,GAAS/c,GAEX,eAAEqnE,GAAmBtqD,EAAKmjB,SAC1B,oBAAEonC,GAAwBvqD,EAAKmjB,QAC/BuoC,EAAkB,GAExB,IAAK,IAAIv4D,EAAI,EAAGA,EAAIm3D,EAAe/kE,OAAS,IAAK4N,EAAG,CAClD,MAAMw4D,EAAgBrB,EAAen3D,GAAG,GAClCy4D,EAAuBhmE,KAAKimE,8BAChCF,EAAc1qD,IAEV6qD,EACJlmE,KAAKmmE,oCAAoCJ,EAAc1qD,IAEzD,IAAK2qD,IAAyBE,EAC5B,SAGF,MAAMqJ,EAAe,CACnB17C,MAAO,CACLtiB,EAAGmzD,EAAen3D,GAAG,GAAG,GACxBiE,EAAGkzD,EAAen3D,GAAG,GAAG,IAE1BumB,IAAK,CACHviB,EAAGmzD,EAAen3D,GAAG,GAAG,GACxBiE,EAAGkzD,EAAen3D,GAAG,GAAG,KAItBiiE,EAAmBzN,GACvB,CAACwN,EAAa17C,MAAMtiB,EAAGg+D,EAAa17C,MAAMriB,GAC1C,CAAC+9D,EAAaz7C,IAAIviB,EAAGg+D,EAAaz7C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,KAG3BosC,EAAe,CACnB57C,MAAO,CACLtiB,EAAGmzD,EAAen3D,EAAI,GAAG,GAAG,GAC5BiE,EAAGkzD,EAAen3D,EAAI,GAAG,GAAG,IAE9BumB,IAAK,CACHviB,EAAGmzD,EAAen3D,EAAI,GAAG,GAAG,GAC5BiE,EAAGkzD,EAAen3D,EAAI,GAAG,GAAG,KAI1BmiE,EAAmB3N,GACvB,CAAC0N,EAAa57C,MAAMtiB,EAAGk+D,EAAa57C,MAAMriB,GAC1C,CAACi+D,EAAa37C,IAAIviB,EAAGk+D,EAAa37C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,MAG7BmsC,GAAoBxrC,GAAa0rC,GAAoB1rC,KACvD8hC,EAAgBjoE,KAAKkoE,EAAc1qD,IACnCjB,EAAKmjB,QAAQqnC,gBAAkBf,IAIjCt2D,G,CAGF,IAAK,IAAIA,EAAI,EAAGA,EAAIo3D,EAAoBhlE,OAAS,IAAK4N,EAAG,CACvD,MAAMw4D,EAAgBpB,EAAoBp3D,GAAG,GAC7C,GAAIu4D,EAAgB3vD,MAAMkF,GAAOA,IAAO0qD,EAAc1qD,KACpD,SAGF,MAAM2qD,EAAuBhmE,KAAKimE,8BAChCF,EAAc1qD,IAEViwD,EACJtrE,KAAKooE,yCAAyCrC,EAAc1qD,IAE9D,IAAK2qD,IAAyBsF,EAC5B,SAGF,MAAMwF,EAAqBnM,EAAoBp3D,GAAG,GAC5CwjE,EAAqBpM,EAAoBp3D,GAAG,GAE5Cm+C,EAAelnB,GAAAA,GAAAA,SACrBA,GAAAA,GAAAA,IAASknB,EAAcolB,EAAoBC,GAC3CvsC,GAAAA,GAAAA,MAAWknB,EAAcA,EAAc,IAEvC,MAAMkd,EAA6BpkC,GAAAA,GAAAA,SACnCA,GAAAA,GAAAA,SACEokC,EACAkI,EACAplB,GAEFlnB,GAAAA,GAAAA,UAAeokC,EAA4BA,GAE3C,MAAMI,EAA8BxkC,GAAAA,GAAAA,SACpCA,GAAAA,GAAAA,MACEwkC,EACAJ,EACuB,IAAvBnB,GAGF,MAAMuJ,EAA0BxsC,GAAAA,GAAAA,SAC1BysC,EAA0BzsC,GAAAA,GAAAA,SAChCA,GAAAA,GAAAA,IACEwsC,EACAtlB,EACAsd,GAEFxkC,GAAAA,GAAAA,SACEysC,EACAvlB,EACAsd,GAGF,MAAMuG,EAAe,CACnB17C,MAAO,CACLtiB,EAAGy/D,EAAwB,GAC3Bx/D,EAAGw/D,EAAwB,IAE7Bl9C,IAAK,CACHviB,EAAGu/D,EAAmB,GACtBt/D,EAAGs/D,EAAmB,KAIpBtB,EAAmBzN,GACvB,CAACwN,EAAa17C,MAAMtiB,EAAGg+D,EAAa17C,MAAMriB,GAC1C,CAAC+9D,EAAaz7C,IAAIviB,EAAGg+D,EAAaz7C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,KAG3BosC,EAAe,CACnB57C,MAAO,CACLtiB,EAAG0/D,EAAwB,GAC3Bz/D,EAAGy/D,EAAwB,IAE7Bn9C,IAAK,CACHviB,EAAGw/D,EAAmB,GACtBv/D,EAAGu/D,EAAmB,KAIpBrB,EAAmB3N,GACvB,CAAC0N,EAAa57C,MAAMtiB,EAAGk+D,EAAa57C,MAAMriB,GAC1C,CAACi+D,EAAa37C,IAAIviB,EAAGk+D,EAAa37C,IAAItiB,GACtC,CAAC6xB,EAAa,GAAIA,EAAa,MAG7BmsC,GAAoBxrC,GAAa0rC,GAAoB1rC,KACvD8hC,EAAgBjoE,KAAKkoE,EAAc1qD,IACnCjB,EAAKmjB,QAAQqnC,gBAAkB,MAIjCr3D,G,CASF,OANA6M,EAAKyqD,kBAAoB,IAAIiB,GAE7B9lE,KAAK8rD,SAAW,CACdzuD,cAGK+c,EAAKmjB,QAAQqnC,kBAAoBf,EAC1C,EAGFC,GAAenjE,SAAW,aAC1B,YC7oFMuwE,GAAsB,mBAE5B,MAAMC,WAAoB3kD,GAWxBjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbwkD,YAAa,GACbC,aAAc,IACdC,cAAe,OAInBpuC,MAAMzW,EAAWC,GAiBnB,KAAA69B,qBAAwBtnD,IACtB,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,cAAE4F,GAAkBrF,EAC7BN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC,KAAM4D,aAAoB0V,GAAAA,eACxB,MAAM,IAAIpZ,MAAM,4CAGlB,MAAM+5B,EAAoB78B,KAAKuxE,sBAAsB/qE,GAErD,IAAKq2B,EACH,MAAM,IAAI/5B,MACR,qFAIJ,MAAMguC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAoBP,OAjBAptB,KAAK8rD,SAAW,CACdjvB,oBACAiU,sBACAluC,iBACAwY,kBACA7S,iBAGFvI,KAAKwxE,+BACLxxE,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,IAEhD,CAAI,EAGb,KAAAulB,sBAAyBpzD,IACvBjD,KAAKuqD,qBAAqBtnD,EAAI,EAGhC,KAAAuuE,6BAA+B,KAC7B,MAAM,eACJ5uE,EAAc,kBACdi6B,EAAiB,oBACjBiU,EAAmB,gBACnB11B,EAAe,cACf7S,GACEvI,KAAK8rD,UACH,SAAEtlD,GAAa5D,GACf,QAAED,GAAY6D,EACdirE,EAAqBjrE,EAAS+rD,iBAE5B3qD,OAAQ8pE,EAAW7pE,MAAOg7B,GAAat6B,EAE/C,IAAIopE,EAGJ,GADAA,EAAqBhvE,EAAQ+sB,cAAc,gBAChB,OAAvBiiD,EAA6B,CAC/B,MAAMC,EAAiBvnE,SAASwnE,cAAc,OAE9CD,EAAeE,UAAUn0E,IAAI,eAE7Bi0E,EAAer9C,MAAMoT,QAAU,QAC/BiqC,EAAer9C,MAAM1D,MAAQ,GAAG7wB,KAAK4sB,cAAcykD,iBACnDO,EAAer9C,MAAMjB,OAAS,GAAGtzB,KAAK4sB,cAAc0kD,kBACpDM,EAAer9C,MAAMuB,SAAW,WAEhC67C,EAAqBC,EAEGjvE,EAAQ+sB,cAAc,qBAC9BP,YAAYyiD,GAE5B,MAAMG,EAAgB,CACpBhqE,WAAYmpE,GACZ/kE,KAAMlH,GAAAA,MAAAA,aAAmB+sE,MACzBrvE,QAASgvE,GAGXv2D,EAAgB62D,cAAcF,E,CAIhCJ,EAAmBp9C,MAAMhtB,IACvBmqE,EAAU,GAAK1xE,KAAK4sB,cAAc0kD,cAAgB,EADrB,KAG/BK,EAAmBp9C,MAAMntB,KACvBsqE,EAAU,GAAK1xE,KAAK4sB,cAAcykD,aAAe,EADnB,KAIhC,MAAMa,EAAkB92D,EAAgBmtB,YACtC2oC,IAGFgB,EAAgBC,SAAS,CAACt1C,IAAoBkL,MAAK,KAEjDmqC,EAAgBlf,cAAcye,GAG9B,MAAM,cAAEjb,GAAkBhwD,EAAS44B,aAE7B,WAAE/B,EAAU,SAAEvH,EAAQ,gBAAE2G,GAC5By1C,EAAgB9yC,YAEZ1H,EAAWjtB,KAAKuE,KACpBvE,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,GACpCrrB,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,GACtCrrB,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,IAGpCq5B,EAAkC,CACtCtsB,EAAS,GACTA,EAAS,GACTA,EAAS,IAGLqsB,EAAgC,CACpCC,EAAkB,GAAKz3B,EAAW+E,EAAgB,GAClD0yB,EAAkB,GAAKz3B,EAAW+E,EAAgB,GAClD0yB,EAAkB,GAAKz3B,EAAW+E,EAAgB,IAGpDy1C,EAAgBvgC,UAAU,CACxB6kB,cAAeA,GAAiB,EAAIx2D,KAAK4sB,cAAcwkD,aACvD/zC,WAAY8xB,EACZr5B,SAAUo5B,IAEZgjB,EAAgB7zD,QAAQ,IAG1BszD,EAAmBp9C,MAAMoT,QAAU,QACnCg+B,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAma,cAAiBhoD,IACf,MAAMC,EAAcD,EAAI1F,QAElB,YAAEiL,EAAW,QAAE7F,EAAO,cAAE4F,GAAkBrF,EAC1C+rD,EAAmBzmD,EAAYX,MAC/B6pE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAEtBsvE,EAAkB92D,EAAgBmtB,YAAY2oC,IAE9CU,EAAiBjvE,EAAQ+sB,cAC7B,gBAGF,IAAKkiD,EACH,OAGFA,EAAer9C,MAAMhtB,IACnBmqE,EAAU,GAAK1xE,KAAK4sB,cAAc0kD,cAAgB,EADzB,KAG3BM,EAAer9C,MAAMntB,KACnBsqE,EAAU,GAAK1xE,KAAK4sB,cAAcykD,aAAe,EADvB,KAI5B,MAAM,WAAEh0C,EAAU,SAAEvH,GAAao8C,EAAgB9yC,YAE3C8vB,EAAgC,CACpCp5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,GAC/Bn5B,EAAS,GAAKm5B,EAAiB,IAG3BE,EAAkC,CACtC9xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,GACjC5xB,EAAW,GAAK4xB,EAAiB,IAGnCijB,EAAgBvgC,UAAU,CACxBtU,WAAY8xB,EACZr5B,SAAUo5B,IAGZgjB,EAAgB7zD,QAAQ,EAG1B,KAAA+zD,iBAAoBnvE,IAClB,MAAM,QAAEN,GAAYM,EAAI1F,OAClBqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5BwY,EAAgBi3D,eAAenB,IAE/B,MAAM1hD,EAAkB7sB,EAAQ+sB,cAAc,qBAExCiiD,EAAqBniD,EAAgBE,cACzC,gBAGFF,EAAgBD,YAAYoiD,GAE5B3xE,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,EAAQ,EAG7B,KAAA+nD,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKoyE,kBAEPzvE,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKoyE,kBAGPzvE,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKoyE,kBAEPzvE,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAE,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKoyE,kBAEPzvE,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKoyE,kBAEPzvE,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKoyE,kBAEPzvE,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,CA/QH,CAEAsmB,qBAAAA,CACE/qE,GAEA,MAAMynB,EAAWjuB,KAAKuuB,YAAY/nB,GAElC,IAAIq2B,EAMJ,OAJIr2B,aAAoB0V,GAAAA,gBACtB2gB,EAAoB5O,EAASE,MAAM,YAAY,IAG1C0O,CACT,EAqQFs0C,GAAYxwE,SAAW,UACvB,YCpTc,SAAU2xE,GACtBC,GAEA,MAAO9hD,EAAQqD,GAAOy+C,EACtB,OAAOpW,GAAgB1rC,EAAQqD,EACjC,CCHc,SAAU0+C,GACtBD,GAEA,MAAO9hD,EAAQqD,GAAOy+C,EAChB7hD,EAASyrC,GAAgB1rC,EAAQqD,GAKvC,MAAO,CAHuB,CAACrD,EAAO,GAAKC,EAAQD,EAAO,GAAKC,GAC7B,CAACD,EAAO,GAAKC,EAAQD,EAAO,GAAKC,GAGrE,CCEA,MAIM+hD,GAAkB5yD,GAAUA,EAAMrd,MAAQqd,EAAM6yD,YAqBtD,MAAMC,GAoBJpwE,WAAAA,EAAY,kBACVqwE,EAAiB,qBACjBC,EAAoB,OACpBniD,EA/CoC,IA+CI,SACxCoF,EAAW,CAAC,EAAG,GAAE,WACjBg9C,EAAU,QACV9O,IAvBM,KAAA+O,gBAAyC,KACzC,KAAAC,iBAA+B,KAC/B,KAAAC,kBAAgC,KAChC,KAAAC,kBAAmB,EACnB,KAAAC,QAAU,EACV,KAAAC,UAAW,EAEX,KAAAC,aAAc,EA8BpBrzE,KAAKszE,YAAcV,GAAqBl9D,GAAAA,UAAAA,SACxC1V,KAAKuzE,sBAAwBV,EAC7B7yE,KAAKwzE,SAAWxP,EAGhBhkE,KAAK0wB,OAASA,EACd1wB,KAAK81B,SAAWA,EAChB91B,KAAK8yE,WAAaA,EAClB9yE,KAAKuB,SAAU,EAEfvB,KAAKyzE,0BAA4BzzE,KAAKyzE,0BAA0BhnE,KAAKzM,MACrEA,KAAK0zE,wBAA0B1zE,KAAK0zE,wBAAwBjnE,KAAKzM,MACjEA,KAAK2zE,uBAAyB3zE,KAAK2zE,uBAAuBlnE,KAAKzM,MAC/DA,KAAK4zE,mBAAqB5zE,KAAK4zE,mBAAmBnnE,KAAKzM,MACvDA,KAAK6zE,qBACHlmC,GAAS3tC,KAAK8zE,gBAAgBrnE,KAAKzM,MAAO,GAG5CA,KAAKkgD,aACP,CAEA,wBAAW2yB,GACT,OAAO7yE,KAAKuzE,qBACd,CAEA,cAAWxrE,GACT,OAAO/H,KAAKszE,WACd,CAEA,UAAW5iD,GACT,OAAO1wB,KAAKmzE,OACd,CAEA,UAAWziD,CAAOA,GAGZjmB,KAAKC,IAAI1K,KAAKmzE,QAAUziD,GAAU,OACpC1wB,KAAKmzE,QAAUziD,EACf1wB,KAAKozE,UAAW,EAEpB,CAEOxtC,MAAAA,GACL,MAAM,OAAElV,EAAM,SAAEoF,EAAQ,QAAEv0B,GAAYvB,MAChC,SAAEwG,GAAaxG,KAAK+yE,iBACpB,QAAEpwE,GAAY6D,EACd/H,EAAO,EAAIiyB,GACVnf,EAAGC,GAAKskB,EAEX91B,KAAKozE,WACPpzE,KAAK6zE,uBACL7zE,KAAKozE,UAAW,GAGlBv0E,OAAOqmB,OAAOviB,EAAQ4xB,MAAO,CAC3BoT,QAASpmC,EAAU,QAAU,SAC7BsvB,MAAO,GAAGpyB,MACV60B,OAAQ,GAAG70B,MACX2I,MAAUspB,EAAJ,KACNnpB,KAASmpB,EAAJ,KACLiC,UAAW,aAAaphB,QAAQC,SAG9BxR,KAAKkzE,mBACPlzE,KAAK+zE,iBACLvtE,EAAS6X,SAEb,CAEO21D,OAAAA,GACL,MAAM,SAAExtE,GAAaxG,KAAK+yE,iBACpB,QAAEpwE,GAAY6D,EACd4U,EAAkB5U,EAASo1B,qBAEjC57B,KAAKi0E,sBAAsBtxE,GAC3ByY,EAAgBi3D,eAAe7rE,EAAS6U,IAEpC1Y,EAAQuxE,YACVvxE,EAAQuxE,WAAW3kD,YAAY5sB,EAEnC,CAEQgxE,sBAAAA,CAAuB1wE,GAC7B,MAAQgwE,kBAAmBkB,GAAqBn0E,MAC1C,YAAEuW,EAAW,SAAE5V,EAAQ,KAAEusB,EAAI,oBAAEknD,GAAwBnxE,EAAI1F,OAEjE,GAAIyC,KAAKgzE,kBAAkB33D,KAAO9E,EAIlC,OAAQ2W,GACN,KAAKtwB,GAAUy9B,OACb85C,EAAiBE,cAAc1zE,EAAUyzE,GACzC,MACF,KAAKx3E,GAAU09B,QACb65C,EAAiBG,eAAe3zE,GAChC,MACF,KAAK/D,GAAU29B,QACb45C,EAAiBI,eAAe5zE,GAChC,MACF,KAAK/D,GAAUuwB,SACbgnD,EAAiBK,gBAAgB7zE,GACjC,MACF,QACE,MAAM,IAAImC,MAAM,qBAAqBoqB,MAE3C,CAKQunD,oBAAAA,CAAqB7C,GAC3B,MAAMprE,EAAWorE,EAAeliD,cAAc,qBACxC9nB,EAASgqE,EAAeliD,cAAc,uBAE5ClpB,EAAS+tB,MAAMmgD,aAAe,UAC9B9sE,EAAO2sB,MAAMmgD,aAAe,SAC9B,CAEQC,mBAAAA,GACN,MAAM/C,EAAiBvnE,SAASwnE,cAAc,QACxC,OAAEnhD,GAAW1wB,KACbvB,EAAgB,EAATiyB,EAsBb,OApBAkhD,EAAeE,UAAUn0E,IA7LH,uBAoMtBkB,OAAOqmB,OAAO0sD,EAAer9C,MAAO,CAClCoT,QAAS,QACT9W,MAAO,GAAGpyB,MACV60B,OAAQ,GAAG70B,MACXq3B,SAAU,WACV8+C,SAAU,SACVF,aAAc,MACdG,UAAW,aACXztE,MAAUspB,EAAJ,KACNnpB,KAASmpB,EAAJ,KACLiC,UAAW,gCAGNi/C,CACT,CAEQkD,iCAAAA,CACNtuE,EACA0rE,EACAY,GAEA,MAAM,cAAEtc,GAAkBhwD,EAAS44B,YAInC,OAAOo3B,GAAiB,EAAIsc,IAF1BZ,EAAgBtqE,OAAOmtE,YAAcvuE,EAASoB,OAAOmtE,YAGzD,CAEQC,gBAAAA,CACNxuE,GAEA,MAAO,aAAcA,CACvB,CAEQyuE,iBAAAA,CACNzuE,GAEA,MAAO,eAAgBA,CACzB,CAEQ0uE,gBAAAA,CACNC,EACAjD,GAEA,MAAMkD,EAAeD,EAAe9tD,YAC9BguD,EAAqB,GAAGnD,EAAgB72D,eACxCi6D,EAAkBv7C,GACtBo7C,EAAe95D,GACf85D,EAAentE,mBAGXmsE,EAAmBmB,EAAgBC,MACvCF,GACC10E,IACC,MAAMw5B,EAAem7C,EAAgBl7C,gBAAgBz5B,GAKrD,OAHEw5B,aAAwB8I,MACtB9I,aAAwBq7C,KAGN70E,IAAa0mC,GAAwB1mC,QAAQ,IAmBvE,OAdAwzE,EAAiBsB,YACfvD,EAAgB72D,GAChB62D,EAAgBlqE,mBAGlBotE,EAAax0E,OAAO6xE,IAAgBv0E,SAAS2hB,IAC3CzJ,GAA4Ci/D,EAAoB,CAC9D,CACEn/D,eAAgB2J,EAAM6yD,YACtBvmE,KAAMpP,GAA4BwY,WAEpC,IAGG,CAAE+/D,kBAAiBnB,mBAC5B,CAEQuB,WAAAA,CACNP,EACAjD,GAEA,MAAMyD,EAAWR,EAAe7mC,cAEhC4jC,EAAgBC,SAASwD,GAAU5tC,MAAK,KACtC/nC,KAAKkzE,kBAAmB,EACxBlzE,KAAK4lC,QAAQ,GAEjB,CAEQgwC,aAAAA,CACNT,EACAjD,GAEA,MACM2D,EADSV,EAAe9tD,YAE3BzmB,QAAQif,IAAW4yD,GAAe5yD,KAClCvS,KAAKuS,IAAK,CAAQ5E,SAAU4E,EAAMrd,QAOrC,OALA0vE,EAAgB4D,WAAWD,GAAkB9tC,MAAK,KAChD/nC,KAAKkzE,kBAAmB,EACxBlzE,KAAK4lC,QAAQ,IAGRssC,CACT,CAEQ6D,cAAAA,CAAeZ,EAAgBvD,GACrC,MAAQ7pE,WAAY6qE,GAAsB5yE,KACpCob,EACJ+5D,EAAev5C,sBAETlS,QAASssD,GAA0Bb,EACrCpD,EAAgB,CACpBpvE,QAASivE,EACT7pE,WAAY6qE,EACZzmE,KAAMgpE,EAAehpE,KACrB8pE,eAAgB,IAAKD,IAGvB56D,EAAgB62D,cAAcF,GAE9B,MAAMG,EACJ92D,EAAgBmtB,YAAYqqC,GAG1B5yE,KAAKg1E,iBAAiBG,GACxBn1E,KAAK01E,YAAYP,EAAgBjD,GACxBlyE,KAAKi1E,kBAAkBE,IAChCn1E,KAAK41E,cACHT,EACAjD,GAKJlyE,KAAKy0E,qBAAqB7C,GAE1B,MAAMnsE,EAAazF,KAAKk1E,iBAAiBC,EAAgBjD,GAEzDlyE,KAAKgzE,iBAAmBvtE,EAAW6vE,gBACnCt1E,KAAKizE,kBAAoBxtE,EAAW0uE,gBACtC,CAEQ+B,yBAAAA,CAA0BjzE,GAChCA,EAAIsJ,kBACJtJ,EAAIyF,gBACN,CAEQgrE,uBAAAA,CAAwBzwE,GAC9B,MAAM,QAAEN,GAAY3C,KAAK+yE,gBAAgBvsE,SAEzC6D,SAASC,oBAAoB,UAAWtK,KAAK0zE,yBAG7C/wE,EAAQqC,iBAAiB,UAAWhF,KAAKk2E,2BACzCvzE,EAAQqC,iBAAiB,YAAahF,KAAKk2E,0BAC7C,CAEQzC,yBAAAA,CAA0BxwE,GAChC,MAAM,QAAEN,GAAY3C,KAAK+yE,gBAAgBvsE,SAKzCxG,KAAKqzE,cAAgBpwE,EAAIkzE,QAAQC,QAAQ,wBAGzC/rE,SAASrF,iBAAiB,UAAWhF,KAAK0zE,yBAO1C/wE,EAAQ2H,oBAAoB,UAAWtK,KAAKk2E,2BAC5CvzE,EAAQ2H,oBAAoB,YAAatK,KAAKk2E,0BAChD,CAEQtC,kBAAAA,CAAmB3wE,GACzB,IAAK0B,GAAMW,sBACT,OAGF,MAAQkuE,SAAUxP,GAAYhkE,KAE9B,IAAKgkE,EAAQ1a,UAAYtpD,KAAKqzE,YAC5B,OAGF,MAAM,cAAE9qE,GAAkBtF,EAAI1F,QACxB,SAAEiJ,GAAaxG,KAAK+yE,iBACpB,cAAEjrE,GAAkBtB,GAClBoB,OAAQyuE,GAAkB9tE,GAC1BmoB,OAAQ4lD,GAAkBt2E,KAC5Bu2E,EAA6B,CAACD,EAAeA,GAC7Cpa,EAAOC,GAAgBoa,EAAcF,GACrCG,EAAUF,EAAgBtS,EAAQjuC,QAGxC,GAAImmC,GAAQsa,EACV,OAGF,MAAMC,EAAUva,EAAOsa,EACjBE,EAAiBlyC,GAAAA,GAAAA,IACrBA,GAAAA,GAAAA,SACA6xC,EACAE,GAGF/xC,GAAAA,GAAAA,UAAekyC,EAAgBA,GAC/BlyC,GAAAA,GAAAA,MAAWkyC,EAAgBA,EAAgBD,GAE3C,MAAME,EAAoBnyC,GAAAA,GAAAA,IACxBA,GAAAA,GAAAA,SACAxkC,KAAK81B,SACL4gD,GAEIE,EAAkB9uE,EAAc9H,KAAK81B,UACrCyqC,EAAcz4D,EAAc6uE,GAC5BE,EAAgB55C,GAAAA,GAAAA,IACpBA,GAAAA,GAAAA,SACAsjC,EACAqW,GAGIE,EAA2C,CAC/C7rE,OAAQ,CACN8rE,gBAAiB,CACfnvE,OAAQ5H,KAAK81B,SACbjuB,MAAO+uE,GAETllC,YAAa,CACX9pC,OAAQ+uE,EACR9uE,MAAO04D,IAGX/1D,MAAO,CACL5C,OAAQ8uE,EACR7uE,MAAOgvE,IAIX7S,EAAQt5B,SAASosC,EACnB,CAEQE,yBAAAA,CAA0Br0E,GAIhC0H,SAASrF,iBACP,YACAhF,KAAKyzE,2BACL,GAKF9wE,EAAQqC,iBAAiB,YAAahF,KAAKk2E,2BAC3CvzE,EAAQqC,iBAAiB,UAAWhF,KAAKk2E,2BACzCvzE,EAAQqC,iBAAiB,YAAahF,KAAKk2E,2BAC3CvzE,EAAQqC,iBAAiB,WAAYhF,KAAKk2E,0BAC5C,CAEQe,4BAAAA,CAA6Bt0E,GACnC0H,SAASC,oBACP,YACAtK,KAAKyzE,2BACL,GAEFppE,SAASC,oBAAoB,UAAWtK,KAAK0zE,yBAE7C/wE,EAAQ2H,oBAAoB,YAAatK,KAAKk2E,2BAC9CvzE,EAAQ2H,oBAAoB,UAAWtK,KAAKk2E,2BAC5CvzE,EAAQ2H,oBAAoB,YAAatK,KAAKk2E,2BAC9CvzE,EAAQ2H,oBAAoB,WAAYtK,KAAKk2E,0BAC/C,CAEQgB,kBAAAA,CAAmBv0E,GACzB7C,GAAAA,YAAYkF,iBACVmyE,GAAUC,kBACVp3E,KAAK2zE,wBAGPhxE,EAAQqC,iBACNmyE,GAAUxuE,WACV3I,KAAK4zE,oBAGPjxE,EAAQqC,iBACNmyE,GAAUnuE,WACVhJ,KAAK4zE,oBAGP5zE,KAAKg3E,0BAA0Br0E,EACjC,CAEQsxE,qBAAAA,CAAsBtxE,GAC5B7C,GAAAA,YAAYwK,oBACV6sE,GAAUC,kBACVp3E,KAAK2zE,wBAGPhxE,EAAQqC,iBACNmyE,GAAUxuE,WACV3I,KAAK4zE,oBAGPjxE,EAAQqC,iBACNmyE,GAAUnuE,WACVhJ,KAAK4zE,oBAGP5zE,KAAKi3E,6BAA6Bt0E,EACpC,CAEQu9C,WAAAA,GACN,MAAQqzB,sBAAuBV,GAAyB7yE,MAChDwG,SAAU2uE,GAAmBtC,GAC7BjrE,OAAQyvE,GAAiBlC,EAC3BvD,EAAiB5xE,KAAK20E,sBAE5B0C,EAAanD,WAAW/kD,YAAYyiD,GAEpC5xE,KAAKk3E,mBAAmBtF,GACxB5xE,KAAK+1E,eAAeZ,EAAgBvD,GACpC5xE,KAAK+yE,iBAAkBlwE,EAAAA,GAAAA,mBAAkB+uE,EAC3C,CAEQ0F,qBAAAA,CAAsBnC,EAAgBjD,GAC5C,MAAMrvC,EAAWsyC,EAAertE,cAAc9H,KAAK81B,UAG7C0gC,EAAgBx2D,KAAK80E,kCACzBK,EACAjD,EACAlyE,KAAK8yE,aAGD,WAAEz1C,EAAU,SAAEvH,EAAQ,gBAAE2G,GAC5By1C,EAAgB9yC,YAEZ1H,EAAWjtB,KAAKuE,KACpBvE,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,GACpCrrB,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,GACtCrrB,KAAKwE,IAAIouB,EAAW,GAAKvH,EAAS,GAAI,IAGpCq5B,EAAkC,CACtCtsB,EAAS,GACTA,EAAS,GACTA,EAAS,IAGLqsB,EAAgC,CACpCC,EAAkB,GAAKz3B,EAAW+E,EAAgB,GAClD0yB,EAAkB,GAAKz3B,EAAW+E,EAAgB,GAClD0yB,EAAkB,GAAKz3B,EAAW+E,EAAgB,IAGpDy1C,EAAgBvgC,UAAU,CACxB6kB,gBACAn5B,WAAY8xB,EACZr5B,SAAUo5B,GAEd,CAEQqoB,mBAAAA,CACNpC,EACAjD,GAEAA,EAAgBsF,gBAAgBrC,EAAe3vC,yBACjD,CAEQuuC,cAAAA,GACN,MAAQvtE,SAAU2uE,GAAmBn1E,KAAKuzE,uBAClC/sE,SAAU0rE,GAAoBlyE,KAAK+yE,gBACrC0E,EAAmBtC,EAAe5iB,gBAExC2f,EAAgBlf,cAAcykB,GAC9Bz3E,KAAKs3E,sBAAsBnC,EAAgBjD,GAEvClyE,KAAKg1E,iBAAiBG,IACxBn1E,KAAKu3E,oBACHpC,EACAjD,EAGN,CAEQ4B,eAAAA,GACN,MAAM,SAAEttE,GAAaxG,KAAK+yE,gBACFvsE,EAASo1B,qBAEjB87C,QAClB,EC1lBF,MAEMp7C,GAAqB,EAAID,GAAAA,UAAAA,SACvBv/B,OAAMA,IAAKmI,GAAAA,MAmCnB,MAAM0yE,GAIJp1E,WAAAA,GAwBO,KAAAq1E,eAAiB,CACtBv6E,EACAujB,KAEA,MAAM,kBACJgyD,EAAiB,qBACjBC,EAAoB,SACpB/8C,EAAQ,OACRpF,EAAM,WACNoiD,EAAU,QACV9O,GACEpjD,GACIpa,SAAU2uE,GAAmBtC,GAC7BlwE,QAASk1E,GAAkB1C,EAE7BjD,EAAkB,IAAIS,GAAwB,CAClDC,oBACAC,uBACAniD,SACAoF,WACAg9C,aACA9O,YASF,OANAhkE,KAAK83E,+BAA+BD,GACpC73E,KAAK+3E,qBAAqB/4E,IAAIkzE,EAAgBnqE,WAAY,CACxD1K,aACA60E,oBAGKA,CAAe,EA6ChB,KAAA8F,2BAA8B/0E,IACpC,MAAM,WAAE5F,GAAe4F,EAAI1F,OA9II,oBAgJ3BF,EAAWyD,SAASH,UAIxBX,KAAKi4E,iBAAiB56E,EAAW+c,KAAKw4D,kBAAkB,EAclD,KAAAsF,uBACNj1E,IAEA,MAAQ8E,WAAYowE,EAAgB,QAAEt8D,GAAY5Y,EAAI1F,OAEpDyC,KAAKo4E,iDAAiDD,GAE7Bj6E,SAAQ,EAAGb,iBACpCA,EAAWyD,SAAS+7B,kBAAoBhhB,EACxCxe,EAAWkG,aAAc,CAAI,GAC7B,EAGI,KAAA80E,wBACNp1E,IAEA,MAAM,kBAAE+E,EAAmBD,WAAYowE,GAAqBl1E,EAAI1F,OAE1D43E,GADkBv5C,EAAAA,GAAAA,oBAAmB5zB,GACJugC,YAAY4vC,IAC3C17C,gBAAiB67C,GACvBnD,EAAe/1C,YAGfp/B,KAAKo4E,iDAAiDD,GAE7Bj6E,SAAQ,EAAGb,iBACpC,MAAM,gBAAEo/B,GAAoBp/B,EAAWyD,SAOvC,KAHE2J,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASR,EAAiB67C,IACnCh8C,IAGA,OAGF,MAAM,QAAEiB,GAAYlgC,EAAW+c,KACzBm+D,EAAuBpD,EAAertE,cAAc,CAAC,EAAG,IACxD0wE,EAAwBv7C,GAAAA,GAAAA,IAC5BA,GAAAA,GAAAA,SACAs7C,EACAh7C,EAAQtyB,OAAO,IAEXwtE,EAAYx7C,GAAAA,GAAAA,IAASu7C,EAAuBF,GAC5CI,EAAaz7C,GAAAA,GAAAA,MACjBA,GAAAA,GAAAA,SACAq7C,EACAG,GAIF,IAAK,IAAIlrE,EAAI,EAAGorE,EAAMp7C,EAAQtyB,OAAOtL,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACzD,MAAMwnB,EAAQwI,EAAQtyB,OAAOsC,GAE7BwnB,EAAM,IAAM2jD,EAAW,GACvB3jD,EAAM,IAAM2jD,EAAW,GACvB3jD,EAAM,IAAM2jD,EAAW,E,CAGzBr7E,EAAWkG,aAAc,CAAI,GAC7B,EApLFvD,KAAK+3E,qBAAuB,IAAIz7D,IAChCtc,KAAKkgD,aACP,CAQO,kBAAO04B,GAKZ,OAJAjB,GAA+BkB,WAC7BlB,GAA+BkB,YAC/B,IAAIlB,GAECA,GAA+BkB,UACxC,CA6COtwC,WAAAA,CAAYqqC,GACjB,OAAO5yE,KAAK+3E,qBAAqB74E,IAAI0zE,IAAoBV,eAC3D,CAMO8B,OAAAA,GACLh0E,KAAKi0E,wBACLj0E,KAAK84E,mBACP,CAEQb,gBAAAA,CAAiBrF,GACvB,MAAMmG,EACJ/4E,KAAK+3E,qBAAqB74E,IAAI0zE,GAEhC,GAAImG,EAAyB,CAC3B,MAAM,gBAAE7G,GAAoB6G,GACpBvyE,SAAU2uE,GAAmBjD,EAAgBW,sBAC7ClwE,QAASk1E,GAAkB1C,EAEnCn1E,KAAKg5E,kCAAkCnB,GAEvC3F,EAAgB8B,UAChBh0E,KAAK+3E,qBAAqBr4E,OAAOkzE,E,CAErC,CAEQkG,iBAAAA,GACqBz6E,MAAMC,KAAK0B,KAAK+3E,qBAAqB10E,QAE7CnF,SAAS00E,GAC1B5yE,KAAKi4E,iBAAiBrF,IAE1B,CAYQwF,gDAAAA,CAAiDD,GAKvD,OAJmC95E,MAAMC,KACvC0B,KAAK+3E,qBAAqBvxD,UAGM5lB,QAAO,EAAGsxE,sBAC1C,MAAM,SAAE1rE,GAAa0rE,EAAgBW,qBACrC,OAAOrsE,EAAS6U,KAAO88D,CAAgB,GAE3C,CAkEQjB,kBAAAA,GACNp3E,GAAAA,YAAYkF,iBACVmyE,GAAU8B,mBACVj5E,KAAKg4E,2BAET,CAEQ/D,qBAAAA,GACNn0E,GAAAA,YAAYwK,oBACV6sE,GAAU8B,mBACVj5E,KAAKg4E,2BAET,CAEQF,8BAAAA,CAA+Bn1E,GACrCA,EAAQqC,iBACNlI,GAAOiuC,gBACP/qC,KAAKk4E,wBAGPv1E,EAAQqC,iBACNlI,GAAOo8E,iBACPl5E,KAAKq4E,wBAET,CAEQW,iCAAAA,CAAkCr2E,GACxCA,EAAQ2H,oBACNxN,GAAOiuC,gBACP/qC,KAAKk4E,wBAGPv1E,EAAQ2H,oBACNxN,GAAOo8E,iBACPl5E,KAAKq4E,wBAET,CAEQn4B,WAAAA,GACNlgD,KAAKk3E,oBACP,E,ICjPGiC,IAAL,SAAKA,GACHA,EAAA,yCACD,CAFD,CAAKA,KAAAA,GAA0B,KAI/B,MAAM3D,WAA4BvyC,GAgBhC1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACRolD,gBAAiB,CACf1oD,OAAQ,IACRoiD,WAAY,IACZuG,eAAgB,CAAC,IAAK,EAAG,IAAK,EAAG,IAAK,GACtCrV,QAAS,CACP1a,SAAS,EACTvzB,QAAS,KAGb6zB,QAAS,CACP0vB,oBAAqB,CACnBzvB,OAAQ,sBACRC,SAAU,CACR,CACE5gD,YAAaxM,EAAc68E,UAC3BC,YAAa78E,GAAiB88E,aAQ1Cv2C,MAAMzW,EAAWC,GAYnB,KAAAk5C,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAChCigC,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,QACxBwxE,gBAAiBriE,GAAW/W,KAAK4sB,eACnC,OAAE8D,EAAM,WAAEoiD,EAAU,QAAE9O,GAAYjtD,EAElC2iE,EAAqB15E,KAAK25E,uBAC9BnzE,EACAkrE,EACAhhD,GAGIroB,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI3iC,EAAgBuV,GAAAA,UAAAA,SAChBk9D,EAAoBl9D,GAAAA,UAAAA,SACpB3S,EAAsByD,EAASq4B,yBAE/BxhC,EAAwC,CAC5C8C,gBACA6hC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJ+9D,iBAAkB3xE,EAAS6U,GAC3Bu3D,oBACAE,aACAv1C,QAAS,CACPtyB,OAAQyuE,EACRl2C,kBAAmB,QAKzBxjC,KAAK45E,uBAAuBhC,eAAev6E,EAAY,CACrDu1E,oBACAC,qBAAsBjwE,EACtBkzB,SAAU47C,EACVhhD,SACAoiD,aACA9O,QAAS,CACP1a,QAAS0a,EAAQ1a,QACjBvzB,QAASiuC,EAAQjuC,QACjB2U,SAAWtwB,IACT,MAAMy/D,EAAmBx8E,EAAW+c,KAAKmjB,QAAQtyB,QACzCpD,MAAO6wE,GAAet+D,EAAK5P,MAEnC,IAAK,IAAI+C,EAAI,EAAGorE,EAAMkB,EAAiBl6E,OAAQ4N,EAAIorE,EAAKprE,IACtDssE,EAAiBtsE,GAAG,IAAMmrE,EAAW,GACrCmB,EAAiBtsE,GAAG,IAAMmrE,EAAW,GACrCmB,EAAiBtsE,GAAG,IAAMmrE,EAAW,E,KAM7C10E,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAMP,OAHAnqB,EAAIyF,iBACJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcZ,KAAA0nC,gBAAkB,CACvBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAIlBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAO7D0kC,EAAY/nD,EAAkB,GAC9BgoD,EAAehoD,EAAkB,GACjCioD,EAAajoD,EAAkB,GAC/BrB,EAAoD,GAA3CjmB,KAAKC,IAAIqvE,EAAa,GAAKD,EAAU,IAK9CG,EAAc3H,GAAsB,CAJ3B,CACb0H,EAAW,GAAKtpD,EAChBopD,EAAU,GAAKppD,GAEkC2S,IAEnD,OAAI54B,KAAKC,IAAIuvE,EAAcvpD,GAAsB,IAAZsT,CAIzB,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,uBAGF+X,GAAkBlmD,GAElB3C,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,MAAM,OAAE/2B,GAAWmP,EAAKmjB,QAClB28C,EAAcjvE,EAAO5G,WAAW+wC,GAAMA,IAAMniB,IAG5C6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,eAEFl6E,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjB+c,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GAEvBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA5C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAEjBzU,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,GAIzC,KAAAq3E,kBAAqBt3E,IACnBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,YAAE6F,GAAgBtF,EAC3Bs3E,EAAgBhyE,GAAaX,OAAS,CAAC,EAAG,EAAG,GAC7CjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,GAEtB,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAK8rD,UAC3C,OAAE7gD,GAAW5N,EAAW+c,KAAKmjB,QAEnCtyB,EAAO/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAG9Bn9E,EAAWkG,aAAc,EACzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB9U,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA4pC,oBAAuBz3E,IACrBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,GAAgBl6E,KAAK8rD,UACxD,KAAE1xC,GAAS/c,EAEjB,QAAoBiG,IAAhB42E,EAA2B,CAE7B,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,MAEzBvD,KAAK26E,YAAY13E,GACjB5F,EAAWkG,aAAc,EAG3B,MAAMX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA6pC,YAAe13E,IACb,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,cAAEuhC,GAAkB39B,GAEpB,WAAEnJ,GAAe2C,KAAK8rD,UACtB,KAAE1xC,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAElBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAMjR,EAAciR,KACpD0kC,EAAY/nD,EAAkB,GAC9BgoD,EAAehoD,EAAkB,GACjCioD,EAAajoD,EAAkB,GAC/BrB,EAAoD,GAA3CjmB,KAAKC,IAAIqvE,EAAa,GAAKD,EAAU,IAC9CvD,EAA6B,CACjCyD,EAAW,GAAKtpD,EAChBopD,EAAU,GAAKppD,IAGX,cAAEnoB,GAAkBrF,EAGpB03E,EAAYtI,GAAsB,CACtCiE,EAH0BhuE,EAAcX,SAMpCizE,EAAwB76E,KAAK25E,uBACjCnzE,EACA+vE,EACAqE,GAGF3vE,EAAO,GAAK4vE,EAAsB,GAClC5vE,EAAO,GAAK4vE,EAAsB,GAClC5vE,EAAO,GAAK4vE,EAAsB,GAClC5vE,EAAO,GAAK4vE,EAAsB,EAAE,EAGtC,KAAAttC,OAAU5qC,IAER,IAAK3C,KAAKo6E,UACR,OAGFp6E,KAAKo6E,WAAY,EACjBp6E,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAI5B,GAFA+iE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,aAAa,EAGjC,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAcT,GAXApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,GAGFA,EAAcA,GAAaxC,QACxBvD,GAC6BA,EAAY+c,KAAK+9D,mBAC7C3xE,EAAS6U,MAGRjY,GAAazD,OAChB,OAAO6nE,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,kBAAEu1E,EAAiB,WAAEE,EAAU,QAAEv1C,GAAYnjB,GAC7C,OAAEnP,EAAM,kBAAEu4B,GAAsBjG,EAEtCqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,KAEnB0kC,EAAY/nD,EAAkB,GAC9BgoD,EAAehoD,EAAkB,GACjCioD,EAAajoD,EAAkB,GAC/BrB,EAAoD,GAA3CjmB,KAAKC,IAAIqvE,EAAa,GAAKD,EAAU,IAC9CrpD,EAAS,CACbupD,EAAW,GAAKtpD,EAChBopD,EAAU,GAAKppD,GAIjB,IAAKlqB,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIsT,EAEJ,IAAKj5E,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAE5BzO,GACEv8C,EACA3vB,EAHqB,IAKrB26E,EACA,CACE/2D,S,CAONwoC,GACEz8B,EACA3vB,EAHgB,IAKhBswB,EACAC,EACA,CACE3M,QACAgN,WACAD,aAXW,GAAG3wB,qBAgBlB,MAAM+xE,EACJlyE,KAAK45E,uBAAuBrxC,YAAYqqC,GAE1CV,EAAgBp8C,SAAWrF,EAC3ByhD,EAAgBxhD,OAASA,EACzBwhD,EAAgBY,WAAaA,EAC7BZ,EAAgBtsC,SAEhB4hC,GAAe,C,CAGjB,OAAOA,CAAY,EAmFb,KAAAmS,uBAAyB,CAC/BnzE,EACAu0E,EACAC,IAE4B,CAC1B,CAACD,EAAgB,GAAIA,EAAgB,GAAKC,GAC1C,CAACD,EAAgB,GAAKC,EAAcD,EAAgB,IACpD,CAACA,EAAgB,GAAIA,EAAgB,GAAKC,GAC1C,CAACD,EAAgB,GAAKC,EAAcD,EAAgB,KAGPztE,KAAK8nC,GAClD5uC,EAASsB,cAAcstC,KAnnBzBp1C,KAAK45E,uBAAyBjC,GAA+BiB,aAC/D,CAuhBOU,mBAAAA,CACLr2E,EACA5F,GAEA,MAAM,QAAEsF,EAAO,cAAE4F,GAAkBtF,EAAI1F,OACjCqF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACbgF,OAAQX,GAAgBsB,EAC1BinB,EAAkB7sB,EAAQ+sB,cAAc,4BACxCurD,EAAoB59E,EAAW+c,KAAK04D,WAGpCoI,EAAWl7E,KAAKm7E,4BACpBF,GACCG,SACuB93E,IAAlB83E,IACF/9E,EAAW+c,KAAK04D,WAAav7C,OAAOlE,WAAW+nD,GAC/C/9E,EAAWkG,aAAc,GAPV23E,EAASG,cAAc9rD,YAAY2rD,GAWpD10E,EAAS6X,QAAQ,IAIrBxf,OAAOqmB,OAAOg2D,EAAS3mD,MAAO,CAC5BntB,KAAM,GAAGH,EAAY,OACrBM,IAAK,GAAGN,EAAY,SAGtBuoB,EAAgBL,YAAY+rD,GAC5BA,EAASI,OACX,CAEQH,2BAAAA,CAA4BF,EAAmBM,GACrD,MAAM,eAAElC,GAAmBr5E,KAAK4sB,cAAcwsD,gBACxC8B,EAAW7wE,SAASwnE,cAAc,UAuCxC,OArCAqJ,EAASz8E,KAAO,EAChBI,OAAOqmB,OAAOg2D,EAAS3mD,MAAO,CAC5B1D,MAAO,OACPiF,SAAU,aAGZ,CAAC,YAAa,UAAW,YAAa,SAAS53B,SAASiK,IACtD+yE,EAASl2E,iBAAiBmD,GAAYlF,GAAQA,EAAIsJ,mBAAkB,IAGtE2uE,EAASl2E,iBAAiB,UAAW/B,IACnCA,EAAIsJ,kBACJgvE,EAAiBL,EAAS/5E,MAAM,IAGlC+5E,EAASl2E,iBAAiB,WAAY/B,MAEjCA,EAAIyQ,SAAyB,KAAdzQ,EAAIu4E,QACO,WAA3Bv4E,EAAIwQ,KAAKgoE,iBAGTx4E,EAAIsJ,kBACJgvE,I,IAIJlC,EAAen7E,SAAS40E,IACtB,MAAM4I,EAASrxE,SAASwnE,cAAc,UAEtC6J,EAAO1hE,MAAQ84D,EACf4I,EAAOC,MAAQ,eAAe7I,EAAW5tC,QAAQ,KACjDw2C,EAAOv6E,MAAQ2xE,EACf4I,EAAOE,gBAAkB9I,IAAemI,EAExCC,EAASv9E,IAAI+9E,EAAO,IAGfR,CACT,EAlpBI1F,GAEGqG,QAAU1C,GAsqBnB3D,GAAoB70E,SAAW,kBCrsB/B,MAAQy7B,QAAOA,IAAKC,GAAAA,UAMpB,MAAMy/C,WAAuBz5C,GAc3B9/B,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACburD,iBAAkB,GAClB4D,mBAAmB,KAIvB74C,MAAMzW,EAAWC,GAlBnB,KAAAo/B,SAIW,CAAC,EAuBZ,KAAAkwB,MAAQ,KACN,MACM5gE,GADmB6gE,EAAAA,GAAAA,uBACgB,GAGzC,IAAK7gE,EACH,OAGF,IAAIiT,EAAYjT,EAAgB2+C,eAChC1rC,EAAY+rC,GAA+B/rC,EAAWruB,KAAKotB,eAE3D,MAAM+nD,EAAiB/5D,EAAgBmtB,YACrCvoC,KAAK4sB,cAAcurD,kBAGrB,IAAKhD,IAAmBA,EAAe7mD,eACrC,OAGF,MAAM,QAAE3rB,GAAYwyE,GACd,OAAEryC,EAAM,gBAAErG,GAAoB04C,EAAe/1C,YAE7C88C,EACJxmE,GAAAA,UAAAA,+BAAuCy/D,GAEzC,IAAI93E,EAAa2C,KAAK8rD,SAASzuD,WAC/B,MAAM0F,EAAsBoyE,EAAet2C,yBAE3C,GAAKxhC,EAqBH2C,KAAK8rD,SAASzuD,WAAW+c,KAAKmjB,QAAQtyB,OACpCixE,MAtBa,CACf,MAAM/B,EAAyC,CAC7Cn4C,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,kBAAmB,MAErBziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQixE,KAKdl4E,GAAcm2E,EAAex3E,GAC7BtF,EAAa88E,C,CAMfn6E,KAAK8rD,SAAW,CACdqpB,iBACA/5D,kBACA/d,cAGFsoE,GACEvqD,EACAiT,EACGztB,QAAQ4F,GAAaA,EAAS6U,KAAO85D,EAAe95D,KACpD/N,KAAK9G,GAAaA,EAAS6U,KAC/B,EAGH,KAAA2sB,iBAAmB,KACjBhoC,KAAKg8E,OAAO,EAGd,KAAAxV,iBAAoBvjE,IAKlBjD,KAAKg8E,OAAO,EAWd,KAAAhgD,iBAAmB,CACjBp5B,EACAktB,KAEA,MAAQtpB,SAAU21E,GAAmBv5E,GAC/B,WAAEvF,EAAU,eAAE83E,GAAmBn1E,KAAK8rD,SAE5C,IAAI0b,GAAe,EAEnB,IAAK2N,EACH,OAAO3N,EAGT,GAAI2N,EAAe95D,KAAO8gE,EAAe9gE,GAEvC,OAAOmsD,EAGT,IAAKnqE,IAAeA,GAAY+c,MAAMmjB,SAAStyB,OAC7C,OAAOu8D,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAIhC6oB,EAAU7mC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GACzCm5B,EAAW/mC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GAC1Co5B,EAAahnC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GAC5Cq5B,EAAcjnC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,IAE7C,WAAEoyB,EAAU,gBAAEZ,EAAe,OAAEqG,GAAWq5C,EAAe/8C,aACvD3C,gBAAiB2/C,GACvBjH,EAAe/1C,YAEjB,GAAIp/B,KAAKm9B,WAAWV,EAAiB2/C,GAEnC,OAAO5U,EAGT,MAAM6U,EAAsB3mE,GAAAA,UAAAA,OAAAA,cAC1B+mB,EACAY,GAIIi/C,EAAY,CAACp4C,EAASG,EAAYD,EAAUE,GAC5Ci4C,EAAY,CAACr4C,EAASE,EAAUC,EAAYC,GAElD,IAAIk4C,EAAgBF,EAEhBG,EAAex/C,GAAAA,GAAAA,SAAcA,GAAAA,GAAAA,SAAeq/C,EAAU,GAAIA,EAAU,IACxEG,EAAex/C,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAew/C,GAE7C,IAAIC,EAAcz/C,GAAAA,GAAAA,SAAcA,GAAAA,GAAAA,SAAeq/C,EAAU,GAAIA,EAAU,IACvEI,EAAcz/C,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAey/C,GAE5C,MAAMC,EAAY1/C,GAAAA,GAAAA,MAChBA,GAAAA,GAAAA,SACAw/C,EACAC,GAGF,GAAI18E,KAAKm9B,WAAWw/C,EAAWlgD,GAC7B,OAAO+qC,EAKLxnE,KAAK48E,gBAAgBH,EAAchgD,KAErC+/C,EAAgBD,GAGlB,MAAMM,EAAiBnnE,GAAAA,UAAAA,OAAAA,sBACrB8mE,EAAc,GACdA,EAAc,GACdH,GAGIS,EAAepnE,GAAAA,UAAAA,OAAAA,sBACnB8mE,EAAc,GACdA,EAAc,GACdH,IAEI,cAAEl8E,GAAkB9C,EAE1BukC,EAAezhC,cAAgBA,EAC/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAC/C22B,EAASh0B,KAAKgjC,SAAS,SAAUpB,EAAgBvkC,GAEvD,IAAI00B,EAAoB,CAAC8qD,EAAgBC,GAAcxvE,KAAKzF,GAC1Ds0E,EAAeh4C,cAAct8B,KAG3B7H,KAAK4sB,cAAcmvD,oBACrBhqD,EAAoB/xB,KAAK+8E,oBACvBZ,EACAU,EACApgD,EACAqG,EACAg6C,EACA/qD,IAIJ,MAAMpB,EAAS,GAAGxwB,SAmBlB,OAjBAsrE,GACE37C,EACA3vB,EAHc,IAKd4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,WACAiD,UAEFrD,GAGF62C,GAAe,EAERA,CAAY,EAGrB,KAAAoV,gBAAkB,CAACI,EAAoBx4C,KACrC,MAAM/G,EAAMR,GAAAA,GAAAA,IAAS+/C,EAAMx4C,GAC3B,OAAO/5B,KAAKC,IAAI+yB,GAAOrB,EAAO,CAjOhC,CAoOQ2gD,mBAAAA,CACNZ,EACAU,EACApgD,EACAqG,EACAg6C,EACA/qD,GAEA,MAAM3W,EAAkB+gE,EAAevgD,qBACjC3N,EAAWjuB,KAAKuuB,YAAY4tD,GAC5Bc,EAAcj9E,KAAKguB,iBAAiBC,EAAU7S,GAE9CyhB,EAAoB78B,KAAK4iC,qBAC7Bu5C,EACAU,EACApgD,EACAqG,GAGF,GAAIjG,GAAqBogD,EACvB,IACE,MAAM,UAAEj0C,EAAS,WAAEqB,GAAe4yC,GAIhCC,EACAC,EACAC,EACAC,GACE,CACFr0C,EAAU2K,aAAa,CAAC,EAAG,EAAG,IAC9B3K,EAAU2K,aAAa,CAACtJ,EAAW,GAAK,EAAG,EAAG,IAC9CrB,EAAU2K,aAAa,CACrBtJ,EAAW,GAAK,EAChBA,EAAW,GAAK,EAChB,IAEFrB,EAAU2K,aAAa,CAAC,EAAGtJ,EAAW,GAAK,EAAG,KAC9C/8B,KAAKzF,GAAU6N,GAAAA,UAAAA,mBAA2BmnB,EAAmBh1B,MAGxDy1E,EAAqBC,GAAqB,CAC/CV,EACAC,GACAxvE,KAAKzF,GAAU6N,GAAAA,UAAAA,mBAA2BmnB,EAAmBh1B,KAG/DkqB,EAAoB,CAClB,CAACmrD,EAAmBC,GACpB,CAACA,EAAoBC,GACrB,CAACC,EAAsBD,GACvB,CAACF,EAAmBG,IAEnB/vE,KAAI,EAAEumB,EAAOC,KACZ9zB,KAAKw9E,uBACH3pD,EACAC,EACAwpD,EACAC,KAGH38E,QAAQm0B,GAAUA,GAAS/0B,KAAKy9E,UAAU1oD,EAAOsV,KACjD/8B,KAAKynB,IACJ,MAAMltB,EAAQ6N,GAAAA,UAAAA,mBACZmnB,EACA9H,GAEF,OAAOonD,EAAeh4C,cAAct8B,EAAM,G,CAE9C,MAAO61E,GACPhmE,QAAQ0wC,IAAIs1B,E,CAGhB,OAAO3rD,CACT,CAGAyrD,sBAAAA,CACElb,EACAC,EACAC,EACAC,GAEA,MAAOtuC,EAAIC,GAAMkuC,GACVjuC,EAAIC,GAAMiuC,GACVG,EAAIC,GAAMH,GACVI,EAAIC,GAAMJ,EAGXK,EAAKxuC,EAAKF,EACV2uC,EAAK5uC,EAAKE,EACV2uC,EAAK3uC,EAAKD,EAAKD,EAAKG,EAGpB6uC,EAAKN,EAAKF,EACVS,EAAKV,EAAKE,EACVS,EAAKT,EAAKD,EAAKD,EAAKG,EAE1B,GAAIp4D,KAAKC,IAAIo4D,EAAKM,EAAKD,EAAKJ,GAAM3mC,GAChC,OAMF,MAAO,EAHI2mC,EAAKM,EAAKD,EAAKJ,IAAOF,EAAKM,EAAKD,EAAKJ,IACrCI,EAAKH,EAAKF,EAAKO,IAAOP,EAAKM,EAAKD,EAAKJ,GAGlD,CAEA5lC,UAAAA,CAAW6/C,EAAoBx4C,GAC7B,OAAO/5B,KAAKC,IAAIuyB,GAAAA,GAAAA,IAAS+/C,EAAMx4C,IAAS,EAAIpI,EAC9C,CAEAqhD,SAAAA,CAAU1oD,EAAiBsV,GACzB,OACEtV,EAAM,IAAM,GACZA,EAAM,IAAMsV,EAAW,IACvBtV,EAAM,IAAM,GACZA,EAAM,IAAMsV,EAAW,EAE3B,EAGFyxC,GAAen7E,SAAW,iBAC1B,aC1XQy7B,QAAOA,IAAKC,GAAAA,UAYpB,MAAMshD,WAAwBt7C,GAS5B9/B,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbgxD,eAAgB,MAIpB16C,MAAMzW,EAAWC,GAGnB,KAAAsb,iBAAmB,KACjBhoC,KAAKg8E,OAAO,EAGd,KAAAjM,gBAAkB,KAChB/vE,KAAKg8E,OAAO,EAGd,KAAAA,MAAQ,KACN,MAAM4B,EAAiB59E,KAAK4sB,cAAcgxD,eAC1C,IAAKA,GAAgBj+E,OAInB,YAHA+X,QAAQC,KACN,gEAKJ,MAAMkmE,EAAmB9gD,GAAAA,SAAAA,IACvB,mBACA6gD,EAAe,IAGjB,IAAKC,EAIH,YAHAnmE,QAAQC,KACN,iEAKJ,MAAM,oBAAEhU,GAAwBk6E,EAE1Bl9D,EAAgBD,GAAa1gB,KAAKuW,aAAaoK,cAErD,IAAKA,GAAehhB,OAElB,YADA+X,QAAQC,KAAK,uCAIf,MAAMvU,EAAcK,GAAezD,KAAKotB,cAAezpB,GAEvD,IAAKP,GAAazD,OAAQ,CACxB,MAAMm+E,EAAYF,EAAetwE,KAAK+N,GAE7Brb,KAAK+9E,0BAA0B1iE,KAiBxCrX,GAd6C,CAC3Cg+B,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfrqB,oBAAqBY,EACrBk5B,kBAAmB,MAErBziB,KAAM,CACJ4jE,aAAc,IAAI1hE,IAClBwhE,cAIyBn6E,E,CAG/BgiE,IACE/pC,EAAAA,GAAAA,oBAAmBjb,EAAc,GAAG3Y,mBACpC2Y,EAAcrT,KAAI,EAAGvF,gBAAiBA,IACvC,EAQH,KAAAg2E,0BAA6BliE,IAC3B,MAAM,qBACJoiE,EAAoB,KACpBn+B,EAAI,QACJD,EAAO,WACP1M,EAAU,cACVC,EAAa,gBACb8qC,EAAe,mBACfC,GACEphD,GAAAA,SAAAA,IAAa,mBAAoBlhB,GAG/BqoB,EAAwB,IAAI+5C,GAC5B75C,EAAyB,IAAI65C,GAC7B55C,EAA2B,IAAI45C,GAC/B35C,EAA4B,IAAI25C,GAEtChhD,GAAAA,GAAAA,YACEmH,EACA65C,EACA7qC,EACAyM,EAAUs+B,GAEZlhD,GAAAA,GAAAA,YACEoH,EACA45C,EACA9qC,EACA2M,EAAOo+B,GAGTjhD,GAAAA,GAAAA,YACEqH,EACAD,EACA+O,EACAyM,EAAUs+B,GAOZ,MAAO,CAAE7B,UAHS,CAACp4C,EAASG,EAAYD,EAAUE,GAG9Bi4C,UAFF,CAACr4C,EAASE,EAAUC,EAAYC,GAEnB,EAWjC,KAAAtI,iBAAmB,CACjBp5B,EACAktB,KAEA,MAAM8tD,EAAiB59E,KAAK4sB,cAAcgxD,eAE1C,IAAIpW,GAAe,EACnB,IAAKoW,GAAgBj+E,OACnB,OAAO6nE,EAGT,MAAQhhE,SAAU21E,EAAc,oBAAEp5E,GAAwBH,EAE1D,GADuBu5E,EAAe7tC,cACnB3uC,OAAS,EAC1B,OAAO6nE,EAGT,MAAMpkE,EAAcK,GAAezD,KAAKotB,cAAerqB,GACvD,IAAKK,GAAazD,OAChB,OAAO6nE,EAET,MAAMnqE,EAAa+F,EAAY,IACzB,cAAEjD,GAAkB9C,GAEpB,WAAEggC,EAAU,gBAAEZ,GAAoB0/C,EAAe/8C,YAEjDwC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAEhC+iE,EACJp+E,KAAKq+E,iBAAiBT,EAAe,IAGvC,GAAI59E,KAAKm9B,WAAWV,EAAiB2hD,GAEnC,OAAO5W,EAGT,MAAM6U,EAAsB3mE,GAAAA,UAAAA,OAAAA,cAC1B+mB,EACAY,GAGIygD,EAAYzgF,EAAW+c,KAAK0jE,UAC5BE,EAAe3gF,EAAW+c,KAAK4jE,aACrC,IAAK,IAAIzwE,EAAI,EAAGA,EAAIqwE,EAAej+E,OAAQ4N,IAAK,CAE9C,MAAM,UAAE+uE,EAAS,UAAEC,GAAcuB,EAAUvwE,GAErC+wE,EACJN,EAAa9+E,IAAIi9E,EAAe9gE,KAChCrb,KAAKu+E,uBAAuBP,EAAc7B,EAAe9gE,IAG3D,IAAKijE,EAAWE,eAAejxE,GAAI,CACjC,IAAIivE,EAAgBF,EAEhBG,EAAex/C,GAAAA,GAAAA,SACjBA,GAAAA,GAAAA,SACAq/C,EAAU,GACVA,EAAU,IAEZG,EAAex/C,GAAAA,GAAAA,UACbA,GAAAA,GAAAA,SACAw/C,GAKEz8E,KAAK48E,gBAAgBH,EAAchgD,KAErC+/C,EAAgBD,GAGlB+B,EAAWE,eAAejxE,GAAKivE,EAE/B8B,EAAWG,gBAAgBlxE,GAAKmI,GAAAA,UAAAA,OAAAA,sBAC9B8mE,EAAc,GACdA,EAAc,GACdH,GAGFiC,EAAWI,cAAcnxE,GAAKmI,GAAAA,UAAAA,OAAAA,sBAC5B8mE,EAAc,GACdA,EAAc,GACdH,E,CAIJ,MAAMQ,EAAiByB,EAAWG,gBAAgBlxE,GAC5CuvE,EAAewB,EAAWI,cAAcnxE,GAE9Cq0B,EAAezhC,cAAgBA,EAC/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAC/C22B,EAASh0B,KAAKgjC,SAAS,SAAUpB,EAAgBvkC,GAEjD00B,EAAoB,CAAC8qD,EAAgBC,GAAcxvE,KAAKzF,GAC5Ds0E,EAAeh4C,cAAct8B,KAGzB8oB,EAAS,GAAGxwB,SAElBsrE,GACE37C,EACA3vB,EAHc,GAAGoN,IAKjBwkB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,WACAiD,UAEFrD,E,CAMJ,OAFA62C,GAAe,EAERA,CAAY,EAGb,KAAA+W,uBAAyB,CAACP,EAAc3iE,KAC9C2iE,EAAah/E,IAAIqc,EAAI,CACnBmjE,eAAgB,GAChBC,gBAAiB,GACjBC,cAAe,KAGVV,EAAa9+E,IAAImc,IAGlB,KAAAuhE,gBAAkB,CACxBI,EACAx4C,KAEA,MAAM/G,EAAMR,GAAAA,GAAAA,IAAS+/C,EAAMx4C,GAC3B,OAAO/5B,KAAKC,IAAI+yB,GAAOrB,EAAO,CA9QhC,CAiRQe,UAAAA,CAAW6/C,EAAoBx4C,GACrC,OAAO/5B,KAAKC,IAAIuyB,GAAAA,GAAAA,IAAS+/C,EAAMx4C,IAAS,EAAIpI,EAC9C,CAEQiiD,gBAAAA,CAAiBxiE,GACvB,MAAM,wBAAEihB,GAA4BC,GAAAA,SAAAA,IAClC,mBACAlhB,GAEImhB,EAAeC,GAAAA,GAAAA,WACnBH,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAEpBI,EAAeD,GAAAA,GAAAA,WACnBH,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAE1B,OAAOG,GAAAA,GAAAA,MAAWA,GAAAA,GAAAA,SAAeD,EAAcE,EACjD,EAGFygD,GAAgBh9E,SAAW,cAC3B,YC7UA,MAAMg+E,WAAqCt8C,GAGzC9/B,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BE,cAAe,CACbuG,QAAS,MAIb+P,MAAMzW,EAAWC,GAOnB,KAAAsvD,MAAQ,KACN,MAAMr7D,EAAgBD,GAAa1gB,KAAKuW,aAAaoK,cAErD,IAAKA,GAAehhB,OAElB,YADA+X,QAAQC,KAAK3X,KAAKotB,cAAgB,4BAIpC,MAAM43C,GAAgBppC,EAAAA,GAAAA,oBACpBjb,EAAc,GAAG3Y,oBAChBugC,YAAY5nB,EAAc,GAAG5Y,YAEhC,IAAKi9D,EACH,OAEF,MAAMrhE,EAAsBqhE,EAAcnmC,yBACpCz7B,EAAcK,GAAezD,KAAKotB,cAAezpB,GAEvD,IAAKP,GAAazD,OAAQ,CACxB,MAAMi/E,EAAuB,IAAItiE,KAiHvC,SACEsiE,EACAj+D,GAEAA,EAAcziB,SAAQ,EAAG6J,aAAYC,wBACnC,MAAMxB,GACJo1B,EAAAA,GAAAA,oBAAmB5zB,IAAoBugC,YAAYxgC,GACrD82E,GACED,EACAp4E,EACD,GAEL,CA5HMs4E,CACEF,EACAj+D,GAeF3c,GAb0D,CACxDg+B,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfrqB,oBAAqBY,EACrBk5B,kBAAmB,MAErBziB,KAAM,CACJwkE,yBAIyBj7E,E,CAG/BgiE,IACE/pC,EAAAA,GAAAA,oBAAmBjb,EAAc,GAAG3Y,mBACpC2Y,EAAcrT,KAAI,EAAGvF,gBAAiBA,IACvC,EAGH,KAAAigC,iBAAmB,KACjBhoC,KAAKg8E,OAAO,EAGd,KAAAxV,iBAAoBvjE,IAClBjD,KAAKg8E,OAAO,EASd,KAAAhgD,iBAAmB,CACjBp5B,EACAktB,KAEA,MAAM,SAAEtpB,EAAQ,oBAAEzD,GAAwBH,EAE1C,IAAI4kE,GAAe,EAEnB,MAAMpkE,EAAcK,GAAezD,KAAKotB,cAAerqB,GACvD,IAAKK,GAAazD,OAChB,OAAO6nE,EAET,MAAMnqE,EAAa+F,EAAY,IACzB,cAAEjD,GAAkB9C,EACpBuhF,EAAuBvhF,EAAW+c,KAAKwkE,qBAE7CC,GACED,EACAp4E,GAGF,MAAMsnB,EAAetnB,EAAS6gB,YACxBoe,EAAUs5C,GAAWv4E,GAyC3B,OAvCAsnB,EAAa5vB,SAASwgB,IACpB,IAAKA,GAAY4mB,eACf,OAEF,MAAM05C,EAAqBJ,EAAqB1/E,IAAIwf,EAAWlc,KAC/D,IAAKw8E,EACH,OAEF,IAAKA,EAAmB9/E,IAAIumC,GAC1B,OAEF,IAAIw5C,EAAc,EAClB,MAAM,eAAEC,EAAc,MAAEn7D,GAAUi7D,EAAmB9/E,IAAIumC,GACzD,IAAK,IAAIl4B,EAAI,EAAGA,EAAI2xE,EAAev/E,OAAQ4N,IAAK,CAC9C,MACM4yD,EADc+e,EAAe3xE,GACFD,KAAKynB,GACpCvuB,EAAS29B,cAAcpP,KAGnBrL,EAAU,CACd3F,MAAOA,EACP4Q,UAAW5Q,EACXiN,YAAahxB,KAAK4sB,cAAcuG,QAChCyB,oBAAoB,GAGhBuqD,EAAczgE,EAAWlc,IAAM,IAAMy8E,EAC3CxqD,GACE3E,EACA3vB,EACAg/E,EACAhf,EACAz2C,GAEFu1D,G,KAIJzX,GAAe,EACRA,CAAY,CAjIrB,EA8JF,SAASqX,GACPD,EACAp4E,GAEA,MAAMsnB,EAAetnB,EAAS6gB,YAIxBoe,EAAUs5C,GAAWv4E,GAE3BsnB,EAAa5vB,SAASwgB,IACpB,IAAKA,GAAY4mB,eACf,OAGF,IAAI85C,EAAsBR,EAAqB1/E,IAAIwf,EAAWlc,KAK9D,GAJK48E,IACHA,EAAsB,IAAI9iE,IAC1BsiE,EAAqB5/E,IAAI0f,EAAWlc,IAAK48E,KAEtCA,EAAoBlgF,IAAIumC,GAAU,CACrC,MACMy5C,EAAiBG,GADN3gE,EAAW4mB,eAAe1gB,iBAE3C,IAAKs6D,EACH,OAIF,MACMn7D,EAiBZ,SAAuBu7D,GACrB,SAASC,EAAuBC,GAC9B,IAAIC,EAAkBh1E,KAAK4qC,MAAkB,IAAZmqC,GAAiB9kC,SAAS,IAI3D,OAH+B,IAA3B+kC,EAAgB9/E,SAClB8/E,EAAkB,IAAMA,GAEnBA,CACT,CACA,MACE,IACAF,EAAuBD,EAAW,IAClCC,EAAuBD,EAAW,IAClCC,EAAuBD,EAAW,GAEtC,CA/BoBI,CADKhhE,EAAWmB,MAAMC,cAAckE,YAElDo7D,EAAoBpgF,IAAIymC,EAAS,CAAEy5C,iBAAgBn7D,S,IAGzD,CAEA,SAASg7D,GAAWv4E,GAClB,MAAM,gBAAEi2B,GAAoBj2B,EAAS44B,YAC/BmG,EAAa/+B,EAASg/B,yBAC5B,MAAO,GAAGh/B,EAAS6U,MAAM2pB,GAAcvI,MAAoB8I,GAC7D,CAkEAo5C,GAA6Bh+E,SAAW,2BACxC,YC5PA,MAAMg/E,WAAyBt9C,GAa7B9/B,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3BC,iBAAkB,EAClBC,cAAc,EACdx1B,eAAe,KAInBpnB,MAAMzW,EAAWC,GArBnB,KAAA0tD,WAAY,EACZ,KAAA2F,sBAAuB,EACvB,KAAAC,mBAA4C,KAC5C,KAAAC,4BAAmD,KACnD,KAAAC,uBAA8C,KAE9C,KAAAC,uBAAwB,EA4BxB,KAAAh9C,kBAAqBlgC,IACnB,MAAM,OAAE1F,GAAW0F,GACb,QAAEN,EAAO,cAAE4F,GAAkBhL,EAGnCyC,KAAKigF,4BAA8B13E,EAAcV,MACjD7H,KAAKkgF,uBAAyB33E,EAAcX,OAC5C5H,KAAKggF,mBAAqBr9E,EAE1B,MAAMtF,EAAa2C,KAAKogF,oBAAoBz9E,GAC5C,OAAmB,OAAftF,GACF2C,KAAKqgF,wBAAwB93E,EAAcV,MAAOlF,IAC3C,IAET3C,KAAKsgF,yBAAyB39E,EAAStF,IAChC,EAAK,EAwCd,KAAAgjF,wBAA0B,CACxBx9C,EACAlgC,KAEA,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GACzC,IAAKC,EACH,MAAM,IAAIE,MAAM,4BAElB,MAAM,SAAE0D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EACpC,IAAKo0B,IAAoBqG,EACvB,MAAM,IAAIhgC,MAAM,oBAGlB,MAAM+5B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CACPtyB,OAAQ,CAAC,IAAI43B,IACbW,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,QAS5C,GAFoB7gC,GAAezD,KAAKotB,cAAezqB,GAEvChD,OAAS,EACvB,OAAO,KAIT,GAAqB,OAFAqE,GAAc3G,EAAYsF,GAG7C,OAGF,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eACL,GAGFu4C,GAAsCvqD,EAAiB01B,EAAoB,EA2C7E,KAAA01B,iBAAoBvjE,IAClB,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,eAAE69E,EAAc,OAAEn4E,GAAWnF,EAEtCsD,GADiB3D,EAAAA,GAAAA,mBAAkBF,GACT6D,SAKhC,GAAI7D,IAAY3C,KAAKggF,mBACnB,OAGF,MAAMS,EAAgBD,EAAenjD,WAC/BqjD,EAAer4E,EAAOo0B,gBACtBgV,EAAgBppC,EAAOg1B,WAEvBypC,EAAsC,CAAC,EAAG,EAAG,GAGnD,GAFAjW,GAAAA,GAAAA,SAAiBpf,EAAegvC,EAAe3Z,GAEU,IAArDA,EAAsBn4D,QAAO,CAAC+qC,EAAGC,IAAMD,EAAIC,GAAG,GAChD,OAGF,MAAMyoB,EAAavR,GAAAA,GAAAA,IAAYiW,EAAuB4Z,GAEtD,GAAIj2E,KAAKC,IAAI03D,GAAc,IACzB,OAIF,IAAKpiE,KAAKkgF,uBACR,OAGF,MAAM3f,EAAc/5D,EAASsB,cAAc9H,KAAKkgF,wBAChDlgF,KAAKigF,4BAA8B1f,EACnCvgE,KAAKsgF,yBAAyB39E,EAAS3C,KAAKogF,oBAAoBz9E,GAAS,EAuC3E,KAAAq5B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,EAAQ,oBAAEzD,GAAwBH,EAEpC+9E,EAAsB3gF,KAAKggF,qBAAuBx5E,EAAS7D,QAG7D3C,KAAK4sB,cAAckzD,eAAiBa,GACtC3gF,KAAK4gF,oBAAoBp6E,GAG3B,MAAM,QAAE7D,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAST,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,QAAEkgC,GAAYnjB,GACd,OAAEnP,GAAWsyB,EAEnB,IAAKp9B,EACH,OAAOqnE,EAET5lC,EAAezhC,cAAgBA,EAE/B,MAAM0gF,EAAgBxtD,WACpBrzB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,IAGvCyzB,EAEA+vD,EAEA9vD,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAErD,GAAI4N,EAAO,GAAGwb,MAAMra,GAAM2nB,MAAM3nB,KAC9B,OAAOo7D,EAET,MAAMz1C,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,KAIzB,IAAK5uC,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAK3lE,GAAoB1B,GACvB,SAGF,MAAM2gF,EAAgB,CACpBtzB,MAAO,QACPt7B,MAAO,QACPq7B,MAAO,QACPnmD,KAAM,SAEDmK,EAAGC,GAAKugB,EAAkB,GAC3BgvD,EAAcJ,EAAsB,GAAK,EACzCK,EAAaL,EAAsB,EAAI,EAC7ChtD,GACE7D,EACA3vB,EACA2gF,EAActzB,MACd,CAACj8C,EAAGC,GAAKuvE,EAAc,EAAIC,IAC3B,CAACzvE,EAAGC,EAAIuvE,EAAc,GACtB,CAAEh9D,QAAOgN,WAAUD,cAErB6C,GACE7D,EACA3vB,EACA2gF,EAAcvzB,MACd,CAACh8C,EAAGC,GAAKuvE,EAAc,EAAIC,IAC3B,CAACzvE,EAAGC,EAAIuvE,EAAc,GACtB,CAAEh9D,QAAOgN,WAAUD,cAErB6C,GACE7D,EACA3vB,EACA2gF,EAAc5uD,MACd,CAAC3gB,GAAKwvE,EAAc,EAAIC,GAAaxvE,GACrC,CAACD,EAAIwvE,EAAc,EAAGvvE,GACtB,CAAEuS,QAAOgN,WAAUD,cAErB6C,GACE7D,EACA3vB,EACA2gF,EAAc15E,KACd,CAACmK,GAAKwvE,EAAc,EAAIC,GAAaxvE,GACrC,CAACD,EAAIwvE,EAAc,EAAGvvE,GACtB,CAAEuS,QAAOgN,WAAUD,cAErB02C,GAAe,C,CAGjB,OAAOA,CAAY,EA5XnBxnE,KAAKmgF,sBAAwBngF,KAAK4sB,cAAc09B,aAClD,CA6BAylB,eAAAA,GAEE,GADA/vE,KAAKmgF,sBAAwBngF,KAAK4sB,cAAc09B,eAC3CtqD,KAAKmgF,sBACR,OAEF,MAAM7T,EAAc5rD,GAAa1gB,KAAKuW,aAAaoK,cACnD,IAAK2rD,EACH,OAEsBA,EAAYh/D,KAAKlB,IACvCyU,EAAAA,GAAAA,wBAAuBzU,EAAErE,WAAYqE,EAAEpE,qBAGzB9J,SAASyE,IACnBA,GACFkmD,GAAkBlmD,EAAQ6D,SAAS7D,Q,GAGzC,CACAslC,iBAAAA,GACE,IAAKjoC,KAAKmgF,sBACR,OAEF,MAAM7T,EAAc5rD,GAAa1gB,KAAKuW,aAAaoK,cACnD,IAAK2rD,EACH,OAEsBA,EAAYh/D,KAAKlB,IACvCyU,EAAAA,GAAAA,wBAAuBzU,EAAErE,WAAYqE,EAAEpE,qBAEzB9J,SAASyE,IACnBA,GACFimD,GAAmBjmD,EAAQ6D,SAAS7D,Q,GAG1C,CA8EAy9E,mBAAAA,CAAoBz9E,GAClB,MAAMS,EAAcK,GAAezD,KAAKotB,cAAezqB,GACvD,IAAKS,EAAYzD,OACf,OAAO,KAGT,OADyByD,EAAY,EAEvC,CAKAk9E,wBAAAA,CACE39E,EACAtF,GAEA,MAAMwlC,EAAW7iC,KAAKigF,4BACtB,IAAKp9C,EACH,OAEF,IAAKxlC,EAAW+c,MAAMmjB,SAAStyB,OAC7B,OAEF5N,EAAW+c,KAAKmjB,QAAQtyB,OAAS,CAAC,IAAI43B,IACtCxlC,EAAWkG,aAAc,EAEzB,MAAMutC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eACL,GAEIxqB,GAAiBC,EAAAA,GAAAA,mBAAkBF,GACzC,IAAKC,EACH,OAEF,MAAM,gBAAEwY,GAAoBxY,EAC5B+iE,GAAsCvqD,EAAiB01B,EACzD,CA4CAnO,uCAAAA,CACEhgC,EACAS,GAGA,KAAMA,aAAuB/E,QAAiC,IAAvB+E,EAAYzD,OACjD,MAAO,GAET,MAAMtC,EAAa+F,EAAY,GACzBoD,GAAW3D,EAAAA,GAAAA,mBAAkBF,IAAU6D,SAC7C,IAAKA,EACH,MAAO,GAET,MAAM6B,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,WAAEY,GAAeh1B,EACxC,IAAKo0B,IAAoBY,EACvB,MAAO,GAET,MAAMpyB,EAAS5N,EAAW+c,MAAMmjB,SAAStyB,OACzC,KAAMA,aAAkB5M,QAA4B,IAAlB4M,EAAOtL,OACvC,MAAO,GAET,MAAMkjC,EAAW53B,EAAO,GAClBg2E,EAAQl8E,GAAAA,UAAAA,OAAAA,cAA+B03B,EAAiBY,GAE9D,OADiBt4B,GAAAA,UAAAA,OAAAA,qBAAsCk8E,EAAOp+C,GAC5C7iC,KAAK4sB,cAAcizD,iBAAmB,CAACxiF,GAAc,EACzE,CAqIAujF,mBAAAA,CACEp6E,GAEA,MAAM06E,EAAuBlhF,KAAKigF,4BAElC,GAAKiB,IAAwBA,EAAqBz6D,MAAMra,GAAM2nB,MAAM3nB,KAIpE,GAAI5F,aAAoB0V,GAAAA,cAAe,CACrC,MAAMilE,EAAep8E,GAAAA,UAAAA,kCACnBm8E,EACA16E,GAGF,GAAqB,OAAjB26E,EACF,OAEEA,IAAiB36E,EAASg/B,0BAC5Bh/B,EAASgxE,gBAAgB2J,E,MAEtB,GAAI36E,aAAoB24B,GAAAA,eAAgB,CAC7C,MAAM,WAAE9B,EAAU,gBAAEZ,GAAoBj2B,EAAS44B,YACjD,IAAK/B,IAAeZ,EAClB,OAEF,MAAMwkD,EAAQl8E,GAAAA,UAAAA,OAAAA,cAA+B03B,EAAiBY,GACxD/uB,EAAkBvJ,GAAAA,UAAAA,OAAAA,qBACtBk8E,EACAC,GACA,GAGF,GAAIz2E,KAAKC,IAAI4D,GAAmB,GAC9B,OAEF,MAAM8yE,EAAsBnkD,GAAAA,GAAAA,UAC1BA,GAAAA,GAAAA,SACAA,GAAAA,GAAAA,cAAmBR,IAEf4kD,EAAoBpkD,GAAAA,GAAAA,MACxBA,GAAAA,GAAAA,SACAmkD,EACA9yE,GAEImjC,EAAgBxU,GAAAA,GAAAA,IACpBA,GAAAA,GAAAA,SACAA,GAAAA,GAAAA,cAAmBI,GACnBgkD,GAIF,IADmB,EACH,CACd76E,EAASmrC,UAAU,CAAEtU,WAAYoU,IACjC,MAAMr2B,EAAkB5U,EAASo1B,qBAC7BxgB,GACFA,EAAgBggB,eAAe50B,EAAS6U,G,EAIhD,EAGFskE,GAAiBh/E,SAAW,mBAC5B,YC9eM2gF,GAA2B,GAUjC,MAAMC,WAAyBl/C,GAc7B9/B,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BE,cAAe,CACb7kB,WAAY,GACZy5E,cAAe,YAInBt+C,MAAMzW,EAAWC,GAjBnB,KAAAo/B,SAIW,CAAC,EAgBZ,KAAAkwB,MAAQ,KACN,MACM5gE,GADmB6gE,EAAAA,GAAAA,uBACgB,GAEzC,IAAK7gE,EACH,OAIF,MAAMkxD,EAAc5rD,GAAa1gB,KAAKuW,aAAaoK,cAEnD,IAAK2rD,EACH,OAIF,MAAM3mE,EAAkB2mE,EAAYh/D,KAAKlB,IACvCyU,EAAAA,GAAAA,wBAAuBzU,EAAErE,WAAYqE,EAAEpE,qBAGzC,IAAI,SAAExB,GAAab,EAAgB,GACnC,MAAM,oBAAE5C,GAAwB4C,EAAgB,GAahD,GARI3F,KAAK4sB,cAAc7kB,YACrBpC,EAAgBzH,SAASyE,IACnBA,EAAQ6D,SAAS6U,IAAMrb,KAAK4sB,cAAc7kB,aAC5CvB,EAAW7D,EAAQ6D,S,KAKpBA,EACH,OAGF,MAAM,OAAEs8B,EAAM,gBAAErG,GAAoBj2B,EAAS44B,YAEvCqiD,EACJ/rE,GAAAA,UAAAA,+BAAuClP,GAEzC,IAAInJ,EAAa2C,KAAK8rD,SAASzuD,WAE/B,MAAM+F,EAAcK,GAAezD,KAAKotB,cAAe5mB,EAAS7D,SAYhE,GARIS,EAAYzD,SACdtC,EAAa+F,EAAYxC,QACtB8gF,GAAmBA,EAAetnE,KAAKrS,YAAcvB,EAAS6U,KAC/D,IAKCimE,GAAyBr7D,SAASzf,EAAS6U,IAqBrCrb,KAAK8rD,SAASzuD,WAAW+c,KAAKrS,YAAcvB,EAAS6U,KAC9Drb,KAAK8rD,SAASzuD,WAAW+c,KAAKmjB,QAAQtyB,OACpCw2E,EACFzhF,KAAK8rD,SAASzuD,WAAW+c,KAAKrS,WAAavB,EAAS6U,QAxBD,CACnD,MAAM8+D,EAAwC,CAC5Cr5E,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,kBAAmB,MAErBziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQw2E,GAEV15E,WAAYvB,EAAS6U,KAIzBimE,GAAyBzjF,KAAK2I,EAAS6U,IAEvCrX,GAAcm2E,EAAe3zE,EAAS7D,SACtCtF,EAAa88E,C,CAOfn6E,KAAK8rD,SAAW,CACdtlD,WACA4U,kBACA/d,aACD,EAGH,KAAA2qC,iBAAmB,KACjBhoC,KAAKg8E,OAAO,EAGd,KAAAxV,iBAAoBvjE,IAGlBjD,KAAK4sB,cAAc7kB,WAAa9E,EAAI1F,OAAOwK,WAC3C/H,KAAKg8E,OAAO,EAgPd,KAAA2F,iBAAmB,CACjBC,EACAC,EACAC,KAEA,MAAMC,EAAa,CACjB,KAAO,IAAM,IAAM,IAAM,IAAM,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,GAE/D,IAAIC,EAeJ,OAbEA,EADc,OAAZF,GAAiC,UAAZA,EACJC,EAAWnhF,QAC3BqhF,GACCA,EAAiC,GAArBL,GACZK,EAAiC,GAArBL,IAGGG,EAAWnhF,QAC3BqhF,GACCA,EAAkC,GAAtBJ,GACZI,EAAkC,GAAtBJ,IAIXG,EAAiB,EAAE,EAQ5B,KAAAE,qBAAuB,CAACnwD,EAAmB+vD,KACzC,MAAMK,EAAqB,CACzBlwD,OAAQ,CACN,CAAC,GAAI,IACL,CAAC,GAAI,KAEP1qB,IAAK,CACH,CAAC,EAAG,IACJ,CAAC,EAAG,KAENH,KAAM,CACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAEP8qB,MAAO,CACL,CAAC,EAAG,GACJ,EAAE,GAAI,KAyBV,MAAO,CACLkwD,SAtBe,CACf,CACErwD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,GAC1D/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,IAE5D,CACE/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,GAC1D/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,KAgB5DO,SAbe,CACf,CACEtwD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,GAC1D/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,IAE5D,CACE/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,GAC1D/vD,EAAkB,GAAG,GAAKowD,EAAmBL,GAAU,GAAG,KAO7D,EAGH,KAAAQ,uBAAyB,CACvBL,EACAH,EACA3hF,EACAoiF,EACAC,KAEA,IAAIC,EACY,UAAZX,GAAoC,OAAZA,EAC1BW,EAAkBD,EAAU,GAAG,GAAKD,EAAS,GAAG,GAC3B,QAAZT,GAAkC,SAAZA,IAC/BW,EAAkBD,EAAU,GAAG,GAAKD,EAAS,GAAG,IAElD,MAAMG,EAAU,GACVC,EAAW,GACXC,EAAkB,GACxB,IAAIC,EAAmBZ,EAEnBA,GAAa,KACfY,EAAmBZ,EAAY,IAGjC,MAAMa,EAAcL,EAAkBI,EAEtC,IAAK,IAAIt1E,EAAI,EAAGA,EAAIs1E,EAAmB,EAAGt1E,IAAK,CAC7C,MAAMw1E,EAAiB,CACrB9wD,OAAQ,CACN,CAAC6wD,GAAev1E,EAAI,GAAI,GACxB,CAACu1E,GAAev1E,EAAI,GAAI,IAE1BhG,IAAK,CACH,CAACu7E,GAAev1E,EAAI,GAAI,GACxB,CAACu1E,GAAev1E,EAAI,IAAK,IAE3BnG,KAAM,CACJ,CAAC,EAAG07E,GAAev1E,EAAI,IACvB,EAAE,EAAGu1E,GAAev1E,EAAI,KAE1B2kB,MAAO,CACL,CAAC,EAAG4wD,GAAev1E,EAAI,IACvB,CAAC,EAAGu1E,GAAev1E,EAAI,MAG3Bm1E,EAAQ7kF,KAAK,GAAGsC,SAAqBoN,KACrCo1E,EAAS9kF,KAAK,OAAO0P,MAChBA,EAAI,GAAK,GAAK,EACjBq1E,EAAgB/kF,KAAK,CACnB,CACE0kF,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,GAC7CS,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,IAE/C,CACES,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,GAC7CS,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,MAIjDc,EAAgB/kF,KAAK,CACnB,CACE0kF,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,GAC7CS,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,IAE/C,CACES,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,GAC7CS,EAAS,GAAG,GAAKQ,EAAejB,GAAU,GAAG,K,CAMrD,MAAO,CAAEY,UAASC,WAAUC,kBAAiB,EAG/C,KAAAI,6BAA+B,CAACf,EAAWH,EAAUmB,KACnD,IAAIC,EACAzG,EAAex/C,GAAAA,GAAAA,SAAcA,GAAAA,GAAAA,SAAegmD,EAAS,GAAIA,EAAS,IACtExG,EAAex/C,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAew/C,GAE7C,IAAIC,EAAcz/C,GAAAA,GAAAA,SAAcA,GAAAA,GAAAA,SAAegmD,EAAS,GAAIA,EAAS,IACrEvG,EAAcz/C,GAAAA,GAAAA,UAAeA,GAAAA,GAAAA,SAAey/C,GAE5C,MAAMyG,EAAmB,CACvBlxD,OAAQ,CAACgxD,EAAS,GAAIA,EAAS,IAC/B17E,IAAK,CAAC07E,EAAS,GAAIA,EAAS,IAC5B/wD,MAAO,CAAC+wD,EAAS,GAAIA,EAAS,IAC9B77E,KAAM,CAAC67E,EAAS,GAAIA,EAAS,KAGzBtlB,EAAW1gC,GAAAA,GAAAA,IAEbA,GAAAA,GAAAA,SACAkmD,EAAiBrB,GAAU,GAC3BqB,EAAiBrB,GAAU,IAE5Bx0E,KAAKC,GAAMA,EAAI,IAEZwZ,EACJk7D,EACA,EACAx3E,KAAKuE,KACHvE,KAAKwE,IAAIwtE,EAAa,GAAI,GACxBhyE,KAAKwE,IAAIwtE,EAAa,GAAI,GAC1BhyE,KAAKwE,IAAIwtE,EAAa,GAAI,IA+BhC,MA5BgB,OAAZqF,GAAiC,UAAZA,EACvBoB,EAAmB,CACjBjmD,GAAAA,GAAAA,SACEA,GAAAA,GAAAA,SACA0gC,EACA+e,EAAYpvE,KAAKC,GAAMA,EAAIwZ,KAE7BkW,GAAAA,GAAAA,IACEA,GAAAA,GAAAA,SACA0gC,EACA+e,EAAYpvE,KAAKC,GAAMA,EAAIwZ,MAGV,QAAZ+6D,GAAkC,SAAZA,IAC/BoB,EAAmB,CACjBjmD,GAAAA,GAAAA,IACEA,GAAAA,GAAAA,SACA0gC,EACA8e,EAAanvE,KAAKC,GAAMA,EAAIwZ,KAE9BkW,GAAAA,GAAAA,SACEA,GAAAA,GAAAA,SACA0gC,EACA8e,EAAanvE,KAAKC,GAAMA,EAAIwZ,OAK3Bm8D,CAAgB,EAUzB,KAAAE,8BAAgC,CAC9BC,EACAtxD,EACAuxD,EACAC,EACAzB,KAEA,IAAI0B,EACJ,GAAgB,OAAZ1B,GAAiC,UAAZA,EAAsB,CAC7C,MAAM2B,EACJ1xD,EAAkB,GAAG,GAAKA,EAAkB,GAAG,GACjDyxD,EAAyB,CACvB,CAACH,EAAWxyD,MAAQ,EAAI4yD,EAAwB,EAAGH,EAAahwD,QAChE,CAAC+vD,EAAWxyD,MAAQ,EAAI4yD,EAAwB,EAAGH,EAAahwD,Q,MAE7D,GAAgB,QAAZwuD,GAAkC,SAAZA,EAAqB,CACpD,MAAM2B,EACJ1xD,EAAkB,GAAG,GAAKA,EAAkB,GAAG,GACjDyxD,EAAyB,CACvB,CAACD,EAAa1yD,MAAOwyD,EAAW/vD,OAAS,EAAImwD,EAAwB,GACrE,CAACF,EAAa1yD,MAAOwyD,EAAW/vD,OAAS,EAAImwD,EAAwB,G,CAIzE,OAAOD,CAAsB,EAU/B,KAAAE,mBAAqB,CACnBL,EACAM,EACAC,EACA9B,KAEA,MAAM+B,EAAaF,EAAsBl5E,KAAK8U,IAAI,IAAM8jE,EAAWxyD,OAC7DizD,EAAaF,EAAoBn5E,KAAK8U,IAAI,IAAM8jE,EAAW/vD,QAC3DywD,EAAiB,CACrB9xD,OAAQ,EAAE6xD,GAAaD,GACvBt8E,IAAK,CAACu8E,EAAYD,GAClBz8E,KAAM,CAAC08E,EAAYD,GACnB3xD,MAAO,EAAE4xD,GAAaD,IAElBG,EAAe,CACnB/xD,OAAQ,CAACoxD,EAAW/vD,OAAQ+vD,EAAWxyD,OACvCtpB,IAAK,CAAC,EAAG87E,EAAWxyD,OACpBzpB,KAAM,CAACi8E,EAAW/vD,OAAQ,GAC1BpB,MAAO,CAACmxD,EAAW/vD,OAAQ+vD,EAAWxyD,QAGxC,MAAO,CACLyC,OAAQ0wD,EAAalC,GAAU,GAAKiC,EAAejC,GAAU,GAC7DjxD,MAAOmzD,EAAalC,GAAU,GAAKiC,EAAejC,GAAU,GAC7D,CA5mBH,CAiHA9lD,gBAAAA,CACEp5B,EACAktB,GAEA,IAAK9vB,KAAK8rD,SAAStlD,SACjB,OAEF,MAAMs7E,EAAW9hF,KAAK4sB,cAAc40D,eAC9B,SAAEh7E,GAAa5D,EAGfvF,EADcoG,GAAezD,KAAKotB,cAAe5mB,EAAS7D,SACjC/B,QAC5B8gF,GAAmBA,EAAetnE,KAAKrS,YAAcvB,EAAS6U,KAC/D,GACIzT,EAAShF,EAAe4D,SAASoB,OAIvC,IAAKpB,EACH,OAHmB,MAMrB,MAAMo7B,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGhCgoE,EAAa,CACjBxyD,MAAOjpB,EAAOipB,MACdyC,OAAQ1rB,EAAO0rB,QAGX4Q,EAAU7mC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GACzCm5B,EAAW/mC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GAC1Co5B,EAAahnC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GAC5Cq5B,EAAcjnC,EAAW+c,KAAKmjB,QAAQtyB,OAAO,GAE7CqxE,EAAY,CAACp4C,EAASG,EAAYD,EAAUE,GAE5Cs9C,EAAqB3kD,GAAAA,GAAAA,SAAcoH,EAAYC,GAC/Cu9C,EAAsB5kD,GAAAA,GAAAA,SAAciH,EAASG,GAG7Ck/C,EAAevjF,KAAK0jF,mBACxBL,EACA,IACA,IACAvB,GAGIwB,EAAetjF,KAAK0jF,mBACxBL,EACA,IACA,IACAvB,GAIIG,EAAYjiF,KAAK2hF,iBACrBC,EACAC,EACAC,GAKI/vD,EAAoB/xB,KAAKgjF,6BAC7Bf,EACAH,EACAxF,GACAhvE,KAAKzF,GAAUrB,EAAS29B,cAAct8B,KAIlC27E,EAAyBxjF,KAAKojF,8BAClCC,EACAtxD,EACAuxD,EACAC,EACAzB,GAIImC,EAAajkF,KAAKkiF,qBACtBsB,EACA1B,IAGI,cAAE3hF,GAAkB9C,EAE1BukC,EAAezhC,cAAgBA,EAC/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAC/C22B,EAASh0B,KAAKgjC,SAAS,SAAUpB,EAAgBvkC,GAEjD6mF,EAAU,GAAG/jF,cAEnBsrE,GACE37C,EACA3vB,EAHmB,IAKnBqjF,EAAuB,GACvBA,EAAuB,GACvB,CACEz/D,QACA8M,MAAOC,EACPC,WACAiD,UAEFkwD,GAEF,MAAMC,EAAa,GAAGhkF,SAGtBsrE,GACE37C,EACA3vB,EAJkB,IAMlB8jF,EAAW7B,SAAS,GACpB6B,EAAW7B,SAAS,GACpB,CACEr+D,QACA8M,MAAOC,EACPC,WACAiD,UAEFmwD,GAEF,MAAMC,EAAc,GAAGjkF,UAGvBsrE,GACE37C,EACA3vB,EAJmB,IAMnB8jF,EAAW5B,SAAS,GACpB4B,EAAW5B,SAAS,GACpB,CACEt+D,QACA8M,MAAOC,EACPC,WACAiD,UAEFowD,GAGF,MAAMC,EAAqB,CACzBpyD,OAAQ,EAAE,IAAK,IACf1qB,IAAK,EAAE,IAAK,IACZH,KAAM,EAAE,IAAK,IACb8qB,MAAO,EAAE,IAAK,KAGVoyD,EAAwB,CAC5Bd,EAAuB,GAAG,GAAKa,EAAmBvC,GAAU,GAC5D0B,EAAuB,GAAG,GAAKa,EAAmBvC,GAAU,IAExDyC,EAAevkF,KAAKwkF,cAAcvC,IAElC,QAAES,EAAO,SAAEC,EAAQ,gBAAEC,GAAoB5iF,KAAKsiF,uBAClDL,EACAH,EACA3hF,EACA8jF,EAAW7B,SACX6B,EAAW5B,UAIb,IAAK,IAAI90E,EAAI,EAAGA,EAAIo1E,EAAShjF,OAAQ4N,IACnCk+D,GACE37C,EACA3vB,EACAwiF,EAASp1E,GACTq1E,EAAgBr1E,GAAG,GACnBq1E,EAAgBr1E,GAAG,GACnB,CACEwW,QACA8M,MAAOC,EACPC,WACAiD,UAEF0uD,EAAQn1E,IAqBZ,OAhBAk3E,GACE30D,EACA3vB,EAHc,QAKdokF,EACA,CAACD,EAAsB,GAAIA,EAAsB,IACjD,CACEtuD,WAAY,+CACZC,SAAU,OACVlF,SAAU,MACVD,UAAW,IACXkD,QAAQ,EACRjQ,MAAOA,IAxLU,KA6LvB,CAEAygE,aAAAA,CAAcvC,GACZ,IAAIyC,EACAC,EACA1C,GAAa,IACfyC,EAAwBzC,EAAY,GACpC0C,EAAiB,QAEjBD,EAAwBzC,EACxB0C,EAAiB,OAKnB,MAFkB,CAACD,EAAsBhqC,WAAWx0B,OAAOy+D,GAG7D,EAkSFpD,GAAiB5gF,SAAW,eAC5B,YCrqBc,SAAUikF,GACtBC,GAEA,MAAMC,EAaR,SAA2B3kB,GACzB,MAAM4kB,EAAqB,CAAC5kB,EAAa,GAAIA,EAAa,IAAI6kB,KAAKC,GAC7DC,EAAqB,CAAC/kB,EAAa,GAAIA,EAAa,IAAI6kB,KAAKG,GAC7DjzD,EAAQ6yD,EAAmBA,EAAmBplF,OAAS,GACvD4H,EAAM29E,EAAmB,GACzBjzD,EAASizD,EAAmBA,EAAmBvlF,OAAS,GAE9D,MAAO,CACL4H,MACA0qB,SACAC,SAGF,SAAS+yD,EAAUvrC,EAAGC,GACpB,OAAOD,EAAE,GAAKC,EAAE,IAAM,EAAI,CAC5B,CACA,SAASwrC,EAAUzrC,EAAGC,GACpB,OAAOD,EAAE,GAAKC,EAAE,IAAM,EAAI,CAC5B,CACF,CAhCkByrC,CAAkBP,GAC5B5tD,GAAW6tD,EAAQv9E,IAAI,GAAKu9E,EAAQ7yD,OAAO,IAAM,EAGvD,MAFoC,CAAC6yD,EAAQ5yD,MAAM,GAAI+E,EAGzD,CCwCA,MAAQse,sBAAqBA,IAAK7/B,GAAAA,UAqClC,MAAM2vE,WAA0BpiD,GAkB9B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbgzD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAkHnB,KAAAqY,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAGxB,IAAIgoD,EAAe/+E,EAAS29B,cAAcl5B,EAAO,IAC7Cu6E,EAAeh/E,EAAS29B,cAAcl5B,EAAO,IAE7CmgE,EAAO,CACTv3C,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAIhBrpB,EAAkB4F,GACpB,CAACqJ,EAAKv3C,MAAMtiB,EAAG65D,EAAKv3C,MAAMriB,GAC1B,CAAC45D,EAAKt3C,IAAIviB,EAAG65D,EAAKt3C,IAAItiB,GACtB,CAAC6xB,EAAa,GAAIA,EAAa,KAGjC,OAAI84B,GAAmBn4B,IAKvBuhD,EAAe/+E,EAAS29B,cAAcl5B,EAAO,IAC7Cu6E,EAAeh/E,EAAS29B,cAAcl5B,EAAO,IAE7CmgE,EAAO,CACLv3C,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAIpBrpB,EAAkB4F,GAChB,CAACqJ,EAAKv3C,MAAMtiB,EAAG65D,EAAKv3C,MAAMriB,GAC1B,CAAC45D,EAAKt3C,IAAIviB,EAAG65D,EAAKt3C,IAAItiB,GACtB,CAAC6xB,EAAa,GAAIA,EAAa,KAG7B84B,GAAmBn4B,EAIX,EASd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjBzlF,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD+X,GAAkBlmD,GAElBM,EAAIyF,gBAAgB,EAYtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdkX,EAAO/c,EAAW+c,KAExB/c,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPy7B,GAAkBlmD,GAElB3C,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAWtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B,QAAkCU,IAA9BtD,KAAK8rD,SAASouB,YAA2B,CAC3C,MAAM,OAAEjvE,GAAWmP,EAAKmjB,QAClBmoD,EAAyBzoD,GAAAA,GAAAA,SAAchyB,EAAO,GAAIA,EAAO,IAG/D,GAFgCgyB,GAAAA,GAAAA,SAAchyB,EAAO,GAAIA,EAAO,IAElCy6E,EAAwB,CAGpD,MAAMC,EAAW,CAAC,IAAI16E,EAAO,IAAK,IAAIA,EAAO,KAEvC26E,EAAkB,IAAI36E,EAAO,IAC7B46E,EAAkB,IAAI56E,EAAO,IAG7B66E,EAAiBthD,GAAAA,GAAAA,SAEvBA,GAAAA,GAAAA,IACEshD,EACAH,EAAS,GAAG,GAAKA,EAAS,GAAG,GAC7BA,EAAS,GAAG,GAAKA,EAAS,GAAG,IAG/B,MAAMI,EAA0CvhD,GAAAA,GAAAA,SAEhDA,GAAAA,GAAAA,IACEuhD,GACCD,EAAe,GAChBA,EAAe,IAGjB,MAAME,EAAyBxhD,GAAAA,GAAAA,SAQ/B,IAAIyhD,EANJzhD,GAAAA,GAAAA,IACEwhD,EACAH,EAAgB,GAAKD,EAAgB,GACrCC,EAAgB,GAAKD,EAAgB,IAWrCK,EALAzhD,GAAAA,GAAAA,IACEwhD,EACAD,GACE,EAEQ,CAACH,EAAiBC,GAElB,CAACA,EAAiBD,GAGhCxrE,EAAKmjB,QAAQtyB,OAAS,CACpB06E,EAAS,GACTA,EAAS,GACTM,EAAU,GACVA,EAAU,G,EAchB,GAREjmF,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAMxB,KAAAG,kBAAqBt3E,IACnBjD,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEuhC,GAAkB39B,GACpB,WAAEnJ,EAAU,oBAAEyzC,EAAmB,YAAEopC,GAAgBl6E,KAAK8rD,UACxD,KAAE1xC,GAAS/c,EAEXwlC,EAAWt6B,EAAcV,MAG/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GAEvC,MAAMqjD,EAAoB9rE,EAAKmjB,QAAQtyB,OAAOqC,IAAI62B,GAE5Cd,EACa,CACfxP,MAAO,CACLtiB,EAAG20E,EAAkB,GAAG,GACxB10E,EAAG00E,EAAkB,GAAG,IAE1BpyD,IAAK,CACHviB,EAAG20E,EAAkB,GAAG,GACxB10E,EAAG00E,EAAkB,GAAG,KAoBxBC,GAfGD,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAGrBA,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAQjB1hD,GAAAA,GAAAA,SAAc0hD,EAAkB,GAAIA,EAAkB,IAE5B,GAEjCtuC,EACJvU,EAA6BxP,MAAMtiB,EAAI8xB,EAA6BvP,IAAIviB,EACpEumC,EACJzU,EAA6BxP,MAAMriB,EAAI6xB,EAA6BvP,IAAItiB,EACpE7R,EAAS8K,KAAKuE,KAAK4oC,EAAKA,EAAKE,EAAKA,GAClCsuC,EAAUxuC,EAAKj4C,EACf0mF,EAAUvuC,EAAKn4C,EAEf2mF,GACHjjD,EAA6BxP,MAAMtiB,EAClC8xB,EAA6BvP,IAAIviB,GACnC,EACIg1E,GACHljD,EAA6BxP,MAAMriB,EAClC6xB,EAA6BvP,IAAItiB,GACnC,EAEIg1E,EAASF,EAAOH,EAA0BE,EAC1CI,EAASF,EAAOJ,EAA0BC,EAC1CM,EAAOJ,EAAOH,EAA0BE,EACxCM,EAAOJ,EAAOJ,EAA0BC,EAG9ChsE,EAAKmjB,QAAQtyB,OAAO,GAAKzE,EAASsB,cAAc,CAAC0+E,EAAQC,IACzDrsE,EAAKmjB,QAAQtyB,OAAO,GAAKzE,EAASsB,cAAc,CAAC4+E,EAAMC,IAEvDtpF,EAAWkG,aAAc,EACzBoiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK8rD,SAAS2uB,UAAW,CAAI,EAO/B,KAAAC,oBAAuBz3E,IACrBjD,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,GACtB,WAAEvF,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EACjB,GAAIooF,EAAe,CACjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MACnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,MAEzBvD,KAAK4mF,kBAAkB3jF,GACvB5F,EAAWkG,aAAc,EAG3BoiE,GAAsCvqD,EAAiB01B,EAAoB,EAO7E,KAAA81C,kBAAqB3jF,IACnB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,WAAEvF,EAAY68E,YAAa2M,GAAsB7mF,KAAK8rD,UACtD,KAAE1xC,GAAS/c,EAGXwlC,EAAWt6B,EAAcV,MACzBi/E,EAA4B,CAChCtgF,EAAS29B,cAAc/pB,EAAKmjB,QAAQtyB,OAAO,IAC3CzE,EAAS29B,cAAc/pB,EAAKmjB,QAAQtyB,OAAO,IAC3CzE,EAAS29B,cAAc/pB,EAAKmjB,QAAQtyB,OAAO,IAC3CzE,EAAS29B,cAAc/pB,EAAKmjB,QAAQtyB,OAAO,KAGvC87E,EAAmB,CACvBlzD,MAAO,CACLtiB,EAAGu1E,EAA0B,GAAG,GAChCt1E,EAAGs1E,EAA0B,GAAG,IAElChzD,IAAK,CACHviB,EAAGu1E,EAA0B,GAAG,GAChCt1E,EAAGs1E,EAA0B,GAAG,KAG9BE,EAAoB,CACxBnzD,MAAO,CACLtiB,EAAGu1E,EAA0B,GAAG,GAChCt1E,EAAGs1E,EAA0B,GAAG,IAElChzD,IAAK,CACHviB,EAAGu1E,EAA0B,GAAG,GAChCt1E,EAAGs1E,EAA0B,GAAG,KAK9BG,EAA8B,IAAIpkD,GAClCqkD,EAAsB1gF,EAAS29B,cAAc8iD,GAEnD,GAA0B,IAAtBJ,GAAiD,IAAtBA,EAAyB,CACtD,MAEMM,EACJL,EAH6C,IAAtBD,EAA0B,EAAI,GAKjDO,EAAgC5iD,GAAAA,GAAAA,IACpCA,GAAAA,GAAAA,SACA0iD,EAAoB,GAAKC,EAAuB,GAChDD,EAAoB,GAAKC,EAAuB,IAG5CE,EAA2B7iD,GAAAA,GAAAA,IAC/BA,GAAAA,GAAAA,SACAsiD,EAA0BD,GAAmB,GAC3CM,EAAuB,GACzBL,EAA0BD,GAAmB,GAC3CM,EAAuB,IAI3B3iD,GAAAA,GAAAA,UACE4iD,EACAA,GAEF5iD,GAAAA,GAAAA,UAAe6iD,EAA0BA,GAGzC,MAAMC,EAA2B,CAC/BzzD,MAAO,CACLtiB,EAAG41E,EAAuB,GAC1B31E,EAAG21E,EAAuB,IAE5BrzD,IAAK,CACHviB,EAAG21E,EAAoB,GACvB11E,EAAG01E,EAAoB,KAS3B,GACElnF,KAAKunF,0CACHD,EACAN,GAGF,OAGF,MAAMQ,EAAmBL,EAEnB70D,EAAQtyB,KAAKynF,gBACjBJ,EACAD,GAKF,IAAIM,EAAcZ,EAA0B,GAAG,GAC3Ca,EAAcb,EAA0B,GAAG,GAE3Cc,EAAed,EAA0B,GAAG,GAC5Ce,EAAef,EAA0B,GAAG,GAGhDY,GAAeF,EAAiB,GAChCG,GAAeH,EAAiB,GAEhCI,GAAgBJ,EAAiB,GACjCK,GAAgBL,EAAiB,GAGjC,MAAMM,EACJJ,EAAcj9E,KAAK8uB,IAAIjH,GAASq1D,EAAcl9E,KAAK+uB,IAAIlH,GACnDy1D,EACJL,EAAcj9E,KAAK+uB,IAAIlH,GAASq1D,EAAcl9E,KAAK8uB,IAAIjH,GAEnD01D,EACJJ,EAAen9E,KAAK8uB,IAAIjH,GAASu1D,EAAep9E,KAAK+uB,IAAIlH,GACrD21D,EACJL,EAAen9E,KAAK+uB,IAAIlH,GAASu1D,EAAep9E,KAAK8uB,IAAIjH,GAG3Do1D,EAAcI,EAAoBN,EAAiB,GACnDG,EAAcI,EAAqBP,EAAiB,GAEpDI,EAAeI,EAAqBR,EAAiB,GACrDK,EAAeI,EAAsBT,EAAiB,GAGtD,MAAMU,EAAgB1hF,EAASsB,cAAc,CAAC4/E,EAAaC,IACrDQ,EAAiB3hF,EAASsB,cAAc,CAC5C8/E,EACAC,IAKFztE,EAAKmjB,QAAQtyB,OAAO47E,GAAqBI,EACzC7sE,EAAKmjB,QAAQtyB,OAAO,GAAKi9E,EACzB9tE,EAAKmjB,QAAQtyB,OAAO,GAAKk9E,C,KACpB,CAEL,MAAMC,EAA6C,IAAtBvB,EAA0B,EAAI,EAErDwB,EAAsB,CAC1BC,gBAAiB,CACfz0D,MAAOkzD,EAAiBlzD,MACxBC,IAAKizD,EAAiBjzD,KAExBy0D,iBAAkB,CAChB10D,MAAOmzD,EAAkBnzD,MACzBC,IAAKkzD,EAAkBlzD,MAIrB00D,EAAqBhkD,GAAAA,GAAAA,SACzBA,GAAAA,GAAAA,SACA,CACE6jD,EAAoBC,gBAAgBx0D,IAAIviB,EACxC82E,EAAoBC,gBAAgBx0D,IAAItiB,GAE1C,CACE62E,EAAoBC,gBAAgBz0D,MAAMtiB,EAC1C82E,EAAoBC,gBAAgBz0D,MAAMriB,IAIxCi3E,EAA+BjkD,GAAAA,GAAAA,UACnCA,GAAAA,GAAAA,SACAgkD,GAGIE,EAAuBlkD,GAAAA,GAAAA,SAC3BA,GAAAA,GAAAA,SACA,CAAC0iD,EAAoB,GAAIA,EAAoB,IAC7C,CACEJ,EAA0BD,GAAmB,GAC7CC,EAA0BD,GAAmB,KAI3C8B,EAAiBnkD,GAAAA,GAAAA,OAAYkkD,GAE7Bp2D,EAAQtyB,KAAKynF,gBACjBgB,EACAC,GAGIE,EAAiCn+E,KAAK8uB,IAAIjH,GAASq2D,EAEnDE,EAAqBrkD,GAAAA,GAAAA,YACzBA,GAAAA,GAAAA,SACA,CACEsiD,EAA0BsB,GAAsB,GAChDtB,EAA0BsB,GAAsB,IAElDK,EACAG,GAIF,GACE5oF,KAAKunF,0CACH,CACE1zD,MAAO,CACLtiB,EAAG21E,EAAoB,GACvB11E,EAAG01E,EAAoB,IAEzBpzD,IAAK,CACHviB,EAAGs3E,EAAmB,GACtBr3E,EAAGq3E,EAAmB,KAG1B,CACEh1D,MAAO,CACLtiB,EAAG82E,EAAoBC,gBAAgBz0D,MAAMtiB,EAC7CC,EAAG62E,EAAoBC,gBAAgBz0D,MAAMriB,GAE/CsiB,IAAK,CACHviB,EAAG82E,EAAoBC,gBAAgBx0D,IAAIviB,EAC3CC,EAAG62E,EAAoBC,gBAAgBx0D,IAAItiB,KAKjD,OAWF,IAR0BuwD,GACxB,CAACmlB,EAAoB,GAAIA,EAAoB,IAC7C,CAAC2B,EAAmB,GAAIA,EAAmB,IAC3C,CAAC9B,EAAiBlzD,MAAMtiB,EAAGw1E,EAAiBlzD,MAAMriB,GAClD,CAACu1E,EAAiBjzD,IAAIviB,EAAGw1E,EAAiBjzD,IAAItiB,IAK9C,OAGF4I,EAAKmjB,QAAQtyB,OAAOm9E,GAAwB5hF,EAASsB,cACnD+gF,GAEFzuE,EAAKmjB,QAAQtyB,OAAO47E,GAAqBI,C,GAQ7C,KAAA15C,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAuqD,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKu6E,kBACN,EAGH,KAAApvB,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKu6E,kBACN,EAGH,KAAAnU,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAK06E,qBAEP/3E,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,aACN,EAGH,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAK06E,qBAEP/3E,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,aACN,EAWH,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EACpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAE5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QACrCxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnExT,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAC/C22B,EAASh0B,KAAKgjC,SAAS,SAAUpB,EAAgBvkC,GAwBvD,GAnBG+c,EAAKN,YAAYmU,IACiB,MAAnC7T,EAAKN,YAAYmU,GAAU8wC,KASlB1hE,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACA+d,EACAxY,IAXFwX,EAAKN,YAAYmU,GAAY,CAC3BtuB,OAAQ,KACRkxB,MAAO,KACPkuC,KAAM,MAGR/+D,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,KAUrD4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIsT,EAEJ,IAAKj5E,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB26E,EACA,CACE/2D,S,CAKN,MAAMilE,EAAU,GAAG7oF,WACb8oF,EAAU,GAAG9oF,WAGnBsrE,GACE37C,EACA3vB,EAHc,IAKd4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACAgN,WACAD,YACAkD,UAEFg1D,GAIFvd,GACE37C,EACA3vB,EAHoB,IAKpB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACAgN,WACAD,YACAkD,UAEFi1D,GAGFzhB,GAAe,EAEf,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,SAGF,IAAIupF,EAEC9uE,EAAKmjB,QAAQ/E,QAAQiiD,WACxByO,EAAsBtE,GAAuB7yD,GAE7C3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,IAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAM,MAAEqf,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EAGrB,KAAA+f,0CAA4C,CAC1CR,EACAC,KAEA,MAAMoC,EAA8B5kD,GAAAA,GAAAA,SAEpCA,GAAAA,GAAAA,IACE4kD,EACApC,EAAkBlzD,IAAIviB,EAAIy1E,EAAkBnzD,MAAMtiB,EAClDy1E,EAAkBlzD,IAAItiB,EAAIw1E,EAAkBnzD,MAAMriB,GAGpDgzB,GAAAA,GAAAA,UAAe4kD,EAA6BA,GAE5C,MAAMC,EAA4B,CAChCx1D,MAAO,CACLtiB,EAAGy1E,EAAkBnzD,MAAMtiB,EAAqC,GAAjC63E,EAA4B,GAC3D53E,EAAGw1E,EAAkBnzD,MAAMriB,EAAqC,GAAjC43E,EAA4B,IAE7Dt1D,IAAK,CACHviB,EAAGy1E,EAAkBlzD,IAAIviB,EAAqC,GAAjC63E,EAA4B,GACzD53E,EAAGw1E,EAAkBlzD,IAAItiB,EAAqC,GAAjC43E,EAA4B,KAgB7D,OATkCrnB,GAChC,CAACsnB,EAA0Bx1D,MAAMtiB,EAAG83E,EAA0Bx1D,MAAMriB,GACpE,CAAC63E,EAA0Bv1D,IAAIviB,EAAG83E,EAA0Bv1D,IAAItiB,GAChE,CAACu1E,EAAiBlzD,MAAMtiB,EAAGw1E,EAAiBlzD,MAAMriB,GAClD,CAACu1E,EAAiBjzD,IAAIviB,EAAGw1E,EAAiBjzD,IAAItiB,GAKjB,EAWjC,KAAAu3E,sBAAwB,CAAC1rF,EAAY+d,EAAiBxY,KACpD,MAAM,KAAEwX,GAAS/c,GACX,WAAE0K,EAAU,kBAAEC,GAAsBpF,EAEpC0mF,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,GAChCu+E,EAAYpvE,EAAKmjB,QAAQtyB,OAAO,GAChCw+E,EAAYrvE,EAAKmjB,QAAQtyB,OAAO,IAEhC,YAAE6O,GAAgBM,EAClBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,UAAEqd,EAAS,WAAEqB,GAAe1e,EAC5ByiB,EAAQkB,GAAmB3jB,GAC3Bg+D,EAAQ3pF,KAAK4pF,iBAAiBN,EAAWC,GAAan7C,EACtDy7C,EAAQ7pF,KAAK4pF,iBAAiBJ,EAAWC,GAAar7C,EACtDzuC,EAASgqF,EAAQE,EAAQF,EAAQE,EACjCh5D,EAAQ84D,EAAQE,EAAQA,EAAQF,EAEhCG,EAASv0C,GAAsBvM,EAAWsgD,GAC1CS,EAASx0C,GAAsBvM,EAAWugD,GAC1CS,EAASz0C,GAAsBvM,EAAWwgD,GAC1CS,EAAS10C,GAAsBvM,EAAWygD,GAEhDzpF,KAAKkqF,gBAAgBJ,EAAQC,EAAQC,EAAQC,EAAQ5/C,GAChDrqC,KAAK+/E,sBAAuB,EAC5B//E,KAAK+/E,sBAAuB,EAEjCjmE,EAAYmU,GAAY,CACtBtuB,SACAkxB,QACAkuC,KAAMjwB,GAAyB,KAAMnjB,G,CAIzCtuB,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CAAW,EAGpB,KAAAowE,gBAAkB,CAACJ,EAAQC,EAAQC,EAAQC,EAAQ5/C,IAE/C30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,IACtC30B,GAAAA,UAAAA,sBAA8Bs0E,EAAQ3/C,IACtC30B,GAAAA,UAAAA,sBAA8Bu0E,EAAQ5/C,GAI1C,KAAAo9C,gBAAkB,CAAC0C,EAASC,IACnB3/E,KAAK8nB,MACV43D,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAC/CD,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,IApsCjDpqF,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CAUA25B,gBAAAA,CACE3iE,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAsC,CAC1C2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAEQ,IAAI43B,GACJ,IAAIA,GAEJ,IAAIA,GACJ,IAAIA,IAEpBrK,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtCd,kBAAmB,MAErBxpB,MAAO,GACPF,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAmBP,OAhBAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CACT,CA+gCAusF,gBAAAA,CAAiB9xB,EAAMC,GACrB,MAAMngB,EAAKkgB,EAAK,GAAKC,EAAK,GACpBjgB,EAAKggB,EAAK,GAAKC,EAAK,GACpBhgB,EAAK+f,EAAK,GAAKC,EAAK,GAE1B,OAAOttD,KAAKuE,KAAK4oC,EAAKA,EAAKE,EAAKA,EAAKC,EAAKA,EAC5C,EAiFF,SAASutC,GAAoBlrE,EAAM6T,GACjC,MAAM,YAAEnU,GAAgBM,GAClB,OAAEza,EAAM,MAAEkxB,EAAK,KAAEkuC,GAASjlD,EAAYmU,GAE5C,QAAe3qB,IAAX3D,EACF,OAUF,MALkB,CAChB,MAAM82C,GAAY92C,MAAWo/D,IAC7B,MAAMtoB,GAAY5lB,MAAUkuC,IAIhC,CAEAsmB,GAAkB1kF,SAAW,gBAC7B,aCpyCQ40C,sBAAqBA,IAAK7/B,GAAAA,UAqClC,MAAM40E,WAAmBrnD,GAiBvB1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbgzD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAiBnB,KAAAk5C,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtCimD,GAAkBlmD,GAClB3C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAAe,IAAI43B,GAAyB,IAAIA,IACxDW,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,GACPF,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GACV+N,EAAQi6D,GAAUjrD,EAAKmjB,QAAQtyB,OAChCs6E,EAAe/+E,EAAS29B,cAAc/4B,GACtCo6E,EAAeh/E,EAAS29B,cAAckhC,GAEtC+F,EAAO,CACXv3C,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAUpB,OANwBzjB,GACtB,CAACqJ,EAAKv3C,MAAMtiB,EAAG65D,EAAKv3C,MAAMriB,GAC1B,CAAC45D,EAAKt3C,IAAIviB,EAAG65D,EAAKt3C,IAAItiB,GACtB,CAAC6xB,EAAa,GAAIA,EAAa,MAGVW,CAIX,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjBzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EA+CtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EAGpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAGxB,KAAAnvB,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,aACN,EAGH,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,aACN,EAGH,KAAAR,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,aACN,EAGH,KAAAC,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,aACN,EAWH,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QAE3CqE,EAAezhC,cAAgBA,EAG/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAC/C22B,EAASh0B,KAAKgjC,SAAS,SAAUpB,EAAgBvkC,GAEjD00B,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnE,IAAI0lC,EAsBJ,GAjBG1gE,EAAKN,YAAYmU,IACiB,MAAnC7T,EAAKN,YAAYmU,GAAU8wC,KAQlB1hE,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACA+d,EACAxY,IAVFwX,EAAKN,YAAYmU,GAAY,CAC3BtuB,OAAQ,KACRo/D,KAAM,MAGR/+D,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,KASrDf,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB4xB,EACA,CACEhO,QACAgN,WACAD,a,CAKN,MAAMH,EAAS,GAAGxwB,SAoBlB,GAlBAsrE,GACE37C,EACA3vB,EAHc,IAKd4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,WACAiD,UAEFrD,GAGF62C,GAAe,GAGVhhE,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GAGxD,IAAK7T,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAClC,MAAMyO,EAAsBtE,GAAuB7yD,GAEnD3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EAxpBnBxnE,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CAwKAo6B,sBAAAA,CACEpjE,EACA5F,EACA41B,GAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CAocAkhF,gBAAAA,CAAiB9xB,EAAMC,GACrB,MAAMngB,EAAKkgB,EAAK,GAAKC,EAAK,GACpBjgB,EAAKggB,EAAK,GAAKC,EAAK,GACpBhgB,EAAK+f,EAAK,GAAKC,EAAK,GAE1B,OAAOttD,KAAKuE,KAAK4oC,EAAKA,EAAKE,EAAKA,EAAKC,EAAKA,EAC5C,CAEAgxC,qBAAAA,CAAsB1rF,EAAY+d,EAAiBxY,GACjD,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,EAEpC0mF,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,IAChC,YAAE6O,GAAgBM,EAClBsvE,EAAY7qF,OAAOwE,KAAKyW,GAI9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,UAAEqd,EAAS,WAAEqB,GAAe1e,EAE5Bm+D,EAASv0C,GAAsBvM,EAAWsgD,GAC1CS,EAASx0C,GAAsBvM,EAAWugD,GAC1ChsD,EAAU,CAACusD,EAAQC,IACnB,MAAE37C,EAAK,MAAEa,GAAUM,GAAiC5jB,EAAO4R,GAE3D59B,EAASK,KAAK4pF,iBAAiBN,EAAWC,GAAan7C,EAE7DpuC,KAAKkqF,gBAAgBJ,EAAQC,EAAQ1/C,GAChCrqC,KAAK+/E,sBAAuB,EAC5B//E,KAAK+/E,sBAAuB,EAOjCjmE,EAAYmU,GAAY,CACtBtuB,SACAo/D,KAAM9vB,E,CAIV5xC,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CACT,CAEAowE,eAAAA,CAAgBJ,EAAQC,EAAQ1/C,GAC9B,OACE30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,EAE1C,EAGF,SAASi7C,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,OAAEtuB,EAAM,KAAEo/D,GAASwrB,EAGzB,GAAI5qF,SAA2Co0B,MAAMp0B,GACnD,OAKF,MAFkB,CAAC,GAAG82C,GAAY92C,MAAWo/D,IAG/C,CAEAurB,GAAW3pF,SAAW,SACtB,YCv2BA,SAAS6pF,GACPt4B,EACAr2C,EACA6N,GAEA,MAAiB,OAAbwoC,EACK,KACe,OAAbA,EAOb,SAA2Br2C,EAAiB6N,GAC1C,IAAKA,EAAQ2oC,YACX,MAAO,MAGT,GAAI3oC,EAAQgb,YACV,MAAO,MAGT,MAAM+lD,EAAsB1tD,GAAAA,SAAAA,IAAa,sBAAuBlhB,GAIhE,GAAsC,OAAlC4uE,GAAqBv4B,SAAmB,CAC1C,MAAMw4B,EAAkB3tD,GAAAA,SAAAA,IAAa,kBAAmBlhB,GACxD,OAAO6uE,GAAiBz7C,OAAS,U,CAErC,CAvBW07C,CAAkB9uE,EAAS6N,GAE3B,EAEX,CCZA,SAASkhE,GACPpkF,EACAynB,GAEA,GAAIznB,aAAoBgoB,GAAAA,mBAAoB,CAC1C,MAAMq8D,EAAiB58D,EAASE,MAAM,aAChClT,EACJ4vE,EAAelrF,OAAS,EAAIkrF,EAAe,GAAKA,EAAe,GAC3D1rE,EAASN,GAAAA,MAAMC,UAAU7D,GAC/B,QAASkE,GAAQwlB,SAAW9lC,OAAOwE,KAAK8b,EAAOwlB,SAAShlC,OAAS,C,CAC5D,GAAI6G,aAAoB0V,GAAAA,cAAe,CAC5C,MAAM,SAAEw2C,GAAalsD,EAAS8nB,gBAAkB,CAAC,EACjD,QAASokC,GAAUC,M,CAEnB,OAAO,CAEX,CC8BA,MAAQpd,sBAAqBA,IAAK7/B,GAAAA,UA6ClC,MAAMo1E,WAAkB7nD,GAiBtB1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAmBnB,KAAAk5C,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EACjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjBkG,aAAa,EACby+B,aAAa,EACblhC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CAAEtyB,OAAQ,CAAe,IAAI43B,KACtC/oB,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAgBP,OAbAptB,KAAK8rD,SAAW,CACdzuD,aACA88E,eAAe,EACfrpC,uBAEF9wC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAqEnB,KAAA6tD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,SAE1DlpD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,GAEtB,WAAEmF,GAAenF,EAsBvB,GArBA5C,KAAK+qF,oBAAsB,CACzBhjF,aACAC,kBAAmBoT,EAAgBC,IAGrCrb,KAAK8tE,kBAAkBnrE,GAEvBimD,GAAmBjmD,GAEnB3C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAGfp6E,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,GAIzC,KAAA+nD,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,OAEzB,WAAExK,EAAU,oBAAEyzC,GAAwB9wC,KAAK8rD,UAC3C,KAAE1xC,GAAS/c,EAEjB+c,EAAKmjB,QAAQtyB,OAAO,GAAK,IAAI43B,GAC7BxlC,EAAWkG,aAAc,EAEzB,MAAMX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,GACzBpN,EAAgB9C,EAAW8C,cAC3Bia,EAAO/c,EAAW+c,KAClB2a,EAAQ3a,EAAKmjB,QAAQtyB,OAAO,GAC5B8mB,EAAoBvrB,EAAS29B,cAAcpP,GAEjD6M,EAAezhC,cAAgBA,EAE/B,MAAM4jB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAErD,GACG+c,EAAKN,YAAYmU,IACkB,MAApC7T,EAAKN,YAAYmU,GAAU9sB,OAStB,GAAI9D,EAAWkG,cACpBvD,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,GASpD4D,aAAoB24B,GAAAA,gBAAgB,CACtC,MAAM,kBAAEtC,GAAsBx/B,EAAWyD,SAIzC,IAAK,MAAMmtB,KAAY7T,EAAKN,YAC1B,GAAImU,EAASC,WAAW,WAAY,CAChB9S,EAAgBizB,oBAECl4B,MAAM88C,IAGvC,MAAM+3B,EACJt1E,GAAAA,UAAAA,aAAqBmnB,GACjBkC,EAAck0B,EAAGl0B,YAAYisD,GAC7BC,EAAkBv1E,GAAAA,UAAAA,aACtBu9C,EAAGl3C,qBAEL,OAAOgjB,GAAeksD,IAAoBD,CAAkB,YAIrD5wE,EAAKN,YAAYmU,E,QAvChC7T,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACVruD,MAAO,KACPjD,MAAO,MAGTnB,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,GAyC1D,IAAK4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAKT6E,GACEv8C,EACA3vB,EAJqB,IAMrB,CAAC4xB,GACD,CAAEhO,UAGJyjD,GAAe,EAEf,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WACX,SAGF,MAAMqa,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,GAAI4H,EAAW,CACb,MAAMyuD,EAAwB,CAC5BvyD,EAAkB,GAAK,EACvBA,EAAkB,GAAK,GAIzB0yD,GACE30D,EACA3vB,EAHc,IAKd01B,EACA,CAACyuD,EAAsB,GAAIA,EAAsB,IACjD56D,E,EAKN,OAAO89C,CAAY,CA1ZrB,CAIAziC,eAAAA,GACE,OAAO,CACT,CAEAwhC,oBAAAA,GAAwB,CAqFxBxiC,uBAAAA,CACEphC,EACAtF,EACAgmC,EACAW,GAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,EACX03B,EAAQ3a,EAAKmjB,QAAQtyB,OAAO,GAC5Bs5B,EAA6B/9B,EAAS29B,cAAcpP,GAK1D,IAAa,IAFXyP,GAAAA,GAAAA,SAAcnB,EAAckB,GAA8BP,EAG1D,OAAOjP,CAEX,CAEAsxC,sBAAAA,CACEpjE,EACA5F,GAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAKPptB,KAAK8rD,SAAW,CAEdzuD,aACAyzC,uBAEF9wC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CA4QAqgF,qBAAAA,CAAsB1rF,EAAY+d,EAAiBxY,GACjD,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,EAAiB,SAAExB,GAAa5D,EAE9CigC,EAAWzoB,EAAKmjB,QAAQtyB,OAAO,IAC/B,YAAE6O,GAAgBM,EAElBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErB29E,EAAsB,CAC1B74B,YAAau4B,GAAoBpkF,EAAUynB,GAC3CyW,YAAa1kC,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,oBAIlBlR,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,WAAE0e,EAAU,UAAErB,EAAS,SAAEloC,GAAa6qB,EACtCsnB,EACJ,kBAAmBtnB,EAAQA,EAAMF,gBAAkBE,EAAMsnB,WAErDif,EAAWpxD,EAAS2xD,SACpBruD,EAAQmxC,GAAsBvM,EAAWnG,GAE/Cz+B,EAAM,GAAKqG,KAAKqpD,MAAM1vD,EAAM,IAC5BA,EAAM,GAAKqG,KAAKqpD,MAAM1vD,EAAM,IAC5BA,EAAM,GAAKqG,KAAKqpD,MAAM1vD,EAAM,IAE5B,MAAM+mF,EACJl4C,EAAWtzC,OAAS0qC,EAAW,GAAKA,EAAW,GAAKA,EAAW,GAEjE,GAAI30B,GAAAA,UAAAA,sBAA8BtR,EAAOimC,GAAa,CACpDrqC,KAAK+/E,sBAAuB,EAC5B,MAAM/rC,EAAY3J,EAAW,GAAK8gD,EAC5Bl3C,EAAY5J,EAAW,GAAKA,EAAW,GAAK8gD,EAE5CC,EACJhnF,EAAM,GAAK6vC,EACX7vC,EAAM,GAAK4vC,EACX5vC,EAAM,GAAK+mF,EACb,IAwBIE,EAxBAlqF,EACFgqF,EAAkB,EACd,CACEl4C,EAAWm4C,GACXn4C,EAAWm4C,EAAY,GACvBn4C,EAAWm4C,EAAY,IAEzBn4C,EAAWm4C,GAIjB,GAAIn9D,EAASC,WAAW,YAAa,CACnC,MAAMrS,EAAUoS,EAASE,MAAM,YAAY,GACrCC,EAAW1Y,GAAAA,UAAAA,aAAqBmG,GAMhCrV,EALYkP,GAAAA,UAAAA,yBAChB0Y,EACApmB,GAGyB,GAE3B5D,EAAM,GAAKoC,EAASg/B,wB,CAKtB,GAAiB,OAAb0sB,EAAmB,CACrB,MAAMo5B,EAAoB/6C,GAAgC5kB,EAAO,CAC/DvnB,IAGImnF,EAA0BD,EAAkB9kE,OAAOglE,OACtDrqF,GAAoB,OAAVA,IAGbA,EAAQoqF,EAA0BD,EAAkB9kE,OAASrlB,EAC7DkqF,EAAeE,EACXD,EAAkBr8C,MAClB,K,MAEJo8C,EAAeb,GACbt4B,EACA70D,EAAWyD,SAAS+7B,kBACpBquD,GAIJpxE,EAAYmU,GAAY,CACtB7pB,QACAjD,QACAsxD,SAAUP,EACVm5B,e,MAGFrrF,KAAK+/E,sBAAuB,EAC5BjmE,EAAYmU,GAAY,CACtB7pB,QACAquD,SAAUP,GAId70D,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,sBAGFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvC,OAAO4W,CACT,EAGF,SAASwrE,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,MAAE7pB,EAAK,MAAEjD,EAAK,aAAEkqF,GAAiBd,EAEvC,QAAcjnF,IAAVnC,EACF,OAGF,MAAM00B,EAAY,GAIlB,GAFAA,EAAUh4B,KAAK,IAAIuG,EAAM,OAAOA,EAAM,OAAOA,EAAM,OAE/CjD,aAAiB9C,OAASgtF,aAAwBhtF,MACpD,IAAK,IAAIkP,EAAI,EAAGA,EAAIpM,EAAMxB,OAAQ4N,IAChCsoB,EAAUh4B,KAAK,GAAG44C,GAAYt1C,EAAMoM,OAAO89E,EAAa99E,WAG1DsoB,EAAUh4B,KAAK,GAAG44C,GAAYt1C,MAAUkqF,KAG1C,OAAOx1D,CACT,CAEAi1D,GAAUnqF,SAAW,QACrB,YClqBA,MAAM8qF,WAAsBX,GAiB1BvoF,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAGnB,KAAAg/D,sBACEzoF,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EACjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGIzlC,EAA8B,CAClCkG,aAAa,EACby+B,aAAa,EACbjgC,WAAW,EACXjB,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,oBAAqByD,EAASq4B,yBAC9BhC,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CAAEtyB,OAAQ,CAAe,IAAI43B,KACtC/oB,YAAa,CAAC,IAIZg3B,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAgBP,OAbAptB,KAAK8rD,SAAW,CACdzuD,aACA88E,eAAe,EACfrpC,uBAEF9wC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAGnB,KAAAsuF,uBACE1oF,GAEOjD,KAAK0rF,sBAAsBzoF,GAGpC,KAAA+4B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,EAErB,IAAK5C,KAAK8rD,SACR,OAAO0b,EAGT,MAAMpkE,EAAcpD,KAAK2iC,wCACvBn8B,EAAS7D,QACT,CAAC3C,KAAK8rD,SAASzuD,aAGjB,IAAK+F,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGhChe,EAAa2C,KAAK8rD,SAASzuD,WAC3B8C,EAAgB9C,EAAW8C,cAC3Bia,EAAO/c,EAAW+c,KAClB2a,EAAQ3a,EAAKmjB,QAAQtyB,OAAO,GAC5B8mB,EAAoBvrB,EAAS29B,cAAcpP,GAEjD6M,EAAezhC,cAAgBA,EAE/B,MAAM4jB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAGtCutF,GAAoBpkF,EAAUynB,GAE9BjuB,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,mBAoBxB,GAfGziB,EAAKN,YAAYmU,IACkB,MAApC7T,EAAKN,YAAYmU,GAAU9sB,MASlB9D,EAAWkG,aACpBvD,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,IARxDwX,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACVruD,MAAO,KACPjD,MAAO,MAGTnB,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,KAMrD4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAKT6E,GACEv8C,EACA3vB,EAJqB,IAMrB,CAAC4xB,GACD,CAAEhO,UAGJyjD,GAAe,EAEf,MAAM3xC,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,GAAI4H,EAAW,CACb,MAAMyuD,EAAwB,CAC5BvyD,EAAkB,GAAK,EACvBA,EAAkB,GAAK,GAIzB0yD,GACE30D,EACA3vB,EAHc,IAKd01B,EACA,CAACyuD,EAAsB,GAAIA,EAAsB,IACjDtkF,KAAKykC,sBAAsB7C,EAAgBvkC,G,CAI/C,OAAOmqE,CAAY,CAxKrB,EA4KF,SAAS8d,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,MAAE7pB,EAAK,MAAEjD,EAAK,aAAEkqF,GAAiBd,EAEvC,QAAcjnF,IAAVnC,EACF,OAGF,MAAM00B,EAAY,GAMlB,OAJAA,EAAUh4B,KAAK,IAAIuG,EAAM,OAAOA,EAAM,OAAOA,EAAM,OAEnDyxB,EAAUh4B,KAAK,GAAGsD,EAAM+jC,QAAQ,MAAMmmD,KAE/Bx1D,CACT,CAEA41D,GAAc9qF,SAAW,YACzB,aCrLQ40C,sBAAqBA,IAAK7/B,GAAAA,UAyClC,MAAMk2E,WAAyB3oD,GAe7B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,GACdxhD,gBAAiBs4B,MAIrBl5B,MAAMzW,EAAWC,GAiBnB,KAAAk5C,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjBkG,aAAa,EACby+B,aAAa,EACblhC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CACPtyB,OAAQ,CACQ,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAEpBrK,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtCd,kBAAmB,MAErB1pB,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAmBP,OAhBAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAElBgoD,EAAe/+E,EAAS29B,cAAcl5B,EAAO,IAC7Cu6E,EAAeh/E,EAAS29B,cAAcl5B,EAAO,IAE7C/D,EAAOlH,KAAK6rF,8BAA8B,CAC9CtG,EACAC,IAGIzwD,EAAQ,CAACsO,EAAa,GAAIA,EAAa,KACvC,KAAEj8B,EAAI,IAAEG,EAAG,MAAEspB,EAAK,OAAEyC,GAAWpsB,EAOrC,OALwB4kF,GACtB,CAAC1kF,EAAMG,EAAKspB,EAAOyC,GACnByB,IAGqBiP,CAIX,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjBzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAc5B,GAZA5C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAGfp6E,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,GAIzC,KAAA+nD,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,OAAEoD,GAAWmP,EAAKmjB,QAExBtyB,EAAO/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpBN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,cAAEwhC,EAAa,cAAEr8B,GAAkBlF,EAAe4D,SAClDq8B,EAAWt6B,EAAcV,OAEzB,OAAEoD,GAAWmP,EAAKmjB,QAKxB,IAAIwuD,EACAtqC,EACAD,EACAwqC,EAEAC,EACA91C,EACAD,EACAg2C,EAEJ,OAZAjhF,EAAOivE,GAAe,IAAIr3C,GAYlBq3C,GACN,KAAK,EACL,KAAK,EAGH6R,EAAmB5nD,EAAcl5B,EAAO,IACxC+gF,EAAiB7nD,EAAcl5B,EAAO,IAEtCw2C,EAAoB,CAACuqC,EAAe,GAAID,EAAiB,IACzDvqC,EAAgB,CAACuqC,EAAiB,GAAIC,EAAe,IAErD71C,EAAmBruC,EAAc25C,GACjCvL,EAAepuC,EAAc05C,GAE7Bv2C,EAAO,GAAKkrC,EACZlrC,EAAO,GAAKirC,EAEZ,MACF,KAAK,EACL,KAAK,EAEHuL,EAAoBtd,EAAcl5B,EAAO,IACzCu2C,EAAgBrd,EAAcl5B,EAAO,IAErC8gF,EAAiC,CAC/BvqC,EAAc,GACdC,EAAkB,IAEpBuqC,EAA+B,CAC7BvqC,EAAkB,GAClBD,EAAc,IAGhByqC,EAAkBnkF,EAAcikF,GAChCG,EAAgBpkF,EAAckkF,GAE9B/gF,EAAO,GAAKghF,EACZhhF,EAAO,GAAKihF,EAIhB7uF,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAE1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAMtB,KAAAuqD,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAM/D,KAAAC,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAMlE,KAAAkb,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAM/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QACrCxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnExT,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,IAE/C,gBAAEo/B,EAAe,OAAEqG,GAAWt8B,EAAS44B,YAI7C,GACGhlB,EAAKN,YAAYmU,IACqB,MAAvC7T,EAAKN,YAAYmU,GAAUk+D,UAkBtB,GAAI9uF,EAAWkG,cACpBvD,KAAK8oF,+BACHzrF,EACAo/B,EACAqG,EACA1nB,EACAxY,GAUE4D,aAAoB24B,GAAAA,gBAAgB,CACtC,MAAM,kBAAEtC,GAAsBx/B,EAAWyD,SAIzC,IAAK,MAAMmtB,KAAY7T,EAAKN,YAC1B,GAAImU,EAASC,WAAW,WAAY,CAChB9S,EAAgBizB,oBAECl4B,MAAM88C,IAGvC,MAAM+3B,EACJt1E,GAAAA,UAAAA,aAAqBmnB,GACjBkC,EAAck0B,EAAGl0B,YAAYisD,GAC7BC,EAAkBv1E,GAAAA,UAAAA,aACtBu9C,EAAGl3C,qBAEL,OAAOgjB,GAAeksD,IAAoBD,CAAkB,YAIrD5wE,EAAKN,YAAYmU,E,QAtDhC7T,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACViP,KAAM,KACNp0B,IAAK,KACLqxB,KAAM,KACNC,OAAQ,KACRutB,SAAU,MAGZnsF,KAAK+oF,sBACH1rF,EACAo/B,EACAqG,EACA1nB,EACAxY,GAgDJ,IAAK4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIsT,EAEJ,IAAKj5E,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB26E,EACA,CACE/2D,S,CAKN,MAAM4M,EAAS,GAAGxwB,SAElBisF,GACEt8D,EACA3vB,EAHmB,IAKnB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACAgN,WACAD,aAEFH,GAGF62C,GAAe,EAEf,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,SAGF,IAAKya,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAClC,MAAMyO,EAAsBtE,GAAuB7yD,GAEnD3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EAGrB,KAAAqkB,8BACE5gF,IAOA,MAAOE,EAAQC,GAAUH,EAEzB,MAAO,CACL7D,KAAMqD,KAAK8U,IAAIpU,EAAO,GAAIC,EAAO,IACjC7D,IAAKkD,KAAK8U,IAAIpU,EAAO,GAAIC,EAAO,IAChCylB,MAAOpmB,KAAKC,IAAIS,EAAO,GAAKC,EAAO,IACnCkoB,OAAQ7oB,KAAKC,IAAIS,EAAO,GAAKC,EAAO,IACrC,EAcH,KAAA29E,sBAAwB,CACtB1rF,EACAo/B,EACAqG,EACA1nB,EACAxY,KAEA,MAAM,KAAEwX,GAAS/c,GACX,WAAE0K,EAAU,kBAAEC,EAAiB,SAAExB,GAAa5D,EAE9C0mF,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,IAChC,YAAE6O,GAAgBM,EAElBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,WAAE0e,EAAU,UAAErB,EAAS,SAAEloC,GAAa6qB,EAItC0gE,GAFJ,kBAAmB1gE,EAAQA,EAAMF,gBAAkBE,EAAMsnB,WAEpCsC,GAAsBvM,EAAWsgD,IAExD+C,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAE9C,MAAMC,EAAiB/2C,GAAsBvM,EAAWugD,GASxD,GAPA+C,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAK1CtsF,KAAKkqF,gBAAgBmC,EAAgBC,EAAgBjiD,GAAa,CACpErqC,KAAK+/E,sBAAuB,EAI5B,MASMrtC,EAAY,CAChB,CAVWjoC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAUtD,CARW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAQtD,CANW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,OAQlD,WAAEp0B,EAAU,YAAEC,GAAgBN,GAClCp7B,EACAqG,EACAwmD,EACAC,GAEIn7C,EAAQkB,GAAmB3jB,GAE3B+1C,EAAOj3D,KAAKC,IAAIwtD,EAAaC,IAAgB/pB,EAAQA,GAErD88C,EAAsB,CAC1B74B,YAAau4B,GAAoBpkF,EAAUynB,GAE3CyW,YAAa1kC,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,oBAIlBwuD,EAAeb,GACnB1pF,EAAS2xD,SACTp1D,EAAWyD,SAAS+7B,kBACpBquD,GAGIh3C,EAAgB1B,GACpBxJ,GACA,KAAM,GACNhpC,KAAK4sB,cAAckX,gBAAgB06B,cACnC9rB,GAGI65C,EAAQvsF,KAAK4sB,cAAckX,gBAAgB46B,gBAEjD5kD,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,SACnBiP,OACA/C,KAAM4tB,EAAM,IAAIprF,MAChBy9D,OAAQ2tB,EAAM,IAAIprF,MAClBmsC,IAAKi/C,EAAM,IAAIprF,MACfqrF,WAAYD,EACZr4C,cAAeA,EACfi4C,SAAU98C,GAAuB,KAAM1jB,GACvC0/D,e,MAGFrrF,KAAK+/E,sBAAuB,EAC5BjmE,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,S,CAKzBp1D,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CAAW,EAGpB,KAAAowE,gBAAkB,CAACJ,EAAQC,EAAQ1/C,IAE/B30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,GA12BxCrqC,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,EAi3BF,SAASq5C,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,KAAEyzC,EAAI,KAAE/C,EAAI,IAAErxB,EAAG,OAAEsxB,EAAM,SAAEutB,EAAQ,aAAEd,GAAiBd,EAE5D,QAAajnF,IAATq7D,EACF,OAGF,MAAM9oC,EAAsB,GAO5B,OALAA,EAAUh4B,KAAK,SAAS44C,GAAYirB,MAASyqB,KAC7Ct2D,EAAUh4B,KAAK,SAAS44C,GAAYkoB,MAAS0sB,KAC7Cx1D,EAAUh4B,KAAK,QAAQ44C,GAAYnJ,MAAQ+9C,KAC3Cx1D,EAAUh4B,KAAK,YAAY44C,GAAYmoB,MAAWysB,KAE3Cx1D,CACT,CAEA+1D,GAAiBjrF,SAAW,eAC5B,YC1/Bc,SAAU8rF,GACtBhwD,EACAqG,EACAwmD,EACAC,GAEA,MAAMtzC,EAAYhZ,GAAAA,GAAAA,SAElBA,GAAAA,GAAAA,MAAWgZ,EAAiBnT,EAAcrG,GAE1C,MAAMq7B,EAAO76B,GAAAA,GAAAA,cAAmBqsD,GAC1BvxB,EAAO96B,GAAAA,GAAAA,cAAmBssD,GAE1BvxB,EAAW/6B,GAAAA,GAAAA,SACjBA,GAAAA,GAAAA,SAAc+6B,EAAUF,EAAMC,GAE9B,MAAME,EAAiBh7B,GAAAA,GAAAA,OAAY+6B,GAInC,GAAIC,EAAiB,KACnB,MAAO,CAAEC,WAAY,EAAGC,YAAa,GAGvC,MAAMC,EACJn7B,GAAAA,GAAAA,IAAS+6B,EAAU/hB,IAAcgiB,EAAiBh7B,GAAAA,GAAAA,OAAYgZ,IAOhE,MAAO,CAAEiiB,WALQztD,KAAKuE,KAAK,EAAIopD,EAAWA,GAEZH,EAGTE,YAFDC,EAAWH,EAGjC,CCiBA,MAAQ1iB,sBAAqBA,IAAK7/B,GAAAA,UAiDlC,MAAMg3E,WAA0BzpD,GAqB9B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAG3B+M,kBAAmB,EACnB9oD,aAAcyhD,GACdxhD,gBAAiBs4B,MAIrBl5B,MAAMzW,EAAWC,GAjBnB,KAAAqzD,sBAAuB,EAkCvB,KAAAna,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAGzBjF,GAFY2F,EAAcX,QAET/E,EAAAA,GAAAA,mBAAkBF,KACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CACP/E,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtCr5B,OAAQ,CACN,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAENW,kBAAmB,MAErB1pB,YAAa,CAAC,EACd8yE,gBAAiBpmF,EAASqmF,gBAI9B7oF,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAkBP,OAfAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA4E,YAAa7S,EACbs3C,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAUlBuvD,EAAgB90C,GANI/sC,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,OAQ5DmwC,EAAcC,GAAgBsH,EAE/BC,EAAe,CACnB3lF,KAAMqD,KAAK8U,IAAIgmE,EAAa,GAAIC,EAAa,IAAMxhD,EAAY,EAC/Dz8B,IAAKkD,KAAK8U,IAAIgmE,EAAa,GAAIC,EAAa,IAAMxhD,EAAY,EAC9DnT,MAAOpmB,KAAKC,IAAI66E,EAAa,GAAKC,EAAa,IAAMxhD,EACrD1Q,OAAQ7oB,KAAKC,IAAI66E,EAAa,GAAKC,EAAa,IAAMxhD,GAGlDgpD,EAAe,CACnB5lF,KAAMqD,KAAK8U,IAAIgmE,EAAa,GAAIC,EAAa,IAAMxhD,EAAY,EAC/Dz8B,IAAKkD,KAAK8U,IAAIgmE,EAAa,GAAIC,EAAa,IAAMxhD,EAAY,EAC9DnT,MAAOpmB,KAAKC,IAAI66E,EAAa,GAAKC,EAAa,IAAMxhD,EACrD1Q,OAAQ7oB,KAAKC,IAAI66E,EAAa,GAAKC,EAAa,IAAMxhD,GAGlDipD,EAAsBjtF,KAAKktF,sBAC/BH,EACA1pD,GAOF,SAL4BrjC,KAAKktF,sBAC/BF,EACA3pD,IAG0B4pD,EAIhB,EAGd,KAAA1mB,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjB58B,GAAkBlmD,GAElB3C,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EAEAxuB,EACAhW,EACAy3C,EACAC,EACAC,EAPA5H,GAAgB,EASpB,GAAKxyD,EAAyBstD,cAC5BkF,GAAgB,MACX,CACL,MAAM,OAAEx6E,GAAWmP,EAAKmjB,SAClB,SAAE/2B,IAAa3D,EAAAA,GAAAA,mBAAkBF,IACjC,cAAEwhC,EAAa,cAAEr8B,GAAkBtB,EAEzC0zE,EAAcjvE,EAAO5G,WAAW+wC,GAAMA,IAAMniB,IAE5C,MAAMq6D,EAAeriF,EAAOqC,IAAI62B,GAEhCkpD,EAAuBC,EAAapT,GAEpCiT,EAAc1iF,KAAKC,IAAI4iF,EAAa,GAAG,GAAKA,EAAa,GAAG,IAC5DF,EAAe3iF,KAAKC,IAAI4iF,EAAa,GAAG,GAAKA,EAAa,GAAG,IAE7D5hC,EAAe,EACZ4hC,EAAa,GAAG,GAAKA,EAAa,GAAG,IAAM,GAC3CA,EAAa,GAAG,GAAKA,EAAa,GAAG,IAAM,GAG9C53C,EAAc5tC,EAAc4jD,E,CAI9B,MAAM5a,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAiT,cACAC,eACA13C,cACA23C,uBACA5H,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAOFp9E,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAc5B,GAZA5C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAGfp6E,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,GAIzC,KAAAq3E,kBAAqBt3E,IACnBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OACpChF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEkF,GAAkBtB,GAGpB,WAAEnJ,EAAU,oBAAEyzC,EAAmB,YAAE4E,GAAgB11C,KAAK8rD,SACxDJ,EAAellD,EAAS29B,cAAcuR,IACtC,KAAEt7B,GAAS/c,EAEXmwF,EAAK/iF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IACpD+hC,EAAKhjF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IAGpDgiC,EAA6B,CAAChiC,EAAa,GAAIA,EAAa,GAAK+hC,GACjEE,EAA0B,CAACjiC,EAAa,GAAIA,EAAa,GAAK+hC,GAC9DG,EAA2B,CAACliC,EAAa,GAAK8hC,EAAI9hC,EAAa,IAC/DmiC,EAA4B,CAACniC,EAAa,GAAK8hC,EAAI9hC,EAAa,IAEtEtxC,EAAKmjB,QAAQtyB,OAAS,CACpBnD,EAAc4lF,GACd5lF,EAAc6lF,GACd7lF,EAAc8lF,GACd9lF,EAAc+lF,IAGhBxwF,EAAWkG,aAAc,EAEzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB9U,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA4pC,oBAAuBz3E,IACrBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CACjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,MAEzBvD,KAAK26E,YAAY13E,GACjB5F,EAAWkG,aAAc,EAG3B,MAAMX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA6pC,YAAe13E,IACb,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,SAAEsD,IAAa3D,EAAAA,GAAAA,mBAAkBF,IACjC,cAAEmF,EAAa,cAAEq8B,GAAkB39B,GAEnC,WACJnJ,EAAU,YACV8vF,EAAW,aACXC,EAAY,YACZlT,EAAW,YACXxkC,EAAW,qBACX23C,GACErtF,KAAK8rD,SACHJ,EAAellD,EAAS29B,cAAcuR,IACtC,KAAEt7B,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,SAKlB,cAAEh1B,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OAE1C,GAAoB,IAAhBsyE,GAAqC,IAAhBA,EAAmB,CAE1C,MAAM4T,EAAWrjF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IAC1DquB,EAA6B,CACjCruB,EAAa,GACbA,EAAa,GAAKoiC,GAEdhU,EAA0B,CAC9BpuB,EAAa,GACbA,EAAa,GAAKoiC,GAGpB7iF,EAAO,GAAKnD,EAAciyE,GAC1B9uE,EAAO,GAAKnD,EAAcgyE,GAE1B,MACMiU,EAAqBZ,EAAc,GADxBI,EAAoB,GAAKF,EAAqB,IAEzDrT,EAA2B,CAC/BtuB,EAAa,GAAKqiC,EAClBriC,EAAa,IAETsiC,EAA4B,CAChCtiC,EAAa,GAAKqiC,EAClBriC,EAAa,IAGfzgD,EAAO,GAAKnD,EAAckyE,GAC1B/uE,EAAO,GAAKnD,EAAckmF,E,KACrB,CAEL,MAAMC,EAAWxjF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IAC1DsuB,EAA2B,CAC/BtuB,EAAa,GAAKuiC,EAClBviC,EAAa,IAETsiC,EAA4B,CAChCtiC,EAAa,GAAKuiC,EAClBviC,EAAa,IAGfzgD,EAAO,GAAKnD,EAAckyE,GAC1B/uE,EAAO,GAAKnD,EAAckmF,GAE1B,MACME,EAAsBd,EAAe,GAD1BG,EAAoB,GAAKF,EAAqB,IAEzDtT,EAA6B,CACjCruB,EAAa,GACbA,EAAa,GAAKwiC,GAEdpU,EAA0B,CAC9BpuB,EAAa,GACbA,EAAa,GAAKwiC,GAGpBjjF,EAAO,GAAKnD,EAAciyE,GAC1B9uE,EAAO,GAAKnD,EAAcgyE,E,GAI9B,KAAAvsC,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAGlE,KAAAR,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAAC,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAE5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,QAAEkgC,GAAYnjB,GACd,OAAEnP,EAAM,kBAAEu4B,GAAsBjG,EAEtCqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,KAMnB03C,GAHWriF,KAAKC,IACpBlE,EAASqmF,eAAiBzyE,EAAKwyE,iBAAmB,IAGlD50C,GAAwBjmB,KAGpB,kBAAE46D,GAAsB3sF,KAAK4sB,cAInC,GACGxS,EAAKN,YAAYmU,IACqB,MAAvC7T,EAAKN,YAAYmU,GAAUk+D,UAiBtB,GAAI9uF,EAAWkG,cACpBvD,KAAK8oF,+BACHzrF,EACAmJ,EACA4U,EACAxY,GAQE4D,aAAoB24B,GAAAA,gBAAgB,CACtC,MAAM,kBAAEtC,GAAsBx/B,EAAWyD,SAIzC,IAAK,MAAMmtB,KAAY7T,EAAKN,YAC1B,GAAImU,EAASC,WAAW,WAAY,CAChB9S,EAAgBizB,oBAECl4B,MAAM88C,IAGvC,MAAM+3B,EACJt1E,GAAAA,UAAAA,aAAqBmnB,GACjBkC,EAAck0B,EAAGl0B,YAAYisD,GAC7BC,EAAkBv1E,GAAAA,UAAAA,aACtBu9C,EAAGl3C,qBAEL,OAAOgjB,GAAeksD,IAAoBD,CAAkB,YAIrD5wE,EAAKN,YAAYmU,E,QAlDhC7T,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACViP,KAAM,KACNp0B,IAAK,KACLqxB,KAAM,KACNC,OAAQ,KACRutB,SAAU,MAGZnsF,KAAK+oF,sBACH1rF,EACAmJ,EACA4U,EACAxY,GA6CJ,IAAK4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIsT,EAEJ,IAAKj5E,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAE5BzO,GACEv8C,EACA3vB,EAHqB,IAKrB26E,EACA,CACE/2D,S,CAKN,MACM+N,EAAa,IAenB,GAdAq8D,GACEr+D,EACA3vB,EACA2xB,EACAC,EACA,CACEhO,QACAgN,WACAD,aAVW,GAAG3wB,aAgBdwsF,EAAoB,EAAG,CAKzB,GAJkBliF,KAAK8U,IACrB9U,KAAKC,IAAIoiF,EAAc,GAAG,GAAKA,EAAc,GAAG,IAAM,EACtDriF,KAAKC,IAAIoiF,EAAc,GAAG,GAAKA,EAAc,GAAG,IAAM,GAExC,EAAIH,EAAmB,CACrC,MAAMyB,EAAcpuF,KAAKquF,wBAAwBt8D,GACjDw6B,GACEz8B,EACA3vB,EACA,GAAG2xB,WACHs8D,EACAzB,EACA,CACE5oE,QACAgN,WACAD,a,EAMR02C,GAAe,EAEf,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,SAIF,IAAIupF,EAEC9uE,EAAKmjB,QAAQ/E,QAAQiiD,WACxByO,EAAsBtE,GAAuBkI,GAE7C1yE,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,IAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EAGrB,KAAAuhB,sBAAwB,CACtB1rF,EACAmJ,EACA4U,EACAxY,KAEA,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,GAEpC,OAAEqI,GAAWmP,EAAKmjB,QAElBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,MAC7D,gBAAE3Y,EAAe,OAAEqG,GAAWt8B,EAAS44B,aAEtCoiB,EAAeC,GACpBzJ,GAAwBjmB,GAGpBmkB,EAAe1vC,EAASsB,cAAc05C,GACtCrL,EAAmB3vC,EAASsB,cAAc25C,IAC1C,YAAE3nC,GAAgBM,EAElBsvE,EAAY7qF,OAAOwE,KAAKyW,GACxBwvE,EAAYpzC,EACZqzC,EAAYpzC,EAElB,IAAK,IAAI5oC,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,WAAE0e,EAAU,UAAErB,EAAS,SAAEloC,EAAQ,gBAAEkuC,GAAoBrjB,EAEvD0gE,EAAiB92C,GAAsBvM,EAAWsgD,GAExD+C,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAE9C,MAAMC,EAAiB/2C,GAAsBvM,EAAWugD,GASxD,GAPA+C,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAK1CtsF,KAAKkqF,gBAAgBmC,EAAgBC,EAAgBjiD,GAAa,CACpE,MASMqI,EAAY,CAChB,CAVWjoC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAUtD,CARW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAQtD,CANW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,MAclDgC,EAAa,CACjB79D,OAPa,EACZylB,EAAa,GAAKC,EAAiB,IAAM,GACzCD,EAAa,GAAKC,EAAiB,IAAM,GACzCD,EAAa,GAAKC,EAAiB,IAAM,GAK1CgB,QAAS1sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC3DiB,QAAS3sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC3DkB,QAAS5sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,IAGvD,WAAE+hB,EAAU,YAAEC,GAAgBs0B,GAClChwD,EACAqG,EACAwmD,EACAC,GAEIgF,EAA6B,IAAfr2B,GAAoC,IAAhBC,EAClC/pB,EAAQkB,GAAmB3jB,GAC3B+1C,EACJj3D,KAAKC,IAAID,KAAK+nB,IAAM0lC,EAAa,IAAMC,EAAc,IACrD/pB,EACAA,EAEI88C,EAAsB,CAC1B74B,YAAau4B,GAAoBpkF,EAAUynB,GAE3CyW,YAAa1kC,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,oBAIlBwuD,EAAeb,GACnB1pF,EAAS2xD,SACTp1D,EAAWyD,SAAS+7B,kBACpBquD,GAGIh3C,EAAgB1B,GACpBxJ,GACCuL,GAAauC,GAAew3C,EAAY/5C,EAAU,CAAEi6C,MAAM,KAC3DxuF,KAAK4sB,cAAckX,gBAAgB06B,cACnC9rB,GAGI65C,EAAQvsF,KAAK4sB,cAAckX,gBAAgB46B,gBAEjD5kD,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,SACnBiP,OACA/C,KAAM4tB,EAAM,IAAIprF,MAChBmsC,IAAKi/C,EAAM,IAAIprF,MACfy9D,OAAQ2tB,EAAM,IAAIprF,MAClBqrF,WAAYD,EACZr4C,cAAeA,EACfq6C,cACApC,SAAU98C,GAAuB,KAAM1jB,GACvC0/D,e,MAGFrrF,KAAK+/E,sBAAuB,EAE5BjmE,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,S,CAKzBp1D,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAKF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CAAW,EAGpB,KAAAowE,gBAAkB,CAACJ,EAAQC,EAAQ1/C,IAE/B30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,GAr+BxCrqC,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CA6+BAihD,qBAAAA,CAAsBn2C,EAAS+qC,GAC7B,MAAM3qC,EAAUJ,EAAQlmB,MAAQ,EAC1BumB,EAAUL,EAAQzjB,OAAS,EAEjC,GAAI6jB,GAAW,GAAOC,GAAW,EAC/B,OAAO,EAGT,MAAM3mB,EAAS,CAACsmB,EAAQ3vC,KAAO+vC,EAASJ,EAAQxvC,IAAM6vC,GAChDq3C,EAAa,CAAC3M,EAAS,GAAKrxD,EAAO,GAAIqxD,EAAS,GAAKrxD,EAAO,IAOlE,OAJGg+D,EAAW,GAAKA,EAAW,IAAOt3C,EAAUA,GAC1Cs3C,EAAW,GAAKA,EAAW,IAAOr3C,EAAUA,IAC/C,CAGJ,CAQAi3C,uBAAAA,CAAwBp2C,GACtB,MAAOhmB,EAAQ1qB,EAAKH,EAAM8qB,GAAS+lB,EAC7B/T,EAAU,CAAC98B,EAAK,GAAIG,EAAI,IACxB+8B,EAAc,CAACpS,EAAM,GAAID,EAAO,IACtC,MAAO,EACJiS,EAAQ,GAAKI,EAAY,IAAM,GAC/BJ,EAAQ,GAAKI,EAAY,IAAM,EAEpC,EAGF,SAASghD,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,KAAEyzC,EAAI,KAAE/C,EAAI,OAAEC,EAAM,IAAEtxB,EAAG,YAAEihD,EAAW,SAAEpC,EAAQ,aAAEd,GACtDd,EAEI10D,EAAsB,GAE5B,GAAI6rC,EAAM,CACR,MAAMgtB,EAAWH,EACb,8BACA,SAAS93C,GAAYirB,MAASyqB,IAClCt2D,EAAUh4B,KAAK6wF,E,CAejB,OAZI/vB,GACF9oC,EAAUh4B,KAAK,SAAS44C,GAAYkoB,MAAS0sB,KAG3C/9C,GACFzX,EAAUh4B,KAAK,QAAQ44C,GAAYnJ,MAAQ+9C,KAGzCzsB,GACF/oC,EAAUh4B,KAAK,YAAY44C,GAAYmoB,MAAWysB,KAG7Cx1D,CACT,CAEA62D,GAAkB/rF,SAAW,gBAC7B,aC5oCQ40C,sBAAqBA,IAAK7/B,GAAAA,UAiDlC,MAAMi5E,WAAsB1rD,GAiB1B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAG3B+M,kBAAmB,EACnB9oD,aAAcyhD,GACdxhD,gBAAiBs4B,MAIrBl5B,MAAMzW,EAAWC,GAjBnB,KAAAqzD,sBAAuB,EAkCvB,KAAAna,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAGzBjF,GAFY2F,EAAcX,QAET/E,EAAAA,GAAAA,mBAAkBF,KACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJJ,MAAO,GACPujB,QAAS,CACP/E,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtCr5B,OAAQ,CAAC,IAAI43B,GAAW,IAAIA,IAI5BW,kBAAmB,MAErB1pB,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAqpC,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAIlBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAK7D1kB,EAAS4hD,GAAsBvgD,GAC/BkoD,EAAc3H,GAAsB,CACxCvgD,EAAkB,GAClBsR,IAGF,OAAI54B,KAAKC,IAAIuvE,EAAcvpD,GAAUsT,EAAY,CAIrC,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjB58B,GAAkBlmD,GAElB3C,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGpB,GAAKxyD,EAAyBstD,cAC5BkF,GAAgB,MACX,CACL,MAAM,OAAEx6E,GAAWmP,EAAKmjB,QAExB28C,EAAcjvE,EAAO5G,WAAW+wC,GAAMA,IAAMniB,G,CAI9C,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAOFp9E,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAc5B,GAZA5C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAGfp6E,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,GAIzC,KAAAq3E,kBAAqBt3E,IACnBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OACpChF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEkF,GAAkBtB,GAGpB,WAAEnJ,EAAU,oBAAEyzC,GAAwB9wC,KAAK8rD,UAC3C,KAAE1xC,GAAS/c,EAEjB+c,EAAKmjB,QAAQtyB,OAAS,CACpBmP,EAAKmjB,QAAQtyB,OAAO,GACpBnD,EAAcylF,IAGhBlwF,EAAWkG,aAAc,EAEzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB9U,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA4pC,oBAAuBz3E,IACrBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CACjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,MAEzBvD,KAAK26E,YAAY13E,GACjB5F,EAAWkG,aAAc,EAG3B,MAAMX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAA6pC,YAAe13E,IACb,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,cAAEmF,EAAa,cAAEq8B,GAAkBvhC,EAAe4D,UAElD,WAAEnJ,EAAU,YAAE68E,GAAgBl6E,KAAK8rD,UACnC,KAAE1xC,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAElBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAMjR,EAAciR,MAKpD,cAAE7sC,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OAE1C,GAAoB,IAAhBsyE,EAAmB,CAErB,MAAM+T,EAAWV,EAAoB,GAAKx7D,EAAkB,GAAG,GACzD+7D,EAAWP,EAAoB,GAAKx7D,EAAkB,GAAG,GAEzDwkD,EAAegX,EACfqB,EAA0B,CAC9B78D,EAAkB,GAAG,GAAKk8D,EAC1Bl8D,EAAkB,GAAG,GAAK+7D,GAG5B7iF,EAAO,GAAKnD,EAAcyuE,GAC1BtrE,EAAO,GAAKnD,EAAc8mF,E,MAG1B3jF,EAAO,GAAKnD,EAAcylF,E,EAI9B,KAAAhgD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK06E,qBACjD/3E,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK06E,qBACpD/3E,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAGlE,KAAAR,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKu6E,mBACjD53E,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG/D,KAAAC,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKu6E,mBACpD53E,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAE5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,QAAEkgC,GAAYnjB,GACd,OAAEnP,EAAM,kBAAEu4B,GAAsBjG,EAEtCqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GACpC5uC,EAAS29B,cAAciR,KAEnB3kB,EAASsB,EAAkB,GAC3BrB,EAAS4hD,GAAsBvgD,GAC/B+6D,EAAgBta,GAAuBzgD,IAEvC,kBAAE46D,GAAsB3sF,KAAK4sB,cAInC,GACGxS,EAAKN,YAAYmU,IACqB,MAAvC7T,EAAKN,YAAYmU,GAAUk+D,UAoBtB,GAAI9uF,EAAWkG,cACpBvD,KAAK8oF,+BACHzrF,EACAmJ,EACA4U,EACAxY,GAQE4D,aAAoB24B,GAAAA,gBAAgB,CACtC,MAAM,kBAAEtC,GAAsBx/B,EAAWyD,SAIzC,IAAK,MAAMmtB,KAAY7T,EAAKN,YAC1B,GAAImU,EAASC,WAAW,WAAY,CAChB9S,EAAgBizB,oBAECl4B,MAAM88C,IAGvC,MAAM+3B,EACJt1E,GAAAA,UAAAA,aAAqBmnB,GACjBkC,EAAck0B,EAAGl0B,YAAYisD,GAC7BC,EAAkBv1E,GAAAA,UAAAA,aACtBu9C,EAAGl3C,qBAEL,OAAOgjB,GAAeksD,IAAoBD,CAAkB,YAIrD5wE,EAAKN,YAAYmU,E,QArDhC7T,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACViP,KAAM,KACNp0B,IAAK,KACLqxB,KAAM,KACNC,OAAQ,KACRutB,SAAU,KACVz7D,OAAQ,KACRm+D,WAAY,KACZC,UAAW,MAGb9uF,KAAK+oF,sBACH1rF,EACAmJ,EACA4U,EACAxY,GA6CJ,IAAK4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIsT,EAEJ,IAAKj5E,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAE5BzO,GACEv8C,EACA3vB,EAHqB,IAKrB26E,EACA,CACE/2D,S,CAKN,MACMyM,EAAY,IAClB+7B,GACEz8B,EACA3vB,EACAqwB,EACAC,EACAC,EACA,CACE3M,QACAgN,WACAD,aAXW,GAAG3wB,YAiBdwsF,EAAoB,GAClBj8D,EAAS,EAAIi8D,GACfpgC,GACEz8B,EACA3vB,EACA,GAAGqwB,WACHC,EACAk8D,EACA,CACE5oE,QACAgN,WACAD,cAMR02C,GAAe,EAEf,MAAM99C,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,SAIF,IAAIupF,EAEC9uE,EAAKmjB,QAAQ/E,QAAQiiD,WACxByO,EAAsBtE,GAAuBkI,GAE7C1yE,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,IAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAASC,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EAGrB,KAAAuhB,sBAAwB,CACtB1rF,EACAmJ,EACA4U,EACAxY,KAEA,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,GAEpC,OAAEqI,GAAWmP,EAAKmjB,QAElBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,MAC7D,gBAAE3Y,EAAe,OAAEqG,GAAWt8B,EAAS44B,aAEtCoiB,EAAeC,GACpB+wB,GAAuBzgD,GAGnBmkB,EAAe1vC,EAASsB,cAAc05C,GACtCrL,EAAmB3vC,EAASsB,cAAc25C,IAC1C,YAAE3nC,GAAgBM,EAElBsvE,EAAY7qF,OAAOwE,KAAKyW,GACxBwvE,EAAYpzC,EACZqzC,EAAYpzC,EAElB,IAAK,IAAI5oC,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,WAAE0e,EAAU,UAAErB,EAAS,SAAEloC,EAAQ,gBAAEkuC,GAAoBrjB,EAEvD0gE,EAAiB92C,GAAsBvM,EAAWsgD,GAExD+C,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAE9C,MAAMC,EAAiB/2C,GAAsBvM,EAAWugD,GASxD,GAPA+C,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAK1CtsF,KAAKkqF,gBAAgBmC,EAAgBC,EAAgBjiD,GAAa,CACpE,MASMqI,EAAY,CAChB,CAVWjoC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAUtD,CARW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAQtD,CANW7hF,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAC3C7hF,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,MAclDgC,EAAa,CACjB79D,OAPa,EACZylB,EAAa,GAAKC,EAAiB,IAAM,GACzCD,EAAa,GAAKC,EAAiB,IAAM,GACzCD,EAAa,GAAKC,EAAiB,IAAM,GAK1CgB,QAAS1sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC3DiB,QAAS3sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,EAC3DkB,QAAS5sC,KAAKC,IAAIwrC,EAAa,GAAKC,EAAiB,IAAM,IAGvD,WAAE+hB,EAAU,YAAEC,GAAgBs0B,GAClChwD,EACAqG,EACAwmD,EACAC,GAEIgF,EAA6B,IAAfr2B,GAAoC,IAAhBC,EAClC/pB,EAAQkB,GAAmB3jB,GAC3BklB,EAASD,GAAoBjlB,GAC7B+1C,EAAOj3D,KAAKC,IAChBD,KAAK+nB,IACF0lC,EAAa9pB,EAAQ,IACrB+pB,EAActnB,EAASzC,EAAQ,IAG9B88C,EAAsB,CAC1B74B,YAAau4B,GAAoBpkF,EAAUynB,GAC3CyW,YAAa1kC,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,oBAIlBwuD,EAAeb,GACnB1pF,EAAS2xD,SACTp1D,EAAWyD,SAAS+7B,kBACpBquD,GAGIh3C,EAAgB1B,GACpBxJ,GACCuL,GACCuC,GAAew3C,EAAY/5C,EAAU,CACnCi6C,MAAM,KAEVxuF,KAAK4sB,cAAckX,gBAAgB06B,cACnC9rB,GAGI65C,EAAQvsF,KAAK4sB,cAAckX,gBAAgB46B,gBAEjD5kD,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,SACnBiP,OACA/C,KAAM4tB,EAAM,IAAIprF,MAChBmsC,IAAKi/C,EAAM,IAAIprF,MACfy9D,OAAQ2tB,EAAM,IAAIprF,MAClBqrF,WAAYD,EACZr4C,cAAeA,EACfq6C,cACApC,SAAU98C,GAAuB,KAAM1jB,GACvC+E,OAAQwnC,EAAa,EAAI9pB,EACzBygD,WAAY//C,GAAyB,KAAMnjB,GAC3CmjE,UAAY,EAAIrkF,KAAK+nB,IAAM0lC,EAAa,GAAM9pB,EAC9Ci9C,e,MAGFrrF,KAAK+/E,sBAAuB,EAE5BjmE,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,S,CAKzBp1D,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAKF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CAAW,EAGpB,KAAAowE,gBAAkB,CAACJ,EAAQC,EAAQ1/C,IAE/B30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,GAz3BxCrqC,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,EAy3BF,SAASq5C,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,OACJyC,EAAM,WACNm+D,EAAU,KACVntB,EAAI,KACJ/C,EAAI,OACJC,EAAM,IACNtxB,EAAG,YACHihD,EAAW,SACX97B,EAAQ,SACR05B,EAAQ,aACRd,GACEd,EAEE10D,EAAsB,GAE5B,GAAInF,EAAQ,CACV,MAAMq+D,EAAaR,EACf,gCACA,WAAW93C,GAAY/lB,MAAWm+D,IACtCh5D,EAAUh4B,KAAKkxF,E,CAGjB,GAAIrtB,EAAM,CACR,MAAMgtB,EAAWH,EACb,8BACA,SAAS93C,GAAYirB,MAASyqB,IAClCt2D,EAAUh4B,KAAK6wF,E,CAejB,OAZI/vB,GACF9oC,EAAUh4B,KAAK,SAAS44C,GAAYkoB,MAAS0sB,KAG3C/9C,GACFzX,EAAUh4B,KAAK,QAAQ44C,GAAYnJ,MAAQ+9C,KAGzCzsB,GACF/oC,EAAUh4B,KAAK,YAAY44C,GAAYmoB,MAAWysB,KAG7Cx1D,CACT,CAEA84D,GAAchuF,SAAW,YACzB,YCziCA,MAAequF,GASbzsF,WAAAA,CAAY0sF,GARJ,KAAAC,eAAiC,GAGjC,KAAAC,cAAe,EAGf,KAAAC,QAAU,EAGhBpvF,KAAKkvF,eAAiB,GACtBlvF,KAAKqvF,YAAcJ,GAAOK,YAAc,GACxCtvF,KAAKuvF,QAAUN,GAAOnyB,SAAU,EAChC98D,KAAKmvF,cAAe,CACtB,CAQA,iBAAcK,GACZ,OAAOxvF,KAAKkvF,cACd,CAGA,oBAAWO,GACT,OAAOzvF,KAAKkvF,eAAevvF,MAC7B,CAGA,cAAW2vF,GACT,OAAOtvF,KAAKqvF,WACd,CAGA,cAAWC,CAAWA,GAChBtvF,KAAKqvF,cAAgBC,IAIzBtvF,KAAKqvF,YAAcC,EACnBtvF,KAAKuD,aAAc,EACrB,CAGA,UAAWu5D,GACT,OAAO98D,KAAKuvF,OACd,CAGA,UAAWzyB,CAAOA,GACZ98D,KAAKuvF,UAAYzyB,IAIrB98D,KAAKuvF,QAAUzyB,EACf98D,KAAKuD,aAAc,EACrB,CAGA,QAAWi4D,GAET,OADAx7D,KAAK0vF,UACE1vF,KAAK2vF,KACd,CAGA,UAAWhwF,GAET,OADAK,KAAK0vF,UACE1vF,KAAKovF,OACd,CAMA,eAAW7rF,GACT,OAAOvD,KAAKmvF,YACd,CAMA,eAAc5rF,CAAYA,GACxBvD,KAAKmvF,aAAe5rF,CACtB,CAMOqsF,gBAAAA,GACL,OAAO,CACT,CAMOC,eAAAA,CAAgB96D,GACrB/0B,KAAKkvF,eAAerxF,KAAK,CAACk3B,EAAM,GAAIA,EAAM,KAC1C/0B,KAAKuD,aAAc,CACrB,CAMOusF,gBAAAA,CAAiB7kF,GACtBA,EAAO/M,SAAS62B,GAAU/0B,KAAK6vF,gBAAgB96D,IACjD,CAQOg7D,kBAAAA,CAAmBC,GACxB,MAAMjuB,EAAc/hE,KAAKiwF,kBAAkBD,IACnCn8D,MAAOq2B,EAAYp2B,IAAKo8D,GAAanuB,EAAY92D,OACnDklF,EAAoB1lF,KAAK4qC,MAAM26C,GAC/BI,EAAepwF,KAAKqwF,eAAeF,GACnCt5B,EAAIm5B,EAAIvlF,KAAK4qC,MAAM86C,GACnBG,EAAgC,CACpCpmC,EAAW,GAAK2M,GAAKq5B,EAAS,GAAKhmC,EAAW,IAC9CA,EAAW,GAAK2M,GAAKq5B,EAAS,GAAKhmC,EAAW,KAG1CqmC,EACJvwF,KAAKkvF,eAAezzD,QAAQ20D,EAAaZ,cAAc73D,IAAM,EAK/D,OAHA33B,KAAKkvF,eAAe5qF,OAAOisF,EAAa,EAAGD,GAC3CtwF,KAAKuD,aAAc,EAEZ,CACLa,MAAOmsF,EACPx7D,MAAOu7D,EAEX,CAOOE,yBAAAA,CAA0BpsF,GAC/B,MAAMqsF,EAAmBzwF,KAAKuvF,QAAU,EAAI,EAM5C,OAJEnrF,GAAS,GACTA,EAAQpE,KAAKkvF,eAAevvF,QAC5BK,KAAKkvF,eAAevvF,OAAS8wF,IAM/BzwF,KAAKkvF,eAAe5qF,OAAOF,EAAO,GAClCpE,KAAKuD,aAAc,GAEZ,EACT,CAKOmtF,kBAAAA,GACL1wF,KAAKkvF,eAAiB,GACtBlvF,KAAKuD,aAAc,CACrB,CAMOotF,gBAAAA,CAAiB1lF,GACtBjL,KAAK0wF,qBACL1wF,KAAK8vF,iBAAiB7kF,EACxB,CAOO2lF,kBAAAA,CACLxsF,EACAysF,GAEA,GAAIzsF,EAAQ,GAAKA,GAASpE,KAAKkvF,eAAevvF,OAC5C,MAAM,IAAImD,MAAM,uBAGlB9C,KAAKkvF,eAAe9qF,GAAS,IAAIysF,GACjC7wF,KAAKuD,aAAc,CACrB,CAOOutF,gBAAAA,GACL,OAAO9wF,KAAKkvF,eAAe5hF,KAAKyjF,GAAiB,CAC/CA,EAAa,GACbA,EAAa,KAEjB,CAOOC,sBAAAA,CAAuBj8D,GAC5B,MAAMy6D,EAAgBxvF,KAAKkvF,eAC3B,IAAI+B,EAAiBn8C,IACjBo8C,GAAqB,EAEzB,IAAK,IAAI3jF,EAAI,EAAGorE,EAAM6W,EAAc7vF,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACxD,MAAMwjF,EAAevB,EAAcjiF,GAC7BqqC,EAAK7iB,EAAM,GAAKg8D,EAAa,GAC7Bj5C,EAAK/iB,EAAM,GAAKg8D,EAAa,GAC7BI,EAAcv5C,EAAKA,EAAKE,EAAKA,EAE/Bq5C,EAAcF,IAChBA,EAAiBE,EACjBD,EAAoB3jF,E,CAIxB,MAAO,CACLnJ,MAAO8sF,EACPn8D,OACyB,IAAvBm8D,OACI5tF,EACA,IAAIksF,EAAc0B,IACxBx5D,SAAUjtB,KAAKuE,KAAKiiF,GAExB,CAQOG,oCAAAA,CACLr8D,EACAyhD,GAEA,MAAM6a,EAAsBrxF,KAAKgxF,uBAAuBj8D,GAExD,OAAOs8D,EAAoB35D,UAAY8+C,EACnC6a,OACA/tF,CACN,CAOOguF,eAAAA,CAAgBv8D,GACrB/0B,KAAK0vF,UAEL,MAAM6B,EACJvxF,KAAKwxF,sCAAsCz8D,GAE7C,IAAKw8D,EAAsB5xF,OACzB,OAUF,IAAIsiE,EAJJsvB,EAAsBvM,MACpB,CAACyM,EAAKC,IAAQD,EAAIvvB,gBAAkBwvB,EAAIxvB,kBAI1C,IAEIyvB,EACAC,EAHAC,GAAiC,EACjCC,EAAiBh9C,IAIrB,IAAK,IAAIvnC,EAAI,EAAGA,EAAIgkF,EAAsB5xF,OAAQ4N,IAAK,CACrD,MAAMwkF,EAAuBR,EAAsBhkF,GAInD,GAAIwkF,EAAqB7vB,gBAAkB4vB,EACzC,SAGF,MAAM,kBAAE3B,EAAiB,aAAEC,GAAiB2B,GACtC,aAAEpwB,GAAiByuB,EAEzB,IAAK,IAAIrhF,EAAI,EAAGA,EAAI4yD,EAAahiE,OAAQoP,IAAK,CAC5C,MAAMgzD,EAAcJ,EAAa5yD,IACzBgmB,MAAOi9D,EAAc9vB,gBAAiB+vB,GAC5C9vB,GACEJ,EAAY92D,OAAO4oB,MACnBkuC,EAAY92D,OAAO6oB,IACnBiB,GAGAk9D,EAAqBH,IACvBF,EAAqB7vB,EACrB8vB,EAAgC1B,EAChCwB,EAAsBI,EAAqB3B,aAC3CnuB,EAAe+vB,EACfF,EAAiBG,E,EAYvB,MAAO,CACLl9D,MAAOktC,EACPiwB,OAJQL,GAJRD,EAAmBO,2BACnBhwB,GAA2ByvB,EAAmB3mF,OAAO4oB,MAAOouC,IAExB0vB,EAAoBhyF,OAMxD+3B,SAAUjtB,KAAKuE,KAAK8iF,GAExB,CAOOM,kCAAAA,CAAmCr9D,GACxC,MAAMzR,EAAa,IAAItjB,KAAKkvF,gBAM5B,GAJIlvF,KAAKuvF,SACPjsE,EAAWzlB,KAAKmC,KAAKkvF,eAAe,KAGjC5rE,EAAW3jB,OACd,OAGF,IAAIsiE,EACA6vB,EAAiBh9C,IACjBoV,EAAa5mC,EAAW,GAE5B,IAAK,IAAI/V,EAAI,EAAGorE,EAAMr1D,EAAW3jB,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACrD,MAAM2iF,EAAW5sE,EAAW/V,IACpBwnB,MAAOi9D,EAAc9vB,gBAAiB+vB,GAC5C9vB,GACEjY,EACAgmC,EACAn7D,GAGAk9D,EAAqBH,IACvB7vB,EAAe+vB,EACfF,EAAiBG,GAGnB/nC,EAAagmC,C,CAGf,MAAO,CACLn7D,MAAOktC,EACPvqC,SAAUjtB,KAAKuE,KAAK8iF,GAExB,CAMOO,iBAAAA,GAGL,OAFAryF,KAAK0vF,UAEE1vF,KAAKsyF,gCAAgCtyF,KAAKqwF,eACnD,CASOkC,wBAAAA,CACLC,EACAC,GAEA,GAAIzyF,KAAKuvF,QACP,MAAO,GAGTvvF,KAAK0vF,UAIL,MAAM2B,EAAsBrxF,KAAKoxF,qCAC/BoB,EACAC,GAGIC,EAA6C,IAA/BrB,GAAqBjtF,MACnCuuF,EAAuB3yF,KAAK4yF,wBAChCJ,EACAE,GAGF,OAAOC,GAAsBhzF,OACzBK,KAAKsyF,gCAAgCK,GACrC,EACN,CAQOE,gBAAAA,CAAiB99D,EAAqByhD,GAC3Cx2E,KAAK0vF,UAEL,MAAMoD,EAAgB9yF,KAAK+yF,iCAAiCh+D,EAAOyhD,GAC7Dwc,EAAiBxc,EAAUA,EAGjC,IAAK,IAAIjpE,EAAI,EAAGA,EAAIulF,EAAcnzF,OAAQ4N,IAAK,CAC7C,MAAM,aAAEo0D,GAAiBmxB,EAAcvlF,GAEvC,IAAK,IAAIwB,EAAI,EAAGA,EAAI4yD,EAAahiE,OAAQoP,IAAK,CAC5C,MAAMgzD,EAAcJ,EAAa5yD,GAOjC,GANwBozD,GACtBJ,EAAY92D,OAAO4oB,MACnBkuC,EAAY92D,OAAO6oB,IACnBiB,IAGqBi+D,EACrB,OAAO,C,EAKb,OAAO,CACT,CAYOC,aAAAA,CAAcl+D,GACnB/0B,KAAK0vF,UAIL,GAFsB1vF,KAAKkvF,eAETvvF,OAAS,EACzB,OAAO,EAGT,MAAMmzF,EAAgB,IAAI9yF,KAAKqwF,gBACzB6C,EACJlzF,KAAKmzF,iDAEHD,GACFJ,EAAcj1F,KAAKq1F,GAGrB,IAAIE,EAAmB,EAEvB,IAAK,IAAI7lF,EAAI,EAAGA,EAAIulF,EAAcnzF,OAAQ4N,IAAK,CAC7C,MAAM6iF,EAAe0C,EAAcvlF,IAC3BiuD,KAAM63B,GAAiBjD,EAO/B,KALEr7D,EAAM,IAAMs+D,EAAa33B,MACzB3mC,EAAM,IAAMs+D,EAAav3B,MACzB/mC,EAAM,GAAKs+D,EAAax3B,MAIxB,SAGF,MAAM,aAAE8F,GAAiByuB,EAEzB,IAAK,IAAI7iF,EAAI,EAAGA,EAAIo0D,EAAahiE,OAAQ4N,IAAK,CAC5C,MAAMw0D,EAAcJ,EAAap0D,IACzBiuD,KAAM83B,GAAoBvxB,EAMlC,GAJEhtC,EAAM,IAAMu+D,EAAgB53B,MAC5B3mC,EAAM,IAAMu+D,EAAgBx3B,MAC5B/mC,EAAM,GAAKu+D,EAAgBz3B,KAEA,CAC3B,MAAQhoC,MAAO8D,EAAI7D,IAAK8D,GAAOmqC,EAAY92D,OACrCsoF,EAAiB57D,EAAG,KAAOC,EAAG,GAC9B47D,GACFz+D,EAAM,GAAK4C,EAAG,KAAOC,EAAG,GAAKD,EAAG,KAAQC,EAAG,GAAKD,EAAG,IAAMA,EAAG,GAEhEy7D,GACEG,GAAkBx+D,EAAM,IAAMy+D,EAAgB,EAAI,C,GAK1D,OAAOJ,EAAmB,GAAM,CAClC,CAWQ1D,OAAAA,GACN,IAAK1vF,KAAKmvF,aACR,OAGF,MAAM2D,EAAgB9yF,KAAKyzF,kBAC3B,IAAI9zF,EAAS,EACTg8D,EAAO7mB,IACPgnB,EAAOhnB,IACP4mB,GAAQ5mB,IACR+mB,GAAQ/mB,IAEZ,IAAK,IAAIvnC,EAAI,EAAGorE,EAAMma,EAAcnzF,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACxD,MAAQiuD,KAAM63B,EAAc1zF,OAAQ+zF,GAAmBZ,EAAcvlF,GAErEouD,EAAOA,GAAQ03B,EAAa13B,KAAOA,EAAO03B,EAAa13B,KACvDG,EAAOA,GAAQu3B,EAAav3B,KAAOA,EAAOu3B,EAAav3B,KACvDJ,EAAOA,GAAQ23B,EAAa33B,KAAOA,EAAO23B,EAAa33B,KACvDG,EAAOA,GAAQw3B,EAAax3B,KAAOA,EAAOw3B,EAAax3B,KACvDl8D,GAAU+zF,C,CAGZ1zF,KAAKqwF,eAAiByC,EACtB9yF,KAAK2vF,MAAQ,CAAEh0B,OAAMG,OAAMJ,OAAMG,QACjC77D,KAAKovF,QAAUzvF,EACfK,KAAKmvF,cAAe,CACtB,CAEQmD,+BAAAA,CACNQ,GAEA9yF,KAAK0vF,UAEL,MAAMiE,EAAiC,GAcvC,OAZAb,EAAc50F,SAAQ,EAAGyjE,gBAAgBiyB,KACvCjyB,EAAazjE,SAAQ,CAAC6jE,EAAa8xB,KAEX,IAAlBD,GAAwC,IAAjBC,GACzBF,EAAe91F,KAAK,IAAIkkE,EAAY92D,OAAO4oB,QAI7C8/D,EAAe91F,KAAK,IAAIkkE,EAAY92D,OAAO6oB,KAAK,GAChD,IAGG6/D,CACT,CAOQnC,qCAAAA,CACNz8D,GAEA/0B,KAAK0vF,UAEL,MAAMoE,EAA8D,IAC5DzD,eAAgByC,GAAkB9yF,KAE1C,IAAK,IAAIuN,EAAI,EAAGA,EAAIulF,EAAcnzF,OAAQ4N,IAAK,CAC7C,MAAM6iF,EAAe0C,EAAcvlF,GAC7B20D,EAAkBC,GACtBiuB,EAAa50B,KACbzmC,GAGF++D,EAA6Bj2F,KAAK,CAChCsyF,kBAAmB5iF,EACnB6iF,eACAluB,mB,CAIJ,OAAO4xB,CACT,CAEQf,gCAAAA,CACNh+D,EACAyhD,GAEAx2E,KAAK0vF,UAEL,MAAMsD,EAAiBxc,EAAUA,EAIjC,GAAIrU,GAAiCniE,KAAKw7D,KAAMzmC,GAASi+D,EACvD,MAAO,GAGT,MAAMe,EACJ/zF,KAAKwxF,sCAAsCz8D,GACvCi/D,EAAiD,GAEvD,IAAK,IAAIzmF,EAAI,EAAGorE,EAAMob,EAAsBp0F,OAAQ4N,EAAIorE,EAAKprE,IAAK,CAChE,MAAM,aAAE6iF,EAAcluB,gBAAiB+xB,GACrCF,EAAsBxmF,GAEpB0mF,GAA2BjB,GAC7BgB,EAAyBn2F,KAAKuyF,E,CAIlC,OAAO4D,CACT,CAEQ/D,iBAAAA,CAAkBD,GACxBhwF,KAAK0vF,UAEL,MAAMS,EAAoB1lF,KAAK4qC,MAAM26C,GAC/Bn5B,EAAIm5B,EAAIG,EACRC,EAAepwF,KAAKqwF,eAAeF,IACnC,aAAExuB,GAAiByuB,EACnB8D,EAAc9D,EAAazwF,OAASk3D,EAE1C,IAAK,IAAItpD,EAAI,EAAGA,EAAIo0D,EAAahiE,OAAQ4N,IAAK,CAC5C,MAAMw0D,EAAcJ,EAAap0D,GAC3B4mF,EACJpyB,EAAYowB,2BAA6BpwB,EAAYpiE,OAEvD,GACEu0F,GAAenyB,EAAYowB,4BAC3B+B,GAAeC,EAEf,OAAOpyB,C,CAGb,CAMQoxB,8CAAAA,GACN,GAAInzF,KAAK88D,OACP,OAGF,MAAM0yB,EAAgBxvF,KAAKkvF,eACrBkF,EAAoB5E,EAAc,GAClC6E,EAAkB7E,EAAcA,EAAc7vF,OAAS,GAGvD20F,EAAwC,CAC5CrpF,OAAQ,CACN4oB,MAAO,IAAIugE,GACXtgE,IAAK,IAAIugE,IAEX74B,KAAM,CACJG,KAAMlxD,KAAK8U,IAAI60E,EAAkB,GAAIC,EAAgB,IACrDv4B,KAAMrxD,KAAK8U,IAAI60E,EAAkB,GAAIC,EAAgB,IACrD34B,KAAMjxD,KAAK6iC,IAAI8mD,EAAkB,GAAIC,EAAgB,IACrDx4B,KAAMpxD,KAAK6iC,IAAI8mD,EAAkB,GAAIC,EAAgB,MAKzD,MAAO,CACL74B,KAAM,CACJG,KAAM24B,EAAmB94B,KAAKG,KAC9BG,KAAMw4B,EAAmB94B,KAAKM,KAC9BJ,KAAM44B,EAAmB94B,KAAKE,KAC9BG,KAAMy4B,EAAmB94B,KAAKK,MAEhC8F,aAAc,CAAC2yB,GAEnB,ECvsBF,MAAeC,WAAoBvF,GACvB4D,uBAAAA,CACRJ,EACAE,GAEA,MAAM8B,EAA0Bx0F,KAAKy0F,uBAAyB,EACxDC,EAAqBjqF,KAAK6iC,IAAI,EAAGknD,EAA0B,GAC3DG,EAAmBjC,EACrB8B,EACAA,EAA0B,EACxBI,EAAkB50F,KAAK60F,qBACvBrF,EAAgB,IAAIxvF,KAAKwvF,eACzBsD,EAAsC,GAEvCJ,GACHlD,EAAc3xF,KAAK20F,GAGrB,IAAK,IAAIjlF,EAAImnF,EAAoBnnF,GAAKonF,EAAkBpnF,IAAK,CAC3D,MAAM6iF,EAAepwF,KAAK80F,iBACxBvnF,EACAqnF,EACApF,EACAkD,GAGFI,EAAcj1F,KAAKuyF,E,CAGrB,OAAO0C,CACT,CAEUW,eAAAA,GACR,MAAMsB,EAAmB/0F,KAAKy0F,uBACxB3B,EAAsC,IAAIz0F,MAAM02F,GAEtD,GAAIA,GAAoB,EACtB,MAAO,GAGT,MAAMH,EAAkB50F,KAAK60F,qBAC7B,IAAIG,EAA8B,EAElC,IAAK,IAAIznF,EAAI,EAAGA,EAAIwnF,EAAkBxnF,IAAK,CACzC,MAAM6iF,EAAepwF,KAAK80F,iBAAiBvnF,EAAGqnF,GAE9CxE,EAAa4E,4BAA8BA,EAC3ClC,EAAcvlF,GAAK6iF,EAEnB4E,GAA+B5E,EAAazwF,M,CAG9C,OAAOmzF,CACT,CAEQ2B,oBAAAA,CACNjF,EAAgCxvF,KAAKwvF,cACrC1yB,EAAkB98D,KAAK88D,QAEvB,OAAOA,EACH0yB,EAAc7vF,OACd8K,KAAK6iC,IAAI,EAAGkiD,EAAc7vF,OAAS,EACzC,CAUQs1F,SAAAA,CACNjF,EACA4E,EACApF,EAAgCxvF,KAAKwvF,cACrC1yB,EAAkB98D,KAAK88D,QAEvB,MAAMi4B,EAAmB/0F,KAAKy0F,qBAAqBjF,EAAe1yB,GAC5Do4B,EAAOzqF,KAAK4qC,MAAM26C,GACxB,IAAIG,EAAoB+E,EAAOH,EAG/B,MAAMl+B,EAAIm5B,EAAIkF,EAKd,GAFE/E,EAAoB,GAAKA,GAAqB4E,EAEd,CAChC,IAAI/0F,KAAK88D,OAMP,OAJAqzB,GACG4E,EAAmB5E,GAAqB4E,C,CAO/C,MAAM,GAAEI,EAAE,GAAEx9D,EAAE,GAAEC,EAAE,GAAEi9B,GAAO70D,KAAKo1F,uBAC9BjF,EACAX,EACA1yB,GAUIu4B,EAAKx+B,EAAIA,EACTy+B,EAAMD,EAAKx+B,EACX0+B,EAAUC,GAAAA,GAAAA,WAAgB,EAAG3+B,EAAGw+B,EAAIC,GAIpCG,EAAUD,GAAAA,GAAAA,cACdA,GAAAA,GAAAA,SACAD,EACAX,GAGF,MAAO,CACLY,GAAAA,GAAAA,IAASC,EAASD,GAAAA,GAAAA,WAAgBL,EAAG,GAAIx9D,EAAG,GAAIC,EAAG,GAAIi9B,EAAG,KAC1D2gC,GAAAA,GAAAA,IAASC,EAASD,GAAAA,GAAAA,WAAgBL,EAAG,GAAIx9D,EAAG,GAAIC,EAAG,GAAIi9B,EAAG,KAE9D,CAEQugC,sBAAAA,CACNjF,EACAX,EAAgCxvF,KAAKwvF,cACrC1yB,EAAkB98D,KAAK88D,QAEvB,MAAMi4B,EAAmB/0F,KAAKy0F,qBAAqBjF,EAAe1yB,GAE5D44B,EADUvF,EACU,EACpBwF,EAAU74B,GAFAqzB,EAEoB,GAAK4E,EAFzB5E,EAEsD,EAChEyF,EAAUD,EAAU,EACpBh+D,EAAK63D,EAJKW,GAKVv4D,EAAK43D,EAAcmG,GACzB,IAAIR,EACAtgC,EAkBJ,OAdEsgC,EADEO,GAAW,EACRlG,EAAckG,GAEd54B,EACD0yB,EAAcA,EAAc7vF,OAAS,GACrCwiE,GAAkBvqC,EAAID,GAK1Bk9B,EADE+gC,EAAUpG,EAAc7vF,OACrB6vF,EAAcoG,GAEd94B,EAAS0yB,EAAc,GAAKrtB,GAAkBxqC,EAAIC,GAGlD,CAAEu9D,KAAIx9D,KAAIC,KAAIi9B,KACvB,CAEQghC,gBAAAA,CACN1F,EACAyE,EACApF,EAAgCxvF,KAAKwvF,cACrC1yB,EAAkB98D,KAAK88D,QAEvB,MAAMi4B,EAAmB/0F,KAAKy0F,qBAAqBjF,EAAe1yB,GAC5Dg5B,EAAkB91F,KAAKsvF,WAAa,EACpCyG,EAAM,EAAID,EAEhB,IAAIE,EADS7F,EACK,EAKbrzB,GAAUqzB,IAAsB4E,EAAmB,IACtDiB,GAzLc,MA4LhB,MAAMr0B,EAAoC,GAC1C,IAAIzX,EACAgmC,EACAiC,EAA6B,EAEjC,IAAK,IAAI5kF,EAAI,EAAGyiF,EAfHG,EAea5iF,GAAKuoF,EAAiBvoF,IAAKyiF,GAAK+F,EAAK,CAE7D/F,EAAIA,EAAIgG,EAAOA,EAAOhG,EAEtB,MAAMj7D,EAAQ/0B,KAAKi1F,UAAUjF,EAAG4E,EAAiBpF,EAAe1yB,GAEhE,IAAKvvD,EAAG,CACN28C,EAAan1B,EACb,Q,CAGFm7D,EAAWn7D,EAEX,MAAM6iB,EAAKs4C,EAAS,GAAKhmC,EAAW,GAC9BpS,EAAKo4C,EAAS,GAAKhmC,EAAW,GAC9BvqD,EAAS8K,KAAKuE,KAAK4oC,GAAM,EAAIE,GAAM,GACnC0jB,EAAoB,CACxBG,KAAMzR,EAAW,IAAMgmC,EAAS,GAAKhmC,EAAW,GAAKgmC,EAAS,GAC9Dx0B,KAAMxR,EAAW,IAAMgmC,EAAS,GAAKhmC,EAAW,GAAKgmC,EAAS,GAC9Dp0B,KAAM5R,EAAW,IAAMgmC,EAAS,GAAKhmC,EAAW,GAAKgmC,EAAS,GAC9Dr0B,KAAM3R,EAAW,IAAMgmC,EAAS,GAAKhmC,EAAW,GAAKgmC,EAAS,IAGhEvuB,EAAa9jE,KAAK,CAChBoN,OAAQ,CACN4oB,MAAOq2B,EACPp2B,IAAKo8D,GAEP10B,OACA77D,SACAwyF,+BAGFjoC,EAAagmC,EACbiC,GAA8BxyF,C,CAGhC,OAAOgiE,CACT,CAEQmzB,gBAAAA,CACN3E,EACAyE,EAA4B50F,KAAK60F,qBACjCrF,EAAgCxvF,KAAKwvF,cACrC1yB,EAAkB98D,KAAK88D,QAMvB,MAAM,GAAEq4B,EAAE,GAAEx9D,EAAE,GAAEC,EAAE,GAAEi9B,GAAO70D,KAAKo1F,uBAC9BjF,EACAX,EACA1yB,GAEI6E,EAAe3hE,KAAK61F,iBACxB1F,EACAyE,EACApF,EACA1yB,GAEF,IAAIm5B,EAAqB,EACrBt6B,EAAO7mB,IACPgnB,EAAOhnB,IACP4mB,GAAQ5mB,IACR+mB,GAAQ/mB,IAUZ,OARA6sB,EAAazjE,SAAQ,EAAGs9D,KAAM06B,EAAav2F,OAAQw2F,MACjDx6B,EAAOlxD,KAAK8U,IAAIo8C,EAAMu6B,EAAYv6B,MAClCG,EAAOrxD,KAAK8U,IAAIu8C,EAAMo6B,EAAYp6B,MAClCJ,EAAOjxD,KAAK6iC,IAAIouB,EAAMw6B,EAAYx6B,MAClCG,EAAOpxD,KAAK6iC,IAAIuuB,EAAMq6B,EAAYr6B,MAClCo6B,GAAsBE,CAAa,IAG9B,CACL3G,cAAe,CAAE2F,KAAIx9D,KAAIC,KAAIi9B,MAC7B2G,KAAM,CAAEG,OAAMG,OAAMJ,OAAMG,QAC1Bl8D,OAAQs2F,EACRjB,4BAA6B,EAC7BrzB,eAEJ,ECzRF,MAAMy0B,WAAuB7B,GAI3BhyF,WAAAA,CAAY0sF,GACV/rD,MAAM+rD,GACNjvF,KAAKq2F,OAASpH,GAAO7gD,OAAS,GAC9BpuC,KAAKs2F,YAAcrH,GAAOsH,aAAc,CAC1C,CAEA,SAAWnoD,GACT,OAAOpuC,KAAKq2F,MACd,CAEA,SAAWjoD,CAAMA,GACXpuC,KAAKs2F,aAAet2F,KAAKq2F,SAAWjoD,IAIxCpuC,KAAKq2F,OAASjoD,EACdpuC,KAAKuD,aAAc,EACrB,CAEA,cAAWgzF,GACT,OAAOv2F,KAAKs2F,WACd,CAEUzB,kBAAAA,GACR,MAAQzmD,MAAOooD,GAAMx2F,KACfy2F,EAAK,EAAID,EAGf,MAAO,CACJ,EAAQ,EAAS,EAAK,GACtBA,EAAQ,EAASA,EAAK,EACvBC,EAAKD,EAAI,EAAI,EAAIC,GAAMD,GACtBA,EAAI,EAAIA,EAAKA,EAAI,EAAKA,EAE3B,EC5BF,MAAME,WAAqBN,GACzB7zF,WAAAA,GACE2gC,MAAM,CAAEkL,MAAO,EAAGmoD,YAAY,GAChC,ECJF,MAAMI,WAAyBP,GAC7B7zF,WAAAA,GACE2gC,MAAM,CAAEkL,MAAO,GAAKmoD,YAAY,GAClC,ECXF,MAAMK,GAAmB9mC,GAAAA,GAAAA,eACvBA,GAAAA,GAAAA,SACAA,GAAAA,GAAAA,WACG,EAAI,EAAI,EAAI,GACZ,EAAI,EAAI,EAAI,EACZ,GAAI,EAAI,EAAI,GACZ,EAAI,GAAI,EAAI,GAEf,EAAI,GAGN,MAAM+mC,WAAgBtC,GACVM,kBAAAA,GACR,OAAO+B,EACT,E,OCqCF,MAGME,GAAwB,CAC5BxH,WAAY,GACZyH,6BAA8B,EAC9BC,6BAA8B,EAC9BC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,6BAA6B,GAG/B,IAAKC,GAOAC,IAPL,SAAKD,GACHA,EAAA,oBACAA,EAAA,gBACAA,EAAA,wBACAA,EAAA,iBACD,CALD,CAAKA,KAAAA,GAAe,KAOpB,SAAKC,GACHA,EAAA,kCACAA,EAAA,uCACD,CAHD,CAAKA,KAAAA,GAAiB,KAKtB,MAAMC,WAAsBr0D,GAoB1B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbgzD,2BAA2B,EAC3B2X,gBAAgB,EAChB1zD,aAAcyhD,GACdkS,OAAQ,CACN5qE,cAAe,CACb,CAACwqE,GAAgBK,UAAW,CAC1BC,MAAOtB,GACPhoD,MAAO,IAET,CAACgpD,GAAgBO,YAAa,CAC5BD,MAAOf,IAET,CAACS,GAAgBQ,QAAS,CACxBF,MAAOhB,IAET,CAACU,GAAgBP,SAAU,CACzBa,MAAOb,GACPK,6BAA6B,EAC7BC,6BAA6B,EAC7BF,6BAA6B,IAGjC9qF,KAAMirF,GAAgBO,WACtBE,oBAAoB,EACpBC,6BAA8B,CAAC,YAAa,WAE9CluC,QAAS,CACP,CAACytC,GAAkBU,iBAAkB,CACnCluC,OAAQ,0BACRC,SAAU,CACR,CACE5gD,YAAaxM,EAAcs7F,QAC3Bxe,YAAa78E,GAAiB88E,SAIpC,CAAC4d,GAAkBY,oBAAqB,CACtCpuC,OAAQ,6BACRC,SAAU,CACR,CACE5gD,YAAaxM,EAAcs7F,QAC3Bxe,YAAa78E,GAAiBu7F,YAQ1Ch1D,MAAMzW,EAAWC,GAxDnB,KAAAqzD,sBAAuB,EAyEvB,KAAAna,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,GAC3B2E,MAAOg7B,EAAUj7B,OAAQ8pE,GAAcnpE,EAEzC3F,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,GAE5B8D,KAAMgsF,GAAen4F,KAAK4sB,cAAc4qE,OAC1CY,EAAep4F,KAAKq4F,iBAAiBF,GACrCX,EAAS,IAAIY,EAAaV,MAE1B76D,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAkC,CACtC2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACP/E,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtCr5B,OAAQ,CAAC,IAAI43B,IACbW,kBAAmB,MAErBg0D,OAAQ,CACNrrF,KAAMisF,EAAajsF,KACnBmsF,SAAUd,EACVlI,WAAY8I,EAAa9I,WACzBxyB,QAAQ,EACRy7B,SAAU,IAEZz+E,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAgBP,OAbAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,EACftL,eAAe,EACfM,UAAU,EACV7Z,gBAAiB8Q,GAGnB1xE,KAAK0qD,cAAc/nD,GACnBM,EAAIyF,iBACJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAQs0D,SAAUd,GAAWn6F,EAAW+c,KAAKo9E,OAE7C,OAAOA,EAAO3E,iBAAiBxvD,EAAcW,EAAU,EAGzD,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjB,MAAM7iF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B5C,KAAKomE,gBAAgBzjE,GACrBgjE,GAAsCvqD,EAAiB01B,GACvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGpB,GAAKxyD,EAAyBstD,cAC5BkF,GAAgB,MACX,CACL,MAAM,OAAEx6E,GAAWmP,EAAKmjB,QAExB28C,EAAcjvE,EAAO5G,WAAW+wC,GAAMA,IAAMniB,G,CAI9C,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjB+c,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBACnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAGhB,KAAAoe,iBAAoBv1F,IAC1B,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACduQ,EAAMvQ,EAAYuQ,KAAO,IACzB,6BAAEqkF,GAAiC93F,KAAK4sB,cAAc4qE,OAG5D,IAFwBM,EAA6B7xE,SAASxS,GAG5D,OAGF,MAAM,WAAEpW,GAAe2C,KAAK8rD,UACtB,KAAE1xC,GAAS/c,EAEjB,GA5VsB,IA4VlB+c,EAAKmjB,QAAQtyB,OAAOtL,OAAxB,CAGO,CACL,MAAM84F,EAAoBr+E,EAAKmjB,QAAQtyB,OAAOtL,OAAS,EACvDK,KAAK04F,2BAA2B/1F,EAAStF,EAAYo7F,E,CAGvDx1F,EAAIyF,gB,MAPF1I,KAAKutC,OAAO5qC,EAOM,EAGd,KAAAg2F,mBAAsB11F,IAC5B,MAAM,mBAAE40F,GAAuB73F,KAAK4sB,cAAc4qE,OAGlD,IAAKK,EACH,OAGF,MAAM,QAAEl1F,GAAYM,EAAI1F,QAClB,gBAAE6d,IAAoBvY,EAAAA,GAAAA,mBAAkBF,GACxCmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAS8U,gBAAkB39D,EAAI1F,OAAOgL,cAAcX,OAEzD+9D,GAAsCvqD,EAAiB01B,GACvD7tC,EAAIyF,gBAAgB,EAGd,KAAAkwF,mBAAsB31F,IAC5B,MAAM41F,EAAc51F,EAAIkJ,OAASrP,GAAOsL,oBAClC,WAAE/K,EAAU,oBAAEyzC,GAAwB9wC,KAAK8rD,UAC3C,KAAE1xC,GAAS/c,EAEjB,GAAI+c,EAAKo9E,OAAO16B,OACd,OAGF,MAAM55D,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,GAClB0E,OAAQX,EAAaY,MAAOixF,GAAevwF,EAC7C3F,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAC5B,IAAI8vF,EAAct4E,EAAKmjB,QAAQtyB,OAAOtL,QAAU,GAAKk5F,EACjDE,GAAc,EAGlB,GAAI3+E,EAAKmjB,QAAQtyB,OAAOtL,QAAU,EAAG,CACnC,MAAQ24F,SAAUd,GAAWp9E,EAAKo9E,OAC5BnG,EAAsBmG,EAAOpG,qCACjCnqF,EAjZ8B,IAqZG,IAA/BoqF,GAAqBjtF,QACvB20F,GAAc,EACdrG,GAAc,E,CAIdqG,GACF3+E,EAAKmjB,QAAQtyB,OAAOpN,KAAKi7F,GAG3B1+E,EAAKo9E,OAAO16B,OAAS1iD,EAAKo9E,OAAO16B,QAAU41B,EAC3Cr1F,EAAWkG,aAAc,EACzBoiE,GAAsCvqD,EAAiB01B,GAEnD12B,EAAKo9E,OAAO16B,QACd98D,KAAKkrD,aAAajoD,GAGpBA,EAAIyF,gBAAgB,EAGd,KAAAuiD,cAAiBhoD,IACvBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,IAAK3C,KAAKo6E,UACR,OAGFp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,SAE5DquB,GACFl2E,GAAiB5G,EAAW8C,eAG9B,MAAMyC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAK5B,OAHA+iE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK8rD,SAAW,KACTzuD,EAAW8C,aAAa,EAMjC,KAAA64F,0BAA4B,CAC1B37F,EACAuF,KAEA,MAAM,WAAEmF,EAAU,kBAAEC,GAAsBpF,EACpCy3E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,sBAGFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EAAY,EAG3C,KAAAkjE,gBAAmBzjE,IACzBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAGvD,KAAA4iB,kBAAqBnrE,IAC3BgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG1D,KAAAR,cAAiB/nD,IACvBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAO8W,SAAU5T,KAAKw4F,kBAC/C71F,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAK24F,oBACjDh2F,EAAQqC,iBAAiBlI,GAAO8L,WAAY5I,KAAK44F,oBACjDj2F,EAAQqC,iBACNlI,GAAOsL,mBACPpI,KAAK44F,oBAGPj2F,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAK44F,mBAAmB,EAG7D,KAAAztC,gBAAmBxoD,IACzBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAO8W,SAAU5T,KAAKw4F,kBAClD71F,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAK24F,oBACpDh2F,EAAQ2H,oBAAoBxN,GAAO8L,WAAY5I,KAAK44F,oBACpDj2F,EAAQ2H,oBACNxN,GAAOsL,mBACPpI,KAAK44F,oBAGPj2F,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAK44F,mBAAmB,EAWxE,KAAA58D,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,cAAEuhC,GAAkB39B,GACpB,QAAE7D,GAAY6D,EAGpB,IAAKA,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIpkE,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B2zE,EAAgBn6E,KAAK8rD,UAAUquB,cAC/Bv4C,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,EAAI,YAAE4nB,GAAgB3kC,GACvC,QAAEkgC,GAAYnjB,GACZnP,OAAQukF,EAAa,kBAAEhsD,GAAsBjG,EAErDqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SACrB,YACApB,EACAvkC,GAEI0zB,EAAW/wB,KAAKgjC,SACpB,WACApB,EACAvkC,GAEI0mB,EAAQ/jB,KAAKgjC,SACjB,QACApB,EACAvkC,GAGI00B,EAAoBy9D,EAAcliF,KAAK8nC,GAC3CjR,EAAciR,MAGV,mBAAEyiD,GAAuB73F,KAAK4sB,cAAc4qE,OAC5CW,EAAa96F,EAAW+c,KAAKo9E,OAAOrrF,KACpCisF,EAAep4F,KAAKq4F,iBAAiBF,GACrCX,EAASx3F,KAAKi5F,sBAAsBt2F,EAAStF,GAC7C67F,EAAuB1B,EAAOnF,oBAC9B8G,EAAsB,GAE5B,IAAK,IAAI5rF,EAAI,EAAGorE,EAAMugB,EAAqBv5F,OAAQ4N,EAAIorE,EAAKprE,IAC1D4rF,EAAoBt7F,KAClB2I,EAASsB,cAAcoxF,EAAqB3rF,KAuBhD,IAAIutE,EAEJ,GArBA1gE,EAAKo9E,OAAOe,SAAWY,EAKpB/+E,EAAKN,YAAYmU,IACqB,MAAvC7T,EAAKN,YAAYmU,GAAUk+D,SASlB9uF,EAAWkG,aACpBvD,KAAK8oF,+BAA+BzrF,EAAYsF,IARhDyX,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACViP,KAAM,KACNyqB,SAAU,MAGZnsF,KAAK+oF,sBAAsB1rF,EAAYsF,IAOpCd,GAAoB1B,GAAzB,CAaA,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,GAA4BX,GAAiBn4C,EAAa,CAE5DqqC,GACEv8C,EACA3vB,EAHqB,IAKrB4xB,EACA,CACEhO,QACAgN,WACAD,YACAlrB,aAAc,K,CAKpB,GACEiyF,GACAL,EAAO/H,iBAAmB,GAC1BzvF,KAAK8rD,UAAU8U,kBACd42B,EAAO16B,OACR,CACA,MAAM,gBAAE8D,GAAoB5gE,KAAK8rD,SAMjCstC,GACEtpE,EACA3vB,EACA,sBAR4Bq3F,EAAOjF,yBACnC3xB,EAhtB4B,IAytB5B,CACE78C,MAAO,UACPgN,WACAD,a,CAKN,GAAIsnE,EAAanB,4BAA6B,CAC5C,MAAMoC,EAA0B,IAAItnE,GAGhCylE,EAAO16B,QACTu8B,EAAwBx7F,KAAKk0B,EAAkB,IAGjDqnE,GACEtpE,EACA3vB,EACA,0BACAk5F,EACA,CACEt1E,MAAO,2BACPgN,WACAD,a,CAKNsoE,GACEtpE,EACA3vB,EACA,eACA+4F,EACA,CACEn1E,QACAgN,WACAD,cAIJ9wB,KAAKs5F,aAAaj8F,EAAYmJ,EAAU5D,EAAgBktB,GAExD03C,GAAe,EACfnqE,EAAWkG,aAAc,C,EAG3B,OAAOikE,CAAY,EAGrB,KAAA8xB,aAAe,CAACj8F,EAAYmJ,EAAU5D,EAAgBktB,KACpD,MAAM1V,EAAO/c,EAAW+c,KAClB6T,EAAWjuB,KAAKuuB,YAAY/nB,GAElC,IAAK4T,EAAKo9E,OAAO16B,OACf,OAGF,MAAMl7B,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGhCqO,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WACX,OAGF,MAAMqa,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,OAGF,MAAMoyB,EAAoB3X,EAAKmjB,QAAQtyB,OAAOqC,KAAK8nC,GACjD5uC,EAAS29B,cAAciR,KAEzB,IAAKh7B,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAClC,MAAMyO,EAAsBtE,GAAuB7yD,GAEnD3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACAzyB,EAAW8C,eAAiB,GAHX,UAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,IAC1D,EAGH,KAAAimE,wBAA0B,CACxBt2F,EACA5F,KAEA,MAAM,KAAE+c,GAAS/c,EACX86F,EAAa/9E,EAAKo9E,OAAOrrF,KACzBisF,EAAep4F,KAAKq4F,iBAAiBF,GACrC3hB,EAAU4hB,EAAarB,6BAE7B,IAAiD,IAA7CqB,EAAalB,4BACf,OAGF,MAAMh0F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEkF,GAAkBtB,GAElB8xF,SAAUd,GAAWp9E,EAAKo9E,OAC5B9lB,EAAYzuE,EAAI1F,OAAOgL,cAAcX,OACrC4xF,EAAmBhC,EAAOlG,gBAAgB5f,GAEhD,GAAI8nB,EAAiB9hE,SAAW8+C,EAC9B,OAIF,MAAM,MAAEpyE,EAAO2wB,MAAO9tB,GAAgBuwF,EAAOzH,mBAC3CyJ,EAAiBtH,QAGnB93E,EAAKmjB,QAAQtyB,OAAO3G,OAAOF,EAAO,EAAG0D,EAAcb,IACnD5J,EAAWkG,aAAc,EAEzB,MAAMutC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPu4C,GAAsCvqD,EAAiB01B,EAAoB,EA6B7E,KAAA2oD,2BAA6B,CAC3Bx2F,EACA5F,KAEA,MAAM86F,EAAa96F,EAAW+c,KAAKo9E,OAAOrrF,KACpCisF,EAAep4F,KAAKq4F,iBAAiBF,GACrC3hB,EAAU4hB,EAAapB,6BAE7B,IAAiD,IAA7CoB,EAAajB,4BACf,OAGF,MAAMj0F,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,cAAE4F,GAAkBrF,GAC3B0E,OAAQ8pE,GAAcnpE,GACtB+vF,SAAUd,GAAWn6F,EAAW+c,KAAKo9E,OACvCnG,EAAsBmG,EAAOpG,qCACjC1f,EACA8E,GAGG6a,GAILrxF,KAAK04F,2BACH/1F,EACAtF,EACAg0F,EAAoBjtF,MACrB,EAoEK,KAAA2kF,sBAAwB,CAC9B1rF,EACAsF,KAEA,IAAK3C,KAAK4sB,cAAc2qE,eACtB,OAEF,MAAMn9E,EAAO/c,EAAW+c,KAExB,IAAKA,EAAKo9E,OAAO16B,OACf,OAGF,MAAMl6D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,GAChC,YAAEkX,GAAgBM,GAChBm+E,SAAUttF,GAAWmP,EAAKo9E,OAC5B9N,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GACrBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,SAAE7qB,GAAa6qB,EACfoG,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAI7DnuC,EAAc8qB,EAAkB,GAChC2nE,EAAqBlzF,EAASsB,cAAcb,GAC5C0yF,EAAcnzF,EAASsB,cAAc,CACzCb,EAAY,GAAK,EACjBA,EAAY,KAER2yF,EAAcpzF,EAASsB,cAAc,CACzCb,EAAY,GACZA,EAAY,GAAK,IAGb4yF,EAAW58D,GAAAA,GAAAA,SAAcy8D,EAAoBC,GAC7CG,EAAW78D,GAAAA,GAAAA,SAAcy8D,EAAoBE,GAE7CxrD,EAAQkB,GAAmB3jB,GACjC,IAAI+1C,EACFS,GAAoCpwC,GAAqBqc,EAAQA,EAGnEszB,GAAQm4B,EAAWC,EAEnBhgF,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,SACnBiP,OACAyqB,SAAU98C,GAAuB,KAAM1jB,G,CAM3C,OAFA3rB,KAAKg5F,0BAA0B37F,EAAYuF,GAEpCkX,CAAW,EA58BlB9Z,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CA2wBQysD,0BAAAA,CACN/1F,EACAtF,EACAo7F,GAEA,MAAM71F,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACjCsI,OAAQukF,GAAkBnyF,EAAW+c,KAAKmjB,QAGrB,IAAzBiyD,EAAc7vF,OAChBsE,GAAiB5G,EAAW8C,eAE5BqvF,EAAclrF,OAAOm0F,EAAmB,GAG1C,MAAM,gBAAEr9E,GAAoBxY,EACtBkuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGP/vB,EAAWkG,aAAc,EAEzBoiE,GAAsCvqD,EAAiB01B,EACzD,CAuCQunD,gBAAAA,CAAiBlsF,GACvB,MAAQygB,cAAe7V,GAAW/W,KAC5B+5F,EAAgBhjF,EAAOygF,OAAO5qE,cAEpC,OAAO/tB,OAAOqmB,OAAO,CAAE/Y,QAAQ2qF,GAAuBiD,EAAc5tF,GACtE,CAEQ6tF,kBAAAA,CAAmBxC,EAAiBn6F,GAC1C,MAAM86F,EAAa96F,EAAW+c,KAAKo9E,OAAOrrF,KACpCisF,EAAep4F,KAAKq4F,iBAAiBF,GAGvCX,aAAkBpB,KACpBoB,EAAOjB,iBACgBjzF,IAAvB80F,EAAahqD,OACbopD,EAAOppD,QAAUgqD,EAAahqD,QAKhCopD,EAAOppD,MAAQgqD,EAAahqD,MAC5B/wC,EAAWkG,aAAc,EAC3B,CAEQ01F,qBAAAA,CACNt2F,EACAtF,GAEA,MAAMuF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,cAAEuhC,GAAkB39B,GACpB,KAAE4T,GAAS/c,GACT8O,KAAMgsF,EAAYG,SAAUd,GAAWn6F,EAAW+c,KAAKo9E,OACzDY,EAAep4F,KAAKq4F,iBAAiBF,GAErCh4B,EADc/lD,EAAKmjB,QAAQtyB,OACAqC,IAAI62B,GAsBrC,OApBAqzD,EAAO7G,iBAAiBxwB,GACxBq3B,EAAO16B,SAAW1iD,EAAKo9E,QAAQ16B,OAG3B06B,EAAOlI,aAAe8I,EAAa9I,aACrCkI,EAAOlI,WAAavjE,SAASqsE,EAAa9I,YAC1CjyF,EAAWkG,aAAc,GAKzBi0F,aAAkBpB,KACjBoB,EAAOjB,iBACejzF,IAAvB80F,EAAahqD,OACbopD,EAAOppD,QAAUgqD,EAAahqD,QAE9BopD,EAAOppD,MAAQgqD,EAAahqD,MAC5B/wC,EAAWkG,aAAc,GAGpBi0F,CACT,EAuEF,SAASlS,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,KAAEyzC,EAAI,YAAE6sB,EAAW,SAAEpC,GAAa5B,EAClC10D,EAAsB,GAE5B,GAAI6rC,EAAM,CACR,MAAMgtB,EAAWH,EACb,8BACA,SAAS93C,GAAYirB,MAASyqB,IAElCt2D,EAAUh4B,KAAK6wF,E,CAGjB,OAAO74D,CACT,E,GA1iCMyhE,IAEG2C,YAAc7C,GACdj2C,GAAA06B,QAAUwb,GAyiCnBC,GAAc32F,SAAW,YACzB,Y,4BC7kCc,SAAUu5F,GACtBjvF,EACAkvF,EACAC,EACAC,GAEA,MAAMC,EAAcF,EAAWD,EAAW,EAEpCI,EACJ9vF,KAAK4qC,MAAOglD,EAAuB,IAAOC,IAAgB,EACtDE,EAAkB/vF,KAAK4qC,MAAMilD,EAAcC,IAAkB,EAEnE,GAAIxmE,MAAMumE,KAAiBA,IAAgBE,EACzC,OAAOvvF,EAIT,GAAIqvF,EAAcE,EAAkB,EAClC,OAAOvvF,EAGT,MAAMwvF,EAAwBhwF,KAAK6iC,IAAI,EAAG6sD,GACpCO,EAAwBjwF,KAAK8U,IAAItU,EAAOtL,OAAS,EAAGy6F,GACpDO,EAA4B1vF,EAAOwS,MAAM,EAAGg9E,GAE5CG,EAA4B3vF,EAAOwS,MACvCi9E,EAAwB,EACxBzvF,EAAOtL,QAQHk7F,EChEF,SACJC,EACAC,GAEA,IACGA,GACuB,IAAxBA,EAAap7F,QACbo7F,EAAap7F,SAAWm7F,EAAen7F,OAEvC,OAAOm7F,EAGT,MAAMr5B,EAAIs5B,EAAaA,EAAap7F,OAAS,GAAKo7F,EAAa,GAAK,EAC9DC,GAAgBC,EAAAA,GAAAA,IACpBF,EAAaztF,KAAKwe,GAAMgvE,EAAehvE,GAAG,MAEtCovE,GAAgBD,EAAAA,GAAAA,IACpBF,EAAaztF,KAAKwe,GAAMgvE,EAAehvE,GAAG,MAG5C,GA9BA7gB,EA8Be6vF,EA5BkC,IAAzC7vF,EAA0B,IAAItL,OA4BN,CAC9B,MAAMw7F,GAAgBF,EAAAA,GAAAA,IACpBF,EAAaztF,KAAKwe,GAAMgvE,EAAehvE,GAAG,MAE5C,OACEsvE,EAAAA,GAAAA,KACEC,EAAAA,GAAAA,IAAWL,EAAev5B,IAC1B45B,EAAAA,GAAAA,IAAWH,EAAez5B,IAC1B45B,EAAAA,GAAAA,IAAWF,EAAe15B,G,CAI9B,OACE25B,EAAAA,GAAAA,KAAMC,EAAAA,GAAAA,IAAWL,EAAev5B,IAAI45B,EAAAA,GAAAA,IAAWH,EAAez5B,IA5CpE,IACEx2D,CA8CF,CD4B6BqwF,CAAkBrwF,EAjE/C,SACEswF,EACAC,GAEA,MAAM7vD,EAAS,IACR8vD,EAAaC,GAAeF,EAE7BG,EAAeD,EAAcD,EAAc,EAC3C3hC,EAAYrvD,KAAK4qC,MAAMsmD,EAAeJ,GAE5C,IAAIhqF,EAAI,EACJqqF,EACFnxF,KAAKqpD,OAAQ6nC,EAAe,IAAM7hC,EAAY,GAAMvoD,GAAKkqF,EAE3D,KAAOG,GAA8BF,GACnC/vD,EAAO9tC,KAAK+9F,GACZrqF,IACAqqF,EACEnxF,KAAKqpD,OAAQ6nC,EAAe,IAAM7hC,EAAY,GAAMvoD,GAAKkqF,EAG7D,OAAO9vD,CACT,CAsCuBkwD,CAAuCrB,EAAiB,CAC3EC,EACAC,KAKF,MAAO,IACFC,KACAE,KACAD,EAEP,CErFM,SAAUkB,GAAkBlvE,GAChC,OACqD,IAAnDA,GAAemvE,eAAeC,mBACsB,IAApDpvE,GAAemvE,eAAeE,iBAElC,CAkCA,SAASC,GACP93F,EACA3F,EACA4U,GAEA,OAAQjP,EAAQ3F,EAAO4U,GAAa5U,CACtC,CA+BA,SAAS09F,GACPC,EACAC,EACAC,EACAjpF,GAEA,MAAO,CAAEkpF,EAAgBtxF,GAAUmxF,GAC5B,CAAEI,EAAqBC,GAAeJ,EAEvCK,EAAezxF,EAAOtL,OACtBg9F,EAAoBF,EAAY98F,OAEtC,IAAIi9F,EAAaR,EAAW,GACxBS,EAAkBR,EAAgB,GAEtC,KACGpxF,EAAO2xF,IACPH,EAAYI,IACZ5xF,EAAOsxF,IACPE,EAAYD,IAEb,MAAO,MAACl5F,OAAWA,GAGrB,KACEs5F,IAAeL,GACfM,IAAoBL,GACpB,CACA,GAAIF,EAASG,EAAYI,GAAkB5xF,EAAO2xF,IAChD,MAAO,CAACA,EAAYC,GAGtBD,EAAaV,GAAeU,EAAYF,EAAcrpF,GACtDwpF,EAAkBX,GAChBW,EACAF,EACAtpF,E,CAIJ,MAAO,MAAC/P,OAAWA,EACrB,CAKA,SAASw5F,GACP7xF,EACA8xF,GAEA,MAAOC,EAAiBC,GAtG1B,SACEhyF,EACAwxF,GAEA,IAAK,IAAIlvF,EAAI,EAAGA,EAAItC,EAAOtL,OAAQ4N,IACjC,IAAK,IAAIwB,EAAI,EAAGA,EAAI0tF,EAAY98F,OAAQoP,IACtC,GAbWmuF,EAaCjyF,EAAOsC,GAbA4vF,EAaIV,EAAY1tF,GAZU,IAA1CgmB,GAAsBmoE,EAAQC,GAa/B,MAAO,CAAC5vF,EAAGwB,GAdnB,IAAiBmuF,EAAQC,CAkBzB,CA4FIC,CAAiBnyF,EAAQ8xF,IAAmB,GAExCM,EAAuBA,CAACH,EAAQC,KACG,IAxH3C,SAA4BD,EAAQC,GAClC,OAAOpoE,GAAsBmoE,EAAQC,GAAU,IACjD,CAsHIG,CAAmBJ,EAAQC,IAEtBI,EAAcC,GAAqBrB,GACxC,CACED,GAAec,EAAiB/xF,EAAOtL,OAAQ,GAC/Cq9F,EACA/xF,GAEF,CACEixF,GAAee,EAAyBF,EAAep9F,OAAQ,GAC/Ds9F,EACAF,GAEFM,EACA,IAGKI,GAAatB,GAClB,CAACD,GAAeqB,EAActyF,EAAOtL,QAAS,GAAI49F,EAActyF,GAChE,CACEixF,GAAesB,EAAmBT,EAAep9F,QAAS,GAC1D69F,EACAT,GAEFM,GACC,GAGH,MAAO,CAACE,EAAcE,EACxB,CAKM,SAAUC,GACd9wE,EACA3hB,EACA0yF,GAEA,MAAM,cAAE5B,GAAkBnvE,EAEpB+e,EAAS1gC,EAEf,GAAI8wF,EAAe,CACjB,MAAM,0BACJ6B,EAAyB,2BACzBC,EAA0B,iBAC1B7B,GAAmB,EAAK,kBACxBC,GAAoB,GAClBF,EAEE1B,EAAuBsD,EACzBE,EACAD,EAGJ,GAFkBD,EAAoB1B,EAAoBD,EAE3C,CAEb,MAAO8B,EAAiBC,GAAmBJ,EACvCb,GAAmB7xF,EAAQ0yF,GAC3B,CAAC,EAAG1yF,EAAOtL,OAAS,GAGxB,OAAKsL,EAAO6yF,IAAqB7yF,EAAO8yF,GAKtC7D,GACEjvF,EACA6yF,EACAC,EACA1D,GARKpvF,C,EAcb,OAAO0gC,CACT,CC5Mc,SAAUqyD,GACtB79B,EACA35D,GAGA,MAAMy3F,EAAQ99B,EAAa,GACrBnyD,EAAOmyD,EAAaA,EAAaxgE,OAAS,GAE1Cu+F,EAAwB15D,GAAAA,GAAAA,SAE9BA,GAAAA,GAAAA,IAAS05D,EAAuBlwF,EAAK,GAAKiwF,EAAM,GAAIjwF,EAAK,GAAKiwF,EAAM,IACpEz5D,GAAAA,GAAAA,UAAe05D,EAAuBA,GAMtC,MAAMC,EAAgB35D,GAAAA,GAAAA,SAChB45D,EAAgB55D,GAAAA,GAAAA,SAEtBA,GAAAA,GAAAA,IAAS25D,GAAgBD,EAAsB,GAAIA,EAAsB,IACzE15D,GAAAA,GAAAA,IAAS45D,EAAeF,EAAsB,IAAKA,EAAsB,IAGzE,MAAMG,EAAoC,EACvCJ,EAAM,GAAKjwF,EAAK,IAAM,GACtBiwF,EAAM,GAAKjwF,EAAK,IAAM,GAKnBswF,EAAW,CACfpiC,KAAM,EACN93D,MAAO,MAGT,IAAK,IAAImJ,EAAI,EAAGA,EAAI4yD,EAAaxgE,OAAQ4N,IAAK,CAC5C,MAAMtG,EAAck5D,EAAa5yD,GAE3BmqB,EAAW8M,GAAAA,GAAAA,KAAUv9B,EAAmBo3F,GAE1C3mE,EAAW4mE,EAASpiC,OACtBoiC,EAASpiC,KAAOxkC,EAChB4mE,EAASl6F,MAAQmJ,E,CAUrB,MANiD,CAC/C4yD,EAAam+B,EAASl6F,OACtBi6F,GAEiC/wF,IAAI9G,EAASsB,cAGlD,CC3CA,MACEo4D,uBAAsB,GACtBF,qCAAoC,GACpC1C,iCAAgC,GAChC0B,kCAAiCA,IAC/Bu5B,EAKJ,SAASgG,GACPt7F,EACA5F,EACAyzC,GAEA9wC,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BwuE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,QAAE0nC,EAAO,KAAE40B,EAAI,KAAEC,GAASH,GAC9Bx4D,EACAxG,KAAK4sB,cAAcqyC,oBAGrBj/D,KAAKw+F,SAAW,CACdr+B,aAAc,CAACuR,GACf+sB,cAAe,GAGjBz+F,KAAKqgE,WAAa,CAChBhjE,aACAyzC,sBACAxG,UACA40B,OACAC,OACAsmB,eAAe,GAGjB9gF,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAK0+F,qBAC/C/7F,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK2+F,uBACjDh8F,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAK0+F,qBAClD/7F,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAK0+F,qBAChD/7F,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK2+F,uBACjDh8F,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAK0+F,qBAEhD71C,GAAkBlmD,EACpB,CAIA,SAASi8F,GAAej8F,GACtBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAK0+F,qBAClD/7F,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK2+F,uBACpDh8F,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAK0+F,qBACrD/7F,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAK0+F,qBACnD/7F,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK2+F,uBACpDh8F,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAK0+F,qBAEnD91C,GAAmBjmD,EACrB,CAMA,SAASg8F,GAAsB17F,GAC7B,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAEhC,WACJvF,EAAU,oBACVyzC,EAAmB,KACnBouB,EAAI,KACJC,EAAI,QACJ70B,EAAO,cACPm7C,GACEzlF,KAAKqgE,YACH,cAAEo+B,EAAa,aAAEt+B,GAAiBngE,KAAKw+F,SAEvC59B,EAAkBT,EAAaA,EAAaxgE,OAAS,GACrDk/F,EAAiBr4F,EAASsB,cAAc84D,GAExCJ,EAAevjC,GAAAA,GAAAA,SAErBA,GAAAA,GAAAA,SAAcujC,EAAc39B,EAAUg8D,GAEtC,MAAMp+B,EAAQh2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAActB,IACxCwB,EAAQj2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAAcrB,IAG9C,KAAIsB,GAASn2B,EAAQ,IAAMo2B,GAASp2B,EAAQ,IAA5C,CAKA,GAAIm7C,EAAe,CACjBzlF,KAAKo6E,WAAY,EAGjB,MAAM,YAAE5xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYn7B,EAAW+c,KAAKmjB,SAC9B,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,KACd,CACL,MAAMqkB,EAAgB9+F,KAAK++F,8BAA8B97F,GAEzD,QAAsBK,IAAlBw7F,EAGF9+F,KAAKg/F,mBAAmB/7F,EAAK67F,OACxB,CACL,MAAMG,EAAiB/+B,GACrBv9D,EACAw9D,EACAuR,EACA1xE,KAAKqgE,YAGPrgE,KAAKw+F,SAASC,cAAgBA,EAAgBQ,C,EAIlDt5B,GAAsCvqD,EAAiB01B,E,CACzD,CAQA,SAAS4tD,GAAoBz7F,GAC3B,MAAM,kBAAEi8F,GAAsBl/F,KAAK4sB,eAC7B,aAAEuzC,GAAiBngE,KAAKw+F,SACxBxpE,EAAamrC,EAAa,GAC1Bg/B,EAAYh/B,EAAaA,EAAaxgE,OAAS,GAC/CuD,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGlBg8F,IACCl/B,GACChrC,EACAmqE,EACAn/F,KAAK4sB,cAAcqzC,uBAGrBjgE,KAAKo/F,wBAAwBz8F,GAE7B3C,KAAKq/F,0BAA0B18F,EAEnC,CAKA,SAAS08F,GAA0B18F,GACjC3C,KAAKs/F,mCACL,MAAM,aAAEn/B,GAAiBngE,KAAKw+F,SAG9B,GAAIx+F,KAAKu/F,YAAY58F,EAASw9D,GAC5B,OAAO,EAGT,MAAM,WAAE9iE,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,WAC3Cz9D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAGtCs9D,GACEv9D,EACAw9D,EACAA,EAAa,GACbngE,KAAKqgE,YAGPF,EAAa9kB,MAEb,MAOMmkD,GAPgB1D,GAAkB97F,KAAK4sB,eACzC8wE,GAAsB19F,KAAK4sB,cAAeuzC,GAC1CA,GAK8B7yD,KAAKrG,GACrCT,EAASsB,cAAcb,KAGzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAChC,MAAM,QAAEjnE,GAAYn7B,EAAW+c,KAAKmjB,QAcpC,OAZK/E,EAAQiiD,UACXz6E,KAAK0/F,2BAA2BriG,GAGlC2C,KAAKo6E,WAAY,EACjBp6E,KAAKw+F,cAAWl7F,EAChBtD,KAAKqgE,gBAAa/8D,EAElBqiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK4+F,eAAej8F,IAEb,CACT,CAMA,SAAS28F,KACP,MAAM,aAAEn/B,GAAiBngE,KAAKw+F,SACxBmB,EAAYx/B,EAAaxgE,OAEzBigG,EAAa,CAACz/B,EAAa,GAAIA,EAAaw/B,EAAY,IACxDE,EAAwB1/B,EAAa1iD,MAAM,GAAI,GAAGA,MAAM,GAExDskD,EAAczE,GAClBuiC,EACAD,EAAW,GACXA,EAAW,IACX,GAGF,GAAI79B,EAAa,CACf,MAAM+9B,EAAoB/9B,EAAY,GAEtC/hE,KAAKw+F,SAASr+B,aAAeA,EAAa77D,OAAO,EAAGw7F,E,CAExD,CAKA,SAASV,GAAwBz8F,GAC/B,MAAM,aAAEw9D,GAAiBngE,KAAKw+F,SAG9B,GAAIx+F,KAAKu/F,YAAY58F,EAASw9D,GAC5B,OAAO,EAGT,MAAM,WAAE9iE,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,WAC3Cz9D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAShC48F,GAPgB1D,GAAkB97F,KAAK4sB,eACzC8wE,GAAsB19F,KAAK4sB,cAAeuzC,GAC1CA,GAK8B7yD,KAAKrG,GACrCT,EAASsB,cAAcb,KAGzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAChC,MAAM,QAAEjnE,GAAYn7B,EAAW+c,KAAKmjB,QA2BpC,OAvBAlgC,EAAW+c,KAAKmjB,QAAQtyB,OAAS,CAC/Bu0F,EAAY,GACZA,EAAYA,EAAY7/F,OAAS,IAI/BtC,EAAW+c,KAAK2lF,sBAClB1iG,EAAW+c,KAAK4lF,8BACdhC,GAAmC79B,EAAc35D,IAGhDgyB,EAAQiiD,UACXz6E,KAAK0/F,2BAA2BriG,GAGlC2C,KAAKo6E,WAAY,EACjBp6E,KAAKw+F,cAAWl7F,EAChBtD,KAAKqgE,gBAAa/8D,EAElBqiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK4+F,eAAej8F,IAEb,CACT,CAMA,SAASo8F,GACP97F,GAGA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,WAAED,GAAepF,EAChCwuE,EAAYnpE,EAAcX,OAC1Bg5D,EAAkBt4D,EAAWV,QAE7B,aAAEu4D,GAAiBngE,KAAKw+F,SACxByB,EAAoB9/B,EAAa1iD,MAAM,GAAI,GAE3CskD,EAAczE,GAClB2iC,EACAvuB,EACA9Q,GACA,GAGF,QAAoBt9D,IAAhBy+D,EACF,OAKF,OAFsBA,EAAY,EAGpC,CAMA,SAASi9B,GACP/7F,EACA67F,GAEA,MAAM57F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,aAAEi9D,GAAiBngE,KAAKw+F,UACxB,WAAEnhG,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,WAGjDH,GACEv9D,EACAw9D,EACAA,EAAa2+B,GACb9+F,KAAKqgE,YAGPF,EAAa9kB,MAGb,IAAK,IAAI9tC,EAAI,EAAGA,EAAIuxF,EAAevxF,IACjC4yD,EAAa+/B,QAGXlgG,KAAKq/F,0BAA0B18F,IAEjC3C,KAAKmgG,0BAA0Bl9F,EAAK5F,EAAYyzC,EAEpD,CAKA,SAASsvD,GAAcz9F,GACrB,MAAM,kBAAEu8F,GAAsBl/F,KAAK4sB,eAC7B,aAAEuzC,GAAiBngE,KAAKw+F,SACxBxpE,EAAamrC,EAAa,GAC1Bg/B,EAAYh/B,EAAaA,EAAaxgE,OAAS,GAGnDu/F,IACCl/B,GACChrC,EACAmqE,EACAn/F,KAAK4sB,cAAcqzC,uBAGrBjgE,KAAKo/F,wBAAwBz8F,GAE7B3C,KAAKq/F,0BAA0B18F,EAEnC,CA2BA,SAAS48F,GAAY58F,EAAyBw9D,GAC5C,MAAM,mBAAElB,GAAuBj/D,KAAK4sB,cAEpC,GAzBF,SACEuzC,EACAlB,GAEA,MAAMohC,EAAY51F,KAAK6iC,IAKA,EAArB2xB,EAKA,GAEF,OAAOkB,EAAaxgE,OAAS0gG,CAC/B,CAQMC,CAAkBngC,EAAclB,GAAqB,CAEvD,MAAM,WAAE5hE,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,WAC3Cz9D,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAY5B,OAVAqB,GAAiB5G,EAAW8C,eAE5BH,KAAKo6E,WAAY,EACjBp6E,KAAKw+F,cAAWl7F,EAChBtD,KAAKqgE,gBAAa/8D,EAElBqiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK4+F,eAAej8F,IAEb,C,CAGT,OAAO,CACT,CAwBA,SAnBA,SAA0Bw3B,GACxBA,EAAaokE,aAAeA,GAAa9xF,KAAK0tB,GAC9CA,EAAaykE,eAAiBA,GAAenyF,KAAK0tB,GAElDA,EAAa6kE,mBAAqBA,GAAmBvyF,KAAK0tB,GAC1DA,EAAa4kE,8BACXA,GAA8BtyF,KAAK0tB,GACrCA,EAAailE,wBACXA,GAAwB3yF,KAAK0tB,GAC/BA,EAAamlE,iCACXA,GAAiC7yF,KAAK0tB,GACxCA,EAAawkE,sBAAwBA,GAAsBlyF,KAAK0tB,GAChEA,EAAaukE,oBAAsBA,GAAoBjyF,KAAK0tB,GAC5DA,EAAaklE,0BACXA,GAA0B5yF,KAAK0tB,GACjCA,EAAaimE,cAAgBA,GAAc3zF,KAAK0tB,GAChDA,EAAaolE,YAAcA,GAAY9yF,KAAK0tB,EAC9C,GCreQ+lC,uBAAsB,GAAE5C,iCAAgCA,IAAKi7B,EAerE,SAASgI,GACPt9F,EACAu9F,GAEA,MAAMt9F,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,cAAE4F,EAAa,WAAED,GAAepF,EACzCwuE,EAAYnpE,EAAcX,OAC1Bg5D,EAAkBt4D,EAAWV,QAC7B,iBAAE64F,EAAgB,iBAAEC,GAAqB1gG,KAAK8rD,SAE9C60C,EAAqBrjC,GACzBojC,EACAhvB,EACA9Q,EACA4/B,GAGF,GAAIG,EACF3gG,KAAK8rD,SAAS80C,mBAAqBD,EAAmB,GAGtD3gG,KAAK6gG,iCAAiCL,QAEjC,GAAIE,EAAiB/gG,QAAU,EACpC,GACE8gG,EAAiB9gG,OACjBK,KAAK4sB,cAAck0E,iCACnB,CAKA,MAAMC,EAAuBN,EAAiB,GAExCO,EAAqB,GAE3B,IAAK,IAAIzzF,EAAI,EAAGA,EAAImzF,EAAiB/gG,OAAQ4N,IAAK,CAChD,MAAM0zF,EAAkBP,EAAiBnzF,GACnCmqB,EAAW8M,GAAAA,GAAAA,SAAcy8D,EAAiBF,GAEhDC,EAAmBnjG,KAAK,CAAE65B,WAAUtzB,MAAOmJ,G,CAG7CyzF,EAAmBhc,MAAK,CAACtrC,EAAGC,IAAMD,EAAEhiB,SAAWiiB,EAAEjiB,WAEjD,MAAMwpE,EAA+B,CACnCF,EAAmB,GACnBA,EAAmB,IAGfG,EAAc12F,KAAK8U,IACvB2hF,EAA6B,GAAG98F,MAChC88F,EAA6B,GAAG98F,OAGlCpE,KAAK8rD,SAAS80C,mBAAqBO,C,KAC9B,CAIL,MAAM3jE,EAAMgH,GAAAA,GAAAA,SAEZA,GAAAA,GAAAA,SAAchH,EAAKijE,EAAiB,GAAIA,EAAiB,IACzDj8D,GAAAA,GAAAA,UAAehH,EAAKA,GAEpB,MAAMwG,EAAY,EAEZo9D,EAA8B,CAClCX,EAAiB,GAAG,GAAKjjE,EAAI,GAAKwG,EAClCy8D,EAAiB,GAAG,GAAKjjE,EAAI,GAAKwG,GAG9Bq9D,EACJ/jC,GACEojC,EACAU,EACAX,EAAiB,GACjBD,GAGJ,GAAIa,EAAqC,CAEvC,MAAMC,EAAkB,CAACF,GAEzBlhC,GACEv9D,EACA2+F,EACAb,EAAiB,GACjBzgG,KAAKqgE,YAGPogC,EAAiB71E,WAAW02E,GAE5BthG,KAAK6gG,iCAAiCL,GAEtCxgG,KAAK8rD,SAASy1C,UAAYd,EAAiB9gG,OAAS,EACpDK,KAAK8rD,SAAS80C,mBACZS,EAAoC,E,EAI9C,CAOA,SAASR,GAAiCL,GACxC,MAAM,iBAAEC,EAAgB,iBAAEC,GAAqB1gG,KAAK8rD,SACpD,IAAI01C,EAAoB,EAExB,IAAK,IAAIj0F,EAAI,EAAGA,EAAIkzF,EAAiB9gG,OAAS,EAAG4N,IAAK,CACpD,MAAM+rB,EAAY,CAACmnE,EAAiBlzF,GAAIkzF,EAAiBlzF,EAAI,IAY7D,GAFAi0F,MARuBlkC,GACrBojC,EACApnE,EAAU,GACVA,EAAU,GACVknE,GAOA,K,CAKJC,EAAiBn8F,OAAO,EAAGk9F,GAE3BxhG,KAAK8rD,SAASy1C,UAAYd,EAAiB9gG,OAAS,CACtD,CAMA,SAAS8hG,GACPx+F,EACAu9F,GAEA,MAAMt9F,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,WAAED,GAAepF,EAChCwuE,EAAYnpE,EAAcX,OAC1Bg5D,EAAkBt4D,EAAWV,QAC7B,iBAAE84F,GAAqB1gG,KAAK8rD,SAclC,QAP2BwR,GACzBojC,EACAhvB,EACA9Q,EACA4/B,EAQJ,CAOA,SAASkB,GAAgClB,GACvC,MAAM,iBAAEE,EAAgB,iBAAED,GAAqBzgG,KAAK8rD,SAGpD,IAAK,IAAIv+C,EAAIkzF,EAAiB9gG,OAAS,EAAG4N,EAAI,EAAGA,IAAK,CACpD,MAAMo0F,EAAW,CAAClB,EAAiBlzF,GAAIkzF,EAAiBlzF,EAAI,IAEtDq0F,IAAiBtkC,GACrBojC,EACAiB,EAAS,GACTA,EAAS,GACTnB,GAMF,GAFAC,EAAiBplD,MAEbumD,EACF,K,CAGN,CAUA,SAASC,KACP,MAAM,iBAAEpB,EAAgB,iBAAEC,EAAgB,mBAAEE,GAC1C5gG,KAAK8rD,SAEP,QACyBxoD,IAAvBs9F,EAEA,OAGF,MAAMkB,EAAsBrB,EAAiBA,EAAiB9gG,OAAS,GAEjEqhG,EAAqB,GAE3B,IAAK,IAAIzzF,EAAI,EAAGA,EAAImzF,EAAiB/gG,OAAQ4N,IAAK,CAChD,MAAM0zF,EAAkBP,EAAiBnzF,GACnCmqB,EAAW8M,GAAAA,GAAAA,SAAcy8D,EAAiBa,GAEhDd,EAAmBnjG,KAAK,CAAE65B,WAAUtzB,MAAOmJ,G,CAG7CyzF,EAAmBhc,MAAK,CAACtrC,EAAGC,IAAMD,EAAEhiB,SAAWiiB,EAAEjiB,WAIjD,MAAMqqE,EAA8BtB,EAAiBhjF,MAAM,GAAI,GAE/D,IAAK,IAAIlQ,EAAI,EAAGA,EAAIyzF,EAAmBrhG,OAAQ4N,IAAK,CAClD,MAAM,MAAEnJ,GAAU48F,EAAmBzzF,GAC/By0F,EAAqBtB,EAAiBt8F,GACtC09F,EAAsBrB,EAAiBA,EAAiB9gG,OAAS,GASvE,IAP2B29D,GACzBykC,EACAC,EACAF,GACA,GAIA,OAAO19F,C,CAMX,OAAQ,CACV,CAQA,SAAS69F,GACPh/F,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,WAAED,GAAepF,EAChCwuE,EAAYnpE,EAAcX,OAC1Bg5D,EAAkBt4D,EAAWV,QAE7B,iBAAE64F,GAAqBzgG,KAAK8rD,SAE5Bi2C,EAA8BtB,EAAiBhjF,MAAM,GAAI,GAEzDkjF,EAAqBrjC,GACzBykC,EACArwB,EACA9Q,GACA,GAGF,IAAK+/B,EACH,OAMF,MAAMuB,EAAmBvB,EAAmB,GACtCa,EAAoBf,EAAiB9gG,OAASuiG,EAEpD,IAAK,IAAI30F,EAAI,EAAGA,EAAIi0F,EAAmBj0F,IACrCkzF,EAAiBplD,KAErB,CAkBA,SAbA,SAAgClhB,GAC9BA,EAAaomE,sBAAwBA,GAAsB9zF,KAAK0tB,GAChEA,EAAa0mE,iCACXA,GAAiCp0F,KAAK0tB,GACxCA,EAAasnE,uBACXA,GAAuBh1F,KAAK0tB,GAC9BA,EAAa0nE,cAAgBA,GAAcp1F,KAAK0tB,GAChDA,EAAaunE,gCACXA,GAAgCj1F,KAAK0tB,GACvCA,EAAa8nE,gCACXA,GAAgCx1F,KAAK0tB,EACzC,GCrTE6kC,kCAAiC,GACjCkB,uBAAsB,GACtBsB,sBAAqBA,IACnB+2B,EAKJ,SAAS4H,GACPl9F,EACA5F,EACAyzC,GAEA9wC,KAAKmiG,iBAAkB,EAEvB,MAAMj/F,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BwuE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEf89F,EAAmBrjG,EAAW+c,KAAKm+E,SAASjrF,IAAI9G,EAAS29B,gBAEzD,QAAEmG,EAAO,KAAE40B,EAAI,KAAEC,GAASH,GAC9Bx4D,EACAxG,KAAK4sB,cAAcqyC,oBAGrBj/D,KAAK8rD,SAAW,CACd40C,mBACAD,iBAAkB,CAAC/uB,GACnBkvB,wBAAoBt9F,EACpBi+F,UAAW,GAGbvhG,KAAKqgE,WAAa,CAChBhjE,aACAyzC,sBACAxG,UACA40B,OACAC,OACAsmB,eAAe,GAGjB9gF,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKoiG,kCAEPz/F,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKqiG,oCAEP1/F,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKoiG,kCAGPz/F,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKoiG,kCAEPz/F,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKqiG,oCAEP1/F,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKoiG,kCAGPv5C,GAAkBlmD,EACpB,CAKA,SAAS2/F,GAA4B3/F,GACnCgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKoiG,kCAEPz/F,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKqiG,oCAEP1/F,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKoiG,kCAGPz/F,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKoiG,kCAEPz/F,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKqiG,oCAEP1/F,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKoiG,kCAGPx5C,GAAmBjmD,EACrB,CAOA,SAAS0/F,GACPp/F,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAEhC,oBAAEkuC,EAAmB,KAAEouB,EAAI,KAAEC,EAAI,QAAE70B,GAAYtqC,KAAKqgE,YACpD,UAAEkhC,EAAS,iBAAEd,EAAgB,mBAAEG,GAAuB5gG,KAAK8rD,SAE3D8U,EAAkB6/B,EAAiBA,EAAiB9gG,OAAS,GAC7Dk/F,EAAiBr4F,EAASsB,cAAc84D,GAExCJ,EAAevjC,GAAAA,GAAAA,SAErBA,GAAAA,GAAAA,SAAcujC,EAAc39B,EAAUg8D,GAEtC,MAAMp+B,EAAQh2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAActB,IACxCwB,EAAQj2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAAcrB,IAG9C,GAAIsB,GAASn2B,EAAQ,IAAMo2B,GAASp2B,EAAQ,GAE1C,YAGyBhnC,IAAvBs9F,GAGF5gG,KAAKiiG,gCAAgCh/F,GAGvC,MAOMs/F,EAAmBhB,EAPFrhC,GACrBv9D,EACA89F,EACA/uB,EACA1xE,KAAKqgE,YAKPrgE,KAAK8rD,SAASy1C,UAAYgB,OAECj/F,IAAvBs9F,GAAoCH,EAAiB9gG,OAAS,GAGhEK,KAAKugG,sBAAsBt9F,GAAK,GAGlCjD,KAAK8rD,SAAS02C,UAAYxiG,KAAK6hG,iBAEE,IAA7B7hG,KAAK8rD,SAAS02C,WAOlBxiG,KAAK8rD,SAAS22C,kBAAoBziG,KAAK0iG,gCAAgCz/F,QAG9CK,IAAvBs9F,GACA5gG,KAAKyhG,uBAAuBx+F,GAAK,KAGjCjD,KAAK0hG,iCAAgC,GACrC1hG,KAAK2iG,0BAA0B1/F,IAGjC0iE,GAAsCvqD,EAAiB01B,IAfrD9wC,KAAK2iG,0BAA0B1/F,EAgBnC,CAKA,SAAS0/F,GAA0B1/F,GACjC,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,GAEhC,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,YAC3C,kBAAEoiC,EAAiB,iBAAEhC,GAAqBzgG,KAAK8rD,SAE/C0zC,EAAciD,EAAkBn1F,KAAKrG,GACzCT,EAASsB,cAAcb,KAGzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAEhCz/F,KAAKg5F,0BAA0B37F,EAAYuF,GAE3C,MAAMk/F,EAAsBrB,EAAiBplD,MAE7Cr7C,KAAK8rD,SAAW,CACd40C,iBAAkB+B,EAClBhC,iBAAkB,CAACqB,GACnBlB,wBAAoBt9F,EACpBi+F,UAAW,EACXiB,eAAWl/F,GAGbqiE,GAAsCvqD,EAAiB01B,EACzD,CAmBA,SAAS4xD,GACPz/F,GAEA,MAAM,iBAAEy9F,EAAgB,iBAAED,EAAgB,mBAAEG,EAAkB,UAAE4B,GAC9DxiG,KAAK8rD,SAEP,QAA2BxoD,IAAvBs9F,QAAkDt9F,IAAdk/F,EACtC,OAGF,MAAMt/F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGd0/F,EAA4B,IAAInC,GAiBtC,IAAIoC,EACApF,EAhBJv9B,GACEv9D,EACAigG,EACAlC,EAAiB8B,GACjBxiG,KAAKqgE,YAGHuiC,EAA0BjjG,OAAS8gG,EAAiB9gG,QAEtDijG,EAA0BvnD,MASxBulD,EAAqB4B,GACvBK,EAAWL,EACX/E,EAAYmD,IAEZiC,EAAWjC,EACXnD,EAAY+E,GAGd,MAAMM,EAAkCt+D,GAAAA,GAAAA,SACtCk8D,EAAiBmC,GACjBD,EAA0B,IAGtBG,EAAiCv+D,GAAAA,GAAAA,SACrCk8D,EAAiBmC,GACjBD,EAA0BA,EAA0BjjG,OAAS,IAGzDqjG,EAAmCx+D,GAAAA,GAAAA,SACvCk8D,EAAiBjD,GACjBmF,EAA0B,IAGtBK,EAAkCz+D,GAAAA,GAAAA,SACtCk8D,EAAiBjD,GACjBmF,EAA0BA,EAA0BjjG,OAAS,IAazD28E,EAAY,GAGlB,IAAK,IAAI/uE,EAAI,EAAGA,EAAIs1F,EAAUt1F,IAAK,CACjC,MAAMtG,EAAcy5F,EAAiBnzF,GAErC+uE,EAAUz+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAM9C,IAAIi8F,EACFJ,EAAkCG,EAEhCE,EACFJ,EAAiCC,EAEnC,GAAIE,EAAkBC,EACpB,IAAK,IAAI51F,EAAI,EAAGA,EAAIq1F,EAA0BjjG,OAAQ4N,IAAK,CACzD,MAAMtG,EAAc27F,EAA0Br1F,GAE9C+uE,EAAUz+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,MAG9C,IAAK,IAAIsG,EAAIq1F,EAA0BjjG,OAAS,EAAG4N,GAAK,EAAGA,IAAK,CAC9D,MAAMtG,EAAc27F,EAA0Br1F,GAE9C+uE,EAAUz+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAKhD,IAAK,IAAIsG,EAAIkwF,EAAWlwF,EAAImzF,EAAiB/gG,OAAQ4N,IAAK,CACxD,MAAMtG,EAAcy5F,EAAiBnzF,GAErC+uE,EAAUz+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAI9C,MAAMs1E,EAAY,GAElB,IAAK,IAAIhvE,EAAIs1F,EAAUt1F,EAAIkwF,EAAWlwF,IAAK,CACzC,MAAMtG,EAAcy5F,EAAiBnzF,GAErCgvE,EAAU1+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAS9C,GANAi8F,EACEF,EAAmCD,EAErCI,EACEF,EAAkCH,EAEhCI,EAAkBC,EACpB,IAAK,IAAI51F,EAAI,EAAGA,EAAIq1F,EAA0BjjG,OAAQ4N,IAAK,CACzD,MAAMtG,EAAc27F,EAA0Br1F,GAE9CgvE,EAAU1+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,MAG9C,IAAK,IAAIsG,EAAIq1F,EAA0BjjG,OAAS,EAAG4N,GAAK,EAAGA,IAAK,CAC9D,MAAMtG,EAAc27F,EAA0Br1F,GAE9CgvE,EAAU1+E,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAUhD,OANsBu6D,GAAsB8a,GACtB9a,GAAsB+a,GAGVD,EAAYC,CAGhD,CAKA,SAAS6lB,GACPn/F,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpBlD,KAAKojG,0BAA0BzgG,EACjC,CAKA,SAASygG,GAA0BzgG,GACjC,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,GAEhC,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,YAC3C,kBAAEoiC,EAAiB,iBAAE/B,GAAqB1gG,KAAK8rD,SAErD,GAAI22C,EAAmB,CACrB,MAQMjD,GARgB1D,GAAkB97F,KAAK4sB,eACzC8wE,GACE19F,KAAK4sB,cACL61E,EACA/B,GAEF+B,GAE8Bn1F,KAAKrG,GACrCT,EAASsB,cAAcb,KAEzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAEhCpiG,EAAWkG,aAAc,EAEzBvD,KAAKg5F,0BAA0B37F,EAAYuF,E,CAG7C5C,KAAKmiG,iBAAkB,EACvBniG,KAAK8rD,cAAWxoD,EAChBtD,KAAKqgE,gBAAa/8D,EAElBqiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAKsiG,4BAA4B3/F,EACnC,CAMA,SAAS0gG,GAAwB1gG,GAC/B3C,KAAKojG,0BAA0BzgG,EACjC,CAwBA,SAnBA,SAAuCw3B,GACrCA,EAAagmE,0BACXA,GAA0B1zF,KAAK0tB,GACjCA,EAAamoE,4BACXA,GAA4B71F,KAAK0tB,GACnCA,EAAakoE,mCACXA,GAAmC51F,KAAK0tB,GAC1CA,EAAaioE,iCACXA,GAAiC31F,KAAK0tB,GACxCA,EAAawoE,0BACXA,GAA0Bl2F,KAAK0tB,GACjCA,EAAauoE,gCACXA,GAAgCj2F,KAAK0tB,GACvCA,EAAakpE,wBACXA,GAAwB52F,KAAK0tB,GAC/BA,EAAaipE,0BACXA,GAA0B32F,KAAK0tB,EACnC,GCtdQ+lC,uBAAsB,GAAElB,kCAAiCA,IAAKu5B,EAKtE,SAAS+K,GACPrgG,EACA5F,EACAyzC,GAEA9wC,KAAKujG,eAAgB,EAErB,MAAMrgG,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7BwuE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEf89F,EAAmBrjG,EAAW+c,KAAKm+E,SAASjrF,IAAI9G,EAAS29B,gBAEzD,QAAEmG,EAAO,KAAE40B,EAAI,KAAEC,GAASH,GAC9Bx4D,EACAxG,KAAK4sB,cAAcqyC,oBAGrBj/D,KAAK8rD,SAAW,CACd40C,mBACAD,iBAAkB,CAAC/uB,GACnBkvB,wBAAoBt9F,EACpBi+F,UAAW,GAGbvhG,KAAKqgE,WAAa,CAChBhjE,aACAyzC,sBACAxG,UACA40B,OACAC,OACAsmB,eAAe,GAGjB9gF,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKwjG,gCAEP7gG,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKyjG,kCAEP9gG,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKwjG,gCAGP7gG,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKwjG,gCAEP7gG,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKyjG,kCAEP9gG,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKwjG,gCAEP36C,GAAkBlmD,EACpB,CAKA,SAAS+gG,GAA0B/gG,GACjCgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKwjG,gCAEP7gG,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKyjG,kCAEP9gG,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKwjG,gCAGP7gG,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKwjG,gCAEP7gG,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKyjG,kCAEP9gG,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKwjG,gCAEP56C,GAAmBjmD,EACrB,CAOA,SAAS8gG,GACPxgG,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,OAC1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAEhC,oBAAEkuC,EAAmB,KAAEouB,EAAI,KAAEC,EAAI,QAAE70B,GAAYtqC,KAAKqgE,YACpD,UAAEkhC,EAAS,iBAAEd,EAAgB,mBAAEG,GAAuB5gG,KAAK8rD,SAE3D8U,EAAkB6/B,EAAiBA,EAAiB9gG,OAAS,GAC7Dk/F,EAAiBr4F,EAASsB,cAAc84D,GAExCJ,EAAevjC,GAAAA,GAAAA,SAErBA,GAAAA,GAAAA,SAAcujC,EAAc39B,EAAUg8D,GAEtC,MAAMp+B,EAAQh2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAActB,IACxCwB,EAAQj2D,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASujC,EAAcrB,IAK9C,GAAIsB,GAASn2B,EAAQ,IAAMo2B,GAASp2B,EAAQ,GAE1C,YAGyBhnC,IAAvBs9F,GAGF5gG,KAAKiiG,gCAAgCh/F,GAGvC,MAOMs/F,EAAmBhB,EAPFrhC,GACrBv9D,EACA89F,EACA/uB,EACA1xE,KAAKqgE,YAKPrgE,KAAK8rD,SAASy1C,UAAYgB,OAECj/F,IAAvBs9F,GAAoCH,EAAiB9gG,OAAS,GAChEK,KAAKugG,sBAAsBt9F,GAAK,GAGlCjD,KAAK8rD,SAAS02C,UAAYxiG,KAAK6hG,gBAE/B7hG,KAAK8rD,SAAS22C,kBAAoBziG,KAAK2jG,8BAA8B1gG,QAG5CK,IAAvBs9F,GACA5gG,KAAKyhG,uBAAuBx+F,GAAK,IAEjCjD,KAAK0hG,iCAAgC,GACrC1hG,KAAK4jG,+BAA+B3gG,IAC3BjD,KAAK6jG,4BAA4B5gG,IAC1CjD,KAAK8jG,4BAA4B7gG,GAGnC0iE,GAAsCvqD,EAAiB01B,EACzD,CAMA,SAASgzD,GACP7gG,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,WAG3Cm/B,EAFoBx/F,KAAK+jG,sCAEOz2F,KAAKrG,GACzCT,EAASsB,cAAcb,KAGzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAGhCpiG,EAAW+c,KAAKmjB,QAAQtyB,OAAS,CAC/Bu0F,EAAY,GACZA,EAAYA,EAAY7/F,OAAS,IAEnCtC,EAAW+c,KAAKmjB,QAAQiG,kBAAoB,EAE5CxjC,KAAKg5F,0BAA0B37F,EAAYuF,GAE3C5C,KAAKujG,eAAgB,EACrBvjG,KAAK8rD,cAAWxoD,EAChBtD,KAAKqgE,gBAAa/8D,EAGlBtD,KAAK0jG,0BAA0B/gG,GAC/B3C,KAAKgkG,2BAA2B/gG,EAAK5F,EAAYyzC,EAAqB,KACxE,CAMA,SAAS+yD,GACP5gG,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,WAAED,GAAepF,EAChCwuE,EAAYnpE,EAAcX,OAC1Bq8F,EAAgB37F,EAAWV,QAE3B,UAAE46F,EAAS,iBAAE9B,EAAgB,mBAAEE,GAAuB5gG,KAAK8rD,SAEjE,QAA2BxoD,IAAvBs9F,QAAkDt9F,IAAdk/F,EAEtC,OAAO,EAIT,IAAmB,IAAfA,EACF,OAAO,EAGT,GAAkB,IAAdA,GAAmBA,IAAc9B,EAAiB/gG,OAAS,EAE7D,OAAO,EAKT,MAAMg4B,EAAK+5C,EACL95C,EAAKqsE,EACLpvC,EAAK6rC,EAAiB8B,GAEtB9oD,EAAIlV,GAAAA,GAAAA,SACJmV,EAAInV,GAAAA,GAAAA,SAEVA,GAAAA,GAAAA,IAASkV,EAAG/hB,EAAG,GAAKC,EAAG,GAAID,EAAG,GAAKC,EAAG,IACtC4M,GAAAA,GAAAA,IAASmV,EAAGhiB,EAAG,GAAKk9B,EAAG,GAAIl9B,EAAG,GAAKk9B,EAAG,IAEtC,MAAMqvC,EAAQ1/D,GAAAA,GAAAA,IAASkV,EAAGC,GACpBwqD,EAAO15F,KAAKuE,KAAK0qC,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IACxC0qD,EAAO35F,KAAKuE,KAAK2qC,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAI9C,OAFclvC,KAAKumD,KAAKkzC,GAASC,EAAOC,IAE5B35F,KAAK+nB,GAAK,CAKxB,CAcA,SAASuxE,KACP,MAAM,UAAEvB,EAAS,iBAAE9B,EAAgB,iBAAED,EAAgB,mBAAEG,GACrD5gG,KAAK8rD,SAEDu4C,EAAkB,GAKxB,GAAkB,IAAd7B,EAGF,IAAK,IAAIj1F,EAAImzF,EAAiB/gG,OAAS,EAAG4N,GAAKqzF,EAAoBrzF,IAAK,CACtE,MAAMtG,EAAcy5F,EAAiBnzF,GAErC82F,EAAgBxmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,MAKpD,IAAK,IAAIsG,EAAI,EAAGA,EAAIqzF,EAAoBrzF,IAAK,CAC3C,MAAMtG,EAAcy5F,EAAiBnzF,GAErC82F,EAAgBxmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CActD,GAVkDu9B,GAAAA,GAAAA,SAChDk8D,EAAiBE,GACjBH,EAAiB,IAG8Bj8D,GAAAA,GAAAA,SAC/Ck8D,EAAiBE,GACjBH,EAAiBA,EAAiB9gG,OAAS,IAQ3C,IAAK,IAAI4N,EAAI,EAAGA,EAAIkzF,EAAiB9gG,OAAQ4N,IAAK,CAChD,MAAMtG,EAAcw5F,EAAiBlzF,GAErC82F,EAAgBxmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,MAIpD,IAAK,IAAIsG,EAAIkzF,EAAiB9gG,OAAS,EAAG4N,GAAK,EAAGA,IAAK,CACrD,MAAMtG,EAAcw5F,EAAiBlzF,GAErC82F,EAAgBxmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAItD,OAAOo9F,CACT,CAeA,SAASV,GACP1gG,GAEA,MAAM,iBAAEy9F,EAAgB,iBAAED,EAAgB,mBAAEG,EAAkB,UAAE4B,GAC9DxiG,KAAK8rD,SAEP,QAA2BxoD,IAAvBs9F,QAAkDt9F,IAAdk/F,EACtC,OAGF,MAAMt/F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGd0/F,EAA4B,IAAInC,GAkBtC,IAAIoC,EACApF,EAjBJv9B,GACEv9D,EACAigG,EACAlC,EAAiB8B,GACjBxiG,KAAKqgE,YAGHuiC,EAA0BjjG,OAAS8gG,EAAiB9gG,QAEtDijG,EAA0BvnD,MAUxBulD,EAAqB4B,GACvBK,EAAWL,EACX/E,EAAYmD,IAEZiC,EAAWjC,EACXnD,EAAY+E,GAGd,MAAMM,EAAkCt+D,GAAAA,GAAAA,SACtCk8D,EAAiBmC,GACjBD,EAA0B,IAGtBG,EAAiCv+D,GAAAA,GAAAA,SACrCk8D,EAAiBmC,GACjBD,EAA0BA,EAA0BjjG,OAAS,IAGzDqjG,EAAmCx+D,GAAAA,GAAAA,SACvCk8D,EAAiBjD,GACjBmF,EAA0B,IAGtBK,EAAkCz+D,GAAAA,GAAAA,SACtCk8D,EAAiBjD,GACjBmF,EAA0BA,EAA0BjjG,OAAS,IAGzD2kG,EAAiB,GAGvB,IAAK,IAAI/2F,EAAI,EAAGA,EAAIs1F,EAAUt1F,IAAK,CACjC,MAAMtG,EAAcy5F,EAAiBnzF,GAErC+2F,EAAezmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAYnD,GALE67F,EAAkCG,EAGlCF,EAAiCC,EAGjC,IAAK,IAAIz1F,EAAI,EAAGA,EAAIq1F,EAA0BjjG,OAAQ4N,IAAK,CACzD,MAAMtG,EAAc27F,EAA0Br1F,GAE9C+2F,EAAezmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,MAGnD,IAAK,IAAIsG,EAAIq1F,EAA0BjjG,OAAS,EAAG4N,GAAK,EAAGA,IAAK,CAC9D,MAAMtG,EAAc27F,EAA0Br1F,GAE9C+2F,EAAezmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAKrD,IAAK,IAAIsG,EAAIkwF,EAAWlwF,EAAImzF,EAAiB/gG,OAAQ4N,IAAK,CACxD,MAAMtG,EAAcy5F,EAAiBnzF,GAErC+2F,EAAezmG,KAAK,CAACoJ,EAAY,GAAIA,EAAY,I,CAGnD,OAAOq9F,CACT,CAKA,SAASV,GACP3gG,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,GAEhC,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,YAC3C,kBAAEoiC,EAAiB,iBAAEhC,GAAqBzgG,KAAK8rD,SAE/C0zC,EAAciD,EAAkBn1F,KAAKrG,GACzCT,EAASsB,cAAcb,KAGzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAChCpiG,EAAW+c,KAAKmjB,QAAQtyB,OAAS,CAC/Bu0F,EAAY,GACZA,EAAYA,EAAY7/F,OAAS,IAGnCK,KAAKg5F,0BAA0B37F,EAAYuF,GAE3C,MAAMk/F,EAAsBrB,EAAiBplD,MAE7Cr7C,KAAK8rD,SAAW,CACd40C,iBAAkB+B,EAClBhC,iBAAkB,CAACqB,GACnBlB,wBAAoBt9F,EACpBi+F,UAAW,GAGb57B,GAAsCvqD,EAAiB01B,EACzD,CAKA,SAAS0yD,GACPvgG,GAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpBlD,KAAKukG,wBAAwB5hG,EAC/B,CAKA,SAAS4hG,GAAwB5hG,GAC/B,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,GAEhC,WAAEvF,EAAU,oBAAEyzC,GAAwB9wC,KAAKqgE,YAC3C,kBAAEoiC,EAAiB,iBAAE/B,GAAqB1gG,KAAK8rD,SAErD,GAAI22C,EAAmB,CACrB,MAQMjD,GARgB1D,GAAkB97F,KAAK4sB,eACzC8wE,GACE19F,KAAK4sB,cACL61E,EACA/B,GAEF+B,GAE8Bn1F,KAAKrG,GACrCT,EAASsB,cAAcb,KAEzB5J,EAAW+c,KAAKm+E,SAAWiH,EAC3BniG,EAAW+c,KAAKqlF,eAAgB,EAChCpiG,EAAW+c,KAAKmjB,QAAQtyB,OAAS,CAC/Bu0F,EAAY,GACZA,EAAYA,EAAY7/F,OAAS,IAI/BtC,EAAW+c,KAAK2lF,sBAClB1iG,EAAW+c,KAAK4lF,8BACdhC,GAAmCyE,EAAmBj8F,IAG1DnJ,EAAWkG,aAAc,EAEzBvD,KAAKg5F,0BAA0B37F,EAAYuF,E,CAG7C5C,KAAKujG,eAAgB,EACrBvjG,KAAK8rD,cAAWxoD,EAChBtD,KAAKqgE,gBAAa/8D,EAElBqiE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK0jG,0BAA0B/gG,EACjC,CAMA,SAAS6hG,GAAsB7hG,GAC7B3C,KAAKukG,wBAAwB5hG,EAC/B,CA6BA,SAxBA,SAAqCw3B,GACnCA,EAAampE,wBACXA,GAAwB72F,KAAK0tB,GAC/BA,EAAaupE,0BACXA,GAA0Bj3F,KAAK0tB,GACjCA,EAAaspE,iCACXA,GAAiCh3F,KAAK0tB,GACxCA,EAAaqpE,+BACXA,GAA+B/2F,KAAK0tB,GACtCA,EAAawpE,8BACXA,GAA8Bl3F,KAAK0tB,GACrCA,EAAaypE,+BACXA,GAA+Bn3F,KAAK0tB,GACtCA,EAAa0pE,4BACXA,GAA4Bp3F,KAAK0tB,GACnCA,EAAa4pE,oCACXA,GAAoCt3F,KAAK0tB,GAC3CA,EAAa2pE,4BACXA,GAA4Br3F,KAAK0tB,GACnCA,EAAaqqE,sBAAwBA,GAAsB/3F,KAAK0tB,GAChEA,EAAaoqE,wBACXA,GAAwB93F,KAAK0tB,EACjC,GCxlBQ6kC,kCAAiCA,IAAKu5B,EAM9C,SAASyL,GACP/gG,EACA5F,EACAyzC,EACA7d,GAEAjzB,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,QAAE0nC,EAAO,KAAE40B,EAAI,KAAEC,GAASH,GAC9Bx4D,EACAxG,KAAK4sB,cAAcqyC,oBAGfkB,EAAe9iE,EAAW+c,KAAKm+E,SAASjrF,IAAI9G,EAAS29B,eAKhC,IAJA9mC,EAAW+c,KAAKmjB,QAAQiG,mBAKjD28B,EAAaskC,UAGf,IAAIhf,GAAgB,EACfxyD,EAAyBstD,gBAC5BkF,GAAgB,GAGlBzlF,KAAKw+F,SAAW,CACdr+B,aAAcA,EACds+B,cAAet+B,EAAaxgE,OAAS,GAGvCK,KAAKqgE,WAAa,CAChBhjE,aACAyzC,sBACAxG,UACA40B,OACAC,OACAsmB,iBAGF9gF,GAAMW,uBAAwB,EAG9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAK0+F,qBAC/C/7F,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK2+F,uBACjDh8F,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAK0+F,qBAClD/7F,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAK0+F,qBAChD/7F,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK2+F,uBACjDh8F,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAK0+F,qBAEhD71C,GAAkBlmD,EACpB,CAUA,SALA,SAAwCw3B,GACtCA,EAAa6pE,2BACXA,GAA2Bv3F,KAAK0tB,EACpC,GCxEQ6lC,qCAAoCA,IAAKu4B,EAQjD,SAASmM,GACP9hG,EACAvF,GAEA,MAAMukC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,GACpClb,cAAe9C,EAAW8C,eAGtB2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAWrD,MAPgB,CACd0mB,WAAiBzgB,IAAVygB,OAAsBzgB,EAAoBygB,EACjD8M,WAAqBvtB,IAAdwtB,OAA0BxtB,EAAoBwtB,EACrDC,cAAuBztB,IAAbytB,OAAyBztB,EAAsBytB,EACzD6D,oBANoBv3B,EAAW+c,KAAKqlF,cAUxC,CAKA,SAASkF,GACP/hG,EACAktB,EACAzyB,GAGKuF,GAAgB4D,UAAU8nB,iBAI3BjxB,EAAW+c,KAAKqlF,cAEdpiG,EAAW+c,KAAK2lF,sBAuBxB,SACEn9F,EACAvF,GAEKA,EAAW+c,KAAK4lF,gCAGnB3iG,EAAW+c,KAAK4lF,8BN1Bd,SACJp9F,EACAvF,GAEA,MAAM,SAAEmJ,GAAa5D,EAGrB,OAAOo7F,GAFc3gG,EAAW+c,KAAKm+E,SAASjrF,IAAI9G,EAAS29B,eAEH39B,EAC1D,CMmBMo+F,CAA2ChiG,EAAgBvF,GAEjE,CAhCMwnG,CACEjiG,EACAvF,GAGF2C,KAAK8kG,yBACHliG,EACAktB,EACAzyB,IAIF2C,KAAK+kG,kBAAkBniG,EAAgBktB,EAAkBzyB,GAG3D2C,KAAKglG,oBAAoBpiG,EAAgBktB,EAAkBzyB,GAE/D,CAoBA,SAAS2nG,GACPpiG,EACAktB,EACAzyB,GAEA,MAAM,SAAEmJ,GAAa5D,EACf8mB,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,GAOpD8iE,EAAe9iE,EAAW+c,KAAKm+E,SAASjrF,KAAKu1B,GACjDr8B,EAAS29B,cAActB,KAKzBu2D,GACEtpE,EACAzyB,EAAW8C,cAJO,IAMlBggE,EACAz2C,EAEJ,CAKA,SAASq7E,GACPniG,EACAktB,EACAzyB,GAEA,MAAM,SAAEmJ,GAAa5D,EACf8mB,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,GAEpD8iE,EAAe9iE,EAAW+c,KAAKm+E,SAASjrF,KAAKu1B,GACjDr8B,EAAS29B,cAActB,KAKzBu2D,GACEtpE,EACAzyB,EAAW8C,cAJO,IAMlBggE,EACAz2C,GAGF,MAAM8Z,EAAoBnmC,EAAW+c,KAAKmjB,QAAQiG,kBAElD,IAAmE,IAA/DxjC,KAAK4sB,cAAcq4E,gCAAgC37C,QAAkB,CACvE,MAAM54B,EAAS1wB,KAAK4sB,cAAcq4E,+BAA+Bv0E,OAG3DsC,EAAiB,IAIjBS,EAAe,CACnB0sC,EAAa,GACbA,EAAaA,EAAaxgE,OAAS,IAKX,IAAtB6jC,EACF/P,EAAaysE,QACkB,IAAtB18D,GACT/P,EAAa4nB,MAGfgxB,GACEv8C,EACAzyB,EAAW8C,cACX6yB,EACAS,EACA,CACE1P,MAAO2F,EAAQ3F,MACfne,aAAc8qB,G,CAKpB,GAA0B,OAAtB8S,EAA4B,CAE9B,MAAMxQ,EAAiB,IAOjBkyE,EAAc/kC,EAFI,IAAtB38B,EAA0B,EAAI28B,EAAaxgE,OAAS,GAItD0sE,GACEv8C,EACAzyB,EAAW8C,cACX6yB,EACA,CAACkyE,GACD,CAAEnhF,MAAO2F,EAAQ3F,O,CAGvB,CAEA,SAAS+gF,GACPliG,EACAktB,EACAzyB,GAEA,MAAM,SAAEmJ,GAAa5D,GACf,SAAE21F,EAAQ,8BAAEyH,GAAkC3iG,EAAW+c,KAK/D,GAHApa,KAAK+kG,kBAAkBniG,EAAgBktB,EAAkBzyB,IAGpD2iG,EACH,OAGF,MAAMmF,EAAmB3+F,EAAS29B,cAAco0D,EAAS,IACnD33B,EAAkBp6D,EAAS29B,cAAco0D,EAASA,EAAS54F,OAAS,IAEpEylG,EAAsC,CAC1C5+F,EAAS29B,cAAc67D,EAA8B,IACrDx5F,EAAS29B,cAAc67D,EAA8B,KAGjDt2E,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,GAG1D+7F,GACEtpE,EACAzyB,EAAW8C,cACX,gBACA,CAACglG,EAAkBvkC,GACnB,CACE78C,MAAO2F,EAAQ3F,MACf8M,MAAOnH,EAAQmH,MACf+D,oBAAoB,EACpB7D,SAAU,QAKdqoE,GACEtpE,EACAzyB,EAAW8C,cACX,2BACA,CACEilG,EAAoC,GACpCA,EAAoC,IAEtC,CACErhF,MAAO2F,EAAQ3F,MACf8M,MAAOnH,EAAQmH,MACf+D,oBAAoB,EACpB7D,SAAU,OAGhB,CAMA,SAASs0E,GACPziG,EACAktB,EACAzyB,GAEA,MAAMqsB,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,IAEpD,kBAAE6hG,GAAsBl/F,KAAK4sB,eAC7B,aAAEuzC,GAAiBngE,KAAKw+F,SAc9B,GAVA90E,EAAQkL,oBAAqB,EAE7BwkE,GACEtpE,EACAzyB,EAAW8C,cACX,IACAggE,EACAz2C,GAGEw1E,EAAmB,CACrB,MAAMlqE,EAAamrC,EAAa,GAC1Bg/B,EAAYh/B,EAAaA,EAAaxgE,OAAS,GAGrD,GACEqgE,GACEhrC,EACAmqE,EACAn/F,KAAK4sB,cAAcqzC,uBAIrBm5B,GACEtpE,EACAzyB,EAAW8C,cACX,IACA,CAACg/F,EAAWnqE,GACZtL,OAEG,CAEL,MAAMsJ,EAAiB,IAEvBq5C,GACEv8C,EACAzyB,EAAW8C,cACX6yB,EACA,CAACgC,GACD,CAAEjR,MAAO2F,EAAQ3F,MAAOne,aAAc,G,EAI9C,CAKA,SAAS0/F,GACP1iG,EACAktB,EACAzyB,GAEA,MAAM,kBAAEolG,GAAsBziG,KAAK8rD,SAEnC,QAA0BxoD,IAAtBm/F,EAIF,YAFAziG,KAAKglG,oBAAoBpiG,EAAgBktB,EAAkBzyB,GAK7D,MAAMqsB,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,GAI1D+7F,GACEtpE,EACAzyB,EAAW8C,cAJe,YAM1BsiG,EACA/4E,EAEJ,CAKA,SAAS67E,GACP3iG,EACAktB,EACAzyB,GAEA,MAAM,kBAAEolG,GAAsBziG,KAAK8rD,SAEnC,QAA0BxoD,IAAtBm/F,EAIF,YAFAziG,KAAK+kG,kBAAkBniG,EAAgBktB,EAAkBzyB,GAK3D,MAAMqsB,EAAU1pB,KAAK0kG,qBAAqB9hG,EAAgBvF,GAI1D+7F,GACEtpE,EACAzyB,EAAW8C,cAJe,YAM1BsiG,EACA/4E,EAEJ,CAsBA,SAjBA,SAA+ByQ,GAC7BA,EAAawqE,cAAgBA,GAAcl4F,KAAK0tB,GAChDA,EAAa6qE,oBAAsBA,GAAoBv4F,KAAK0tB,GAC5DA,EAAa4qE,kBAAoBA,GAAkBt4F,KAAK0tB,GACxDA,EAAa2qE,yBACXA,GAAyBr4F,KAAK0tB,GAEhCA,EAAakrE,wBACXA,GAAwB54F,KAAK0tB,GAE/BA,EAAamrE,+BACXA,GAA+B74F,KAAK0tB,GACtCA,EAAaorE,6BACXA,GAA6B94F,KAAK0tB,GACpCA,EAAauqE,qBAAuBA,GAAqBj4F,KAAK0tB,EAChE,GCtVQ6mC,sBAAqBA,IAAKu3B,GAC1Bn8D,QAAOA,IAAKC,GAAAA,UAEdC,GAAqB,EAAIF,GA8D/B,MAAMopE,WAA8BviE,GAyDlC1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3BqlB,+BAAgC,CAG9B37C,SAAS,EAET54B,OAAQ,GAEVwuE,mBAAmB,EAEnBj/B,sBAAuB,GAGvB6gC,iCAAkC,EAOlC7hC,mBAAoB,EACpB88B,cAAe,CACbC,kBAAkB,EAClBC,mBAAmB,EACnB2B,0BAA2B,GAC3BC,2BAA4B,IAE9BtG,gBAAgB,EAChB1zD,aAAcyhD,GACdxhD,gBAAiBs4B,MAIrBl5B,MAAMzW,EAAWC,GAzFnB,KAAA0tD,WAAY,EACZ,KAAA+nB,iBAAkB,EAClB,KAAAoB,eAAgB,EAgHhB,KAAA39B,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAChCyF,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAEIgO,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGDrqB,EAAsByD,EAASq4B,yBAE/BxhC,EAA0C,CAC9C2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACR27B,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,oBACAl8B,SAAUX,KAAKotB,eAEjBhT,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,GACRu4B,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCi0D,SAAU,CAAe,IAAI11D,IAC7B7oB,MAAO,GACPF,YAAa,CAAC,IAYlB,OARA9V,GAAc3G,EAAYsF,GAE1B3C,KAAKu+F,aAAat7F,EAAK5F,EAAYyzC,GAEnC7tC,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAYnB,KAAAgpE,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEd4tC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAKgkG,2BACH/gG,EACA5F,EACAyzC,EACA7d,EACD,EAMH,KAAAszC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEd4tC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGH/vB,EAAW+c,KAAKqlF,cAClBz/F,KAAKsjG,wBAAwBrgG,EAAK5F,EAAYyzC,GAE9C9wC,KAAKmgG,0BAA0Bl9F,EAAK5F,EAAYyzC,E,EAepD,KAAA/L,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfqI,EAAS5N,EAAW+c,KAAKm+E,SAI/B,IAAIkN,EAAgBj/F,EAAS29B,cAAcl5B,EAAO,IAElD,IAAK,IAAIsC,EAAI,EAAGA,EAAItC,EAAOtL,OAAQ4N,IAAK,CACtC,MAAMoqB,EAAK8tE,EACL7tE,EAAKpxB,EAAS29B,cAAcl5B,EAAOsC,IAIzC,IAAiB,IAFAyzD,GAAsB39B,EAAc1L,EAAIC,EAAIoM,GAG3D,OAAO,EAGTyhE,EAAgB7tE,C,CAGlB,GAAIv6B,EAAW+c,KAAKqlF,cAElB,OAAO,EAIT,MAAMiG,EAASl/F,EAAS29B,cAAcl5B,EAAO,IACvC06F,EAAOn/F,EAAS29B,cAAcl5B,EAAOA,EAAOtL,OAAS,IAS3D,OAAiB,IAPAqhE,GACf39B,EACAqiE,EACAC,EACA3hE,EAOU,EAGd,KAAAuJ,OAAU5qC,IACR,MAAMy3E,EAAYp6E,KAAKo6E,UACjBmpB,EAAgBvjG,KAAKujG,cACrBpB,EAAkBniG,KAAKmiG,gBAEzB/nB,EACFp6E,KAAKogG,cAAcz9F,GACV4gG,EACTvjG,KAAKwkG,sBAAsB7hG,GAClBw/F,GACTniG,KAAKqjG,wBAAwB1gG,E,EAOjC,KAAAq2F,0BAA4B,CAC1B37F,EACAuF,KAEA,MAAM,WAAEmF,EAAU,kBAAEC,GAAsBpF,EAEpCy3E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,sBAEFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EAAY,EAMnD,KAAAw8F,2BACEriG,IAEA,MAAMg9E,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EAAY,EAkHnD,KAAA84B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,EAAQ,gBAAE4U,GAAoBxY,GAChC,QAAED,GAAY6D,EAEdynB,EAAWjuB,KAAKuuB,YAAY/nB,GAElC,IAAIpD,EACFK,GAAezD,KAAKotB,cAAezqB,GAIrC,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM4S,EAAYp6E,KAAKo6E,UACjBmpB,EAAgBvjG,KAAKujG,cACrBpB,EAAkBniG,KAAKmiG,gBAE7B,GAAM/nB,GAAampB,GAAiBpB,EAM7B,CAIL,MAAMyD,EAAsB5lG,KAAKqgE,WAAWhjE,WAAW8C,cAEvDiD,EAAYlF,SAASb,IACnB,GAAIA,EAAW8C,gBAAkBylG,EAC/B,GAAIxrB,EACFp6E,KAAKqlG,wBACHziG,EACAktB,EACAzyB,QAEG,GAAI8kG,EACTniG,KAAKslG,+BACH1iG,EACAktB,EACAzyB,OAEG,KAAIkmG,EAOT,MAAM,IAAIzgG,MACR,WAAW9C,KAAKotB,4CAPlBptB,KAAKulG,6BACH3iG,EACAktB,EACAzyB,E,MAQJ2C,KAAK2kG,cAAc/hG,EAAgBktB,EAAkBzyB,E,IAKzDmqE,GAAe,C,MAxCfpkE,EAAYlF,SAASb,IACnB2C,KAAK2kG,cAAc/hG,EAAgBktB,EAAkBzyB,EAAW,IA0CpE,OAAK2C,KAAK4sB,cAAc2qE,gBAIxBn0F,EAAYlF,SAASb,IACnB,MAAMuoG,EAAsB5lG,KAAKqgE,YAAYhjE,WAAW8C,cACxD,GACE9C,EAAW8C,gBAAkBylG,GAC5B5lG,KAAKqgE,YAAYolB,cAFpB,CAOA,IAAKzlF,KAAKqgE,YAAYolB,cAAe,CACnC,MAAM,KAAErrE,GAAS/c,EAEd+c,EAAKN,YAAYmU,IACqB,MAAvC7T,EAAKN,YAAYmU,GAAUk+D,SAiBlB9uF,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACAmJ,EACA4U,EACAxY,IApBFwX,EAAKN,YAAYmU,GAAY,CAC3BwkC,SAAU,KACViP,KAAM,KACNp0B,IAAK,KACLqxB,KAAM,KACNC,OAAQ,KACRutB,SAAU,MAGZnsF,KAAK+oF,sBACH1rF,EACAmJ,EACA4U,EACAxY,G,CAYN5C,KAAKs5F,aAAaj8F,EAAYmJ,EAAU5D,EAAgBktB,E,CAAiB,IAGpE03C,QA/CP,CA+CmB,EAGrB,KAAAuhB,sBAAwB,CACtB1rF,EACAmJ,EACA4U,EACAxY,KAEA,MAAMwX,EAAO/c,EAAW+c,MAClB,YAAEN,EAAay+E,SAAUttF,GAAWmP,EAEpCsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GACrBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,UAAEqd,EAAS,SAAEloC,GAAa6qB,EAC1BoG,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAI7DnuC,EAAc8qB,EAAkB,GAChC2nE,EAAqBlzF,EAASsB,cAAcb,GAC5C0yF,EAAcnzF,EAASsB,cAAc,CACzCb,EAAY,GAAK,EACjBA,EAAY,KAER2yF,EAAcpzF,EAASsB,cAAc,CACzCb,EAAY,GACZA,EAAY,GAAK,IAGb4yF,EAAW58D,GAAAA,GAAAA,SAAcy8D,EAAoBC,GAC7CG,EAAW78D,GAAAA,GAAAA,SAAcy8D,EAAoBE,GAE7CxrD,EAAQkB,GAAmB3jB,GACjC,IAAI+1C,EACF62B,GAA+BxmE,GAAqBqc,EAAQA,EAE9DszB,GAAQm4B,EAAWC,EAEnB,MAAM+L,EAAgBnwF,GAAAA,UAAAA,sBAA8BszB,EAAW/9B,EAAO,IACtE46F,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAC5CA,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAC5CA,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAE5C,IAAIlzD,EAAOkzD,EAAc,GACrBjzD,EAAOizD,EAAc,GAErBhzD,EAAOgzD,EAAc,GACrB/yD,EAAO+yD,EAAc,GAErB9yD,EAAO8yD,EAAc,GACrB7yD,EAAO6yD,EAAc,GAEzB,IAAK,IAAI92F,EAAI,EAAGA,EAAI9D,EAAOtL,OAAQoP,IAAK,CACtC,MAAM82F,EAAgBnwF,GAAAA,UAAAA,sBACpBszB,EACA/9B,EAAO8D,IAET82F,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAC5CA,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAC5CA,EAAc,GAAKp7F,KAAK4qC,MAAMwwD,EAAc,IAC5ClzD,EAAOloC,KAAK8U,IAAIozB,EAAMkzD,EAAc,IACpCjzD,EAAOnoC,KAAK6iC,IAAIsF,EAAMizD,EAAc,IAEpChzD,EAAOpoC,KAAK8U,IAAIszB,EAAMgzD,EAAc,IACpC/yD,EAAOroC,KAAK6iC,IAAIwF,EAAM+yD,EAAc,IAEpC9yD,EAAOtoC,KAAK8U,IAAIwzB,EAAM8yD,EAAc,IACpC7yD,EAAOvoC,KAAK6iC,IAAI0F,EAAM6yD,EAAc,G,CAItC,MAAMC,EAAS,KAAQlzD,EAAOD,GACxBozD,EAAS,KAAQjzD,EAAOD,GACxBmzD,EAAS,KAAQhzD,EAAOD,GAE9BJ,EAAOloC,KAAK4qC,MAAM1C,EAAOmzD,GACzBlzD,EAAOnoC,KAAKurC,KAAKpD,EAAOkzD,GACxBjzD,EAAOpoC,KAAK4qC,MAAMxC,EAAOkzD,GACzBjzD,EAAOroC,KAAKurC,KAAKlD,EAAOizD,GACxBhzD,EAAOtoC,KAAK4qC,MAAMtC,EAAOizD,GACzBhzD,EAAOvoC,KAAKurC,KAAKhD,EAAOgzD,GAExB,MAAMtzD,EAAY,CAChB,CAACC,EAAMC,GACP,CAACC,EAAMC,GACP,CAACC,EAAMC,IAGHizD,EAAcj9D,EAAU2K,aAAa,CAACf,EAAME,EAAME,IAClDkzD,EAAe1/F,EAAS29B,cAAc8hE,GAE5C,IAAIE,EAAS,EACTlpC,EAAgB,GAChBmpC,EAAsB,EAC1B,MAAMlyD,EAAgB1B,GACpBxJ,GACA,CAACuL,EAAUD,KACT,IAAI3I,GAAS,EACb,MAAM5W,EAAQvuB,EAAS29B,cAAcoQ,GA4BrC,OA3BIxf,EAAM,IAAMoxE,IACdC,EAAsB,EACtBD,EAASpxE,EAAM,GACfkoC,EAAgBL,GACd7qC,EACAgD,EACA,CAACmxE,EAAa,GAAInxE,EAAM,KAE1BkoC,EAAc+nB,MAEH,SAAUtrC,EAAGC,GAClB,OAAOD,EAMR,KANqBC,EAMrB,GALK,EACAD,EAIL,GAJgBC,EAIhB,IAHM,EACD,CACN,KAIFsjB,EAAct9D,QAAUo1B,EAAM,GAAKkoC,EAAc,GAAG,KACtDA,EAAcijC,QACdkG,KAEEA,EAAsB,GAAM,IAC9Bz6D,GAAS,GAEJA,CAAM,GAEf3rC,KAAK4sB,cAAckX,gBAAgB06B,cACnC9rB,GAGIw4C,EAAsB,CAC1B74B,YAAau4B,GAAoBpkF,EAAUynB,GAC3CyW,YAAa1kC,KAAK0kC,YAChBl+B,EACAynB,EACA5wB,EAAWyD,SAAS+7B,oBAIlBwuD,EAAeb,GACnB1pF,EAAS2xD,SACTp1D,EAAWyD,SAAS+7B,kBACpBquD,GAGIqB,EAAQvsF,KAAK4sB,cAAckX,gBAAgB46B,gBAEjD5kD,EAAYmU,GAAY,CACtBwkC,SAAU3xD,EAAS2xD,SACnBiP,OACA/C,KAAM4tB,EAAM,IAAIprF,MAChBmsC,IAAKi/C,EAAM,IAAIprF,MACfy9D,OAAQ2tB,EAAM,IAAIprF,MAClBqrF,WAAYD,EACZr4C,cAAeA,EACfi4C,SAAU98C,GAAuB,KAAM1jB,GACvC0/D,e,CAQJ,OAJArrF,KAAKg5F,0BAA0B37F,EAAYuF,GAE3CvF,EAAWkG,aAAc,EAElBuW,CAAW,EAGpB,KAAAw/E,aAAe,CAACj8F,EAAYmJ,EAAU5D,EAAgBktB,KACpD,MAAM1V,EAAO/c,EAAW+c,KAClB6T,EAAWjuB,KAAKuuB,YAAY/nB,GAE5Bo7B,EAAiD,CACrDrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGhCqO,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WACX,OAGF,MAAMqa,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GACxD,IAAK4H,GAAkC,IAArBA,EAAUl2B,OAC1B,OAGF,MAAMoyB,EAAoB3X,EAAKm+E,SAASjrF,KAAK8nC,GAC3C5uC,EAAS29B,cAAciR,KAEzB,IAAKh7B,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAClC,MAAMyO,EAAsBtE,GAAuB7yD,GAEnD3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAcouE,GAClBv2E,EACAzyB,EAAW8C,eAAiB,GAHX,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,IAC1D,EA/sBDgzE,GAAiBtmG,MACjBumG,GAAuBvmG,MACvBwmG,GAA8BxmG,MAC9BymG,GAA4BzmG,MAC5B0mG,GAA+B1mG,MAC/B2mG,GAAsB3mG,MAEtBA,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CAkPAtJ,uCAAAA,CACEhgC,EACAS,GAEA,IAAKA,IAAgBA,EAAYzD,OAC/B,OAGF,MAAMiD,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAErB,IAAIgkG,EAEJ,GAAIpgG,aAAoB24B,GAAAA,eAAgB,CACtC,MAAM92B,EAAS7B,EAAS44B,aAElB,yBAAE5C,GACN9mB,GAAAA,UAAAA,qCAA6ClP,EAAU6B,GAGzDu+F,EAAuB5mG,KAAKu8B,6BAC1Bn5B,EACAiF,EACAm0B,E,MAKFoqE,EAAuBloE,GAA4Bl4B,EAAUpD,GAG/D,OAAOwjG,CACT,CAOQrqE,4BAAAA,CACNn5B,EACAiF,EACAm0B,GAEA,MAAM,gBAAEC,GAAoBp0B,EAEtBq0B,EAAiCt5B,EAAYxC,QAChD+7B,IACC,MAAMC,EAA4BD,EAAG77B,SAAS27B,gBAExCU,EACJ1yB,KAAKC,IAAIuyB,GAAAA,GAAAA,IAASR,EAAiBG,IACnCN,GAEF,OAAOM,GAA6BO,CAAU,IAKlD,IAAKT,EAA+B/8B,OAClC,MAAO,GAMT,MAAMy9B,EAA+BZ,EAA2B,GAC1D,WAAEa,GAAeh1B,EAEjBi1B,EAAyB,GAE/B,IAAK,MAAMjgC,KAAcq/B,EAAgC,CACvD,MACM3H,EADO13B,EAAW+c,KACLm+E,SAAS,GAE5B,IAAKl7F,EAAW0E,UACd,SAUF,MAAMy7B,EAAMP,GAAAA,GAAAA,SAEZA,GAAAA,GAAAA,IAASO,EAAKH,EAAYtI,GAE1B,MAAM0I,EAAMR,GAAAA,GAAAA,IAASO,EAAKf,GAEtBhyB,KAAKC,IAAI+yB,GAAOL,GAClBE,EAAuBz/B,KAAKR,E,CAIhC,OAAOigC,CACT,EAmXF,SAASgoD,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,KAAEyzC,EAAI,KAAE/C,EAAI,OAAEC,EAAM,IAAEtxB,EAAG,YAAEihD,EAAW,SAAEpC,EAAQ,aAAEd,GACtDd,EAEI10D,EAAsB,GAE5B,GAAI6rC,EAAM,CACR,MAAMgtB,EAAWH,EACb,8BACA,SAAS93C,GAAYirB,MAASyqB,IAClCt2D,EAAUh4B,KAAK6wF,E,CAejB,OAZI/vB,GACF9oC,EAAUh4B,KAAK,SAAS44C,GAAYkoB,MAAS0sB,KAG3C/9C,GACFzX,EAAUh4B,KAAK,QAAQ44C,GAAYnJ,MAAQ+9C,KAGzCzsB,GACF/oC,EAAUh4B,KAAK,YAAY44C,GAAYmoB,MAAWysB,KAG7Cx1D,CACT,CAEA2vE,GAAsB7kG,SAAW,oBACjC,YCt8BM,MAAOkmG,GAaXtkG,WAAAA,EAAY,QACVukG,EAAO,YACPC,EAAW,SACXC,IAMAhnG,KAAKinG,aAAe,GAAKH,EACzB9mG,KAAKknG,MAAQlnG,KAAKinG,aAAe,EACjCjnG,KAAKmnG,MAAQ,EACbnnG,KAAKonG,oBAAsB,EAC3BpnG,KAAKqnG,SAAWrnG,KAAKsnG,YAAYtnG,KAAKinG,cAEtCjnG,KAAKunG,kBACoB,IAAhBR,EACHA,EACCnnG,GAASA,EAEhBI,KAAKwnG,UACiB,mBAAbR,EACHA,EACA,CAACS,EAAOC,IAAUD,IAAUC,CACpC,CAMO7pG,IAAAA,CAAK+B,GACV,MAAM+nG,EAAc3nG,KAAK4nG,gBAAgBhoG,GAEnCioG,EAAyB,CAC7B1mG,MAAOvB,EACPkoG,KAHc9nG,KAAKqnG,SAASM,IAM9B3nG,KAAKqnG,SAASM,GAAeE,EAC7B7nG,KAAKmnG,OACP,CAEO9rD,GAAAA,GACL,GAAmB,IAAfr7C,KAAKmnG,MACP,MAAM,IAAIrkG,MAAM,0CAIlB,KAAmD,OAA5C9C,KAAKqnG,SAASrnG,KAAKonG,sBACxBpnG,KAAKonG,qBACFpnG,KAAKonG,oBAAsB,GAAKpnG,KAAKinG,aAI1C,MAAMc,EAAM/nG,KAAKqnG,SAASrnG,KAAKonG,qBAK/B,OAHApnG,KAAKqnG,SAASrnG,KAAKonG,qBAAuBW,EAAID,KAC9C9nG,KAAKmnG,QAEEY,EAAI5mG,KACb,CAOO0tD,MAAAA,CAAOjvD,GACZ,IAAKA,EACH,OAAO,EAIT,MAAM+nG,EAAc3nG,KAAK4nG,gBAAgBhoG,GACnCooG,EAAkBhoG,KAAKqnG,SAASM,GACtC,IACIM,EADArsD,EAAOosD,EAGX,KAAgB,OAATpsD,IACD57C,KAAKwnG,UAAU5nG,EAAMg8C,EAAKz6C,QAI9B8mG,EAAWrsD,EACXA,EAAOA,EAAKksD,KAId,OAAa,OAATlsD,IAKAA,IAASosD,EACXhoG,KAAKqnG,SAASM,GAAe/rD,EAAKksD,KAElCG,EAASH,KAAOlsD,EAAKksD,KAGvB9nG,KAAKmnG,SACE,EACT,CAEOe,OAAAA,GACL,OAAsB,IAAfloG,KAAKmnG,KACd,CAOQS,eAAAA,CAAgBhoG,GACtB,OAAOI,KAAKunG,aAAa3nG,GAAQI,KAAKknG,KACxC,CAOQI,WAAAA,CAAY7oG,GAClB,MAAM0pG,EAAU,IAAI9pG,MAAMI,GAE1B,OADA0pG,EAAQv3E,KAAK,MACNu3E,CACT,ECrJF,MAAMC,GAAa,WACbC,GAAe,GAAK,EAAI59F,KAAK+nB,IAe7B,MAAO81E,GAwCX/lG,WAAAA,CAAYgmG,EAAkC13E,EAAeyC,GAiIrD,KAAAk1E,eAAiB,CAACC,EAAaC,KACrC,MAAM,MAAE73E,GAAU7wB,KAClB,OAAOyoG,EAAM53E,EAAQ63E,CAAG,EAQlB,KAAAC,oBAAuBvkG,GAItB,CAHGA,EAAQpE,KAAK6wB,MACbpmB,KAAK4qC,MAAMjxC,EAAQpE,KAAK6wB,QA8T5B,KAAA+3E,cAAiBlmF,GAChBjY,KAAKqpD,MAAM9zD,KAAK6oG,kBAAoB7oG,KAAK8oG,MAAMpmF,IA3ctD,MAAMqmF,EAAYR,EAAmB5oG,OAErCK,KAAKgpG,sBAAwB,EAC7BhpG,KAAK6oG,kBAAoB,GAAK7oG,KAAKgpG,sBAEnChpG,KAAK6wB,MAAQA,EACb7wB,KAAKszB,OAASA,EAEdtzB,KAAKuoG,mBAAqBA,EAC1BvoG,KAAKipG,QAAU,KACfjpG,KAAKkpG,SAAW,KAChBlpG,KAAKmpG,SAAW,KAEhBnpG,KAAKipG,QAAUjpG,KAAKopG,kBACpBppG,KAAKqpG,cAAgBrpG,KAAKspG,mBAC1BtpG,KAAKkpG,SAAWlpG,KAAKupG,oBACrBvpG,KAAKmpG,SAAWnpG,KAAKwpG,oBAErBxpG,KAAKypG,QAAU,IAAIprG,MAAM0qG,GACzB/oG,KAAK0pG,QAAU,IAAIC,YAAYZ,GAC/B/oG,KAAK8oG,MAAQ,IAAIvlF,aAAawlF,EAChC,CAEOa,WAAAA,CAAY1/C,GACjB,MAAM2/C,EAAkB7pG,KAAKwoG,eAAet+C,EAAW,GAAIA,EAAW,IAEtElqD,KAAKkqD,WAAa,KAClBlqD,KAAKypG,QAAQ74E,MAAK,GAClB5wB,KAAK0pG,QAAQ94E,KAAKw3E,IAClBpoG,KAAK8oG,MAAMl4E,KAAKkkB,KAChB90C,KAAK8pG,iBAAmB,IAAIjD,GAAoB,CAC9CC,QAAS9mG,KAAKgpG,sBACdjC,YAAa/mG,KAAK4oG,gBAGpB5oG,KAAKkqD,WAAaA,EAClBlqD,KAAK8oG,MAAMe,GAAmB,EAC9B7pG,KAAK8pG,iBAAiBjsG,KAAKgsG,EAC7B,CAWOE,eAAAA,CAAgB3yE,GACrB,IAAKp3B,KAAKkqD,WACR,MAAM,IAAIpnD,MAAM,kCAGlB,MAAM,WACJonD,EACAs+C,eAAgBpkG,EAChBukG,oBAAqBqB,GACnBhqG,KACE6pG,EAAkBzlG,EAAM8lD,EAAW,GAAIA,EAAW,IAClD+/C,EAAmB7lG,EAAMgzB,EAAY,GAAIA,EAAY,KAEzDqyE,QAASA,EACTC,QAASA,EACTZ,MAAOoB,EACPJ,iBAAkBK,GAChBnqG,KAEJ,GAAIiqG,IAAqBJ,EACvB,MAAO,GAOT,MACGM,EAAcjC,WACfwB,EAAQO,KAAsB7B,IAC9B,CACA,MAAM1lF,EAAaynF,EAAc9uD,MAEjC,GAAIouD,EAAQ/mF,GACV,SAGF,MAAMqS,EAAQi1E,EAAMtnF,GACd0nF,EAAkBpqG,KAAKqqG,mBAAmBt1E,GAEhD00E,EAAQ/mF,IAAc,EAGtB,IAAK,IAAInV,EAAI,EAAGorE,EAAMyxB,EAAgBzqG,OAAQ4N,EAAIorE,EAAKprE,IAAK,CAC1D,MAAM+8F,EAAgBF,EAAgB78F,GAChCg9F,EAAsBnmG,EAAMkmG,EAAc,GAAIA,EAAc,IAC5DpuC,EAAOl8D,KAAKwqG,qBAAqBz1E,EAAOu1E,GACxCG,EAAeP,EAAKxnF,GAAcw5C,EAEpCuuC,EAAeP,EAAKK,KAClBL,EAAKK,KAAyBz1D,KAGhCq1D,EAAct7C,OAAO07C,GAGvBL,EAAKK,GAAuBE,EAC5Bf,EAAQa,GAAuB7nF,EAC/BynF,EAActsG,KAAK0sG,G,EAKzB,MAAMG,EAAa,GACnB,IAAIC,EAAiBV,EAErB,KAAOU,IAAmBvC,IACxBsC,EAAW7sG,KAAKmsG,EAAMW,IACtBA,EAAiBjB,EAAQiB,GAG3B,OAAOD,EAAWjG,SACpB,CA8BQmG,UAAAA,CAAWr5F,EAAWC,GAC5B,MAAQ+2F,mBAAoBnuF,EAAI,MAAEyW,GAAU7wB,KAC5C,IAAIoE,EAAQpE,KAAKwoG,eAAeh3F,EAAGD,GAOnC,OAJIA,EAAI,IAAMsf,GACZzsB,IAGKgW,EAAKhW,EAAQ,GAAKgW,EAAKhW,EAChC,CAQQymG,UAAAA,CAAWt5F,EAAWC,GAC5B,MAAQ+2F,mBAAoBnuF,EAAI,MAAEyW,EAAK,OAAEyC,GAAWtzB,KACpD,IAAIoE,EAAQpE,KAAKwoG,eAAeh3F,EAAGD,GAOnC,OAJIC,EAAI,IAAM8hB,IACZlvB,GAASkvB,GAGJlZ,EAAKhW,GAASgW,EAAKhW,EAAQysB,EACpC,CAEQi6E,qBAAAA,CAAsBv5F,EAAWC,GACvC,MAAMomC,EAAK53C,KAAK4qG,WAAWr5F,EAAGC,GACxBsmC,EAAK93C,KAAK6qG,WAAWt5F,EAAGC,GAE9B,OAAO/G,KAAKuE,KAAK4oC,EAAKA,EAAKE,EAAKA,EAClC,CAYQizD,WAAAA,CAAYx5F,EAAWC,GAC7B,MAAQ+2F,mBAAoBnuF,EAAMouF,eAAgBpkG,GAAUpE,KAkB5D,IAAIgrG,EAfQ5wF,EAAKhW,EAAMoN,EAAI,EAAGD,IAqB9B,OALAy5F,GAfY5wF,EAAKhW,EAAMoN,EAAI,EAAGD,EAAI,IAerB,EAdD6I,EAAKhW,EAAMoN,EAAI,EAAGD,IAClB6I,EAAKhW,EAAMoN,EAAI,EAAGD,EAAI,IAclCy5F,GAbY5wF,EAAKhW,EAAMoN,EAAGD,EAAI,IAajB,EAZD6I,EAAKhW,EAAMoN,EAAGD,EAAI,IAYP,GAXX6I,EAAKhW,EAAMoN,EAAGD,IAWQ,EAVtB6I,EAAKhW,EAAMoN,EAAGD,EAAI,IAClB6I,EAAKhW,EAAMoN,EAAGD,EAAI,IAU9By5F,GATY5wF,EAAKhW,EAAMoN,EAAI,EAAGD,EAAI,IASrB,EARD6I,EAAKhW,EAAMoN,EAAI,EAAGD,IAClB6I,EAAKhW,EAAMoN,EAAI,EAAGD,EAAI,IAQlCy5F,GAPY5wF,EAAKhW,EAAMoN,EAAI,EAAGD,IASvBy5F,CACT,CAQQ1B,gBAAAA,GACN,MAAM,MAAEz4E,EAAK,OAAEyC,GAAWtzB,KACpBirG,EAAW,IAAI1nF,aAAasN,EAAQyC,GAE1C,IAAI43E,EAAa,EACb59D,EAAM,EACN/7B,EAAI,EACJC,EAAI,EAER,IAAKA,EAAI,EAAGA,EAAI8hB,EAAS,EAAG9hB,IAAK,CAC/B,IAAKD,EAAI,EAAGA,EAAIsf,EAAQ,EAAGtf,IACzB05F,EAASC,GAAclrG,KAAK8qG,sBAAsBv5F,EAAGC,GACrD87B,EAAM7iC,KAAK6iC,IAAI29D,EAASC,GAAa59D,GACrC49D,IAKFD,EAASC,GAAcD,EAASC,EAAa,GAC7CA,G,CAKF,IAAK,IAAIvyB,EAAMsyB,EAAStrG,OAAQurG,EAAavyB,EAAKuyB,IAChDD,EAASC,GAAcD,EAASC,EAAar6E,GAI/C,IAAK,IAAItjB,EAAI,EAAGorE,EAAMsyB,EAAStrG,OAAQ4N,EAAIorE,EAAKprE,IAC9C09F,EAAS19F,GAAK,EAAI09F,EAAS19F,GAAK+/B,EAGlC,OAAO29D,CACT,CAQQ7B,eAAAA,GACN,MAAM,MAAEv4E,EAAK,OAAEyC,EAAQk1E,eAAgBpkG,GAAUpE,KAC3CipG,EAAU,IAAI1lF,aAAasN,EAAQyC,GAGzC21E,EAAQr4E,KAAK,EAAG,EAAGxsB,EAAM,EAAG,IAE5B,IAAK,IAAIoN,EAAI,EAAGA,EAAI8hB,EAAS,EAAG9hB,IAAK,CAEnCy3F,EAAQ7kG,EAAMoN,EAAG,IAAM,EACvBy3F,EAAQ7kG,EAAMoN,EAAG,IAAM,EAEvB,IAAK,IAAID,EAAI,EAAGA,EAAIsf,EAAQ,EAAGtf,IAE7B03F,EAAQ7kG,EAAMoN,EAAGD,IAAMvR,KAAK+qG,YAAYx5F,EAAGC,GAAK,IAAO,EAAI,EAI7Dy3F,EAAQ7kG,EAAMoN,EAAGqf,EAAQ,IAAM,EAC/Bo4E,EAAQ7kG,EAAMoN,EAAGqf,EAAQ,IAAM,C,CAMjC,OAFAo4E,EAAQr4E,KAAK,EAAGxsB,EAAMkvB,EAAS,EAAG,IAE3B21E,CACT,CAQQM,iBAAAA,GACN,MAAM,MAAE14E,EAAK,OAAEyC,GAAWtzB,KACpBmrG,EAAQ,IAAI5nF,aAAasN,EAAQyC,GACvC,IAAI43E,EAAa,EAEjB,IAAK,IAAI15F,EAAI,EAAGA,EAAI8hB,EAAQ9hB,IAAK,CAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIsf,EAAQ,EAAGtf,IAC7B45F,EAAMD,KAAgBlrG,KAAK4qG,WAAWr5F,EAAGC,GAK3C25F,EAAMD,GAAcC,EAAMD,EAAa,GACvCA,G,CAGF,OAAOC,CACT,CAQQ3B,iBAAAA,GACN,MAAM,MAAE34E,EAAK,OAAEyC,GAAWtzB,KACpBorG,EAAQ,IAAI7nF,aAAasN,EAAQyC,GACvC,IAAI43E,EAAa,EAEjB,IAAK,IAAI15F,EAAI,EAAGA,EAAI8hB,EAAS,EAAG9hB,IAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsf,EAAOtf,IACzB65F,EAAMF,KAAgBlrG,KAAK6qG,WAAWt5F,EAAGC,GAM7C,IAAK,IAAImnE,EAAMyyB,EAAMzrG,OAAQurG,EAAavyB,EAAKuyB,IAC7CE,EAAMF,GAAcE,EAAMF,EAAar6E,GAGzC,OAAOu6E,CACT,CAQQC,sBAAAA,CAAuBC,EAAYC,GACzC,MAAM,SAAErC,EAAQ,SAAEC,EAAUX,eAAgBpkG,GAAUpE,KAEhDwrG,EAAatC,EAAS9kG,EAAMmnG,EAAID,IAChCG,EAAatC,EAAS/kG,EAAMmnG,EAAID,IACtC,IAAII,EAAajhG,KAAKuE,KACpBw8F,EAAaA,EAAaC,EAAaA,GAMzC,OAFAC,EAAajhG,KAAK6iC,IAAIo+D,EAAY,QAE3B,CAACF,EAAaE,EAAYD,EAAaC,EAChD,CAWQC,qBAAAA,CACNL,EACAC,EACAK,EACAC,GAEA,MAAMC,EAAa9rG,KAAKqrG,uBAAuBC,EAAIC,GAC7CQ,EAAa/rG,KAAKqrG,uBAAuBO,EAAIC,GAEnD,IAAIG,EAAKF,EAAW,IAAMF,EAAKN,GAAMQ,EAAW,IAAMD,EAAKN,GACvDU,EAAKF,EAAW,IAAMH,EAAKN,GAAMS,EAAW,IAAMF,EAAKN,GAc3D,OAXIS,EAAK,IACPA,GAAMA,EACNC,GAAMA,GAGJX,IAAOM,GAAML,IAAOM,IAEtBG,GAAMvhG,KAAKyhG,QACXD,GAAMxhG,KAAKyhG,SAGN7D,IAAgB59F,KAAKumD,KAAKg7C,GAAMvhG,KAAKumD,KAAKi7C,GACnD,CAKQzB,oBAAAA,CAAqBtN,EAAsBC,GACjD,MAAQqL,eAAgBpkG,GAAUpE,MAC3BmsG,EAAIC,GAAMlP,GACVmP,EAAIC,GAAMnP,EACXoP,EAASnoG,EAAMkoG,EAAID,GAGzB,IAAIpB,EAAWjrG,KAAKqpG,cAAckD,GAE9BJ,IAAOE,GAAMD,IAAOE,IAEtBrB,GAAYxgG,KAAKyhG,SAMnB,MAAO,IAAOjB,EAAW,IAHTjrG,KAAKipG,QAAQsD,GAGa,IAFxBvsG,KAAK2rG,sBAAsBQ,EAAIC,EAAIC,EAAIC,EAG3D,CAOQjC,kBAAAA,CAAmBt1E,GACzB,MAAM,MAAElE,EAAK,OAAEyC,GAAWtzB,KACpB8hC,EAAuB,GAEvB0qE,EAAK/hG,KAAK6iC,IAAIvY,EAAM,GAAK,EAAG,GAC5B03E,EAAKhiG,KAAK6iC,IAAIvY,EAAM,GAAK,EAAG,GAC5B23E,EAAKjiG,KAAK8U,IAAIwV,EAAM,GAAK,EAAGlE,EAAQ,GACpC87E,EAAKliG,KAAK8U,IAAIwV,EAAM,GAAK,EAAGzB,EAAS,GAE3C,IAAK,IAAI9hB,EAAIi7F,EAAIj7F,GAAKm7F,EAAIn7F,IACxB,IAAK,IAAID,EAAIi7F,EAAIj7F,GAAKm7F,EAAIn7F,IACpBA,IAAMwjB,EAAM,IAAMvjB,IAAMujB,EAAM,IAChC+M,EAAKjkC,KAAK,CAAC0T,EAAGC,IAKpB,OAAOswB,CACT,CAcO,qCAAO8qE,CACZC,EACAh8E,EACAyC,EACAk/B,GAEA,MAAMu2C,EAAY8D,EAAUltG,OACtB4oG,EAAqB,IAAIhlF,aAAawlF,IACpCx7C,MAAOu/C,EAAet/C,MAAOu/C,GAAkBv6C,EACjDw6C,EAAaD,EAAgBD,EAEnC,IAAK,IAAIv/F,EAAI,EAAGorE,EAAMk0B,EAAUltG,OAAQ4N,EAAIorE,EAAKprE,IAE/Cg7F,EAAmBh7F,GAAK9C,KAAK6iC,IAC3B,EACA7iC,KAAK8U,IAAI,GAAIstF,EAAUt/F,GAAKu/F,GAAiBE,IAIjD,OAAO,IAAI1E,GAAiBC,EAAoB13E,EAAOyC,EACzD,CASO,sCAAO25E,CACZC,EACAr8E,EACAyC,GAEA,MAAMy1E,EAAYmE,EAAcvtG,OAAS,EACnC4oG,EAAqB,IAAIhlF,aAAawlF,GAM5C,IAAK,IAAIx7F,EAAI,EAAGwZ,EAAS,EAAGxZ,EAAIw7F,EAAWx7F,IAAKwZ,GAAU,EAAG,CAC3D,MAAMomF,EAAMD,EAAcnmF,GACpBqmF,EAAQF,EAAcnmF,GACtBsmF,EAAOH,EAAcnmF,GAE3BwhF,EAAmBh7F,GAPC,oBAOK4/F,EAAMC,EAAQC,E,CAGzC,OAAO,IAAI/E,GAAiBC,EAAoB13E,EAAOyC,EACzD,EC/jBI,MAAOg6E,GAgBX/qG,WAAAA,CACEgrG,EACAC,GAEAxtG,KAAKsiB,WAAairF,EAAkBA,EAAgB9vF,QAAU,GAC9Dzd,KAAKytG,qBAAuBD,EACxBA,EAA4B/vF,QAC5B,EACN,CAQOiwF,QAAAA,CAAStpG,GACd,OAAOpE,KAAKsiB,WAAWle,EACzB,CAOOupG,YAAAA,GACL,OAAO3tG,KAAKsiB,WAAWtiB,KAAKsiB,WAAW3iB,OAAS,EAClD,CAQOiuG,cAAAA,CAAe74E,GACpB,MAAM3wB,EAAQpE,KAAKsiB,WAAWmZ,QAAQ1G,GACtC,IAAe,IAAX3wB,EACF,OAAqD,IAA9CpE,KAAKytG,qBAAqBhyE,QAAQr3B,GAEzC,MAAM,IAAItB,MAAM,uDAEpB,CAOO8Z,QAAAA,CAASmY,GACd/0B,KAAKsiB,WAAWzkB,KAAKk3B,EACvB,CAOO86D,eAAAA,CAAgB96D,GACrB,MAAM3wB,EAAQpE,KAAKsiB,WAAWmZ,QAAQ1G,GAEtC,IAAe,IAAX3wB,EAGF,MAAM,IAAItB,MAAM,wDAFhB9C,KAAKytG,qBAAqB5vG,KAAKuG,EAInC,CAEO0sF,gBAAAA,GACL,OAAO9wF,KAAKytG,qBAAqBngG,KAAKC,GAAMvN,KAAKsiB,WAAW/U,IAC9D,CAEOsgG,mBAAAA,GACL,OAAO7tG,KAAKytG,qBAAqB9tG,MACnC,CAEOmuG,sBAAAA,GACD9tG,KAAKytG,qBAAqB9tG,QAC5BK,KAAKytG,qBAAqBpyD,KAE9B,CAOO0yD,SAAAA,CAAUC,GACfhuG,KAAKsiB,WAAatiB,KAAKsiB,WAAW4D,OAAO8nF,EAC3C,CAOOC,WAAAA,CAAYC,GACjB,MAAMC,EAAYD,EAAM5rF,WAAW3iB,OAC7ByuG,EAA8B,GAEpCpuG,KAAKsiB,WAAa4rF,EAAM5rF,WAAW4D,OAAOlmB,KAAKsiB,YAE/C,IAAK,IAAI/U,EAAI,EAAGA,EAAIvN,KAAKytG,qBAAqB9tG,SAAU4N,EACtD6gG,EAAkB7gG,GAAKvN,KAAKytG,qBAAqBlgG,GAAK4gG,EAGxDnuG,KAAKytG,qBACHS,EAAMT,qBAAqBvnF,OAAOkoF,EACtC,ECnFF,MAAMC,WAA4BprE,GAsBhC1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbgzD,2BAA2B,KAI/B18C,MAAMzW,EAAWC,GAXnB,KAAAqzD,sBAAuB,EAsBvB,KAAAna,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,GAC3B2E,MAAOg7B,EAAUj7B,OAAQ8pE,GAAcnpE,EAEzC3F,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAC/B7f,EAAexY,EAASyY,kBAE9B,IAAKD,IAAiBtJ,GAAAA,UAAAA,aAAqBsJ,GACzC,MAAM,IAAIlc,MAAM,wCAGlB,MAAMwrG,EAAoB9nG,EAAS8nB,gBAC3B0a,UAAWkB,GAAiBokE,EACpC,IAAIC,EACAC,EACAv7D,EACApiB,EACAyC,EAEJ,GAAI9sB,aAAoB0V,GAAAA,cACtB+2B,EAAaq7D,EAAkBr7D,WAC/BpiB,EAAQy9E,EAAkBjkE,WAAW,GACrC/W,EAASg7E,EAAkBjkE,WAAW,GAMtCkkE,EAAgBx5E,IACd,MAAM05E,EAAW/4F,GAAAA,UAAAA,sBAA8Bw0B,EAAcnV,GAC7D,MAAO,CAAC05E,EAAS,GAAIA,EAAS,GAAG,EAOnCD,EAAgBz5E,GACdrf,GAAAA,UAAAA,sBAA8Bw0B,EAAc,CAACnV,EAAM,GAAIA,EAAM,GAAI,QAC9D,MAAIvuB,aAAoB24B,GAAAA,gBA6B7B,MAAM,IAAIr8B,MAAM,0BA7B6B,CAC7C,MAAM4rG,EAAiBh5F,GAAAA,UAAAA,8BAAsClP,IACvD,mBAAEmoG,EAAkB,mBAAEC,GAAuBF,EAEnDH,EAAgBx5E,IACd,MAAM05E,EAAW/4F,GAAAA,UAAAA,sBAA8Bw0B,EAAcnV,GACvD85E,EAAa5xE,GAAAA,GAAAA,cACjB,CAAC,EAAG,EAAG,GACPwxE,EACAG,GAGF,MAAO,CAACC,EAAW,GAAIA,EAAW,GAAG,EAGvCL,EAAgBz5E,IACd,MAAM05E,EAAWxxE,GAAAA,GAAAA,cACf,CAAC,EAAG,EAAG,GACP,CAAClI,EAAM,GAAIA,EAAM,GAAI,GACrB45E,GAGF,OAAOj5F,GAAAA,UAAAA,sBAA8Bw0B,EAAcukE,EAAS,EAG9Dx7D,EAAay7D,EAAez7D,WAC5BpiB,EAAQ69E,EAAe79E,MACvByC,EAASo7E,EAAep7E,M,EAK1B,MAAM,SAAEk/B,GAAahsD,EAAS+rD,gBACxBu8C,EAAWP,EAAa1rE,GAE9B7iC,KAAK+uG,SAAWzG,GAAiBsE,+BAC/B35D,EACApiB,EACAyC,EACAk/B,GAGFxyD,KAAK+uG,SAASnF,YAAYkF,GAE1B,MAAME,EAAgB,IAAI1B,GACpB2B,EAAc,IAAI3B,GAExB0B,EAAcpyF,SAASkyF,GACvBE,EAAcnf,gBAAgBif,GAE9B,MAAMzxG,EAAwC,CAC5C2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJm+E,SAAU,GACVh7D,QAAS,CACPtyB,OAAQ,CAAC,IAAI43B,IACbW,kBAAmB,QAKzBx/B,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAoBP,OAjBAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAqpC,eAAe,EACfM,UAAU,EACV7Z,gBAAiB8Q,EACjBs9B,cAAeA,EACfC,YAAaA,EACbnyC,QAAQ,EACRyxC,eACAC,gBAGFxuG,KAAK0qD,cAAc/nD,GACnBM,EAAIyF,iBACJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EACfssG,EAAmBlrE,EAAYA,EAC/Bm8B,EAAe9iE,EAAW+c,KAAKm+E,SAASjrF,KAAK8nC,GACjD5uC,EAAS29B,cAAciR,KAGzB,IAAI8U,EAAaiW,EAAaA,EAAaxgE,OAAS,GAEpD,IAAK,IAAI4N,EAAI,EAAGA,EAAI4yD,EAAaxgE,OAAQ4N,IAAK,CAC5C,MAAM2iF,EAAW/vB,EAAa5yD,GAO9B,GAN+B40D,GAC7BjY,EACAgmC,EACA7sD,IAG4B6rE,EAC5B,OAAO,EAGThlD,EAAagmC,C,CAGf,OAAO,CAAK,EAGd,KAAA3pB,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,uBAGF,MAAMluC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B5C,KAAKomE,gBAAgBzjE,GACrBgjE,GAAsCvqD,EAAiB01B,GACvD7tC,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,KAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,MAAM,OAAE/2B,GAAWmP,EAAKmjB,QAClB28C,EAAcjvE,EAAO5G,WAAW+wC,GAAMA,IAAMniB,IAG5C6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,eAEFl6E,KAAKomE,gBAAgBzjE,GAErB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAGtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjB+c,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBACnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAK+uG,SAAW,KAChB/uG,KAAKo6E,WAAY,CAAK,EAGhB,KAAAwe,mBAAsB31F,IAC5B,MAAM41F,EAAc51F,EAAIkJ,OAASrP,GAAOsL,oBAClC,WAAE/K,EAAU,oBAAEyzC,EAAmB,aAAEy9D,EAAY,aAAEC,GACrDxuG,KAAK8rD,SAEP,GAAI9rD,KAAK8rD,SAASgR,OAChB,OAGF,MAAM55D,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,GAClB0E,OAAQ8pE,EAAW7pE,MAAOg7B,GAAat6B,EACzC3F,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAChC4sF,EAAgBxvF,KAAK8rD,SAASmjD,YAAYne,mBAChD,IAAIqe,EAAY3f,EAAc7vF,QAAU,GAAKk5F,EAG7C,GAAIrJ,EAAc7vF,QAAU,EAAG,CAC7B,MAAMyvG,EAAqB,CACzBhrG,OAAQ,EACRirG,YAAav6D,KAIf,IAAK,IAAIvnC,EAAI,EAAGorE,EAAM6W,EAAc7vF,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACxD,MACM+hG,EAAoBd,EADLhf,EAAcjiF,IAI7B8hG,EAAcltC,GAClBuP,EAHyBlrE,EAAS29B,cAAcmrE,IAQhDD,GA5XyB,KA6XzBA,EAAcD,EAAmBC,cAEjCD,EAAmBC,YAAcA,EACjCD,EAAmBhrG,MAAQmJ,E,CAIE,IAA7B6hG,EAAmBhrG,QACrB+qG,GAAY,E,CAIhBnvG,KAAK8rD,SAASgR,OAAS98D,KAAK8rD,SAASgR,QAAUqyC,EAC/CnvG,KAAK8rD,SAASkjD,cAAgBhvG,KAAK8rD,SAASmjD,YAG5CjvG,KAAK8rD,SAASkjD,cAAcnf,gBAC1B7vF,KAAK8rD,SAASmjD,YAAYtB,gBAI5B3tG,KAAK+uG,SAASnF,YAAY2E,EAAa1rE,IAEvCxlC,EAAWkG,aAAc,EACzBoiE,GAAsCvqD,EAAiB01B,GAEnD9wC,KAAK8rD,SAASgR,SAEhB98D,KAAKuvG,kBAAkB5sG,EAAS3C,KAAK8rD,SAASkjD,eAC9ChvG,KAAKkrD,aAAajoD,IAGpBA,EAAIyF,gBAAgB,EAGd,KAAAiwF,mBAAsB11F,IAC5B,MAAM,QAAEN,EAAO,cAAE4F,GAAkBtF,EAAI1F,QAC/BsK,MAAOg7B,EAAUj7B,OAAQ8pE,GAAcnpE,GACzC,gBAAE6S,IAAoBvY,EAAAA,GAAAA,mBAAkBF,GACxCmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAS8U,gBAAkB8Q,EAEhC,MAAQ7gD,MAAO2+E,EAAUl8E,OAAQm8E,GAAczvG,KAAK+uG,UAC9C,aAAER,GAAiBvuG,KAAK8rD,SACxB+iD,EAA2BN,EAAa1rE,GAG9C,GACEgsE,EAAW,GAAK,GAChBA,EAAW,GAAK,GAChBA,EAAW,IAAMW,GACjBX,EAAW,IAAMY,EAEjB,OAGF,MAAM/E,EAAa1qG,KAAK+uG,SAAShF,gBAAgB8E,GAC3CI,EAAc,IAAI3B,GAExB,IAAK,IAAI//F,EAAI,EAAGorE,EAAM+xB,EAAW/qG,OAAQ4N,EAAIorE,EAAKprE,IAChD0hG,EAAYryF,SAAS8tF,EAAWn9F,IAMlC0hG,EAAYhB,YAAYjuG,KAAK8rD,SAASkjD,eAGtChvG,KAAK8rD,SAASmjD,YAAcA,EAE5BtpC,GAAsCvqD,EAAiB01B,GACvD7tC,EAAIyF,gBAAgB,EAGd,KAAAuiD,cAAiBhoD,IACvBjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,GAAgBl6E,KAAK8rD,UACxD,KAAE1xC,GAAS/c,EAEjB,QAAoBiG,IAAhB42E,EAA2B,CAE7B,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKm+E,SAEbr6F,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,IAAK3C,KAAKo6E,UACR,OAGFp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,SAE5DquB,GACFl2E,GAAiB5G,EAAW8C,eAG9B,MAAMyC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAM5B,OAJA+iE,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK8rD,SAAW,KAChB9rD,KAAK+uG,SAAW,KACT1xG,EAAW8C,aAAa,EAMjC,KAAA64F,0BAA4B,CAC1B37F,EACAuF,KAEA,MAAM,WAAEmF,EAAU,kBAAEC,GAAsBpF,EACpCy3E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,sBAGFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EAAY,EAG3C,KAAAkjE,gBAAmBzjE,IACzBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAGvD,KAAA4iB,kBAAqBnrE,IAC3BgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAG1D,KAAAR,cAAiB/nD,IACvBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAK24F,oBACjDh2F,EAAQqC,iBAAiBlI,GAAO8L,WAAY5I,KAAK44F,oBACjDj2F,EAAQqC,iBACNlI,GAAOsL,mBACPpI,KAAK44F,oBAGPj2F,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAK44F,mBAAmB,EAG7D,KAAAztC,gBAAmBxoD,IACzBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAK24F,oBACpDh2F,EAAQ2H,oBAAoBxN,GAAO8L,WAAY5I,KAAK44F,oBACpDj2F,EAAQ2H,oBACNxN,GAAOsL,mBACPpI,KAAK44F,oBAGPj2F,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAK44F,mBAAmB,EAWxE,KAAA58D,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,cAAEuhC,GAAkB39B,GACpB,QAAE7D,GAAY6D,EAGpB,IAAKA,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAIpkE,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM2S,EAAgBn6E,KAAK8rD,UAAUquB,cAC/Bv4C,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItCrb,KAAKuvG,kBAAkB5sG,EAAS3C,KAAK8rD,UAAUmjD,aAE/C,IAAK,IAAI1hG,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,QAAEkgC,GAAYnjB,GACd,OAAEnP,GAAWsyB,EAEnBqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SACrB,YACApB,EACAvkC,GAEI0zB,EAAW/wB,KAAKgjC,SACpB,WACApB,EACAvkC,GAEI0mB,EAAQ/jB,KAAKgjC,SACjB,QACApB,EACAvkC,GAGI00B,EAAoB9mB,EAAOqC,KAAK8nC,GACpCjR,EAAciR,KAGhB,IAAKvzC,GAAoB1B,GACvB,SAMF,GACEg6E,GACA98E,EAAW8C,gBAAkBH,KAAK8rD,UAAUzuD,YAAY8C,cACxD,CAEAksE,GACEv8C,EACA3vB,EAHqB,IAKrB,CAAC4xB,EAAkB,IACnB,CACEhO,QACAgN,WACAD,a,CASNsoE,GACEtpE,EACA3vB,EACA,WAPqBia,EAAKm+E,SAASjrF,KAAKwrF,GACxCtyF,EAAS29B,cAAc20D,KAQvB,CACE/0E,QACAgN,WACAD,cAIJ02C,GAAe,EACfnqE,EAAWkG,aAAc,C,CAG3B,OAAOikE,CAAY,CAzqBrB,CA4qBQ+nC,iBAAAA,CACN5sG,EACA+sG,GAEA,IAAK1vG,KAAK8rD,WAAa4jD,EACrB,OAGF,MAAQptF,WAAYqtF,GAAgBD,EAC9BE,EAAsC,IACtC,aAAEpB,GAAiBxuG,KAAK8rD,SAE9B,IAAK,IAAIv+C,EAAI,EAAGorE,EAAMg3B,EAAYhwG,OAAQ4N,EAAIorE,EAAKprE,IAAK,CACtD,MACMurF,EAAa0V,EADAmB,EAAYpiG,IAE/BqiG,EAAoB/xG,KAAKi7F,E,CAGvB8W,EAAoBjwG,OAAS,GAC/BiwG,EAAoB/xG,KAAK,IAAI+xG,EAAoB,KAGnD5vG,KAAK8rD,SAASzuD,WAAW+c,KAAKm+E,SAAWqX,CAC3C,EAGFvB,GAAoB1tG,SAAW,kBAC/B,YCpuBA,MAAMkvG,WAA0B5sE,GAiB9B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR87E,mBACAC,sBACAnwB,2BAA2B,EAC3BowB,YAAY,KAIhB9sE,MAAMzW,EAAWC,GAWnB,KAAAk5C,iBACE3iE,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtCimD,GAAkBlmD,GAClB3C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,IAGI,WAAEktE,GAAehwG,KAAK4sB,cACtB7pB,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJ+a,KAAM,GACNoI,QAAS,CACPtyB,OAAQ,CAAe,IAAI43B,GAAyB,IAAIA,IACxDW,kBAAmB,KACnBwsE,aACAx3E,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,KAIXhW,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GACV+N,EAAQi6D,GAAUjrD,EAAKmjB,QAAQtyB,OAChCs6E,EAAe/+E,EAAS29B,cAAc/4B,GACtCo6E,EAAeh/E,EAAS29B,cAAckhC,GAEtC+F,EAAO,CACXv3C,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAUpB,OANwBzjB,GACtB,CAACqJ,EAAKv3C,MAAMtiB,EAAG65D,EAAKv3C,MAAMriB,GAC1B,CAAC45D,EAAKt3C,IAAIviB,EAAG65D,EAAKt3C,IAAItiB,GACtB,CAAC6xB,EAAa,GAAIA,EAAa,MAGVW,CAIX,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjBzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EA+CtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EAGpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,EAAU,kBAAEC,EAAiB,gBAAEoT,GAAoBxY,EAS3D,GANE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG1Bg6E,EACFn6E,KAAK4sB,cAAckjF,iBAAiB36E,IAClC,IAAKA,EAQH,OAPAlxB,GAAiB5G,EAAW8C,eAC5BwlE,GACEvqD,EACA01B,GAEF9wC,KAAK8rD,SAAW,UAChB9rD,KAAKo6E,WAAY,GAGnB/8E,EAAW+c,KAAK+a,KAAOA,EAEvB,MAAMklD,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAErCyiE,GACEvqD,EACA01B,EACD,QAEE,CACL,MAAMupC,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,sBAGFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAGxB,KAAAnvB,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAm/D,iBAAoBhtG,IACK,GAAnBA,EAAI1F,OAAOkT,MACbzQ,KAAKkwG,oBAAoBjtG,E,EAI7B,KAAAitG,oBAAuBjtG,IACrB,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACpB,IAAIE,EAAcK,GAAezD,KAAKotB,cAAezqB,GAOrD,GALAS,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAGF,MAAMwwG,EAAoB/sG,EAAY+S,MAAM9Y,GAC1C2C,KAAK+kC,gBACHpiC,EACAtF,EACA6F,EAAYqF,cAAcX,OAC1B,KAIJ,IAAKuoG,EACH,OAGF,MAAM9yG,EAAa8yG,EAEnBnwG,KAAK4sB,cAAcmjF,mBACjBI,EACAltG,EAAI1F,OACJyC,KAAKowG,0BAA0B3jG,KAAKzM,KAAM2C,EAAStF,IAGrD2C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAMjBn3E,EAAIwF,2BACJxF,EAAIyF,gBAAgB,EAyBtB,KAAA6kC,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAIvC,OADAlD,KAAK8rD,SAAW,KACTzuD,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAA6iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,aACN,EAGH,KAAAR,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAE,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,EAWH,KAAAjvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,QAAEkgC,EAAO,KAAEpI,GAAS/a,GACpB,OAAEnP,EAAM,kBAAEu4B,GAAsBjG,EAEtCqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnE,IAAI0lC,EAWJ,GARGv8E,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB4xB,EACA,CACEhO,QACA+M,a,CAKN,MAAMuI,EAAW,IAgCjB,GA/BIr5B,KAAK4sB,cAAcojF,WACrBK,GACEvgF,EACA3vB,EACAk5B,EACAtH,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,SAAUA,IAIds/E,GACEvgF,EACA3vB,EACAk5B,EACAtH,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,SAAUA,IAKhBy2C,GAAe,GAGVhhE,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,IAAKryC,EACH,SAGF,MAAMzL,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAIF,IAAKlqB,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAElC,MAAMyO,EAAsBn3D,EAAkB,GAE9C3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB,CAACg1B,GACDoD,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,CA5uBrB,CA0KAnB,sBAAAA,CACEpjE,EACA5F,EACA41B,GAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CAmLA0nG,yBAAAA,CAA0BztG,EAAStF,EAAYizG,GAC7CjzG,EAAW+c,KAAK+a,KAAOm7E,EAEvB,MAAM,gBAAEl1F,EAAe,WAAErT,EAAU,kBAAEC,IACnCnF,EAAAA,GAAAA,mBAAkBF,GAEdmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAEPu4C,GAAsCvqD,EAAiB01B,GAGvD,MAAMupC,EAAYv9E,GAAOyhC,qBAEzB1+B,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAW,CACnCh9E,aACA0K,aACAC,qBAEJ,CAoVAkiF,eAAAA,CAAgBJ,EAAQC,EAAQ1/C,GAC9B,OACE30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,EAE1C,EAGF,SAASylE,GAAgBS,GACvB,OAAOA,EAAyBC,OAAO,0BACzC,CAEA,SAAST,GAAmB31F,EAAMuvB,EAAW4mE,GAC3C,OAAOA,EAAyBC,OAAO,0BACzC,CAEAX,GAAkBlvG,SAAW,gBAC7B,YC9xBA,MAAM8vG,WAAkBxtE,GAkBtB1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAiBnB,KAAAk5C,iBACE3iE,IAEA,GAAIjD,KAAK0wG,4BACP,OAGF1wG,KAAK0wG,6BAA8B,EACnC,MAAMxtG,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAE7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtCimD,GAAkBlmD,GAClB3C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAAe,IAAI43B,GAAyB,IAAIA,IACxDW,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,GACPF,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GACV+N,EAAQi6D,EAAQE,GAAUnrD,EAAKmjB,QAAQtyB,OACxCs6E,EAAe/+E,EAAS29B,cAAc/4B,GACtCo6E,EAAeh/E,EAAS29B,cAAckhC,GAEtC1Q,EAAQ,CACZ9gC,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAUpB,GANwBzjB,GACtB,CAACpN,EAAM9gC,MAAMtiB,EAAGojD,EAAM9gC,MAAMriB,GAC5B,CAACmjD,EAAM7gC,IAAIviB,EAAGojD,EAAM7gC,IAAItiB,GACxB,CAAC6xB,EAAa,GAAIA,EAAa,MAGVW,EACrB,OAAO,EAET,IAAKuhC,EACH,OAAO,EAGT,MAAMorC,EAAenqG,EAAS29B,cAAcohC,GAEtC3Q,EAAQ,CACZ/gC,MAAO,CACLtiB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,IAElB1xD,IAAK,CACHviB,EAAGo/F,EAAa,GAChBn/F,EAAGm/F,EAAa,KAUpB,OANyB5uC,GACvB,CAACnN,EAAM/gC,MAAMtiB,EAAGqjD,EAAM/gC,MAAMriB,GAC5B,CAACojD,EAAM9gC,IAAIviB,EAAGqjD,EAAM9gC,IAAItiB,GACxB,CAAC6xB,EAAa,GAAIA,EAAa,MAGTW,CAIZ,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,KAEA,MAAM6F,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,GAGjBzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EA+CtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UAED,KAAE1xC,GAAS/c,EACjB,GAAI88E,IAAkBM,EAGpB,OAKF,GAAIz6E,KAAK0wG,6BAA8D,IAA/Bt2F,EAAKmjB,QAAQtyB,OAAOtL,OAG1D,YADAK,KAAK8rD,SAASouB,YAAc,GAI9Bl6E,KAAK0wG,6BAA8B,EACnCt2F,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAGxB,KAAAnvB,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAKvC,OAFAlD,KAAK8rD,SAAW,KAChB9rD,KAAK0wG,6BAA8B,EAC5BrzG,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAA6iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAP,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAE,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,EAWH,KAAAjvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EAEnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QAE3CqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAoBnE,IAAI0lC,EAYJ,GA5BG1gE,EAAKN,YAAYmU,IACkB,MAApC7T,EAAKN,YAAYmU,GAAUqE,MAOlBj1B,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACA+d,EACAxY,IATFwX,EAAKN,YAAYmU,GAAY,CAC3BqE,MAAO,MAGTtyB,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,IAYvDrE,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,MAI3Ch9B,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,GAAIsT,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB4xB,EACA,CACEhO,QACAgN,WACAD,a,CAKN,IAAI8C,EAAU,IAiBd,GAhBA63C,GACE37C,EACA3vB,EACAyzB,EACA7B,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,aAIJy2C,GAAe,EAGkB,IAA7Bz1C,EAAkBpyB,OACpB,OAAO6nE,EAkBT,GAfA5zC,EAAU,IAEV63C,GACE37C,EACA3vB,EACAyzB,EACA7B,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAOC,EACPC,cAIC3W,EAAKN,YAAYmU,IAAWqE,MAC/B,SAGF,MAAM5I,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GAExD,IAAK7T,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAElC,MAAMyO,EAAsBn3D,EAAkB,GAE9C3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EA/sBnBxnE,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CAwMAo6B,sBAAAA,CACEpjE,EACA5F,EACA41B,GAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CA2dAqgF,qBAAAA,CAAsB1rF,EAAY+d,EAAiBxY,GACjD,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,EAG1C,GAAmC,IAA/BwX,EAAKmjB,QAAQtyB,OAAOtL,OACtB,OAGF,MAAM2pF,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,GAChCu+E,EAAYpvE,EAAKmjB,QAAQtyB,OAAO,IAEhC,YAAE6O,GAAgBM,EAClBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GACrB+kB,EAAQoiC,GACZ,CAAC40B,EAAWC,GACZ,CAACA,EAAWC,IAGd1vE,EAAYmU,GAAY,CACtBqE,MAAOyB,MAAMzB,GAAS,mBAAqBA,E,CAI/Cj1B,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CACT,EAGF,SAASwrE,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,MAAEqE,GAAUi4D,EAElB,QAAcjnF,IAAVgvB,EACF,OAKF,MAFkB,CAAC,GAAGmkB,GAAYnkB,MAAU2L,OAAO2yE,aAAa,OAGlE,CAEAH,GAAU9vG,SAAW,QACrB,YCx1BMkwG,GAAWA,IACZvkE,KAEH,MAAMy7D,EACe,IAAnBz7D,EAAK,GAAG3sC,OAA6B,CAAC,EAAG,GAAmB,CAAC,EAAG,EAAG,GAC/Dg5E,EAAMrsC,EAAK3sC,OACjB,IAAK,MAAMmxG,KAAOxkE,EAChBy7D,EAAI,IAAM+I,EAAI,GAAKn4B,EACnBovB,EAAI,IAAM+I,EAAI,GAAKn4B,EACA,IAAfovB,EAAIpoG,SACNooG,EAAI,IAAM+I,EAAI,GAAKn4B,GAGvB,OAAOovB,CAAG,EAGNgJ,GAAYF,GCgClB,MAAMG,WAAsB/tE,GAoB1B1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,MAIlBpiD,MAAMzW,EAAWC,GAiBnB,KAAAk5C,iBACE3iE,IAEA,GAAIjD,KAAK0wG,4BACP,OAGF1wG,KAAK0wG,6BAA8B,EACnC,MAAMxtG,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtCimD,GAAkBlmD,GAClB3C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAAe,IAAI43B,GAAyB,IAAIA,IACxDW,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,GACPF,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GAEX,gBAAE8+D,EAAe,iBAAEuT,GAAqB1vE,KAAKixG,gBAAgB,CACjEzqG,WACAyE,OAAQmP,EAAKmjB,QAAQtyB,OACrBo4B,eACAW,cAGF,OAAIm4B,GAAmBn4B,GAAa0rC,GAAoB1rC,CAI5C,EAGd,KAAAuiC,qBAAuB,CACrBtjE,EACA5F,EACAwP,EACAw2B,EACAW,EAAY,KAEZ,MAAM9gC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpB7F,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGDxqB,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAEhC,gBAAEsuG,EAAe,iBAAEC,GAAqBnxG,KAAKixG,gBAAgB,CACjEzqG,WACAyE,OAAQ5N,EAAW+c,KAAKmjB,QAAQtyB,OAChCo4B,eACAW,cAGFhkC,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACA20C,eAAe,EACfyrB,kBACAC,oBAGFnxG,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElBgjE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBAAgB,EAgDtB,KAAA0oG,iBACEnuG,IAEA,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UAED,KAAE1xC,GAAS/c,EACjB,GAAI88E,IAAkBM,EAGpB,OAKF,GAAIz6E,KAAK0wG,6BAA+Bt2F,EAAKmjB,QAAQtyB,OAAOtL,OAAS,EAKnE,OAJAipD,GAAmBjmD,QAGnB3C,KAAK8rD,SAASouB,YAAc9/D,EAAKmjB,QAAQtyB,OAAOtL,QAIlDK,KAAK0wG,6BAA8B,EACnCt2F,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EASxB,KAAAwe,mBACE31F,IAEA,MAAM,WAAE5F,EAAU,YAAE68E,GAAgBl6E,KAAK8rD,SACnC5oD,EAAcD,EAAI1F,QAClB,QAAEoF,EAAO,cAAE4F,GAAkBrF,EAC7B2/B,EAAWt6B,EAAcV,OACzB,KAAEuS,GAAS/c,EAEjB,OAAoB,IAAhB68E,GAGF9/D,EAAKmjB,QAAQtyB,OAAO,GAAK43B,OACzB7iC,KAAK8rD,SAAS2uB,SACZrgE,EAAKmjB,QAAQtyB,OAAO,GAAG,KAAOmP,EAAKmjB,QAAQtyB,OAAO,GAAG,IACrDmP,EAAKmjB,QAAQtyB,OAAO,GAAG,KAAOmP,EAAKmjB,QAAQtyB,OAAO,GAAG,KAIrC,IAAhBivE,GAEF9/D,EAAKmjB,QAAQtyB,OAAO,GAAK43B,EACzB7iC,KAAK8rD,SAAS2uB,SACZrgE,EAAKmjB,QAAQtyB,OAAO,GAAG,KAAOmP,EAAKmjB,QAAQtyB,OAAO,GAAG,IACrDmP,EAAKmjB,QAAQtyB,OAAO,GAAG,KAAOmP,EAAKmjB,QAAQtyB,OAAO,GAAG,QAEvDjL,KAAK0wG,6BAA8B,KAMrC1wG,KAAK8rD,SAAS2uB,UAAW,EACzB5xB,GAAkBlmD,GAGlByX,EAAKmjB,QAAQtyB,OAAO,GAAKmP,EAAKmjB,QAAQtyB,OAAO,GAAK43B,OAClD7iC,KAAK8rD,SAASouB,YAAc9/D,EAAKmjB,QAAQtyB,OAAOtL,OAAS,GAAC,EAG5D,KAAAi0E,mBACE3wE,IAEAjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WACJ7F,EAAU,oBACVyzC,EAAmB,YACnBopC,EAAW,cACXuL,EAAa,gBACbyrB,EAAe,iBACfC,GACEnxG,KAAK8rD,UACH,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QACWn3E,IAAhB42E,IACCg3B,GAAmBC,GACpB,CAEA,MAAM,YAAE3oG,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAC5BoD,EAASmP,EAAKmjB,QAAQtyB,OAG5B,GAAIimG,EAAiB,CACK,CAACjmG,EAAO,GAAIA,EAAO,IAC3B/M,SAAS62B,IACvBA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,G,MAEzB,GAAI22B,EAAkB,CACF,CAAClmG,EAAO,GAAIA,EAAO,IAC3B/M,SAAS62B,IACxBA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,G,CAIhCn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,IAAK3C,KAAKo6E,UACR,OAGFp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEb+c,EAAKmjB,QAAQtyB,OAAOtL,OAAS,GAE/BsE,GAAiB5G,EAAW8C,eAG9B9C,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAI5B,GAFA+iE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAKvC,OAFAlD,KAAK8rD,SAAW,KAChB9rD,KAAK0wG,6BAA8B,EAC5BrzG,EAAW8C,aAAa,EAGjC,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKoxG,kBAEPzuG,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAK4zE,oBAEPjxE,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKoxG,iBACN,EAMH,KAAAtjC,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKoxG,kBAEPzuG,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAK4zE,oBAEPjxE,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKoxG,iBACN,EAMH,KAAA1mD,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKoxG,kBAEPzuG,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAK4zE,oBAEPjxE,EAAQqC,iBACNlI,GAAO6L,WACP3I,KAAK4zE,oBAEPjxE,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKoxG,kBAEPzuG,EAAQqC,iBACNlI,GAAO8L,WACP5I,KAAK44F,mBACN,EAMH,KAAAztC,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKoxG,kBAEPzuG,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAK4zE,oBAEPjxE,EAAQ2H,oBACNxN,GAAO6L,WACP3I,KAAK4zE,oBAEPjxE,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKoxG,kBAEPzuG,EAAQ2H,oBACNxN,GAAO8L,WACP5I,KAAK44F,mBACN,EAcH,KAAA58D,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EAEnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QAE3CqE,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAwCnE,IAAI0lC,EAYJ,GAhDG1gE,EAAKN,YAAYmU,IACkB,MAApC7T,EAAKN,YAAYmU,GAAUqE,MA2BlBj1B,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACA+d,EACAxY,IA7BFwX,EAAKN,YAAYmU,GAAY,CAC3BqE,MAAO,KACP++E,UAAW,KACXC,UAAW,KACXrmG,OAAQ,CACNpD,MAAO,CACL0pG,UAAW,KACXC,QAAS,KACTC,UAAW,KACXC,QAAS,KACTL,UAAW,KACXC,UAAW,MAEb1pG,OAAQ,CACN2pG,UAAW,KACXC,QAAS,KACTC,UAAW,KACXC,QAAS,KACTL,UAAW,KACXC,UAAW,QAKjBtxG,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,IAYvDrE,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,MAI3Ch9B,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAGT,GAAIsT,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB4xB,EACA,CACEhO,QACAgN,WACAD,a,CAKN,MAAMwI,EAAY,CAACvH,EAAkB,GAAIA,EAAkB,IAIrD0H,EAAa,CAAC1H,EAAkB,GAAIA,EAAkB,IAK5D,IAAI6B,EAAU,QAiBd,GAhBA63C,GACE37C,EACA3vB,EACAyzB,EACA0F,EAAU,GACVA,EAAU,GACV,CACEvV,QACA8M,MAAOC,EACPC,aAIJy2C,GAAe,EAGXz1C,EAAkBpyB,OAAS,EAC7B,OAAO6nE,EAGT5zC,EAAU,QAEV63C,GACE37C,EACA3vB,EACAyzB,EACA6F,EAAW,GACXA,EAAW,GACX,CACE1V,QACA8M,MAAOC,EACPC,aAIJ6C,EAAU,WAGV63C,GAAY37C,EAAkB3vB,EAAeyzB,EAFhCm9E,GAAUz3E,EAAU,GAAIA,EAAU,IAClCy3E,GAAUt3E,EAAW,GAAIA,EAAW,IACiB,CAChE1V,QACA+M,UAAW,IACXC,SAAU,QAKZ,MAAM,UAAEwgF,EAAS,QAAEC,EAAO,QAAEE,EAAO,UAAED,GACnCr3F,EAAKN,YAAYmU,GAAUhjB,OAAOrD,QAC9B,UAAEypG,EAAS,UAAEC,GAAcl3F,EAAKN,YAAYmU,GA8BlD,GA5BA2F,EAAU,OAEV63C,GACE37C,EACA3vB,EACAyzB,EACA29E,EACAC,EACA,CACEztF,QACA+M,UAAW,MAIf8C,EAAU,OAEV63C,GACE37C,EACA3vB,EACAyzB,EACA69E,EACAC,EACA,CACE3tF,QACA+M,UAAW,OAIV1W,EAAKN,YAAYmU,IAAWqE,MAC/B,SAGF,MAAM5I,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aAAazpB,EAAM6T,GAExD,IAAK7T,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAClC,MAAMyO,EAAsBtE,GAAuB7yD,GAEnD3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,gBAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,KAG3D,MAAMq+E,EAAiB,YAEjBC,EAAe,CACnB,GAAGP,EAAUnsE,QAAQ,MAAMjH,OAAO2yE,aAAa,QAG3CiB,EAAqBd,GAAUQ,EAAWC,GAEhD/sB,GACE30D,EACA3vB,EACAwxG,EACAC,EACAC,EACA,IACKnoF,EACHqM,QAAS,IAIb,MAAM+7E,EAAiB,YAEjBC,EAAe,CACnB,GAAGT,EAAUpsE,QAAQ,MAAMjH,OAAO2yE,aAAa,QAG3CoB,EAAqBjB,GAAUU,EAAWC,GAEhDjtB,GACE30D,EACA3vB,EACA2xG,EACAC,EACAC,EACA,IACKtoF,EACHqM,QAAS,G,CAKf,OAAOyxC,CAAY,EA2GrB,KAAAypC,gBAAkB,EAAGzqG,WAAUyE,SAAQo4B,eAAcW,gBACnD,MAAO54B,EAAQi6D,EAAQE,EAAQ0sC,GAAUhnG,EACnCs6E,EAAe/+E,EAAS29B,cAAc/4B,GACtCo6E,EAAeh/E,EAAS29B,cAAckhC,GACtCsrC,EAAenqG,EAAS29B,cAAcohC,GACtC2sC,EAAe1rG,EAAS29B,cAAc8tE,GAEtCt9C,EAAQ,CACZ9gC,MAAO,CACLtiB,EAAGg0E,EAAa,GAChB/zE,EAAG+zE,EAAa,IAElBzxD,IAAK,CACHviB,EAAGi0E,EAAa,GAChBh0E,EAAGg0E,EAAa,KAId5wB,EAAQ,CACZ/gC,MAAO,CACLtiB,EAAGo/F,EAAa,GAChBn/F,EAAGm/F,EAAa,IAElB78E,IAAK,CACHviB,EAAG2gG,EAAa,GAChB1gG,EAAG0gG,EAAa,KAId/1C,EAAkB4F,GACtB,CAACpN,EAAM9gC,MAAMtiB,EAAGojD,EAAM9gC,MAAMriB,GAC5B,CAACmjD,EAAM7gC,IAAIviB,EAAGojD,EAAM7gC,IAAItiB,GACxB,CAAC6xB,EAAa,GAAIA,EAAa,KAG3BqsC,EAAmB3N,GACvB,CAACnN,EAAM/gC,MAAMtiB,EAAGqjD,EAAM/gC,MAAMriB,GAC5B,CAACojD,EAAM9gC,IAAIviB,EAAGqjD,EAAM9gC,IAAItiB,GACxB,CAAC6xB,EAAa,GAAIA,EAAa,KAGjC,IAAI6tE,GAAkB,EAClBC,GAAmB,EAOvB,OALIh1C,GAAmBn4B,EACrBktE,GAAkB,EACTxhC,GAAoB1rC,IAC7BmtE,GAAmB,GAEd,CACLh1C,kBACAuT,mBACAwhC,kBACAC,mBACD,EAGH,KAAAgB,sBAAwB,EACtB74E,YACAG,aACA24E,OACAC,WASA,MAAMC,EAAW,CAACF,EAAMC,GAElBhB,EAAY38C,GAAkBp7B,EAAWg5E,GACzChB,EAAY58C,GAAkBj7B,EAAY64E,GAE1CC,EAAWlB,EAAY,GAAK,EAAI,EAChCmB,EAAWlB,EAAY,GAAK,EAAI,EAEhCmB,EAAc1B,GAAUuB,EAAS,GAAIA,EAAS,IAE9CI,EAAiBjoG,KAAKuE,MACzBsjG,EAAS,GAAG,GAAKA,EAAS,GAAG,KAAO,GAClCA,EAAS,GAAG,GAAKA,EAAS,GAAG,KAAO,GAEnCz+C,EAAQ,GAER8+C,EAAe5B,GAAUz3E,EAAU,GAAIA,EAAU,IACjDs5E,EAAgB7B,GAAUt3E,EAAW,GAAIA,EAAW,IAGpDo5E,EAA2B,CAC/Bv5E,EAAUi5E,GAAU,GAAKI,EAAa,GACtCr5E,EAAUi5E,GAAU,GAAKI,EAAa,IAElCG,EAAqBroG,KAAKuE,KAC9B6jG,EAAyB,IAAM,EAAIA,EAAyB,IAAM,GAE9DE,EAA+B,CACnCF,EAAyB,GAAKC,EAC9BD,EAAyB,GAAKC,GAE1BvB,EAAY,CAChBoB,EAAa,GACXI,EAA6B,GAAKL,EAAiB7+C,EACrD8+C,EAAa,GACXI,EAA6B,GAAKL,EAAiB7+C,GAIjDm/C,EAAyB,CAC7BP,EAAY,GAAKL,EAAK,GACtBK,EAAY,GAAKL,EAAK,IAElBa,EAAmBxoG,KAAKuE,KAC5BgkG,EAAuB,IAAM,EAAIA,EAAuB,IAAM,GAE1DE,EAA6B,CACjCF,EAAuB,GAAKC,EAC5BD,EAAuB,GAAKC,GAExBzB,EAAU,CACdY,EAAK,GAAKc,EAA2B,GAAKR,EAAiB7+C,EAC3Du+C,EAAK,GAAKc,EAA2B,GAAKR,EAAiB7+C,GAIvDs/C,EAA2B,CAC/B15E,EAAW+4E,GAAU,GAAKI,EAAc,GACxCn5E,EAAW+4E,GAAU,GAAKI,EAAc,IAEpCQ,EAAqB3oG,KAAKuE,KAC9BmkG,EAAyB,IAAM,EAAIA,EAAyB,IAAM,GAE9DE,EAA+B,CACnCF,EAAyB,GAAKC,EAC9BD,EAAyB,GAAKC,GAE1B3B,EAAY,CAChBmB,EAAc,GACZS,EAA6B,GAAKX,EAAiB7+C,EACrD++C,EAAc,GACZS,EAA6B,GAAKX,EAAiB7+C,GAIjDy/C,EAAyB,CAC7Bb,EAAY,GAAKJ,EAAK,GACtBI,EAAY,GAAKJ,EAAK,IAElBkB,EAAmB9oG,KAAKuE,KAC5BskG,EAAuB,IAAM,EAAIA,EAAuB,IAAM,GAE1DE,EAA6B,CACjCF,EAAuB,GAAKC,EAC5BD,EAAuB,GAAKC,GAO9B,MAAO,CACLhC,YACAC,UACAC,YACAC,QATc,CACdW,EAAK,GAAKmB,EAA2B,GAAKd,EAAiB7+C,EAC3Dw+C,EAAK,GAAKmB,EAA2B,GAAKd,EAAiB7+C,GAQ3Dw9C,UAAWA,EAAY,GAAK,IAAMA,EAAYA,EAC9CC,UAAWA,EAAY,GAAK,IAAMA,EAAYA,EAC/C,EAnmCDtxG,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,GACA,CAAE98C,UAAU,GAEhB,CA4KAo6B,sBAAAA,CACEpjE,EACA5F,EACA41B,EACApmB,EAAkB,SAElB,MAAM3J,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,IACIk4C,EADAuL,GAAgB,EAGfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAM6d,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGPptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,cACAuL,iBAEFzlF,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CAunBAqgF,qBAAAA,CAAsB1rF,EAAY+d,EAAiBxY,GACjD,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,EAG1C,GAAmC,IAA/BwX,EAAKmjB,QAAQtyB,OAAOtL,OACtB,OAGF,MAAM8zG,EAAqC,CAAC,KAAM,MAC5CC,EAAqC,CAAC,KAAM,MAClD,IAAIC,EAAUp8E,OAAOq8E,UAUrB,IAAK,IAAIrmG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1B,IAAK,IAAIwB,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC7B,MAAMmtD,EAAOj/B,GAAAA,GAAAA,SACX7iB,EAAKmjB,QAAQtyB,OAAOsC,GACpB6M,EAAKmjB,QAAQtyB,OAAO8D,IAElBmtD,EAAOy3C,IACTA,EAAUz3C,EACVu3C,EAAK,GAAKr5F,EAAKmjB,QAAQtyB,OAAOsC,GAC9BkmG,EAAK,GAAKr5F,EAAKmjB,QAAQtyB,QAAQsC,EAAI,GAAK,GACxCmmG,EAAK,GAAKt5F,EAAKmjB,QAAQtyB,OAAO8D,GAC9B2kG,EAAK,GAAKt5F,EAAKmjB,QAAQtyB,OAAO,GAAM8D,EAAI,GAAK,G,CAInD,MAAM,SAAEvI,GAAa5D,EAEfu9D,EAAe/lD,EAAKmjB,QAAQtyB,OAAOqC,KAAK8nC,GAC5C5uC,EAAS29B,cAAciR,KAGnB9b,EAAY,CAAC6mC,EAAa,GAAIA,EAAa,IAI3C1mC,EAAa,CAAC0mC,EAAa,GAAIA,EAAa,IAK5CiyC,EAAOrB,GAAUz3E,EAAU,GAAIA,EAAU,IACzC+4E,EAAOtB,GAAUt3E,EAAW,GAAIA,EAAW,KAE3C,UAAE83E,EAAS,QAAEC,EAAO,QAAEE,EAAO,UAAED,EAAS,UAAEJ,EAAS,UAAEC,GACzDtxG,KAAKmyG,sBAAsB,CACzB74E,YACAG,aACA24E,OACAC,UAGE,YAAEv4F,GAAgBM,EAClBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CAGzCuM,EAFiB4vE,EAAUn8E,IAEH,CACtB+kB,MAAOoiC,GAAkB++C,EAAMC,GAC/BrC,YACAC,YACArmG,OAAQ,CACNrD,OAAQ,CACN2pG,YACAC,UACAE,UACAD,aAEF5pG,MAAO,CACL0pG,UAAW/qG,EAASsB,cAAcypG,GAClCC,QAAShrG,EAASsB,cAAc0pG,GAChCE,QAASlrG,EAASsB,cAAc4pG,GAChCD,UAAWjrG,EAASsB,cAAc2pG,K,CAM1Cp0G,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CACT,EA8KF,SAASwrE,GAAoBlrE,EAAM6T,GACjC,MAAMs8D,EAAoBnwE,EAAKN,YAAYmU,IACrC,MAAEqE,GAAUi4D,EAElB,QAAcjnF,IAAVgvB,EACF,OAKF,MAFkB,CAAC,GAAGA,EAAM4S,QAAQ,MAAMjH,OAAO2yE,aAAa,OAGhE,CAEAI,GAAcrwG,SAAW,YACzB,aCxpCQ40C,sBAAqBA,IAAK7/B,GAAAA,UAOlC,MAAMm+F,WAAkC5wE,GAkBtC1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,EAC3B/7C,aAAcyhD,GAKdwuB,0BAA0B,KAI9B5wE,MAAMzW,EAAWC,GAgBnB,KAAAk5C,iBACE3iE,IAEA,GAAIjD,KAAK+zG,eACP,OAGF/zG,KAAK+zG,gBAAiB,EACtB,MAAM7wG,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAE7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC,KAAM4D,aAAoB0V,GAAAA,eACxB,MAAM,IAAIpZ,MACR,iEAIJ+lD,GAAkBlmD,GAClB3C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAAe,IAAI43B,GAAyB,IAAIA,IACxDW,kBAAmB,KACnBhL,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,GACPF,YAAa,CAAC,IAIlB9V,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiBP,OAdAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAcnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEO,EAuDT,KAAAknB,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,cAAEqpC,EAAa,SAAEM,GACtDz6E,KAAK8rD,UAED,KAAE1xC,GAAS/c,EACjB,GAAI88E,IAAkBM,EAGpB,OAKF,GAAIz6E,KAAK+zG,gBAAiD,IAA/B35F,EAAKmjB,QAAQtyB,OAAOtL,OAG7C,YADAK,KAAK8rD,SAASouB,YAAc,GAI9Bl6E,KAAK+zG,gBAAiB,EACtB35F,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GACrBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAW5B,GARE5C,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GAAsCvqD,EAAiB01B,GAEnDqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAGvClD,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,CAAK,EAGxB,KAAAnvB,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,EAAW,cAAEuL,GACpDzlF,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAIooF,EAAe,CAEjB,MAAM,YAAEj9E,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,OAE5B,QAAE2wB,GAAYpe,EAAKmjB,SACnB,cAAEgjD,GAAkB/nD,EAE1B+nD,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAClC+F,EAAc,IAAM/F,EAAc,GAElChiD,EAAQiiD,UAAW,C,MACd,QAAoBn3E,IAAhB42E,EAA2B,CAEpC,MAAM,YAAE1xE,GAAgBtF,EAClBs3E,EAAgBhyE,EAAYX,MAEnBuS,EAAKmjB,QAAQtyB,OAErB/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9Bn9E,EAAWkG,aAAc,C,KACpB,CAEL,MAAM,cAAEgF,GAAkBrF,EACpB2/B,EAAWt6B,EAAcV,MAE/BuS,EAAKmjB,QAAQtyB,OAAOivE,GAAe,IAAIr3C,GACvCxlC,EAAWkG,aAAc,C,CAG3BvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAvD,OAAU5qC,IAER,GAAI3C,KAAKo6E,UAAW,CAClBp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,oBAAEyzC,EAAmB,cAAEqpC,GAAkBn6E,KAAK8rD,UAC1D,KAAE1xC,GAAS/c,EAEjBA,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAO5B,GALA+iE,GACEvqD,EACA01B,GAGEqpC,EAAe,CACjB,MAAME,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,E,CAKvC,OAFAlD,KAAK8rD,SAAW,KAChB9rD,KAAK+zG,gBAAiB,EACf12G,EAAW8C,a,GAItB,KAAAimE,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAA6iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAP,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOyS,WACPvP,KAAKirD,cACN,EAGH,KAAAE,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOkM,WACPhJ,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAO6L,WACP3I,KAAKirD,eAEPtoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOyS,WACPvP,KAAKirD,cACN,EAWH,KAAAjvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EAEnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAMv5C,EAAWjuB,KAAKuuB,YAAY/nB,GAC5B4U,EAAkB5U,EAASo1B,qBAE3BgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,GAAWmP,EAAKmjB,QAExBqE,EAAezhC,cAAgBA,EAE/B,MAAM4jB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAE/C00B,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAyBnE,GArBGh7B,EAAKN,YAAYmU,IACoB,MAAtC7T,EAAKN,YAAYmU,GAAU+lF,QAWlB32G,EAAWkG,aACpBvD,KAAK8oF,+BACHzrF,EACA+d,EACAxY,IAbFwX,EAAKN,YAAYmU,GAAY,CAC3B+lF,QAAS,CAAC,EAAG,GACbC,QAAS,CAAC,EAAG,GACbC,cAAc,EACdjlE,MAAO,CAAC,IACRklE,YAAY,GAGdn0G,KAAK+oF,sBAAsB1rF,EAAY+d,EAAiBxY,KAUrD4D,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAIT,IAAIx0C,EAAiB,IAcrB,GAbAohF,GACEtkF,EACA3vB,EACA6yB,EACAjB,EAAkB,GAClB,CACEhO,SAEF,GAGFyjD,GAAe,EAEkB,IAA7Bz1C,EAAkBpyB,OACpB,OAAO6nE,EAGTx0C,EAAiB,IACjBohF,GACEtkF,EACA3vB,EACA6yB,EACAjB,EAAkB,GAClB,CACEhO,SAEF,GAKF,GAFmB3J,EAAKN,YAAYmU,GAAUkmF,WA+DvC,CAEL,MAAMxjF,EAAS,GAAGxwB,WAElBsrE,GACE37C,EACA3vB,EAHc,IAKd4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACA8M,MAAO,EACPmD,OAAQh0B,KAAK4sB,cAAcoH,QAE7BrD,E,KA5Ea,CACf,MAAM40D,EAAexzD,EAAkB,GACjCyzD,EAAezzD,EAAkB,GAEjCsiF,EAAe7uB,EAAa,GAAKD,EAAa,GAC9C+uB,EAAe9uB,EAAa,GAAKD,EAAa,GAQpD,IAAIgvB,EAAuB,CAAC,EAAG,GAE7BA,EARmBn6F,EAAKN,YAAYmU,GAAUimF,aAQvB,CACrB3uB,EAAa,GAAK+uB,EAClB/uB,EAAa,IAGQ,CACrBA,EAAa,GACbA,EAAa,GAAK8uB,GAKtB,IAAI1jF,EAAS,GAAGxwB,WACZyzB,EAAU,IACd63C,GACE37C,EACA3vB,EACAyzB,EACA7B,EAAkB,GAClBwiF,EACA,CACExwF,QACA8M,MAAO,EACPmD,OAAQh0B,KAAK4sB,cAAcoH,QAE7BrD,GAIFA,EAAS,GAAGxwB,WACZyzB,EAAU,IAEV63C,GACE37C,EACA3vB,EACAyzB,EACA7B,EAAkB,GAClBwiF,EACA,CACExwF,QACA8M,MAAO,EACPE,SAAU,CAAC,EAAG,GACdiD,OAAQh0B,KAAK4sB,cAAcoH,QAE7BrD,E,CAuBJ,MAAMjH,EAAU1pB,KAAKykC,sBAAsB7C,EAAgBvkC,GAC3D,IAAKqsB,EAAQlO,WAAY,CACvBpB,EAAKmjB,QAAQ/E,QAAU,CACrBiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,KAGtC,Q,CAGF,MAAMzO,EAAY71B,KAAK4sB,cAAciX,aACnCzpB,EACA6T,EACAjuB,KAAK4sB,eAGP,IAAKxS,EAAKmjB,QAAQ/E,QAAQiiD,SAAU,CAElC,MAAMyO,EAAsBn3D,EAAkB,GAE9C3X,EAAKmjB,QAAQ/E,QAAQ+nD,cACnB/5E,EAASsB,cAAcohF,E,CAG3B,MAAM3wD,EAAkB/xB,EAAS29B,cAC/B/pB,EAAKmjB,QAAQ/E,QAAQ+nD,eAIjBtoD,EAAckxD,GAClBr5D,EACA3vB,EAHiB,IAKjB01B,EACA0C,EACAxG,EACA,CAAC,EACDrI,IAGMnY,EAAGnK,EAAMoK,EAAGjK,EAAG,MAAEspB,EAAK,OAAEyC,GAAW2E,EAE3C7d,EAAKmjB,QAAQ/E,QAAQyL,iBAAmB,CACtCC,QAAS19B,EAASsB,cAAc,CAACV,EAAMG,IACvC68B,SAAU59B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,IAChD88B,WAAY79B,EAASsB,cAAc,CAACV,EAAMG,EAAM+rB,IAChDgR,YAAa99B,EAASsB,cAAc,CAACV,EAAOypB,EAAOtpB,EAAM+rB,I,CAI7D,OAAOk0C,CAAY,EA5rBnBxnE,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CAuHAs6B,oBAAAA,CACEtjE,EACA5F,EACAwP,EACAw2B,GAGF,CAEAgjC,sBAAAA,CACEpjE,EACA5F,EACA41B,GAEA,MAAM/vB,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,KAAEkX,GAAS/c,EAEjBA,EAAW2kC,aAAc,EAEzB,MAAM8O,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAGP,IACI8sD,EADAuL,GAAgB,EAEfxyD,EAAyBstD,cAC5BkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAK3DjzB,KAAK8rD,SAAW,CACdouB,cACA78E,aACAyzC,uBAEF9wC,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,GAEvD7tC,EAAIyF,gBACN,CAihBAqgF,qBAAAA,CAAsB1rF,EAAY+d,EAAiBxY,GACjD,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,GAAsBpF,EAG1C,GAAmC,IAA/BwX,EAAKmjB,QAAQtyB,OAAOtL,OACtB,OAGF,MAAM,YAAEma,GAAgBM,EAClBsvE,EAAY7qF,OAAOwE,KAAKyW,GAE9B,IAAK,IAAIvM,EAAI,EAAGA,EAAIm8E,EAAU/pF,OAAQ4N,IAAK,CACzC,MAAM0gB,EAAWy7D,EAAUn8E,GAErBoe,EAAQ3rB,KAAKguB,iBAAiBC,EAAU7S,GAK9C,IAAKuQ,EACH,SAGF,MAAM,UAAEqd,GAAcrd,EAEhB29D,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,GAEhCukC,EAAc+F,GAAsBvM,EAAWsgD,GAC/C75C,EAAc8F,GAAsBvM,EAAWugD,IAE7C/iE,OAAQguF,EAASvlE,MAAOwlE,GAC9BlkE,GAAgC5kB,EAAO,CAAC6jB,KAClChpB,OAAQkuF,EAASzlE,MAAO0lE,GAC9BpkE,GAAgC5kB,EAAO,CAAC8jB,IAE1C,IAAIukE,EAASC,EAAShlE,EAAOilE,EACzBC,GAAa,EACjB,GACEM,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACN,QAAdF,EAAO,IAA8B,QAAdE,EAAO,GAC/B,CAGA,MAAMxzG,EAAQg7D,GAAgBmtB,EAAWC,GAEzCyqB,EAAU,CAAC7yG,EAAO,GAClB8yG,EAAU,CAAC9yG,EAAO,GAClB8tC,EAAQ,CAAC,MACTklE,GAAa,C,KACR,CACL,MAAM5uB,EAAe3iF,EAAe4D,SAAS29B,cAAcmlD,GACrD9D,EAAe5iF,EAAe4D,SAAS29B,cAAcolD,GAErD8qB,EAAe7uB,EAAa,GAAKD,EAAa,GAC9C+uB,EAAe9uB,EAAa,GAAKD,EAAa,GAEpD2uB,EAAezpG,KAAKC,IAAI4pG,GAAgB7pG,KAAKC,IAAI2pG,GACjDL,EAAU,CAACQ,EAAQ,GAAIE,EAAQ,IAC/BT,EAAU,CAACO,EAAQ,GAAIE,EAAQ,IAE/BzlE,EAAQ,CAACwlE,EAAO,GAAIA,EAAO,G,CAG7B36F,EAAYmU,GAAY,CACtB+lF,UACAC,UACAC,eACAjlE,QACAklE,a,CAIJ92G,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CACT,EAGF,SAASwrE,GAAoBlrE,EAAM6T,EAAUrB,GAC3C,MAAM9S,EAAcM,EAAKN,YAAYmU,IAC/B,QAAE+lF,EAAO,QAAEC,EAAO,MAAEhlE,EAAK,WAAEklE,EAAU,aAAED,GAAiBp6F,EAE9D,GAAIq6F,EACF,MAAO,CAAC,GAAG19D,GAAYu9D,EAAQ,UAGjC,GAAIpnF,EAAcknF,yBAA0B,CAC1C,MAAMnqB,EAAQl/E,KAAKC,IAAIspG,EAAQ,GAAKA,EAAQ,IACtCnqB,EAAQp/E,KAAKC,IAAIupG,EAAQ,GAAKA,EAAQ,IAC5C,MAAO,CACL,GAAGx9D,GAAYkzC,MAAU16C,EAAM,KAC/B,GAAGwH,GAAYozC,MAAU56C,EAAM,K,CAInC,GAAIilE,EAAc,CAChB,MAAMh4C,EAAOzxD,KAAKC,IAAIspG,EAAQ,GAAKA,EAAQ,IAC3C,MAAO,CAAC,GAAGv9D,GAAYylB,MAASjtB,EAAM,K,CACjC,CACL,MAAMitB,EAAOzxD,KAAKC,IAAIupG,EAAQ,GAAKA,EAAQ,IAC3C,MAAO,CAAC,GAAGx9D,GAAYylB,MAASjtB,EAAM,K,CAE1C,CAEA4kE,GAA0BlzG,SAAW,4BACrC,YC/2BA,MAAMi0G,WAAqB3xE,GAiBzB1gC,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbkjF,gBAAe,GACfC,mBAAkB,GAClB8E,eAAgB,CAAC,GAAI,IACrBxxB,WAAY,MAIhBngD,MAAMzW,EAAWC,GAWnB,KAAAk5C,iBAAoB3iE,IAClB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEhCyF,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGI//B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB8C,cAAe,KACf6hC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACRH,SAAUX,KAAKotB,cACfqP,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,sBACA85B,qBAEFziB,KAAM,CACJ+a,KAAM,GACNoI,QAAS,CACPtyB,OAAQ,IAAI5M,MACZm6B,QAAS,CACPiiD,UAAU,EACV8F,cAA6B,CAAC,EAAG,EAAG,GACpCt8C,iBAAkB,CAChBC,QAAuB,CAAC,EAAG,EAAG,GAC9BE,SAAwB,CAAC,EAAG,EAAG,GAC/BC,WAA0B,CAAC,EAAG,EAAG,GACjCC,YAA2B,CAAC,EAAG,EAAG,MAIxCtqB,MAAO,KAIXhW,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAiCP,OA9BAnqB,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEvD9wC,KAAK4sB,cAAckjF,iBAAiB36E,IAClC,IAAKA,EAOH,OANAlxB,GAAiB5G,EAAW8C,eAC5BwlE,GACEvqD,EACA01B,QAEF9wC,KAAKo6E,WAAY,GAGnB/8E,EAAW+c,KAAK+a,KAAOA,EAEvB,MAAMklD,EAAYv9E,GAAOw9E,qBAEnBp3E,EAA8C,CAClD7F,eAGFwC,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAErCyiE,GACEvqD,EACA01B,EACD,IAGIzzC,CAAU,EAkBnB,KAAA0nC,gBAAkB,CAChBpiC,EACAtF,EACAgmC,EACAW,KAEA,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GACf,KAAEwX,GAAS/c,GAEX,eAAEw3G,EAAc,WAAExxB,GAAerjF,KAAK4sB,cAC5C,QAAKioF,GAAgBl1G,SAInB8K,KAAKC,IAAI24B,EAAa,GAAKwxE,EAAe,GAAKxxB,EAAa,IAC1DA,EAAa,GACf54E,KAAKC,IAAI24B,EAAa,GAAKwxE,EAAe,GAAKxxB,EAAa,IAC1DA,EAAa,EAIL,EAGd,KAAA9c,qBAAuB,CACrBtjE,EACA5F,KAEAA,EAAW2kC,aAAc,EAEzB/+B,EAAIyF,gBAAgB,EAWtB,KAAAwiD,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAEpBlD,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,EAAQ,EAG7B,KAAAutG,oBAAuBjtG,IACrB,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACpB,IAAIE,EAAcK,GAAezD,KAAKotB,cAAezqB,GAOrD,GALAS,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAGF,MAAMwwG,EAAoB/sG,EAAY+S,MAAM9Y,GAC1C2C,KAAK+kC,gBACHpiC,EACAtF,EACA6F,EAAYqF,cAAcX,OAC1B,KAIJ,IAAKuoG,EACH,OAGF,MAAM9yG,EAAa8yG,EAEnBnwG,KAAK4sB,cAAcmjF,mBACjBI,EACAltG,EAAI1F,OACJyC,KAAKowG,0BAA0B3jG,KAAKzM,KAAM2C,EAAStF,IAGrD2C,KAAKo6E,WAAY,EAMjBn3E,EAAIwF,2BACJxF,EAAIyF,gBAAgB,EAyBtB,KAAA09D,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBACNlI,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQqC,iBACNlI,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQqC,iBACNlI,GAAO0S,UACPxP,KAAKkrD,aACN,EAGH,KAAA4iB,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBACNxN,GAAOiM,SACP/I,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAOgM,YACP9I,KAAKkrD,cAGPvoD,EAAQ2H,oBACNxN,GAAO2S,UACPzP,KAAKkrD,cAEPvoD,EAAQ2H,oBACNxN,GAAO0S,UACPxP,KAAKkrD,aACN,EAWH,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAGrD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAItC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,GAAkB9C,EAE1BukC,EAAezhC,cAAgBA,EAE/B,MAAM4jB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,IAE/C,eAAEw3G,EAAc,WAAExxB,GAAerjF,KAAK4sB,cAC5C,GAAIioF,GAAgBl1G,OAAQ,CAE1B0wG,GACEvgF,EACA3vB,EAHe,IAKf00G,EAAevnG,KAAKywB,GAAOA,EAAKslD,IAChCwxB,EACA,CACE9wF,QACA8M,MAAO,G,CAQb,GAHA22C,GAAe,GAGVhhE,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,C,CAIX,OAAOA,CAAY,CA3VrB,CAmGOj6B,MAAAA,GAEP,CA+CA84B,sBAAAA,CACEpjE,EACA5F,EACA41B,GAGF,CAuDAm9E,yBAAAA,CAA0BztG,EAAStF,EAAYizG,GAC7CjzG,EAAW+c,KAAK+a,KAAOm7E,EAEvB,MAAM,gBAAEl1F,EAAe,WAAErT,EAAU,kBAAEC,IACnCnF,EAAAA,GAAAA,mBAAkBF,GAEdmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAEPu4C,GAAsCvqD,EAAiB01B,GAGvD,MAAMupC,EAAYv9E,GAAOyhC,qBAEzB1+B,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAW,CACnCh9E,aACA0K,aACAC,qBAEJ,CAyHAkiF,eAAAA,CAAgBJ,EAAQC,EAAQ1/C,GAC9B,OACE30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,EAE1C,EAGF,SAASylE,GAAgBS,GACvB,OAAOA,EAAyBC,OAAO,0BACzC,CAEA,SAAST,GAAmB31F,EAAMuvB,EAAW4mE,GAC3C,OAAOA,EAAyBC,OAAO,0BACzC,CAEAoE,GAAaj0G,SAAW,WAExB,aCzaQ40C,sBAAqBA,IAAK7/B,GAAAA,UAclC,SAASo/F,GACPlyG,EACAoY,EACA68B,GAAS,GAET,MAAM,OAAE5sC,EAAM,eAAEgP,EAAc,aAAE1B,EAAY,eAAErC,GAC5C8E,EAEI+5F,EAAer1D,GAAgB,CACnC1kC,gBACAxU,SAAU5D,EAAe4D,WAG3B,IAAKuuG,EAEH,YADAr9F,QAAQC,KAAK,mCAIf,MAAM,sBAAEoyB,EAAqB,uBAAE4V,GAA2Bo1D,EAE1D,IAAIC,EAAsB/pG,EAAOqC,KAAKzF,GAC7B0tC,GAAsBxL,EAAuBliC,KAItDmtG,EAAsBA,EAAoB1nG,KAAKynB,GACtCA,EAAMznB,KAAK08F,GACTv/F,KAAKqpD,MAAMk2C,OAItB,MAAMt3D,EAAY2D,GAChB2+D,EACAjrE,EAAsBX,iBAcxBoJ,GACEzI,GAXuBkrE,KAAM,IAEdvqE,EAAGvpC,QAAOiD,YACrB6V,EAAegM,SAAS9kB,KAI5Bw+C,EAAuBv7C,GAASmU,EAAY,GAO5Cm6B,GAGFh5B,GAAgCxD,EAClC,CAQM,SAAUg/F,GACdtyG,EACAoY,GAEA85F,GAAclyG,EAAgBoY,GAAe,EAC/C,CClFA,SAASm6F,GACPvyG,EACAoY,EACA68B,GAAS,GAQTq9D,GAAoBtyG,EAJO/D,OAAOqmB,OAAO,CAAC,EAAGlK,EAAe,CAC1DzC,aAAc,IAIlB,CAQM,SAAU68F,GACdxyG,EACAoY,GAEAm6F,GAAevyG,EAAgBoY,GAAe,EAChD,CCUA,MAAMq6F,WAA8B7oF,GAuBlCjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbE,WAAY,CACVwoF,YAAaJ,GACbK,aAAcH,IAEhBroF,gBAAiB,cACjBC,eAAgB,iBAIpBkW,MAAMzW,EAAWC,GAWnB,KAAA69B,qBAAwBtnD,IACtB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAC9BkO,EAAcvW,KAAKuW,YAEnB80C,EACJC,GAAuD/0C,GACzD,IAAK80C,EACH,MAAM,IAAIvoD,MACR,0EAIJ,MAAM,8BAAEsU,EAA6B,eAAElB,EAAc,KAAE/J,GACrDk/C,EACI9yC,EACJozC,GAA6Cz1C,GACzC+D,EAAiBsxC,GAAiCr1C,GAElDmH,EAAeyL,GACnBvS,EACAa,EACAmB,IAGI,mBAAE4B,GAAuBlE,GAAgBC,GACzCiI,EAAehE,EACnBpd,GAA4BwY,UAIxBlY,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACR27B,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,oBAAqByD,EAASq4B,yBAC9BhC,kBAAmB,GACnBl8B,SAAUX,KAAKotB,cACf/P,gBAEFjD,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CACQ,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAEpBW,kBAAmB,QAKnBsN,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAgBP,GAdAptB,KAAK8rD,SAAW,CACdzuD,aACAkb,eACArC,iBACA+D,iBACAoD,eACAyzB,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,EACVrjE,iCAGE2D,GAAqBoD,GAA2C,CAClE,MAAM,SAAElD,GAAakD,EACf/H,EAAeyI,GAAAA,MAAMC,UAAU7D,GAErCjb,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACR7wC,WACA8D,mBAAoB3I,EAAa2I,mB,KAE9B,CACL,MAAM,oBAAEjD,GACNqC,EAEFne,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACRhwC,sB,CAYJ,OARA9b,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,IAEhD,CAAI,EAGb,KAAAma,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EAEjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,oBAAEyzC,EAAmB,YAAEopC,GAAgBl6E,KAAK8rD,UACxD,KAAE1xC,GAAS/c,GAGX,cAAEkL,GAAkBrF,EACpBN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,cAAEwhC,EAAa,cAAEr8B,GAAkBlF,EAAe4D,SAClDq8B,EAAWt6B,EAAcV,OAEzB,OAAEoD,GAAWmP,EAAKmjB,QAKxB,IAAIwuD,EACAtqC,EACAD,EACAwqC,EAEAC,EACA91C,EACAD,EACAg2C,EAEJ,OAZAjhF,EAAOivE,GAAe,IAAIr3C,GAYlBq3C,GACN,KAAK,EACL,KAAK,EAGH6R,EAAmB5nD,EAAcl5B,EAAO,IACxC+gF,EAAiB7nD,EAAcl5B,EAAO,IAEtCw2C,EAAoB,CAACuqC,EAAe,GAAID,EAAiB,IACzDvqC,EAAgB,CAACuqC,EAAiB,GAAIC,EAAe,IAErD71C,EAAmBruC,EAAc25C,GACjCvL,EAAepuC,EAAc05C,GAE7Bv2C,EAAO,GAAKkrC,EACZlrC,EAAO,GAAKirC,EAEZ,MACF,KAAK,EACL,KAAK,EAEHuL,EAAoBtd,EAAcl5B,EAAO,IACzCu2C,EAAgBrd,EAAcl5B,EAAO,IAErC8gF,EAAiC,CAC/BvqC,EAAc,GACdC,EAAkB,IAEpBuqC,EAA+B,CAACvqC,EAAkB,GAAID,EAAc,IAEpEyqC,EAAkBnkF,EAAcikF,GAChCG,EAAgBpkF,EAAckkF,GAE9B/gF,EAAO,GAAKghF,EACZhhF,EAAO,GAAKihF,EAIhB7uF,EAAWkG,aAAc,EAEzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM,gBAAEr/D,GAAoBxY,EAE5B+iE,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAoa,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,cAAE88E,EAAa,SAAEM,GAAaz6E,KAAK8rD,UAC/C,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCqY,EAAgB,IACjBhb,KAAK8rD,SACR7gD,OAAQmP,EAAKmjB,QAAQtyB,QAGvBjL,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAEjBp6E,KAAKqtB,oBAAoBzqB,EAAgBoY,EAAc,EAMzD,KAAA0vC,cAAiB/nD,IACfA,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAM/D,KAAAC,gBAAmBxoD,IACjBA,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cACrDvoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,cAEnDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,cAAc,EAWpE,KAAAjvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,IAAKxnE,KAAK8rD,SACR,OAAO0b,EAGT,MAAM,SAAEhhE,GAAa5D,GACf,WAAEvF,GAAe2C,KAAK8rD,SAGtBO,EAAehvD,EAAWyD,SAC1BX,EAAgB9C,EAAW8C,cAE3Bia,EAAO/c,EAAW+c,MAClB,OAAEnP,GAAWmP,EAAKmjB,QAClBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAC7DrxB,EAAQ,OAAOsoC,EAAahvC,aAAaI,MAAM,EAAG,MAGxD,IAAKjX,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAiBT,OAbA4kB,GACEt8D,EACA3vB,EAHmB,IAKnB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,UAIJyjD,GAAe,EAERA,CAAY,CAhTrB,EAoTF6tC,GAAsB10G,SAAW,mBACjC,YC7VA,MAAM60G,WAA2BhpF,GAuB/BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbE,WAAY,CACVwoF,YAAavzD,GACbwzD,aAAc/yD,IAEhBz1B,gBAAiB,cACjBC,eAAgB,iBAIpBkW,MAAMzW,EAAWC,GAWnB,KAAA69B,qBAAwBtnD,IACtB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,OAE1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAC9BkO,EAAcvW,KAAKuW,YAEnB80C,EACJC,GAAuD/0C,GACzD,IAAK80C,EACH,MAAM,IAAIvoD,MACR,0EAIJ,MAAM,8BAAEsU,EAA6B,eAAElB,EAAc,KAAE/J,GACrDk/C,EACI9yC,EACJozC,GAA6Cz1C,GACzC+D,EAAiBsxC,GAAiCr1C,GAElDmH,EAAeyL,GACnBvS,EACAa,EACAmB,IAGI,mBAAE4B,GAAuBlE,GAAgBC,GAGzCiI,EAAehE,EAAmBhO,GAExC,IAAKgS,EACH,MAAM,IAAIrb,MACR,6FAKJ,MAAMzF,EAAa,CACjBkG,aAAa,EACby+B,aAAa,EACblhC,SAAU,CACR27B,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,oBAAqByD,EAASq4B,yBAC9BhC,kBAAmB,GACnBl8B,SAAUX,KAAKotB,cACf/P,gBAEFjD,KAAM,CACJmjB,QAAS,CACPtyB,OAAQ,CAAC,IAAI43B,GAAW,IAAIA,GAAW,IAAIA,GAAW,IAAIA,IAC1DW,kBAAmB,MAErB42C,WAAW,EACXtgE,YAAa,CAAC,IAIZg3B,EAAsB,CAACtqC,EAAS6U,IAiBtC,GAfArb,KAAK8rD,SAAW,CACdzuD,aACAquD,aAAcgmB,EACdn5D,eACArC,iBACA+D,iBACAoD,eACAyzB,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,EACVrjE,iCAGE2D,GAAqBoD,GAA2C,CAClE,MAAM,SAAElD,GAAakD,EACf/H,EAAeyI,GAAAA,MAAMC,UAAU7D,GAErCjb,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACR7wC,WACA8D,mBAAoB3I,EAAa2I,mB,KAE9B,CACL,MAAM,oBAAEjD,GACNqC,EAEFne,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACRhwC,sB,CAYJ,OARA9b,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,IAEhD,CAAI,EAGb,KAAAma,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OACpChF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEkF,GAAkBtB,GAGpB,WAAEnJ,EAAU,oBAAEyzC,EAAmB,aAAE4a,GAAiB1rD,KAAK8rD,UACzD,KAAE1xC,GAAS/c,EAIXmwF,EAAK/iF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IACpD+hC,EAAKhjF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IACpDh7B,EAASjmB,KAAKuE,KAAKw+E,EAAKA,EAAKC,EAAKA,GAElCC,EAA6B,CACjChiC,EAAa,GACbA,EAAa,GAAKh7B,GAEdi9D,EAA0B,CAACjiC,EAAa,GAAIA,EAAa,GAAKh7B,GAC9Dk9D,EAA2B,CAC/BliC,EAAa,GAAKh7B,EAClBg7B,EAAa,IAETmiC,EAA4B,CAChCniC,EAAa,GAAKh7B,EAClBg7B,EAAa,IAGftxC,EAAKmjB,QAAQtyB,OAAS,CACpBnD,EAAc4lF,GACd5lF,EAAc6lF,GACd7lF,EAAc8lF,GACd9lF,EAAc+lF,IAGhBxwF,EAAWkG,aAAc,EAEzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB9U,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAoa,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WAAE7F,EAAU,cAAE88E,EAAa,SAAEM,GAAaz6E,KAAK8rD,UAC/C,KAAE1xC,GAAS/c,GACX,gBAAEo/B,EAAe,OAAEqG,GAAWzlC,EAAWyD,SAE/C,GAAIq5E,IAAkBM,EACpB,OAGFrgE,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCqY,EAAgB,IACjBhb,KAAK8rD,SACR7gD,OAAQmP,EAAKmjB,QAAQtyB,OACrBwxB,kBACAqG,SACAqV,8BAA+B,CAAC,GAGlCn4C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAEjBp6E,KAAKqtB,oBAAoBzqB,EAAgBoY,EAAc,EAMzD,KAAA0vC,cAAiB/nD,IACfA,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,aAAa,EAM/D,KAAAC,gBAAmBxoD,IACjBA,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,IAAKxnE,KAAK8rD,SACR,OAAO0b,EAGT,MAAM,SAAEhhE,GAAa5D,GACf,oBAAEkuC,GAAwB9wC,KAAK8rD,SAErC,IAAKhb,EAAoB7qB,SAASzf,EAAS6U,IACzC,OAAOmsD,EAGT,MAAM,WAAEnqE,GAAe2C,KAAK8rD,SAGtBO,EAAehvD,EAAWyD,SAC1BX,EAAgB9C,EAAW8C,cAE3Bia,EAAO/c,EAAW+c,MAClB,OAAEnP,GAAWmP,EAAKmjB,QAClBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAE7DnjB,EAASF,EAAkB,GAC3BxqB,EAAMwqB,EAAkB,GAExBtB,EAAS,CACbhmB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,GAClCkD,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAG9BmpB,EAASjmB,KAAKC,IAAIunB,EAAO,GAAKxnB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAEhEwc,EAAQ,OAAOsoC,EAAahvC,aAAaI,MAAM,EAAG,MAGxD,IAAKjX,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAgBT,OAZAjb,GACEz8B,EACA3vB,EAHgB,IAKhBswB,EACAC,EACA,CACE3M,UAIJyjD,GAAe,EACRA,CAAY,CA1SrB,EA8SFguC,GAAmB70G,SAAW,gBAC9B,YCpVA,MAAM80G,WAA2BjpF,GAwB/BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACbE,WAAY,CACVwoF,YAAajzD,GACbkzD,aAAchzD,IAEhBx1B,gBAAiB,cACjBC,eAAgB,iBAIpBkW,MAAMzW,EAAWC,GAWnB,KAAA69B,qBAAwBtnD,IACtB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MACzB6pE,EAAYnpE,EAAcX,OAE1BhF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAC9BkO,EAAcvW,KAAKuW,YAEnB80C,EACJC,GAAuD/0C,GACzD,IAAK80C,EACH,MAAM,IAAIvoD,MACR,0EAIJ,MAAM,8BAAEsU,EAA6B,eAAElB,GACrCm1C,EACI9yC,EACJozC,GAA6Cz1C,GACzC+D,EAAiBsxC,GAAiCr1C,GAElDmH,EAAeyL,GACnBvS,EACAa,EACAmB,GAGFvY,KAAKo6E,WAAY,EAGjB,MAAM/8E,EAAa,CACjByD,SAAU,CACR27B,gBAA+B,IAAIA,GACnCqG,OAAsB,IAAIA,GAC1B//B,oBAAqByD,EAASq4B,yBAC9BhC,kBAAmB,GACnBl8B,SAAUX,KAAKotB,cACf/P,gBAEFjD,KAAM,CACJ7W,aAAa,EACbg6B,QAAS,CACPtyB,OAAQ,CAAC,IAAI43B,GAAW,IAAIA,GAAW,IAAIA,GAAW,IAAIA,IAC1DW,kBAAmB,MAErB1pB,YAAa,CAAC,EACdkoB,aAAa,IAIX8O,EAAsB,CAACtqC,EAAS6U,IAEtCrb,KAAK8rD,SAAW,CACdzuD,aACAquD,aAAcgmB,EACdt6D,gCACAmB,eACArC,iBACA+D,iBACAoD,eACA9G,cACAu6B,sBACAopC,YAAa,EACbuL,eAAe,EACftL,eAAe,EACfM,UAAU,GAGZ,MAAM,mBAAEtgE,GAAuBlE,GAAgBC,GACzCiI,EACJhE,EAAmBpd,GAA4BwY,UAEjD,GAAIwF,GAAqBoD,GAA2C,CAClE,MAAM,SAAElD,GAAakD,EACf/H,EAAeyI,GAAAA,MAAMC,UAAU7D,GAErCjb,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACR7wC,WACA8D,mBAAoB3I,EAAa2I,mB,KAE9B,CACL,MAAM,oBAAEjD,GACNqC,EAEFne,KAAK8rD,SAAW,IACX9rD,KAAK8rD,SACRhwC,sB,CAYJ,OARA9b,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,IAEhD,CAAI,EAGb,KAAAma,cAAiBhoD,IACfjD,KAAKo6E,WAAY,EACjB,MAAMl3E,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GACd,cAAEqF,GAAkBrF,EACpBqqF,EAAsBhlF,EAAcX,OACpChF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,SAAE5U,GAAa5D,GAChC,cAAEkF,GAAkBtB,GAGpB,WAAEnJ,EAAU,oBAAEyzC,EAAmB,aAAE4a,GAAiB1rD,KAAK8rD,UACzD,KAAE1xC,GAAS/c,EAEXmwF,EAAK/iF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IACpD+hC,EAAKhjF,KAAKC,IAAI6iF,EAAoB,GAAK7hC,EAAa,IACpDh7B,EAASjmB,KAAKuE,KAAKw+E,EAAKA,EAAKC,EAAKA,GAElCC,EAA6B,CACjChiC,EAAa,GACbA,EAAa,GAAKh7B,GAEdi9D,EAA0B,CAACjiC,EAAa,GAAIA,EAAa,GAAKh7B,GAC9Dk9D,EAA2B,CAC/BliC,EAAa,GAAKh7B,EAClBg7B,EAAa,IAETmiC,EAA4B,CAChCniC,EAAa,GAAKh7B,EAClBg7B,EAAa,IAGftxC,EAAKmjB,QAAQtyB,OAAS,CACpBnD,EAAc4lF,GACd5lF,EAAc6lF,GACd7lF,EAAc8lF,GACd9lF,EAAc+lF,IAGhBxwF,EAAWkG,aAAc,EAEzBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB9U,GAAsCvqD,EAAiB01B,EAAoB,EAG7E,KAAAoa,aAAgBjoD,IACd,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,GAEd,WACJ7F,EAAU,cACV88E,EAAa,SACbM,EAAQ,aACRliE,EAAY,8BACZnB,EAA6B,eAC7B6C,GACEja,KAAK8rD,UACH,KAAE1xC,GAAS/c,GACX,gBAAEo/B,EAAe,OAAEqG,GAAWzlC,EAAWyD,SAE/C,GAAIq5E,IAAkBM,EACpB,OAEFp9E,EAAW2kC,aAAc,EACzB5nB,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnCqY,EAAgB,IACjBhb,KAAK8rD,SACR7gD,OAAQmP,EAAKmjB,QAAQtyB,OACrBsN,eACAnB,gCACA6C,iBACAwiB,kBACAqG,UAGF9iC,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAEjBp6E,KAAKqtB,oBAAoBzqB,EAAgBoY,EAAc,EAMzD,KAAA0vC,cAAiB/nD,IACfA,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKkrD,cAC/CvoD,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAKirD,eACjDtoD,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKkrD,cAElDvoD,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAO2S,UAAWzP,KAAKkrD,cAChDvoD,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAKirD,cAAc,EAMjE,KAAAE,gBAAmBxoD,IACjBA,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKkrD,cAClDvoD,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKkrD,cAErDvoD,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKkrD,cACnDvoD,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAKirD,eACpDtoD,EAAQ2H,oBAAoBxN,GAAO2S,UAAWzP,KAAKkrD,aAAa,EAWlE,KAAAlvB,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,IAAKxnE,KAAK8rD,SACR,OAAO0b,EAGT,MAAM,SAAEhhE,GAAa5D,GACf,oBAAEkuC,GAAwB9wC,KAAK8rD,SAErC,IAAKhb,EAAoB7qB,SAASzf,EAAS6U,IACzC,OAAOmsD,EAGT,MAAM,WAAEnqE,GAAe2C,KAAK8rD,SAGtBO,EAAehvD,EAAWyD,SAC1BX,EAAgB9C,EAAW8C,cAE3Bia,EAAO/c,EAAW+c,MAClB,OAAEnP,GAAWmP,EAAKmjB,QAClBxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAE7DnjB,EAASF,EAAkB,GAC3BxqB,EAAMwqB,EAAkB,GAExBtB,EAAS,CACbhmB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,GAClCkD,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAG9BmpB,EAASjmB,KAAKC,IAAIunB,EAAO,GAAKxnB,KAAK4qC,OAAOpjB,EAAO,GAAK1qB,EAAI,IAAM,IAEhEwc,EAAQ,OAAOsoC,EAAahvC,aAAaI,MAAM,EAAG,MAGxD,IAAKjX,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAiBT,OAbAjb,GACEz8B,EACA3vB,EAHgB,IAKhBswB,EACAC,EACA,CACE3M,UAIJyjD,GAAe,EAERA,CAAY,CA7SrB,EAiTFiuC,GAAmB90G,SAAW,gBAC9B,YC7VA,MAAM+0G,WAAkC9pB,GAatCrpF,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CACboH,QAAQ,EACR4rD,2BAA2B,KAI/B18C,MAAMzW,EAAWC,GAWnB,KAAAk5C,iBAAoB3iE,IAClB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAE9B4lB,EAAWjuB,KAAKuuB,YAAY/nB,GAClC,IAAIq2B,EAAmB5hB,EAEvB,GAAIzU,aAAoB0V,GAAAA,cACtB2gB,EAAoB5O,EAASE,MAAM,YAAY,OAC1C,CACLlT,EAAWgT,EAASE,MAAM,aAAa,GACvC,MAAM4U,EAAclkB,GAAAA,MAAMC,UAAU7D,GACpC4hB,EAAoBnnB,GAAAA,UAAAA,kBAClBqtB,EACAF,EACApG,E,CAIJ,MAAM15B,EAAsByD,EAASq4B,yBAG/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACR27B,gBAA+B,IAAIA,GACnC75B,iBACAkgC,OAAsB,IAAIA,GAC1B//B,sBACA85B,oBACAl8B,SAAUX,KAAKotB,cACfnS,YAEFb,KAAM,CACJJ,MAAO,GACPujB,QAAS,CAEP/E,QAAS,CACPiiD,UAAU,EACV8F,cAAe,KACft8C,iBAAkB,MAEpBh5B,OAAQ,CACQ,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAEpBW,kBAAmB,MAErBttB,eAAgB,OAIpBlS,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAkBP,OAfAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbC,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAUnB,KAAA2+B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,EAAQ,kBAAEwB,GAAsBpF,GAClC,QAAED,GAAY6D,EACpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAAO6nE,EAQT,GALApkE,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAAO6nE,EAGT,MAAM5lC,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,OAAE4N,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QACrCxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnExT,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAGrD,IAAKmJ,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAMT,MAAM6S,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,WAAYvB,EAAS6U,GACrBrT,qBAKF,IAAI8yE,EAEJ,IAJAj7E,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,IAIhCrB,GAAoB1B,GACvB,SAYF,GARG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB26E,EACA,CACE/2D,S,CAMNqoE,GACEt8D,EACA3vB,EAHmB,IAKnB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACAgN,WACAD,cAIJ02C,GAAe,C,CAGjB,OAAOA,CAAY,CAnNrB,EAuNFkuC,GAA0B/0G,SAAW,wBACrC,aCnPQ40C,sBAAqBA,IAAK7/B,GAAAA,UAclC,MAAMigG,WAA0C/pB,GAa9CrpF,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BE,cAAe,CACbgpF,qBAAsB,MAI1B1yE,MAAMzW,EAAWC,GAiBnB,KAAAk5C,iBAAoB3iE,IAClB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAEpC,IAAIw0B,EAAmBkG,EAAa9nB,EACpC,GAAIzU,aAAoB0V,GAAAA,cACtB,MAAM,IAAIpZ,MAAM,kCAGhBmY,EADiBjb,KAAKuuB,YAAY/nB,GACd2nB,MAAM,aAAa,GACvC4U,EAAclkB,GAAAA,MAAMC,UAAU7D,GAC9B4hB,EAAoBnnB,GAAAA,UAAAA,kBAClBqtB,EACAF,EACApG,GAIJ,IAAKI,EACH,MAAM,IAAI/5B,MAAM,qDAGlB,MAAM85F,EAAap2F,EAASg/B,yBACtBqwE,EAAkBngG,GAAAA,UAAAA,4BACtBqtB,EACAtG,GAOI29D,EAAWp6F,KAAK81G,kBACpB/yE,EACAF,EACAgzE,EACAp5E,GAGI15B,EAAsByD,EAASq4B,yBAE/BxhC,EAAa,CACjB2kC,aAAa,EACbz+B,aAAa,EACbzC,SAAU,CACR27B,gBAA+B,IAAIA,GACnC75B,iBACAkgC,OAAsB,IAAIA,GAC1B//B,sBACA85B,oBACAl8B,SAAUX,KAAKotB,cACfnS,WACA46F,mBAEFz7F,KAAM,CACJJ,MAAO,GACP+7F,WAAYnZ,EACZoZ,SAAU5b,EACVtgF,YAAa,CACXm8F,iBAAkB,GAClBC,yBAA0B,CAACr5E,IAE7BU,QAAS,CAEP/E,QAAS,CACPiiD,UAAU,EACV8F,cAAe,KACft8C,iBAAkB,MAEpBh5B,OAAQ,CACQ,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAEpBW,kBAAmB,MAErB5kB,YAAa,OAOjB5e,KAAKm2G,yBAAyB94G,EAAY0lC,GAE1C/+B,GAAc3G,EAAYsF,GAE1B,MAAMmuC,EAAsB4pB,GAC1B/3D,EACA3C,KAAKotB,eAkBP,OAfAptB,KAAK8rD,SAAW,CACdzuD,aACAyzC,sBACAopC,YAAa,EACbC,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GAAsCvqD,EAAiB01B,GAEhDzzC,CAAU,EAgGnB,KAAA2+B,iBAAmB,CACjBp5B,EACAktB,KAEA,IAAI03C,GAAe,EACnB,MAAM,SAAEhhE,GAAa5D,EAEfQ,EAAcK,GAAezD,KAAKotB,cAAe5mB,EAAS7D,SAEhE,IAAKS,GAAazD,OAChB,OAAO6nE,EAGT,MAAM4uC,EAAa5vG,EAASg/B,yBAEtB5D,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EACjBmK,IAEI,cAAEpN,EAAa,KAAEia,GAAS/c,GAC1B,WAAE04G,EAAU,SAAEC,GAAa57F,GAC3B,OAAEnP,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QAErCxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAEnExT,EAAezhC,cAAgBA,EAE/B,MAAM2wB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAKrD,GACE+4G,EAAa3rG,KAAK8U,IAAIw2F,EAAYC,IAClCI,EAAa3rG,KAAK6iC,IAAIyoE,EAAYC,GAElC,SAKE34G,EAAWkG,aACbvD,KAAK8oF,+BAA+BzrF,EAAYuF,GAKlD,IAWIk4E,EAXAu7B,GAAmB,EAMvB,GALID,IAAeL,GAAcK,IAAeJ,IAC9CK,GAAmB,IAIhB7vG,EAASo1B,qBAEZ,OADAlkB,QAAQC,KAAK,uCACN6vD,EAKT,IAAK3lE,GAAoB1B,GACvB,SAaF,GATG5B,GAAmBlB,IACnB2C,KAAK8rD,UACgB,OAAtBtoB,IACA6yE,IAGAv7B,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB26E,EACA,CACE/2D,S,CAKN,IAAIuyF,EAAgBvlF,EAEfslF,IACHC,EAAgB,GAIlBlqB,GACEt8D,EACA3vB,EAHmB,IAKnB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,QACAgN,SAAUulF,EACVxlF,cAIJ02C,GAAe,C,CAGjB,OAAOA,CAAY,EA3VnBxnE,KAAK8oF,+BAAiCuB,GACpCrqF,KAAKu2G,0BACL,IACA,CAAEtqE,UAAU,GAEhB,CAmIAkqE,wBAAAA,CACE94G,EACA0lC,GAEA,MAAM,KAAE3oB,EAAI,SAAEtZ,GAAazD,GACrB,gBAAEo/B,EAAe,gBAAEo5E,GAAoB/0G,GACvC,UAAEkoC,GAAcjG,GAChB,WAAEgzE,EAAU,SAAEC,GAAa57F,GAC3B,OAAEnP,GAAWmP,EAAKmjB,QAElBi5E,EAAWjhE,GAAsBvM,EAAW/9B,EAAO,IAEzD,GAAIurG,EAAS,KAAOT,EAClB,MAAM,IAAIjzG,MAAM,8BAIlB,MAAM2zG,EAASx5E,GAAAA,GAAAA,WAAgBu5E,EAAS,GAAIA,EAAS,GAAIR,GAEnDU,EAAaz5E,GAAAA,GAAAA,SACnB+L,EAAU2tE,iBAAiBH,EAAUE,GAErC,MAAME,EAAW35E,GAAAA,GAAAA,SACjB+L,EAAU2tE,iBAAiBF,EAAQG,GAGnC,MAAMl/E,EAAWuF,GAAAA,GAAAA,SAAcy5E,EAAYE,GAIrCC,EAAsB,GAC5B,IAAK,IAAI36C,EAAO,EAAGA,EAAOxkC,EAAUwkC,GAAQ25C,EAC1CgB,EAAoBh5G,KAClBoN,EAAOqC,KAAKynB,IACV,MAAM+hF,EAAW75E,GAAAA,GAAAA,SAEjB,OADAA,GAAAA,GAAAA,YAAiB65E,EAAU/hF,EAAO0H,EAAiBy/B,GAC5C79D,MAAMC,KAAKw4G,EAAS,KAKjC18F,EAAKN,YAAYm8F,iBAAmBY,EAGpC,MAAMX,EAA2B,GACjC,IAAK,MAAMa,KAAmBF,EAAqB,CACjD,MAAMh7F,EAAUnG,GAAAA,UAAAA,kBACdqtB,EACAg0E,EAAgB,GAChBt6E,GAEFy5E,EAAyBr4G,KAAKge,E,CAGhCzB,EAAKN,YAAYo8F,yBAA2BA,CAC9C,CAEAK,yBAAAA,CAA0Bl5G,EAAYuF,GACpC,MAAMwX,EAAO/c,EAAW+c,MAClB,WAAErS,EAAU,kBAAEC,EAAiB,SAAExB,GAAa5D,GAE9C,YAAEkX,GAAgBM,EAClBa,EAAWjb,KAAKuuB,YAAY/nB,GAC5Bu8B,EAAclkB,GAAAA,MAAMC,UAAU7D,EAASkT,MAAM,aAAa,IAKhEnuB,KAAKm2G,yBAAyB94G,EAAY0lC,GAE1C1lC,EAAWkG,aAAc,EAGzB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAA6C,CACjD7F,aACA0K,aACAC,qBAIF,OAFAnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CACT,CAmIAg8F,iBAAAA,CACE/yE,EACAF,EACAgzE,EACAp5E,GAEA,MAAMm5E,EAAuB51G,KAAK4sB,cAAcgpF,qBAI1CoB,EAAS/5E,GAAAA,GAAAA,SACfA,GAAAA,GAAAA,YACE+5E,EACAn0E,EACApG,EACAm5E,EAAuBC,GAGzB,MAAMz4E,EAA+By4E,EAAkB,GAEjD,SAAElgC,GAAa5yC,EACrB,IAAIk0E,EACJ,IAAK,IAAI1pG,EAAI,EAAGA,EAAIooE,EAASh2E,OAAQ4N,IAAK,CACxC,MAAMsO,EAAU85D,EAASpoE,IAEnB,qBAAE0wE,GAAyBlhD,GAAAA,SAAAA,IAC/B,mBACAlhB,GAGI2hB,EAAMP,GAAAA,GAAAA,SACZA,GAAAA,GAAAA,IAASO,EAAKw5E,EAAQ/4B,GAEtB,MAAMxgD,EAAMR,GAAAA,GAAAA,IAASO,EAAKf,GAEtBhyB,KAAKC,IAAI+yB,GAAOL,IAClB65E,EAAe1pG,E,CAInB,OAAO0pG,CACT,EAGFtB,GAAkCh1G,SAAW,gCAC7C,aC3bQ40C,sBAAqB,GAAE2hE,QAAOA,IAAKxhG,GAAAA,UAiB3C,MAAMyhG,WAAsB3qF,GAG1BjqB,WAAAA,CACEkqB,EAA6B,CAAC,EAC9BC,EAA8B,CAC5BG,0BAA2B,CAAC,QAAS,WAGvCqW,MAAMzW,EAAWC,GAWnB,KAAA69B,qBAAwBtnD,IACtB,MAAMC,EAAcD,EAAI1F,QAClB,cAAEgL,EAAa,QAAE5F,GAAYO,EAC7B2/B,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfyF,EAAS7B,EAAS44B,aAClB,gBAAE3C,GAAoBp0B,EAGtBgjD,EACJC,GAHkBtrD,KAAKuW,aAIzB,IAAK80C,EACH,MAAM,IAAIvoD,MACR,0EAIJ,MAAM,eAAEoT,EAAc,KAAE/J,GAASk/C,EAC3B9yC,EACJozC,GAA6Cz1C,GACzC+D,EACJsxC,GAAiCr1C,IAC7B,mBAAEiE,GAAuBlE,GAAgBC,GAEzCiI,EACJhE,EAAmBpd,GAA4BwY,UAEjD,IAAI80B,EACAh3B,EACA4/B,EACA7uC,EAEJ,GAAI2W,GAAqBoD,GAAe,CACtC,MAAM,SAAElD,GAAad,EACnBhO,GAGIiK,EAAeyI,GAAAA,MAAMC,UAAU7D,KAClCovB,aAAYh3B,aAAc+C,GAC7B68B,EAAa78B,EAAaqV,gBAE1BrnB,EAAQmxC,GAAsBn/B,EAAa4yB,UAAWnG,E,KACjD,CACL,MAAM,oBAAE/mB,GACNqC,EAEImrB,EAAiB1mC,EAAe4D,SAASuV,oBACzCytB,EACJ1tB,EAAoB5c,IAAIoqC,GAE1B,IAAKE,EACH,MAAM,IAAI1mC,MACR,kFAIJ,MAAM2mC,EAAoB5qB,GAAAA,MAAM+M,SAAS4d,GACzCyJ,EAAaxJ,EAAkB5d,eAC/B,MAAM,UAAEmd,GAAcxiC,EAAS8nB,eAC/B+b,EAAarB,EAAUI,gBACvB/1B,EAAY21B,EAAUkK,eACtB9uC,EAAQmxC,GAAsBvM,EAAWnG,E,CAG3C,MAAMu0E,EAAiBp3G,KAAKq3G,kBAC1B56E,EACAppB,GAGF,QAAuB/P,IAAnB8zG,EAEF,YADA1/F,QAAQC,KAAK,wCAIf,MAAM,gBACJ2/F,EAAe,cACfC,EAAa,+BACbC,EAA8B,iBAC9BC,EAAgB,oBAChBC,GACE13G,KAAK23G,gBAAgB1kE,EAAY5I,EAAYjmC,EAAOgzG,GAGxD,GACEhzG,EAAM,GAAK,GACXA,EAAM,IAAMimC,EAAW,IACvBjmC,EAAM,GAAK,GACXA,EAAM,IAAMimC,EAAW,IACvBjmC,EAAM,GAAK,GACXA,EAAM,IAAMimC,EAAW,GAGvB,OAGF,MAAMutE,EAAoBL,EAAcnzG,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAElE,GAAI6V,EAAegM,SAAS2xF,GAE1B,OAGF,MAAMC,EAAkB56D,GAAUq6D,EAAiBG,IAE7C,QAAEz8D,GAAY68D,EAEpB78D,EAAQ98C,SAASkG,IACf,MAAM0zG,EAAqBN,EACzBpzG,EAAM,GACNA,EAAM,IAGR6uC,EAAW6kE,GAAsBv/F,CAAY,IAW/C,OAFAmB,GAAgCxD,EANTlW,KAAK+3G,kBAC1BX,EACAM,EACAG,KAKK,CAAI,EAGL,KAAAE,kBAAoB,CAC1BX,EACAM,EACAG,KAEA,MAAM,WAAEv8D,GAAeu8D,EAEvB,GAAuB,IAAnBT,EACF,MAAO,CAACM,GAMV,IAAIM,EAAOljE,IACPmjE,GAAQnjE,IAEZ,IAAK,IAAI6E,EAAI,EAAGA,EAAI2B,EAAW37C,OAAQg6C,IAAK,CAC1C,MAAM5qC,EAAIusC,EAAW3B,GAAG,GAEpB5qC,EAAIipG,IACNA,EAAOjpG,GAELA,EAAIkpG,IACNA,EAAOlpG,E,CAIX,MAAMmpG,EAAiB,GAEvB,IAAK,IAAInmD,EAAQimD,EAAMjmD,GAASkmD,EAAMlmD,IACpCmmD,EAAer6G,KAAKk0D,GAGtB,OAAOmmD,CAAc,EAGf,KAAAP,gBAAkB,CACxB1kE,EACA5I,EACA8tE,EACAf,EAAiB,KAEjB,IAAIM,EACAD,EAEJ,OAAQL,GACN,KAAK,EACHM,EAAsBS,EAAY,GAClCV,EAAmB,CAACU,EAAY,GAAIA,EAAY,IAChD,MACF,KAAK,EACHT,EAAsBS,EAAY,GAClCV,EAAmB,CAACU,EAAY,GAAIA,EAAY,IAChD,MACF,KAAK,EACHT,EAAsBS,EAAY,GAClCV,EAAmB,CAACU,EAAY,GAAIA,EAAY,IAChD,MACF,QACE,MAAM,IAAIr1G,MAAM,2BAA2Bs0G,KAG/C,MAAMgB,EAAwBA,CAAC7mG,EAAWC,EAAW6mG,IAC5CA,EAAIhuE,EAAW,GAAKA,EAAW,GAAK74B,EAAI64B,EAAW,GAAK94B,EAG3DgmG,EAAgBA,CAAChmG,EAAWC,EAAW6mG,IACpCplE,EAAWmlE,EAAsB7mG,EAAGC,EAAG6mG,IAG1Cf,EAAkBt3G,KAAKs4G,wBAC3BjuE,EACA+sE,EACAM,EACAH,GAUF,MAAO,CACLC,+BAPAx3G,KAAKu4G,uCACHH,EACAhB,EACAM,GAKFH,gBACAD,kBACAG,mBACAC,sBACD,EAiDK,KAAAY,wBAA0B,CAChCjuE,EACA+sE,EACAM,EACAH,KAEA,IAAID,EAOJ,OAAQF,GACN,KAAK,EACHE,EAAkBA,CAAC9lG,EAAG6mG,KACpB,KAAI7mG,GAAK64B,EAAW,IAAM74B,EAAI,GAAK6mG,GAAKhuE,EAAW,IAAMguE,EAAI,GAI7D,OAAOd,EAAcG,EAAqBlmG,EAAG6mG,EAAE,EAEjD,MAEF,KAAK,EACHf,EAAkBA,CAAC/lG,EAAG8mG,KACpB,KAAI9mG,GAAK84B,EAAW,IAAM94B,EAAI,GAAK8mG,GAAKhuE,EAAW,IAAMguE,EAAI,GAI7D,OAAOd,EAAchmG,EAAGmmG,EAAqBW,EAAE,EAEjD,MAEF,KAAK,EACHf,EAAkBA,CAAC/lG,EAAGC,KACpB,KAAID,GAAK84B,EAAW,IAAM94B,EAAI,GAAKC,GAAK64B,EAAW,IAAM74B,EAAI,GAI7D,OAAO+lG,EAAchmG,EAAGC,EAAGkmG,EAAoB,EAEjD,MACF,QACE,MAAM,IAAI50G,MAAM,2BAA2Bs0G,KAG/C,OAAOE,CAAe,EAGhB,KAAAiB,uCAAyC,CAC/CH,EACAhB,EACAM,KAEA,IAAIF,EAEJ,OAAQJ,GACN,KAAK,EACHI,EAAiCA,CAAChmG,EAAG6mG,IAC5BD,EAAsBV,EAAqBlmG,EAAG6mG,GAEvD,MACF,KAAK,EACHb,EAAiCA,CAACjmG,EAAG8mG,IAC5BD,EAAsB7mG,EAAGmmG,EAAqBW,GAEvD,MACF,KAAK,EACHb,EAAiCA,CAACjmG,EAAGC,IAC5B4mG,EAAsB7mG,EAAGC,EAAGkmG,GAErC,MACF,QACE,MAAM,IAAI50G,MAAM,2BAA2Bs0G,KAG/C,OAAOI,CAA8B,CApWvC,CAyOQH,iBAAAA,CACN56E,EACAppB,GAEA,MAAMmlG,EAAanlG,EAAUoK,MAAM,EAAG,GAChCg7F,EAAaplG,EAAUoK,MAAM,EAAG,GAChCi7F,EAAarlG,EAAUoK,MAAM,EAAG,GAEhCk7F,EAA4B,CAChCluG,KAAKC,IAAI+xB,EAAgB,IACzBhyB,KAAKC,IAAI+xB,EAAgB,IACzBhyB,KAAKC,IAAI+xB,EAAgB,KAGrBm8E,EAAuB,CAC3BnuG,KAAKC,IAAI8tG,EAAW,IACpB/tG,KAAKC,IAAI8tG,EAAW,IACpB/tG,KAAKC,IAAI8tG,EAAW,KAGtB,GAAItB,GAAQyB,EAA2BC,GACrC,OAAO,EAGT,MAAMC,EAAuB,CAC3BpuG,KAAKC,IAAI+tG,EAAW,IACpBhuG,KAAKC,IAAI+tG,EAAW,IACpBhuG,KAAKC,IAAI+tG,EAAW,KAGtB,GAAIvB,GAAQyB,EAA2BE,GACrC,OAAO,EAGT,MAAMC,EAAuB,CAC3BruG,KAAKC,IAAIguG,EAAW,IACpBjuG,KAAKC,IAAIguG,EAAW,IACpBjuG,KAAKC,IAAIguG,EAAW,KAGtB,OAAIxB,GAAQyB,EAA2BG,GAC9B,OADT,CAGF,EAoFF3B,GAAcx2G,SAAW,YACzB,Y,uDCjZA,MAAMo4G,GAAoB,CACxBC,eAAgB,EAChBC,KAAM,EACNC,OAAQ,GAOV,MAAMC,WAA8B3sF,GAYlCjqB,WAAAA,CACEkqB,EAAY,CAAC,EACbC,EAAmB,CACjBE,cAAe,CACbwsF,kBAAmB,CACjB9vD,SAAS,EACT+vD,eAAgBC,GAAAA,GAA2BC,QAAQC,aACnDC,aAAc,IACdC,aAAc,IACdC,aAAc,KAEhBC,kBACET,GAAsBU,qBAAqBb,eAC7Cc,qBAAsB,CACpB,CAACX,GAAsBU,qBAAqBb,gBAAiB,CAC3De,eAAgB,CACdC,MAAO,CAAE7kF,KAAM,IAAK8kF,UAAW,UAAWC,aAAc,IACxDC,OAAQ,CAAEhlF,KAAM,IAAK8kF,UAAW,UAAWC,aAAc,KACzDE,MAAO,CACLjlF,KAAM,IACN8kF,UAAW,UACXI,UAAW,QACXH,aAAc,KAEhBI,OAAQ,CAAEnlF,KAAM,IAAK8kF,UAAW,UAAWI,UAAW,SACtDE,MAAO,CAAEplF,KAAM,KACfqlF,OAAQ,CAAErlF,KAAM,MAElBslF,aAAc,CACZC,UAAW,OACX1kF,WAAY,QACZqkF,UAAW,QACXM,cAAgBC,GAAQA,EAAM,EAC9BX,UAAW,UACXY,cAAe,GACfC,UAAW,QACXxrB,WAAY,MAGhB,CAAC6pB,GAAsBU,qBAAqBZ,MAAO,CAAC,EACpD,CAACE,GAAsBU,qBAAqBX,QAAS,CACnD6B,YACE,kJAMV73E,MAAMzW,EAAWC,GAlDnB,KAAAsuF,2BAA4B,EAuD5B,KAAAhzE,iBAAmB,KACjBhoC,KAAKi7G,gBACLj7G,KAAKg7G,2BAA4B,CAAI,EAGvC,KAAAjrC,gBAAkB,KAChB/vE,KAAKi7G,eAAe,EAGtB,KAAAhzE,kBAAoB,KAClBjoC,KAAKk7G,aAAa,EAdlBl7G,KAAKm7G,mBAAqB,CAAC,EAC3Bn7G,KAAKg7G,2BAA4B,CACnC,CAeQE,WAAAA,IACmBj/B,EAAAA,GAAAA,uBACgB,GACPliB,eAExB77D,SAASsI,IACjB,MAAM40G,EAAoBp7G,KAAKm7G,mBAAmB30G,EAAS6U,IAC3D,IAAK+/F,EACH,OAGF,MAAM,MAAEv7F,EAAK,kBAAEu5F,GAAsBgC,EACrChC,GAAmBiC,YAAW,GAC9BjC,GAAmB15G,SACnBmgB,GAAOngB,SAEc8G,EAClBo1B,qBACA0/E,2BAA2BC,kBACjBl9F,SACb7X,EAASo1B,qBAAqBvd,gBAEvBre,KAAKm7G,mBAAmB30G,EAAS6U,GAAG,GAE/C,CAEQ4/F,aAAAA,GACN,MACM7/F,GADmB6gE,EAAAA,GAAAA,uBACgB,GAEzC,IAAK7gE,EACH,OAGF,IAAIiT,EAAYjT,EAAgB2+C,eAChC1rC,EAAY+rC,GAA+B/rC,EAAWruB,KAAKotB,eAC3DiB,EAAUnwB,SAASsI,GAAaxG,KAAKw7G,uBAAuBh1G,IAC9D,CAEA,4BAAMg1G,CAAuBh1G,GAC3B,MAAMuB,EAAavB,EAAS6U,GACtBlP,EAAOnM,KAAK4sB,cAAcgtF,kBAE1BE,EAAuB95G,KAAK4sB,cAAcktF,qBAAqB3tG,GAErE,GAAInM,KAAKm7G,mBAAmBpzG,GAAa,CACvC,MAAM,MAAE8X,EAAK,kBAAEu5F,GAAsBp5G,KAAKm7G,mBAAmBpzG,GAE7DvB,EAASi1G,cAAcC,YAAY77F,GACnCu5F,EAAkBiC,YAAW,E,CAG/B,IAAIx7F,EACS,IAAT1T,EACF0T,EAAQ7f,KAAK27G,qBAAqB7B,GAChB,IAAT3tG,EACT0T,EAAQ+7F,GAAAA,GAAAA,cACU,IAATzvG,IACT0T,QAAc7f,KAAK67G,qBAGrB,MAAMC,EAAWt1G,EAASi1G,cACpBM,EAAev1G,EAClBo1B,qBACA0/E,2BAA2BC,mBAExB,QACJjyD,EAAO,eACP+vD,EAAc,aACdI,EAAY,aACZC,EAAY,aACZC,GACE35G,KAAK4sB,cAAcwsF,kBAEjBA,EAAoBE,GAAAA,GAAAA,YAAuC,CAC/Dz5F,QACAm8F,WAAYD,EAAaE,gBACzBC,eAAgBJ,IAGlB1C,EAAkBiC,WAAW/xD,GAC7B8vD,EAAkB+C,kBAAkB9C,GACpCD,EAAkBgD,gBAAgB3C,GAClCL,EAAkBiD,gBAAgB3C,GAClCN,EAAkBkD,gBAAgB3C,GAElCP,EAAkBmD,0BAClBv8G,KAAKm7G,mBAAmBpzG,GAAc,CACpCqxG,oBACAv5F,SAEFk8F,EAAa19F,SACb7X,EAASo1B,qBAAqBvd,SAE9Bre,KAAKg7G,2BAA4B,CACnC,CAEQ,uBAAMa,GACZ,MAAMn4D,EACJ1jD,KAAK4sB,cAAcktF,qBAAqBf,GAAkBG,QACvD6B,YAECyB,QAAiBC,MAAM/4D,GACvBg5D,QAAoBF,EAASE,cAC7BC,EAAYC,GAAAA,GAAAA,cAClBD,EAAUE,mBAAmBH,GAC7BC,EAAU/2E,SAEV,MAAMvjB,EAAWsB,GAAAA,GAAAA,cACjBtB,EAASy6F,YAAYH,EAAU/3F,iBAC/BvC,EAASkC,eAAew4F,iBAAiB,SACzC,MAAMl4F,EAASC,GAAAA,GAAAA,cACfD,EAAOJ,aAAapC,GACpBwC,EAAOm4F,8BAEP,MAAMn9F,EAAQkF,GAAAA,GAAAA,cAGd,OAFAlF,EAAMmF,UAAUH,GAChBhF,EAAMo9F,QAAQ,KACPp9F,CACT,CAEQ87F,oBAAAA,CAAqB7B,GAC3B,MAAMj6F,EAAQq9F,GAAAA,GAAAA,cAoBd,OAnBAr9F,EAAMs9F,gBAAgB,IAAKrD,EAAqBW,eAChD56F,EAAMu9F,qBAAqB,IACtBtD,EAAqBC,eAAeC,QAEzCn6F,EAAMw9F,sBAAsB,IACvBvD,EAAqBC,eAAeI,SAEzCt6F,EAAMy9F,qBAAqB,IACtBxD,EAAqBC,eAAeK,QAEzCv6F,EAAM09F,sBAAsB,IACvBzD,EAAqBC,eAAeO,SAEzCz6F,EAAM29F,qBAAqB,IACtB1D,EAAqBC,eAAeQ,QAEzC16F,EAAM49F,sBAAsB,IACvB3D,EAAqBC,eAAeS,SAElC36F,CACT,CAEA,8BAAM69F,GACJ,MAAMC,EAAOT,GAAAA,GAAAA,eACP,eAAEnD,EAAc,aAAEU,GAAiBz6G,KAAK4sB,cAAcgxF,cAW5D,OATAD,EAAKR,gBAAgB1C,GAErB57G,OAAOwE,KAAK02G,GAAgB77G,SAASuV,IACnC,MAAMoqG,EAAa,MACjBpqG,EAAIqqG,OAAO,GAAGC,cAAgBtqG,EAAIgK,MAAM,iBAE1CkgG,EAAKE,GAAY9D,EAAetmG,GAAK,IAGhCkqG,CACT,G,GA7OIxE,IAEG6E,KAAO,EACP78D,GAAA88D,KAAO,EACP98D,GAAA+8D,QAAU,EAIV/8D,GAAA04D,qBAAuBd,GAwOhCI,GAAsBx4G,SAAW,oBACjC,YC5LA,SAlEA,SACEyC,EACA+6G,EACAz0F,EAAU,CAAC,GAEX,MAAM00F,EAAe,GA+BrB,OA9BAh7G,EAAYlF,SAASb,IACnB,MAAM,KAAE+c,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,SAElB,UAAEyL,EAAS,WAAEqB,GAAe8zE,EAElC,IAAIE,EAAcpzG,EAElB,GAAImP,EAAKN,aAAam8F,iBAAkB,CACtC,MAAM,iBAAEA,GAAqB77F,EAAKN,YAClCukG,EAAc,GAAGn4F,UAAU+vF,E,CAG7B,MAAMjB,EAAsBqJ,EAAY/wG,KACrCzF,GAAU6N,GAAAA,UAAAA,sBAA8BszB,EAAWnhC,KAEtD,IAAI6qC,EAAY2D,GAA0B2+D,EAAqB3qE,GAI3D3gB,EAAQirB,qBAAuBv6B,EAAKN,aAAam8F,mBACnDvjE,EAAY4rE,GACV5rE,EACAhpB,EAAQirB,qBAIZypE,EAAavgH,KAAK60C,EAAU,IAGF,IAAxB0rE,EAAaz+G,OACRy+G,EAAa,GAKJA,EAAazvG,QAC7B,CAAC4vG,EAAapuF,KACL,CACLwiB,KAAMloC,KAAK8U,IAAIg/F,EAAY5rE,KAAMxiB,EAAawiB,MAC9CE,KAAMpoC,KAAK8U,IAAIg/F,EAAY1rE,KAAM1iB,EAAa0iB,MAC9CE,KAAMtoC,KAAK8U,IAAIg/F,EAAYxrE,KAAM5iB,EAAa4iB,MAC9CH,KAAMnoC,KAAK6iC,IAAIixE,EAAY3rE,KAAMziB,EAAayiB,MAC9CE,KAAMroC,KAAK6iC,IAAIixE,EAAYzrE,KAAM3iB,EAAa2iB,MAC9CE,KAAMvoC,KAAK6iC,IAAIixE,EAAYvrE,KAAM7iB,EAAa6iB,SAGlD,CACEL,KAAMmC,IACNjC,KAAMiC,IACN/B,KAAM+B,IACNlC,MAAOkC,IACPhC,MAAOgC,IACP9B,MAAO8B,KAKb,ECiBA,SAnDA,SACEuZ,EACAtlB,EACAkkB,EACAvjC,GAEA,MAAMtmB,EAAcirD,EAAe/gD,KAAKnN,GAC/BwE,GAAoBxE,KAK7B,IAAIuyC,GAuBN,SAA8BtvC,GAC5B,MAAMo7G,EAAiB,CACrB9I,GAA0B/0G,SAC1Bg1G,GAAkCh1G,UAGpC,IAAK,MAAMtD,KAAc+F,EAAa,CACpC,MAAM8C,EAAO7I,EAAWyD,SAASH,SACjC,IAAK69G,EAAev4F,SAAS/f,GAC3B,MAAM,IAAIpD,MACR,uH,CAIR,CAvCE27G,CAAqBr7G,GAGrB,IAAK,IAAImK,EAAI,EAAGA,EAAI0/C,EAA2BttD,OAAQ4N,IAAK,CAGxD0/C,EAA2B1/C,GAAG4R,OAAOsM,gBAAgB9rB,SACpCopC,EAAmBtd,gBAAgB9rB,QAAgB,IAAN4N,IAC9DmlC,EAAYgsE,GACVt7G,EACA6pD,EAA2B1/C,GAAG4R,OAC9BuK,G,CAWN,OANiCi1F,GAC/B51E,EACAkkB,EACA,IAAKvjC,EAASgpB,aAIlB,ECRA,SAlDA,SACEksE,EACArmG,EAAe,EACf0C,EAAW,kBAEX2jG,EAAU1gH,SAAQ,EAAGmV,YAAWg3B,aAAYD,SAAQE,cAClD,KACG50B,GAAAA,UAAAA,QAAgB20B,EAAYu0E,EAAU,GAAGv0E,aACzC30B,GAAAA,UAAAA,QAAgBrC,EAAWurG,EAAU,GAAGvrG,YACxCqC,GAAAA,UAAAA,QAAgB40B,EAASs0E,EAAU,GAAGt0E,UACtC50B,GAAAA,UAAAA,QAAgB00B,EAAQw0E,EAAU,GAAGx0E,SAEtC,MAAM,IAAItnC,MAAM,8C,IAIpB,MAAM+7G,EAAWD,EAAU,GAGrBE,EAAa,IAAIC,EADJF,EAASpzF,gBAAwBlpB,aACnBs8G,EAASpzF,gBAAgB9rB,QAE1Di/G,EAAU1gH,SAAS2gH,IACjB,MAAM5rE,EAAa4rE,EAASpzF,gBAC5B,IAAK,IAAIle,EAAI,EAAGA,EAAI0lC,EAAWtzC,OAAQ4N,IACjC0lC,EAAW1lC,KAAOgL,IACpBumG,EAAWvxG,GAAKgL,E,IAKtB,MAAMmR,EAAU,CACdupB,WAAY6rE,EACZh+G,SAAU+9G,EAAS/9G,SACnBwpC,QAASu0E,EAASv0E,QAClBF,OAAQy0E,EAASz0E,OACjB/2B,UAAWwrG,EAASxrG,UACpBg3B,WAAYw0E,EAASx0E,YAWvB,OANqB20E,GAAAA,aAAAA,kBACnBt1F,EACAzO,GAJmB,EASvB,ECnDc,SAAUgkG,GACtBj2F,EACAjS,GAEA,GAAQiS,IACDk2F,GAA2B3pG,SAC9B,OzNGN,SAA+BwB,GAC7B,OACEA,GACgC,kBAAzBA,EAAO1C,eACuB,iBAA9B0C,EAAOzC,oBACyB,iBAAhCyC,EAAOxC,sBACe,kBAAtBwC,EAAOrC,YACuB,kBAA9BqC,EAAOjC,oBACc,iBAArBiC,EAAOpC,WACsB,iBAA7BoC,EAAOnC,mBACmB,iBAA1BmC,EAAOvC,gBAC2B,iBAAlCuC,EAAOtC,sBAElB,CyNhBa0qG,CAAsBpoG,GAE7B,MAAM,IAAIjU,MAAM,gCAAgCkmB,IAEtD,CCZc,SAAUo2F,GACtBhpG,GAEA,MAAQjK,KAAM6c,GAAuB5S,EACrC,GAAQ4S,IACDk2F,GAA2B3pG,SAC9B,OAAOR,KAEP,MAAM,IAAIjS,MAAM,gCAAgCkmB,IAEtD,CCCe9N,eAAemkG,GAAgCC,GAiB5D,MAAM,WAAEv3G,EAAU,kBAAEC,EAAiB,QAAE0hB,GAAY41F,EACnD,IAAI,eAAEppG,GAAmBopG,EACzB,MAAM18G,GAAiBie,EAAAA,GAAAA,wBAAuB9Y,EAAYC,GAE1D,IAAKpF,EACH,MAAM,IAAIE,MAAM,oBAGlB,MAAM,SAAE0D,GAAa5D,EACrB,KAAM4D,aAAoB24B,GAAAA,gBACxB,MAAM,IAAIr8B,MAAM,6CAGlB,MAAM,IAAEN,GAAQgE,EAASyY,kBASzB,QAPuB3b,IAAnB4S,IAEFA,EAAiB,GAAG1T,wBAClBknB,GAASzO,UAAYvF,GAAAA,UAAAA,SAAiB+H,MAAM,EAAG,MAI/CiM,EAAS,CAGX,MAAM4oC,GAAaxsD,EAAAA,GAAAA,YAAW4jB,SACxBs1F,GAAAA,aAAAA,kBAA+B1sD,EAAYp8C,E,KAC5C,CAEL,MAAQ1T,IAAKyY,GAAazU,EAASyY,wBAC7B+/F,GAAAA,aAAAA,4BAAyC/jG,EAAU,CACvDA,SAAU/E,G,CAId,OAAOA,CACT,CC5DM,SAAUqpG,GACdhpG,EACA8yC,EACA1oD,GAEA,MAAM8f,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,OAG8B+rC,GAAsBj2C,EAAa5V,GAE3CzC,SAAS69B,IAC/BA,EAAKnP,cAAcy8B,UAAYA,EAG/BttB,EAAKqwB,uBAAuB,IAI9B,MAAMzrC,EAAgBF,EAAUO,mBAE1Bw+F,EAAqB3gH,OAAOwE,KAAKsd,GAAerT,KACnDmG,GAAQkN,EAAclN,KAGzB,IAAK+rG,EAAmB7/G,OACtB,OAGF,MAAM,kBAAEqI,GAAsBw3G,EAAmB,GAI3ClzC,EAAc7rD,EAAUwmD,iBAExB7rD,GAAkBwgB,EAAAA,GAAAA,oBAAmB5zB,GAE3C29D,GAAsCvqD,EAAiBkxD,EACzD,CASM,SAAUmzC,GACdlpG,EACA5V,GAEA,MAAM8f,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,OAGF,MAAMgsC,EAAgBhsC,EAAUyqB,eAEhC,IAAKrsC,OAAOwE,KAAKopD,GAAe9sD,OAC9B,OAGF,MAGM+/G,EAH0BlzD,GAAsBj2C,EAAa5V,GAGjB,GAElD,OAAK++G,EAKEA,EAAkB9yF,cAAcy8B,eALvC,CAMF,CCnFM,SAAUs2D,GACdppG,EACA2iC,EACA0mE,EAAqC,CAAE3mE,WAAW,IAElD,MAAMx4B,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,OAGF,MAAMo/F,EAA0BrzD,GAAsBj2C,GAChDqW,EAAgB,IACjBgzF,UACet8G,IAAd41C,GAA2B,CAAEA,cAGnC2mE,EAAwB3hH,SAAS69B,IAC/BA,EAAKnP,cAAcurB,8BAA8Ba,UAAY,IACxDjd,EAAKnP,cAAcurB,8BAA8Ba,aACjDpsB,EACJ,IAIH,MAAMjM,EAAgBF,EAAUO,mBAEhC,IAAKL,EAAchhB,OACjB,OAGF,MAAM,kBAAEqI,GAAsB2Y,EAAc,GAItC2rD,EAAc7rD,EAAUwmD,iBAExB7rD,GAAkBwgB,EAAAA,GAAAA,oBAAmB5zB,GAE3C29D,GAAsCvqD,EAAiBkxD,EACzD,CAEM,SAAUwzC,GAA8BvpG,GAC5C,MAAMkK,EAAYC,GAAanK,GAE/B,QAAkBjT,IAAdmd,EACF,OAGF,MAAMgsC,EAAgBhsC,EAAUyqB,eAEhC,IAAKrsC,OAAOwE,KAAKopD,GAAe9sD,OAC9B,OAGF,MACM+/G,EAD0BlzD,GAAsBj2C,GACJ,GAElD,OAAKmpG,EAKEA,EAAkB9yF,cAAcurB,8BAA8Ba,UAClEE,eANH,CAOF,CCyDA,SA5GA,SACEnQ,EACAg3E,EACA9yD,EACAS,GAEA,MAAMza,EAAalK,EAAmBtd,iBAGhC,cAAE2hC,EAAa,eAAED,GAAmBH,GACxCjkB,EACAkkB,GA+BF,OAnBAE,EAAejvD,SAAS2vD,IACtB,MAAM,WAAER,GAAeQ,EAEnBR,IAAepa,EAAWtzC,OAmElC,SACEszC,EACA8sE,EACAlyD,GAEA,MAAM,gBAAEP,EAAe,MAAEC,EAAK,MAAEC,GAAUK,EAE1C,IAAK,IAAItgD,EAAI,EAAGA,EAAI0lC,EAAWtzC,OAAQ4N,IACrC,GAAI0lC,EAAW1lC,KAAOwyG,EAAmB,CACvC,MAAM5+G,EAAQmsD,EAAgB//C,GAC9B0lC,EAAW1lC,GAAKpM,GAASosD,GAASpsD,GAASqsD,EAAQuyD,EAAoB,C,CAG7E,CA/EMC,CAAsB/sE,EAAY8sE,EAAmBlyD,GAkB3D,SACE5a,EACA8sE,EACAlyD,EACAV,EACAC,EACAM,GAEA,MAAM,UAAE1kB,EAAS,MAAEukB,EAAK,MAAEC,EAAK,WAAEnjB,GAAewjB,EAEhD,IAAI9pD,EAAO4pD,EAAU7vB,EAErB,IAAK,IAAIvwB,EAAI,EAAGA,EAAI0lC,EAAWtzC,OAAQ4N,IACrC,GAAI0lC,EAAW1lC,KAAOwyG,EAAmB,CACvC,MAAMjyD,EAAgBnB,GACpB3jB,EACAqB,EACA8iB,EAAeC,GAAe9iB,QAC9B6iB,EAAeC,GAAepkB,UAAU0kE,SAASngG,IAG7CygD,EAAkBA,EAAG7sD,YACzB4C,GAAgB,EACZ5C,GAAS28B,EAAMyvB,OAASpsD,GAAS28B,EAAM0vB,QACzCG,GAAsB,E,EAI1B5pD,EAAQ,EACR4pD,EAAW,EACX7vB,EAAQ,CAAEyvB,QAAOC,SACjB,IAAIO,GAAc,EAGlBvb,GACExJ,GACA,KAAM,GACNglB,EACAF,GAGFC,EAA8B,IAAhBL,EAAoBC,EAAW,EAAIA,IAAa5pD,EAC9DkvC,EAAW1lC,GAAKwgD,EAAcgyD,EAAoB,C,CAIxD,CA9DME,CACEhtE,EACA8sE,EACAlyD,EACAV,EACAC,EACAM,E,IAKNh0C,GAAgCqvB,EAAmB9tB,UAE5C8tB,CACT,ECtDc,SAAUm3E,GAAwBtnD,GAI9C,IAAIkF,EAAc,GAClB,MAAMqiD,EAAevnD,EAAO,GAAK,EAAI,IAAM,IACrCwnD,EAAexnD,EAAO,GAAK,EAAI,IAAM,IACrCynD,EAAeznD,EAAO,GAAK,EAAI,IAAM,IAGrCluD,EAAM,CAACD,KAAKC,IAAIkuD,EAAO,IAAKnuD,KAAKC,IAAIkuD,EAAO,IAAKnuD,KAAKC,IAAIkuD,EAAO,KAEjE0nD,EAAM,KAEZ,IAAK,IAAI/yG,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAI7C,EAAI,GAAK41G,GAAO51G,EAAI,GAAKA,EAAI,IAAMA,EAAI,GAAKA,EAAI,GAClDozD,GAAeqiD,EACfz1G,EAAI,GAAK,OACJ,GAAIA,EAAI,GAAK41G,GAAO51G,EAAI,GAAKA,EAAI,IAAMA,EAAI,GAAKA,EAAI,GACzDozD,GAAesiD,EACf11G,EAAI,GAAK,OACJ,GAAIA,EAAI,GAAK41G,GAAO51G,EAAI,GAAKA,EAAI,IAAMA,EAAI,GAAKA,EAAI,GACzDozD,GAAeuiD,EACf31G,EAAI,GAAK,OACJ,GAAIA,EAAI,GAAK41G,GAAO51G,EAAI,GAAK41G,GAAO51G,EAAI,KAAOA,EAAI,GACxDozD,GAAeqiD,EAAeC,EAC9B11G,EAAI,GAAK,EACTA,EAAI,GAAK,OACJ,GAAIA,EAAI,GAAK41G,GAAO51G,EAAI,GAAK41G,GAAO51G,EAAI,KAAOA,EAAI,GACxDozD,GAAeqiD,EAAeE,EAC9B31G,EAAI,GAAK,EACTA,EAAI,GAAK,MACJ,MAAIA,EAAI,GAAK41G,GAAO51G,EAAI,GAAK41G,GAAO51G,EAAI,KAAOA,EAAI,IAKxD,MAJAozD,GAAesiD,EAAeC,EAC9B31G,EAAI,GAAK,EACTA,EAAI,GAAK,C,CAMb,OAAOozD,CACT,CC5Cc,SAAUyiD,GACtBC,GAEA,IAAIC,EAAWD,EAAkBpiF,QAAQ,IAAK,KAS9C,OAPAqiF,EAAWA,EAASriF,QAAQ,IAAK,KACjCqiF,EAAWA,EAASriF,QAAQ,IAAK,KACjCqiF,EAAWA,EAASriF,QAAQ,IAAK,KACjCqiF,EAAWA,EAASriF,QAAQ,IAAK,KACjCqiF,EAAWA,EAASriF,QAAQ,IAAK,KACjCqiF,EAAWA,EAAS1C,cAEb0C,CACT,CCjBA,IAAK3jH,IAAL,SAAKA,GACHA,EAAA,6CACAA,EAAA,4CACD,CAHD,CAAKA,KAAAA,GAAM,KAKX,YCLM6H,GAA4C,CAAC,EAEnD,SAAS+7G,GAAa/9G,EAAyByX,GAC7C,MAAMxX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,GAAenF,EACvB+B,GAAMoD,GAAcqS,CACtB,CAEA,SAASumG,GAAah+G,GACpB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,GAAenF,EACvB,OAAO+B,GAAMoD,EACf,CCEA,MAAM,eAAE64G,IAAmB37G,GAAAA,OACrB,aAAEpF,IAAiB6V,GAAAA,UAEnBw3B,IAAY,EACZiE,IAAO,EACP0vE,GAA2B,IAAIvkG,IASrC,SAASwkG,GACPn+G,EACAo+G,GAEA,IAAIC,EACAC,EAEJ,QAAgB39G,IAAZX,EACF,MAAM,IAAIG,MAAM,2CAGlB,MAAMF,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEzC,IAAKC,EACH,MAAM,IAAIE,MACR,iEAKJi+G,EAAgBG,mBACdH,EAAgBG,qBAAsB,EAExC,MAAM,SAAE16G,GAAa5D,EACfuc,EAASgiG,GAAuB36G,GAChC46G,EAoXR,SACE56G,EACAu6G,GAEA,GAAIv6G,aAAoB0V,GAAAA,cACtB,OAnHJ,SACE1V,EACA66G,GAEA,MAAM1rC,EAAWnvE,EAAS8nC,cAE1B,MAAO,CACL,kBAAI+C,GACF,OAAOskC,EAASh2E,MAClB,EACA,oBAAI2xC,GACF,OAAO9qC,EAAS2rC,uBAClB,EACA,0BAAImvE,GAEF,OAAO,CACT,EACAC,qBAAsB,EACtBxwE,MAAAA,CAAOvmC,GAEHxK,KAAKuhH,sBAAwBF,GAC7B76G,EAASg7G,iBAAmBZ,GAAea,SAE3CzhH,KAAKuhH,wBAGPvhH,KAAKuhH,qBAAuB,EAC5BxwE,GAAOvqC,EAAU,CAAEgE,QAAO0mC,gBAAiBhE,KAC7C,EAEJ,CAqFWw0E,CACLl7G,EACAu6G,EAAgBM,iBAAmB,IAIvC,GAAI76G,aAAoB24B,GAAAA,eAAgB,CACtC,MAAMhgB,EAASgiG,GAAuB36G,GAEtC,OAAIu6G,EAAgBG,oBAAsB/hG,GAAQwiG,kBAnCtD,SACExiG,GAEA,MAAO,CACL,kBAAIkyB,GACF,OAAOlyB,EAAOyiG,aAChB,EACA,oBAAItwE,GACF,OAAOnyB,EAAO0iG,cAChB,EACA,0BAAIP,GAEF,OAAO,CACT,EACAvwE,MAAAA,CAAOvmC,GAEL2U,EAAO0iG,gBAAkBr3G,CAC3B,EAEJ,CAiBas3G,CACsB3iG,GA9FnC,SACE3Y,EACA2Y,GAEA,MAAM,SAAElE,GAAakE,EACf4iG,EAAmB,CACvBtlF,gBAAiBQ,GAAAA,GAAAA,SACjB+kF,WAAY,MAGRC,EAAgBA,KACpB,MAAM55G,EAAS7B,EAAS44B,YAQxB,IANG2iF,EAAiBC,aACjB/kF,GAAAA,GAAAA,OAAY50B,EAAOo0B,gBAAiBslF,EAAiBtlF,iBAKvC,CACf,MAAMulF,EAAatsG,GAAAA,UAAAA,4BACjBlP,EACAyU,GAGF8mG,EAAiBtlF,gBAAkBp0B,EAAOo0B,gBAC1CslF,EAAiBC,WAAaA,C,CAGhC,OAAOD,EAAiBC,UAAU,EAGpC,MAAO,CACL,kBAAI3wE,GACF,OAAO4wE,IAAgB5wE,cACzB,EACA,oBAAIC,GACF,OAAO2wE,IAAgB3wE,gBACzB,EACA,0BAAIgwE,GACF,MAAMj5G,EAAS7B,EAAS44B,YAClB8iF,EAAwB/iG,EAAO9L,UAClCoK,MAAM,EAAG,GACTnQ,KAAKiE,IAAOA,IACTksB,EAAMR,GAAAA,GAAAA,IAASilF,EAAuB75G,EAAOo0B,iBAInD,OAAO0lF,GAAAA,GAAAA,OAAgB1kF,EAAK,EAC9B,EACAsT,MAAAA,CAAOvmC,GACLy3G,IAAgB3wE,kBAAoB9mC,EACpCumC,GAAOvqC,EAAU,CAAEgE,SACrB,EAEJ,CA2CW43G,CAAqC57G,EAAU2Y,E,CAGxD,MAAM,IAAIrc,MAAM,wBAClB,CA5Y0Bu/G,CAAuB77G,EAAUu6G,GACzD,IAAIuB,EAAe3B,GAAah+G,GAEhC,MAAM4/G,EACJxB,EAAgBG,oBAAsB/hG,GAAQwiG,kBA0ChD,GAtCIY,GACFC,GAAuB7/G,GAGpB2/G,EAiBHG,GAAU9/G,EAAS4/G,IAhBnBD,EAAe,CACbI,gBAAYp/G,EACZq/G,gBAAiB,GACjBC,wBAAoBt/G,EACpBu/G,uBAAuB,EACvBC,sBAAsB,EACtBC,gBAAiBhC,EAAgBgC,sBAAmBz/G,EACpD0/G,MAAOjC,EAAgBkC,gCAAkC,EACzDxe,QAASsc,EAAgBtc,UAAW,EACpCtzD,KAAM4vE,EAAgB5vE,OAAQ,GAEhCuvE,GAAa/9G,EAAS2/G,IAQxBA,EAAapB,mBAAqBH,EAAgBG,oBAIhDH,EAAgB4B,gBAAkB,GAClC5B,EAAgB4B,gBAAkB,KAElCL,EAAaK,gBAAkBprF,OAAOwpF,EAAgB4B,iBACtDL,EAAa7d,QAAU6d,EAAaK,gBAAkB,EAEtDL,EAAaO,uBAAwB,IAKE,IAAvCP,EAAaO,uBACbP,EAAaS,iBACbT,EAAaS,gBAAgBpjH,SAAWyhH,EAAgB/vE,gBACxD+vE,EAAgBE,uBAChB,CACA,MAAM,SAAE4B,EAAQ,cAAEC,GAqItB,SAA8BvqD,EAAkBoqD,GAC9C,IAAIz1G,EACA61G,EACAC,EACAhlD,EAAM,EACV,MAAMilD,EAAQ1qD,EAAOj5D,OACfujH,EAAW,GAGjB,IAAIC,GAAgB,GAEC,iBAAVH,GAAsBA,GAAS,KACxCA,EAAQ,GAIV,IAAKz1G,EAAI,EAAGA,EAAI+1G,EAAO/1G,IAErB81G,EAAS9rF,OAAOqhC,EAAOrrD,IAAMy1G,EAAS,EACtCE,EAASrlH,KAAKwlH,GACJ,IAAN91G,EAEF61G,EAASC,EACAA,IAAUD,IACnBD,GAAgB,GAGlB9kD,GAAOglD,EAGLH,EAASvjH,OAAS,IAIlB0jH,EAHEF,EAGO9kD,EAAM6kD,EAASvjH,OAAU,EAE1BujH,EAAS,GAGnBA,EAASrlH,KAAKwlH,IAGhB,MAAO,CAAEH,WAAUC,gBACrB,CAhLwCI,CAClCjB,EAAaS,gBACbT,EAAaU,OAGfhC,EAAmBkC,EACnBjC,EAAwBkC,C,CAI1B,MAAMK,EAAiBA,KACrB,MAAM,eAAEnyE,EAAc,iBAAEC,GAAqB8vE,EAC7C,IAAIqC,EAAenyE,GAAoBgxE,EAAa7d,SAAW,EAAI,GAInE,IAAKtzD,KAFHsyE,EAAe,GAAKA,GAAgBpyE,GAED,CAGnCoxE,GAAU9/G,EAAS4/G,GAEnB,MAAMr/G,EAAc,CAAEP,WAGtB,YADA9C,GAAa8C,EAAS+gH,GAAYC,aAAczgH,E,CAK9CugH,GAAgBpyE,EAClBoyE,EAAe,EACNA,EAAe,IACxBA,EAAepyE,EAAiB,GAGlC,MAAM7mC,EAAQi5G,EAAenyE,EAEzB9mC,GACF42G,EAAgBrwE,OAAOvmC,E,EAIvB+3G,GACF1B,GAAyB7hH,IAAImgB,EAAOlE,SAAUtY,GAM9Cq+G,GACAA,EAAiBrhH,OAAS,GAC1BshH,GAEAqB,EAAaQ,sBAAuB,EACpCR,EAAaI,WAAar7G,OAAOkE,YAC/B,SAASq4G,IACPtB,EAAaI,WAAar7G,OAAOkE,WAC/Bq4G,EACA5C,EAAiBI,EAAgB9vE,mBAEnCkyE,GACF,GACA,KAIFlB,EAAaQ,sBAAuB,EACpCR,EAAaI,WAAar7G,OAAOw8G,YAC/BL,EACA,IAAO/4G,KAAKC,IAAI43G,EAAaK,mBAIjC,MAAMz/G,EAAc,CAClBP,WAGF9C,GAAa8C,EAAS+gH,GAAYI,aAAc5gH,EAClD,CAMA,SAAS6gH,GAASphH,GAChB8/G,GAAU9/G,GAAS,EACrB,CAEA,SAAS8/G,GAAU9/G,EAAyBqhH,GAC1C,MAAMphH,GAAiBC,EAAAA,GAAAA,mBAAkBF,GACzC,IAAKC,EACH,OAEF,MAAM,SAAE4D,GAAa5D,EACfqhH,EAAetD,GAAan6G,EAAS7D,SAEvCshH,GAwFN,SAA2B3B,GACzB,MAAMjnG,EAAKinG,EAAaI,gBAEN,IAAPrnG,IACTinG,EAAaI,gBAAap/G,EACtBg/G,EAAaQ,qBACf54G,aAAamR,GAEb6oG,cAAc7oG,GAGpB,CAlGI8oG,CAAkBF,GAGhBD,GAAmBx9G,aAAoBgoB,GAAAA,oBACzCg0F,GAAuB7/G,EAE3B,CAMA,SAAS6/G,GAAuB7/G,GAC9B,MAAM,SAAE6D,IAAa3D,EAAAA,GAAAA,mBAAkBF,GACjCwc,EAASgiG,GAAuB36G,GAKtC,GAAI2Y,GAAQwiG,kBAAmB,CAC7B,MAAMyC,EAAqBvD,GAAyB3hH,IAAIigB,EAAOlE,UAE/D4lG,GAAyBnhH,OAAOyf,EAAOlE,UAEnCmpG,GAAsBA,IAAuBzhH,GAC/CohH,GAAyBK,E,CAG/B,CA+EA,SAASjD,GAAuB36G,GAC9B,MAAM69G,EARR,SAAiC79G,GAC/B,OAAOA,EACJ6gB,YACA/Z,KAAKuS,GAAUhB,GAAAA,MAAMC,UAAUe,EAAMrd,OACrC5B,QAAQue,KAAaA,GAC1B,CAGkBmlG,CAAwB99G,GAGxC,OAFsB69G,EAAQluG,MAAMgJ,GAAWA,EAAOwiG,qBAE9B0C,EAAQ,EAClC,CCxQc,SAAUE,GACtB3hH,EACAvF,EACAg9F,GAGA,GApDF,SACEz3F,EACAvF,EACAg9F,GAEA,IAAKh9F,GAAY+c,MAAMm+E,UAAY8B,GAAwB,EACzD,OAAO,EAGT,IAAKz3F,EAAe4D,SAClB,OAAO,EAGT,MAAM,kBAAEwB,EAAiB,WAAED,EAAU,oBAAEhF,GAAwBH,EACzD6d,EAAYsZ,GAChBhyB,EACAC,GAGF,GAAI3K,EAAWyD,SAASiC,sBAAwBA,EAC9C,OAAO,EAGT,IAAK0d,EACH,OAAO,EAGT,MAAM0Z,EAAe1Z,EAAU2Z,gBAAgB/8B,EAAWyD,SAASH,UAGnE,QAAMw5B,aAAwBqrE,KAK5BrrE,EAAaigD,WACbjgD,EAAaopE,eACbppE,EAAagoE,eAEjB,CAcIqiB,CAA2B5hH,EAAgBvF,EAAYg9F,GAEvD,OAAO,EAGT,MAAM,SAAE7zF,GAAa5D,EAGfu9D,EAAe9iE,EAAW+c,KAAKm+E,SAASjrF,IAAI9G,EAAS29B,eACrDsgF,EACJvqB,GACE/5B,EACA,EACAA,EAAaxgE,OACb06F,GAIJ,OAAIoqB,IAA6BtkD,IAIjC9iE,EAAW+c,KAAKm+E,SAAWksB,EAAyBn3G,IAClD9G,EAASsB,gBAGJ,EACT,CCpFA,UACEy8G,sBAAqBA,ICDjB5/G,GAA6B,CAAC,EAEpC,SAAS+7G,GAAa/9G,EAAyByX,GAC7C,MAAMxX,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,GAAenF,EACvB+B,GAAMoD,GAAcqS,CACtB,CAEA,SAASumG,GAAah+G,GACpB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,WAAEoF,GAAenF,EACvB,OAAO+B,GAAMoD,EACf,CCXO,MAAM28G,GAAcz/G,GAAAA,MAAAA,YAAkB0/G,SAChCC,GAAW,EAElB,SAAU9mF,GAAM+mF,EAAQC,GAG5BD,EAASp6G,KAAKqpD,MAAM+wD,IAAW,EAG/B,MAAME,EAAM,GACZ,IAAItqE,GAHJqqE,EAAUr6G,KAAKqpD,MAAMgxD,IAAY,GAGfD,EAAS,EAE3B,GAAIpqE,GAAK,EACP,OAAOsqE,EAGT,KAAOtqE,KACLsqE,EAAItqE,GAAKqqE,IAGX,OAAOC,CACT,CAmBM,SAAUC,GAAariH,GAC3B,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEzC,IAAKC,EAEH,OAAO,KAGT,MAAM,SAAE4D,GAAa5D,EAErB,KAAM4D,aAAoB0V,GAAAA,eACxB,MAAM,IAAIpZ,MACR,oGAIJ,MAAO,CACLmiH,oBAAqBz+G,EAASg/B,yBAC9BmwC,SAAUnvE,EAAS8nC,cAEvB,CAEM,SAAU42E,GAAyBviH,GACvC,OAAO,SAAUyJ,GACf,MAAMu9B,EAAYv9B,EAAE7O,OAKpB,IAAI4nH,EAEJ,IAEEA,EAAYH,GAAariH,E,CACzB,MAAOkjC,GACP,M,CAGF,IAAKs/E,IAAcA,EAAUxvC,UAA0C,IAA9BwvC,EAAUxvC,SAASh2E,OAC1D,OAGF,MACMs3G,EADQkO,EACaxvC,SAASl6C,QAAQkO,EAAU9tB,SAItD,GAAIo7F,EAAe,EACjB,OAGF,MAAMmO,EAAoBzE,GAAah+G,GAGpCyiH,GACAA,EAAkBhrG,MAClBgrG,EAAkBhrG,KAAKza,QAK1BylH,EAAkBC,iBAAiBxnH,KAAKo5G,EAC1C,CACF,CAEO,MAAMqO,GAAqBvqE,IAChC,MAAMwqE,EAAa,IAAIpoH,IAAY49C,EAAM46B,UACzC,OAAQ6vC,GACNA,EAAer5G,OAASu4G,KACvBa,EAAW7nH,IAAI8nH,EAAeC,kBAAkB5pG,QAAQ,EC9F7D,IAWI6pG,GAXA94F,GAAgB,CAClB+4F,oBAAqB7wE,IAOrB8wE,sBAAsB,GAIxB,MAAMC,GAAqB,GAE3B,SAASC,GAASnjH,GAEhB,MAAMyiH,EAAoBzE,GAAah+G,GAEvC,IAAKyiH,EACH,OAGF,MAAMW,EAAgBX,GAAqB,CAAC,EACtCrqE,EAAQiqE,GAAariH,GAE3B,IAAKo4C,GAAO46B,UAAUh2E,OAEpB,YADA+X,QAAQC,KAAK,uDAIf,MAAM,oBAAEstG,GAAwBlqE,EAMhC,GAHAgrE,EAAcz8D,UAAYy8D,EAAcV,kBAAkB1lH,QAG5B,IAA1BomH,EAAcz8D,QAChB,OAKF,SAAS08D,EAAe/O,GACtB,MAAM7yG,EAAQ2hH,EAAcV,iBAAiB5pF,QAAQw7E,GAEjD7yG,GAAS,GAEX2hH,EAAcV,iBAAiB/gH,OAAOF,EAAO,EAEjD,CAIAghH,EAAkBC,iBAAiBrgC,MAAK,CAACtrC,EAAGC,IAAMD,EAAIC,IA8BtD,GA7B6BosE,EAAcV,iBAAiB5nG,QAEvCvf,SAAQ,SAAU+4G,GACrC,MAAMp7F,EAAUk/B,EAAM46B,SAASshC,GAE/B,IAAKp7F,EACH,QAGepR,KAAKC,IAAIu6G,EAAsBhO,GAQnC,EACPp4F,GAAAA,MAAMonG,mBAAmBpqG,GACzBgD,GAAAA,MAAMqnG,SAASrqG,KAInBmqG,EAAe/O,EAEnB,KAIK8O,EAAcV,iBAAiB1lH,OAClC,OAIGitB,GAAcg5F,sBACjBO,GAAAA,qBAAqBC,kBAAkB1B,IAIzC,MAAM2B,EDrFF,SAAuBtB,EAAKxzG,GAGhC,IAAIu8B,EAAM,EACNC,EAAOg3E,EAAIplH,OAAS,EAUxB,OARAolH,EAAI7mH,SAAQ,CAACy4C,EAAG6C,KACV7C,EAAIplC,EACNu8B,EAAMrjC,KAAK6iC,IAAIkM,EAAK1L,GACX6I,EAAIplC,IACbw8B,EAAOtjC,KAAK8U,IAAIi6B,EAAKzL,G,IAIlB,CAAED,MAAKC,OAChB,CCsEkBu4E,CACdP,EAAcV,iBACdtqE,EAAMkqE,qBAGR,IAAIppG,EACA0qG,EAWJ,IAAIC,EAAaH,EAAQv4E,IACrB24E,EAAcJ,EAAQt4E,KAC1B,MAAM24E,EAAqB,GAE3B,KACEF,GAAc,GACdC,EAAcV,EAAcV,iBAAiB1lH,QAC7C,CACA,MAAMgnH,EAAe5rE,EAAMkqE,oBAQrB2B,IANJD,EAAeZ,EAAcV,iBAAiBmB,GAC9C55F,GAAc+4F,sBAK4Ba,GAAc,EACpDK,IAJJd,EAAcV,iBAAiBoB,GAAeE,EAC9C/5F,GAAc+4F,sBAIOc,EAAcV,EAAcV,iBAAiB1lH,OAEpE,IAAKknH,IAAqBD,EACxB,MAGEA,IACFL,EAAmBR,EAAcV,iBAAiBmB,KAClD3qG,EAAUk/B,EAAM46B,SAAS4wC,GACzBG,EAAmB7oH,KAAKge,IAGtBgrG,IACFN,EAAmBR,EAAcV,iBAAiBoB,KAClD5qG,EAAUk/B,EAAM46B,SAAS4wC,GACzBG,EAAmB7oH,KAAKge,G,CAI5B,MAAMirG,EAAYA,CAACjrG,EAAS6N,IAC1Bq9F,GAAAA,YAAAA,kBAA8BlrG,EAAS6N,IAEnC,iBAAEs9F,IAAqBC,EAAAA,GAAAA,oBAAuBC,UAEpDR,EAAmBxoH,SAAS2d,IAG1B,MAAM6N,EAAU,CACdy9F,aAAc,CACZh7G,KAAM66G,OAAmB1jH,EAAY,gBAEvCovD,SAAU,CACRpJ,SAAS,GAEXo7D,YAAWA,IAGbyB,GAAAA,qBAAqBiB,WACnBN,EAAUr6G,KAAK,KAAMoP,EAAS6N,GAC9Bg7F,GAEA,CACE7oG,WAEF+oG,GAED,GAEL,CAEA,SAASyC,GAAej7G,GAGtBlC,aAAaw7G,IACbA,GAAuBn6G,YAAW,WAChC,MAAM5I,EAAUyJ,EAAE+pE,OAIlB,IACE2vC,GAASnjH,E,CACT,MAAOkjC,GACP,M,CAEJ,GAAGggF,GACL,CAyEA,MAEA,GAFsB,CAAEj6G,OAvExB,SAAgBjJ,GACd,MAAMo4C,EAAQiqE,GAAariH,GAE3B,IAAKo4C,IAAUA,EAAM46B,UAAsC,IAA1B56B,EAAM46B,SAASh2E,OAE9C,YADA+X,QAAQC,KAAK,uDAKf,MAAMytG,EAAoB,CACxBC,iBAAkBvnF,GAAM,EAAGid,EAAM46B,SAASh2E,OAAS,GACnD2pD,SAAS,EACTj2C,UAAW,GAIPi0G,EAAsBlC,EAAkBC,iBAAiB5pF,QAC7Dsf,EAAMkqE,qBAGRG,EAAkBC,iBAAiB/gH,OAAOgjH,EAAqB,GAE/D5G,GAAa/9G,EAASyiH,GAEtBU,GAASnjH,GAETA,EAAQ2H,oBAAoBrF,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAC1D1kH,EAAQqC,iBAAiBC,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAEvD,MAAME,EAAwBrC,GAAyBviH,GAEvD7C,GAAAA,YAAYwK,oBACVrF,GAAAA,MAAAA,OAAauiH,0BACbD,GAEFznH,GAAAA,YAAYkF,iBACVC,GAAAA,MAAAA,OAAauiH,0BACbD,EAEJ,EAgCgC/7G,QA9BhC,SAAiB7I,GACfuH,aAAaw7G,IACb/iH,EAAQ2H,oBAAoBrF,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAE1D,MAAME,EAAwBrC,GAAyBviH,GAEvD7C,GAAAA,YAAYwK,oBACVrF,GAAAA,MAAAA,OAAauiH,0BACbD,GAGF,MAAMnC,EAAoBzE,GAAah+G,GAGnCyiH,GAAqBA,EAAkBC,iBAAiB1lH,SAC1DylH,EAAkB97D,SAAU,EAG5B68D,GAAAA,qBAAqBC,kBAAkB1B,IAE3C,EAUyC+C,iBARzC,WACE,OAAO76F,EACT,EAM2Da,iBAJ3D,SAA0B1W,GACxB6V,GAAgB7V,CAClB,GCxQA,IAUI2uG,GAVA94F,GAAgB,CAClB+4F,oBAAqB7wE,IAErB4yE,UAAW,EACXC,SAAU,EAEVC,qBAAsB,GACtBhC,sBAAsB,GAMxB,MAAMC,GAAqB,EA2D3B,SAASC,GAASnjH,GAChB,MAAMo4C,EAAQiqE,GAAariH,GAC3B,IAAKo4C,GAAO46B,UAAUh2E,OAEpB,YADA+X,QAAQC,KAAK,uDAKf,MAAMytG,EAAoBzE,GAAah+G,GAEvC,IAAKyiH,EACH,OAGF,MAAMW,EAAgBX,GAAqB,CAAC,EAM5C,GAHAW,EAAcz8D,UAAYy8D,EAAcV,kBAAkB1lH,QAG5B,IAA1BomH,EAAcz8D,QAChB,OAKF,SAAS08D,EAAe/O,GACtB,MAAM7yG,EAAQ2hH,EAAcV,iBAAiB5pF,QAAQw7E,GAEjD7yG,GAAS,GAEX2hH,EAAcV,iBAAiB/gH,OAAOF,EAAO,EAEjD,CAIA,MAAMyjH,EAAuB9B,EAAcV,iBAAiB5nG,SACtD,oBAAEwnG,GAAwBlqE,EA6BhC,GA3BA8sE,EAAqB3pH,SAAS+4G,IAC5B,MAAMp7F,EAAUk/B,EAAM46B,SAASshC,GAE/B,IAAKp7F,EACH,QAGepR,KAAKC,IAAIu6G,EAAsBhO,GAQnC,EACPp4F,GAAAA,MAAMonG,mBAAmBpqG,GACzBgD,GAAAA,MAAMqnG,SAASrqG,KAInBmqG,EAAe/O,E,KAMd8O,EAAcV,iBAAiB1lH,OAClC,OAIGitB,GAAcg5F,sBACjBO,GAAAA,qBAAqB2B,eAAexC,GAAkBvqE,IAmDxD,MAAM+rE,EAAYA,CAACjrG,EAAS6N,IAC1Bq9F,GAAAA,YAAAA,kBACqBlrG,EAAS6N,GAC3Bqe,MAAK,IAnDV,SAAsBlsB,GAGpBmqG,EAFqBjrE,EAAM46B,SAASl6C,QAAQ5f,IAG5C,MAAM8P,EAAQ9M,GAAAA,MAAMkpG,8BAA8BlsG,IAC5C,MAAE0wE,GAAUw5B,EACZiC,EAAiBr8F,GAAOA,OAAOq8F,gBAAkB,EACvD,GAAIA,EAAgB,CAClBz7B,EAAM5W,SAAS32E,IAAI6c,EAASmsG,GAC5Bz7B,EAAMy7B,gBAAkBA,EACxB,MAAMC,EAAet8F,GAAOA,OAAOs8F,cAAgB,EACnD17B,EAAM07B,cAAgBA,C,CAGxB,IAAKlC,EAAcV,iBAAiB1lH,QAC9BgsB,GAAOu8F,YAAa,CACtB,MAAM,YAAEA,GAAgBv8F,EAClBw8F,EAAQtpG,GAAAA,MAAMupG,kBAAoB,EAAIF,EAC5C,GAAKnC,EAAcsC,WAKZ,GAAI97B,EAAM5W,SAASl3E,KAAM,CAC9B8tF,EAAM+7B,SAAWh8G,KAAKD,MAAQkgF,EAAM14D,MACpC,MAAM,KAAEp1B,GAAS8tF,EAAM5W,SACvB4W,EAAMg8B,SAAW9pH,EACjBiZ,QAAQ0wC,IACN,kBACAmkC,EAAM+7B,SACN,KACA7pH,EACA,QACA,qBACAg4C,GAAY81C,EAAM+7B,SAAW7pH,GAC7B,KACA,eACAg4C,GAAY81C,EAAM07B,aAAexpH,GACjC,KACA,iBACAg4C,GAAY81C,EAAMy7B,eAAiBvpH,GACnC,K,OAtBF8tF,EAAMi8B,YAAcl8G,KAAKD,MAAQkgF,EAAM14D,MACvC04D,EAAMk8B,YAAcl8B,EAAM5W,SAASl3E,KACnCiqH,GAAgB/lH,EAASwlH,GACzBrC,GAASnjH,E,CAwBjB,CAKgBgmH,CAAa9sG,MAEvB,iBAAEmrG,IAAqBC,EAAAA,GAAAA,oBAAuBC,UAEpDW,EAAqB3pH,SAAS+4G,IAC5B,MAAMp7F,EAAUk/B,EAAM46B,SAASshC,GAGzBvtF,EAAU,CACdy9F,aAAc,CACZh7G,KAAM66G,OAAmB1jH,EAAY,gBAEvCovD,SAAU,CACRpJ,SAAS,GAEXo7D,YAAWA,IAGbyB,GAAAA,qBAAqBiB,WACnBN,EAAUr6G,KAAK,KAAMoP,EAAS6N,GAC9Bg7F,GAEA,CACE7oG,WAEF+oG,GAED,GAEL,CAEA,SAASyC,GAAej7G,GAGtBlC,aAAaw7G,IACbA,GAAuBn6G,YAAW,WAChC,MAAM5I,EAAUyJ,EAAE+pE,OAIlB,IACEuyC,GAAgB/lH,GAChBmjH,GAASnjH,E,CACT,MAAOkjC,GACP,M,CAEJ,GAAGggF,GACL,CAGA,MAEM6C,GAAkBA,CAAC/lH,EAASwlH,KAChC,MAAMptE,EAAQiqE,GAAariH,GAC3B,IAAKo4C,IAAUA,EAAM46B,UAAsC,IAA1B56B,EAAM46B,SAASh2E,OAE9C,YADA+X,QAAQC,KAAK,uDAIf,MAAM,oBAAEstG,GAAwBlqE,EAChC,IAAI,SAAE4sE,EAAW,EAAC,UAAED,EAAY,GAAM96F,GACtC,MAAM,qBAAEg7F,EAAuB,IAAOh7F,GAEhCw4F,EAAoBzE,GAAah+G,IAAY,CACjD0iH,iBAAkB,GAClBJ,sBACA2D,WAAY,EACZt/D,SAAS,EACTj2C,UAAW,EACXk5E,MAAO,CACL14D,MAAOvnB,KAAKD,MACZspE,SAAU,IAAIr5D,IACd0rG,eAAgB,EAChBC,aAAc,EACdY,WAAY,IAGVr+G,EAAQy6G,EAAsBG,EAAkBH,oBAStD,GARAG,EAAkB/xG,UAAmB7I,EA5BZ,GAAK,EAAI,EA6BlC46G,EAAkBH,oBAAsBA,EACxCG,EAAkB97D,SAAU,EAExB87D,EAAkBwD,WAAa,MACjCxD,EAAkBwD,YAAchB,GAG9Bn9G,KAAKC,IAAIF,GAASm9G,IAAan9G,EAIjC,GADA46G,EAAkBwD,WAAa,EAC3BT,EAAO,CAET,MAAMW,EAAmB7D,EAAsBlqE,EAAM46B,SAASh2E,OAC9D+nH,EAAYj9G,KAAKurC,KAAKmyE,EAAQW,GAC9BnB,EAAWl9G,KAAKurC,KAAKmyE,GAAS,EAAIW,IAClC1D,EAAkBiD,WAAY,C,MAE9BjD,EAAkBiD,WAAY,OAEvB79G,EAAQ,GACjBk9G,GAAatC,EAAkBwD,WAC/BjB,EAAW,IAEXA,GAAYvC,EAAkBwD,WAC9BlB,EAAY,GAGd,MAAMqB,EAAWt+G,KAAK6iC,IAAI,EAAG23E,EAAsByC,GAE7CsB,EAAWv+G,KAAK8U,IACpBw7B,EAAM46B,SAASh2E,OAAS,EACxBslH,EAAsB0C,GAIlBtC,EAAmB,GACzB,IAAK,IAAI93G,EAAI03G,EAAsB,EAAG13G,GAAKy7G,EAAUz7G,IACnD83G,EAAiBxnH,KAAK0P,GAExB,IAAK,IAAIA,EAAI03G,EAAsB,EAAG13G,GAAKw7G,EAAUx7G,IACnD83G,EAAiBxnH,KAAK0P,GAExB63G,EAAkBC,iBAAmBA,EAErC3E,GAAa/9G,EAASyiH,EAAkB,EA+B1C,MAOA,GAP6B,CAC3Bx5G,OAtTcjJ,IACd,MAAMo4C,EAAQiqE,GAAariH,GAE3B,IAAKo4C,IAAUA,EAAM46B,UAAsC,IAA1B56B,EAAM46B,SAASh2E,OAE9C,YADA+X,QAAQC,KAAK,uDAIf+wG,GAAgB/lH,GAEhBmjH,GAASnjH,GAETA,EAAQ2H,oBAAoBrF,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAC1D1kH,EAAQqC,iBAAiBC,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAEvD,MAAME,EAAwBrC,GAAyBviH,GAEvD7C,GAAAA,YAAYwK,oBACVrF,GAAAA,MAAAA,OAAauiH,0BACbD,GAEFznH,GAAAA,YAAYkF,iBACVC,GAAAA,MAAAA,OAAauiH,0BACbD,EACD,EA+RD/7G,QA9BF,SAAiB7I,GACfuH,aAAaw7G,IACb/iH,EAAQ2H,oBAAoBrF,GAAAA,MAAAA,OAAa8lC,gBAAiBs8E,IAE1D,MAAME,EAAwBrC,GAAyBviH,GAEvD7C,GAAAA,YAAYwK,oBACVrF,GAAAA,MAAAA,OAAauiH,0BACbD,GAGF,MAAMnC,EAAoBzE,GAAah+G,GAGnCyiH,GAAqBA,EAAkBhrG,KAAKza,SAC9CylH,EAAkB97D,SAAU,EAGhC,EAaEm+D,iBAXF,WACE,OAAO76F,EACT,EAUEa,iBARF,SAA0B1W,GACxB6V,GAAgB7V,CAClB,GC3JA,SAvMA,SACEkyG,EACAv/F,GASA,MAAMw/F,EAASx/F,EAAQy/F,cAAgB,IAClC9qH,MAAM4qH,EAAcrH,eAAev+G,QAMxC,IAAKqmB,EAAQ0/F,eAAiB1/F,EAAQ2/F,gBACpC,MAAM,IAAIvmH,MACR,6DAIJ,GAAI4mB,EAAQ0/F,cAAgB1/F,EAAQ2/F,gBAClC,MAAM,IAAIvmH,MAAM,2DAGlB,GAAI4mB,EAAQ0/F,aAAc,CACxB,MAAMrgF,EAAqBlqB,GAAAA,MAAMC,UAAU4K,EAAQ0/F,eAE5CE,EAAYC,GAiDvB,SAA+BL,EAAQD,EAAelgF,GACpD,MAAQC,UAAWwgF,GAAkBzgF,EAC/B0gF,EAAgB1gF,EAAmBtd,gBAEnCktD,EAAM8wC,EAAc9pH,OAGpB+pH,EAAsB,GAC5BA,EAAoB/pH,OAASg5E,EAC7B,MAAM4wC,EAAY,GAEZl/E,EAAatB,EAAmBsB,WAGtC,IAAIs/E,EAAY,EAChB,IAAK,IAAIp8G,EAAI,EAAGorE,EAAM8wC,EAAc9pH,OAAQ4N,EAAIorE,EAAKprE,IAC1B,IAArBk8G,EAAcl8G,KAChBg8G,EAAU1rH,KAAK,CACb0P,EAAI88B,EAAW,GACf5/B,KAAK4qC,MAAO9nC,EAAI88B,EAAW,GAAMA,EAAW,IAC5C5/B,KAAK4qC,MAAM9nC,GAAK88B,EAAW,GAAKA,EAAW,OAE7Cq/E,EAAoBC,KAAep8G,GAKvCm8G,EAAoB/pH,OAASgqH,EAE7B,MAAMC,EAA+BX,EAAcY,sBAC7CrjG,EAAS,GACTsjG,EACJF,EAA6B,GAAGjqH,SAAWg5E,GAC3C7tE,KAAKE,UAAUi+G,EAAc3+E,WAC3Bx/B,KAAKE,UAAU+9B,EAAmBuB,SAItC,GAAIw/E,EAAc,CAChB,IAAK,IAAIv8G,EAAI,EAAGA,EAAIm8G,EAAoB/pH,OAAQ4N,IAAK,CACnD,MAAMw8G,EAAc,GACpBb,EAAOhrH,SAAS6zD,IACd,MAAMi4D,EAAmBJ,EAA6B73D,GACtDg4D,EAAYlsH,KAAKmsH,EAAiBN,EAAoBn8G,IAAI,IAE5DiZ,EAAO3oB,KAAKksH,E,CAGd,MAAO,CAACvjG,EAAQ+iG,E,CAOlB,MAAM7+E,EAAWA,EACf6J,SAAU01E,EACV9oH,MAAO+oH,EACP51E,SAAU61E,MAGV,GAAiB,IAAbD,EAEF,OAMF,MAAME,EAAmBz9D,GACvBs8D,EAAcjgF,UACdigF,EAAc5+E,WACd4+E,EAAc3+E,QACd2/E,GAKF,IAAIplH,EAAQ,EACZ,MAAMwlH,EAAc,IAAI/tG,IAGxB4sG,EAAOhrH,SAAS6zD,GAAUs4D,EAAYrrH,IAAI+yD,EAAO,KAEjD,MAAMu4D,EAAkBA,EAAGlmH,YACzB,IAAK,IAAImJ,EAAI,EAAGA,EAAI27G,EAAOvpH,OAAQ4N,IAAK,CACtC,MAAMpM,EAAQyoH,EAA6Br8G,GAAGnJ,GACxC2tD,EAAQm3D,EAAO37G,GACrB88G,EAAYrrH,IAAI+yD,EAAOs4D,EAAYnrH,IAAI6yD,GAAS5wD,E,CAElD0D,GAAO,EAGT2tC,GACEy2E,EAAcjgF,WACd,KAAM,GACNshF,EACAF,GAIF,MAAMG,EAAgB,GACtBF,EAAYnsH,SAASmgE,IACnBksD,EAAc1sH,KAAKwgE,EAAMx5D,EAAM,IAGjC0kH,EAAU1rH,KAAKssH,GACf3jG,EAAO3oB,KAAK0sH,EAAc,EAS5B,OAFA/3E,GAAqBg3E,GAAe,KAAM,GAAM9+E,GAEzC,CAAClkB,EAAQ+iG,EAClB,CAtKoCiB,CAC9BtB,EACAD,EACAlgF,GAGF,MAAO,CAACugF,EAAYC,E,CAGtB,GAAI7/F,EAAQ2/F,gBAAiB,CAC3B,MAAMC,EAYV,SAAqCJ,EAAQuB,EAAYtrG,GACvD,MAAM,WAAEkrB,EAAU,UAAErB,GAAc7pB,EAC5B/a,EAAQ4kC,EAAU0hF,aAAaD,GAMrC,GAJArmH,EAAM,GAAKqG,KAAK4qC,MAAMjxC,EAAM,IAC5BA,EAAM,GAAKqG,KAAK4qC,MAAMjxC,EAAM,IAC5BA,EAAM,GAAKqG,KAAK4qC,MAAMjxC,EAAM,KAEvBW,GAAAA,UAAAA,sBAAgCX,EAAOimC,GAC1C,MAAM,IAAIvnC,MAAM,kBAIlB,MAAMkxC,EAAY3J,EAAW,GACvB4J,EAAY5J,EAAW,GAAKA,EAAW,GACvCsgF,EAAgBxrG,EAAO0qG,sBACvB1oH,EAAQ,GAQd,OANA+nH,EAAOhrH,SAAS6zD,IACd,MAAMi4D,EAAmBW,EAAc54D,GACjC64D,EAAcxmH,EAAM,GAAK6vC,EAAY7vC,EAAM,GAAK4vC,EAAY5vC,EAAM,GACxEjD,EAAMtD,KAAKmsH,EAAiBY,GAAa,IAGpCzpH,CACT,CArCuB0pH,CACjB3B,EACAx/F,EAAQ2/F,gBACRJ,GAGF,OAAOK,C,CAIX,ECAA,SArDA,SACEL,EACA6B,EACA3B,GAGA,MAAMD,EAASC,GAAgB,IAAI9qH,MAAM4qH,EAAcrH,eAAev+G,QAChE0nH,EAAY7B,EAAOvpH,OAEzB,GAAIupH,EAAOvpH,QAAU,EACnB,MAAM,IAAImD,MAAM,0CAIlB,MAAMkoH,EAAc/B,EAAcY,sBAE5BoB,EAAcD,EAAY,GAAGrrH,OAC7BurH,EAAa,IAAI3nG,aAAa0nG,GAEpC,GAAIH,IAAc7lH,GAAAA,MAAAA,oBAA0BkmH,IAAK,CAC/C,IAAK,IAAI59G,EAAI,EAAGA,EAAIw9G,EAAWx9G,IAAK,CAClC,MAAM69G,EAAeJ,EAAY9B,EAAO37G,IACxC,IAAK,IAAIwB,EAAI,EAAGA,EAAIk8G,EAAal8G,IAC/Bm8G,EAAWn8G,IAAMq8G,EAAar8G,E,CAGlC,OAAOm8G,C,CAGT,GAAIJ,IAAc7lH,GAAAA,MAAAA,oBAA0BomH,SAAU,CACpD,GAAInC,EAAOvpH,OAAS,EAClB,MAAM,IAAImD,MAAM,sDAElB,IAAK,IAAIiM,EAAI,EAAGA,EAAIk8G,EAAal8G,IAC/Bm8G,EAAWn8G,IAAMi8G,EAAY9B,EAAO,IAAIn6G,GAAKi8G,EAAY9B,EAAO,IAAIn6G,GAEtE,OAAOm8G,C,CAGT,GAAIJ,IAAc7lH,GAAAA,MAAAA,oBAA0BqmH,QAAS,CACnD,IAAK,IAAI/9G,EAAI,EAAGA,EAAIw9G,EAAWx9G,IAAK,CAClC,MAAM69G,EAAeJ,EAAY9B,EAAO37G,IACxC,IAAK,IAAIwB,EAAI,EAAGA,EAAIk8G,EAAal8G,IAC/Bm8G,EAAWn8G,IAAMq8G,EAAar8G,E,CAGlC,IAAK,IAAI+c,EAAI,EAAGA,EAAIm/F,EAAan/F,IAC/Bo/F,EAAWp/F,GAAKo/F,EAAWp/F,GAAKi/F,EAElC,OAAOG,C,CAEX,ECzDM,SAAUxd,GAASziG,EAAQuuC,GAC/B,GAAIA,EAAMvuC,EAAOtL,OAAS,EACxB,MAAO,CAACsL,EAAa,EAANuuC,GAAUvuC,EAAa,EAANuuC,EAAU,GAAIvuC,EAAa,EAANuuC,EAAU,GAEnE,CAOM,SAAU+xE,GAAwBlpG,GACtC,MAAMmpG,EAAYnpG,EAASopG,WAAW3kG,UACtC,IAAI0yB,EAAM,EACV,MAAMmoB,EAAe,IAAIrlD,IAGzB,KAAOk9B,EAAMgyE,EAAU7rH,QAAQ,CAC7B,MAAM26F,EAAckxB,EAAUhyE,KACxBokB,EAAU,GAChB,IAAK,IAAIrwD,EAAI,EAAGA,EAAI+sF,EAAa/sF,IAC/BqwD,EAAQ//D,KAAK2tH,EAAUhyE,EAAMjsC,IAE/Bo0D,EAAa3iE,IAAI4+D,EAAQ,GAAIA,GAC7BpkB,GAAO8gD,C,CAGT,MAAMoxB,EAAW,GAGXC,EAAqBr+G,IACzB,IAAK,MAAOmG,EAAKtS,KAAUmM,EAAIsJ,UAC7B,QAActT,IAAVnC,EACF,OAAOsS,EAGX,OAAQ,CAAC,EAIX,IAAIy2C,EAAayhE,EAAkBhqD,GACnC,MAAuB,IAAhBzX,GAAmB,CACxB,MAAMtnC,EAAU,CAACsnC,GACjB,KAAOyX,EAAajkE,IAAIwsD,IAAa,CACnC,MAAM0hE,EAAYjqD,EAAaziE,IAAIgrD,GAAY,GAC3CyX,EAAajkE,IAAIkuH,IACnBhpG,EAAQ/kB,KAAK+tH,GAEfjqD,EAAajiE,OAAOwqD,GACpBA,EAAa0hE,C,CAEfF,EAAS7tH,KAAK+kB,GACdsnC,EAAayhE,EAAkBhqD,E,CAGjC,OAAO+pD,EAAS/rH,OAAS+rH,OAAWpoH,CACtC,CAOM,SAAUuoH,GAAkBxpG,GAChC,MAAMypG,EAAkBP,GAAwBlpG,GAChD,IAAKypG,EACH,OAGF,MAAMC,EAAgB1pG,EAASS,YAAYgE,UAC3C,OAAOglG,EAAgBx+G,KAAK0+G,GAC1BA,EAAe1+G,KAAKlJ,GAAUspG,GAASqe,EAAe3nH,MAE1D,CC5EO,IAAK6nH,IAAZ,SAAYA,GACVA,EAAA,UACAA,EAAA,YACAA,EAAA,gBACAA,EAAA,aACD,CALD,CAAYA,KAAAA,GAAyB,KCHrC,MAAMC,GAAgBpuF,GACbA,GAASA,EAAM0vB,MAAQ1vB,EAAMyvB,MCDhC4+D,GAAuB1tH,KAClBA,GAAQA,EAAKoyB,MAAQ,GAAKpyB,EAAK60B,OAAS,ECD7C84F,GAAyBA,CAC7B1yE,EACAC,MAESD,KAAOC,GAAKD,EAAE6T,QAAU5T,EAAE4T,OAAS7T,EAAE8T,QAAU7T,EAAE6T,MCJtD6+D,GAAwBA,CAAC3yE,EAAiBC,MACrCD,KAAOC,GAAKD,EAAE7oB,QAAU8oB,EAAE9oB,OAAS6oB,EAAEpmB,SAAWqmB,EAAErmB,QCUvD,MAAEg5F,IAAUvnH,GAAAA,UAMlB,MAAMwnH,GAOJhqH,WAAAA,CAAY0sF,GACVs9B,GAAeC,cAAcv9B,GAE7B,MAAM,SACJw9B,EAAQ,KACRhuH,EAAO,CAAEoyB,MAAO,GAAIyC,OAAQ,KAAK,WACjCo5F,EAAa,CAAEn/D,MAAO,EAAGC,MAAO,GAAG,SACnCgF,EAAW,CAAEjF,MAAO,EAAGC,MAAO,GAAG,UACjCm/D,EAAS,wBACTC,GAA0B,GACxB39B,EAEJjvF,KAAK6sH,UAAYJ,EACjBzsH,KAAK8sH,YAAcJ,EACnB1sH,KAAK+sH,UAAYv6D,EACjBxyD,KAAKgtH,oBAAsBJ,EAC3B5sH,KAAKitH,QAAUjtH,KAAKktH,mBAAmBzuH,GAEnCkuH,GACF3sH,KAAKmtH,SAASR,EAElB,CAEA,YAAWF,GACT,OAAOzsH,KAAK6sH,SACd,CAEA,YAAWJ,CAASA,GAClBzsH,KAAK6sH,UAAYJ,EACjBzsH,KAAKqe,QACP,CAEA,QAAW5f,GACT,MAAM,MAAEoyB,EAAK,OAAEyC,GAAWtzB,KAAKitH,QAC/B,MAAO,CAAEp8F,QAAOyC,SAClB,CAEA,QAAW70B,CAAKA,GACd,MAAQwuH,QAASrlH,GAAW5H,KAEvBmsH,GAAoB1tH,KAAS4tH,GAAsBzkH,EAAQnJ,KAIhEuB,KAAKotH,eAAexlH,EAAQnJ,GAC5BuB,KAAKqe,SACP,CAEA,cAAWquG,GACT,MAAO,IAAK1sH,KAAK8sH,YACnB,CAEA,cAAWJ,CAAWA,GAEjBR,GAAaQ,KACdN,GAAuBM,EAAY1sH,KAAK8sH,eAK1C9sH,KAAK8sH,YAAcJ,EACnB1sH,KAAKqe,SACP,CAEA,YAAWm0C,GACT,MAAO,IAAKxyD,KAAK+sH,UACnB,CAEA,YAAWv6D,CAASA,GAEf05D,GAAa15D,KACd45D,GAAuB55D,EAAUxyD,KAAK+sH,aAKxC/sH,KAAK+sH,UAAYv6D,EACjBxyD,KAAKqe,SACP,CAEA,sBAAWgvG,GACT,OAAOrtH,KAAKgtH,mBACd,CAEA,sBAAWK,CAAmBA,GACxBA,IAAuBrtH,KAAKgtH,sBAIhChtH,KAAKgtH,oBAAsBK,EAC3BrtH,KAAKqe,SACP,CAEO8uG,QAAAA,CAASR,GACdA,EAAUx9F,YAAYnvB,KAAKitH,SAC3BjtH,KAAKqe,QACP,CAEO21D,OAAAA,GACL,MAAQi5C,QAASrlH,GAAW5H,MACtB,cAAEq7E,GAAkBzzE,EAE1ByzE,GAAe9rD,YAAY3nB,EAC7B,CAEQ,oBAAO4kH,CAAcv9B,GAC3B,MAAM,KAAExwF,EAAI,WAAEiuH,EAAU,SAAEl6D,GAAay8B,EAEvC,GAAIxwF,IAAS0tH,GAAoB1tH,GAC/B,MAAM,IAAIqE,MAAM,kBAGlB,GAAI4pH,IAAeR,GAAaQ,GAC9B,MAAM,IAAI5pH,MAAM,wBAGlB,GAAI0vD,IAAa05D,GAAa15D,GAC5B,MAAM,IAAI1vD,MAAM,qBAEpB,CAEQsqH,cAAAA,CAAexlH,EAA2BnJ,GAChD,MAAM,MAAEoyB,EAAK,OAAEyC,GAAW70B,EAE1BmJ,EAAOipB,MAAQA,EACfjpB,EAAO0rB,OAASA,EAEhBz0B,OAAOqmB,OAAOtd,EAAO2sB,MAAO,CAC1B1D,MAAO,GAAGA,MACVyC,OAAQ,GAAGA,OAEf,CAEQ45F,kBAAAA,CAAmBzuH,GACzB,MAAMmJ,EAASyC,SAASwnE,cAAc,UAYtC,OAVAhzE,OAAOqmB,OAAOtd,EAAO2sB,MAAO,CAC1BuB,SAAU,WACVvuB,IAAK,IACLH,KAAM,IACNkmH,cAAe,OACfz4C,UAAW,eAGb70E,KAAKotH,eAAexlH,EAAQnJ,GAErBmJ,CACT,CAEQyW,MAAAA,GACN,IAAKre,KAAKitH,QAAQM,YAChB,OAGF,MAAQV,UAAWJ,GAAazsH,MACxBwtH,UAAWC,GAAchB,EAC3BiB,EAAcD,EAAU9tH,OAAS,EAKjCguH,EAAiBvpH,IACrB,MAAM2iB,EAAS,EAAI3iB,EAKnB,KAAIA,EAAQ,GAAKA,GAASspH,GAI1B,MAAO,CACLtpH,QACA0xB,SAAU23F,EAAU1mG,GACpBhD,MAAO,CACL0pG,EAAU1mG,EAAS,GACnB0mG,EAAU1mG,EAAS,GACnB0mG,EAAU1mG,EAAS,IAEtB,GAGG,MAAE8J,EAAK,OAAEyC,GAAWtzB,KAAKitH,QACzBW,EAAgB5tH,KAAKitH,QAAQY,WAAW,MACxC3Z,EAAerjF,EAAQyC,EACvBw6F,EAAW5Z,EAAerjF,EAAQyC,GAChCy5F,UAAWv6D,GAAaxyD,KAC1B89B,EAAQ99B,KAAKgtH,oBAAsBhtH,KAAK8sH,YAAc,IAAKt6D,IAE3D,YAAEc,GAAgBvuD,GAAAA,UAAAA,YAAAA,cACtBytD,EAASjF,MACTiF,EAAShF,OAGX,IAAIugE,EACAC,EAAoBL,EAAc,GAGtC,MAAMM,GAAoBnwF,EAAM0vB,MAAQ1vB,EAAMyvB,QAAUugE,EAAW,GACnE,IAAII,EAAgBpwF,EAAMyvB,MAE1B,IAAK,IAAIhgD,EAAI,EAAGA,EAAIugH,EAAUvgH,IAAK,CACjC,MAAM4gH,GAAaD,EAAgB17D,EAASjF,OAAS+F,EAKrD,GAAI06D,EACF,IAAK,IAAIzgH,EAAIygH,EAAkB5pH,MAAOmJ,EAAImgH,KACpCS,GAAaH,EAAkBl4F,UADkBvoB,IAKrDwgH,EAAqBC,EACrBA,EAAoBL,EAAcpgH,EAAI,GAI1C,IAAI6gH,EAYJ,GAAKL,EAEE,GAAKC,EAEL,CACL,MAAMK,GACHF,EAAYJ,EAAmBj4F,WAC/Bk4F,EAAkBl4F,SAAWi4F,EAAmBj4F,UC5PlC4jB,ED+Pfq0E,EAAmBhqG,MC/PD41B,EDgQlBq0E,EAAkBjqG,MChQG8yC,EDiQrBw3D,EAHFD,EC7PC,CACL10E,EAAE,IAAM,EAAImd,GAAKld,EAAE,GAAKkd,EACxBnd,EAAE,IAAM,EAAImd,GAAKld,EAAE,GAAKkd,EACxBnd,EAAE,IAAM,EAAImd,GAAKld,EAAE,GAAKkd,E,MDoPpBu3D,EAAY,IAAIL,EAAmBhqG,YAFnCqqG,EAAY,IAAIJ,EAAkBjqG,OAepC,MAAMA,EAAQqqG,EAAU9gH,KAAKyW,GAC3BuoG,GAAM7hH,KAAKqpD,MAAc,IAAR/vC,GAAc,EAAG,OAGpC6pG,EAAcU,UAAY,OAAOvqG,EAAM,OAAOA,EAAM,OAAOA,EAAM,MAE7DmwF,EACF0Z,EAAcW,SAAShhH,EAAG,EAAG,EAAG+lB,GAEhCs6F,EAAcW,SAAS,EAAGj7F,EAAS/lB,EAAI,EAAGsjB,EAAO,GAGnDq9F,GAAiBD,C,CCjRCO,IAAC90E,EAAGC,EAAGkd,CDmR7B,EEhRF,MAAM43D,GAAW,CACfC,KAAM,aACNC,MAAO,QACPC,UAAW,EACXC,WAAY,EACZC,kBAAmB,EACnBC,cAAe,EAGfC,YAAa,CAAC,EAAG,IAAK,EAAG,KAG3B,MAAMC,GAaJ1sH,WAAAA,CAAY0sF,GACVggC,GAAczC,cAAcv9B,GAE5B,MAAM,IACJ1nF,EAAM,EAAC,KACPH,EAAO,EAAC,KACR3I,EAAO,CAAEoyB,MAAO,GAAIyC,OAAQ,KAAK,WACjCo5F,EAAa,CAAEn/D,MAAO,EAAGC,MAAO,GAAG,SACnCgF,EAAW,CAAEjF,MAAO,EAAGC,MAAO,GAC9B0hE,MAAOC,EAAU,UACjBxC,EAAS,wBACTC,GAA0B,GACxB39B,GAEI16D,MAAO66F,EAAYt5F,SAAUu5F,GAAsBF,GAAc,CAAC,EAE1EnvH,KAAK8sH,YAAcJ,EACnB1sH,KAAK+sH,UAAYv6D,EACjBxyD,KAAKsvH,MAAQF,GAAYG,MAAQd,GAASC,KAC1C1uH,KAAKwvH,OAASJ,GAAYrrG,OAAS0qG,GAASE,MAC5C3uH,KAAKyvH,UAAYL,GAAYM,UAAYjB,GAASG,UAClD5uH,KAAK2vH,WAAaP,GAAYQ,WAAanB,GAASI,WACpD7uH,KAAK6vH,aAAeT,GAAYU,aAAerB,GAASK,kBACxD9uH,KAAK+vH,aAAeX,GAAYY,aAAevB,GAASM,cACxD/uH,KAAKiwH,mBACHZ,GAAqBpD,GAA0BiE,MACjDlwH,KAAKmwH,yBAA2BvD,EAChC5sH,KAAKitH,QAAUjtH,KAAKowH,qBAAqB3xH,EAAM8I,EAAKH,GAEhDulH,GACF3sH,KAAKmtH,SAASR,EAElB,CAEA,QAAWluH,GACT,MAAM,MAAEoyB,EAAK,OAAEyC,GAAWtzB,KAAKitH,QAC/B,MAAO,CAAEp8F,QAAOyC,SAClB,CAEA,QAAW70B,CAAKA,GACd,MAAQwuH,QAASrlH,GAAW5H,KAEvBmsH,GAAoB1tH,KAAS4tH,GAAsBzkH,EAAQnJ,KAIhEuB,KAAKotH,eAAexlH,EAAQnJ,GAC5BuB,KAAKqe,SACP,CAKA,OAAW9W,GACT,OAAOgwB,OAAOxL,SAAS/rB,KAAKitH,QAAQ14F,MAAMhtB,IAC5C,CAKA,OAAWA,CAAIA,GACb,MAAQ0lH,QAASrlH,GAAW5H,KAGxBuH,IAFevH,KAAKuH,MAMxBK,EAAO2sB,MAAMhtB,IAAM,GAAGA,MACtBvH,KAAKqe,SACP,CAKA,QAAWjX,GACT,OAAOmwB,OAAOxL,SAAS/rB,KAAKitH,QAAQ14F,MAAMntB,KAC5C,CAKA,QAAWA,CAAKA,GACd,MAAQ6lH,QAASrlH,GAAW5H,KAGxBoH,IAFgBpH,KAAKoH,OAMzBQ,EAAO2sB,MAAMntB,KAAO,GAAGA,MACvBpH,KAAKqe,SACP,CAKA,cAAWquG,GACT,MAAO,IAAK1sH,KAAK8sH,YACnB,CAKA,cAAWJ,CAAWA,GAEjBR,GAAaQ,KACdN,GAAuBM,EAAY1sH,KAAK8sH,eAK1C9sH,KAAK8sH,YAAcJ,EACnB1sH,KAAKqe,SACP,CAMA,YAAWm0C,GACT,MAAO,IAAKxyD,KAAK+sH,UACnB,CAMA,YAAWv6D,CAASA,GAEf05D,GAAa15D,KACd45D,GAAuB55D,EAAUxyD,KAAK+sH,aAKxC/sH,KAAK+sH,UAAYv6D,EACjBxyD,KAAKqe,SACP,CAKA,YAAWqxG,GACT,OAAO1vH,KAAKyvH,SACd,CAKA,YAAWC,CAASA,GACdA,IAAa1vH,KAAKyvH,YAItBzvH,KAAKyvH,UAAYC,EACjB1vH,KAAKqe,SACP,CAKA,aAAWuxG,GACT,OAAO5vH,KAAK2vH,UACd,CAOA,aAAWC,CAAUA,GACfA,IAAc5vH,KAAK2vH,aAIvB3vH,KAAK2vH,WAAaC,EAClB5vH,KAAKqe,SACP,CAKA,SAAW0F,GACT,OAAO/jB,KAAKwvH,MACd,CASA,SAAWzrG,CAAMA,GACXA,IAAU/jB,KAAKwvH,SAInBxvH,KAAKwvH,OAASzrG,EACd/jB,KAAKqe,SACP,CAOA,2BAAWuuG,GACT,OAAO5sH,KAAKmwH,wBACd,CAOA,2BAAWvD,CAAwByD,GAC7BA,IAAkBrwH,KAAKmwH,2BAI3BnwH,KAAKmwH,yBAA2BE,EAChCrwH,KAAKqe,SACP,CAKA,WAAW9c,GACT,MAAsC,UAA/BvB,KAAKitH,QAAQ14F,MAAMoT,OAC5B,CAKA,WAAWpmC,CAAQA,GACbA,IAAYvB,KAAKuB,UAIrBvB,KAAKitH,QAAQ14F,MAAMoT,QAAUpmC,EAAU,QAAU,OAE7CA,GACFvB,KAAKqe,SAET,CAMO8uG,QAAAA,CAASR,GACdA,EAAUx9F,YAAYnvB,KAAKitH,SAC3BjtH,KAAKqe,QACP,CAEQ,oBAAOmuG,CAAcv9B,GAC3B,MAAM,KAAExwF,EAAI,WAAEiuH,EAAU,SAAEl6D,GAAay8B,EAEvC,GAAIxwF,IAAS0tH,GAAoB1tH,GAC/B,MAAM,IAAIqE,MAAM,kBAGlB,GAAI4pH,IAAeR,GAAaQ,GAC9B,MAAM,IAAI5pH,MAAM,wBAGlB,GAAI0vD,IAAa05D,GAAa15D,GAC5B,MAAM,IAAI1vD,MAAM,qBAEpB,CAEQsqH,cAAAA,CAAexlH,EAA2BnJ,GAChD,MAAM,MAAEoyB,EAAK,OAAEyC,GAAW70B,EAE1BmJ,EAAOipB,MAAQA,EACfjpB,EAAO0rB,OAASA,EAEhBz0B,OAAOqmB,OAAOtd,EAAO2sB,MAAO,CAC1B1D,MAAO,GAAGA,MACVyC,OAAQ,GAAGA,OAEf,CAEQ88F,oBAAAA,CACN3xH,EACA8I,EACAH,GAEA,MAAMQ,EAASyC,SAASwnE,cAAc,UAYtC,OAVAhzE,OAAOqmB,OAAOtd,EAAO2sB,MAAO,CAC1BoT,QAAS,OACT7R,SAAU,WACV++C,UAAW,aACXttE,IAAK,GAAGA,MACRH,KAAM,GAAGA,QAGXpH,KAAKotH,eAAexlH,EAAQnJ,GAErBmJ,CACT,CAgBQ0oH,SAAAA,CAAUxyF,GAChB,MAAM,MAAEyvB,EAAK,MAAEC,GAAU1vB,EAInByyF,GAHa/iE,EAAQD,IAGKvtD,KAAK+vH,aAAe,GAG9CS,EAAY/lH,KAAKwE,IACrB,IACCxE,KAAK4qC,MAAM5qC,KAAKgmH,MAAMhmH,KAAKC,IAAI6lH,MAI5BG,EAAuBH,EAAYC,EAQnC93D,EALiB+1D,GAASO,YAAY74G,MACzCsrD,GAAMA,GAAKivD,IAIgBF,EAGxBG,EAAWlmH,KAAKurC,KAAKwX,EAAQkL,GAAQA,EACrCk4D,EAAWnmH,KAAK4qC,MAAMkY,EAAQmL,GAAQA,EAGtCm4D,EAAapmH,KAAKqpD,OAAO68D,EAAWC,GAAYl4D,GAAQ,EACxDw2D,EAAQ,GAEd,IAAK,IAAI3hH,EAAI,EAAGA,EAAIsjH,EAAYtjH,IAC9B2hH,EAAMrxH,KAAK+yH,EAAWrjH,EAAImrD,GAG5B,MAAO,CAAEk4D,WAAUD,WAAUj4D,OAAMw2D,QACrC,CAEQ4B,gBAAAA,EAAiB,SAAEh7F,EAAQ,aAAEi7F,IACnC,MAAM,MAAElgG,GAAU7wB,KAAKitH,QASvB,MAAO,CAAE+D,WANU,CADjBngG,EAAQ7wB,KAAK0vH,SAAWqB,EAAalgG,MAAQ7wB,KAAK6vH,aACxB/5F,GAMPm7F,WALF,CACjBp9F,MAAO,CAAChD,EAAQ7wB,KAAKyvH,UAAW35F,GAChChC,IAAK,CAACjD,EAAOiF,IAIjB,CAEQo7F,iBAAAA,EAAkB,SAAEp7F,IAO1B,MAAO,CAAEk7F,WANU,CAAChxH,KAAKyvH,UAAYzvH,KAAK6vH,aAAc/5F,GAMnCm7F,WALF,CACjBp9F,MAAO,CAAC,EAAGiC,GACXhC,IAAK,CAAC9zB,KAAKyvH,UAAW35F,IAI1B,CAEQq7F,eAAAA,EAAgB,SAAEr7F,EAAQ,aAAEi7F,IAClC,MAAM,IAAIjuH,MAAM,kBAClB,CAEQsuH,kBAAAA,EAAmB,SAAEt7F,EAAQ,aAAEi7F,IACrC,MAAM,IAAIjuH,MAAM,kBAClB,CAEQub,MAAAA,GACN,MAAQ4uG,QAASrlH,GAAW5H,KAE5B,IAAK4H,EAAO2lH,cAAgBvtH,KAAKuB,QAC/B,OAGF,MAAM,MAAEsvB,EAAK,OAAEyC,GAAW1rB,EACpBssG,EAAerjF,GAASyC,EACxB+9F,EAAsBnd,EAAerjF,EAAQyC,EAC7Cs6F,EAAgBhmH,EAAOimH,WAAW,OAChCd,UAAWv6D,GAAaxyD,KAC1B89B,EAAQ99B,KAAKmwH,yBACfnwH,KAAK8sH,YACL,IAAKt6D,GACH8+D,EAAaxzF,EAAM0vB,MAAQ1vB,EAAMyvB,OACjC,MAAE2hE,GAAUlvH,KAAKswH,UAAUxyF,GAEjC8vF,EAAc2D,UAAU,EAAG,EAAG1gG,EAAOyC,GACrCs6F,EAAc2B,KAAOvvH,KAAKsvH,MAC1B1B,EAAc4D,aAAe,SAC7B5D,EAAcU,UAAYtuH,KAAKwvH,OAC/B5B,EAAc6D,YAAczxH,KAAKwvH,OACjC5B,EAAc98F,UAAY9wB,KAAK4vH,UAE/BV,EAAMhxH,SAASwzH,IACb,IAAI57F,EAAWrrB,KAAKqpD,MAClBu9D,IAAwBK,EAAO5zF,EAAMyvB,OAAS+jE,IAQhD,GAJKpd,IACHp+E,EAAWxC,EAASwC,GAGlBA,EAAW,GAAKA,EAAWu7F,EAC7B,OAGF,MAAMr3G,EAAQ03G,EAAKh3E,WACbq2E,EAAenD,EAAc+D,YAAY33G,GAC/C,IAAI43G,EAIAA,EAFA1d,EACEl0G,KAAKiwH,qBAAuBhE,GAA0B4F,IAC7C7xH,KAAKmxH,gBAAgB,CAAEr7F,WAAUi7F,iBAEjC/wH,KAAKoxH,mBAAmB,CAAEt7F,WAAUi7F,iBAG7C/wH,KAAKiwH,qBAAuBhE,GAA0B6F,KAC7C9xH,KAAK8wH,iBAAiB,CAAEh7F,WAAUi7F,iBAElC/wH,KAAKkxH,kBAAkB,CAAEp7F,aAIxC,MAAM,WAAEk7F,EAAU,WAAEC,GAAeW,GAC3B/9F,MAAOk+F,EAAWj+F,IAAKk+F,GAAYf,EAQ3C,OANArD,EAAcqE,YACdrE,EAAcsE,OAAOH,EAAU,GAAIA,EAAU,IAC7CnE,EAAcuE,OAAOH,EAAQ,GAAIA,EAAQ,IACzCpE,EAAcwE,SAASp4G,EAAOg3G,EAAW,GAAIA,EAAW,IACxDpD,EAAcn8F,SAEPqE,CAAQ,GAEnB,ECrcF,MAAeu8F,GAMb9vH,WAAAA,EAAY,GAAE8Y,EAAE,UAAEsxG,IAgGV,KAAA2F,yBAA4B17G,IAClC,IAAIia,EACAyC,EAEJ,MAAM,YAAEi/F,EAAW,eAAEC,GAAmB57G,EAAQ,GAM5C27G,GACF1hG,EAAQ0hG,EAAY1hG,MACpByC,EAASi/F,EAAYj/F,QACZk/F,GAAgB7yH,SACzBkxB,EAAQ2hG,EAAe,GAAGC,WAC1Bn/F,EAASk/F,EAAe,GAAGE,WAG7B1yH,KAAK2yH,eAAiB,CAAE9hG,QAAOyC,UAC/BtzB,KAAK4yH,mBAAmB,EAlHxB5yH,KAAK6yH,IAAMx3G,EACXrb,KAAK2yH,eAAiB,CAAE9hG,MAAO,EAAGyC,OAAQ,GAC1CtzB,KAAK8yH,aAAe9yH,KAAK+yH,kBAAkB13G,GAC3Crb,KAAKgzH,yBAA2B,IAAIC,eAClCjzH,KAAKsyH,0BAGH3F,GACF3sH,KAAKmtH,SAASR,EAElB,CAKA,MAAWtxG,GACT,OAAOrb,KAAK6yH,GACd,CAKA,eAAWK,GACT,OAAOlzH,KAAK8yH,YACd,CAMO3F,QAAAA,CAASR,GACd,MACEmG,aAAcI,EACdF,yBAA0BG,GACxBnzH,MACIq7E,cAAe+3C,GAAqBF,EAEvCvG,GAAaA,IAAcyG,IAI5BA,GACFD,EAAeE,UAAUD,GAG3BzG,EAAUx9F,YAAY+jG,GACtBC,EAAeG,QAAQ3G,GACzB,CAKO4G,OAAAA,GACL,MACET,aAAcI,EACdF,yBAA0BG,GACxBnzH,MACE,cAAEq7E,GAAkB63C,EAE1B73C,GAAe9rD,YAAY2jG,GAC3BC,EAAeK,YACjB,CAEA,iBAAcC,GAEZ,MAAO,IAAKzzH,KAAK2yH,eACnB,CAOUI,iBAAAA,CAAkB13G,GAC1B,MAAM63G,EAAc7oH,SAASwnE,cAAc,OAU3C,OARAqhD,EAAY73G,GAAKA,EACjB63G,EAAYphD,UAAUn0E,IAAI,UAE1BkB,OAAOqmB,OAAOguG,EAAY3+F,MAAO,CAC/B1D,MAAO,OACPyC,OAAQ,SAGH4/F,CACT,CAMUN,iBAAAA,GAEV,ECpIF,MAAMnE,GAAW,CACfiF,WAAY,EACZC,oBAAqB1H,GAA0BiE,MAC/C0D,eAAgB,IAclB,MAAMC,WAAiBxB,GAWrB9vH,WAAAA,CAAY0sF,GACV/rD,MAAM+rD,GAJA,KAAA6kC,cAAe,EACf,KAAAC,gBAAiB,EAuOjB,KAAAC,mBAAsB/wH,IAC5BjD,KAAK8zH,cAAe,EACpB9zH,KAAKi0H,YACLhxH,EAAIsJ,iBAAiB,EAGf,KAAA2nH,kBAAqBjxH,IAC3BjD,KAAK8zH,cAAe,EACpB9zH,KAAKm0H,YACLlxH,EAAIsJ,iBAAiB,EAGf,KAAAqsF,mBAAsB31F,IAC5BjD,KAAK+zH,gBAAiB,EACtB/zH,KAAKi0H,YACLj0H,KAAKo0H,sBAAsBnxH,GAC3BA,EAAIsJ,iBAAiB,EAGf,KAAAqnE,mBAAqB,CAAC3wE,EAAKoxH,KACjC,MAAMC,EAAct0H,KAAKu0H,oBACnBhsH,EAAgBvI,KAAKw0H,yBAAyBvxH,IAC5CgI,OAAQhD,EAAauqD,SAAUiiE,GAAkBJ,EACnDK,EAAclwF,GAAAA,GAAAA,IAClBA,GAAAA,GAAAA,SACAj8B,EAAcosH,MACd1sH,EAAY0sH,OAGRvhE,EAAUshE,EAAY,GAAKJ,EAAY,GACvCjhE,EAAUqhE,EAAY,GAAKJ,EAAY,GAE7C,IAAKlhE,IAAYC,EACf,OAGF,MAAQ9F,MAAOqnE,EAAUpnE,MAAOqnE,GAAaJ,EAC7C,IAAI,YAAEnhE,EAAW,aAAEC,GAAiB79C,GAAAA,UAAAA,YAAAA,cAClCk/G,EACAC,GAGFvhE,EAAc7oD,KAAK6iC,IAAIgmB,EAAcF,EAAS,GAC9CG,GAAgBF,EAEhB,MAAMyhE,EAAcp/G,GAAAA,UAAAA,YAAAA,eAClB49C,EACAC,GAGFvzD,KAAKwyD,SAAWsiE,EAChB7xH,EAAIsJ,kBACJtJ,EAAIyF,gBAAgB,EAGd,KAAA0oG,iBAAoBnuG,IAC1BjD,KAAK+zH,gBAAiB,EACtB/zH,KAAKm0H,YACLn0H,KAAK+0H,2BACL9xH,EAAIsJ,iBAAiB,EA7RrBvM,KAAKg1H,uBACH,IAAIt/G,GAAAA,UAAAA,cAAAA,gCACN1V,KAAKi1H,WAAapB,GAASqB,gBAAgBjmC,GAC3CjvF,KAAKm1H,oBAAsBtB,GAASuB,uBAAuBnmC,GAC3DjvF,KAAKitH,QAAUjtH,KAAKq1H,cAAcpmC,GAClCjvF,KAAKs1H,UAAYt1H,KAAKu1H,gBAAgBtmC,GACtCjvF,KAAKiwH,mBACHhhC,EAAMigC,OAAOp5F,UAAY24F,GAASkF,oBAEpC3zH,KAAKitH,QAAQE,SAASntH,KAAKkzH,aAC3BlzH,KAAKs1H,UAAUnI,SAASntH,KAAKkzH,aAE7BlzH,KAAKw1H,+BACP,CAKA,sBAAWC,GACT,OAAOz1H,KAAKm1H,mBACd,CAKA,sBAAWM,CAAmBC,GAC5B,GAAIA,IAAiB11H,KAAKm1H,oBACxB,OAGF,MAAM1I,EAAWzsH,KAAKi1H,WAAW/1H,IAAIw2H,GAEhCjJ,GAKLzsH,KAAKm1H,oBAAsBO,EAC3B11H,KAAKitH,QAAQR,SAAWA,GALtB/0G,QAAQC,KAAK,0BAA0B+9G,KAM3C,CAEA,cAAWhJ,GACT,OAAO1sH,KAAKitH,QAAQP,UACtB,CAEA,cAAWA,CAAWA,GACpB1sH,KAAKitH,QAAQP,WAAaA,EAC1B1sH,KAAKs1H,UAAU5I,WAAaA,CAC9B,CAEA,YAAWl6D,GACT,OAAOxyD,KAAKitH,QAAQz6D,QACtB,CAEA,YAAWA,CAASA,GAClB,MAAQA,SAAUmjE,GAAoB31H,KAAKitH,QAGxCf,GAAa15D,KACd45D,GAAuB55D,EAAUmjE,KAKnC31H,KAAKitH,QAAQz6D,SAAWA,EACxBxyD,KAAKs1H,UAAU9iE,SAAWA,EAC1BxyD,KAAK41H,YAAYpjE,GACnB,CAEA,sBAAW66D,GACT,OAAOrtH,KAAKitH,QAAQI,kBACtB,CAEA,sBAAWA,CAAmBlsH,GAC5BnB,KAAKitH,QAAQI,mBAAqBlsH,EAClCnB,KAAKs1H,UAAU1I,wBAA0BzrH,CAC3C,CAEOoyH,OAAAA,GACLrwF,MAAMqwF,UACNvzH,KAAKg1H,uBAAuBa,OAC9B,CAEU9C,iBAAAA,GACR,MAAMG,EAAc7oH,SAASwnE,cAAc,OAS3C,OAPAhzE,OAAOqmB,OAAOguG,EAAY3+F,MAAO,CAC/BuB,SAAU,WACVG,SAAU,IACVpF,MAAO,OACPyC,OAAQ,SAGH4/F,CACT,CAEUN,iBAAAA,GACR1vF,MAAM0vF,oBACN5yH,KAAK81H,iBACL91H,KAAKitH,QAAQxuH,KAAOuB,KAAKyzH,aAC3B,CAEUc,iBAAAA,GACR,MAAO,CAAC9F,GAASiF,WAAYjF,GAASiF,WACxC,CAEUkC,WAAAA,CAAYpjE,GAEtB,CAEUyhE,SAAAA,GACRj0H,KAAK81H,iBACL91H,KAAKs1H,UAAU/zH,SAAU,CAC3B,CAEU4yH,SAAAA,GACJn0H,KAAK+zH,gBAAkB/zH,KAAK8zH,eAIhC9zH,KAAKs1H,UAAU/zH,SAAU,EAC3B,CAEQ,sBAAO2zH,CAAgBjmC,GAC7B,MAAM,UAAE8mC,GAAc9mC,EAEtB,OAAO8mC,EAAUpnH,QACf,CAACqnH,EAAOp2H,IAASo2H,EAAMh3H,IAAIY,EAAKq2H,KAAMr2H,IACtC,IAAI0c,IAER,CAEQ,6BAAO84G,CAAuBnmC,GACpC,MAAM,mBAAEwmC,EAAkB,UAAEM,GAAc9mC,EAK1C,QAHIwmC,GACFM,EAAUtvG,MAAMyvG,GAAOA,EAAGD,OAASR,IAEbA,EAAqBM,EAAU,GAAGE,IAC5D,CAEQZ,aAAAA,CAAcpmC,GACpB,MAAM,WAAEy9B,EAAU,SAAEl6D,EAAQ,wBAAEo6D,GAA4B39B,EACpDw9B,EAAWzsH,KAAKi1H,WAAW/1H,IAAIc,KAAKm1H,qBAE1C,OAAO,IAAI5I,GAAe,CACxBE,WACAC,aACAl6D,SAAUA,EACVo6D,2BAEJ,CAEO2I,eAAAA,CAAgBtmC,GACrB,MAAMkgC,EAAalgC,EAAMigC,MAEzB,OAAO,IAAID,GAAc,CACvBvC,WAAYz9B,EAAMy9B,WAClBl6D,SAAUy8B,EAAMz8B,SAChB08D,MAAOC,EACPvC,wBAAyB39B,EAAM29B,yBAEnC,CAEQ4H,wBAAAA,CAAyBvxH,GAC/B,MAAQiwH,YAAavwH,GAAY3C,KAC3ByG,EAA4B,CAACxD,EAAIyD,QAASzD,EAAI0D,SAC9CE,EAA0B,CAAC5D,EAAI6D,MAAO7D,EAAI8D,OAC1CG,EAAOvE,EAAQwE,wBAMrB,MAAO,CAAEQ,OAAQlB,EAAaiB,KAAMb,EAAW8tH,MALb,CAChC9tH,EAAU,GAAKK,EAAKE,KAAOC,OAAOC,YAClCT,EAAU,GAAKK,EAAKK,IAAMF,OAAOG,aAIrC,CAEQsuH,cAAAA,GACN,MAAQjlG,MAAOslG,EAAgB7iG,OAAQ8iG,GACrCp2H,KAAKyzH,cAGP,GAAuB,IAAnB0C,GAA4C,IAApBC,EAC1B,OAGF,MAAQd,UAAWe,EAAUpG,mBAAoBZ,GAAsBrvH,KACjEk0G,EAAeiiB,GAAkBC,EACjCvlG,EAAQqjF,EAAeiiB,EAAiB1H,GAASmF,eACjDtgG,EAAS4gF,EAAeua,GAASmF,eAAiBwC,EAExD,ICvOJ,SACEE,EACAC,EACAlH,GAOA,OALqBiH,GAAiBC,EAElC,CAACtK,GAA0B4F,IAAK5F,GAA0BuK,QAC1D,CAACvK,GAA0B6F,KAAM7F,GAA0BiE,QAEhCjqG,SAASopG,EAC1C,CD6NOoH,CACCN,EACAC,EACA/G,GAGF,MAAM,IAAIvsH,MACR,uEAIJ,IAAI4zH,EACAC,EAEJN,EAAS53H,KAAO,CAAEoyB,QAAOyC,UAErB4gF,GACFyiB,EAAe,EACfD,EACErH,IAAsBpD,GAA0B4F,KAC3Cv+F,EACD8iG,IAENM,EAAc,EACdC,EACEtH,IAAsBpD,GAA0B6F,MAC3CjhG,EACDslG,GAGRE,EAAS9uH,IAAMmvH,EACfL,EAASjvH,KAAOuvH,CAClB,CAgEQnB,6BAAAA,GACN,MAAQR,uBAAwB4B,GAAY52H,MACpCkzH,YAAavwH,GAAY3C,KAEjC42H,EAAQ5xH,iBAAiBrC,EAAS,YAAa3C,KAAKg0H,oBACpD4C,EAAQ5xH,iBAAiBrC,EAAS,WAAY3C,KAAKk0H,mBACnD0C,EAAQ5xH,iBACNrC,EACA,YACA3C,KAAK44F,mBAET,CAEQw7B,qBAAAA,CAAsBnxH,GAC5B,MAAQ+xH,uBAAwB4B,GAAY52H,KAGtC62H,EAAmB,CAAE5rH,OAFZjL,KAAKw0H,yBAAyBvxH,GAEVuvD,SADlB,IAAKxyD,KAAKitH,QAAQz6D,WAGnCxyD,KAAK+0H,2BAEL6B,EAAQ5xH,iBAAiBqF,SAAU,cAAerK,KAAKoxG,kBACvDwlB,EAAQ5xH,iBAAiBqF,SAAU,iBAAkBpH,GACnDjD,KAAK4zE,mBAAmB3wE,EAAK4zH,IAEjC,CAEQ9B,wBAAAA,GACN,MAAQC,uBAAwB4B,GAAY52H,KAE5C42H,EAAQtsH,oBAAoBD,SAAU,eACtCusH,EAAQtsH,oBAAoBD,SAAU,gBACxC,EE7VF,MAAQvN,OAAMA,IAAKmI,GAAAA,MACb6xH,GAAoB,CAAEvpE,OAAQ,IAAMC,MAAO,KAKjD,MAAMupE,WAAyBlD,GAO7BtxH,WAAAA,CAAY0sF,GACV,MAAM,QAAEtsF,EAAO,SAAEsY,GAAag0E,EACxBy9B,EAAaqK,GAAiBC,eAAer0H,EAASsY,GACtDu3C,EAAWukE,GAAiBE,aAAat0H,EAASsY,GAExDioB,MAAM,IAAK+rD,EAAOy9B,aAAYl6D,aAqFxB,KAAA0kE,cAAgB,KAGtB,GAAIl3H,KAAKm3H,oBACP,OAGF,MAAMC,EAAWp3H,KAAKq3H,eAAiB/qH,KAAKD,MAExC+qH,GAAY,EACdp3H,KAAKm0H,YAELn0H,KAAKm3H,oBAAsB9vH,OAAOkE,YAAW,KAE3CvL,KAAKm3H,oBAAsB,EAC3Bn3H,KAAKk3H,eAAe,GACnBE,E,EAUC,KAAAE,uBAAyB,KAC/Bt3H,KAAK0sH,WAAaqK,GAAiBC,eAAeh3H,KAAKu3H,SAAS,EAG1D,KAAAC,6BACNv0H,IAEA,MAAM,SAAEgY,GAAahY,EAAI1F,OAAOwlC,YAEhC,GAAI9nB,IAAajb,KAAKy3H,UACpB,OAGF,MAAQF,SAAU50H,GAAY3C,KAC9BA,KAAK0sH,WAAaqK,GAAiBC,eAAer0H,EAASsY,EAAS,EAG9D,KAAAy8G,6BACNz0H,IAEA,MAAM,WAAE8E,EAAU,SAAEkT,EAAU6iB,MAAO00B,GAAavvD,EAAI1F,QAChD,SAAEiJ,GAAaxG,KAAK4C,eAEtBmF,IAAevB,EAAS6U,IAAMJ,IAAajb,KAAKy3H,YAIpDz3H,KAAKwyD,SAAWA,EAChBxyD,KAAK23H,uBAAsB,EAzI3B33H,KAAKu3H,SAAW50H,EAChB3C,KAAKy3H,UAAYx8G,EAEjBjb,KAAK43H,8BACP,CAEA,WAAWj1H,GACT,OAAO3C,KAAKu3H,QACd,CAEA,kBAAW30H,GACT,OAAOC,EAAAA,GAAAA,mBAAkB7C,KAAKu3H,SAChC,CAEUhD,iBAAAA,GACR,MAAM,SAAE/tH,GAAaxG,KAAK4C,eAC1B,OC5CJ,SACE4D,EACAyU,EACAyO,GAMA,GAAiB,OAFAhU,GAAAA,UAAAA,oBAA4BlP,EAAUyU,GAEhC,CACrB,MAAM,YAAEg1C,EAAW,aAAEC,GAAiB1pD,EAAS7D,QACzCk1H,EAAe,EAAIptH,KAAK6iC,IAAI2iB,EAAaC,GACzCmC,EAAcu4B,GAAoBpkF,EAAUyU,IAC5C,mBAAE68G,GAAqB,GAASpuG,GAAW,CAAC,EAI5CquG,EAAcD,EAAqB,EAAID,EAE7C,OAAOxlE,EACH,CAAC0lE,EAAaF,GACd,CAACE,EAvBkB,E,CA0BzB,MAAO,CA1BkB,IA2B3B,CDmBWxD,CAAkB/tH,EAAUxG,KAAKy3H,UAC1C,CAEU7B,WAAAA,CAAYpjE,GACpBtvB,MAAM0yF,YAAYpjE,GAElB,MAAM,SAAEhsD,GAAaxG,KAAK4C,eAE1B,GAAI4D,aAAoB0V,GAAAA,cACtB1V,EAASwsD,cAAc,CACrBR,SAAUA,IAEZhsD,EAAS6X,cACJ,GAAI7X,aAAoB24B,GAAAA,eAAgB,CAC7C,MAAQs4F,UAAWx8G,GAAajb,KAC1BoyD,EAA+BrtD,GAAAA,UAAAA,yBACnCkW,EACAzU,EAASwB,mBAGXxB,EAASwsD,cAAc,CAAER,YAAYv3C,GACrCm3C,EAA6Bl0D,SAAS+0D,GAAOA,EAAG50C,U,CAEpD,CAEQ,qBAAO24G,CAAer0H,EAASsY,GACrC,MAAMrY,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfid,EAAQ5E,EACVzU,EAASmY,SAAS1D,GAClBzU,EAASyY,kBAEb,IAAKY,EACH,OAAOi3G,GAGT,MACMpK,EADY7sG,EAAMA,MAAM8F,YAAYgB,eACbpC,eAAesC,aAAaktC,WAEzD,OAAyB,IAAlB24D,EAAW,IAA8B,IAAlBA,EAAW,GACrCoK,GACA,CAAEvpE,MAAOm/D,EAAW,GAAIl/D,MAAOk/D,EAAW,GAChD,CAEQ,mBAAOuK,CAAat0H,EAASsY,GACnC,MAAMrY,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,EAEfo1H,EAAc/8G,EAChBzU,EAASmY,SAAS1D,GAClBzU,EAASyY,kBAEb,IAAK+4G,IAAgBjzH,GAAAA,UAAAA,aAAuBizH,GAC1C,OAAOlB,GAGT,MAAMtkE,EAAYwlE,EAAYn4G,MAC3BC,cACAm4G,uBAAuB,GACvBlkE,WAEH,OAAuB,IAAhBvB,EAAS,IAA4B,IAAhBA,EAAS,GACjCskE,GACA,CAAEvpE,MAAOiF,EAAS,GAAIhF,MAAOgF,EAAS,GAC5C,CAsBQmlE,oBAAAA,CAAqBO,EAAW,KACtCl4H,KAAKq3H,eAAiB/qH,KAAKD,MAAQ6rH,EACnCl4H,KAAKi0H,YACLj0H,KAAKk3H,eACP,CAiCQU,4BAAAA,GACN,MAAQL,SAAU50H,GAAY3C,KAE9BF,GAAAA,YAAYkF,iBACVlI,GAAOoI,sBACPlF,KAAKw3H,8BAGP70H,EAAQqC,iBACNlI,GAAOiuC,gBACP/qC,KAAKs3H,wBAGP30H,EAAQqC,iBACNlI,GAAOq7H,aACPn4H,KAAK03H,6BAET,EElKF,SAhBA,SAAqCz0H,GAGnC,IAF6BA,EAAI1F,OAAOkC,QAEdE,OACxB,QAGuBs8E,EAAAA,GAAAA,uBAER/9E,SAASkd,IACxB,MACMkxD,EADYlxD,EAAgB2+C,eACJzsD,KAAK2lD,GAAOA,EAAG53C,KAC7CsqD,GAAsCvqD,EAAiBkxD,EAAY,GAEvE,ECLA,SANA,SAAoCrpE,GAClC,MAAM,WAAE8E,EAAU,kBAAEC,GAAsB/E,EAAI1F,OACxC6d,GAAkBwgB,EAAAA,GAAAA,oBAAmB5zB,GAC3C29D,GAAsCvqD,EAAiB,CAACrT,GAC1D,ECNMqwH,GAAkB,SAAUn1H,GAGhCy/B,GAAwBz/B,EAAI1F,OAAOoF,QACrC,EAgBA,IACEiJ,OAfa,SAAUjJ,GACvBA,EAAQqC,iBACNC,GAAAA,MAAAA,OAAayjC,eACb0vF,GAEJ,EAWE5sH,QATc,SAAU7I,GACxBA,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAayjC,eACb0vF,GAEJ,IC5BQ/9F,OAAMA,IAAKz9B,GAiBL,SAAUy7H,GACtBC,EACAC,EACAt1H,GAEA,GAAI0B,GAAMW,sBACR,OAAO,EAGT,MAAM,kBAAE0C,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCkjB,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO,EAUT,IAAI+3G,EACJ,MAAMv+F,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAEjD,IAAK,IAAInrB,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BgtB,EAAOtb,EAAUyZ,YAAYv5B,GAE7Bw5B,EAAe1Z,EAAU2Z,gBAAgBz5B,GAE/C,GAEEo7B,EAAK7O,OAASmN,IAG0B,mBAAjCF,EAAao+F,GACpB,CACAC,EAAa/3G,EAAU2Z,gBAAgBz5B,GACvC,K,EAIC63H,GAILA,EAAWD,GAAgBt1H,EAC7B,CClEA,MAMA,GANmBo1H,GAAsB5rH,KACvC,KACA,QACA,sBCGF,GANyB4rH,GAAsB5rH,KAC7C,KACA,QACA,uBCOY,SAAUgsH,GACtB91H,EACA+1H,EACAr1F,EACAx2B,EAAkB,SAElB,MAAMm3B,EAAgC,UAApBn3B,EAA8B,GAAK,EAC/C8rH,EAA2B,GA0BjC,OAxBAD,EAAmBx6H,SAAQ,EAAG69B,OAAM34B,kBAClC,IAAK,MAAM/F,KAAc+F,EAAa,CACpC,GAAI/F,EAAWsB,WAAatB,EAAW0E,UACrC,SAGF,MAAMkxB,EAAS8I,EAAKgI,wBAClBphC,EACAtF,EACAgmC,EACAW,GAGF,GAAI/Q,EAAQ,CACV0lG,EAAyB96H,KAAK,CAC5Bk+B,OACA1+B,aACA41B,WAEF,K,MAKC0lG,CACT,CCpCc,SAAUC,GACtBj2H,EACA6C,GAEA,MAAMmmC,EAAS,GACf,IAAK,IAAIp+B,EAAI,EAAGA,EAAI/H,EAAM7F,OAAQ4N,IAAK,CACrC,MAAMwuB,EAAOv2B,EAAM+H,GAEnB,IAAKwuB,EAAM,CACTrkB,QAAQC,KAAK,0DACb,Q,CAGF,IAAIvU,EAAcK,GACfs4B,EAAKx5B,YAAgC5B,SACtCgC,GAGGS,GAAazD,SAI0C,mBAAjDo8B,EAAK4G,0CAEdv/B,EAAc24B,EAAK4G,wCACjBhgC,EACAS,IAIAA,EAAYzD,OAAS,GACvBgsC,EAAO9tC,KAAK,CAAEk+B,OAAM34B,gB,CAIxB,OAAOuoC,CACT,CC/Bc,SAAUktF,GACtBl2H,EACA+1H,EACAr1F,EACAx2B,EAAkB,SAElB,MAAMm3B,EAAgC,UAApBn3B,EAA8B,GAAK,EAQ/CisH,EAA0B,GA0BhC,OAxBAJ,EAAmBx6H,SAAQ,EAAG69B,OAAM34B,kBAClC,IAAK,MAAM/F,KAAc+F,EAAa,CACpC,GAAI/F,EAAWsB,WAAatB,EAAW0E,UACrC,SAWF,GARag6B,EAAKgJ,gBAChBpiC,EACAtF,EACAgmC,EACAW,EACAn3B,GAGQ,CACRisH,EAAwBj7H,KAAK,CAC3Bk+B,OACA1+B,eAEF,K,MAKCy7H,CACT,CCrDA,MAgCA,GAhC6B71H,GAEvBA,EAAI81H,SACF91H,EAAI+1H,QACCC,GAAGC,UAERj2H,EAAIk2H,OACCF,GAAGG,SAERn2H,EAAIo2H,QACCJ,GAAGK,UAELL,GAAGx/C,MAERx2E,EAAI+1H,QACF/1H,EAAIk2H,OACCF,GAAGM,QAERt2H,EAAIo2H,QACCJ,GAAGO,SAELP,GAAG/gC,KAERj1F,EAAIk2H,OACEl2H,EAAIo2H,SAAWJ,GAAGQ,SAAYR,GAAGS,IAEvCz2H,EAAIo2H,QACCJ,GAAGU,UADZ,GC3BMt/F,OAAMA,IAAKz9B,GAWL,SAAUg9H,GACtB32H,GAGA,MAAM,kBAAE+E,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCs8H,EAAa52H,EAAI1F,OAAO2K,MAKxBsxE,EACJsgD,GAAiBD,IAAeE,GAAiB5lH,iBAE7CsM,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO,KAGT,MAAMwZ,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAC3C8/F,EAAsBv5G,EAAUw5G,yBAEtC,IAAK,IAAIlrH,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BmrB,EAAczZ,EAAUyZ,YAAYv5B,GAIpCu5H,EACJhgG,EAAY4vB,SAASnqD,QACrBu6B,EAAY4vB,SAASrjC,MAAM0zG,GAEvBA,EAAQjxH,eACL2wH,EAAaA,EAAWvuH,QAAU0uH,IACrCG,EAAQ3gD,cAAgBA,IAI9B,GAAIt/C,EAAYhN,OAASmN,IAAU6/F,EACjC,OAAOz5G,EAAU2Z,gBAAgBz5B,E,CAGvC,CCjDc,SAAUy5H,GACtBn3H,EACA62B,EACAugG,GAEA,MAAM,kBAAEryH,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCkjB,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,MAAO,GAGT,MAAMuZ,EAAe,GAEfC,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAEjD,IAAK,IAAInrB,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BgtB,EAAOtb,EAAUyZ,YAAYv5B,GAI7Bu5H,EACS,MAAbG,GACAt+F,EAAK+tB,SAASnqD,QACdo8B,EAAK+tB,SAASrjC,MAAM0zG,GAAYA,EAAQjxH,cAAgBmxH,IAE1D,GACEvgG,EAAY7T,SAAS8V,EAAK7O,SAGxBmtG,GAAaH,GACf,CACA,MAAM//F,EAAe1Z,EAAU2Z,gBAAgBz5B,GAC/Cq5B,EAAan8B,KAAKs8B,E,EAItB,OAAOH,CACT,CC7CA,MAAQK,OAAM,GAAEC,QAAOA,IAAK19B,GASd,SAAU09H,GACtBr3H,GAGA,GAAI0B,GAAMW,sBACR,OAAO,EAGT,MAAMpC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EACdN,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACjCiF,OAAQy7B,GAAiBngC,EAAYqF,cAE7C,IAAK3F,EACH,OAAO,EAIT,MAAM23H,ECrBM,SACZt3H,EACAu3H,GAEA,MAAMD,EAAmB,IAAIj+G,KACvB,kBAAEtU,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCkjB,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO85G,EAGT,MAAMtgG,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAC3C8/F,EAAsBv5G,EAAUw5G,yBAChCJ,EAAa52H,EAAI1F,OAAO2K,MACxBgB,EAAc2wH,GAAYvuH,SAAW0uH,EACrCxgD,EACJsgD,GAAiBD,IAAeE,GAAiB5lH,iBAEnD,IAAK,IAAIpF,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BgtB,EAAOtb,EAAU2Z,gBAAgBz5B,GACjC85H,EAAgB1+F,EAAKnP,eAAeg9B,SAAW,CAAC,EAChDA,EAAU/qD,OAAO2nB,OAAOi0G,GAE9B,IAAK7wE,GAASjqD,SAAW66H,EAAUv0G,SAAS8V,EAAK7O,MAC/C,SAGF,MAAMwtG,EAAS9wE,EAAQzzC,MACpBukH,GACCA,EAAO5wE,SAASnqD,QAChB+6H,EAAO5wE,SAASrjC,MACb0zG,GACCA,EAAQjxH,cAAgBA,GACxBixH,EAAQ3gD,cAAgBA,MAI5BkhD,GACFH,EAAiBv7H,IAAI+8B,EAAM2+F,E,CAI/B,OAAOH,CACT,CD3B2BI,CAAiC13H,EAAK,CAC7Do3B,GACAC,KAYIw+F,EAA0BD,GAC9Bl2H,EAPqCi2H,GACrCj2H,EAJYtE,MAAMC,KAAKi8H,EAAiBl3H,SAYxCggC,GAKF,GAAIy1F,EAAwBn5H,OAAS,EAAG,CACtC,MAAM,KAAEo8B,EAAI,WAAE1+B,GAAey7H,EAAwB,GAC/C4B,EAASH,EAAiBr7H,IAAI68B,GAMpC,OAJ2B,iBAAlB2+F,EAAO7wE,OAAsB9tB,EAAK2+F,EAAO7wE,QAAU6wE,EAAO7wE,QAE5Dv8B,KAAKyO,EAAM94B,EAAK5F,IAEhB,C,CAGT,OAAO,CACT,CE/CA,MAAQg9B,OAAM,GAAEC,QAAOA,IAAK19B,GA2Bd,SAAUg+H,GAAU33H,GAEhC,GAAI0B,GAAMW,sBACR,OAGF,MAAMkzH,EAAaoB,GAA2B32H,GAI9C,GAAIu1H,GAAyD,mBAApCA,EAAWjuE,qBAAqC,CAGvE,GAFsBiuE,EAAWjuE,qBAAqBtnD,GAGpD,M,CAKJ,MAAM43H,EAA8C,IAA7B53H,EAAI1F,OAAO2K,MAAMoD,QASlCwvH,EAAkB,IARYV,GAClCn3H,EACA,CAACo3B,IACDp3B,EAAI1F,OAAO2K,MAAMoD,UAMkB,OAJYuvH,EAC7CT,GAA+Bn3H,EAAK,CAACq3B,UACrCh3B,IAG8C,IAOlD,GAFuBg3H,GAA0Br3H,GAG/C,OAGF,MAAMC,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGd63H,EAAiCnC,GACrCj2H,EACAm4H,GAGIz3F,EAAengC,EAAYqF,cAAcX,OAKzCozH,EAAqCvC,GACzC91H,EACAo4H,EACA13F,EACA,SAII43F,IAAkBh4H,EAAI1F,OAAO2K,MAAM6wH,SAIzC,GAAIiC,EAAmCr7H,OAAS,EAAG,CACjD,MAAM,KAAEo8B,EAAI,WAAE1+B,EAAU,OAAE41B,GAAWioG,GACnCF,GAMF,OAHAG,GAA0B99H,EAAW8C,cAAe86H,QACpDl/F,EAAKsqC,uBAAuBpjE,EAAK5F,EAAY41B,EAAQ,Q,CAOvD,MAAM6lG,EAA0BD,GAC9Bl2H,EACAo4H,EACA13F,EACA,SAKF,GAAIy1F,EAAwBn5H,OAAS,EAAG,CACtC,MAAM,KAAEo8B,EAAI,WAAE1+B,GAAe69H,GAC3BpC,GAMF,OAHAqC,GAA0B99H,EAAW8C,cAAe86H,QACpDl/F,EAAKwqC,qBAAqBtjE,EAAK5F,EAAY,QAASgmC,E,CAMtD,GAAIm1F,GAA0D,mBAArCA,EAAW9sC,sBAAsC,CAGxE,GAFsB8sC,EAAW9sC,sBAAsBzoF,GAIrD,M,CAKN,CAQA,SAASi4H,GACPE,GAEA,OACGA,EAAwBz7H,OAAS,GAChCy7H,EAAwBjlH,MACrBvW,IACErB,GAAmBqB,EAAKvC,aACzBwE,GAAoBjC,EAAKvC,WAAW8C,kBAE1Ci7H,EAAwB,EAE5B,CASA,SAASD,GACPh7H,EACA86H,GAAgB,GAEhB,GAAIA,EACF,GAAIl6H,GAAqBZ,GACvBD,GAAsBC,GAAe,OAChC,CAELD,GAAsBC,GAAe,GADZ,E,KAGtB,CAELD,GAAsBC,GAAe,GADZ,E,CAG7B,CClMc,SAAUk7H,GACtBp4H,GAGA,GAAI0B,GAAMW,sBACR,OAGF,MAAMkzH,EAAaoB,GAA2B32H,GAE9C,GAAKu1H,IAID7zH,GAAMY,uBAINizH,EAAW5yD,iBAAkB,CAE/B1lE,GADmBs4H,EAAW5yD,iBAAiB3iE,EAAK,SACnB9C,c,CAErC,CCxBc,SAAUm7H,GAAUr4H,GAChC,GAAI0B,GAAMW,sBACR,OAGF,MAAMkzH,EAAaoB,GAA2B32H,IAG3Cu1H,GAAsD,mBAAjCA,EAAWxpE,mBAKnCwpE,EAAWxpE,kBAAkB/rD,EAC/B,CCdA,MAAQo3B,OAAM,GAAEC,QAAOA,IAAK19B,GASd,SAAU2+H,GAAUt4H,GAGhC,GAAI0B,GAAMW,uBAAyBX,GAAMY,sBACvC,OAGF,MAAMi2H,EAAwBpB,GAA+Bn3H,EAAK,CAChEo3B,GACAC,KAGIp3B,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGdu4H,EAAuB7C,GAC3Bj2H,EACA64H,GAGIE,EAA0BF,EAAsB56H,QAAQm7B,IAC5B0/F,EAAqBh1G,MAClDk1G,GACCA,EAAkB5/F,KAAK3O,gBAAkB2O,EAAK3O,kBAMpD,IAAIkW,GAA6B,EAEjC,IAAK,MAAM,KAAEvH,EAAI,YAAE34B,KAAiBq4H,EACI,mBAA3B1/F,EAAKoH,oBACdG,EACEvH,EAAKoH,kBAAkBlgC,EAAKG,IAAgBkgC,GAKlDo4F,EAAwBx9H,SAAS69B,IACO,mBAA3BA,EAAKoH,mBACdpH,EAAKoH,kBAAkBlgC,E,KAKQ,IAA/BqgC,GACFZ,GAAwB//B,EAE5B,CC/DA,MAEA,GAFgB01H,GAAsB5rH,KAAK,KAAM,QAAS,mBCM1D,GANmB4rH,GAAsB5rH,KACvC,KACA,aACA,sBCsDF,GALiC,CAC/Bb,OAxCa,SAAUjJ,GACvBA,EAAQqC,iBAAiBlI,GAAOgM,YAAa8yH,IAC7Cj5H,EAAQqC,iBAAiBlI,GAAO8L,WAAYgyH,IAC5Cj4H,EAAQqC,iBACNlI,GAAO+L,oBACPwyH,IAEF14H,EAAQqC,iBACNlI,GAAOsL,mBACPyzH,IAEFl5H,EAAQqC,iBAAiBlI,GAAOkM,WAAYsyH,IAC5C34H,EAAQqC,iBAAiBlI,GAAO6L,WAAY4yH,IAC5C54H,EAAQqC,iBAAiBlI,GAAOiM,SAAU+yH,IAC1Cn5H,EAAQqC,iBAAiBlI,GAAOwW,YAAayoH,GAC/C,EA0BEvwH,QAnBc,SAAU7I,GACxBA,EAAQ2H,oBAAoBxN,GAAOgM,YAAa8yH,IAChDj5H,EAAQ2H,oBAAoBxN,GAAO8L,WAAYgyH,IAC/Cj4H,EAAQ2H,oBACNxN,GAAO+L,oBACPwyH,IAEF14H,EAAQ2H,oBACNxN,GAAOsL,mBACPyzH,IAEFl5H,EAAQ2H,oBAAoBxN,GAAOkM,WAAYsyH,IAC/C34H,EAAQ2H,oBAAoBxN,GAAO6L,WAAY4yH,IAC/C54H,EAAQ2H,oBAAoBxN,GAAOiM,SAAU+yH,IAC7Cn5H,EAAQ2H,oBAAoBxN,GAAOwW,YAAayoH,GAClD,IClDQ1hG,OAAMA,IAAKz9B,GAWL,SAAUo/H,GACtB/4H,GAEA,MAAM,kBAAE+E,EAAiB,WAAED,GAAe9E,EAAI1F,OAGxC2L,E5R4eCvE,GAAMuE,Y4RxePswE,EAAcugD,GAAiB5lH,iBAE/BsM,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO,KAGT,MAAMwZ,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAC3C8/F,EAAsBv5G,EAAUw5G,yBAEtC,IAAK,IAAIlrH,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BmrB,EAAczZ,EAAUyZ,YAAYv5B,GAE1C,GAAIu5B,EAAYhN,OAASmN,GACvB,SAYF,GAPEH,EAAY4vB,SAASnqD,QACrBu6B,EAAY4vB,SAASrjC,MAClB0zG,GACCA,EAAQjxH,eAAiBA,GAAe8wH,IACxCG,EAAQ3gD,cAAgBA,IAI5B,OAAO/4D,EAAU2Z,gBAAgBz5B,E,CAGvC,CCnDc,SAAUs7H,GAAQh5H,GAE9B,MAAMu1H,EAAawD,GAA8B/4H,GAEjD,GAAIu1H,EAAY,CACd,MAAM,kBAAExwH,EAAiB,WAAED,GAAe9E,EAAI1F,OAExCkjB,EAAYsZ,GAChBhyB,EACAC,GAGIrH,EAAW63H,EAAWprG,cACxBvuB,OAAOwE,KAAKod,EAAUyZ,aAAajU,SAAStlB,IAC9C8f,EAAUy7G,6BAA6Bv7H,E,CAI3C,MAAMw7H,EClBM,SACZl5H,EACAu3H,GAEA,MAAMD,EAAmB,IAAIj+G,KACvB,kBAAEtU,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCkjB,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO85G,EAGT,MAAMtgG,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAC3CzmB,EAAMxQ,EAAI1F,OAAOkW,IAEvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BgtB,EAAOtb,EAAU2Z,gBAAgBz5B,GACjC85H,EAAgB1+F,EAAKnP,eAAeg9B,QAC1C,IAAK6wE,EACH,SAEF,MAAM7wE,EAAU/qD,OAAO2nB,OAAOi0G,GAE9B,IAAK7wE,GAASjqD,SAAW66H,EAAUv0G,SAAS8V,EAAK7O,MAC/C,SAGF,MAAMwtG,EAAS9wE,EAAQzzC,MAAMukH,GAC3BA,EAAO5wE,SAASrjC,MAAM0zG,GAAYA,EAAQ1mH,MAAQA,MAGhDinH,GACFH,EAAiBv7H,IAAI+8B,EAAM2+F,E,CAI/B,OAAOH,CACT,CDvBsC6B,CAAoCn5H,EAAK,CAC3ErG,GAAUy9B,SAGZ,GAAI8hG,GAA6B19H,KAAM,CACrC,MAAM,QAAEkE,GAAYM,EAAI1F,OACxB,IAAK,MAAOkW,EAAKtS,IAAU,IAAIg7H,EAA4BvlH,WACzDnD,EAAItS,EAAM0oD,QAAQlnD,E,CAGxB,CE7Bc,SAAU05H,GAAMp5H,GAE5B,MAAMu1H,EAAawD,GAA8B/4H,GAEjD,IAAKu1H,EACH,OAGF,MAAM,kBAAExwH,EAAiB,WAAED,GAAe9E,EAAI1F,OAExCkjB,EAAYsZ,GAChBhyB,EACAC,GAIFgM,KAEA,MAAMrT,EAAW63H,EAAWprG,cACxBvuB,OAAOwE,KAAKod,EAAUyZ,aAAajU,SAAStlB,IAC9C8f,EAAUy7G,6BAA6Bv7H,EAE3C,CCxBA,MAmBA,GALoC,CAClCiL,OAfa,SAAUjJ,GACvBA,EAAQqC,iBAAiBlI,GAAO8W,SAAUqoH,IAC1Ct5H,EAAQqC,iBAAiBlI,GAAOmX,OAAQooH,GAC1C,EAaE7wH,QAPc,SAAU7I,GACxBA,EAAQ2H,oBAAoBxN,GAAO8W,SAAUqoH,IAC7Ct5H,EAAQ2H,oBAAoBxN,GAAOmX,OAAQooH,GAC7C,IChBQhiG,OAAM,GAAEC,QAAO,GAAEC,QAAOA,IAAK39B,GAU/B4pE,GAAmB,SAAUvjE,GAEZm3H,GAA+Bn3H,EAAK,CACvDo3B,GACAC,GACAC,KAGWr8B,SAAS69B,IAChBA,EAAKyqC,kBACPzqC,EAAKyqC,iBAAiBvjE,E,GAG5B,EAUA,IACE2I,OATa,SAAUjJ,GACvBA,EAAQqC,iBAAiBC,GAAAA,MAAAA,OAAaq3H,gBAAiB91D,GACzD,EAQEh7D,QANc,SAAU7I,GACxBA,EAAQ2H,oBAAoBrF,GAAAA,MAAAA,OAAaq3H,gBAAiB91D,GAC5D,IC/BQnsC,OAAM,GAAEC,QAAO,GAAEC,QAAOA,IAAK39B,GAW/B0lC,GAA2B,SAC/Br/B,GAGqBm3H,GAA+Bn3H,EAAK,CACvDo3B,GACAC,GACAC,KAGWr8B,SAAS69B,IAChBA,EAAKuG,0BACPvG,EAAKuG,yBAAyBr/B,E,GAGpC,EAgBA,IACE2I,OAfa,SAAUjJ,GACvBA,EAAQqC,iBACNC,GAAAA,MAAAA,OAAas3H,yBACbj6F,GAEJ,EAWE92B,QATc,SAAU7I,GACxBA,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAas3H,yBACbj6F,GAEJ,ICtCQjI,OAAMA,IAAKz9B,GAWL,SAAU4/H,GACtBv5H,GAGA,MAAM,kBAAE+E,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCk/H,EAAax5H,EAAI1F,OAAO2K,MAExBuY,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,OAAO,KAGT,MAAMwZ,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAE3CwiG,EAAiB79H,OAAOwE,KAAKo5H,EAAWrvH,SAASzN,OAGjD65E,EACJsgD,GAAiB2C,IAAe1C,GAAiB5lH,iBAC7C6lH,EAAsBv5G,EAAUw5G,yBAEtC,IAAK,IAAIlrH,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BmrB,EAAczZ,EAAUyZ,YAAYv5B,GAEpCu5H,EACJhgG,EAAY4vB,SAASnqD,QAOrBu6B,EAAY4vB,SAASrjC,MAClB0zG,IACEA,EAAQuC,iBAAmBA,GACN,IAAnBA,GACCvC,EAAQjxH,cAAgB8wH,IAC5BG,EAAQ3gD,cAAgBA,IAG9B,GAAIt/C,EAAYhN,OAASmN,IAAU6/F,EACjC,OAAOz5G,EAAU2Z,gBAAgBz5B,E,CAGvC,CCrDc,SAAUg8H,GACtB15H,EACA62B,EACA4iG,GAEA,MAAM,kBAAE10H,EAAiB,WAAED,GAAe9E,EAAI1F,OACxCkjB,EAAYsZ,GAChBhyB,EACAC,GAGF,IAAKyY,EACH,MAAO,GAGT,MAAMuZ,EAAe,GAEfC,EAAqBp7B,OAAOwE,KAAKod,EAAUyZ,aAEjD,IAAK,IAAInrB,EAAI,EAAGA,EAAIkrB,EAAmBt6B,OAAQoP,IAAK,CAClD,MAAMpO,EAAWs5B,EAAmBlrB,GAC9BgtB,EAAOtb,EAAUyZ,YAAYv5B,GAE7Bu5H,EACc,MAAlBwC,GACA3gG,EAAK+tB,SAASnqD,QACdo8B,EAAK+tB,SAASrjC,MACX0zG,GAAYA,EAAQuC,iBAAmBA,IAG5C,GACE5iG,EAAY7T,SAAS8V,EAAK7O,SACxBwvG,GAAkBxC,GACpB,CACA,MAAM//F,EAAe1Z,EAAU2Z,gBAAgBz5B,GAC/Cq5B,EAAan8B,KAAKs8B,E,EAItB,OAAOH,CACT,CC9BA,MAAQK,OAAM,GAAEC,QAAOA,IAAK19B,GAMd,SAAUggI,GAAW35H,GACjC,GAAI0B,GAAMW,sBACR,OAEF,MAAMkzH,EAAagE,GAA2Bv5H,GAI9C,GAAIu1H,GAA0D,mBAArCA,EAAWniE,sBAAsC,CAGxE,GAFsBmiE,EAAWniE,sBAAsBpzD,GAGrD,M,CAIJ,MAAM43H,EAAkE,IAAjDh8H,OAAOwE,KAAKJ,EAAI1F,OAAO2K,MAAMkF,SAASzN,OASvDm7H,EAAkB,IARY6B,GAClC15H,EACA,CAACo3B,IACDx7B,OAAOwE,KAAKJ,EAAI1F,OAAO2K,MAAMkF,SAASzN,SAMH,OAJYk7H,EAC7C8B,GAA+B15H,EAAK,CAACq3B,UACrCh3B,IAG8C,GAChDk1H,GAGIt1H,EAAcD,EAAI1F,QAClB,QAAEoF,GAAYO,EAGd63H,EAAiCnC,GACrCj2H,EACAm4H,GAGIz3F,EAAengC,EAAYqF,cAAcX,OAKzCozH,EAAqCvC,GACzC91H,EACAo4H,EACA13F,EACA,SAOF,GAAI23F,EAAmCr7H,OAAS,EAAG,CACjD,MAAM,KAAEo8B,EAAI,WAAE1+B,EAAU,OAAE41B,GAAWioG,GACnCF,GAMF,OAHAG,GAA0B99H,EAAW8C,cATjB,YAUpB47B,EAAKsqC,uBAAuBpjE,EAAK5F,EAAY41B,EAAQ,Q,CAOvD,MAAM6lG,EAA0BD,GAC9Bl2H,EACAo4H,EACA13F,EACA,SAKF,GAAIy1F,EAAwBn5H,OAAS,EAAG,CACtC,MAAM,KAAEo8B,EAAI,WAAE1+B,GAAe69H,GAC3BpC,GAMF,OAHAqC,GAA0B99H,EAAW8C,cA/BjB,YAgCpB47B,EAAKwqC,qBAAqBtjE,EAAK5F,EAAY,Q,CAM7C,GAAIm7H,GAA2D,mBAAtCA,EAAW7sC,uBAAuC,CAGzE,GAFsB6sC,EAAW7sC,uBAAuB1oF,GAItD,M,CAKN,CAQA,SAASi4H,GACPE,GAEA,OACGA,EAAwBz7H,OAAS,GAChCy7H,EAAwBjlH,MACrBvW,IACErB,GAAmBqB,EAAKvC,aACzBwE,GAAoBjC,EAAKvC,WAAW8C,kBAE1Ci7H,EAAwB,EAE5B,CASA,SAASD,GACPh7H,EACA86H,GAAgB,GAEhB,GAAIA,EACF,GAAIl6H,GAAqBZ,GACvBD,GAAsBC,GAAe,OAChC,CAELD,GAAsBC,GAAe,GADZ,E,KAGtB,CAELD,GAAsBC,GAAe,GADZ,E,CAG7B,CChKc,SAAU08H,GACtB55H,GAGA,GAAI0B,GAAMW,sBACR,OAGF,MAAMkzH,EAAagE,GAA2Bv5H,GAE9C,GAAKu1H,IAID7zH,GAAMY,uBAINizH,EAAW5yD,iBAAkB,CAE/B1lE,GADmBs4H,EAAW5yD,iBAAiB3iE,EAAK,SACnB9C,c,CAErC,CC3Bc,SAAU28H,GAAU75H,GAChC,GAAI0B,GAAMW,sBACR,OAGF,MAAMkzH,EAAagE,GAA2Bv5H,IAG3Cu1H,GAAsD,mBAAjCA,EAAWzpE,mBAKnCypE,EAAWzpE,kBAAkB9rD,EAC/B,CChBA,MAEA,GAFiBo1H,GAAsB5rH,KAAK,KAAM,QAAS,oBCE3D,GAFiB4rH,GAAsB5rH,KAAK,KAAM,QAAS,oBCM3D,GANmB4rH,GAAsB5rH,KACvC,KACA,QACA,sBCyCF,GALiC,CAC/Bb,OA7Ba,SAAUjJ,GACvBA,EAAQqC,iBAAiBlI,GAAOsS,YAAawtH,IAC7Cj6H,EAAQqC,iBACNlI,GAAOuS,qBACPwtH,IAEFl6H,EAAQqC,iBAAiBlI,GAAOyS,WAAYutH,IAC5Cn6H,EAAQqC,iBAAiBlI,GAAO0S,UAAWutH,IAC3Cp6H,EAAQqC,iBAAiBlI,GAAO2S,UAAWutH,IAC3Cr6H,EAAQqC,iBAAiBlI,GAAOwS,YAAa2tH,GAC/C,EAoBEzxH,QAbc,SAAU7I,GACxBA,EAAQ2H,oBAAoBxN,GAAOsS,YAAawtH,IAChDj6H,EAAQ2H,oBACNxN,GAAOuS,qBACPwtH,IAEFl6H,EAAQ2H,oBAAoBxN,GAAOyS,WAAYutH,IAC/Cn6H,EAAQ2H,oBAAoBxN,GAAO0S,UAAWutH,IAC9Cp6H,EAAQ2H,oBAAoBxN,GAAOwS,YAAa2tH,GAClD,GCjBc,SAAUC,GACtBj6H,GAEA,MAAM,QAAEN,EAAO,WAAEoF,GAAe9E,EAAI1F,OAC9B4/H,EAiCR,SAAmCp1H,GACjC,MAAMquB,EAAQ,6BACR+mG,EAAW9yH,SAASunB,gBAAgBwE,EAAO,OAE3CgnG,EAAa,aAAar1H,IAChCo1H,EAASrrD,UAAUn0E,IAAI,aACvBw/H,EAAS5sG,aAAa,KAAM6sG,GAC5BD,EAAS5sG,aAAa,QAAS,8BAC/B4sG,EAAS5oG,MAAM1D,MAAQ,OACvBssG,EAAS5oG,MAAMjB,OAAS,OACxB6pG,EAAS5oG,MAAM+4F,cAAgB,OAC/B6P,EAAS5oG,MAAMuB,SAAW,WAK1B,MAAMunG,EAAOhzH,SAASunB,gBAAgBwE,EAAO,QACvCx1B,EAASyJ,SAASunB,gBAAgBwE,EAAO,UACzCknG,EAAWjzH,SAASunB,gBAAgBwE,EAAO,YAC3CmnG,EAAgBlzH,SAASunB,gBAAgBwE,EAAO,iBAChDonG,EAAUnzH,SAASunB,gBAAgBwE,EAAO,WAgChD,OA7BAx1B,EAAO2vB,aAAa,KAAM,UAAU6sG,KACpCx8H,EAAO2vB,aAAa,cAAe,kBAGnC+sG,EAAS/sG,aAAa,SAAU,UAChC+sG,EAAS/sG,aAAa,KAAM,iBAC5B+sG,EAAS/sG,aAAa,KAAM,OAC5B+sG,EAAS/sG,aAAa,KAAM,OAG5BgtG,EAAchtG,aAAa,SAAU,aACrCgtG,EAAchtG,aAAa,KAAM,UACjCgtG,EAAchtG,aAAa,MAAO,UAClCgtG,EAAchtG,aACZ,SACA,iDAIFitG,EAAQjtG,aAAa,KAAM,iBAC3BitG,EAAQjtG,aAAa,MAAO,aAC5BitG,EAAQjtG,aAAa,OAAQ,UAE7B3vB,EAAOuuB,YAAYmuG,GACnB18H,EAAOuuB,YAAYouG,GACnB38H,EAAOuuB,YAAYquG,GACnBH,EAAKluG,YAAYvuB,GACjBu8H,EAAShuG,YAAYkuG,GAEdF,CACT,CAtFmBM,CAA0B11H,GAuG7C,IACE21H,GAhBF,SAA0B/6H,GACxB,MAAQg7H,YAAa51H,EAAY61H,mBAAoB51H,GACnDrF,EAAQk7H,QACJC,EAAc,GAAG/1H,KAAcC,IAIrCrD,GAAMS,aAAa04H,GAAe,CAAC,CACrC,CA7FEC,CAAiBp7H,GAqGjB+6H,EApGaP,EAAUx6H,EAuGT+sB,cAAc,wBAAwBP,YAAYuuG,GApGhEljG,GAA0BS,mBAAmBlzB,EAAYpF,GAGzDq7H,GAAoBpyH,OAAOjJ,GAC3Bs7H,GAAmBryH,OAAOjJ,GAC1Bu7H,GAAoBtyH,OAAOjJ,GAC3Bo3H,GAAiBnuH,OAAOjJ,GACxBw7H,GAAyBvyH,OAAOjJ,GAGhCy7H,GAA6BxyH,OAAOjJ,GACpC07H,GAA8BzyH,OAAOjJ,GACrC27H,GAAsC1yH,OAAOjJ,GAE7C47H,GAAyB3yH,OAAOjJ,GAChC67H,GAA4B5yH,OAAOjJ,GACnC87H,GAAyB7yH,OAAOjJ,GAIhCgC,GAAMgB,gBAAgB9H,KAAK8E,EAC7B,CCfA,SAjCA,SACEoF,EACAC,GAEA,MAAM02H,EAA6B,GAEnC,IAAK12H,IAAsBD,EACzB,MAAM,IAAIjF,MACR,mEAIJ,IAAK,IAAIyK,EAAI,EAAGA,EAAI5I,GAAMe,cAAc/F,OAAQ4N,IAAK,CACnD,MAAMoxH,EAAeh6H,GAAMe,cAAc6H,GACnCqxH,GAAeD,EAAaE,aAC5BC,EAAoBH,EAAaG,kBACrC92H,EACAD,GAGIg3H,EAAoBJ,EAAaI,kBACrC/2H,EACAD,GAGE62H,IAAgBE,GAAqBC,IACvCL,EAA2B7gI,KAAK8gI,E,CAIpC,OAAOD,CACT,ECEA,SA1BA,SACE32H,EACAC,GAEA,MAAMg3H,EAAyBr6H,GAAMc,WAAW7E,QAAQq+H,GACtDA,EAAGt+G,cAAc8F,MACdwsC,GACCA,EAAGjrD,oBAAsBA,KACvBirD,EAAGlrD,YAAckrD,EAAGlrD,aAAeA,OAI3C,GAAKi3H,EAAuBr/H,OAA5B,CAIA,GAAIq/H,EAAuBr/H,OAAS,EAClC,MAAM,IAAImD,MACR,qDAAqDkF,qBAAqCD,oFAK9F,OAAOi3H,EAAuB,E,CAChC,ECdMtwG,GAAmB,mBAyCzB,MAAMwwG,GAAoCv8H,IACxC,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,GAEnBw8H,GACpBv8H,EAAemF,WACfnF,EAAeoF,mBAEH9J,SAASkhI,IACrBA,EAAKvwE,OAAOjsD,EAAe,GAC3B,EAGEy8H,GAAgC18H,IACpC,MAAM,kBAAEqF,EAAiB,WAAED,IAAelF,EAAAA,GAAAA,mBAAkBF,GAEtD8d,EAAYkoB,GAAwB5gC,EAAYC,GAElDyY,GACFA,EAAU6+G,gBAAgBt3H,EAAmBD,E,EAsCjD,MAAMw3H,GAAwB,SAAU58H,GACtC,MAAM68H,EAAoB76H,GAAMgB,gBAAgBtB,WAC7Co7H,GAAOA,IAAO98H,IAGb68H,GAAqB,GACvB76H,GAAMgB,gBAAgBrB,OAAOk7H,EAAmB,EAEpD,EAEA,GAzGA,SACEE,GAGA,MAAM,QAAE/8H,EAAO,WAAEoF,GAAe23H,EAAmBniI,QAuErD,SAA4BoF,GAC1B,MAAQg7H,YAAa51H,EAAY61H,mBAAoB51H,GACnDrF,EAAQk7H,QACJC,EAAc,GAAG/1H,KAAcC,WAE9BrD,GAAMS,aAAa04H,EAC5B,CA3EE6B,CAAmBh9H,GA6ErB,SAAwBA,GACtB,MAAMi9H,EAAuBj9H,EAAQ+sB,cAAc,OAAOhB,MACpDyuG,EAAWyC,EAAqBlwG,cAAc,OAChDytG,GACFyC,EAAqBrwG,YAAY4tG,EAErC,CAlFE0C,CAAel9H,GAGf63B,GAA0BU,sBAAsBnzB,EAAYpF,GAG5Dq7H,GAAoBxyH,QAAQ7I,GAC5Bs7H,GAAmBzyH,QAAQ7I,GAC3Bu7H,GAAoB1yH,QAAQ7I,GAC5Bo3H,GAAiBvuH,QAAQ7I,GAGzBw7H,GAAyB3yH,QAAQ7I,GAGjCy7H,GAA6B5yH,QAAQ7I,GACrC07H,GAA8B7yH,QAAQ7I,GACtC27H,GAAsC9yH,QAAQ7I,GAE9C47H,GAAyB/yH,QAAQ7I,GACjC67H,GAA4BhzH,QAAQ7I,GACpC87H,GAAyBjzH,QAAQ7I,GAIjCu8H,GAAiCv8H,GACjC08H,GAA6B18H,GAG7B48H,GAAsB58H,EACxB,ECpDc,SAAUm9H,GACtBn9H,GAEA,MAKMo9H,EAAgBnH,GAAqCj2H,EAL7Ck3B,GAA4Bl3B,EAAS,CACjD/F,GAAUy9B,OACVz9B,GAAU09B,WAIZ,IAAK,MAAM,KAAEyB,KAAUgkG,EAAe,CACpC,MAAM5/H,EAAgB47B,EAAKwR,OAAO5qC,GAClC,GAAIxC,EACF,OAAOA,C,CAGb,CC+UA,SAAS6/H,GACPjb,EACA9xD,GAEA,OAAO8xD,EAAI1gH,WACR47H,GACChtE,EAAGjrD,oBAAsBi4H,EAAGj4H,mBAC5BirD,EAAGlrD,aAAek4H,EAAGl4H,YAE3B,CAEA,SAASm4H,GACPnb,EACA9xD,GAEA,OAAO8xD,EAAIt+F,MACRw5G,GACCA,EAAGj4H,oBAAsBirD,EAAGjrD,mBAC5Bi4H,EAAGl4H,aAAekrD,EAAGlrD,YAE3B,CAWA,SA5XA,MAaExF,WAAAA,CACE49H,EACAh4H,EACAi4H,EACA12G,GARM,KAAA22G,iBAA4D,CAAC,EAqP7D,KAAAC,SAAYr9H,IAClB,IAAgC,IAA5BjD,KAAKugI,mBACP,OAQF,IAAKvgI,KAAKwgI,iBAAiB7gI,OACzB,OAGF,MAAMiD,GAAiBC,EAAAA,GAAAA,mBAAkBI,EAAIsD,eAE7C,IAAK3D,EACH,OAGF,MAAM,kBAAEoF,EAAiB,WAAED,GAAenF,EAIrC5C,KAAKygI,iBAAiBtqH,MAAMqgF,GAAMA,EAAEzuF,aAAeA,KAIxD/H,KAAK0gI,UACH,CACE14H,oBACAD,cAEF9E,EACD,EA7QDjD,KAAK2gI,UAAW,EAChB3gI,KAAK4gI,WAAaz4H,EAClBnI,KAAK6gI,cAAgBT,EACrBpgI,KAAKugI,oBAAqB,EAC1BvgI,KAAKygI,iBAAmB,GACxBzgI,KAAKwgI,iBAAmB,GACxBxgI,KAAK8gI,SAAWp3G,GAAW,CAAC,EAC5B1pB,KAAK+gI,qBAAuB/gI,KAAK8gI,SAASE,qBAAuB,GAGjEhhI,KAAKqb,GAAK8kH,CACZ,CAMOtB,UAAAA,GACL,OAAQ7+H,KAAK2gI,WAAa3gI,KAAKihI,oBACjC,CAQOC,UAAAA,CACLn5H,EACA2hB,EAAmC,CAAC,GAEpC1pB,KAAKqgI,iBAAiBt4H,GAAc2hB,CACtC,CAGOy3G,UAAAA,CAAWp5H,GAChB,OAAO/H,KAAKqgI,iBAAiBt4H,EAC/B,CAMOpK,GAAAA,CAAIijB,GACT5gB,KAAKohI,UAAUxgH,GACf5gB,KAAKqhI,UAAUzgH,EACjB,CAMOygH,SAAAA,CAAUzgH,GACf,GAAIs/G,GAAkBlgI,KAAKygI,iBAAkB7/G,GAC3C,OAGF,MAAM,kBAAE5Y,EAAiB,WAAED,GAAe6Y,EAEpCpa,GACJo1B,EAAAA,GAAAA,oBAAmB5zB,GAAmBugC,YAAYxgC,GAEpD,IAAKvB,EAIH,YAHAkR,QAAQC,KACN,2CAA2C3P,KAAqBD,KAKpE,MAAMpF,EAAU6D,EAAS7D,QAEzBA,EAAQqC,iBAAiBhF,KAAK4gI,WAAY5gI,KAAKsgI,SAAS7zH,KAAKzM,OAEzDA,KAAK+gI,qBAAqBphI,QAC5BK,KAAK+gI,qBAAqB7iI,SAASiK,IACjCxF,EAAQqC,iBAAiBmD,EAAWnI,KAAKsgI,SAAS7zH,KAAKzM,MAAM,IAIjEA,KAAKshI,yBAELthI,KAAKygI,iBAAiB5iI,KAAK+iB,EAC7B,CAOOwgH,SAAAA,CAAUxgH,GACXs/G,GAAkBlgI,KAAKwgI,iBAAkB5/G,KAI7C5gB,KAAKwgI,iBAAiB3iI,KAAK+iB,GAC3B5gB,KAAKshI,yBACP,CAMOC,kBAAAA,GACL,OAAOvhI,KAAKygI,gBACd,CAMOe,kBAAAA,GACL,OAAOxhI,KAAKwgI,gBACd,CAEOjN,OAAAA,GACLvzH,KAAKygI,iBAAiBviI,SAASs4F,GAAMx2F,KAAKyhI,aAAajrC,KACvDx2F,KAAKwgI,iBAAiBtiI,SAAS24D,GAAM72D,KAAK0hI,aAAa7qE,IACzD,CAMOhI,MAAAA,CAAOjuC,GACZ5gB,KAAK0hI,aAAa9gH,GAClB5gB,KAAKyhI,aAAa7gH,EACpB,CAMO6gH,YAAAA,CAAa7gH,GAClB,MAAMxc,EAAQ47H,GAAkBhgI,KAAKygI,iBAAkB7/G,GAEvD,IAAe,IAAXxc,EACF,OAGF,MAAMzB,EAqNV,SAA6BswD,GAC3B,MAAM73C,GAAkBwgB,EAAAA,GAAAA,oBAAmBq3B,EAAGjrD,mBAC9C,IAAKoT,EACH,MAAM,IAAItY,MAAM,8BAA8BmwD,EAAGjrD,qBAGnD,OAAOoT,EAAgBmtB,YAAY0qB,EAAGlrD,YAAYpF,OACpD,CA5NoBg/H,CAAoB/gH,GAEpC5gB,KAAKygI,iBAAiBn8H,OAAOF,EAAO,GAGpCzB,EAAQ2H,oBAAoBtK,KAAK4gI,WAAY5gI,KAAK6gI,eAE9C7gI,KAAK+gI,sBACP/gI,KAAK+gI,qBAAqB7iI,SAASiK,IAEjCxF,EAAQ2H,oBAAoBnC,EAAWnI,KAAK6gI,cAAc,IAG9D7gI,KAAKshI,wBACP,CAQOI,YAAAA,CAAa9gH,GAClB,MAAMxc,EAAQ47H,GAAkBhgI,KAAKwgI,iBAAkB5/G,IAExC,IAAXxc,IAIJpE,KAAKwgI,iBAAiBl8H,OAAOF,EAAO,GACpCpE,KAAKshI,yBACP,CAEOxC,iBAAAA,CACL92H,EACAD,GAEA,OAAOm4H,GAAkBlgI,KAAKygI,iBAAkB,CAC9Cz4H,oBACAD,cAEJ,CAEOg3H,iBAAAA,CACL/2H,EACAD,GAEA,OAAOm4H,GAAkBlgI,KAAKwgI,iBAAkB,CAC9Cx4H,oBACAD,cAEJ,CAEQ24H,SAAAA,CAAUvrD,EAAmCysD,GACnD,GAAI5hI,KAAK6+H,cAAgB7+H,KAAKugI,mBAC5B,OAGFvgI,KAAKugI,oBAAqB,EAC1B,MAAM/2G,EAAW,GACjB,IACE,IAAK,IAAIjc,EAAI,EAAGA,EAAIvN,KAAKwgI,iBAAiB7gI,OAAQ4N,IAAK,CACrD,MAAM4uE,EAAiBn8E,KAAKwgI,iBAAiBjzH,GAI7C,GAFE4nE,EAAeptE,aAAeo0E,EAAep0E,WAG7C,SAEF,MAAM4jC,EAAS3rC,KAAK6gI,cAClB7gI,KACAm1E,EACAgH,EACAylD,EACA5hI,KAAK8gI,UAKHn1F,aAAkBrhB,SACpBd,EAAS3rB,KAAK8tC,E,EAGlB,MAAO+gE,GACPh1F,QAAQC,KAAK,sBAAsB3X,KAAK4gI,aAAcl0B,E,CACtD,QACIljF,EAAS7pB,OACX2qB,QAAQwd,WAAWte,GAAUue,MAAK,KAChC/nC,KAAKugI,oBAAqB,CAAK,IAGjCvgI,KAAKugI,oBAAqB,C,CAGhC,CAuCQU,kBAAAA,GACN,OAAwC,IAAjCjhI,KAAKygI,iBAAiB9gI,MAC/B,CAEQ2hI,sBAAAA,GACN,MAAMjzG,EA6BV,SACEwzG,EACAC,GAEA,MAAMC,EAAS,GAETC,EAAMH,EAAI37G,OAAO47G,GAEvB,IAAK,IAAIv0H,EAAI,EAAGA,EAAIy0H,EAAIriI,OAAQ4N,IAAK,CACnC,MAAM0lD,EAAK+uE,EAAIz0H,GAEZw0H,EAAOt7G,MACLupE,GACC/8B,EAAGjrD,oBAAsBgoF,EAAEhoF,mBAC3BirD,EAAGlrD,aAAeioF,EAAEjoF,cAGxBg6H,EAAOlkI,KAAKo1D,E,CAIhB,OAAO8uE,CACT,CAnDsBE,CAChBjiI,KAAKygI,iBACLzgI,KAAKwgI,kBAED0B,EAAUliI,KAAK6uD,OACfszE,EAAkBC,IACtBF,EAAQE,EAAqB7kI,OAAOoF,QAAQ,EAG9C0rB,EAAUnwB,SAAQ,SAAUmkI,GAC1B,MAAMjnH,GAAkBwgB,EAAAA,GAAAA,oBACtBymG,EAAKr6H,mBACLugC,YAAY85F,EAAKt6H,YAEnB,IAAKqT,EACH,OAGF,MAAM,QAAEzY,GAAYyY,EAEpBzY,EAAQ2H,oBACNrF,GAAAA,MAAAA,OAAaq9H,iBACbH,GAEFx/H,EAAQqC,iBAAiBC,GAAAA,MAAAA,OAAaq9H,iBAAkBH,EAC1D,GACF,GCtSF,SA7BA,SACEhC,EACAh4H,EACAi4H,EACA12G,GAMA,GAJqC/kB,GAAMe,cAAc+gB,MACtD24G,GAASA,EAAK/jH,KAAO8kH,IAItB,MAAM,IAAIr9H,MAAM,yBAAyBq9H,sBAI3C,MAAMxB,EAAe,IAAI4D,GACvBpC,EACAh4H,EACAi4H,EACA12G,GAOF,OAHA/kB,GAAMe,cAAc7H,KAAK8gI,GAGlBA,CACT,EC5BA,SARA,WACE,KAAOh6H,GAAMe,cAAc/F,OAAS,GAAG,CAChBgF,GAAMe,cAAc21C,MAE5Bk4E,S,CAEjB,ECCA,SAJA,SAAyB4M,GACvB,OAAOx7H,GAAMe,cAAcyQ,MAAMqgF,GAAMA,EAAEn7E,KAAO8kH,GAClD,ECCA,SAJA,WACE,OAAOx7H,GAAMe,aACf,ECeA,SAbA,SAA6By6H,GAC3B,MAAMqC,EAAoB79H,GAAMe,cAAcrB,WAC3C+6H,GAASA,EAAK/jH,KAAO8kH,IAGxB,GAAIqC,GAAqB,EAAG,CACL79H,GAAMe,cAAc88H,GAE5BjP,UACb5uH,GAAMe,cAAcpB,OAAOk+H,EAAmB,E,CAElD,E,2BCQA,MAAQnoG,OAAM,GAAEC,QAAO,GAAEC,QAAO,YAAEpN,IAAavwB,GAcjC,MAAO6lI,GAUnBlgI,WAAAA,CAAY8Y,GARZ,KAAAsF,cAAgB,GAChB,KAAAuZ,YAAc,CAAC,EAIf,KAAAwoG,mBAAqB,CAAC,EACtB,KAAAx3F,eAAiB,CAAC,EAGhBlrC,KAAKqb,GAAKA,CACZ,CAMA4rD,cAAAA,GACE,OAAOjnE,KAAK2gB,cAAcrT,KAAI,EAAGvF,gBAAiBA,GACpD,CAKAiZ,gBAAAA,GACE,OAAOhhB,KAAK2gB,cAAclD,OAC5B,CAOO2c,eAAAA,CAAgBuoG,GACrB,MAAMxoG,EAAen6B,KAAKkrC,eAAey3F,GACzC,GAAKxoG,EAOL,OAAOA,EANLziB,QAAQC,KACN,IAAIgrH,6CAA4D3iI,KAAKqb,OAM3E,CAUAtV,OAAAA,CAAQpF,EAAkBisB,EAAmC,CAAC,GAC5D,MAAMg2G,EAAiBj+H,GAAMa,MAAM7E,GAC7BkiI,OAAkC,IAAbliI,GAAyC,KAAbA,EACjDmiI,EAAoB9iI,KAAKk6B,YAAYv5B,GAE3C,IAAKkiI,EAKH,YAJAnrH,QAAQC,KACN,uDACAiV,GAKJ,IAAKg2G,EAIH,YAHAlrH,QAAQC,KACN,IAAIhX,mGAKR,GAAImiI,EAIF,YAHAprH,QAAQC,KACN,IAAIhX,0CAAiDX,KAAKqb,OAO9D,MAAQlV,UAAWH,GAAc48H,EAQ3BG,EAAmB,IAAI/8H,EANX,CAChBE,KAAMvF,EACN4V,YAAavW,KAAKqb,GAClBuR,kBAOF5sB,KAAKkrC,eAAevqC,GAAYoiI,CAClC,CAEOC,eAAAA,CACLriI,EACAsiI,EACAr2G,EAAgB,CAAC,GAEjB,IAAIs2G,EAAiBv+H,GAAMa,MAAM7E,IAC7BwF,UAEJ,IAAK+8H,EAAgB,CAEnB,MAAMC,EAAcx+H,GAAMa,MAAMy9H,GAC7B98H,UAIH,MAAMi9H,UAAqBD,GAE3BC,EAAaziI,SAAWA,EAExBuiI,EAAiBE,EAEjBz+H,GAAMa,MAAM7E,GAAY,CACtBwF,UAAWi9H,E,CAMfpjI,KAAK+F,QAAQm9H,EAAeviI,SAAUisB,EACxC,CAeO6oD,WAAAA,CAAY1tE,EAAoBC,GACrC,MAAMq7H,GAAmBpnD,EAAAA,GAAAA,uBAEzB,IAAKj0E,GAAqBq7H,EAAiB1jI,OAAS,EAClD,MAAM,IAAImD,MACR,mFAIJ,MAAMwgI,EAA0Bt7H,GAAqBq7H,EAAiB,GAAGhoH,GAItErb,KAAK2gB,cAAc8F,MAAK,EAAG1e,WAAYw7H,KAAWA,IAASx7H,KAE5D/H,KAAK2gB,cAAc9iB,KAAK,CACtBkK,aACAC,kBAAmBs7H,IAKvB,MAAM3iI,EAAWX,KAAKwjI,kCAEEt0H,GAAAA,SAASC,qBACbjQ,IAAI,eACtBc,KAAKk8H,6BAA6Bv7H,EAEtC,CAUO2+H,eAAAA,CAAgBt3H,EAA2BD,GAChD,MAAMqjB,EAAU,GAgBhB,GAdAprB,KAAK2gB,cAAcziB,SAAQ,CAACulI,EAAQr/H,KAClC,IAAIw5B,GAAQ,EACR6lG,EAAOz7H,oBAAsBA,IAC/B41B,GAAQ,EAEJ71B,GAAc07H,EAAO17H,aAAeA,IACtC61B,GAAQ,IAGRA,GACFxS,EAAQvtB,KAAKuG,E,IAIbgnB,EAAQzrB,OAGV,IAAK,IAAI4N,EAAI6d,EAAQzrB,OAAS,EAAG4N,GAAK,EAAGA,IACvCvN,KAAK2gB,cAAcrc,OAAO8mB,EAAQ7d,GAAI,EAG5C,CAEOogB,iBAAAA,CAAkBhtB,EAAkBitB,GACzC,MAAMuM,EAAen6B,KAAKkrC,eAAevqC,QAEpB2C,IAAjB62B,EAQJA,EAAaxM,kBAAkBC,GAP7BlW,QAAQC,KACN,QAAQhX,0DAOd,CAEA+iI,WAAAA,CACE/iI,EACAusB,EACAxD,EAAU,CAAC,GAEN/oB,EAKDusB,IAAStwB,GAAUy9B,OAQnBnN,IAAStwB,GAAU09B,QAKnBpN,IAAStwB,GAAU29B,QAKnBrN,IAAStwB,GAAUuwB,SAKvBzV,QAAQC,KAAK,qCAJX3X,KAAKw0E,gBAAgB7zE,GALrBX,KAAKu0E,eAAe5zE,GALpBX,KAAKs0E,eAAe3zE,GARpBX,KAAKq0E,cACH1zE,EACA+oB,GAAW1pB,KAAK0iI,mBAAmB/hI,IAPrC+W,QAAQC,KAAK,wCA4BjB,CAcO08D,aAAAA,CACL1zE,EACAyzE,EAAsB,CAAC,GAEvB,MAAMj6C,EAAen6B,KAAKkrC,eAAevqC,GAEzC,QAAqB2C,IAAjB62B,EAKF,YAJAziB,QAAQC,KACN,QAAQhX,kDAMZ,IAAKw5B,EAIH,YAHAziB,QAAQC,KACN,IAAIhX,eAAsBw5B,iEAK9B,MA4BMD,EAA+B,CACnC4vB,SAlBoB,IAXe9pD,KAAKk6B,YAAYv5B,GAClDX,KAAKk6B,YAAYv5B,GAAUmpD,SAC3B,MAEgBsqB,EAAoBtqB,SACpCsqB,EAAoBtqB,SACpB,IAKoDn7C,QACtD,CAACozH,EAAQ5H,KACP,MAAMwJ,OAA0CrgI,IAA3B62H,EAAQuC,eACvBkH,OAAuCtgI,IAAxB62H,EAAQjxH,YAQ7B,OALG64H,EAAOt7G,MAAMo9G,GA8axB,SACEC,EACAC,GAEA,GAAID,EAAS56H,cAAgB66H,EAAS76H,YACpC,OAAO,EAGT,OAAO46H,EAAStqD,cAAgBuqD,EAASvqD,WAC3C,CAvbgCwqD,CAAeH,EAAK1J,OACzCwJ,IAAgBC,GAEjB7B,EAAOlkI,KAAKs8H,GAEP4H,CAAM,GAEf,IAMA70G,KAAMmN,IAGRr6B,KAAKk6B,YAAYv5B,GAAYu5B,EAC7Bl6B,KAAKkrC,eAAevqC,GAAUusB,KAAOmN,GAGrC,MACM4pG,EADkB/0H,GAAAA,SAASC,qBACCjQ,IAAI,cAEtC,GAAIc,KAAKkkI,8BAA8B9vD,IAAwB6vD,EAC7DjkI,KAAKk8H,6BAA6Bv7H,OAC7B,CAGL,IAD6BX,KAAKwjI,mCACLS,EAAW,CACtC,MAAM5gF,EAAST,GAAYI,iBAAiB,WAC5ChjD,KAAKmkI,uBAAuB9gF,E,EAIY,mBAAjClpB,EAAa41C,iBACtB51C,EAAa41C,kBAEf/vE,KAAKokI,mBAEL,MAAMlhI,EAAwC,CAC5CqT,YAAavW,KAAKqb,GAClB1a,WACAyzE,wBAGFv0E,EAAAA,GAAAA,cAAaC,GAAAA,YAAahD,GAAOunI,eAAgBnhI,GACjDlD,KAAKskI,6BAA6B3jI,EAAU05B,GAAQ+5C,EACtD,CAUOE,cAAAA,CAAe3zE,GACpB,MAAMw5B,EAAen6B,KAAKkrC,eAAevqC,GAEzC,QAAqB2C,IAAjB62B,EAKF,YAJAziB,QAAQC,KACN,QAAQhX,kDAQZ,MAAM4jI,EAAkBvkI,KAAKwkI,eAAe7jI,GACtCu5B,EAAcr7B,OAAOqmB,OACzB,CACE4kC,SAAUy6E,EAAkBA,EAAgBz6E,SAAW,IAEzDy6E,EACA,CACEr3G,KAAMoN,KAIJ0/F,EAAsBh6H,KAAKi6H,yBAGjC//F,EAAY4vB,SAAW5vB,EAAY4vB,SAASlpD,QACzCu5H,GACCA,EAAQjxH,cAAgB8wH,GAAuBG,EAAQ3gD,cAG3D,IAAItsD,EAAOoN,GACyB,IAAhCJ,EAAY4vB,SAASnqD,SACvButB,EAAOmN,GACPH,EAAYhN,KAAOA,GAGrBltB,KAAKk6B,YAAYv5B,GAAYu5B,EAC7BC,EAAajN,KAAOA,EAEyB,mBAAlCiN,EAAakwB,kBACtBlwB,EAAakwB,mBAEfrqD,KAAKokI,mBAOLpkI,KAAKskI,6BAA6B3jI,EAAU25B,GAC9C,CASOi6C,cAAAA,CAAe5zE,GACpB,MAAMw5B,EAAen6B,KAAKkrC,eAAevqC,GAEzC,QAAqB2C,IAAjB62B,EAKF,YAJAziB,QAAQC,KACN,QAAQhX,kDAMZ,MAAMu5B,EAAc,CAClB4vB,SAAU,GACV58B,KAAMqN,IAGRv6B,KAAKk6B,YAAYv5B,GAAYu5B,EAC7BC,EAAajN,KAAOqN,GAEyB,mBAAlCJ,EAAa6N,kBACtB7N,EAAa6N,mBAGfhoC,KAAKokI,mBACLpkI,KAAKskI,6BAA6B3jI,EAAU45B,GAC9C,CASOi6C,eAAAA,CAAgB7zE,GACrB,MAAMw5B,EAAen6B,KAAKkrC,eAAevqC,GAEzC,QAAqB2C,IAAjB62B,EAKF,YAJAziB,QAAQC,KACN,QAAQhX,kDAMZ,MAAMu5B,EAAc,CAClB4vB,SAAU,GACV58B,KAAMC,IAGRntB,KAAK0iI,mBAAmB/hI,GAAYX,KAAKk6B,YAAYv5B,GAErDX,KAAKk6B,YAAYv5B,GAAYu5B,EAC7BC,EAAajN,KAAOC,GAE0B,mBAAnCgN,EAAa8N,mBACtB9N,EAAa8N,oBAEfjoC,KAAKokI,mBACLpkI,KAAKskI,6BAA6B3jI,EAAUwsB,GAC9C,CAOOq3G,cAAAA,CAAe7jI,GACpB,MAAM8jI,EAAqBzkI,KAAKk6B,YAAYv5B,GAE5C,QAA2B2C,IAAvBmhI,EAIJ,OAAOA,CACT,CAQOjB,+BAAAA,GACL,OAAO3kI,OAAOwE,KAAKrD,KAAKk6B,aAAa/jB,MAAMxV,IACzC,MAAMu5B,EAAcl6B,KAAKk6B,YAAYv5B,GACrC,OACEu5B,EAAYhN,OAASmN,IACrBr6B,KAAKkkI,8BAA8BhqG,EAAY,GAGrD,CAEOgiG,4BAAAA,CACLv7H,EACAitB,GAEA,MAAMy1B,EAASrjD,KAAK0kI,WAAW/jI,EAAUitB,GAEzC5tB,KAAKmkI,uBAAuB9gF,EAC9B,CAEQqhF,UAAAA,CAAW/jI,EAAkBitB,GACnC,IAAIu6B,EACA9E,EAEJ,OAAIz1B,IAGFu6B,EAAa,GAAGxnD,KAAYitB,IAE5By1B,EAASwD,GAAe7D,iBAAiBmF,GAAY,GAEjD9E,GACKA,GAKX8E,EAAa,GAAGxnD,IAEhB0iD,EAASwD,GAAe7D,iBAAiBmF,GAAY,GAEjD9E,IAKJ8E,EAAaxnD,EAEb0iD,EAASwD,GAAe7D,iBAAiBmF,GAAY,GAEjD9E,GAIGT,GAAYI,iBAAiB,YACtC,CAEAmhF,sBAAAA,CAAuB9gF,GACrBrjD,KAAK2gB,cAAcziB,SAAQ,EAAG8J,oBAAmBD,iBAC/C,MAAMnF,GAAiBie,EAAAA,GAAAA,wBACrB9Y,EACAC,GAGF,IAAKpF,EACH,OAGF,MAAM,SAAE4D,GAAa5D,EACrB4lD,GAAkBhiD,EAAS7D,QAAS0gD,EAAO,GAE/C,CAMOshF,oBAAAA,CACLhkI,EACAisB,EACA6gC,GAEA,QAAsCnqD,IAAlCtD,KAAKkrC,eAAevqC,GAItB,OAHA+W,QAAQC,KACN,QAAQhX,iDAEH,EAGT,IAAIikI,EAkBJ,OAfEA,EADEn3E,EACe7gC,EAKA/tB,OAAOqmB,OACtBllB,KAAKkrC,eAAevqC,GAAUisB,cAC9BA,GAIJ5sB,KAAKkrC,eAAevqC,GAAUisB,cAAgBg4G,EAE9C5kI,KAAKokI,oBAEE,CACT,CAMOnK,sBAAAA,GACL,OAAOv9H,EAAcs7F,OACvB,CAUA6sC,oBAAAA,CAAqBlkI,EAAkBmkI,GACrC,QAAsCxhI,IAAlCtD,KAAKkrC,eAAevqC,GAItB,YAHA+W,QAAQC,KACN,QAAQhX,gDAKZ,MAAMikI,EACJ1lI,KAAIc,KAAKkrC,eAAevqC,GAAUisB,cAAek4G,IACjD9kI,KAAKkrC,eAAevqC,GAAUisB,cAEhC,OAAOnoB,KAAUmgI,EACnB,CAUOrvD,KAAAA,CACLwvD,EACAC,EAA2C,MAE3C,IAAIvkH,EAAYsZ,GAA8BgrG,GAE9C,OAAItkH,GACF/I,QAAQC,KAAK,aAAaotH,oBACnBtkH,IAGTA,EAAYsZ,GAAiCgrG,GAC7CC,EAAeA,GAAgB,MAAO,GAEtCnmI,OAAOwE,KAAKrD,KAAKkrC,gBACdtqC,OAAOokI,GACP9mI,SAASyC,IACR,MAAMskI,EAAqBjlI,KAAKkrC,eAAevqC,GACzCukI,EAAoBllI,KAAKk6B,YAAYv5B,GACrCwkI,EAAiBF,EAAmB/3G,KAE1CzM,EAAU1a,QAAQpF,GAEjB8f,EAAmCijH,YAClC/iI,EACAwkI,EACA,CACEr7E,SAAUo7E,EAAkBp7E,UAAY,IAE3C,IAGErpC,EACT,CAOQyjH,6BAAAA,CAA8BhqG,GACpC,MAAM8/F,EAAsBh6H,KAAKi6H,yBAEjC,OAAO//F,GAAa4vB,UAAUrjC,MAC3B0zG,GACCA,EAAQjxH,cAAgB8wH,QACA12H,IAAxB62H,EAAQ3gD,aAEd,CAKQ4qD,gBAAAA,GACNpkI,KAAK2gB,cAAcziB,SAAQ,EAAG8J,oBAAmBD,kBAC/C6zB,EAAAA,GAAAA,oBAAmB5zB,GAAmBozB,eAAerzB,EAAW,GAEpE,CAQQu8H,4BAAAA,CACN3jI,EACAusB,EACAknD,GAEA,MAAMlxE,EAA0C,CAC9CqT,YAAavW,KAAKqb,GAClB1a,WACAusB,OACAknD,wBAGFv0E,EAAAA,GAAAA,cAAaC,GAAAA,YAAahD,GAAOs6E,kBAAmBl0E,EACtD,ECzuBF,SApBA,SAAyBqT,GAMvB,GAJ8B5R,GAAMc,WAAWghB,MAC5Cw4G,GAAOA,EAAG5jH,KAAO9E,IAKlB,YADAmB,QAAQC,KAAK,IAAIpB,sBAInB,MAAMkK,EAAY,IAAIgiH,GAAUlsH,GAMhC,OAHA5R,GAAMc,WAAW5H,KAAK4iB,GAGfA,CACT,ECLA,SAbA,SAA0BlK,GACxB,MAAM6uH,EAAiBzgI,GAAMc,WAAWpB,WACrC46H,GAAOA,EAAG5jH,KAAO9E,IAGhB6uH,GAAkB,IACpBl9F,GAA4BE,gBAAgB7xB,GAE5C8uH,GAAiC9uH,GACjC5R,GAAMc,WAAWnB,OAAO8gI,EAAgB,GAE5C,ECAA,SAVA,WACE,MAAM3/H,EAAa,IAAI6/H,GAAa7/H,YAEpC,IAAK,MAAMgb,KAAahb,EACtB8/H,GAAiB9kH,EAAUpF,IAG7BiqH,GAAa7/H,WAAa,EAC5B,ECRA,SAJA,SAAsB8Q,GACpB,OAAO5R,GAAMc,WAAW0Q,MAAMqgF,GAAMA,EAAEn7E,KAAO9E,GAC/C,ECAA,SAJA,WACE,OAAO5R,GAAMc,UACf,ECLM+/H,GAAQ,CAAC5oI,GAAUy9B,OAAQz9B,GAAU09B,QAAS19B,GAAU29B,SA8B9D,SAtBA,SAAmC55B,GACjC,OAAOgE,GAAMc,WAAW7E,QAAO,EAAGs5B,kBAChC,MAAMD,EAAqBp7B,OAAOwE,KAAK62B,GAEvC,IAAK,IAAI3sB,EAAI,EAAGA,EAAI0sB,EAAmBt6B,OAAQ4N,IAC7C,GAAI5M,IAAas5B,EAAmB1sB,IAK/B2sB,EAAYv5B,IAIb6kI,GAAMv/G,SAASiU,EAAYv5B,GAAUusB,MACvC,OAAO,EAGX,OAAO,CAAK,GAEhB,EChBA,IAAIu4G,GAAiBtgI,GAMrB,SAASq9B,KACP,OAAOijG,EACT,CAMA,SAASC,GAAqBnjG,GAC5BkjG,GAAiBljG,CACnB,CAGA,SAASojG,KACPF,GAAiBtgI,EACnB,CAeA,SAAS1B,GACP9C,EACA+B,GAEA,MAAMk0H,EAAUp0F,KACV9+B,EAAWkzH,EAAQn0H,YAAYC,GACrC,OAAOk0H,EAAQnzH,eAAeC,EAAU/C,EAC1C,CAcA,SAASqD,GACP3G,EACAqF,GAEKrF,EAAW8C,gBACd9C,EAAW8C,cAAgBuV,GAAAA,UAAAA,UAG7B,MAAMkhH,EAAUp0F,KACV9+B,EAAWkzH,EAAQn0H,YAAYC,GAerC,OAbAk0H,EAAQ5yH,cAAc3G,EAAYqG,GAI9BhB,aAAmCkjI,eCxEzC,SACEvoI,EACAsF,GAEA,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,EAAe,WAAErT,GAAenF,EAElCy3E,EAAYv9E,GAAO+oI,iBAEnB3iI,EAA0C,CAC9C7F,aACA0K,aACAC,kBAAmBoT,EAAgBC,KAGrCxb,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EACvC,CDyDI4iI,CAAiCzoI,EAAYqF,GClDjD,SAAsCrF,GACpC,MAAM,SAAEsD,GAAatD,EAAWyD,SAE1B2E,EAAasgI,GAA0BplI,GAE7C,IAAK8E,EAAW9F,OACd,OAIF,MAAMqmI,EAAoB,GAgB1B,GAdAvgI,EAAWvH,SAASuiB,IAClBA,EAAUE,cAAcziB,SAAS0iB,IAC/B,MAAM,kBAAE5Y,EAAiB,WAAED,GAAe6Y,GACpC,oBAAE7d,IAAwB8d,EAAAA,GAAAA,wBAC9B9Y,EACAC,GAGE3K,EAAWyD,SAASiC,sBAAwBA,GAC9CijI,EAAkBnoI,KAAK+iB,E,GAEzB,KAGColH,EAAkBrmI,OACrB,OAGF,MAAM06E,EAAYv9E,GAAO+oI,iBAEzBG,EAAkB9nI,SAAQ,EAAG8J,oBAAmBD,iBAC9C,MAAM7E,EAA0C,CAC9C7F,aACA0K,aACAC,sBAGFnI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EAAY,GAErD,CDcI+iI,CAA6B5oI,GAGxBA,EAAW8C,aACpB,CAeA,SAAS2D,GACPnD,EACA+B,GAEA,MAAMk0H,EAAUp0F,KACV9+B,EAAWkzH,EAAQn0H,YAAYC,GAErC,OAAOk0H,EAAQ9yH,uBAAuBJ,EAAU/C,EAClD,CAMA,SAASsD,GAAiB9D,GACxB,MAAMy2H,EAAUp0F,KACVnlC,EAAau5H,EAAQ/1H,cAAcV,GAGzC,IAAK9C,EACH,OAGFu5H,EAAQ3yH,iBAAiB9D,GAGzB,MAAMk6E,EAAYv9E,GAAOm8E,mBAEnB/1E,EAA4C,CAChD7F,aACA6oI,qBAAsBtP,EAAQp0H,MAGhC3C,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,EACvC,CAMA,SAASrC,GAAcV,GAIrB,OAHgBqiC,KACW3hC,cAAcV,EAG3C,CAKA,SAAS2E,KACS09B,KACR19B,sBACV,CErJA,IAAIqhI,IAAqB,EAQnB,SAAUC,GAAKC,EAAuB,CAAC,GACvCF,MAyCN,WAEEG,KAEA,MAAMC,EAAsBthI,GAAAA,MAAAA,OAAauhI,gBACnCpE,EAAuBn9H,GAAAA,MAAAA,OAAaq9H,iBAE1CxiI,GAAAA,YAAYkF,iBAAiBuhI,EAAqBrJ,IAClDp9H,GAAAA,YAAYkF,iBAAiBo9H,EAAsBqE,GACrD,CA9CEC,GAmEAC,KAKA7mI,GAAAA,YAAYkF,iBACV4hI,GAAaroG,oBACbsoG,IAGF/mI,GAAAA,YAAYkF,iBACV4hI,GAAaxlI,4BACb0lI,IAGFhnI,GAAAA,YAAYkF,iBACV4hI,GAAaxlI,4BACb0lI,IAMFhnI,GAAAA,YAAYkF,iBACV4hI,GAAantH,sBACbstH,IAGFjnI,GAAAA,YAAYkF,iBACV4hI,GAAahtH,2BACbotH,IAEFlnI,GAAAA,YAAYkF,iBACV4hI,GAAavtH,qCACb4tH,IAGFnnI,GAAAA,YAAYkF,iBACV4hI,GAAaztH,oCACb+tH,IAvGFf,IAAqB,EACvB,CAOM,SAAU5S,KACd+S,KACAK,KAIA5sG,KAGAl0B,KAGA,MAAM08B,EAAoBC,KACpBjoB,EAA2BF,KAEjCkoB,EAAkB79B,mBAAmB,CAAC,GACtC6V,EAAyBvE,aACzBmwH,IAAqB,CACvB,CAwBA,SAASG,KACP,MAAMC,EAAsBthI,GAAAA,MAAAA,OAAauhI,gBACnCpE,EAAuBn9H,GAAAA,MAAAA,OAAaq9H,iBAE1CxiI,GAAAA,YAAYwK,oBAAoBi8H,EAAqBrJ,IACrDp9H,GAAAA,YAAYwK,oBAAoB83H,EAAsBqE,GACxD,CAsDA,SAASE,KAIP7mI,GAAAA,YAAYwK,oBACVs8H,GAAaroG,oBACbsoG,IAGF/mI,GAAAA,YAAYwK,oBACVs8H,GAAaxlI,4BACb0lI,IAGFhnI,GAAAA,YAAYwK,oBACVs8H,GAAaxlI,4BACb0lI,IAOFhnI,GAAAA,YAAYwK,oBACVs8H,GAAantH,sBACbstH,IAGFjnI,GAAAA,YAAYwK,oBACVs8H,GAAahtH,2BACbotH,IAEFlnI,GAAAA,YAAYwK,oBACVs8H,GAAavtH,qCACb4tH,IAGFnnI,GAAAA,YAAYwK,oBACVs8H,GAAaztH,oCACb+tH,GAEJ,CC3Kc,SAAUC,GACtBC,EACAjyD,EACAgH,EACAkrD,GAEA,MAAM,OAAEh/H,GAAWg/H,EAAoB9pI,OAEjC6d,GAAkBwgB,EAAAA,GAAAA,oBAAmBugD,EAAen0E,mBAC1D,IAAKoT,EACH,MAAM,IAAItY,MACR,8BAA8Bq5E,EAAen0E,qBAIjD,MAAMs/H,EAAYlsH,EAAgBmtB,YAAY4zC,EAAep0E,YAE7Du/H,EAAU31F,UAAUtpC,GACpBi/H,EAAUjpH,QACZ,CC3BA,MAAM,gBAAEi+G,IAAoBr3H,GAAAA,MAAAA,OASd,SAAUsiI,GACtBC,GAQA,OANmCC,GACjCD,EACAlL,GACA6K,GAIJ,CCPc,SAAUO,GACtBN,EACAjyD,EACAgH,EACAwrD,EACAj+G,GAEA,MAAMxmB,EAAcykI,EAAiBpqI,QAC/B,SAAE0d,EAAQ,MAAE6iB,EAAK,mBAAE8pG,EAAkB,OAAE1zE,GAAWhxD,EAElDkY,GAAkBwgB,EAAAA,GAAAA,oBAAmBugD,EAAen0E,mBAC1D,IAAKoT,EACH,MAAM,IAAItY,MACR,oCAAoCq5E,EAAen0E,qBAIvD,MAAMs/H,EAAYlsH,EAAgBmtB,YAAY4zC,EAAep0E,YACvD8/H,EAE8B,CAClCr1E,SAAU10B,GAOZ,GAJIpU,GAASo+G,iBAAmBF,IAC9BC,EAAY3zE,OAASA,GAGnBozE,aAAqB94G,GAAAA,mBACvB84G,EAAUt0E,cAAc60E,EAAa5sH,OAChC,MAAIqsH,aAAqBprH,GAAAA,eAG9B,MAAM,IAAIpZ,MAAM,gCAFhBwkI,EAAUt0E,cAAc60E,E,CAK1BP,EAAUjpH,QACZ,CClCc,SAAU0pH,GACtBP,EACA99G,EAAU,CAAEo+G,iBAAiB,IAS7B,OAPwBL,GACtBD,EACAviI,GAAAA,MAAAA,OAAakzH,aACbuP,GACAh+G,EAIJ,CClBc,SAAUs+G,GACtBZ,EACAjyD,EACAgH,GAEA,MAAM/gE,GAAkBwgB,EAAAA,GAAAA,oBAAmBugD,EAAen0E,mBAC1D,IAAKoT,EACH,MAAM,IAAItY,MACR,8BAA8Bq5E,EAAen0E,qBAIjD,MAAM0hB,EAAU09G,EAAqBjG,WAAWhlD,EAAep0E,YAEzDu/H,EAAYlsH,EAAgBmtB,YAAY4zC,EAAep0E,YACvDkgI,EAAY7sH,EAAgBmtB,YAAY4sC,EAAeptE,YAE7D,IAA0B,IAAtB2hB,GAASw+G,SAAoB,CAC/B,MAAMC,EAAUF,EAAUG,UAE1Bd,EAAUe,QAAQF,E,CAEpB,IAAyB,IAArBz+G,GAAS4+G,QAAmB,CAC9B,MAAMC,EAASN,EAAUO,SACzBlB,EAAUmB,OAAOF,E,CAGnBjB,EAAUjpH,QACZ,CCrCA,MAAQi+G,gBAAeA,IAAKr3H,GAAAA,MAAAA,OASd,SAAUyjI,GACtBlB,GAQA,OAN4BC,GAC1BD,EACAlL,GACA0L,GAIJ,CCZA,MAAMW,GAAyBA,CAAC16G,EAAU26G,IACxC7jI,GAAAA,UAAAA,oCAA8C7F,IAC5C,4BACA+uB,EACA26G,GAwBW1tH,eAAe2tH,GAC5BzB,EACAjyD,EACAgH,GAEA,MAAM/gE,GAAkBwgB,EAAAA,GAAAA,oBAAmBugD,EAAen0E,mBAC1D,IAAKoT,EACH,MAAM,IAAItY,MACR,8BAA8Bq5E,EAAen0E,qBAIjD,MAAMigI,EAAY7sH,EAAgBmtB,YAAY4sC,EAAeptE,YAIvD2hB,EAAU09G,EAAqBjG,WAAWhlD,EAAep0E,YAE/D,GAAI2hB,GAASo/G,SACX,OAGF,MAAMxB,EAAYlsH,EAAgBmtB,YAAY4zC,EAAep0E,YAIvDghI,EAAWd,EAAUlsH,oBAErBitH,EADoBjsG,GAAAA,SAAAA,IAAa,mBAAoBgsG,GACN9qD,qBAE/CgrD,EAAiB3B,EAAUh5F,cAEjC,ICrEY,SACZ46F,EACAC,GAEA,MAAQ1sG,gBAAiB2sG,GAAqBF,EAAU9pG,aAChD3C,gBAAiB4sG,GAAqBF,EAAU/pG,YAClDkqG,EAAcrsG,GAAAA,GAAAA,IAASmsG,EAAkBC,GAC/C,OAAO5+H,KAAKC,IAAI4+H,GAAe,EACjC,CD6DOC,CAAqBtB,EAAWX,GACnC,OAMF,IAAIkC,EAAyBb,GAC3BxsD,EAAep0E,WACfotE,EAAeptE,YAGjB,IAAKyhI,EAAwB,CAe3B,GAd6BvB,EAAUppG,2BACVyoG,EAAUzoG,2BAGL,IAAhCnV,GAAS+/G,mBAETD,EAAyB15E,GAAAA,GAAAA,SAAcA,GAAAA,GAAAA,WAEvC/qD,GAAAA,UAAAA,sCAAgDkjI,EAAWX,GAC3DkC,EAAyBb,GACvBxsD,EAAep0E,WACfotE,EAAeptE,cAGdyhI,EACH,M,CAMJ,MAAME,EAAmDzsG,GAAAA,GAAAA,cACvDA,GAAAA,GAAAA,SACA+rG,EACAQ,GAKIG,GAsByBvyG,EArB7BsyG,EACAT,EAuBct6H,QACd,CAACi7H,EAAqB/tH,EAASzX,KAC7B,MAAM,qBAAE65E,GAAyBlhD,GAAAA,SAAAA,IAC/B,mBACAlhB,GAEI6b,EAAWuF,GAAAA,GAAAA,SAAcghD,EAAsB7mD,GAErD,OAAIM,EAAWkyG,EAAoBlyG,SAC1B,CACLA,WACAtzB,SAGGwlI,CAAmB,GAE5B,CACElyG,SAAUod,IACV1wC,OAAQ,KArBd,IAAiCgzB,EAjB/B,IAAIyyG,EAAkBF,EAAqBvlI,MACvCkjI,aAAqBnoG,GAAAA,iBAGvB0qG,EAAkBZ,EAAetpI,OAASgqI,EAAqBvlI,MAAQ,IAIvC,IAAhCulI,EAAqBvlI,OACrBkjI,EAAU9hG,2BAA6BmkG,EAAqBvlI,aAEtD0lI,GAAYxC,EAAU3kI,QAAS,CACnC4iC,WAAYskG,GAGlB,CEjIA,MAAM,gBAAE9+F,GAAe,iBAAEmuC,IAAqBj0E,GAAAA,MAAAA,OAShC,SAAU8kI,GACtBvC,GAWA,OAT+BC,GAC7BD,EACAz8F,GACA89F,GACA,CACE7H,oBAAqB,CAAC9nD,KAK5B,CCrBA,MAAM8wD,GAA+BD,GC+BrC,MAAME,WAA2BhnG,GAa/B1gC,WAAAA,CAAY2nI,EAAoB,CAAC,GAC/BhnG,MAAMgnG,EAAmB,CACvBr9G,0BAA2B,CAAC,QAAS,SACrCD,cAAe,CAAEoH,QAAQ,EAAM4rD,2BAA2B,KAU9D,KAAAha,iBACE3iE,IAEA,MAAM0mC,EAAY1mC,EAAI1F,QAChB,cAAEgL,EAAa,QAAE5F,GAAYgnC,EAC7B9G,EAAWt6B,EAAcV,MAEzBjF,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,EAAQ,gBAAE4U,GAAoBxY,EAEtC5C,KAAKo6E,WAAY,EAEjB,MAAM/xE,EAAS7B,EAAS44B,aAClB,gBAAE3C,EAAe,OAAEqG,GAAWz6B,EAC9Bw0B,EAAoB78B,KAAK4iC,qBAC7Bp8B,EACAq8B,EACApG,EACAqG,GAGIzlC,EAAa,CACjByD,SAAU,CAGR27B,gBAA+B,CAAC,EAAG,EAAG,GACtCqG,OAAsB,CAAC,EAAG,EAAG,GAC7B//B,oBAAqByD,EAASq4B,yBAC9BhC,oBACAl8B,SAAUX,KAAKotB,eAEjBhT,KAAM,CACJ7W,aAAa,EACbg6B,QAAS,CACPtyB,OAAQ,CACQ,IAAI43B,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAEpBW,kBAAmB,MAErB1pB,YAAa,CAAC,EACd9B,QAAQ,IAIZhU,GAAc3G,EAAYsF,GAE1B,MAAMwnI,EAAuBzvE,GAC3B/3D,EACA3C,KAAKotB,eACL,GAqBF,OAlBAptB,KAAK8rD,SAAW,CACdzuD,aACA8sI,uBACAjwD,YAAa,EACbC,eAAe,EACfM,UAAU,GAEZz6E,KAAK0qD,cAAc/nD,GAEnBkmD,GAAkBlmD,GAElBM,EAAIyF,iBAEJi9D,GACEvqD,EACA+uH,GAGK9sI,CAAU,EAGnB,KAAA0mC,wBAA0B,CAACphC,EAAStF,EAAYgmC,EAAcW,KAC5D,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAExB,IAAK,IAAIhwB,EAAI,EAAGA,EAAItC,EAAOtL,OAAQ4N,IAAK,CACtC,MAAMwnB,EAAQ9pB,EAAOsC,GACf68H,EAA2B5jI,EAAS29B,cAAcpP,GAKxD,IAAa,IAFXyP,GAAAA,GAAAA,SAAcnB,EAAoB+mG,GAA4BpmG,EAI9D,OADA5pB,EAAKmjB,QAAQiG,kBAAoBj2B,EAC1BwnB,C,CAIX3a,EAAKmjB,QAAQiG,kBAAoB,IAAI,EAGvC,KAAAuB,gBAAkB,CAACpiC,EAAStF,EAAYgmC,EAAcW,KACpD,MAAMphC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,SAAE6D,GAAa5D,GAEf,KAAEwX,GAAS/c,GACX,OAAE4N,GAAWmP,EAAKmjB,QAElBgoD,EAAe/+E,EAAS29B,cAAcl5B,EAAO,IAC7Cu6E,EAAeh/E,EAAS29B,cAAcl5B,EAAO,IAE7C/D,EAAOlH,KAAK6rF,8BAA8B,CAC9CtG,EACAC,IAGIzwD,EAAQ,CAACsO,EAAa,GAAIA,EAAa,KACvC,KAAEj8B,EAAI,IAAEG,EAAG,MAAEspB,EAAK,OAAEyC,GAAWpsB,EAOrC,GALwB4kF,GACtB,CAAC1kF,EAAMG,EAAKspB,EAAOyC,GACnByB,IAGqBiP,EACrB,OAAO,C,EAIX,KAAAuiC,qBAAuB,CAACtjE,EAAK5F,EAAYwP,EAAkB,WACzD,MAAM88B,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,GAEd,KAAEvvB,GAAS/c,EAEjB+c,EAAKpC,QAAS,EAEd,MAAMmyH,EAAuBzvE,GAC3B/3D,EACA3C,KAAKotB,eACL,GAGFptB,KAAK8rD,SAAW,CACdzuD,aACA8sI,wBAGFnqI,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GACEvqD,EACA+uH,GAGFlnI,EAAIyF,gBAAgB,EAGtB,KAAA29D,uBAAyB,CACvBpjE,EACA5F,EACA41B,EACApmB,EAAkB,WAElB,MAAM88B,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,GACd,KAAEvvB,GAAS/c,EAEjB+c,EAAKpC,QAAS,EAEd,IACIkiE,EADAuL,GAAgB,EAGhBxyD,EAAOstD,cACTkF,GAAgB,EAEhBvL,EAAc9/D,EAAKmjB,QAAQtyB,OAAO5G,WAAW+wC,GAAMA,IAAMniB,IAI3D,MAAMk3G,EAAuBzvE,GAC3B/3D,EACA3C,KAAKotB,eACL,GAGFptB,KAAK8rD,SAAW,CACdzuD,aACA8sI,uBACAjwD,eAEFl6E,KAAKomE,gBAAgBzjE,GAErBkmD,GAAkBlmD,GAElB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GACEvqD,EACA+uH,GAGFlnI,EAAIyF,gBAAgB,EAGtB,KAAA0oG,iBAAoBnuG,IAClB,MAAM0mC,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,GAEd,WAAEtsC,EAAU,qBAAE8sI,EAAoB,cAAEhwD,EAAa,SAAEM,GACvDz6E,KAAK8rD,UACD,KAAE1xC,GAAS/c,EAEjB,GAAI88E,IAAkBM,EACpB,OAGFrgE,EAAKpC,QAAS,EACdoC,EAAKmjB,QAAQiG,kBAAoB,KAEjCxjC,KAAK8tE,kBAAkBnrE,GACvB3C,KAAKmrD,gBAAgBxoD,GAErBimD,GAAmBjmD,GAEnB,MAAMC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B5C,KAAK8rD,SAAW,KAChB9rD,KAAKo6E,WAAY,EAGfp6E,KAAK+/E,sBACL//E,KAAK4sB,cAAcgzD,2BAEnB37E,GAAiB5G,EAAW8C,eAG9BwlE,GACEvqD,EACA+uH,EACD,EAGH,KAAAv2D,mBAAsB3wE,IACpBjD,KAAKo6E,WAAY,EAEjB,MAAMzwC,EAAY1mC,EAAI1F,QAChB,QAAEoF,GAAYgnC,GAEd,WAAEtsC,EAAU,qBAAE8sI,EAAoB,YAAEjwD,GAAgBl6E,KAAK8rD,UACzD,KAAE1xC,GAAS/c,EAEjB,QAAoBiG,IAAhB42E,EAA2B,CAE7B,MAAM,YAAE1xE,GAAgBmhC,EAClB6wC,EAAgBhyE,EAAYX,OAE5B,OAAEoD,GAAWmP,EAAKmjB,QAExBtyB,EAAO/M,SAAS62B,IACdA,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,GAC1BzlD,EAAM,IAAMylD,EAAc,EAAE,IAE9BpgE,EAAK7W,aAAc,C,KACd,CAEL,MAAM,cAAEgF,GAAkBohC,EACpB/mC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,cAAEwhC,EAAa,cAAEr8B,GAAkBlF,EAAe4D,SAClDq8B,EAAWt6B,EAAcV,OAEzB,OAAEoD,GAAWmP,EAAKmjB,QAKxB,IAAIwuD,EACAtqC,EACAD,EACAwqC,EAEAC,EACA91C,EACAD,EACAg2C,EAEJ,OAZAjhF,EAAOivE,GAAe,IAAIr3C,GAYlBq3C,GACN,KAAK,EACL,KAAK,EAGH6R,EAAmB5nD,EAAcl5B,EAAO,IACxC+gF,EAAiB7nD,EAAcl5B,EAAO,IAEtCw2C,EAAoB,CAACuqC,EAAe,GAAID,EAAiB,IACzDvqC,EAAgB,CAACuqC,EAAiB,GAAIC,EAAe,IAErD71C,EAAmBruC,EAAc25C,GACjCvL,EAAepuC,EAAc05C,GAE7Bv2C,EAAO,GAAKkrC,EACZlrC,EAAO,GAAKirC,EAEZ,MACF,KAAK,EACL,KAAK,EAEHuL,EAAoBtd,EAAcl5B,EAAO,IACzCu2C,EAAgBrd,EAAcl5B,EAAO,IAErC8gF,EAAiC,CAC/BvqC,EAAc,GACdC,EAAkB,IAEpBuqC,EAA+B,CAC7BvqC,EAAkB,GAClBD,EAAc,IAGhByqC,EAAkBnkF,EAAcikF,GAChCG,EAAgBpkF,EAAckkF,GAE9B/gF,EAAO,GAAKghF,EACZhhF,EAAO,GAAKihF,EAIhB9xE,EAAK7W,aAAc,C,CAGrBvD,KAAK8rD,SAAS2uB,UAAW,EAEzB,MAAM73E,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAE5B+iE,GACEvqD,EACA+uH,EACD,EAkCH,KAAAz/E,cAAiB/nD,IACfgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKoxG,kBAC/CzuG,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK4zE,oBACjDjxE,EAAQqC,iBAAiBlI,GAAO6L,WAAY3I,KAAK4zE,oBACjDjxE,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKoxG,kBAElDzuG,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKoxG,kBAChDzuG,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK4zE,mBAAmB,EAMtE,KAAAzoB,gBAAmBxoD,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKoxG,kBAClDzuG,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK4zE,oBACpDjxE,EAAQ2H,oBAAoBxN,GAAO6L,WAAY3I,KAAK4zE,oBACpDjxE,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKoxG,kBAErDzuG,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKoxG,kBACnDzuG,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK4zE,mBAAmB,EAMzE,KAAAxN,gBAAmBzjE,IACjBgC,GAAMW,uBAAwB,EAE9B3C,EAAQqC,iBAAiBlI,GAAOiM,SAAU/I,KAAKoxG,kBAC/CzuG,EAAQqC,iBAAiBlI,GAAOkM,WAAYhJ,KAAK4zE,oBACjDjxE,EAAQqC,iBAAiBlI,GAAOgM,YAAa9I,KAAKoxG,kBAElDzuG,EAAQqC,iBAAiBlI,GAAO0S,UAAWxP,KAAKoxG,kBAChDzuG,EAAQqC,iBAAiBlI,GAAOyS,WAAYvP,KAAK4zE,mBAAmB,EAMtE,KAAA9F,kBAAqBnrE,IACnBgC,GAAMW,uBAAwB,EAE9B3C,EAAQ2H,oBAAoBxN,GAAOiM,SAAU/I,KAAKoxG,kBAClDzuG,EAAQ2H,oBAAoBxN,GAAOkM,WAAYhJ,KAAK4zE,oBACpDjxE,EAAQ2H,oBAAoBxN,GAAOgM,YAAa9I,KAAKoxG,kBAErDzuG,EAAQ2H,oBAAoBxN,GAAO0S,UAAWxP,KAAKoxG,kBACnDzuG,EAAQ2H,oBAAoBxN,GAAOyS,WAAYvP,KAAK4zE,mBAAmB,EAGzE,KAAA53C,iBAAmB,CACjBp5B,EACAktB,KAEA,MACM,SAAEtpB,GAAa5D,GACf,QAAED,GAAY6D,EAEpB,IAAIpD,EAAcK,GAAezD,KAAKotB,cAAezqB,GAErD,IAAKS,GAAazD,OAChB,OAPmB,MAerB,GALAyD,EAAcpD,KAAK2iC,wCACjBhgC,EACAS,IAGGA,GAAazD,OAChB,OAhBmB,MAmBJK,KAAKuuB,YAAY/nB,GACVA,EAASo1B,qBADjC,MAGMgG,EAAiC,CACrCrrB,YAAavW,KAAKuW,YAClB5V,SAAUX,KAAKotB,cACfrlB,WAAYnF,EAAe4D,SAAS6U,IAGtC,IAAK,IAAI9N,EAAI,EAAGA,EAAInK,EAAYzD,OAAQ4N,IAAK,CAC3C,MAAMlQ,EAAa+F,EAAYmK,IACzB,cAAEpN,GAAkB9C,EAGpB+c,GAFe/c,EAAWyD,SAEnBzD,EAAW+c,OAClB,OAAEnP,EAAM,kBAAEu4B,GAAsBppB,EAAKmjB,QACrCxL,EAAoB9mB,EAAOqC,KAAK8nC,GAAM5uC,EAAS29B,cAAciR,KAE7DtkB,EAAY9wB,KAAKgjC,SAAS,YAAapB,EAAgBvkC,GACvD0zB,EAAW/wB,KAAKgjC,SAAS,WAAYpB,EAAgBvkC,GACrD0mB,EAAQ/jB,KAAKgjC,SAAS,QAASpB,EAAgBvkC,GAErD,IAAKmJ,EAASo1B,qBAEZ,YADAlkB,QAAQC,KAAK,uCAIf,IAAImjE,EAWJ,GAPG96E,KAAK8rD,UACgB,OAAtBtoB,IAGAs3C,EAA2B,CAAC/oD,EAAkByR,KAG5Cs3C,EAA0B,CAG5BzO,GACEv8C,EACA3vB,EAJqB,IAMrB26E,EACA,CACE/2D,S,CAMNsmH,GACEv6G,EACA3vB,EAHmB,IAKnB4xB,EAAkB,GAClBA,EAAkB,GAClB,CACEhO,MAAO,QACPgN,WACAD,a,GAMR,KAAA+6D,8BACE5gF,IAOA,MAAOE,EAAQC,GAAUH,EAEzB,MAAO,CACL7D,KAAMqD,KAAK8U,IAAIpU,EAAO,GAAIC,EAAO,IACjC7D,IAAKkD,KAAK8U,IAAIpU,EAAO,GAAIC,EAAO,IAChCylB,MAAOpmB,KAAKC,IAAIS,EAAO,GAAKC,EAAO,IACnCkoB,OAAQ7oB,KAAKC,IAAIS,EAAO,GAAKC,EAAO,IACrC,EA4BH,KAAA29E,sBAAwB,CACtB1rF,EACAo/B,EACAqG,EACA1nB,EACAxY,KAEA,MAAM,KAAEwX,GAAS/c,GACX,YAAEitI,EAAW,mBAAEC,EAAkB,SAAEC,GAAa5nI,EAEhD0mF,EAAYlvE,EAAKmjB,QAAQtyB,OAAO,GAChCs+E,EAAYnvE,EAAKmjB,QAAQtyB,OAAO,IAChC,YAAE6O,GAAgBM,EAElBqwH,EAAa5rI,OAAOwE,KAAKyW,GAE/B,IAAK,IAAIvM,EAAI,EAAGA,EAAIk9H,EAAW9qI,OAAQ4N,IAAK,CAC1C,MAAMm9H,EAAYD,EAAWl9H,IAEvB,YAAEw1B,GAAgB/iC,KAAK2qI,6BAC3BD,EACAtvH,IAGI,WACJivB,EAAU,WACV4I,EACA/I,aAAclB,EAAS,SACvBloC,GACEiiC,EACEspD,EAAiBpvD,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GACvCqvD,EAAiBrvD,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GAiB7C,GAfA+L,EAAU4hG,iBAAiBthD,EAAW+C,GAEtCA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAC9CA,EAAe,GAAK5hF,KAAK4qC,MAAMg3C,EAAe,IAE9CrjD,EAAU4hG,iBAAiBrhD,EAAW+C,GAEtCA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAC9CA,EAAe,GAAK7hF,KAAK4qC,MAAMi3C,EAAe,IAK1CtsF,KAAKkqF,gBAAgBmC,EAAgBC,EAAgBjiD,GAAa,CACpErqC,KAAK+/E,sBAAuB,EAI5B,MAAMptC,EAAOloC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAClD15C,EAAOnoC,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,IAElDz5C,EAAOpoC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAClDx5C,EAAOroC,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,IAElDv5C,EAAOtoC,KAAK8U,IAAI8sE,EAAe,GAAIC,EAAe,IAClDt5C,EAAOvoC,KAAK6iC,IAAI++C,EAAe,GAAIC,EAAe,KAElD,WAAEp0B,EAAU,YAAEC,GAAgBs0B,GAClChwD,EACAqG,EACAwmD,EACAC,GAGI7nB,EAAOxJ,EAAaC,EAE1B,IAAItzD,EAAQ,EACR85D,EAAO,EACPC,EAAS,EAEb,MAAM5qB,EAAY3J,EAAW,GACvB4J,EAAY5J,EAAW,GAAKA,EAAW,GAI7C,IAAK,IAAIve,EAAIinB,EAAMjnB,GAAKknB,EAAMlnB,IAC5B,IAAK,IAAI/c,EAAI8jC,EAAM9jC,GAAK+jC,EAAM/jC,IAC5B,IAAK,IAAIxB,EAAIolC,EAAMplC,GAAKqlC,EAAMrlC,IAAK,CAGjC1I,IACA85D,GAHc1rB,EAAWnnB,EAAImoB,EAAYllC,EAAIilC,EAAYzmC,E,CAQ/DoxD,GAAQ95D,EAER,IAAK,IAAIinB,EAAIinB,EAAMjnB,GAAKknB,EAAMlnB,IAC5B,IAAK,IAAI/c,EAAI8jC,EAAM9jC,GAAK+jC,EAAM/jC,IAC5B,IAAK,IAAIxB,EAAIolC,EAAMplC,GAAKqlC,EAAMrlC,IAAK,CACjC,MAEMs9H,EAFQ53F,EAAWnnB,EAAImoB,EAAYllC,EAAIilC,EAAYzmC,GAE1BoxD,EAE/BC,GAAUisE,EAAiBA,C,CAKjCjsE,GAAU/5D,EACV+5D,EAASn0D,KAAKuE,KAAK4vD,GAEnB9kD,EAAY4wH,GAAa,CACvBj4E,SAAU3xD,EAAS2xD,SACnBiP,OACA/C,OACAC,S,MAGF5+D,KAAK+/E,sBAAuB,EAC5BjmE,EAAY4wH,GAAa,CACvBj4E,SAAU3xD,EAAS2xD,S,CAKzBr4C,EAAK7W,aAAc,EAGnB,MAAM82E,EAAYv9E,GAAOyhC,oBAEnBr7B,EAAc,CAClB7F,aACAitI,cACAC,qBACAC,SAAUA,GAIZ,OAFA3qI,EAAAA,GAAAA,cAAaC,GAAAA,YAAau6E,EAAWn3E,GAE9B4W,CAAW,EAGpB,KAAAowE,gBAAkB,CAACJ,EAAQC,EAAQ1/C,IAE/B30B,GAAAA,UAAAA,sBAA8Bo0E,EAAQz/C,IACtC30B,GAAAA,UAAAA,sBAA8Bq0E,EAAQ1/C,GAQ1C,KAAAygG,oBAAuBC,IACrB,GAAI/qI,KAAK4sB,cAAco+G,UACrB,OAAOhrI,KAAK4sB,cAAco+G,UAG5B,MAAMC,EAAeF,EAAMG,kBAE3B,OAAKD,GAAiBA,EAAatrI,OAK5BsrI,EAAa,GAAGzoI,SALvB,CAK0B,EA/tB1BxC,KAAK8oF,+BAAiCuB,GACpCrqF,KAAK+oF,sBACL,IACA,CAAE98C,UAAU,GAEhB,CA6VAsB,MAAAA,CAAO5qC,GAEL,IAAK3C,KAAKo6E,UACR,OAEFp6E,KAAKo6E,WAAY,EACjBp6E,KAAKmrD,gBAAgBxoD,GACrB3C,KAAK8tE,kBAAkBnrE,GACvBimD,GAAmBjmD,GAEnB,MAAM,WAAEtF,EAAU,qBAAE8sI,GAAyBnqI,KAAK8rD,UAE5C,KAAE1xC,GAAS/c,EAEjB+c,EAAKpC,QAAS,EACdoC,EAAKmjB,QAAQiG,kBAAoB,KAEjC,MAAM5gC,GAAiBC,EAAAA,GAAAA,mBAAkBF,IACnC,gBAAEyY,GAAoBxY,EAQ5B,OANA+iE,GACEvqD,EACA+uH,GAGFnqI,KAAK8rD,SAAW,KACTzuD,EAAWyD,SAASX,aAC7B,CAwKAwqI,4BAAAA,CAA6BD,EAAWtvH,GACtC,IAAI2nB,EACJ,GAAI2nG,EAAUx8G,WAAW,eAAgB,CACvC,MAAMi9G,EAAcT,EAAUjvG,QAAQ,KAChC6uG,EAAcI,EAAU9rG,UAAUusG,EAAc,GAEtDpoG,EADiB3nB,EAAgBmtB,YAAY+hG,GACtBh8G,c,MAEvByU,EAAclkB,GAAAA,MAAMC,UAAU4rH,GAGhC,MAAO,CAAE3nG,cAAav8B,SAVLA,UAWnB,CA8JA4kI,kBAAAA,CAAmB5kI,GACjB,MAAO,eAAeA,EAAShE,KACjC,EAkBFynI,GAAmBtpI,SAAW,iBAC9B,W","sources":["webpack:///../../../../cornerstone3D/packages/tools/src/enums/ToolBindings.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/ToolModes.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/AnnotationStyleStates.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/Events.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/SegmentationRepresentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/Touch.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/StrategyCallbacks.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationLocking.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationSelection.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationVisibility.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/svgNodeCache.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/addTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/getMouseEventPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseDoubleClickListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseMoveListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseDownListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/preventGhostClick.js","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/getTouchEventPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/touch/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/touchStartListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/normalizeWheel.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/wheelListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/keyboard/keyDownListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/keyboard/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/labelmapConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/SegmentationStateManager.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/triggerSegmentationEvents.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/helpers/normalizeSegmentationInput.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentationState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/utils/stackVolumeCheck.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/addLabelmapToElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/removeLabelmapFromElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/labelmapDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/utils.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourConfigCache.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/addContourSetsToElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/updateContourSets.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/removeContourFromElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/addOrUpdateContourSets.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/removeSegmentationsFromToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/validateRepresentationData.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/helpers/validateSegmentationInput.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/addSegmentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/helpers/getRepresentationSpecificConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/constants/COLOR_LUT.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/addSegmentationRepresentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/addSegmentationRepresentation.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/activeSegmentation.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentLocking.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationColor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationVisibility.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentIndex.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/BaseTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/getSvgDrawingHelper.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/draw.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/_getHash.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/setAttributesIfNecessary.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/setNewAttributesIfValid.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawEllipseByCoordinates.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawEllipse.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawHandle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawHandles.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawPolyline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawTextBox.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/vec2/findClosestPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLink.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLinkedTextBox.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawRect.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawArrow.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawRedactionRect.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getToolsWithModesForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/triggerAnnotationRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/filterAnnotationsWithinSlice.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/annotationFrameRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/filterAnnotationsForDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/ToolStyle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/helpers.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/getState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/getFont.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/AnnotationDisplayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/AnnotationTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Surface/removeSurfaceFromElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/pointToString.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Surface/addSurfaceToElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Surface/surfaceDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/SegmentationDisplayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/triggerSegmentationRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/imageChangeEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getAnnotationNearPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/isObject.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/debounce.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/throttle.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/clip.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/calibrateImageSpacing.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getCalibratedUnits.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/triggerAnnotationRenderForViewportIds.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/scroll.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/jumpToSlice.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/pointInShapeCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/sphere/pointInSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/boundingBox/extend2DBoundingBoxInViewAxis.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/boundingBox/getBoundingBoxAroundShape.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/pointInSurroundingSphereCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/roundNumber.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/ellipse/pointInEllipse.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/ellipse/getCanvasEllipseCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/determineSegmentIndex.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/dynamicThreshold.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/erase.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/floodFill.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/islandRemoval.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/preview.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/regionFill.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/setValue.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/compositions/threshold.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/utils/getStrategyData.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/BrushStrategy.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/MouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/ImageMouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/SVGCursorDescriptor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/SVGMouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/setCursorForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/elementCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/BrushTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/utilities.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/thresholdVolumeByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/AnnotationGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/PanTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/TrackballRotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/WindowLevelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/StackScrollTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/angle/angleBetweenLines.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/PlanarRotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/StackScrollToolMouseWheelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ZoomTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/VolumeRotateMouseWheelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getWorldWidthAndHeightFromCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getPointInLineOfSightWithCriteria.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/jumpToWorld.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/MIPJumpToClickTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithToolEnabled.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithParallelNormals.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/getViewportIdsWithToolToRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/vec2/liangBarksyClip.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/aabb/distanceToPointSquared.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/aabb/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/basic/Calculator.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/basic/BasicStatsCalculator.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/point/distanceToPointSquared.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/point/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/point/mirror.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/getIntersectionWithPolyline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/getSubPixelSpacingAndXYDirections.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/pointsAreWithinCloseContourProximity.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/addCanvasPointsToArray.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/pointCanProjectOnLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/calculateAreaOfPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/rectangle/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/distanceToPointSquaredInfo.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/distanceToPointSquared.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/intersectLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/CrosshairsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/MagnifyTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/circle/getCanvasCircleRadius.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/circle/getCanvasCircleCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/AdvancedMagnifyViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/AdvancedMagnifyViewportManager.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/AdvancedMagnifyTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ReferenceLinesTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/OverlayGridTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/SegmentationIntersectionTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ReferenceCursors.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ScaleOverlayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/drawing/getTextBoxCoordsCanvas.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/BidirectionalTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/LengthTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getModalityUnit.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/isViewportPreScaled.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/ProbeTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/DragProbeTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/RectangleROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getWorldWidthAndHeightFromTwoPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/EllipticalROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/CircleROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/Spline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/CubicSpline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/CardinalSpline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/LinearSpline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/CatmullRomSpline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/splines/BSpline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/SplineROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolation/algorithms/bspline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolatePoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/drawLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/editLoopCommon.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/closedContourEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/openContourEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/openContourEndEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/renderMethods.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/PlanarFreehandROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/BucketQueue.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/livewire/LivewireScissors.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/livewire/LiveWirePath.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/LivewireContourTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/ArrowAnnotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/AngleTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/midPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/CobbAngleTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/UltrasoundDirectionalTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/KeyImageTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillRectangle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseRectangle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/CircleScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/SphereScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleROIThresholdTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleROIStartEndThresholdTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/PaintFillTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/OrientationMarkerTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/rectangleROIThresholdVolumeByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/createMergedLabelmapForIndex.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/isValidRepresentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/getDefaultRepresentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/createLabelmapVolumeForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/brushSizeForToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/brushThresholdForToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/thresholdSegmentationByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/orientation/getOrientationStringLPS.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/orientation/invertOrientationStringLPS.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/events.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/playClip.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolateAnnotation.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/stackPrefetchUtils.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/stackPrefetch.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/stackContextPrefetch.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/dynamicVolume/getDataInTime.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/dynamicVolume/generateImageFromTimeData.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/polyData/utils.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/common/isRangeValid.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/common/isColorbarSizeValid.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/common/areColorbarRangesEqual.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/common/areColorbarSizesEqual.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/ColorbarCanvas.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/vec3/interpolateVec3.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/ColorbarTicks.ts","webpack:///../../../../cornerstone3D/packages/tools/src/widgets/Widget.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/Colorbar.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/common/isRangeTextPositionValid.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/voi/colorbar/ViewportColorbar.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getVOIMultipliers.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/annotations/annotationSelectionListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/annotations/annotationModifiedListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/imageRenderedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/customCallbackHandler.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseClick.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDoubleClick.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterToolsWithMoveableHandles.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterToolsWithAnnotationsForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterMoveableAnnotationTools.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getMouseModifier.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForMouseEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithModesForMouseEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDownAnnotationAction.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithActionsForMouseEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDown.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDownActivate.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDrag.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseMove.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseUp.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseWheel.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForKeyboardEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardEventHandlers/keyDown.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithActionsForKeyboardEvents.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardEventHandlers/keyUp.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/cameraModifiedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/imageSpacingCalibratedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForTouchEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithModesForTouchEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchStart.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchStartActivate.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchDrag.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchEnd.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchTap.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchPress.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/addEnabledElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getSynchronizersForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroupForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/removeEnabledElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/cancelActiveManipulations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/Synchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/createSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/destroy.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getAllSynchronizers.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/destroySynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/ToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/createToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/destroyToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/destroy.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getAllToolGroups.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroupsWithToolName.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/helpers/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/init.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/cameraSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createCameraPositionSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/voiSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createVOISynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/zoomPanSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createZoomPanSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/imageSliceSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/areViewportsCoplanar .ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createImageSliceSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/VideoRedactionTool.ts"],"sourcesContent":["/**\n * Mouse This enum enumerates the different buttons returned by `.buttons` on the mouse event.\n * These values are used when setting a tool active in a tool group.\n *\n * See also: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n */\nenum MouseBindings {\n  /** usually the left button */\n  Primary = 1,\n  /** usually the right button */\n  Secondary = 2,\n  Primary_And_Secondary = 3,\n  /** usually mouse wheel button */\n  Auxiliary = 4,\n  Primary_And_Auxiliary = 5,\n  Secondary_And_Auxiliary = 6,\n  Primary_And_Secondary_And_Auxiliary = 7,\n  /** usually \"Browser Back\" button */\n  Fourth_Button = 8,\n  /** usually \"Browser Forward\" button */\n  Fifth_Button = 16,\n}\n\nenum KeyboardBindings {\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Meta = 91,\n  ShiftCtrl = 1617,\n  ShiftAlt = 1618,\n  ShiftMeta = 1691,\n  CtrlAlt = 1718,\n  CtrlMeta = 1791,\n  AltMeta = 1891,\n}\n\nexport { MouseBindings, KeyboardBindings };\n","/**\n * ToolModes - This enum defines the 4 tool states which are available.\n */\nenum ToolModes {\n  /**\n   * Active:\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Active = 'Active',\n  /**\n   * Passive:\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Passive = 'Passive',\n  /**\n   * Enabled:\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Enabled = 'Enabled',\n  /**\n   * Disabled:\n   * - Annotation does not render.\n   */\n  Disabled = 'Disabled',\n}\n\nexport default ToolModes;\n","/**\n * AnnotationStyleStates - This enum defines the 4 possible states available for\n *  a Annotation instance.\n *\n * Default:\n *   The default state for the annotation instance\n * Highlighted:\n *   The annotation should be rendered in \"highlighted\" mode in response to\n *   direct user interaction;\n * Selected:\n *   The annotation has been selected by the user;\n * Locked:\n *   The annotation has been locked;\n */\nenum AnnotationStyleStates {\n  Default = '',\n  Highlighted = 'Highlighted',\n  Selected = 'Selected',\n  Locked = 'Locked',\n}\n\nexport default AnnotationStyleStates;\n","/**\n *  The events for cornerstoneTools3D Tools. Native Mouse and Keyboard events are\n *  captured, normalized, and re-triggered with a `CORNERSTONE_TOOLS` prefix. This\n *  allows us to handle events consistently across different browsers.\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Tools\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new tools is activated.\n   *\n   * Make use of {@link EventTypes.ToolActivatedEventType | Tool Activated Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolActivatedEventDetail | Tool Activated Event Detail}.\n   */\n  TOOL_ACTIVATED = 'CORNERSTONE_TOOLS_TOOL_ACTIVATED',\n\n  /**\n   * Triggers on the eventTarget when a mode of a tool is changed (active, passive, enabled and disabled).\n   *\n   * Make use of {@link EventTypes.ToolModeChangedEventType | Tool Mode Changed Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolModeChangedEventDetail | Tool Mode Changed Event Detail}.\n   */\n  TOOL_MODE_CHANGED = 'CORNERSTONE_TOOLS_TOOL_MODE_CHANGED',\n\n  ///////////////////////////////////////\n  //            Annotations\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new annotation is added to the state.\n   *\n   * Make use of {@link EventTypes.AnnotationAddedEventType | Annotation Added Event Type  }\n   * for typing your event listeners for this annotation added event, and see what event\n   * detail is included in {@link EventTypes.AnnotationAddedEventDetail | Annotation Added Event Detail}.\n   */\n  ANNOTATION_ADDED = 'CORNERSTONE_TOOLS_ANNOTATION_ADDED',\n\n  /**\n   * Triggers on the eventTarget when a new annotation is completed its drawing\n   * Make use of {@link EventTypes.AnnotationCompletedEventType | Annotation Completed Event Type }\n   * for typing your event listeners for this annotation completed event, and see what event\n   * detail is included in {@link EventTypes.AnnotationCompletedEventDetail | Annotation Completed Event Detail}.\n   */\n  ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is modified (e.g. a handle is modified).\n   * Make use of {@link EventTypes.AnnotationModifiedEventType | Annotation Modified Event Type}\n   * for typing your event listeners for this annotation modified event, and see what\n   * event detail is included in {@link EventTypes.AnnotationModifiedEventDetail | Annotation Modified Event Detail}.\n   */\n  ANNOTATION_MODIFIED = 'CORNERSTONE_TOOLS_ANNOTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is removed from the annotations manager.\n   * Make use of {@link EventTypes.AnnotationRemovedEventType | Annotation Removed Event Type}\n   * for typing your event listeners for this annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRemovedEventDetail | Annotation Removed Event Detail}.\n   */\n  ANNOTATION_REMOVED = 'CORNERSTONE_TOOLS_ANNOTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when an annotation selection status is changed.\n   * Make use of {@link EventTypes.AnnotationSelectionChangeEventType | Annotation Selection Change Event Type}\n   * for typing your event listeners for this annotation selection change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationSelectionChangeEventDetail | Annotation Selection Change Event Detail}.\n   */\n  ANNOTATION_SELECTION_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation locked status is changed.\n   * Make use of {@link EventTypes.AnnotationLockChangeEventType | Annotation Lock Change Event Type}\n   * for typing your event listeners for this annotation lock change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationLockChangeEventDetail | Annotation Lock Change Event Detail}.\n   */\n  ANNOTATION_LOCK_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation visible status is changed.\n   * Make use of {@link EventTypes.AnnotationVisibilityChangeEventType | Annotation Visible Change Event Type}\n   * for typing your event listeners for this annotation Hide change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationVisibilityChangeEventDetail | Annotation Visible Change Event Detail}.\n   */\n  ANNOTATION_VISIBILITY_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation is rendered.\n   * Make use of {@link EventTypes.AnnotationRenderedEventType | Annotation Rendered Event Type}\n   * for typing your event listeners for this annotation rendered event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRenderedEventDetail | Annotation Rendered Event Detail}.\n   */\n  ANNOTATION_RENDERED = 'CORNERSTONE_TOOLS_ANNOTATION_RENDERED',\n\n  ///////////////////////////////////////\n  //        Segmentations Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is updated in the state manager.\n   * Make use of {@link EventTypes.SegmentationModifiedEventType | Segmentation Modified Event Type}\n   * for typing your event listeners for this segmentation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationModifiedEventDetail | Segmentation Modified Event Detail}.\n   */\n  SEGMENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is rendered by the Segmentation Rendering Engine.\n   * Make use of {@link EventTypes.SegmentationRenderedEventType | Segmentation Rendered Event Type}\n   * for typing your event listeners for this segmentation rendered event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRenderedEventDetail | Segmentation Rendered Event Detail}.\n   */\n  SEGMENTATION_RENDERED = 'CORNERSTONE_TOOLS_SEGMENTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is modified in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationModifiedEventType | Segmentation Representation Modified Event Type}\n   * for typing your event listeners for this segmentation representation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationModifiedEventDetail | Segmentation Representation Modified Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is removed from the state manager.\n   * Make use of {@link EventTypes.SegmentationRemovedEventType | Segmentation Removed Event Type}\n   * for typing your event listeners for this segmentation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRemovedEventDetail | Segmentation Removed Event Detail}.\n   */\n  SEGMENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is removed in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationRemovedEventType | Segmentation Representation Removed Event Type}\n   * for typing your event listeners for this segmentation representation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationRemovedEventDetail | Segmentation Representation Removed Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation data is modified (e.g., by brush tool).\n   * Make use of {@link EventTypes.SegmentationDataModifiedEventType | Segmentation Data Modified Event Type}\n   * for typing your event listeners for this segmentation data modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationDataModifiedEventDetail | Segmentation Data Modified Event Detail}.\n   */\n  SEGMENTATION_DATA_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED',\n\n  ///////////////////////////////////////\n  //         Keyboard Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is pressed.\n   * Make use of {@link EventTypes.KeyDownEventType | Key Down Event Type}\n   * for typing your event listeners for this key down event, and see what\n   * event detail is included in {@link EventTypes.KeyDownEventDetail | Key Down Event Detail}.\n   */\n  KEY_DOWN = 'CORNERSTONE_TOOLS_KEY_DOWN',\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is released.\n   * Make use of {@link EventTypes.KeyUpEventType | Key Up Event Type}\n   * for typing your event listeners for this key up event, and see what\n   * event detail is included in {@link EventTypes.KeyUpEventDetail | Key Up Event Detail}.\n   */\n  KEY_UP = 'CORNERSTONE_TOOLS_KEY_UP',\n\n  ///////////////////////////////////////\n  //      Mouse Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when the mouse is pressed down, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDownEventType | Mouse Down Event Type}\n   * for typing your event listeners for this mouse down event, and see what\n   * event detail is included in {@link EventTypes.MouseDownEventDetail | Mouse Down Event Detail}.\n   */\n  MOUSE_DOWN = 'CORNERSTONE_TOOLS_MOUSE_DOWN',\n\n  /**\n   * Triggers on the eventTarget when the mouse is released, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseUpEventType | Mouse Up Event Type}\n   * for typing your event listeners for this mouse up event, and see what\n   * event detail is included in {@link EventTypes.MouseUpEventDetail | Mouse Up Event Detail}.\n   */\n  MOUSE_UP = 'CORNERSTONE_TOOLS_MOUSE_UP',\n\n  /**\n   * Triggers on the eventTarget when a handled `MOUSE_DOWN` event does not `stopPropagation`. The hook\n   * we use to create new annotation for mouse events.\n   * Make use of {@link EventTypes.MouseDownActivateEventType | Mouse Down Activate Event Type}\n   * for typing your event listeners for this mouse down activate event, and see what\n   * event detail is included in {@link EventTypes.MouseDownActivateEventDetail | Mouse Down Activate Event Detail}.\n   */\n  MOUSE_DOWN_ACTIVATE = 'CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE',\n\n  /**\n   * Triggers on the event target when mouse is dragging an annotation or textBox.\n   * Make use of {@link EventTypes.MouseDragEventType | Mouse Drag Event Type}\n   * for typing your event listeners for this mouse drag event, and see what\n   * event detail is included in {@link EventTypes.MouseDragEventDetail | Mouse Drag Event Detail}.\n   */\n  MOUSE_DRAG = 'CORNERSTONE_TOOLS_MOUSE_DRAG',\n\n  /**\n   * Triggers on the eventTarget, when the mouse is moved, it is CornerstoneTools normalized event.\n   * It can be just a mouse move or when double click is performed and annotation\n   * drawing can be performed with just mouse move.\n   * Make use of {@link EventTypes.MouseMoveEventType | Mouse Move Event Type}\n   * for typing your event listeners for this mouse move event, and see what\n   * event detail is included in {@link EventTypes.MouseMoveEventDetail | Mouse Move Event Detail}.\n   */\n  MOUSE_MOVE = 'CORNERSTONE_TOOLS_MOUSE_MOVE',\n\n  /**\n   * Triggers on the eventTarget when a mouse click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseClickEventType | Mouse Click Event Type}\n   * for typing your event listeners for this mouse click event, and see what\n   * event detail is included in {@link EventTypes.MouseClickEventDetail | Mouse Click Event Detail}.\n   */\n  MOUSE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse double click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDoubleClickEventType | Mouse Double Click Event Type}\n   * for typing your event listeners for this mouse double click event, and see what\n   * event detail is included in {@link EventTypes.MouseDoubleClickEventDetail | Mouse Double Click Event Detail}.\n   */\n  MOUSE_DOUBLE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse wheel event is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseWheelEventType | Mouse Wheel Event Type}\n   * for typing your event listeners for this mouse wheel event, and see what\n   * event detail is included in {@link EventTypes.MouseWheelEventDetail | Mouse Wheel Event Detail}.\n   */\n  MOUSE_WHEEL = 'CORNERSTONE_TOOLS_MOUSE_WHEEL',\n\n  // Todo: not being fired as of now\n  // ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n  // Todo: not implemented yet\n  // KEY_PRESS = 'CORNERSTONE_TOOLS_KEY_PRESS',\n\n  //////////////////////\n  //   Touch Events   //\n  //////////////////////\n  // The event flow looks like the following\n  // Touch Start -> (optional) Touch Press -> Touch Drag -> (optional) Touch Swipe -> Touch End\n  // Touch Tap\n  // mousedown\n  // mousedown, Touch Start, and Tap are mutually exclusive events\n  TOUCH_START = 'CORNERSTONE_TOOLS_TOUCH_START',\n  TOUCH_START_ACTIVATE = 'CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE',\n  TOUCH_PRESS = 'CORNERSTONE_TOOLS_TOUCH_PRESS',\n  TOUCH_DRAG = 'CORNERSTONE_TOOLS_TOUCH_DRAG',\n  TOUCH_END = 'CORNERSTONE_TOOLS_TOUCH_END',\n  TOUCH_TAP = 'CORNERSTONE_TOOLS_TAP',\n  TOUCH_SWIPE = 'CORNERSTONE_TOOLS_SWIPE',\n}\n\nexport default Events;\n","/**\n * Segmentations on viewports can be visualized in different ways. This enum\n * defines the different ways of visualizing segmentations. Currently, only\n * labelmap is supported.\n */\nenum SegmentationRepresentations {\n  Labelmap = 'LABELMAP',\n  Contour = 'CONTOUR',\n  Surface = 'SURFACE',\n}\n\nexport default SegmentationRepresentations;\n","enum Swipe {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport { Swipe };\n","/**\n * Defines the names of the strategy callbacks used for performing enhanced\n * strategy operations.\n */\nenum StrategyCallbacks {\n  /**\n   * startStrategy is called at the start of a strategy, typically on mouse down\n   * Note this is separate from preview and the endings for preview, which could\n   * be called alternatively, but this may be nested within a preview.\n   */\n  OnInteractionStart = 'onInteractionStart',\n  /**\n   * finishStrategy is called at the end of a strategy being applied, usually on\n   * mouse up.\n   */\n  OnInteractionEnd = 'onInteractionEnd',\n  /**\n   * The preview can be used for tools to show what would happen on accepting\n   * before the change is actually done.  For example, a spline tool might\n   * show a preview state, and allow that to be accepted or rejected.\n   */\n  Preview = 'preview',\n  RejectPreview = 'rejectPreview',\n  AcceptPreview = 'acceptPreview',\n\n  /**\n   * Fills the given reygion\n   */\n  Fill = 'fill',\n\n  /**\n   * The default strategy function, often synonymous with fill\n   */\n  StrategyFunction = 'strategyFunction',\n\n  /**\n   * For threshold functions, this creates the thresold test.  Mostly an internal\n   * detail, but might be useful to share between strategies.\n   */\n  CreateIsInThreshold = 'createIsInThreshold',\n\n  /**\n   *  Some strategy functions need to initialize some data before being runnable.\n   * This is mostly an internal detail, just useful to have an enum here for this.\n   */\n  Initialize = 'initialize',\n\n  // Internal Details\n  INTERNAL_setValue = 'setValue',\n}\n\nexport default StrategyCallbacks;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationLockChangeEventDetail } from '../../types/EventTypes';\n\n/*\n * Constants\n */\nconst globalLockedAnnotationsSet: Set<Annotation> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"Locked\" state of a given annotation instance.\n *\n * @triggers ANNOTATION_LOCK_CHANGE\n *\n * @param annotation - The annotation instance which will have\n * its locked state changed. An event will only be triggered if the locked state\n * of the given annotation instance changed.\n * @param locked - A boolean value indicating if the instance should\n * be locked (true) or not (false)\n */\nfunction setAnnotationLocked(annotation: Annotation, locked = true): void {\n  const detail = makeEventDetail();\n  if (annotation) {\n    if (locked) {\n      lock(annotation, globalLockedAnnotationsSet, detail);\n    } else {\n      unlock(annotation, globalLockedAnnotationsSet, detail);\n    }\n  }\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Clears all the locked annotation\n *\n */\nfunction unlockAllAnnotations(): void {\n  const detail = makeEventDetail();\n  clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Returns an array of all the annotation that is currently locked\n * @returns An array of tool specific annotation objects.\n *\n */\nfunction getAnnotationsLocked(): Array<Annotation> {\n  return Array.from(globalLockedAnnotationsSet);\n}\n\n/**\n * Given a Annotation object, return true if it is locked.\n * @param annotation - Annotation\n * @returns A boolean value.\n */\nfunction isAnnotationLocked(annotation: Annotation): boolean {\n  return globalLockedAnnotationsSet.has(annotation);\n}\n\n/**\n * Get the number of locked annotation objects in the global set of locked annotation\n * objects.\n * @returns The number of locked annotation objects.\n *\n */\nfunction getAnnotationsLockedCount(): number {\n  return globalLockedAnnotationsSet.size;\n}\n\n/**\n * Properly initialize the isLocked on annotation, and set it as locked if\n * isLocked is true.\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsLockedProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isLocked = !!annotation.isLocked;\n    if (shouldDefineIsLockedProperty(annotation)) {\n      Object.defineProperty(annotation, 'isLocked', {\n        configurable: false,\n        enumerable: true,\n        set: setIsLocked,\n        get: getIsLocked,\n      });\n    }\n    setAnnotationLocked(annotation, isLocked);\n  }\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationLockChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    locked: [],\n  });\n}\n\nfunction lock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (!lockedAnnotationsSet.has(annotation)) {\n    lockedAnnotationsSet.add(annotation);\n    detail.added.push(annotation);\n  }\n}\n\nfunction unlock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (lockedAnnotationsSet.delete(annotation)) {\n    detail.removed.push(annotation);\n  }\n}\n\nfunction clearLockedAnnotationsSet(\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  lockedAnnotationsSet.forEach((annotation) => {\n    unlock(annotation, lockedAnnotationsSet, detail);\n  });\n}\n\nfunction publish(\n  detail: AnnotationLockChangeEventDetail,\n  lockedAnnotationsSet: Set<Annotation>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsLockedProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsLocked(locked: boolean) {\n  setAnnotationLocked(this as Annotation, locked);\n}\n\nfunction getIsLocked() {\n  return isAnnotationLocked(this as Annotation);\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationLocked,\n  getAnnotationsLocked,\n  getAnnotationsLockedCount,\n  unlockAllAnnotations,\n  isAnnotationLocked,\n  checkAndDefineIsLockedProperty,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { AnnotationSelectionChangeEventDetail } from '../../types/EventTypes';\nimport { getAnnotation } from './annotationState';\n\n/*\n * Constants\n */\n\nconst selectedAnnotationUIDs: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set a given annotationUID as selected or deselected based on the provided\n * selected value.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param selected - When true, the annotation is selected. When false, the annotation is deselected.\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction setAnnotationSelected(\n  annotationUID: string,\n  selected = true,\n  preserveSelected = false\n): void {\n  if (selected) {\n    selectAnnotation(annotationUID, preserveSelected);\n  } else {\n    deselectAnnotation(annotationUID);\n  }\n}\n\n/**\n * Set a given annotation as selected.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction selectAnnotation(\n  annotationUID: string,\n  preserveSelected = false\n): void {\n  const detail = makeEventDetail();\n  if (!preserveSelected) {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n    selectedAnnotationUIDs.add(annotationUID);\n    detail.added.push(annotationUID);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Deselect one or all annotations.\n *\n * @param annotationUID - If an annotation is provided that instance will be removed from\n * the internal selection set. If none is given, ALL selections will be cleared.\n */\nfunction deselectAnnotation(annotationUID?: string): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (selectedAnnotationUIDs.delete(annotationUID)) {\n      detail.removed.push(annotationUID);\n    }\n  } else {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Return an array of ALL the selected annotationUIDs\n * @returns An array of Annotation UIDs\n */\nfunction getAnnotationsSelected(): Array<string> {\n  return Array.from(selectedAnnotationUIDs);\n}\n\n/**\n * Given a tool name, return ALL the annotationUIDs for that tool that are selected\n * @param toolName - The name of the tool you want to get the selected annotation for\n * @returns An array of annotationUIDs\n */\nfunction getAnnotationsSelectedByToolName(toolName: string): Array<string> {\n  return getAnnotationsSelected().filter((annotationUID) => {\n    const annotation = getAnnotation(annotationUID);\n    return annotation.metadata.toolName === toolName;\n  });\n}\n\n/**\n * Given an annotationUID, return true if it is selected, false\n * otherwise.\n * @param annotationUID - Annotation UID\n * @returns A boolean value.\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return selectedAnnotationUIDs.has(annotationUID);\n}\n\n/**\n * Return the number of the selected annotation\n * @returns The size of the selected annotation set\n */\nfunction getAnnotationsSelectedCount(): number {\n  return selectedAnnotationUIDs.size;\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationSelectionChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    selection: [],\n  });\n}\n\nfunction clearSelectionSet(\n  selectionSet: Set<string>,\n  detail: AnnotationSelectionChangeEventDetail\n): void {\n  selectionSet.forEach((value) => {\n    if (selectionSet.delete(value)) {\n      detail.removed.push(value);\n    }\n  });\n}\n\nfunction publish(\n  detail: AnnotationSelectionChangeEventDetail,\n  selectionSet: Set<string>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    selectionSet.forEach((item) => void detail.selection.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n  }\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationSelected,\n  getAnnotationsSelected,\n  getAnnotationsSelectedByToolName,\n  getAnnotationsSelectedCount,\n  deselectAnnotation,\n  isAnnotationSelected,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotation } from './annotationState';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationVisibilityChangeEventDetail } from '../../types/EventTypes';\nimport {\n  isAnnotationSelected,\n  deselectAnnotation,\n} from './annotationSelection';\n\n/*\n * It stores all hidden annotation uids.\n */\nconst globalHiddenAnnotationUIDsSet: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"visible\" state of a given annotation instance.\n *\n * @event ANNOTATION_VISIBILITY_CHANGE\n *\n * @param annotationUID - The annotation uid which will have\n * its visible state changed. An event will only be triggered if the visible state\n * of the given annotation instance changed.\n * @param visible - A boolean value indicating if the instance should\n * be visible (true) or not (false)\n */\nfunction setAnnotationVisibility(annotationUID: string, visible = true): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (visible) {\n      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    } else {\n      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    }\n  }\n  publish(detail);\n}\n\n/**\n * Clears all the hidden annotations.\n *\n */\nfunction showAllAnnotations(): void {\n  const detail = makeEventDetail();\n  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n  });\n  publish(detail);\n}\n\n/**\n * Given an annotation UID, return true if it is visible, false if hidden and undefined if does not exist.\n * @param annotationUID - The annotation uid to tell if is visible or not.\n * @returns A boolean value or value if does not exist.\n */\nfunction isAnnotationVisible(annotationUID: string): boolean | undefined {\n  const annotation = getAnnotation(annotationUID);\n\n  if (annotation) {\n    return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n  }\n}\n/**\n * It decorates given annotation with isVisible property.\n * It properly initializes the isVisible on annotation(the property will be create if does not exist yet)\n *\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsVisibleProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isVisible = annotation.isVisible ?? true;\n    if (shouldDefineIsVisibleProperty(annotation)) {\n      Object.defineProperty(annotation, 'isVisible', {\n        configurable: false,\n        enumerable: true,\n        set: setIsVisible,\n        get: getIsVisible,\n      });\n    }\n    setAnnotationVisibility(annotation.annotationUID, isVisible);\n  }\n}\n\n/*\n * Private Helpers\n */\nfunction makeEventDetail(): AnnotationVisibilityChangeEventDetail {\n  return Object.freeze({\n    lastVisible: [],\n    lastHidden: [],\n    hidden: [],\n  });\n}\n\nfunction show(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (annotationUIDsSet.delete(annotationUID)) {\n    detail.lastVisible.push(annotationUID);\n  }\n}\n\nfunction hide(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (!annotationUIDsSet.has(annotationUID)) {\n    annotationUIDsSet.add(annotationUID);\n    if (isAnnotationSelected(annotationUID)) {\n      deselectAnnotation(annotationUID);\n    }\n    detail.lastHidden.push(annotationUID);\n  }\n}\n\nfunction publish(detail: AnnotationVisibilityChangeEventDetail) {\n  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n    globalHiddenAnnotationUIDsSet.forEach(\n      (item) => void detail.hidden.push(item)\n    );\n    triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsVisibleProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsVisible(hidden: boolean) {\n  setAnnotationVisibility((this as Annotation).annotationUID, hidden);\n}\n\nfunction getIsVisible() {\n  return isAnnotationVisible((this as Annotation).annotationUID);\n}\n\nexport {\n  setAnnotationVisibility,\n  showAllAnnotations,\n  isAnnotationVisible,\n  checkAndDefineIsVisibleProperty,\n};\n","import cloneDeep from 'lodash.clonedeep';\nimport {\n  Annotation,\n  Annotations,\n  AnnotationState,\n  GroupSpecificAnnotations,\n} from '../../types/AnnotationTypes';\n\nimport { AnnotationGroupSelector, IAnnotationManager } from '../../types';\n\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport { checkAndDefineIsLockedProperty } from './annotationLocking';\nimport { checkAndDefineIsVisibleProperty } from './annotationVisibility';\n\n/**\n * This is the default annotation manager. It stores annotations by default\n * based on the FrameOfReferenceUID. However, it is possible to override the\n * getAnnotationStateKey function to store annotations based on any other\n * property of the element. When you write your custom annotation manager, you\n * can use the setAnnotationManager function to set your custom annotation.\n *\n * Note that this class is a singleton and should not be instantiated directly.\n * To get the stored annotations information you can use ToolState helpers.\n */\nclass FrameOfReferenceSpecificAnnotationManager implements IAnnotationManager {\n  private annotations: AnnotationState;\n  public readonly uid: string;\n\n  /**\n   * @param uid - The uid of the state manager. If omitted it is autogenerated.\n   */\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = utilities.uuidv4();\n    }\n    this.annotations = {};\n    this.uid = uid;\n\n    // Listen to the IMAGE_VOLUME_MODIFIED event to invalidate data.\n    eventTarget.addEventListener(\n      Enums.Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedHandler\n    );\n  }\n\n  /**\n   * Default annotation manager works with FrameOfReferenceUID as the key. The\n   * manager adds them under the FrameOfReferenceUID for the element being\n   * annotated.\n   *\n   * @param annotationGroupSelector - element or a string that is provided\n   * to the annotation manager to get the key.\n   * @returns - The annotation state key for the element.\n   */\n  getGroupKey = (annotationGroupSelector: AnnotationGroupSelector): string => {\n    if (typeof annotationGroupSelector === 'string') {\n      return annotationGroupSelector;\n    }\n\n    const element = annotationGroupSelector;\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      throw new Error(\n        'Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID'\n      );\n    }\n\n    return enabledElement.FrameOfReferenceUID;\n  };\n\n  /**\n   * When a volume is modified we invalidate all of the `annotations` on the\n   * volume's `FrameOfReferenceUID`. This is mainly to update statistics calculations\n   * when an annotation is drawn whilst data is still loading.\n   *\n   * @param evt - The IMAGE_VOLUME_MODIFIED rendering event.\n   */\n  _imageVolumeModifiedHandler = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const eventDetail = evt.detail;\n    const { FrameOfReferenceUID } = eventDetail;\n\n    const annotations = this.annotations;\n    const frameOfReferenceSpecificAnnotations =\n      annotations[FrameOfReferenceUID];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      return;\n    }\n\n    Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      toolSpecificAnnotations.forEach((annotation) => {\n        const invalidated = annotation.invalidated;\n\n        if (invalidated !== undefined) {\n          annotation.invalidated = true;\n        }\n      });\n    });\n  };\n\n  /**\n   * Returns all the available frameOfReferences inside the state manager\n   * @returns - All the added frames of references inside the manager\n   */\n  getFramesOfReference = (): Array<string> => {\n    return Object.keys(this.annotations);\n  };\n\n  /**\n   * Returns the annotations associated with the specified frameOfReference and tool, or\n   * all annotations for the group if the tool name is not provided.\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns The annotations associated with the specified group (default FrameOfReferenceUID) and tool,\n   * or all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   */\n  getAnnotations = (\n    groupKey: string,\n    toolName?: string\n  ): GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (!annotations[groupKey]) {\n      return [];\n    }\n\n    if (toolName) {\n      return annotations[groupKey][toolName];\n    }\n\n    return annotations[groupKey];\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, returns the `annotation`\n   * from the `annotations`. Each `annotation` has a unique identifier.\n   *\n   * @param annotationUID - The unique identifier of the `annotation`.\n   * @returns The retrieved `annotation`.\n   */\n  getAnnotation = (annotationUID: string): Annotation | undefined => {\n    const annotations = this.annotations;\n\n    for (const frameOfReferenceUID in annotations) {\n      const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n\n      for (const toolName in frameOfReferenceAnnotations) {\n        const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n\n        for (const annotation of toolSpecificAnnotations) {\n          if (annotationUID === annotation.annotationUID) {\n            return annotation;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * A function that returns the number of annotations for a given tool in the\n   * specific group (default FrameOfReferenceUID) IF no groupKey (FrameOfReferenceUID) is provided,\n   * it will return the number of annotations for the tool in all groups (FrameOfReferenceUIDs)\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - The name of the tool to retrieve data for.\n   *\n   * @returns The number of annotations for a given tool in the state\n   */\n  getNumberOfAnnotations = (groupKey: string, toolName?: string): number => {\n    const annotations = this.getAnnotations(groupKey, toolName);\n\n    if (!annotations.length) {\n      return 0;\n    }\n\n    if (toolName) {\n      return (annotations as Annotations).length;\n    }\n\n    let total = 0;\n\n    for (const toolName in annotations) {\n      total += annotations[toolName].length;\n    }\n\n    return total;\n  };\n\n  /**\n   * Adds an instance of `Annotation` to the `annotations`.\n   *\n   * @param annotation - The annotation to add.\n   * @param groupKey - The annotation group key to add the annotation to (in default manager it is FrameOfReferenceUID).\n   */\n  addAnnotation = (annotation: Annotation, groupKey?: string): void => {\n    const { metadata } = annotation;\n    const { FrameOfReferenceUID, toolName } = metadata;\n\n    groupKey = groupKey || FrameOfReferenceUID;\n\n    const annotations = this.annotations;\n\n    let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      annotations[groupKey] = {};\n\n      frameOfReferenceSpecificAnnotations = annotations[groupKey];\n    }\n\n    let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n\n    if (!toolSpecificAnnotations) {\n      frameOfReferenceSpecificAnnotations[toolName] = [];\n\n      toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n    }\n\n    toolSpecificAnnotations.push(annotation);\n    checkAndDefineIsLockedProperty(annotation);\n    checkAndDefineIsVisibleProperty(annotation);\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, removes the `annotation`\n   * from the `annotations`.\n   *\n   * @param annotationUID - The unique identifier of the `annotation` to remove.\n   */\n  removeAnnotation = (annotationUID: string): void => {\n    const { annotations } = this;\n\n    for (const groupKey in annotations) {\n      const groupAnnotations = annotations[groupKey];\n\n      for (const toolName in groupAnnotations) {\n        const toolAnnotations = groupAnnotations[toolName];\n\n        const index = toolAnnotations.findIndex(\n          (annotation) => annotation.annotationUID === annotationUID\n        );\n\n        if (index !== -1) {\n          toolAnnotations.splice(index, 1);\n\n          if (toolAnnotations.length === 0) {\n            delete groupAnnotations[toolName];\n          }\n        }\n      }\n\n      if (Object.keys(groupAnnotations).length === 0) {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Removes all annotations associated with the specified group (FrameOfReferenceUID) and tool, or\n   * all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   *\n   * @param groupKey - The group key to remove annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to remove annotations for.\n   */\n  removeAnnotations = (groupKey: string, toolName?: string): void => {\n    const annotations = this.annotations;\n    if (annotations[groupKey]) {\n      if (toolName) {\n        delete annotations[groupKey][toolName];\n      } else {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Returns a section of the annotations. Useful for serialization.\n   * If both groupKey (default manager is FrameOfReferenceUID) and toolName are provided, returns the corresponding Annotations instance\n   * for that groupKey (FrameOfReferenceUID) and toolName.\n   * If only groupKey is provided, returns the corresponding FrameOfReferenceSpecificAnnotations instance\n   * for that groupKey.\n   * If neither groupKey nor toolName is provided, returns the entire AnnotationState object.\n   * @param groupKey - Optional. The group key (e.g. FrameOfReferenceUID) to retrieve annotations for.\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns A section of the annotations.\n   */\n  saveAnnotations = (\n    groupKey?: string,\n    toolName?: string\n  ): AnnotationState | GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        return;\n      }\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      return cloneDeep(toolSpecificAnnotations);\n    } else if (groupKey) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      return cloneDeep(frameOfReferenceSpecificAnnotations);\n    }\n\n    return cloneDeep(annotations);\n  };\n\n  /**\n   * Restores a section of the `annotations`. Useful for loading in serialized data.\n   *\n   * - If no arguments are given, the entire `AnnotationState` instance is restored.\n   * - If the `FrameOfReferenceUID` is given, the corresponding\n   * `FrameOfReferenceSpecificAnnotations` instance is restored.\n   * - If both the `FrameOfReferenceUID` and the `toolName` are are given, the\n   * corresponding `Annotations` instance is restored.\n   *\n   * @param groupKey - A filter string for restoring only the `annotations` of a specific frame of reference.\n   * @param toolName - A filter string for restoring `annotation` for a specific tool on a specific frame of reference.\n   */\n  restoreAnnotations = (\n    state: AnnotationState | GroupSpecificAnnotations | Annotations,\n    groupKey?: string,\n    toolName?: string\n  ): void => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      // Set Annotations for FrameOfReferenceUID and toolName.\n\n      let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        annotations[groupKey] = {};\n\n        frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      }\n\n      frameOfReferenceSpecificAnnotations[toolName] = <Annotations>state;\n    } else if (groupKey) {\n      // Set FrameOfReferenceSpecificAnnotations for FrameOfReferenceUID.\n\n      annotations[groupKey] = <GroupSpecificAnnotations>state;\n    } else {\n      // Set entire annotations\n      this.annotations = <AnnotationState>cloneDeep(state);\n    }\n  };\n\n  /**\n   * A function that returns the number of all annotations in the annotation state\n   *\n   * @returns The number of all annotations in the state\n   */\n  getNumberOfAllAnnotations = (): number => {\n    let count = 0;\n    const annotations = this.annotations;\n    for (const groupKey in annotations) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      for (const toolName in frameOfReferenceSpecificAnnotations) {\n        const toolSpecificAnnotations =\n          frameOfReferenceSpecificAnnotations[toolName];\n        count += toolSpecificAnnotations.length;\n      }\n    }\n    return count;\n  };\n\n  /**\n   * Removes all annotations in the annotation state.\n   */\n  removeAllAnnotations = (): void => {\n    this.annotations = {};\n  };\n}\n\nconst defaultFrameOfReferenceSpecificAnnotationManager =\n  new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\n\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","let svgNodeCache = {};\n\nexport function resetSvgNodeCache(): void {\n  svgNodeCache = {};\n}\n\nexport default svgNodeCache;\n","import _cloneDeep from 'lodash.clonedeep';\n\nimport { IToolGroup, IToolClassReference } from '../types';\nimport Synchronizer from './SynchronizerManager/Synchronizer';\nimport svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\n\ninterface ICornerstoneTools3dState {\n  isInteractingWithTool: boolean;\n  isMultiPartToolActive: boolean;\n  tools: Record<\n    string,\n    {\n      toolClass: IToolClassReference;\n    }\n  >;\n  toolGroups: Array<IToolGroup>;\n  synchronizers: Array<Synchronizer>;\n  svgNodeCache: Record<string, unknown>;\n  enabledElements: Array<unknown>;\n  handleRadius: number;\n}\n\nconst defaultState: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nlet state: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nfunction resetCornerstoneToolsState(): void {\n  resetSvgNodeCache();\n  state = _cloneDeep(defaultState);\n}\n\nexport {\n  ICornerstoneTools3dState,\n  resetCornerstoneToolsState,\n  state,\n  state as default,\n};\n","import { state } from './state';\n\n/**\n * Adds the tool class to the cornerstoneTools to be used later. This function\n * should be called before creating the toolGroups and adding tools and setting their mode.\n * The flow is:\n * - addTool(ToolClass) // where ToolClass is the tool constructor imported from CornerstoneTools or created by a 3rd party\n * - createToolGroup(toolGroupId)\n * - toolGroup.addTool(${toolName}) // NOT THE TOOL CLASS\n * - toolGroup.setToolActive(${toolName})\n *\n * @param ToolClass - A tool calls to instantiate.\n * @param toolOptions - The tool-specific configuration options for the tool.\n * @returns\n */\nexport function addTool(ToolClass): void {\n  // Check if tool exists and name is not undefined\n  const toolName = ToolClass.toolName;\n  const toolAlreadyAdded = state.tools[toolName] !== undefined;\n\n  if (!toolName) {\n    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n  }\n\n  if (toolAlreadyAdded) {\n    throw new Error(`${toolName} has already been added globally`);\n  }\n\n  // Stores the toolNames and ToolClass to be instantiated in the toolGroup on toolGroup.addTool\n  state.tools[toolName] = {\n    toolClass: ToolClass,\n  };\n}\n\n/**\n * Removes the tool class from the cornerstoneTools.\n *\n * @param ToolClass - A tool calls to instantiate.\n */\nexport function removeTool(ToolClass): void {\n  const toolName = ToolClass.toolName;\n\n  if (!toolName) {\n    throw new Error(`No tool found for: ${ToolClass.name}`);\n  }\n\n  if (!state.tools[toolName] !== undefined) {\n    delete state.tools[toolName];\n  } else {\n    throw new Error(\n      `${toolName} cannot be removed because it has not been added`\n    );\n  }\n}\n\nexport default addTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { IPoints } from '../../types';\n\n/**\n * Given a native mouse event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Mouse event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getMouseEventPoints(\n  evt: MouseEvent,\n  element?: HTMLDivElement\n): IPoints {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const { viewport } = getEnabledElement(elementToUse);\n  const clientPoint = _clientToPoint(evt);\n  const pagePoint = _pageToPoint(evt);\n  const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n  const worldPoint = viewport.canvasToWorld(canvasPoint);\n\n  return {\n    page: pagePoint,\n    client: clientPoint,\n    canvas: canvasPoint,\n    world: worldPoint,\n  };\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param evt - The Mouse `Event`\n */\nfunction _pageToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.pageX, evt.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Mouse `Event`\n */\nfunction _clientToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.clientX, evt.clientY];\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { EventTypes, IPoints } from '../../types';\n\n/**\n * Captures and normalizes the double click event. Emits as a cornerstoneTools3D\n * double click event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseDoubleClickListener(evt: MouseEvent): void {\n  const element = <HTMLDivElement>evt.currentTarget;\n\n  const { viewportId, renderingEngineId } = getEnabledElement(element);\n\n  const startPoints = getMouseEventPoints(evt, element);\n  const deltaPoints: IPoints = {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  };\n\n  const eventDetail: EventTypes.MouseDoubleClickEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_DOUBLE_CLICK,\n    viewportId,\n    renderingEngineId,\n    camera: {},\n    element,\n    startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(\n    element,\n    Events.MOUSE_DOUBLE_CLICK,\n    eventDetail\n  );\n\n  if (consumed) {\n    // The Events.MOUSE_DOUBLE_CLICK was consumed, thus no other listener should handle this 'dblclick' event.\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseDoubleClickListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { MouseMoveEventDetail } from '../../types/EventTypes';\n\nconst eventName = Events.MOUSE_MOVE;\n\n/**\n * Captures and normalizes the mouse move event. Emits as a cornerstoneTools3D\n * mouse move event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseMoveListener(evt: MouseEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const currentPoints = getMouseEventPoints(evt);\n  const eventDetail: MouseMoveEventDetail = {\n    renderingEngineId,\n    viewportId,\n    camera: {},\n    element,\n    currentPoints,\n    eventName,\n    event: evt,\n  };\n\n  const consumed = !triggerEvent(element, eventName, eventDetail);\n\n  // Events.MOUSE_MOVE was consumed, thus no other listener should handle this event.\n  if (consumed) {\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseMoveListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport Events from '../../enums/Events';\nimport mouseMoveListener from './mouseMoveListener';\nimport { EventTypes, IPoints } from '../../types';\nimport getMouseEventPoints from './getMouseEventPoints';\n\nconst { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } =\n  Events;\n\n// The amount of time in milliseconds within which a browser 'dblclick' event has to occur.\n// Any mouse down, up, down and up sequence taking longer than this time is considered to\n// NOT be a double click and any browser 'dblclick' event that subsequently occurs as a result\n// of such a sequence will be ignored. It is best to set this to a value that is less\n// than the system value for detecting a double click. Setting something too large\n// might detect a double click that does not constitute a browser 'dblclick' and thus\n// no mouse events for the sequence will get fired at all.\n//\n// TODO This module should detect and fire 'dblclick' events at its discretion and\n// ignore all those generated by the browser.\n//\nconst DOUBLE_CLICK_TOLERANCE_MS = 400;\n\n// This tolerance is how long to accept a secondary button down\nconst MULTI_BUTTON_TOLERANCE_MS = 150;\n\n// A drag (projected distance) during the double click timeout that is greater than this\n// value will cancel the timeout and suppress any double click that might occur.\n// This tolerance is particularly important on touch devices where some movement\n// might occur between the two clicks.\n//\n// TODO revisit this value for touch devices\n//\nconst DOUBLE_CLICK_DRAG_TOLERANCE = 3;\n\ninterface IMouseDownListenerState {\n  mouseButton: number;\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  isClickEvent: boolean;\n  clickDelay: number;\n  preventClickTimeout: ReturnType<typeof setTimeout>;\n  startPoints: IPoints;\n  lastPoints: IPoints;\n}\n\ninterface IDoubleClickState {\n  doubleClickTimeout: ReturnType<typeof setTimeout>;\n  mouseDownEvent: MouseEvent;\n  mouseUpEvent: MouseEvent;\n  ignoreDoubleClick: boolean;\n}\n\n// STATE\nconst defaultState: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  element: null,\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nlet state: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  element: null,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nconst doubleClickState: IDoubleClickState = {\n  doubleClickTimeout: null,\n  mouseDownEvent: null,\n  mouseUpEvent: null,\n  ignoreDoubleClick: false,\n};\n\n/**\n * Listens to mouse down events from the DOM and depending on interaction and further\n * interaction can emit the following mouse events:\n *\n * - MOUSE_DOWN\n * - MOUSE_DOWN_ACTIVATE\n * - MOUSE_DRAG (move while down)\n * - MOUSE_UP\n * - MOUSE_CLICK\n *\n * The mouse down is NOT handled immediately. Instead, a timeout is started to\n * determine if this mouse down is the first in a sequence that constitutes a\n * double click.\n *\n * @param evt - The Mouse event.\n * @private\n */\nfunction mouseDownListener(evt: MouseEvent) {\n  if (doubleClickState.doubleClickTimeout) {\n    // A second identical click will be a double click event, so ignore it\n    if (evt.buttons === doubleClickState.mouseDownEvent.buttons) {\n      return;\n    }\n\n    // Record the second button or the changed button event as the initial\n    // button down state so that the multi-button event can be detected\n    doubleClickState.mouseDownEvent = evt;\n\n    // If second button is added, then ensure double click timeout is terminated\n    // and do not handle three or more button gestures.\n    _doStateMouseDownAndUp();\n    return;\n  }\n\n  // Handle multi-button clicks by adding a delay before handling them.\n  // Double clicks (left button only) physically take the user longer, so\n  // use a longer timeout, and for multi-button at the same time, the clicks\n  // are done at the same time by the user, just the system perceives them\n  // separately, so have a short timeout to allow catching both buttons.\n  doubleClickState.doubleClickTimeout = setTimeout(\n    _doStateMouseDownAndUp,\n    evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS\n  );\n\n  // First mouse down of a potential double click. So save it and start\n  // a timeout to determine a double click.\n  doubleClickState.mouseDownEvent = evt;\n  doubleClickState.ignoreDoubleClick = false;\n\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  state.mouseButton = evt.buttons;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n\n  state.preventClickTimeout = setTimeout(\n    _preventClickHandler,\n    state.clickDelay\n  );\n\n  // Prevent CornerstoneToolsMouseMove while mouse is down\n  state.element.removeEventListener('mousemove', mouseMoveListener);\n\n  const startPoints = getMouseEventPoints(evt, state.element);\n  state.startPoints = _copyPoints(startPoints);\n  state.lastPoints = _copyPoints(startPoints);\n\n  document.addEventListener('mouseup', _onMouseUp);\n  document.addEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Does the actual mouse down logic if the double click timer has expired or\n * a mouse drag has started.\n * @param evt the mouse down event\n * @private\n */\nfunction _doMouseDown(evt: MouseEvent) {\n  const deltaPoints = _getDeltaPoints(state.startPoints, state.startPoints);\n\n  const eventDetail: EventTypes.MouseDownEventDetail = {\n    event: evt,\n    eventName: MOUSE_DOWN,\n    element: state.element,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPoints: state.startPoints,\n    lastPoints: state.startPoints,\n    currentPoints: state.startPoints,\n    deltaPoints,\n  };\n\n  state.lastPoints = _copyPoints(eventDetail.lastPoints);\n\n  // by triggering MOUSE_DOWN it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const notConsumed = triggerEvent(\n    eventDetail.element,\n    MOUSE_DOWN,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default behavior,\n  // create a new tool\n  if (notConsumed) {\n    triggerEvent(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);\n  }\n}\n\n/**\n *_onMouseDrag - Handle emission of drag events whilst the mouse is depressed.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseDrag(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (doubleClickState.doubleClickTimeout) {\n    if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n      // Dragging past the tolerance means no double click should occur.\n      _doStateMouseDownAndUp();\n    } else {\n      return;\n    }\n  }\n\n  const eventDetail: EventTypes.MouseDragEventDetail = {\n    event: evt,\n    eventName: MOUSE_DRAG,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: _copyPoints(state.startPoints),\n    lastPoints: _copyPoints(lastPoints),\n    currentPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(state.element, MOUSE_DRAG, eventDetail);\n\n  // Events.MOUSE_DRAG was consumed, thus no other listener should handle this event.\n  if (consumed) {\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n\n  // Update the last points\n  state.lastPoints = _copyPoints(currentPoints);\n}\n\n/**\n *_onMouseUp - Handle emission of mouse up events, and re-enabling mouse move events.\n *\n * If the mouse up event occurs during a double click timeout, it is either the first or\n * second mouse up of a potential double click sequence. If the first, then it\n * is saved in case the double click timeout expires and a simple mouse down and\n * up have to get executed. If the second, then the latest mouse down, up, down and\n * up constitute a double click and the mouseDoubleClickListener needs to execute.\n *\n * If the mouse up event comes after the double click timeout, then it is simply\n * handled as the up of a mouse down and up sequence.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseUp(evt: MouseEvent): void {\n  // Cancel the timeout preventing the click event from triggering\n  clearTimeout(state.preventClickTimeout);\n\n  if (doubleClickState.doubleClickTimeout) {\n    // received a mouse up while waiting for a double click (via a timeout)\n\n    if (!doubleClickState.mouseUpEvent) {\n      // this is the first mouse up during the double click timeout; we'll need it later if the timeout expires\n      doubleClickState.mouseUpEvent = evt;\n\n      state.element.addEventListener('mousemove', _onMouseMove);\n    } else {\n      // this is the second mouse up of a double click!\n      _cleanUp();\n    }\n  } else {\n    // Handle the actual mouse up. Note that it may have occurred during the double click timeout or\n    // after it expired. In either case this block is being executed after the time out has expired\n    // or after a drag started.\n\n    const eventName = state.isClickEvent ? MOUSE_CLICK : MOUSE_UP;\n\n    const currentPoints = getMouseEventPoints(evt, state.element);\n    const deltaPoints = _getDeltaPoints(currentPoints, state.lastPoints);\n    const eventDetail:\n      | EventTypes.MouseUpEventDetail\n      | EventTypes.MouseClickEventType = {\n      event: evt,\n      eventName,\n      mouseButton: state.mouseButton,\n      element: state.element,\n      renderingEngineId: state.renderingEngineId,\n      viewportId: state.viewportId,\n      camera: {},\n      startPoints: _copyPoints(state.startPoints),\n      lastPoints: _copyPoints(state.lastPoints),\n      currentPoints,\n      deltaPoints,\n    };\n\n    triggerEvent(eventDetail.element, eventName, eventDetail);\n\n    _cleanUp();\n  }\n\n  // Remove the drag as soon as we get the mouse up because either we have executed\n  // the mouse up logic, or we have not even handled the mouse down logic yet\n  // - either way no drag should/can occur.\n  document.removeEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Handles a mouse move on the state element after a mouse down AND up AND\n * while the double click timeout is still running.\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseMove(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n    return;\n  }\n\n  _doStateMouseDownAndUp();\n\n  // Do the move again because during the timeout the global mouse move listener was removed.\n  // Now it is back.\n  mouseMoveListener(evt);\n}\n\n/**\n * Determines if the given delta is past the double click, (projected) drag distance\n * tolerance.\n * @param delta the delta\n * @returns true iff the delta is past the tolerance\n */\nfunction _isDragPastDoubleClickTolerance(delta: Types.Point2): boolean {\n  return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;\n}\n\nfunction _preventClickHandler() {\n  state.isClickEvent = false;\n}\n\n/**\n * Do a mouse down and potential mouse up using each of the events in the double click state.\n * The events were stored in the state during the timeout to determine a double click.\n *\n * This function should be invoked whenever it is determined that the latest\n * sequence of mouse down(s) and up(s) is NOT a double click. Examples of this include\n * - the expiration of the double click timeout\n * - a mouse drag/move beyond the DOUBLE_CLICK_DRAG_TOLERANCE\n *\n * This function sets the doubleClickState.ignoreDoubleClick flag in case our timeout value\n * or mouse move/drag tolerance is inaccurate and we do indeed get a double click event from\n * the browser later. The flag will be cleared in the mouseDoubleClickIgnoreListener should a\n * double click event get fired. If there is no eventual double click for the latest sequence,\n * the flag spills into the next sequence where it will get cleared at the beginning of that next\n * sequence in mouseDownListener. It is perfectly safe for the flag to be\n * left true when no double click actually occurs because any future double click must start with\n * a mouse down that is handled in this module.\n *\n * @private\n */\nfunction _doStateMouseDownAndUp() {\n  doubleClickState.ignoreDoubleClick = true;\n\n  const mouseDownEvent = doubleClickState.mouseDownEvent;\n  const mouseUpEvent = doubleClickState.mouseUpEvent;\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  _doMouseDown(mouseDownEvent);\n\n  if (mouseUpEvent) {\n    _onMouseUp(mouseUpEvent);\n  }\n}\n\n/**\n * Clears the mouse events and double click timeout id in the double click state object.\n * The timeout itself is also cleared so that no callback is invoked.\n */\nfunction _clearDoubleClickTimeoutAndEvents() {\n  if (doubleClickState.doubleClickTimeout) {\n    clearTimeout(doubleClickState.doubleClickTimeout);\n    doubleClickState.doubleClickTimeout = null;\n  }\n\n  doubleClickState.mouseDownEvent = null;\n  doubleClickState.mouseUpEvent = null;\n}\n\nfunction _cleanUp() {\n  document.removeEventListener('mouseup', _onMouseUp);\n  state.element?.removeEventListener('mousemove', _onMouseMove);\n\n  // Restore our global mousemove listener\n  state.element?.addEventListener('mousemove', mouseMoveListener);\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  state = JSON.parse(JSON.stringify(defaultState));\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction _copyPoints(points: IPoints): IPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateMouseEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: IPoints\n): IPoints {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  const world = viewport.canvasToWorld(lastPoints.canvas);\n\n  return {\n    page: lastPoints.page,\n    client: lastPoints.client,\n    canvas: lastPoints.canvas,\n    world,\n  };\n}\n\n/**\n * Returns the difference between two `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction _getDeltaPoints(currentPoints: IPoints, lastPoints: IPoints): IPoints {\n  return {\n    page: _subtractPoints2D(currentPoints.page, lastPoints.page),\n    client: _subtractPoints2D(currentPoints.client, lastPoints.client),\n    canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),\n    world: _subtractPoints3D(currentPoints.world, lastPoints.world),\n  };\n}\n\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nexport function getMouseButton(): number {\n  return state.mouseButton;\n}\n\n/**\n * Handles a dblclick event to determine if it should be ignored based on the\n * double click state's ignoreDoubleClick flag. stopImmediatePropagation and\n * preventDefault are used to ignore the event.\n * @param evt browser dblclick event\n */\nexport function mouseDoubleClickIgnoreListener(evt: MouseEvent) {\n  if (doubleClickState.ignoreDoubleClick) {\n    doubleClickState.ignoreDoubleClick = false;\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  } else {\n    // If the embedding application blocked the first mouse down and up\n    // of a double click sequence from reaching this module, then this module\n    // has handled the second mouse down and up and thus needs to clean them up.\n    // Doing a clean up here for the typical double click case is harmless.\n    _cleanUp();\n  }\n}\n\nexport default mouseDownListener;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, {\n  mouseDoubleClickIgnoreListener,\n} from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\n\n/**\n * Removes mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('dblclick', mouseDoubleClickListener);\n  element.removeEventListener('mousedown', mouseDownListener);\n  element.removeEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\n/**\n * Registers mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n\n  element.addEventListener('dblclick', mouseDoubleClickListener);\n  element.addEventListener('mousedown', mouseDownListener);\n  element.addEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Functions to prevent ghost clicks following a touch\n// Since the event lifecycle is touchstart, mousedown, touchend, mouseup\n// we want to prevent mousedown and mouseup events after touch events\n// All credit to @kosich\n// https://gist.github.com/kosich/23188dd86633b6c2efb7\n\nconst antiGhostDelay = 2000,\n  pointerType = {\n    mouse: 0,\n    touch: 1,\n  };\n\nlet lastInteractionType, lastInteractionTime;\n\nfunction handleTap(type, e) {\n  const now = Date.now();\n\n  if (type !== lastInteractionType) {\n    if (now - lastInteractionTime <= antiGhostDelay) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n\n      return false;\n    }\n\n    lastInteractionType = type;\n  }\n\n  lastInteractionTime = now;\n}\n\n// Cacheing the function references\n// Necessary because a new function reference is created after .bind() is called\n// http://stackoverflow.com/questions/11565471/removing-event-listener-which-was-added-with-bind\nconst handleTapMouse = handleTap.bind(null, pointerType.mouse);\nconst handleTapTouch = handleTap.bind(null, pointerType.touch);\n\nfunction attachEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.addEventListener(eventName, tapHandler, { passive: false });\n  });\n}\n\nfunction removeEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.removeEventListener(eventName, tapHandler);\n  });\n}\n\nconst mouseEvents = ['mousedown', 'mouseup', 'mousemove'];\nconst touchEvents = ['touchstart', 'touchend'];\n\nfunction disable(element) {\n  removeEvents(element, mouseEvents, pointerType.mouse);\n  removeEvents(element, touchEvents, pointerType.touch);\n}\n\nfunction enable(element) {\n  disable(element);\n  attachEvents(element, mouseEvents, pointerType.mouse);\n  attachEvents(element, touchEvents, pointerType.touch);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { ITouchPoints } from '../../types';\n\n/**\n * Given a native touch event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Touch event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getTouchEventPoints(\n  evt: TouchEvent,\n  element?: HTMLDivElement\n): ITouchPoints[] {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const touches = evt.type === 'touchend' ? evt.changedTouches : evt.touches;\n  return Object.keys(touches).map((i) => {\n    const clientPoint = _clientToPoint(touches[i]);\n    const pagePoint = _pageToPoint(touches[i]);\n    const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n    const { viewport } = getEnabledElement(elementToUse);\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return {\n      page: pagePoint,\n      client: clientPoint,\n      canvas: canvasPoint,\n      world: worldPoint,\n      touch: {\n        identifier: i,\n        radiusX: touches[i].radiusX,\n        radiusY: touches[i].radiusY,\n        force: touches[i].force,\n        rotationAngle: touches[i].rotationAngle,\n      },\n    };\n  });\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param touch - The Touch\n */\nfunction _pageToPoint(touch: Touch): Types.Point2 {\n  return [touch.pageX, touch.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Touch `Event`\n */\nfunction _clientToPoint(touch: Touch): Types.Point2 {\n  return [touch.clientX, touch.clientY];\n}\n","import { IDistance, IPoints, ITouchPoints } from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IPoints {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _subtractPoints2D(curr.page, last.page),\n    client: _subtractPoints2D(curr.client, last.client),\n    canvas: _subtractPoints2D(curr.canvas, last.canvas),\n    world: _subtractPoints3D(curr.world, last.world),\n  };\n}\n\n/**\n * Returns the distance between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The distance difference in IDistance format\n */\nfunction getDeltaDistance(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _getDistance2D(curr.page, last.page),\n    client: _getDistance2D(curr.client, last.client),\n    canvas: _getDistance2D(curr.canvas, last.canvas),\n    world: _getDistance3D(curr.world, last.world),\n  };\n}\n\nfunction getDeltaRotation(\n  currentPoints: ITouchPoints[],\n  lastPoints: ITouchPoints[]\n) {\n  // TODO\n}\n\n/**\n * Returns the distance difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaDistanceBetweenIPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n  const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n  const deltaDistance = {\n    page: currentDistance.page - lastDistance.page,\n    client: currentDistance.client - lastDistance.client,\n    canvas: currentDistance.canvas - lastDistance.canvas,\n    world: currentDistance.world - lastDistance.world,\n  };\n  return deltaDistance;\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction copyPointsList(points: ITouchPoints[]): ITouchPoints[] {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction copyPoints(points: ITouchPoints): ITouchPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction getMeanPoints(points: IPoints[]): IPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n    }\n  );\n}\n\nfunction getMeanTouchPoints(points: ITouchPoints[]): ITouchPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n        touch: {\n          identifier: null,\n          radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n          radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n          force: prev.touch.force + curr.touch.force / points.length,\n          rotationAngle:\n            prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n        },\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n      touch: {\n        identifier: null,\n        radiusX: 0,\n        radiusY: 0,\n        force: 0,\n        rotationAngle: 0,\n      },\n    }\n  );\n}\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nfunction _getMeanDistanceBetweenAllIPoints(points: IPoints[]): IDistance {\n  // get mean distance between all unordered pairs of points\n  const pairedDistance: IDistance[] = [];\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < points.length; j++) {\n      if (i < j) {\n        pairedDistance.push({\n          page: _getDistance2D(points[i].page, points[j].page),\n          client: _getDistance2D(points[i].client, points[j].client),\n          canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n          world: _getDistance3D(points[i].world, points[j].world),\n        });\n      }\n    }\n  }\n\n  // take the average distance\n  return pairedDistance.reduce(\n    (prev, curr) => {\n      return {\n        page: prev.page + curr.page / pairedDistance.length,\n        client: prev.client + curr.client / pairedDistance.length,\n        canvas: prev.canvas + curr.canvas / pairedDistance.length,\n        world: prev.world + curr.world / pairedDistance.length,\n      };\n    },\n    {\n      page: 0,\n      client: 0,\n      canvas: 0,\n      world: 0,\n    }\n  );\n}\n\nfunction _getDistance2D(point0: Types.Point2, point1: Types.Point2): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2)\n  );\n}\n\nfunction _getDistance3D(point0: Types.Point3, point1: Types.Point3): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) +\n      Math.pow(point0[1] - point1[1], 2) +\n      Math.pow(point0[2] - point1[2], 2)\n  );\n}\n\nexport {\n  getMeanPoints,\n  getMeanTouchPoints,\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaPoints,\n  getDeltaDistance,\n  getDeltaRotation,\n};\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { Swipe } from '../../enums/Touch';\n\nimport { EventTypes, ITouchPoints, IPoints, IDistance } from '../../types';\n\nimport getTouchEventPoints from './getTouchEventPoints';\nimport {\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaDistance,\n  getDeltaPoints,\n  getMeanTouchPoints,\n  // getRotation\n} from '../../utilities/touch';\nimport { Settings } from '@cornerstonejs/core';\n\nconst runtimeSettings = Settings.getRuntimeSettings();\n\nconst {\n  TOUCH_START,\n  TOUCH_START_ACTIVATE,\n  TOUCH_PRESS,\n  TOUCH_DRAG,\n  TOUCH_END,\n  TOUCH_TAP,\n  TOUCH_SWIPE,\n} = Events;\n\ninterface ITouchTapListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  tapMaxDistance: number;\n  tapTimeout: ReturnType<typeof setTimeout>;\n  taps: number;\n  tapToleranceMs: number;\n}\n\ninterface ITouchStartListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  lastPointsList: ITouchPoints[];\n\n  // only trigger one touch event in the case the user puts down multiple fingers\n  isTouchStart: boolean;\n  startTime: Date;\n\n  // handle long press\n  pressTimeout: ReturnType<typeof setTimeout>;\n  pressDelay: number;\n  pressMaxDistance: number;\n  accumulatedDistance: IDistance;\n\n  // handle swipes\n  swipeDistanceThreshold: number;\n  swiped: boolean;\n  swipeToleranceMs: number;\n}\n\nconst zeroIPoint: IPoints = {\n  page: [0, 0],\n  client: [0, 0],\n  canvas: [0, 0],\n  world: [0, 0, 0],\n};\n\nconst zeroIDistance: IDistance = {\n  page: 0,\n  client: 0,\n  canvas: 0,\n  world: 0,\n};\n\n// STATE\nconst defaultState: ITouchStartListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  lastPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  isTouchStart: false,\n  startTime: null,\n\n  pressTimeout: null,\n  pressDelay: 700,\n  pressMaxDistance: 5,\n  accumulatedDistance: zeroIDistance,\n\n  swipeDistanceThreshold: 48,\n  swiped: false,\n  swipeToleranceMs: 300, // user has 300ms to swipe after touch start or no swipe will trigger\n};\n\n// TODO: these values should be configurable to handle different use cases such\n// as pen, left/right handed, index finger vs thumb, etc. These current values\n// assume thumb usage for single finger and index/middle finger for two finger\n// gestures in an attempt to cover the 90% use case.\nconst defaultTapState: ITouchTapListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  taps: 0,\n  tapTimeout: null,\n  tapMaxDistance: 24,\n  tapToleranceMs: 300,\n};\n\nlet state: ITouchStartListenerState = JSON.parse(JSON.stringify(defaultState));\nlet tapState: ITouchTapListenerState = JSON.parse(\n  JSON.stringify(defaultTapState)\n);\n\nfunction triggerEventCallback(ele, name, eventDetail) {\n  return triggerEvent(ele, name, eventDetail);\n}\n\n/**\n * Listens to touch events from the DOM (touchstart, touchmove, touchend)\n * and depending on interaction and further interaction can emit the\n * following touch events:\n *\n * - TOUCH_START\n * - TOUCH_START_ACTIVATE\n * - TOUCH_PRESS\n * - TOUCH_DRAG (move while down)\n * - TOUCH_SWIPE\n * - TOUCH_END (also an end for multi touch)\n *\n * - TOUCH_TAP\n *\n * @param evt - The Touch event (touchstart).\n * @private\n */\nfunction touchStartListener(evt: TouchEvent) {\n  // if a user adds an extra finger when a touch/multi touch has already started\n  // don't trigger another touch.\n  state.element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  // this prevents multiple start firing\n  if (state.isTouchStart) {\n    return;\n  }\n  // this will clear on touchstart and touchend\n  clearTimeout(state.pressTimeout);\n  state.pressTimeout = setTimeout(() => _onTouchPress(evt), state.pressDelay);\n\n  _onTouchStart(evt);\n  document.addEventListener('touchmove', _onTouchDrag); // also checks for swipe\n  document.addEventListener('touchend', _onTouchEnd); // also checks for tap\n}\n\n/**\n * _onTouchPress - Handle emission of touchstart events which are held down for a longer\n * period of time\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchPress(evt: TouchEvent) {\n  const totalDistance = state.accumulatedDistance.canvas;\n  if (totalDistance > state.pressMaxDistance) {\n    return;\n  }\n  const eventDetail: EventTypes.TouchPressEventDetail = {\n    event: evt, // touchstart native event\n    eventName: TOUCH_PRESS,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(state.lastPointsList),\n    startPoints: copyPoints(getMeanTouchPoints(state.startPointsList)),\n    lastPoints: copyPoints(getMeanTouchPoints(state.lastPointsList)),\n  };\n  triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);\n}\n\n/**\n * _onTouchStart - Handle emission of touchstart events.\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchStart(evt: TouchEvent) {\n  state.isTouchStart = true;\n  state.startTime = new Date();\n  const startPointsList = getTouchEventPoints(evt, state.element);\n  const startPoints = getMeanTouchPoints(startPointsList);\n  const deltaPoints = zeroIPoint;\n  const deltaDistance = zeroIDistance;\n  // deltaRotation same as deltaDistance but values are theta\n  const eventDetail: EventTypes.TouchStartEventDetail = {\n    event: evt,\n    eventName: TOUCH_START,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: startPointsList,\n    lastPointsList: startPointsList,\n    currentPointsList: startPointsList,\n    startPoints: startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n    deltaDistance,\n    // deltaRotation\n  };\n\n  state.startPointsList = copyPointsList(eventDetail.startPointsList);\n  state.lastPointsList = copyPointsList(eventDetail.lastPointsList);\n  // by triggering TOUCH_START it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const eventDidPropagate = triggerEventCallback(\n    eventDetail.element,\n    TOUCH_START,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default propagation behavior,\n  // create a new tool\n  if (eventDidPropagate) {\n    triggerEventCallback(\n      eventDetail.element,\n      TOUCH_START_ACTIVATE,\n      eventDetail\n    );\n  }\n}\n\n/**\n * _onTouchDrag - Handle emission of drag events whilst the touch is depressed.\n *\n * @private\n * @param evt - The touch event (touchmove)\n */\nfunction _onTouchDrag(evt: TouchEvent) {\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : zeroIPoint;\n\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : zeroIDistance;\n\n  const totalDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistance(currentPointsList, state.lastPointsList)\n      : zeroIDistance;\n\n  state.accumulatedDistance = {\n    page: state.accumulatedDistance.page + totalDistance.page,\n    client: state.accumulatedDistance.client + totalDistance.client,\n    canvas: state.accumulatedDistance.canvas + totalDistance.canvas,\n    world: state.accumulatedDistance.world + totalDistance.world,\n  };\n\n  /**\n   * this is can be uncommented to make dragging smoother. In the future, these values\n   * should be in a configuration file. There may also need to be different\n   * profiles for left handed and right handed thumb use. These values\n   * are currently optimized for left handed use.\n   *\n   * const clamp = (num) => Math.min(Math.max(num, -15), 10);\n   * const deltaDistanceClamped = \\{\n   *     page: clamp(deltaDistance.page),\n   *     client: clamp(deltaDistance.client),\n   *     canvas: clamp(deltaDistance.canvas),\n   *     world: clamp(deltaDistance.world),\n   * \\};\n   */\n\n  const eventDetail: EventTypes.TouchDragEventDetail = {\n    event: evt,\n    eventName: TOUCH_DRAG,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    deltaPoints: deltaPoints,\n    deltaDistance: deltaDistance,\n  };\n\n  triggerEventCallback(state.element, TOUCH_DRAG, eventDetail);\n\n  // check for swipe events\n  _checkTouchSwipe(evt, deltaPoints);\n\n  // Update the last points\n  state.lastPointsList = copyPointsList(currentPointsList);\n}\n\n/**\n * _onTouchEnd - Handle emission of touch end events\n *\n * @private\n * @param evt - The touch event.\n */\nfunction _onTouchEnd(evt: TouchEvent): void {\n  // in case it was a tap event we don't want to fire the cornerstone normalized\n  // touch end event if the touch start never happend\n  clearTimeout(state.pressTimeout);\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : getDeltaPoints(currentPointsList, currentPointsList);\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : getDeltaDistanceBetweenIPoints(currentPointsList, currentPointsList);\n  const eventDetail: EventTypes.TouchEndEventDetail = {\n    event: evt,\n    eventName: TOUCH_END,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    deltaPoints,\n    deltaDistance,\n  };\n\n  triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);\n  _checkTouchTap(evt);\n\n  // reset to default state\n  state = JSON.parse(JSON.stringify(defaultState));\n  document.removeEventListener('touchmove', _onTouchDrag);\n  document.removeEventListener('touchend', _onTouchEnd);\n}\n\nfunction _checkTouchTap(evt: TouchEvent): void {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (currentTime - startTime > tapState.tapToleranceMs) {\n    return;\n  }\n\n  // first tap, initialize the state\n  if (tapState.taps === 0) {\n    tapState.element = state.element;\n    tapState.renderingEngineId = state.renderingEngineId;\n    tapState.viewportId = state.viewportId;\n    tapState.startPointsList = state.startPointsList;\n  }\n\n  // subsequent tap is on a different element\n  if (\n    tapState.taps > 0 &&\n    !(\n      tapState.element == state.element &&\n      tapState.renderingEngineId == state.renderingEngineId &&\n      tapState.viewportId == state.viewportId\n    )\n  ) {\n    return;\n  }\n\n  const currentPointsList = getTouchEventPoints(evt, tapState.element);\n  const distanceFromStart = getDeltaDistance(\n    currentPointsList,\n    tapState.startPointsList\n  ).canvas;\n\n  // if the tap is too far from starting tap, we can ignore it.\n  // TODO: in the case the user means to tap in two separate areas within the\n  // tapTolerance (300ms), the second tap will not trigger. This is because it\n  // is ignored below for simplicity to track multiple taps (double, triple etc)\n  // in order to support two separate single taps that occur < 300ms on the\n  // screen. One can create the concept of \"TapChains\". Our current implementation\n  // only supports a single tap chain on the screen. You can think of it as a\n  // region where the user has the option to perform unlimited multitaps as long\n  // as they are < the tapToleranceMs value. So a tap somewhere else on the screen\n  // that is > the tapMaxDistance will start a separate and new \"TapChain\".\n  if (distanceFromStart > tapState.tapMaxDistance) {\n    return;\n  }\n\n  clearTimeout(tapState.tapTimeout);\n  tapState.taps += 1;\n\n  tapState.tapTimeout = setTimeout(() => {\n    const eventDetail: EventTypes.TouchTapEventDetail = {\n      event: evt,\n      eventName: TOUCH_TAP,\n      element: tapState.element,\n      renderingEngineId: tapState.renderingEngineId,\n      viewportId: tapState.viewportId,\n      camera: {},\n      currentPointsList,\n      currentPoints: getMeanTouchPoints(currentPointsList),\n      taps: tapState.taps,\n    };\n    triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);\n    tapState = JSON.parse(JSON.stringify(defaultTapState));\n  }, tapState.tapToleranceMs);\n}\n\nfunction _checkTouchSwipe(evt: TouchEvent, deltaPoints: IPoints) {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (state.swiped || currentTime - startTime > state.swipeToleranceMs) {\n    return;\n  }\n  const [x, y] = deltaPoints.canvas;\n  const eventDetail: EventTypes.TouchSwipeEventDetail = {\n    event: evt,\n    eventName: TOUCH_SWIPE,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    swipe: null,\n  };\n  if (Math.abs(x) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = x > 0 ? Swipe.RIGHT : Swipe.LEFT;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n\n  if (Math.abs(y) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = y > 0 ? Swipe.DOWN : Swipe.UP;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateTouchEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: ITouchPoints[]\n): ITouchPoints[] {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  return lastPoints.map((lp) => {\n    const world = viewport.canvasToWorld(lp.canvas);\n    return {\n      page: lp.page,\n      client: lp.client,\n      canvas: lp.canvas,\n      world,\n      touch: lp.touch,\n    };\n  });\n}\n\nexport default touchStartListener;\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\n\n/**\n * Removes touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  preventGhostClick.disable(element);\n  element.removeEventListener('touchstart', touchStartListener);\n}\n\n/**\n * Registers touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n  preventGhostClick.enable(element);\n  element.addEventListener('touchstart', touchStartListener, {\n    passive: false,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Reasonable defaults\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\n\n/**\n * Normalizes wheel events and provides properties that are more\n * consistent and helpful across different browsers\n *\n * @param event - the original mouse event\n * @returns a normalized eventDetail\n */\nexport default function normalizeWheel(event) {\n  let spinX = 0,\n    spinY = 0,\n    pixelX = 0,\n    pixelY = 0;\n\n  // Legacy\n  if ('detail' in event) {\n    spinY = event.detail;\n  }\n  if ('wheelDelta' in event) {\n    spinY = -event.wheelDelta / 120;\n  }\n  if ('wheelDeltaY' in event) {\n    spinY = -event.wheelDeltaY / 120;\n  }\n  if ('wheelDeltaX' in event) {\n    spinX = -event.wheelDeltaX / 120;\n  }\n\n  pixelX = spinX * PIXEL_STEP;\n  pixelY = spinY * PIXEL_STEP;\n\n  if ('deltaY' in event) {\n    pixelY = event.deltaY;\n  }\n  if ('deltaX' in event) {\n    pixelX = event.deltaX;\n  }\n\n  if ((pixelX || pixelY) && event.deltaMode) {\n    if (event.deltaMode === 1) {\n      // Delta in LINE units\n      pixelX *= LINE_HEIGHT;\n      pixelY *= LINE_HEIGHT;\n    } else {\n      // Delta in PAGE units\n      pixelX *= PAGE_HEIGHT;\n      pixelY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pixelX && !spinX) {\n    spinX = pixelX < 1 ? -1 : 1;\n  }\n  if (pixelY && !spinY) {\n    spinY = pixelY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX,\n    spinY,\n    pixelX,\n    pixelY,\n  };\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport normalizeWheel from './normalizeWheel';\nimport Events from '../../enums/Events';\n// ~~ VIEWPORT LIBRARY\nimport getMouseEventPoints from '../mouse/getMouseEventPoints';\nimport { MouseWheelEventDetail } from '../../types/EventTypes';\n\n/**\n * wheelListener - Captures and normalizes mouse wheel events. Emits as a\n * cornerstoneTools3D mouse wheel event.\n * @param evt - The mouse wheel event.\n */\nfunction wheelListener(evt: WheelEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  // Prevent triggering MouseWheel events that are not real scroll events:\n  // E.g. when clicking the MiddleMouseWheelButton, a deltaY of 0 is emitted.\n  // See https://github.com/cornerstonejs/cornerstoneTools/issues/935\n  if (evt.deltaY > -1 && evt.deltaY < 1) {\n    return;\n  }\n\n  evt.preventDefault();\n\n  const { spinX, spinY, pixelX, pixelY } = normalizeWheel(evt);\n  const direction = spinY < 0 ? -1 : 1;\n\n  const eventDetail: MouseWheelEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_WHEEL,\n    renderingEngineId,\n    viewportId,\n    element,\n    camera: {},\n    detail: evt,\n    wheel: {\n      spinX,\n      spinY,\n      pixelX,\n      pixelY,\n      direction,\n    },\n    points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(element, Events.MOUSE_WHEEL, eventDetail);\n}\n\nexport default wheelListener;\n","import wheelListener from './wheelListener';\n\n/**\n * Listens for the wheel event, and handles it. Handled event\n * will be \"normalized\" and re-emitted as `Events.MOUSE_WHEEL`\n *\n * @param element - The HTML element\n */\nfunction enable(element: HTMLDivElement) {\n  disable(element);\n  element.addEventListener('wheel', wheelListener, { passive: false });\n}\n\n/**\n * Removes listener and handler for wheel event. `Events.MOUSE_WHEEL`\n * will no longer be emitted.\n *\n * @param element - THe HTML element\n */\nfunction disable(element: HTMLDivElement) {\n  element.removeEventListener('wheel', wheelListener);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import _cloneDeep from 'lodash.clonedeep';\nimport { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { KeyDownEventDetail, KeyUpEventDetail } from '../../types/EventTypes';\n\ninterface IKeyDownListenerState {\n  renderingEngineId: string;\n  viewportId: string;\n  key: string | null;\n  keyCode: number | null;\n  element: HTMLDivElement;\n}\n\nconst defaultState: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\nlet state: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\n/**\n * Normalizes the keyboard event and triggers KEY_DOWN event from CornerstoneTools3D events\n * @param evt - DOM Keyboard event\n */\nfunction keyListener(evt: KeyboardEvent): void {\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  state.key = evt.key;\n  state.keyCode = evt.keyCode;\n\n  evt.preventDefault();\n  const eventDetail: KeyDownEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n\n    // detail: evt,\n    // Todo: mouse event points can be used later for placing tools with a key\n    // e.g., putting an arrow/probe/etc. on the mouse position. Another use case\n    // hovering and deleting the tool\n    // points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(eventDetail.element, Events.KEY_DOWN, eventDetail);\n\n  document.addEventListener('keyup', _onKeyUp);\n  document.addEventListener('visibilitychange', _onVisibilityChange);\n\n  // Todo: handle combination of keys\n  state.element.removeEventListener('keydown', keyListener);\n}\n\n/**\n * Whenever the visibility (i.e. tab focus) changes such that the tab is NOT the\n * active tab, reset the modifier key.\n */\nfunction _onVisibilityChange(): void {\n  document.removeEventListener('visibilitychange', _onVisibilityChange);\n  if (document.visibilityState === 'hidden') {\n    resetModifierKey();\n  }\n}\n\nfunction _onKeyUp(evt: KeyboardEvent): void {\n  const eventDetail: KeyUpEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n    // detail: evt,\n  };\n\n  // Remove our temporary handlers\n  document.removeEventListener('keyup', _onKeyUp);\n  document.removeEventListener('visibilitychange', _onVisibilityChange);\n  state.element.addEventListener('keydown', keyListener);\n\n  // Restore `state` to `defaultState`\n  state = _cloneDeep(defaultState);\n  triggerEvent(eventDetail.element, Events.KEY_UP, eventDetail);\n}\n\nexport function getModifierKey(): number | undefined {\n  return state.keyCode;\n}\n\nexport function resetModifierKey(): void {\n  state.keyCode = undefined;\n}\n\nexport default keyListener;\n","import keyDownListener, { getModifierKey } from './keyDownListener';\n\nfunction enable(element: HTMLDivElement): void {\n  disable(element);\n  element.addEventListener('keydown', keyDownListener);\n}\n\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('keydown', keyDownListener);\n}\n\nexport default {\n  enable,\n  disable,\n  getModifierKey,\n};\n","import { ContourConfig } from '../../../types/ContourTypes';\n\nconst defaultContourConfig: ContourConfig = {\n  renderOutline: true,\n  outlineWidthActive: 2,\n  outlineWidthInactive: 2,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n  renderFill: true,\n  fillAlpha: 1,\n  fillAlphaInactive: 0,\n};\n\nfunction getDefaultContourConfig(): ContourConfig {\n  return defaultContourConfig;\n}\n\nexport default getDefaultContourConfig;\n","import { LabelmapConfig } from '../../../types/LabelmapTypes';\n\nconst defaultLabelmapConfig: LabelmapConfig = {\n  renderOutline: true,\n  outlineWidthActive: 3,\n  outlineWidthInactive: 2,\n  renderFill: true,\n  renderFillInactive: true,\n  fillAlpha: 0.7,\n  fillAlphaInactive: 0.65,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n};\n\nfunction getDefaultLabelmapConfig(): LabelmapConfig {\n  return defaultLabelmapConfig;\n}\n\n// Checks if the labelmap config is valid, which means\n// if all the required fields are present and have the correct type\nfunction isValidLabelmapConfig(config): boolean {\n  return (\n    config &&\n    typeof config.renderOutline === 'boolean' &&\n    typeof config.outlineWidthActive === 'number' &&\n    typeof config.outlineWidthInactive === 'number' &&\n    typeof config.renderFill === 'boolean' &&\n    typeof config.renderFillInactive === 'boolean' &&\n    typeof config.fillAlpha === 'number' &&\n    typeof config.fillAlphaInactive === 'number' &&\n    typeof config.outlineOpacity === 'number' &&\n    typeof config.outlineOpacityInactive === 'number'\n  );\n}\n\nexport default getDefaultLabelmapConfig;\nexport { isValidLabelmapConfig };\n","import cloneDeep from 'lodash.clonedeep';\nimport type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport type {\n  RepresentationConfig,\n  Segmentation,\n  SegmentationRepresentationConfig,\n  SegmentationState,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\n\n// Initialize the default configuration\n// Note: when we get other representations, we should set their default representations too.\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\n\nconst newGlobalConfig: SegmentationRepresentationConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig,\n  },\n};\n\n/* A default initial state for the segmentation manager. */\nconst initialDefaultState: SegmentationState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {},\n};\n\n/**\n * The SegmentationStateManager Class is responsible for managing the state of the\n * segmentations. It stores the segmentations and toolGroup specific representations\n * of the segmentation. It also stores a global config and a toolGroup specific\n * config. Note that this is a singleton state manager.\n */\nexport default class SegmentationStateManager {\n  private state: SegmentationState;\n  public readonly uid: string;\n\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n\n  /**\n   * It returns a copy of the current state of the segmentation\n   * @returns A deep copy of the state.\n   */\n  getState(): SegmentationState {\n    return this.state;\n  }\n\n  /**\n   * It returns an array of toolGroupIds currently in the segmentation state.\n   * @returns An array of strings.\n   */\n  getToolGroups(): string[] {\n    return Object.keys(this.state.toolGroups);\n  }\n\n  /**\n   * It returns the colorLUT at the specified index.\n   * @param lutIndex - The index of the color LUT to retrieve.\n   * @returns A ColorLUT object.\n   */\n  getColorLUT(lutIndex: number): Types.ColorLUT | undefined {\n    return this.state.colorLUT[lutIndex];\n  }\n\n  getNextColorLUTIndex(): number {\n    return this.state.colorLUT.length;\n  }\n\n  /**\n   * Reset the state to the default state\n   */\n  resetState(): void {\n    this.state = cloneDeep(initialDefaultState);\n  }\n\n  /**\n   * Given a segmentation Id, return the segmentation state\n   * @param segmentationId - The id of the segmentation to get the data for.\n   * @returns - The segmentation data\n   */\n  getSegmentation(segmentationId: string): Segmentation | undefined {\n    return this.state.segmentations.find(\n      (segmentation) => segmentation.segmentationId === segmentationId\n    );\n  }\n\n  /**\n   * It adds a segmentation to the segmentations array.\n   * @param segmentation - Segmentation\n   */\n  addSegmentation(segmentation: Segmentation): void {\n    // Check if the segmentation already exists with the segmentationId\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(\n        `Segmentation with id ${segmentation.segmentationId} already exists`\n      );\n    }\n\n    this.state.segmentations.push(segmentation);\n  }\n\n  /**\n   * Get the segmentation representations for a tool group\n   * @param toolGroupId - string\n   * @returns A list of segmentation representations.\n   */\n  getSegmentationRepresentations(\n    toolGroupId: string\n  ): ToolGroupSpecificRepresentations | undefined {\n    const toolGroupSegRepresentationsWithConfig =\n      this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n\n  /**\n   * Returns an array of all segmentation representations for all tool groups.\n   * @returns An array of ToolGroupSpecificRepresentations.\n   */\n  getAllSegmentationRepresentations(): Record<\n    string,\n    ToolGroupSpecificRepresentation[]\n  > {\n    const toolGroupSegReps: Record<string, ToolGroupSpecificRepresentation[]> =\n      {};\n    Object.entries(this.state.toolGroups).forEach(\n      ([toolGroupId, toolGroupSegRepresentationsWithConfig]) => {\n        toolGroupSegReps[toolGroupId] =\n          toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n      }\n    );\n    return toolGroupSegReps;\n  }\n\n  /**\n   * Add a new segmentation representation to the toolGroup's segmentation representations.\n   * @param toolGroupId - The Id of the tool group .\n   * @param segmentationRepresentation - The segmentation representation to add.\n   */\n  addSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    // Initialize the default toolGroup state if not created yet\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {} as SegmentationRepresentationConfig,\n      };\n    }\n\n    // local toolGroupSpecificSegmentationState\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(\n      segmentationRepresentation\n    );\n\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n\n  /**\n   * Get the global config containing both representation config\n   * and render inactive segmentations config\n   * @returns The global config object.\n   */\n  getGlobalConfig(): SegmentationRepresentationConfig {\n    return this.state.globalConfig;\n  }\n\n  /**\n   * It sets the global segmentation config including both representation config\n   * and render inactive segmentations config\n   * @param config - The global configuration for the segmentations.\n   */\n  setGlobalConfig(config: SegmentationRepresentationConfig): void {\n    this.state.globalConfig = config;\n  }\n\n  /**\n   * Given a toolGroupId and a segmentationRepresentationUID, return the segmentation\n   * representation for that tool group.\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - string\n   * @returns The segmentation representation.\n   */\n  getSegmentationRepresentationByUID(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): ToolGroupSpecificRepresentation | undefined {\n    const toolGroupSegRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    const segmentationData = toolGroupSegRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    return segmentationData;\n  }\n\n  /**\n   * It removes the segmentation from the segmentation state.\n   * @param segmentationId - The id of the segmentation to remove.\n   */\n  removeSegmentation(segmentationId: string): void {\n    this.state.segmentations = this.state.segmentations.filter(\n      (segmentation) => segmentation.segmentationId !== segmentationId\n    );\n  }\n\n  /**\n   * Remove a segmentation representation from the toolGroup\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - the uid of the segmentation representation to remove\n   * @param immediate - If true, the viewport will be updated immediately.\n   */\n  removeSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      !toolGroupSegmentationRepresentations.length\n    ) {\n      throw new Error(\n        `No viewport specific segmentation state found for viewport ${toolGroupId}`\n      );\n    }\n\n    const state =\n      toolGroupSegmentationRepresentations as ToolGroupSpecificRepresentations;\n    const index = state.findIndex(\n      (segData) =>\n        segData.segmentationRepresentationUID === segmentationRepresentationUID\n    );\n\n    if (index === -1) {\n      console.warn(\n        `No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    const removedSegmentationRepresentation =\n      toolGroupSegmentationRepresentations[index];\n\n    toolGroupSegmentationRepresentations.splice(index, 1);\n\n    this._handleActiveSegmentation(\n      toolGroupId,\n      removedSegmentationRepresentation\n    );\n  }\n\n  /**\n   * Set the active segmentation data for a tool group\n   * @param toolGroupId - The Id of the tool group that owns the\n   * segmentation data.\n   * @param segmentationRepresentationUID - string\n   */\n  setActiveSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(\n        `No segmentation data found for toolGroupId: ${toolGroupId}`\n      );\n    }\n\n    const segmentationData = toolGroupSegmentations.find(\n      (segmentationData) =>\n        segmentationData.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (!segmentationData) {\n      throw new Error(\n        `No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n\n  /**\n   * Given a tool group Id it returns the tool group specific representation config\n   *\n   * @param toolGroupId - The Id of the tool group\n   * @returns A SegmentationConfig object.\n   */\n  getToolGroupSpecificConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig | undefined {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n\n    return toolGroupStateWithConfig.config;\n  }\n\n  getSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: RepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentationRepresentationSpecificConfig =\n      config;\n  }\n\n  getSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    segmentIndex: number\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n\n  setSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: SegmentSpecificRepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentSpecificConfig = config;\n  }\n\n  /**\n   * Set the segmentation representations config for a given tool group. It will create a new\n   * tool group specific config if one does not exist.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation\n   * belongs to.\n   * @param config - SegmentationConfig\n   */\n  setSegmentationRepresentationConfig(\n    toolGroupId: string,\n    config: SegmentationRepresentationConfig\n  ): void {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {},\n        },\n      };\n\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config,\n    };\n  }\n\n  /**\n   * It adds a color LUT to the state.\n   * @param colorLUT - ColorLUT\n   * @param lutIndex - The index of the color LUT table to add.\n   */\n  addColorLUT(colorLUT: Types.ColorLUT, lutIndex: number): void {\n    if (this.state.colorLUT[lutIndex]) {\n      console.warn('Color LUT table already exists, overwriting');\n    }\n\n    this.state.colorLUT[lutIndex] = structuredClone(colorLUT);\n  }\n\n  /**\n   * Removes a color LUT to the state.\n   * @param colorLUTIndex - The index of the color LUT table to remove.\n   */\n  removeColorLUT(colorLUTIndex: number): void {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n\n  /**\n   * It handles the active segmentation representation based on the active status of the\n   * segmentation representation that was added or removed.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation representation belongs to.\n   * @param recentlyAddedOrRemovedSegmentationRepresentation - ToolGroupSpecificSegmentationData\n   */\n  _handleActiveSegmentation(\n    toolGroupId: string,\n    recentlyAddedOrRemovedSegmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    const segmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    // 1. If there is no segmentation representations, return early\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // 2. If there is only one segmentation representation, make that one active\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 3. If removed Segmentation representation was active, make the first one active\n    const activeSegmentationRepresentations =\n      segmentationRepresentations.filter(\n        (representation) => representation.active\n      );\n\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 4. If the added segmentation representation is active, make other segmentation\n    // representations inactive\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach((representation) => {\n        if (\n          representation.segmentationRepresentationUID !==\n          recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID\n        ) {\n          representation.active = false;\n        }\n      });\n    }\n\n    // 5. if added/removed segmentation is is inactive, do nothing\n  }\n}\n\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\n\nimport { Events } from '../../enums';\nimport {\n  getSegmentationRepresentations,\n  getSegmentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport {\n  SegmentationRepresentationModifiedEventDetail,\n  SegmentationDataModifiedEventDetail,\n  SegmentationModifiedEventDetail,\n  SegmentationRepresentationRemovedEventDetail,\n  SegmentationRemovedEventDetail,\n} from '../../types/EventTypes';\n\n/**\n * Trigger an event that a segmentation is removed\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationRemoved(segmentationId: string): void {\n  const eventDetail: SegmentationRemovedEventDetail = {\n    segmentationId,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\n\n/**\n * Trigger an event that a segmentation representation was removed\n * @param toolGroupId - The id of the tool group that the segmentation\n * representation was removed from.\n * @param segmentationRepresentationUID - The UID of the segmentation\n * representation that was removed.\n */\nfunction triggerSegmentationRepresentationRemoved(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const eventDetail: SegmentationRepresentationRemovedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  triggerEvent(\n    eventTarget,\n    Events.SEGMENTATION_REPRESENTATION_REMOVED,\n    eventDetail\n  );\n}\n\n/**\n * Trigger an event on the eventTarget that the segmentation representation for\n * toolGroupId has been updated\n * @param toolGroupId - The Id of the toolGroup\n */\nfunction triggerSegmentationRepresentationModified(\n  toolGroupId: string,\n  segmentationRepresentationUID?: string\n): void {\n  const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  if (segmentationRepresentationUID) {\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n    return;\n  }\n\n  // If no segmentationRepresentationUID is provided, then we need to trigger\n  // the event for all segmentation representations in the toolGroup\n\n  // Get all segmentation representations in the toolGroup\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((segmentationRepresentation) => {\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n    const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n      toolGroupId,\n      segmentationRepresentationUID,\n    };\n\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n  });\n}\n\n/**\n * Triggers segmentation global state updated event, notifying all toolGroups\n * that the global state has been updated, If a segmentationId is provided\n * the event will only be triggered for that segmentation, otherwise it will\n * be triggered for all segmentations.\n *\n * @param segmentationId - The id of the segmentation that has been updated\n */\nfunction triggerSegmentationModified(segmentationId?: string): void {\n  let segmentationIds;\n\n  if (segmentationId) {\n    segmentationIds = [segmentationId];\n  } else {\n    // get all toolGroups\n    segmentationIds = getSegmentations().map(\n      ({ segmentationId }) => segmentationId\n    );\n  }\n\n  // 1. Trigger an event notifying all listeners about the segmentationId\n  // that has been updated.\n  segmentationIds.forEach((segmentationId) => {\n    const eventDetail: SegmentationModifiedEventDetail = {\n      segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n  });\n\n  // Todo: I don't think we need the following lines of code\n  // // 2. Notify all viewports that render the segmentationId in order to update the\n  // // rendering based on the new global state.\n  // toolGroupIds.forEach((toolGroupId) => {\n  //   triggerSegmentationRepresentationModified(toolGroupId)\n  // })\n}\n\n/**\n * Trigger an event that a segmentation data has been modified\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationDataModified(\n  segmentationId: string,\n  modifiedSlicesToUse?: number[]\n): void {\n  const eventDetail: SegmentationDataModifiedEventDetail = {\n    segmentationId,\n    modifiedSlicesToUse,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n\nexport {\n  // ToolGroup Specific\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n  // Global\n  triggerSegmentationDataModified,\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n};\n","import {\n  SegmentationPublicInput,\n  Segmentation,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It takes in a segmentation input and returns a segmentation with default values\n * @param segmentationInput - The input to the segmentation.\n * @returns A Segmentation object.\n * @internal\n */\nfunction normalizeSegmentationInput(\n  segmentationInput: SegmentationPublicInput\n): Segmentation {\n  const { segmentationId, representation } = segmentationInput;\n\n  // Todo: we should be able to let the user pass in non-default values for\n  // cachedStats, label, activeSegmentIndex, etc.\n  return {\n    segmentationId,\n    cachedStats: {},\n    segmentLabels: {},\n    label: null,\n    segmentsLocked: new Set(),\n    type: representation.type,\n    activeSegmentIndex: 1,\n    representationData: {\n      [representation.type]: {\n        ...representation.data,\n      },\n    },\n  };\n}\n\nexport default normalizeSegmentationInput;\n","import type { Types } from '@cornerstonejs/core';\nimport type {\n  RepresentationConfig,\n  Segmentation,\n  SegmentationPublicInput,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport {\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n} from './triggerSegmentationEvents';\n\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\n\n/**\n * It returns the defaultSegmentationStateManager.\n */\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\n\n/*************************\n *\n * Segmentation State\n *\n **************************/\n\n/**\n * Get the segmentation for the given segmentationId\n * @param segmentationId - The Id of the segmentation\n * @returns A GlobalSegmentationData object\n */\nfunction getSegmentation(segmentationId: string): Segmentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\n\n/**\n * Get the segmentations inside the state\n * @returns Segmentation array\n */\nfunction getSegmentations(): Segmentation[] | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n\n  return state.segmentations;\n}\n\n/**\n * It takes a segmentation input and adds it to the segmentation state manager\n * @param segmentationInput - The segmentation to add.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction addSegmentation(\n  segmentationInput: SegmentationPublicInput,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n\n  segmentationStateManager.addSegmentation(segmentation);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\n\n/**\n * Get the segmentation state for a tool group. It will return an array of\n * segmentation representation objects.\n * @param toolGroupId - The unique identifier of the tool group.\n * @returns An array of segmentation representation objects.\n */\nfunction getSegmentationRepresentations(\n  toolGroupId: string\n): ToolGroupSpecificRepresentations | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\n\n/**\n * Get all segmentation representations in the state\n * @returns An array of segmentation representation objects.\n */\nfunction getAllSegmentationRepresentations(): Record<\n  string,\n  ToolGroupSpecificRepresentation[]\n> {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getAllSegmentationRepresentations();\n}\n\n/**\n * Get the tool group IDs that have a segmentation representation with the given\n * segmentationId\n * @param segmentationId - The id of the segmentation\n * @returns An array of tool group IDs.\n */\nfunction getToolGroupIdsWithSegmentation(segmentationId: string): string[] {\n  if (!segmentationId) {\n    throw new Error('getToolGroupIdsWithSegmentation: segmentationId is empty');\n  }\n\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n\n  return foundToolGroupIds;\n}\n\n/**\n * Get the segmentation representations config for a given tool group\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config belongs to.\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Set the segmentation representation config for the provided toolGroup. ToolGroup specific\n * configuration overwrites the global configuration for each representation.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config is being set for.\n * @param config - The new configuration for the tool group.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(\n    toolGroupId,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\n\n/**\n * It sets the segmentation representation specific config for all the segments\n * inside the segmentation.\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @param config  - The new configuration for the segmentation representation it is an object with keys of\n * different representation types, and values of the configuration for each representation type.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the segmentation representation specific config which is the same for all the segments\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @returns - The segmentation representation specific config.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction getSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\nfunction setSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  // Todo: this can be even more performant if we create a new event for\n  // triggering a specific segment config change.\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * Add the given segmentation representation data to the given tool group state. It fires\n * SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation representation is for.\n * @param segmentationData - The data to add to the segmentation state.\n * @param suppressEvents - boolean\n */\nfunction addSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentation\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the global segmentation config. Note that the toolGroup-specific\n * configuration has higher priority than the global configuration and overwrites\n * the global configuration for each representation.\n * @returns The global segmentation configuration for all segmentations.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation configuration. It fires SEGMENTATION_MODIFIED\n * event if not suppressed.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param config - The new global segmentation config.\n * @param suppressEvents - If true, the `segmentationGlobalStateModified` event will not be triggered.\n */\nfunction setGlobalConfig(\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\n\n/**\n * Get the segmentation data object for a given tool group and\n * segmentation data UID. It searches all the toolGroup specific segmentation\n * data objects and returns the first one that matches the UID.\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @returns Segmentation Data object.\n */\nfunction getSegmentationRepresentationByUID(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): ToolGroupSpecificRepresentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * It removes the segmentation from the segmentation state manager\n *\n * @triggers SEGMENTATION_REMOVED\n *\n * @param segmentationId - The id of the segmentation\n */\nfunction removeSegmentation(segmentationId: string): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\n\n/**\n * Remove a segmentation representation from the segmentation state manager for a toolGroup.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_REPRESENTATION_REMOVED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation to remove.\n * remove.\n * @param - immediate - If true, the viewports will be updated immediately.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationRemoved(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction removeColorLUT(colorLUTIndex: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n\n/**\n * Get the color lut for a given index\n * @param index - The index of the color lut to retrieve.\n * @returns A ColorLUT array.\n */\nfunction getColorLUT(index: number): Types.ColorLUT | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\n\nfunction getNextColorLUTIndex(): number {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getNextColorLUTIndex();\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction addColorLUT(colorLUT: Types.ColorLUT, index: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n  // Todo: trigger event color LUT added\n}\n\nexport {\n  getDefaultSegmentationStateManager,\n  // Segmentation\n  getSegmentation,\n  getSegmentations,\n  addSegmentation,\n  removeSegmentation,\n  // ToolGroup specific Segmentation Representation\n  getSegmentationRepresentations,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n  // config\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  getGlobalConfig,\n  setGlobalConfig,\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  getSegmentSpecificRepresentationConfig,\n  setSegmentSpecificRepresentationConfig,\n  // helpers s\n  getToolGroupIdsWithSegmentation,\n  getAllSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n  // color\n  addColorLUT,\n  getColorLUT,\n  getNextColorLUTIndex,\n  removeColorLUT,\n};\n","import {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../../types/LabelmapTypes';\nimport {\n  LabelmapToolOperationData,\n  LabelmapToolOperationDataStack,\n  LabelmapToolOperationDataVolume,\n} from '../../../../types';\n\nfunction isStackSegmentation(\n  operationData: LabelmapToolOperationData | LabelmapSegmentationData\n): operationData is\n  | LabelmapToolOperationDataStack\n  | LabelmapSegmentationDataStack {\n  return (\n    (operationData as LabelmapToolOperationDataStack).imageIdReferenceMap !==\n    undefined\n  );\n}\n\nfunction isVolumeSegmentation(\n  operationData: LabelmapToolOperationData | LabelmapSegmentationData\n): operationData is\n  | LabelmapToolOperationDataVolume\n  | LabelmapSegmentationDataVolume {\n  return (\n    (operationData as LabelmapToolOperationDataVolume)?.volumeId !== undefined\n  );\n}\n\nexport { isStackSegmentation, isVolumeSegmentation };\n","import {\n  getEnabledElement,\n  addVolumesToViewports,\n  addImageSlicesToViewports,\n  Types,\n  Enums,\n} from '@cornerstonejs/core';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n} from '../../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from '../../segmentation/strategies/utils/stackVolumeCheck';\n/**\n * It adds a labelmap segmentation representation of the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that will be rendered.\n * @param volumeId - The volume id of the labelmap.\n * @param segmentationRepresentationUID - The segmentation representation UID.\n *\n * @internal\n */\nasync function addLabelmapToElement(\n  element: HTMLDivElement,\n  labelMapData: LabelmapSegmentationData,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n  const { id: viewportId } = viewport;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const visibility = true;\n  const immediateRender = false;\n  const suppressEvents = true;\n\n  if (isVolumeSegmentation(labelMapData)) {\n    // Todo: Right now we use MIP blend mode for the labelmap, since the\n    // composite blend mode has a non linear behavior regarding fill and line\n    // opacity. This should be changed to a custom labelmap blendMode which does\n    // what composite does, but with a linear behavior.\n    const volumeInputs: Types.IVolumeInput[] = [\n      {\n        volumeId: labelMapData.volumeId,\n        actorUID: segmentationRepresentationUID,\n        visibility,\n        blendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n      },\n    ];\n\n    // Add labelmap volumes to the viewports to be be rendered, but not force the render\n    await addVolumesToViewports(\n      renderingEngine,\n      volumeInputs,\n      [viewportId],\n      immediateRender,\n      suppressEvents\n    );\n  } else {\n    // We can use the current imageId in the viewport to get the segmentation imageId\n    // which later is used to create the actor and mapper.\n    const segmentationImageId = (\n      labelMapData as LabelmapSegmentationDataStack\n    ).imageIdReferenceMap.get(viewport.getCurrentImageId());\n\n    const stackInputs: Types.IStackInput[] = [\n      {\n        imageId: segmentationImageId,\n        actorUID: segmentationRepresentationUID,\n      },\n    ];\n\n    // Add labelmap volumes to the viewports to be be rendered, but not force the render\n    await addImageSlicesToViewports(\n      renderingEngine,\n      stackInputs,\n      [viewportId],\n      immediateRender,\n      suppressEvents\n    );\n  }\n}\n\nexport default addLabelmapToElement;\n","import { StackViewport, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the labelmap segmentation representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the labelmap representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeLabelmapFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  if (viewport instanceof StackViewport) {\n    // Todo: we don't have stack segmentation yet\n    return;\n  }\n\n  (viewport as Types.IVolumeViewport).removeVolumeActors([\n    segmentationRepresentationUID,\n  ]);\n}\n\nexport default removeLabelmapFromElement;\n","import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\n\nimport {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport type {\n  LabelmapConfig,\n  LabelmapRenderingConfig,\n  LabelmapSegmentationData,\n} from '../../../types/LabelmapTypes';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport addLabelmapToElement from './addLabelmapToElement';\n\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { isVolumeSegmentation } from '../../segmentation/strategies/utils/stackVolumeCheck';\n\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\n\nfunction getRepresentationRenderingConfig() {\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n  ofun.addPoint(0, 0);\n  return {\n    ofun,\n    cfun,\n  };\n}\n\n/**\n * For each viewport, and for each segmentation, set the segmentation for the viewport's enabled element\n * Initializes the global and viewport specific state for the segmentation in the\n * SegmentationStateManager.\n * @param toolGroup - the tool group that contains the viewports\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param renderImmediate - If true, there will be a render call after the labelmap is removed\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeLabelmapFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * Checks if a segmentation data have the same frameOfReference as the series\n * displayed in a given viewport\n * @param viewport\n * @param referencedVolumeId volume id of the segmentation reference series\n * @returns\n */\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  // if the referencedVolumeId is not defined, we acted as before to not break\n  // applications as referencedVolumeId is inserted in this change\n  // Can modify that in the future commits\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const { uid: defaultActorUID } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (\n      referencedVolume &&\n      volume.metadata.FrameOfReferenceUID ===\n        referencedVolume.metadata.FrameOfReferenceUID\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * It takes the enabled element, the segmentation Id, and the configuration, and\n * it sets the segmentation for the enabled element as a labelmap\n * @param enabledElement - The cornerstone enabled element\n * @param segmentationId - The id of the segmentation to be rendered.\n * @param configuration - The configuration object for the labelmap.\n */\nasync function render(\n  viewport: Types.IVolumeViewport | Types.IStackViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const labelmapData =\n    segmentation.representationData[Representations.Labelmap];\n\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n  if (isVolumeSegmentation(labelmapData)) {\n    const { volumeId: labelmapUID } = labelmapData;\n\n    const labelmap = cache.getVolume(labelmapUID);\n\n    if (!labelmap) {\n      throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n    }\n\n    if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n      return;\n    }\n\n    if (!actorEntry) {\n      // only add the labelmap to ToolGroup viewports if it is not already added\n      await _addLabelmapToViewport(\n        viewport,\n        labelmapData,\n        segmentationRepresentationUID\n      );\n    }\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  } else {\n    // stack segmentation\n    const imageId = viewport.getCurrentImageId();\n    const { imageIdReferenceMap } = labelmapData;\n\n    // if the stack labelmap is not built for the current imageId that is\n    // rendered at the viewport then return\n    if (!imageIdReferenceMap.has(imageId)) {\n      return;\n    }\n\n    if (!actorEntry) {\n      // only add the labelmap to ToolGroup viewports if it is not already added\n      await _addLabelmapToViewport(\n        viewport,\n        labelmapData,\n        segmentationRepresentationUID\n      );\n    }\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n\n  if (!actorEntry) {\n    return;\n  }\n\n  const { cfun, ofun } = renderingConfig as LabelmapRenderingConfig;\n\n  const renderInactiveSegmentations =\n    toolGroupConfig.renderInactiveSegmentations;\n\n  _setLabelmapColorAndOpacity(\n    viewport.id,\n    actorEntry,\n    cfun,\n    ofun,\n    colorLUTIndex,\n    toolGroupConfig.representations[Representations.Labelmap],\n    representation,\n    active,\n    renderInactiveSegmentations,\n    segmentsHidden\n  );\n}\n\nfunction _setLabelmapColorAndOpacity(\n  viewportId: string,\n  actorEntry: Types.ActorEntry,\n  cfun: vtkColorTransferFunction,\n  ofun: vtkPiecewiseFunction,\n  colorLUTIndex: number,\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  isActiveLabelmap: boolean,\n  renderInactiveSegmentations: boolean,\n  segmentsHidden: Set<number>\n): void {\n  const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } =\n    segmentationRepresentation;\n\n  const segmentationRepresentationLabelmapConfig =\n    segmentationRepresentationSpecificConfig[Representations.Labelmap];\n\n  // Note: MAX_NUMBER_COLORS = 256 is needed because the current method to generate\n  // the default color table uses RGB.\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const { uid: actorUID } = actorEntry;\n\n  // Note: right now outlineWidth and renderOutline are not configurable\n  // at the segment level, so we don't need to check for segment specific\n  // configuration in the loop, Todo: make them configurable at the segment level\n  const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(\n    toolGroupLabelmapConfig,\n    segmentationRepresentationLabelmapConfig,\n    isActiveLabelmap\n  );\n\n  // Todo: the below loop probably can be optimized so that we don't hit it\n  // unless a config has changed. Right now we get into the following loop\n  // even for brush drawing which does not makes sense\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n\n    const segmentSpecificLabelmapConfig =\n      segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n\n    const { fillAlpha, outlineWidth, renderFill, renderOutline } =\n      _getLabelmapConfig(\n        toolGroupLabelmapConfig,\n        segmentationRepresentationLabelmapConfig,\n        isActiveLabelmap,\n        segmentSpecificLabelmapConfig\n      );\n\n    const { forceOpacityUpdate, forceColorUpdate } =\n      _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n        fillAlpha,\n        renderFill,\n        renderOutline,\n        segmentColor,\n        outlineWidth,\n        segmentsHidden,\n      });\n\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(\n        segmentIndex,\n        segmentColor[0] / MAX_NUMBER_COLORS,\n        segmentColor[1] / MAX_NUMBER_COLORS,\n        segmentColor[2] / MAX_NUMBER_COLORS\n      );\n    }\n\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex)\n          ? 0\n          : (segmentColor[3] / 255) * fillAlpha;\n\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n\n  const actor = actorEntry.actor as Types.Actor;\n\n  // @ts-ignore\n  actor.getProperty().setRGBTransferFunction(0, cfun);\n\n  ofun.setClamping(false);\n\n  // @ts-ignore\n  actor.getProperty().setScalarOpacity(0, ofun);\n  // @ts-ignore\n  actor.getProperty().setInterpolationTypeToNearest();\n\n  if (utilities.actorIsA(actorEntry, 'vtkVolume')) {\n    // @ts-ignore\n    actor.getProperty().setUseLabelOutline(renderOutline);\n    // @ts-ignore\n    actor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n    // @ts-ignore\n    actor.getProperty().setLabelOutlineThickness(outlineWidth);\n  }\n\n  // Set visibility based on whether actor visibility is specifically asked\n  // to be turned on/off (on by default) AND whether is is in active but\n  // we are rendering inactive labelmap\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  actor.setVisibility(visible);\n}\n\nfunction _getLabelmapConfig(\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentationLabelmapConfig: LabelmapConfig,\n  isActiveLabelmap: boolean,\n  segmentsLabelmapConfig?: LabelmapConfig\n) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig,\n  };\n\n  const fillAlpha = isActiveLabelmap\n    ? configToUse.fillAlpha\n    : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap\n    ? configToUse.outlineWidthActive\n    : configToUse.outlineWidthInactive;\n\n  const renderFill = isActiveLabelmap\n    ? configToUse.renderFill\n    : configToUse.renderFillInactive;\n\n  const renderOutline = configToUse.renderOutline;\n\n  const outlineOpacity = isActiveLabelmap\n    ? configToUse.outlineOpacity\n    : configToUse.outlineOpacityInactive;\n\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity,\n  };\n}\n\nfunction _needsTransferFunctionUpdate(\n  viewportId: string,\n  actorUID: string,\n  segmentIndex: number,\n  {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    segmentColor,\n    outlineWidth,\n    segmentsHidden,\n  }: {\n    fillAlpha: number;\n    renderFill: boolean;\n    renderOutline: boolean;\n    outlineWidth: number;\n    segmentColor: number[];\n    segmentsHidden: Set<number>;\n  }\n) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor: segmentColor.slice(), // Create a copy\n      segmentsHidden: new Set(segmentsHidden), // Create a copy\n    });\n\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true,\n    };\n  }\n\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden,\n  } = oldConfig;\n\n  const forceColorUpdate =\n    oldSegmentColor[0] !== segmentColor[0] ||\n    oldSegmentColor[1] !== segmentColor[1] ||\n    oldSegmentColor[2] !== segmentColor[2];\n\n  const forceOpacityUpdate =\n    oldSegmentColor[3] !== segmentColor[3] ||\n    oldFillAlpha !== fillAlpha ||\n    oldRenderFill !== renderFill ||\n    oldRenderOutline !== renderOutline ||\n    oldOutlineWidth !== outlineWidth ||\n    oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n\n  // update the cache\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(), // Create a copy\n    segmentsHidden: new Set(segmentsHidden), // Create a copy\n  });\n\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate,\n  };\n}\n\nfunction _removeLabelmapFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeLabelmapFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nasync function _addLabelmapToViewport(\n  viewport: Types.IVolumeViewport | Types.IStackViewport,\n  labelmapData: LabelmapSegmentationData,\n  segmentationRepresentationUID\n): Promise<void> {\n  await addLabelmapToElement(\n    viewport.element,\n    labelmapData,\n    segmentationRepresentationUID\n  );\n}\n\nexport default {\n  getRepresentationRenderingConfig,\n  render,\n  removeSegmentationRepresentation,\n};\n\nexport {\n  getRepresentationRenderingConfig,\n  render,\n  removeSegmentationRepresentation,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { ToolGroupSpecificContourRepresentation } from '../../../types';\n\n/**\n * If the segment specific config exists for the given segment id, it returns\n * the segment specific config. Otherwise, it looks for the segment specific\n * config for the given index. If it doesn't exist, it returns null.\n *\n * @param contourRepresentation -  The representation object that is passed\n * to the tool.\n * @param segmentId -  The id of the segment.\n * @param index -  The index of the segment in the list of segments.\n * @returns the segment specific config for the given segment id.\n *\n */\nexport function getSegmentSpecificConfig(\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  segmentId: string,\n  index: number\n) {\n  let segmentSpecificConfig =\n    contourRepresentation.segmentSpecificConfig?.[segmentId];\n\n  if (!segmentSpecificConfig) {\n    // try the index\n    segmentSpecificConfig =\n      contourRepresentation.segmentSpecificConfig?.[index];\n  }\n\n  if (!segmentSpecificConfig) {\n    return null;\n  }\n\n  return segmentSpecificConfig.CONTOUR;\n}\n\n/**\n * takes a geometry object as an argument\n * and throws an error if the geometry object is not a contour\n * @param geometry -  The geometry object to be rendered.\n */\nexport function validateGeometry(geometry: Types.IGeometry): void {\n  if (!geometry) {\n    throw new Error(`No contours found for geometryId ${geometry.id}`);\n  }\n\n  const geometryId = geometry.id;\n\n  if (geometry.type !== Enums.GeometryType.CONTOUR) {\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No contours found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n}\n\n/**\n * It takes a contourSet and returns a vtkPolyData for that contourSet. A contour set\n * is a collection of contours. Each contour is a collection of points. Each point\n * is x,y,z in the world coordinate system.\n *\n * @param contourSet -  the contour set that you want to convert to polyData\n * @returns A vtkPolyData object\n */\nexport function getPolyData(contourSet: Types.IContourSet) {\n  const pointArray = [];\n\n  const points = vtkPoints.newInstance();\n  const lines = vtkCellArray.newInstance();\n\n  // this variable will indicate the index of the first point in the current line\n  // so we can correctly generate the point index list to add in the cellArray\n  let pointIndex = 0;\n  contourSet.getContours().forEach((contour: Types.IContour) => {\n    const pointList = contour.getPoints();\n    const flatPoints = contour.getFlatPointsArray();\n    const type = contour.getType();\n\n    // creating a point index list that defines a line\n    const pointIndexes = pointList.map(\n      (_, pointListIndex) => pointListIndex + pointIndex\n    );\n\n    // if close planar, add the first point index to the list\n    if (type === Enums.ContourType.CLOSED_PLANAR) {\n      pointIndexes.push(pointIndexes[0]);\n    }\n\n    const linePoints = Float32Array.from(flatPoints);\n    // add the current points into the point list\n    pointArray.push(...linePoints);\n    // add the point indexes into the cell array\n    lines.insertNextCell([...pointIndexes]);\n    // update the first point index\n    pointIndex = pointIndex + pointList.length;\n  });\n\n  // converts the pointArray into vtkPoints\n  points.setData(pointArray, 3);\n\n  // creates the polyData\n  const polygon = vtkPolyData.newInstance();\n  polygon.setPoints(points);\n  polygon.setLines(lines);\n\n  return polygon;\n}\n","type ConfigCache = {\n  segmentsHidden: Set<number>;\n  outlineWidthActive: number;\n  visibility: boolean;\n};\n\n/**\n * Config cache is used to store the config for a given segmentation\n * representation. This is used to avoid having to recompute the config\n * every time the user changes the active segment, and also for performance\n * reasons.\n */\nconst configCachePerSegmentationRepresentationUID = new Map();\n\nexport function getConfigCache(\n  segmentationRepresentationUID: string\n): ConfigCache {\n  return configCachePerSegmentationRepresentationUID.get(\n    segmentationRepresentationUID\n  );\n}\n\nexport function setConfigCache(\n  segmentationRepresentationUID: string,\n  config: ConfigCache\n) {\n  configCachePerSegmentationRepresentationUID.set(\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport function deleteConfigCache(segmentationRepresentationUID: string) {\n  configCachePerSegmentationRepresentationUID.delete(\n    segmentationRepresentationUID\n  );\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkAppendPolyData from '@kitware/vtk.js/Filters/General/AppendPolyData';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n\nimport {\n  getPolyData,\n  getSegmentSpecificConfig,\n  validateGeometry,\n} from './utils';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\n\nexport function addContourSetsToElement(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const appendPolyData = vtkAppendPolyData.newInstance();\n\n  const scalarToColorMap = new Map();\n  const segmentSpecificMap = new Map();\n\n  geometryIds.forEach((geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n\n    if (!geometry) {\n      console.warn(\n        `No geometry found for geometryId ${geometryId}. Skipping render.`\n      );\n      return;\n    }\n\n    const segmentIndex = (geometry.data as Types.IContourSet).getSegmentIndex();\n\n    validateGeometry(geometry);\n\n    const segmentSpecificConfig = getSegmentSpecificConfig(\n      contourRepresentation,\n      geometryId,\n      segmentIndex\n    );\n\n    const contourSet = geometry.data;\n    const polyData = getPolyData(contourSet as Types.IContourSet);\n    const color = contourSet.getColor();\n\n    const size = polyData.getPoints().getNumberOfPoints();\n\n    const scalars = vtkDataArray.newInstance({\n      size: size * 4,\n      numberOfComponents: 4,\n      dataType: 'Uint8Array',\n    });\n    for (let i = 0; i < size; ++i) {\n      scalars.setTuple(i, [...color, 255]);\n    }\n    polyData.getPointData().setScalars(scalars);\n\n    if (segmentSpecificConfig) {\n      segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);\n    }\n\n    scalarToColorMap.set(segmentIndex, [\n      ...color,\n      segmentsHidden.has(segmentIndex) ? 0 : 255,\n    ]);\n\n    segmentIndex === 0\n      ? appendPolyData.setInputData(polyData)\n      : appendPolyData.addInputData(polyData);\n  });\n\n  const polyDataOutput = appendPolyData.getOutputData();\n\n  const outlineWidthActive =\n    contourRepresentationConfig.representations.CONTOUR.outlineWidthActive;\n\n  const mapper = vtkMapper.newInstance();\n  mapper.setInputData(polyDataOutput);\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n  actor.getProperty().setLineWidth(outlineWidthActive);\n\n  // set the config cache for later update of the contour\n  setConfigCache(\n    segmentationRepresentationUID,\n    Object.assign({}, getConfigCache(segmentationRepresentationUID), {\n      segmentsHidden: new Set(segmentsHidden),\n      segmentSpecificMap,\n      outlineWidthActive,\n    })\n  );\n\n  actor.setForceOpaque(true);\n\n  viewport.addActor({\n    uid: contourActorUID,\n    actor: actor as unknown as Types.Actor,\n  });\n  viewport.resetCamera();\n  viewport.render();\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\nimport { getSegmentSpecificConfig } from './utils';\n\nexport function updateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const newContourConfig = contourRepresentationConfig.representations.CONTOUR;\n  const cachedConfig = getConfigCache(segmentationRepresentationUID);\n\n  const contourSetsActor = viewport.getActor(contourActorUID);\n\n  if (!contourSetsActor) {\n    console.warn(\n      `No contour actor found for actorUID ${contourActorUID}. Skipping render.`\n    );\n    return;\n  }\n\n  const { actor } = contourSetsActor;\n\n  const newOutlineWithActive = newContourConfig.outlineWidthActive;\n\n  if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {\n    (actor as unknown as vtkActor)\n      .getProperty()\n      .setLineWidth(newOutlineWithActive);\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        outlineWidthActive: newOutlineWithActive,\n      })\n    );\n  }\n\n  const mapper = (actor as unknown as vtkActor).getMapper();\n  const lut = mapper.getLookupTable();\n\n  const segmentsToSetToInvisible = [];\n  const segmentsToSetToVisible = [];\n\n  for (const segmentIndex of segmentsHidden) {\n    if (!cachedConfig.segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToInvisible.push(segmentIndex);\n    }\n  }\n\n  // the other way around\n  for (const segmentIndex of cachedConfig.segmentsHidden) {\n    if (!segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToVisible.push(segmentIndex);\n    }\n  }\n\n  const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden)\n    .filter((segmentIndex) => !segmentsToSetToVisible.includes(segmentIndex))\n    .concat(segmentsToSetToInvisible);\n\n  const { contourSets, segmentSpecificConfigs } = geometryIds.reduce(\n    (acc, geometryId) => {\n      const geometry = cache.getGeometry(geometryId);\n      const { data: contourSet } = geometry;\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const segmentSpecificConfig = getSegmentSpecificConfig(\n        contourRepresentation,\n        geometryId,\n        segmentIndex\n      );\n\n      acc.contourSets.push(contourSet);\n      acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};\n\n      return acc;\n    },\n    { contourSets: [], segmentSpecificConfigs: {} }\n  );\n\n  const affectedSegments = [\n    ...mergedInvisibleSegments,\n    ...segmentsToSetToVisible,\n  ];\n\n  const hasCustomSegmentSpecificConfig = Object.values(\n    segmentSpecificConfigs\n  ).some((config) => Object.keys(config).length > 0);\n\n  let polyDataModified = false;\n\n  if (affectedSegments.length || hasCustomSegmentSpecificConfig) {\n    const appendPolyData = mapper.getInputData();\n    const appendScalars = appendPolyData.getPointData().getScalars();\n    const appendScalarsData = appendScalars.getData();\n    // below we will only manipulate the polyData of the contourSets that are affected\n    // by picking the correct offset in the scalarData array\n    let offset = 0;\n    contourSets.forEach((contourSet) => {\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const size = contourSet.getTotalNumberOfPoints();\n\n      if (\n        affectedSegments.includes(segmentIndex) ||\n        segmentSpecificConfigs[segmentIndex]?.fillAlpha // Todo: add others\n      ) {\n        const color = contourSet.getColor();\n        let visibility = mergedInvisibleSegments.includes(segmentIndex)\n          ? 0\n          : 255;\n\n        const segmentConfig = segmentSpecificConfigs[segmentIndex];\n        if (segmentConfig.fillAlpha !== undefined) {\n          visibility = segmentConfig.fillAlpha * 255;\n        }\n\n        for (let i = 0; i < size; ++i) {\n          appendScalarsData[offset + i * 4] = color[0];\n          appendScalarsData[offset + i * 4 + 1] = color[1];\n          appendScalarsData[offset + i * 4 + 2] = color[2];\n          appendScalarsData[offset + i * 4 + 3] = visibility;\n        }\n\n        polyDataModified = true;\n      }\n\n      offset = offset + size * 4;\n    });\n\n    if (polyDataModified) {\n      appendPolyData.modified();\n    }\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        segmentsHidden: new Set(segmentsHidden),\n      })\n    );\n\n    mapper.setLookupTable(lut);\n  }\n\n  viewport.render();\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the contour representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the contour representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.includes(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","import {\n  getEnabledElementByIds,\n  Types,\n  StackViewport,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\nimport { addOrUpdateContourSets } from './addOrUpdateContourSets';\nimport removeContourFromElement from './removeContourFromElement';\nimport { deleteConfigCache } from './contourConfigCache';\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeContourFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  deleteConfigCache(segmentationRepresentationUID);\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the contour sets for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representationConfig: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const { segmentationId } = representationConfig;\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const contourData = segmentation.representationData[Representations.Contour];\n  const { geometryIds } = contourData;\n\n  // We don't have a good way to handle stack viewports for contours at the moment.\n  // Plus, if we add a segmentation to one viewport, it gets added to all the viewports in the toolGroup too.\n  if (viewport instanceof StackViewport) {\n    return;\n  }\n\n  if (!geometryIds?.length) {\n    console.warn(\n      `No contours found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  // add the contour sets to the viewport\n  addOrUpdateContourSets(\n    viewport,\n    geometryIds,\n    representationConfig,\n    toolGroupConfig\n  );\n}\n\nfunction _removeContourFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeContourFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  removeSegmentationRepresentation,\n};\n","import { Types } from '@cornerstonejs/core';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { addContourSetsToElement } from './addContourSetsToElement';\nimport { updateContourSets } from './updateContourSets';\n\nexport function addOrUpdateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig\n) {\n  const { segmentationRepresentationUID } = contourRepresentation;\n  const actorUID = `CONTOUR_${segmentationRepresentationUID}`;\n  const actor = viewport.getActor(actorUID);\n\n  const addOrUpdateFn = actor ? updateContourSets : addContourSetsToElement;\n  addOrUpdateFn(\n    viewport,\n    geometryIds,\n    contourRepresentation,\n    contourRepresentationConfig,\n    actorUID\n  );\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\nimport {\n  getSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n} from './segmentationState';\n\n/**\n * Remove the segmentation representation (representation) from the viewports of the toolGroup.\n * @param toolGroupId - The Id of the toolGroup to remove the segmentation from.\n * @param segmentationRepresentationUIDs - The UIDs of the segmentation representations to remove.\n * @param immediate - if True the viewport will be re-rendered immediately.\n */\nfunction removeSegmentationsFromToolGroup(\n  toolGroupId: string,\n  segmentationRepresentationUIDs?: string[] | undefined,\n  immediate?: boolean\n): void {\n  const toolGroupSegRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (\n    !toolGroupSegRepresentations ||\n    toolGroupSegRepresentations.length === 0\n  ) {\n    return;\n  }\n\n  const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map(\n    (representation) => representation.segmentationRepresentationUID\n  );\n\n  let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;\n  if (segRepresentationUIDsToRemove) {\n    // make sure the segmentationDataUIDs that are going to be removed belong\n    // to the toolGroup\n    const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter(\n      (segRepresentationUID) =>\n        !toolGroupSegRepresentationUIDs.includes(segRepresentationUID)\n    );\n\n    if (invalidSegRepresentationUIDs.length > 0) {\n      throw new Error(\n        `The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(\n          invalidSegRepresentationUIDs\n        )}`\n      );\n    }\n  } else {\n    // remove all segmentation representations\n    segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;\n  }\n\n  segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {\n    _removeSegmentation(toolGroupId, segmentationDataUID, immediate);\n  });\n}\n\nfunction _removeSegmentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  immediate?: boolean\n): void {\n  const segmentationRepresentation = getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  const { type } = segmentationRepresentation;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    labelmapDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else if (type === SegmentationRepresentations.Contour) {\n    contourDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else {\n    throw new Error(`The representation ${type} is not supported yet`);\n  }\n}\n\nexport default removeSegmentationsFromToolGroup;\n","import { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport { cache } from '@cornerstonejs/core';\nimport type {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataVolume,\n} from '../../../types/LabelmapTypes';\n\nfunction validate(segmentationInput: SegmentationPublicInput): void {\n  if (!segmentationInput.representation.data) {\n    throw new Error(\n      'The segmentationInput.representationData.data is undefined, please provide a valid representationData.data'\n    );\n  }\n\n  const representationData = segmentationInput.representation\n    .data as LabelmapSegmentationData;\n\n  if ('volumeId' in representationData) {\n    // volumetric labelmap\n    const cachedVolume = cache.getVolume(\n      (representationData as LabelmapSegmentationDataVolume).volumeId\n    );\n\n    if (!cachedVolume) {\n      throw new Error(\n        `volumeId of ${\n          (representationData as LabelmapSegmentationDataVolume).volumeId\n        } not found in cache, you should load and cache volume before adding segmentation`\n      );\n    }\n  } else {\n    // I don't think we need this check since there is no guarantee that the stack is cached.\n  }\n}\n\nexport default validate;\n","import * as Enums from '../../../enums';\nimport { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport validateLabelmap from '../../../tools/displayTools/Labelmap/validateRepresentationData';\n\n/**\n * Checks if the segmentationInputArray is valid meaning it contains\n * correct representationProps for the representation type that is being used.\n *\n * @param segmentationInputArray - Array of segmentation inputs\n * @internal\n */\nfunction validateSegmentationInput(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  if (!segmentationInputArray || !segmentationInputArray.length) {\n    throw new Error('The segmentationInputArray is undefined or empty array');\n  }\n\n  segmentationInputArray.forEach((segmentationInput) => {\n    if (segmentationInput.segmentationId === undefined) {\n      throw new Error(\n        'The segmentationInput.segmentationId is undefined, please provide a valid segmentationId'\n      );\n    }\n\n    if (segmentationInput.representation === undefined) {\n      throw new Error(\n        'The segmentationInput.representation is undefined, please provide a valid representation'\n      );\n    }\n\n    if (\n      segmentationInput.representation.type ===\n      Enums.SegmentationRepresentations.Labelmap\n    ) {\n      validateLabelmap(segmentationInput);\n    }\n  });\n}\n\nexport default validateSegmentationInput;\n","import _cloneDeep from 'lodash.clonedeep';\nimport { SegmentationPublicInput } from '../../types/SegmentationStateTypes';\nimport { validateSegmentationInput } from './helpers';\nimport { addSegmentation as addSegmentationToState } from './segmentationState';\n/**\n * Adds the segmentation to the cornerstone3D segmentation state. It should be\n * noted that segmentations are not added to any toolGroup's viewports. In order to\n * do so, you should add a \"representation\" of the segmentation to the toolGroup\n * using addSegmentationRepresentations helper. The reason for this is that there\n * can be multiple representations of the same segmentation (e.g. Labelmap and\n * Contour, etc. - Currently only Labelmap representations is supported).\n * @param segmentationInputArray - The array of segmentation input, each of which\n * defining the segmentationId and the main representation data for the segmentation.\n */\nfunction addSegmentations(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  validateSegmentationInput(segmentationInputArray);\n\n  segmentationInputArray.map((segInput) => {\n    const segmentationInput = _cloneDeep(segInput);\n\n    addSegmentationToState(segmentationInput);\n  });\n}\n\nexport default addSegmentations;\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\n\nimport {\n  RepresentationConfig,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It returns the global segmentation config.\n * @returns The global segmentation config containing the representations\n * config for each representation type and renderInactiveSegmentations flag.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  return SegmentationState.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation config\n * @param segmentationConfig - SegmentationConfig\n */\nfunction setGlobalConfig(\n  segmentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setGlobalConfig(segmentationConfig);\n}\n\n/**\n * Given a representation type, return the corresponding global representation config\n * @param representationType - The type of representation to query\n * @returns A representation configuration object.\n */\nfunction getGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations\n): RepresentationConfig['LABELMAP'] {\n  const globalConfig = getGlobalConfig();\n  return globalConfig.representations[representationType];\n}\n\n/**\n * Set the global configuration for a given representation type. It fires\n * a SEGMENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param representationType - The type of representation to set config for\n * @param config - The configuration for the representation.\n */\nfunction setGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations,\n  config: RepresentationConfig['LABELMAP']\n): void {\n  const globalConfig = getGlobalConfig();\n\n  setGlobalConfig({\n    ...globalConfig,\n    representations: {\n      ...globalConfig.representations,\n      [representationType]: {\n        ...globalConfig.representations[representationType],\n        ...config,\n      },\n    },\n  });\n}\n\n/**\n * Get the toolGroup specific segmentation config\n * @param toolGroupId - The Id of the tool group\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  return SegmentationState.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Sets the tool group specific configuration for the segmentation\n * representation. This will apply to all segmentation representations.\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationConfig - This is the configuration object that you will use to set the default values for\n * the segmentation representation.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setToolGroupSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationConfig\n  );\n}\n\n/**\n * Give the segmentation representation UID, return the corresponding config\n * which is shared by all segments in the segmentation representation. This is\n * an optional level of configuration that can be set by the user, by default\n * it will fallback to the toolGroup specific config, if not set, it will fallback\n * to the global config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n * @returns - The configuration for the representation.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  return SegmentationState.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Set the segmentation representation specific configuration for the\n * segmentation representation. This will apply to all segments in the\n * segmentation representation and has higher priority than the toolGroup\n * specific config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig\n): void {\n  SegmentationState.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\n/**\n * Get the segment specific configuration for the segmentation representation.\n *\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID  - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @returns - The configuration for the segment index in the segmentation representation that is shown in the toolGroup's viewport\n */\nfunction getSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  return SegmentationState.getSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\n/**\n * Set the segment specific configuration for the segmentation representation.\n * This configuration, if specified, has higher priority than the segmentation representation specific config,\n * and the toolGroup specific config. The order of priority is: segment specific config > segmentation representation specific config > toolGroup specific config > global config\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @param config - The configuration for the representation. This is an object\n */\nfunction setSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig\n): void {\n  SegmentationState.setSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport {\n  // Global\n  getGlobalConfig,\n  setGlobalConfig,\n  getGlobalRepresentationConfig,\n  setGlobalRepresentationConfig,\n  // ToolGroup Specific\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  // segmentation representation specific config\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  // segment specific config\n  getSegmentSpecificConfig,\n  setSegmentSpecificConfig,\n};\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { RepresentationPublicInput } from '../../../types';\nimport { getRepresentationRenderingConfig as getLabelmapRenderingConfig } from '../../../tools/displayTools/Labelmap/labelmapDisplay';\n\nexport function getRepresentationSpecificConfig(\n  representationInput: RepresentationPublicInput\n) {\n  const { type } = representationInput;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    return getLabelmapRenderingConfig();\n  } else {\n    return {};\n  }\n}\n","/**\n * Cornerstone Color LUT used for Segmentations\n */\nconst CORNERSTONE_COLOR_LUT = [\n  [0, 0, 0, 0],\n  [221, 84, 84, 255],\n  [77, 228, 121, 255],\n  [166, 70, 235, 255],\n  [189, 180, 116, 255],\n  [109, 182, 196, 255],\n  [204, 101, 157, 255],\n  [123, 211, 94, 255],\n  [93, 87, 218, 255],\n  [225, 128, 80, 255],\n  [73, 232, 172, 255],\n  [181, 119, 186, 255],\n  [176, 193, 112, 255],\n  [105, 153, 200, 255],\n  [208, 97, 120, 255],\n  [90, 215, 101, 255],\n  [135, 83, 222, 255],\n  [229, 178, 76, 255],\n  [122, 183, 181, 255],\n  [190, 115, 171, 255],\n  [149, 197, 108, 255],\n  [100, 118, 205, 255],\n  [212, 108, 93, 255],\n  [86, 219, 141, 255],\n  [183, 79, 226, 255],\n  [233, 233, 72, 255],\n  [118, 167, 187, 255],\n  [194, 111, 146, 255],\n  [116, 201, 104, 255],\n  [115, 96, 209, 255],\n  [216, 147, 89, 255],\n  [82, 223, 188, 255],\n  [230, 75, 224, 255],\n  [163, 184, 121, 255],\n  [114, 143, 191, 255],\n  [198, 107, 114, 255],\n  [99, 206, 122, 255],\n  [153, 92, 213, 255],\n  [220, 192, 85, 255],\n  [78, 215, 227, 255],\n  [234, 71, 173, 255],\n  [141, 188, 117, 255],\n  [110, 113, 195, 255],\n  [202, 128, 103, 255],\n  [95, 210, 157, 255],\n  [195, 88, 217, 255],\n  [206, 224, 81, 255],\n  [74, 166, 231, 255],\n  [185, 120, 139, 255],\n  [113, 192, 113, 255],\n  [133, 106, 199, 255],\n  [207, 162, 98, 255],\n  [91, 214, 198, 255],\n  [221, 84, 198, 255],\n  [159, 228, 77, 255],\n  [70, 111, 235, 255],\n  [189, 119, 116, 255],\n  [109, 196, 138, 255],\n  [165, 101, 204, 255],\n  [211, 201, 94, 255],\n  [87, 191, 218, 255],\n  [225, 80, 153, 255],\n  [106, 232, 73, 255],\n  [124, 119, 186, 255],\n  [193, 142, 112, 255],\n  [105, 200, 168, 255],\n  [203, 97, 208, 255],\n  [184, 215, 90, 255],\n  [83, 147, 222, 255],\n  [229, 76, 101, 255],\n  [122, 183, 130, 255],\n  [146, 115, 190, 255],\n  [197, 171, 108, 255],\n  [100, 205, 205, 255],\n  [212, 93, 177, 255],\n  [141, 219, 86, 255],\n  [79, 97, 226, 255],\n  [233, 99, 72, 255],\n  [118, 187, 150, 255],\n  [173, 111, 194, 255],\n  [197, 201, 104, 255],\n  [96, 171, 209, 255],\n  [216, 89, 137, 255],\n  [94, 223, 82, 255],\n  [107, 75, 230, 255],\n  [184, 153, 121, 255],\n  [114, 191, 175, 255],\n  [198, 107, 191, 255],\n  [166, 206, 99, 255],\n  [92, 132, 213, 255],\n  [220, 85, 91, 255],\n  [78, 227, 115, 255],\n  [159, 71, 234, 255],\n  [188, 176, 117, 255],\n  [110, 185, 195, 255],\n  [202, 103, 161, 255],\n  [129, 210, 95, 255],\n  [88, 88, 217, 255],\n  [224, 123, 81, 255],\n  [74, 231, 166, 255],\n  [177, 120, 185, 255],\n  [179, 192, 113, 255],\n  [106, 156, 199, 255],\n  [207, 98, 125, 255],\n  [91, 214, 96, 255],\n  [130, 84, 221, 255],\n  [228, 171, 77, 255],\n  [70, 235, 221, 255],\n  [189, 116, 174, 255],\n  [153, 196, 109, 255],\n  [101, 123, 204, 255],\n  [211, 104, 94, 255],\n  [87, 218, 136, 255],\n  [177, 80, 225, 255],\n  [232, 225, 73, 255],\n  [119, 169, 186, 255],\n  [193, 112, 149, 255],\n  [121, 200, 105, 255],\n  [111, 97, 208, 255],\n  [215, 142, 90, 255],\n  [83, 222, 181, 255],\n  [229, 76, 229, 255],\n  [165, 183, 122, 255],\n  [115, 146, 190, 255],\n  [197, 108, 119, 255],\n  [100, 205, 118, 255],\n  [148, 93, 212, 255],\n  [219, 186, 86, 255],\n  [79, 220, 226, 255],\n  [233, 72, 179, 255],\n  [144, 187, 118, 255],\n  [111, 118, 194, 255],\n  [201, 124, 104, 255],\n  [96, 209, 153, 255],\n  [189, 89, 216, 255],\n  [211, 223, 82, 255],\n  [75, 172, 230, 255],\n  [184, 121, 142, 255],\n  [117, 191, 114, 255],\n  [130, 107, 198, 255],\n  [206, 157, 99, 255],\n  [92, 213, 193, 255],\n  [220, 85, 203, 255],\n  [165, 227, 78, 255],\n  [71, 118, 234, 255],\n  [188, 117, 117, 255],\n  [110, 195, 135, 255],\n  [161, 103, 202, 255],\n  [210, 195, 95, 255],\n  [88, 195, 217, 255],\n  [224, 81, 158, 255],\n  [113, 231, 74, 255],\n  [123, 120, 185, 255],\n  [192, 139, 113, 255],\n  [106, 199, 164, 255],\n  [198, 98, 207, 255],\n  [188, 214, 91, 255],\n  [84, 153, 221, 255],\n  [228, 77, 108, 255],\n  [70, 235, 84, 255],\n  [143, 116, 189, 255],\n  [196, 167, 109, 255],\n  [101, 204, 199, 255],\n  [211, 94, 182, 255],\n  [147, 218, 87, 255],\n  [80, 104, 225, 255],\n  [232, 93, 73, 255],\n  [119, 186, 147, 255],\n  [170, 112, 193, 255],\n  [200, 200, 105, 255],\n  [97, 175, 208, 255],\n  [215, 90, 142, 255],\n  [100, 222, 83, 255],\n  [101, 76, 229, 255],\n  [183, 150, 122, 255],\n  [115, 190, 171, 255],\n  [197, 108, 194, 255],\n  [170, 205, 100, 255],\n  [93, 138, 212, 255],\n  [219, 86, 97, 255],\n  [79, 226, 110, 255],\n  [153, 72, 233, 255],\n  [187, 173, 118, 255],\n  [111, 187, 194, 255],\n  [201, 104, 165, 255],\n  [134, 209, 96, 255],\n  [89, 95, 216, 255],\n  [223, 117, 82, 255],\n  [75, 230, 159, 255],\n  [174, 121, 184, 255],\n  [182, 191, 114, 255],\n  [107, 160, 198, 255],\n  [206, 99, 130, 255],\n  [92, 213, 92, 255],\n  [124, 85, 220, 255],\n  [227, 165, 78, 255],\n  [71, 234, 214, 255],\n  [188, 117, 176, 255],\n  [156, 195, 110, 255],\n  [103, 128, 202, 255],\n  [210, 100, 95, 255],\n  [88, 217, 131, 255],\n  [170, 81, 224, 255],\n  [231, 218, 74, 255],\n  [120, 172, 185, 255],\n  [192, 113, 153, 255],\n  [125, 199, 106, 255],\n  [107, 98, 207, 255],\n  [214, 137, 91, 255],\n  [84, 221, 175, 255],\n  [222, 77, 228, 255],\n  [194, 235, 70, 255],\n  [116, 149, 189, 255],\n  [196, 109, 123, 255],\n  [101, 204, 114, 255],\n  [143, 94, 211, 255],\n  [218, 180, 87, 255],\n  [80, 225, 225, 255],\n  [232, 73, 186, 255],\n  [147, 186, 119, 255],\n  [112, 122, 193, 255],\n  [200, 121, 105, 255],\n  [97, 208, 148, 255],\n  [184, 90, 215, 255],\n  [216, 222, 83, 255],\n  [76, 178, 229, 255],\n  [183, 122, 145, 255],\n  [121, 190, 115, 255],\n  [126, 108, 197, 255],\n  [205, 153, 100, 255],\n  [93, 212, 187, 255],\n  [219, 86, 208, 255],\n  [171, 226, 79, 255],\n  [72, 126, 233, 255],\n  [187, 118, 121, 255],\n  [111, 194, 132, 255],\n  [157, 104, 201, 255],\n  [209, 190, 96, 255],\n  [89, 200, 216, 255],\n  [223, 82, 164, 255],\n  [120, 230, 75, 255],\n  [121, 121, 184, 255],\n  [191, 136, 114, 255],\n  [107, 198, 160, 255],\n  [192, 99, 206, 255],\n  [193, 213, 92, 255],\n  [85, 158, 220, 255],\n  [227, 78, 115, 255],\n  [71, 234, 78, 255],\n  [141, 117, 188, 255],\n  [195, 163, 110, 255],\n  [103, 202, 194, 255],\n  [210, 95, 186, 255],\n  [153, 217, 88, 255],\n  [81, 111, 224, 255],\n];\n\nexport default CORNERSTONE_COLOR_LUT;\n","import {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n} from '../../types/SegmentationStateTypes';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\nimport { addSegmentationRepresentation } from './addSegmentationRepresentation';\n\n/**\n * Set the specified segmentation representations on the viewports of the specified\n * toolGroup. It accepts a second argument which is a toolGroup specific representation\n * configuration.\n *\n * @param toolGroupId - The Id of the toolGroup to add the segmentation representations to\n * @param representationInputArray - An array of segmentation representations to add to the toolGroup\n * @param toolGroupSpecificRepresentationConfig - The toolGroup specific configuration\n * for the segmentation representations\n */\nasync function addSegmentationRepresentations(\n  toolGroupId: string,\n  representationInputArray: RepresentationPublicInput[],\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string[]> {\n  // Check if there exists a toolGroup with the toolGroupId\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (!toolGroup) {\n    throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);\n  }\n\n  const promises = representationInputArray.map((representationInput) => {\n    return addSegmentationRepresentation(\n      toolGroupId,\n      representationInput,\n      toolGroupSpecificRepresentationConfig\n    );\n  });\n\n  const segmentationRepresentationUIDs = await Promise.all(promises);\n\n  return segmentationRepresentationUIDs;\n}\n\nexport default addSegmentationRepresentations;\n","import { utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n  ToolGroupSpecificRepresentation,\n} from '../../types/SegmentationStateTypes';\nimport * as SegmentationConfig from './config/segmentationConfig';\nimport {\n  addSegmentationRepresentation as addSegmentationRepresentationToState,\n  getNextColorLUTIndex,\n  addColorLUT,\n} from './segmentationState';\nimport { getRepresentationSpecificConfig } from './helpers/getRepresentationSpecificConfig';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\n\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId, options = {} } = representationInput;\n  const segmentationRepresentationUID = utilities.uuidv4();\n\n  // Todo: make segmentsHidden also an option that can get passed by\n  // the user\n  const segmentsHidden = new Set() as Set<number>;\n\n  const colorLUTOrIndexInput = options.colorLUTOrIndex;\n  let colorLUTIndexToUse;\n\n  if (typeof colorLUTOrIndexInput === 'number') {\n    colorLUTIndexToUse = colorLUTOrIndexInput;\n  } else {\n    const nextIndex = getNextColorLUTIndex();\n    const colorLUTToAdd = Array.isArray(colorLUTOrIndexInput)\n      ? colorLUTOrIndexInput\n      : CORNERSTONE_COLOR_LUT;\n    addColorLUT(colorLUTToAdd as Types.ColorLUT, nextIndex);\n    colorLUTIndexToUse = nextIndex;\n  }\n\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: representationInput.type,\n    segmentsHidden,\n    colorLUTIndex: colorLUTIndexToUse,\n    active: true,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: getRepresentationSpecificConfig(representationInput),\n  };\n\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n\n  addSegmentationRepresentationToState(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n\n  return segmentationRepresentationUID;\n}\n\nexport { addSegmentationRepresentation };\n","import { ToolGroupSpecificRepresentation } from '../../types/SegmentationStateTypes';\nimport { getDefaultSegmentationStateManager } from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the active segmentation representation for the tool group with\n * the given toolGroupId.\n * @param toolGroupId - The Id of the tool group\n * @returns The active segmentation representation for the tool group.\n */\nfunction getActiveSegmentationRepresentation(\n  toolGroupId: string\n): ToolGroupSpecificRepresentation {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const toolGroupSegmentationRepresentations =\n    segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const activeRepresentation = toolGroupSegmentationRepresentations.find(\n    (representation) => representation.active\n  );\n\n  return activeRepresentation;\n}\n\n/**\n * Set the active segmentation for the given tool group for all its viewports\n *\n * @param toolGroupId - The Id of the tool group to set the active\n * segmentation for.\n * @param segmentationRepresentationUID - The id of the segmentation representation to set as\n * active.\n */\nfunction setActiveSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  segmentationStateManager.setActiveSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  // get\n  getActiveSegmentationRepresentation,\n  // set\n  setActiveSegmentationRepresentation,\n};\n","import { getActiveSegmentationRepresentation } from './activeSegmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the locked status for a segment index in a segmentation\n * @param segmentationId - The id of the segmentation that the segment\n * belongs to.\n * @param segmentIndex - The index of the segment\n * @returns A boolean value indicating whether the segment is locked or not.\n */\nfunction isSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number\n): boolean {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return segmentsLocked.has(segmentIndex);\n}\n\n/**\n * Set the locked status of a segment index in a segmentation\n * @param segmentationId - The id of the segmentation whose segment\n * index is being modified.\n * @param segmentIndex - The index of the segment to lock/unlock.\n */\nfunction setSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number,\n  locked = true\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n\n  if (locked) {\n    segmentsLocked.add(segmentIndex);\n  } else {\n    segmentsLocked.delete(segmentIndex);\n  }\n\n  triggerSegmentationModified(segmentationId);\n}\n\n/**\n * Get the locked segments for a segmentation\n * @param segmentationId - The id of the segmentation to get locked\n * segments for.\n * @returns An array of locked segment indices.\n */\nfunction getLockedSegments(segmentationId: string): number[] | [] {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return Array.from(segmentsLocked);\n}\n\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n","import { utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\n\n/**\n * addColorLUT - Adds a new color LUT to the state at the given colorLUTIndex.\n * If no colorLUT is provided, a new color LUT is generated.\n *\n * @param colorLUTIndex - the index of the colorLUT in the state\n * @param colorLUT - An array of The colorLUT to set.\n * @returns\n */\nfunction addColorLUT(colorLUT: Types.ColorLUT, colorLUTIndex: number): void {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n\n  // Append the \"zero\" (no label) color to the front of the LUT, if necessary.\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn(\n      'addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it'\n    );\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\n\n/**\n * It sets the toolGroup's segmentationRepresentation to use the provided\n * colorLUT at the given colorLUTIndex.\n * @param toolGroupId - the id of the toolGroup that renders the representation\n * @param segmentationRepresentationUID - the representationUID for the segmentation\n * @param colorLUTIndex - the index of the colorLUT to use\n */\nfunction setColorLUT(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  colorLUTIndex: number\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    throw new Error(\n      `setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`\n    );\n  }\n\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(\n      `setColorLUT: could not find colorLUT with index ${colorLUTIndex}`\n    );\n  }\n\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Given a tool group UID, a segmentation representationUID, and a segment index, return the\n * color for that segment. It can be used for segmentation tools that need to\n * display the color of their annotation.\n *\n * @param toolGroupId - The Id of the tool group that owns the segmentation representation.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment in the segmentation\n * @returns A color.\n */\nfunction getColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): Types.Color {\n  const segmentationRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segmentationRepresentation) {\n    throw new Error(\n      `segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`\n    );\n  }\n\n  const { colorLUTIndex } = segmentationRepresentation;\n\n  // get colorLUT\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  let colorValue = colorLUT[segmentIndex];\n  if (!colorValue) {\n    if (typeof segmentIndex !== 'number') {\n      throw new Error(`Can't create colour for LUT index ${segmentIndex}`);\n    }\n    colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n  }\n  return colorValue;\n}\n\nfunction setColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  color: Types.Color\n): void {\n  // Get the reference to the color in the colorLUT.\n  const colorReference = getColorForSegmentIndex(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n\n  // Modify the values by reference\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  getColorForSegmentIndex,\n  addColorLUT,\n  setColorLUT,\n  setColorForSegmentIndex,\n};\n","import { cache, Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/segmentationState';\nimport { ToolGroupSpecificRepresentation } from '../../../types/SegmentationStateTypes';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../types/LabelmapTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\n\nfunction getSegmentationIndices(segmentationId) {\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n\n  const findUniqueElements = (array, keySets) => {\n    for (let i = 0; i < array.length; i++) {\n      keySets[array[i]] = true;\n    }\n  };\n\n  if (segmentation.type === SegmentationRepresentations.Labelmap) {\n    const keySets = {};\n\n    if (\n      (\n        segmentation.representationData\n          .LABELMAP as LabelmapSegmentationDataVolume\n      ).volumeId\n    ) {\n      const volume = cache.getVolume(segmentationId);\n      findUniqueElements(volume.getScalarData(), keySets);\n    } else {\n      const { imageIdReferenceMap } = segmentation.representationData\n        .LABELMAP as LabelmapSegmentationDataStack;\n\n      imageIdReferenceMap.forEach((segImageId) => {\n        const image = cache.getImage(segImageId);\n        findUniqueElements(image.getPixelData(), keySets);\n      });\n    }\n\n    return Object.keys(keySets)\n      .map((k) => parseInt(k, 10))\n      .filter((k) => k !== 0);\n  } else if (segmentation.type === SegmentationRepresentations.Contour) {\n    const geometryIds = segmentation.representationData.CONTOUR?.geometryIds;\n\n    if (!geometryIds) {\n      throw new Error(\n        `No geometryIds found for segmentationId ${segmentationId}`\n      );\n    }\n\n    return geometryIds.map((geometryId) => {\n      const geometry = cache.getGeometry(geometryId) as Types.IGeometry;\n      return (geometry.data as Types.IContourSet).getSegmentIndex();\n    });\n  }\n}\n\n/**\n * Set the visibility of a segmentation representation for a given tool group. It fires\n * a SEGMENTATION_REPRESENTATION_MODIFIED event. Visibility true will show all segments\n * and visibility false will hide all segments\"\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param visibility - boolean\n */\nfunction setSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  visibility: boolean\n): void {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n\n  const indices = getSegmentationIndices(segmentationId);\n\n  // if visibility is set to be true, we need to remove all the segments\n  // from the segmentsHidden set, otherwise we need to add all the segments\n  // to the segmentsHidden set\n  if (visibility) {\n    segmentsHidden.clear();\n  } else {\n    indices.forEach((index) => {\n      segmentsHidden.add(index);\n    });\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    representation.segmentationRepresentationUID\n  );\n}\n\n/**\n * Get the visibility of a segmentation data for a given tool group.\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The id of the segmentation data to get\n * @returns A boolean value that indicates whether the segmentation data is visible or\n * not on the toolGroup\n */\nfunction getSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): boolean | undefined {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden } = representation;\n\n  return segmentsHidden.size === 0;\n}\n\n/**\n * Set the visibility of the given segment indices to the given visibility. This\n * is a helper to set the visibility of multiple segments at once and reduces\n * the number of events fired.\n *\n * @param toolGroupId -  The tool group id of the segmentation representation.\n * @param segmentationRepresentationUID -  The UID of the segmentation\n * representation.\n * @param segmentIndices -  The indices of the segments to be hidden/shown.\n * @param visibility -  The visibility to set the segments to.\n *\n */\nfunction setSegmentsVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndices: number[],\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  segmentIndices.forEach((segmentIndex) => {\n    visibility\n      ? segRepresentation.segmentsHidden.delete(segmentIndex)\n      : segRepresentation.segmentsHidden.add(segmentIndex);\n  });\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction setSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  visibility\n    ? segRepresentation.segmentsHidden.delete(segmentIndex)\n    : segRepresentation.segmentsHidden.add(segmentIndex);\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  setSegmentationVisibility,\n  getSegmentationVisibility,\n  setSegmentVisibility,\n  setSegmentsVisibility,\n};\n","import { getSegmentation } from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Set the active segment index for a segmentation Id. It fires a global state\n * modified event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param segmentationId - The id of the segmentation that the segment belongs to.\n * @param segmentIndex - The index of the segment to be activated.\n */\nfunction setActiveSegmentIndex(\n  segmentationId: string,\n  segmentIndex: number\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation?.activeSegmentIndex !== segmentIndex) {\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    triggerSegmentationModified(segmentationId);\n  }\n}\n\n/**\n * Get the active segment index for a segmentation in the global state\n * @param segmentationId - The id of the segmentation to get the active segment index from.\n * @returns The active segment index for the given segmentation.\n */\nfunction getActiveSegmentIndex(segmentationId: string): number | undefined {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation) {\n    return segmentation.activeSegmentIndex;\n  }\n}\n\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n","import {\n  StackViewport,\n  utilities,\n  BaseVolumeViewport,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport { Types } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nimport StrategyCallbacks from '../../enums/StrategyCallbacks';\nimport { InteractionTypes, ToolProps, PublicToolProps } from '../../types';\n\nexport interface IBaseTool {\n  /** ToolGroup ID the tool instance belongs to */\n  toolGroupId: string;\n  /** Tool supported interaction types */\n  supportedInteractionTypes: InteractionTypes[];\n  /** Tool Mode : Active, Passive, Enabled, Disabled */\n  mode: ToolModes;\n  /** Tool Configuration */\n  configuration: {\n    preventHandleOutsideImage?: boolean;\n    strategies?: Record<string, any>;\n    defaultStrategy?: string;\n    activeStrategy?: string;\n    strategyOptions?: Record<string, unknown>;\n  };\n}\n\n/**\n * Abstract base class from which all tools derive.\n * Deals with cleanly merging custom and default configuration, and strategy\n * application.\n */\nabstract class BaseTool implements IBaseTool {\n  static toolName;\n  /** Supported Interaction Types - currently only Mouse */\n  public supportedInteractionTypes: InteractionTypes[];\n  public configuration: Record<string, any>;\n  /** ToolGroup ID the tool instance belongs to */\n  public toolGroupId: string;\n  /** Tool Mode - Active/Passive/Enabled/Disabled/ */\n  public mode: ToolModes;\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId,\n    } = initialProps;\n\n    // If strategies are not initialized in the tool config\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n\n  /**\n   * Returns the name of the tool\n   * @returns The name of the tool.\n   */\n  public getToolName(): string {\n    // Since toolName is static we get it from the class constructor\n    return (<typeof BaseTool>this.constructor).toolName;\n  }\n\n  /**\n   * Applies the active strategy function to the enabled element with the specified\n   * operation data.\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategy(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy]?.call(\n      this,\n      enabledElement,\n      operationData\n    );\n  }\n\n  /**\n   * Applies the active strategy, with a given event type being applied.\n   * The event type function is found by indexing it on the active strategy\n   * function.\n   *\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @param callbackType - the type of the callback\n   *\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategyCallback(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown,\n    callbackType: StrategyCallbacks | string\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy][callbackType]?.call(\n      this,\n      enabledElement,\n      operationData\n    );\n  }\n\n  /**\n   * merges the new configuration with the tool configuration\n   * @param configuration - toolConfiguration\n   */\n  public setConfiguration(newConfiguration: Record<string, any>): void {\n    this.configuration = utilities.deepMerge(\n      this.configuration,\n      newConfiguration\n    );\n  }\n\n  /**\n   * Sets the active strategy for a tool. Strategies are\n   * multiple implementations of tool behavior that can be switched by tool\n   * configuration.\n   *\n   * @param strategyName - name of the strategy to be set as active\n   */\n  public setActiveStrategy(strategyName: string): void {\n    this.setConfiguration({ activeStrategy: strategyName });\n  }\n\n  /**\n   * Returns the volumeId for the volume viewport. It will grabbed the volumeId\n   * from the volumeId if particularly specified in the tool configuration, or if\n   * not, the first actorUID in the viewport is returned as the volumeId. NOTE: for\n   * segmentations, actorUID is not necessarily the volumeId since the segmentation\n   * can have multiple representations, use segmentation helpers to get the volumeId\n   * based on the actorUID.\n   *\n   * @param viewport - Volume viewport\n   * @returns the volumeId for the viewport if specified in the tool configuration,\n   * or the first actorUID in the viewport if not.\n   */\n  private getTargetVolumeId(viewport: Types.IViewport): string | undefined {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n\n    // If volume not specified, then return the actorUID for the\n    // default actor - first actor\n    const actorEntries = viewport.getActors();\n\n    if (!actorEntries) {\n      return;\n    }\n\n    // find the first image actor of instance type vtkVolume\n    return actorEntries.find(\n      (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'\n    )?.uid;\n  }\n\n  /**\n   * Get the image that is displayed for the targetId in the cachedStats\n   * which can be\n   * * imageId:<imageId>\n   * * volumeId:<volumeId>\n   * * videoId:<basePathForVideo>/frames/<frameSpecifier>\n   *\n   * @param targetId - annotation targetId stored in the cached stats\n   * @param renderingEngine - The rendering engine\n   * @returns The image data for the target.\n   */\n  protected getTargetIdImage(\n    targetId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): Types.IImageData | Types.CPUIImageData | Types.IImageVolume {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      viewports = viewports.filter((viewport) => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const viewports = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('videoId:')) {\n      // Video id can be multi-valued for the frame information\n      const imageURI = utilities.imageIdToURI(targetId);\n      const viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else {\n      throw new Error(\n        'getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"'\n      );\n    }\n  }\n\n  /**\n   * Get the target Id for the viewport which will be used to store the cached\n   * statistics scoped to that target in the annotations.\n   * For StackViewport, targetId is the viewportId, but for the volume viewport,\n   * the targetId will be grabbed from the volumeId if particularly specified\n   * in the tool configuration, or if not, the first actorUID in the viewport.\n   *\n   * @param viewport - viewport to get the targetId for\n   * @returns targetId\n   */\n  protected getTargetId(viewport: Types.IViewport): string | undefined {\n    if (viewport instanceof StackViewport) {\n      return `imageId:${viewport.getCurrentImageId()}`;\n    } else if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    } else if (viewport instanceof VideoViewport) {\n      return `videoId:${viewport.getCurrentImageId()}`;\n    } else {\n      throw new Error(\n        'getTargetId: viewport must be a StackViewport or VolumeViewport'\n      );\n    }\n  }\n}\n\n// Note: this is a workaround since terser plugin does not support static blocks\n// yet and we can't easily say static toolName = \"BaseTool\" in the class definition.\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { state } from '../store';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\n/**\n * Returns the SVG drawing helper for the given HTML element.\n * @param element - The HTML element to get the SVG drawing helper for.\n * @private\n */\nfunction getSvgDrawingHelper(element: HTMLDivElement): SVGDrawingHelper {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId, renderingEngineId } = enabledElement;\n  const canvasHash = `${viewportId}:${renderingEngineId}`;\n  const svgLayerElement = _getSvgLayer(element);\n\n  // Reset touched\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    state.svgNodeCache[canvasHash][cacheKey].touched = false;\n  });\n\n  return {\n    svgLayerElement: svgLayerElement,\n    svgNodeCacheForCanvas: state.svgNodeCache,\n    getSvgNode: getSvgNode.bind(this, canvasHash),\n    appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n    setNodeTouched: setNodeTouched.bind(this, canvasHash),\n    clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n  };\n}\n\n/**\n *\n * @param element\n * @private\n */\nfunction _getSvgLayer(element) {\n  const viewportElement = `.${VIEWPORT_ELEMENT}`;\n  const internalDivElement = element.querySelector(viewportElement);\n\n  // Using :scope to make sure the right svg layer is selected otherwise it\n  // may select one from a nested viewport (eg: AdvancedMagnifyTool).\n  const svgLayer = internalDivElement.querySelector(':scope > .svg-layer');\n\n  return svgLayer;\n}\n\nfunction getSvgNode(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    return state.svgNodeCache[canvasHash][cacheKey].domRef;\n  }\n}\n\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return null;\n  }\n\n  state.svgNodeCache[canvasHash][cacheKey] = {\n    touched: true,\n    domRef: svgNode,\n  };\n\n  svgLayerElement.appendChild(svgNode);\n}\n\nfunction setNodeTouched(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    state.svgNodeCache[canvasHash][cacheKey].touched = true;\n  }\n}\n\nfunction clearUntouched(svgLayerElement, canvasHash) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n\n    if (!cacheEntry.touched && cacheEntry.domRef) {\n      svgLayerElement.removeChild(cacheEntry.domRef);\n      delete state.svgNodeCache[canvasHash][cacheKey];\n    }\n  });\n}\n\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\n\nfunction draw(\n  element: HTMLDivElement,\n  fn: (svgDrawingElement: any) => any\n): void {\n  const svgDrawingHelper = getSvgDrawingHelper(element);\n\n  // Save...\n  fn(svgDrawingHelper);\n  // Restore...\n\n  svgDrawingHelper.clearUntouched();\n}\n\nexport default draw;\n","function _getHash(\n  annotationUID: string,\n  drawingElementType: string,\n  nodeUID: string\n): string {\n  return `${annotationUID}::${drawingElementType}::${nodeUID}`;\n}\n\nexport default _getHash;\n","export function setAttributesIfNecessary(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const currentValue = svgNode.getAttribute(key);\n    const newValue = attributes[key];\n    if (newValue === undefined || newValue === '') {\n      svgNode.removeAttribute(key);\n    } else if (currentValue !== newValue) {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const newValue = attributes[key];\n    if (newValue !== undefined && newValue !== '') {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setNewAttributesIfValid;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\n\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawCircle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  circleUID: string,\n  center: Types.Point2,\n  radius: number,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    fill,\n    width,\n    lineWidth,\n    lineDash,\n    fillOpacity,\n    strokeOpacity,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      fill: 'transparent',\n      width: '2',\n      lineDash: undefined,\n      lineWidth: undefined,\n      strokeOpacity: 1,\n      fillOpacity: 1,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    r: `${radius}`,\n    stroke: color,\n    fill,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n    'fill-opacity': fillOpacity, // setting fill opacity\n    'stroke-opacity': strokeOpacity, // setting stroke opacity\n  };\n\n  if (existingCircleElement) {\n    setAttributesIfNecessary(attributes, existingCircleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newCircleElement = document.createElementNS(svgns, 'circle');\n\n    if (dataId !== '') {\n      newCircleElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newCircleElement);\n\n    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n  }\n}\n\nexport default drawCircle;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawEllipseByCoordinates(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  canvasCoordinates: [Types.Point2, Types.Point2, Types.Point2, Types.Point2],\n  options = {},\n  dataId = ''\n): void {\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const [bottom, top, left, right] = canvasCoordinates;\n\n  const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n  const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n  const angle =\n    (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n\n  const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n  const radiusX = w / 2;\n  const radiusY = h / 2;\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    rx: `${radiusX}`,\n    ry: `${radiusY}`,\n    stroke: color,\n    fill: 'transparent',\n    transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingEllipse) {\n    setAttributesIfNecessary(attributes, existingEllipse);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n\n    if (dataId !== '') {\n      svgEllipseElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgEllipseElement);\n\n    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n  }\n}\n\nexport default drawEllipseByCoordinates;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport drawEllipseByCoordinates from './drawEllipseByCoordinates';\n\nfunction drawEllipse(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  corner1: Types.Point2,\n  corner2: Types.Point2,\n  options = {},\n  dataId = ''\n) {\n  const top: Types.Point2 = [(corner1[0] + corner2[0]) / 2, corner1[1]];\n  const bottom: Types.Point2 = [(corner1[0] + corner2[0]) / 2, corner2[1]];\n  const left: Types.Point2 = [corner1[0], (corner1[1] + corner2[1]) / 2];\n  const right: Types.Point2 = [corner2[0], (corner1[1] + corner2[1]) / 2];\n\n  drawEllipseByCoordinates(\n    svgDrawingHelper,\n    annotationUID,\n    ellipseUID,\n    [bottom, top, left, right],\n    (options = {}),\n    (dataId = '')\n  );\n}\n\nexport default drawEllipse;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawHandle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handle: Types.Point2,\n  options = {},\n  uniqueIndex\n): void {\n  const { color, handleRadius, width, lineWidth, fill, type, opacity } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(\n    annotationUID,\n    'handle',\n    `hg-${handleGroupUID}-index-${uniqueIndex}`\n  );\n\n  let attributes;\n  if (type === 'circle') {\n    attributes = {\n      cx: `${handle[0]}`,\n      cy: `${handle[1]}`,\n      r: handleRadius,\n      stroke: color,\n      fill,\n      'stroke-width': strokeWidth,\n      opacity: opacity,\n    };\n  } else if (type === 'rect') {\n    const handleRadiusFloat = parseFloat(handleRadius);\n    const side = handleRadiusFloat * 1.5;\n    const x = handle[0] - side * 0.5;\n    const y = handle[1] - side * 0.5;\n\n    attributes = {\n      x: `${x}`,\n      y: `${y}`,\n      width: `${side}`,\n      height: `${side}`,\n      stroke: color,\n      fill,\n      'stroke-width': strokeWidth,\n      rx: `${side * 0.1}`,\n      opacity: opacity,\n    };\n  } else {\n    throw new Error(`Unsupported handle type: ${type}`);\n  }\n\n  const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  if (existingHandleElement) {\n    setAttributesIfNecessary(attributes, existingHandleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newHandleElement = document.createElementNS(svgns, type);\n\n    setNewAttributesIfValid(attributes, newHandleElement);\n\n    svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n  }\n}\n\nexport default drawHandle;\n","import type { Types } from '@cornerstonejs/core';\n\nimport { SVGDrawingHelper } from '../types';\nimport drawHandle from './drawHandle';\n\nfunction drawHandles(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handlePoints: Array<Types.Point2>,\n  options = {}\n): void {\n  handlePoints.forEach((handle, i) => {\n    drawHandle(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      handle,\n      options,\n      i\n    );\n  });\n}\n\nexport default drawHandles;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nexport default function drawLine(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  lineUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash, shadow } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      shadow: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n  const dropShadowStyle = shadow\n    ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n    : '';\n\n  const attributes = {\n    x1: `${start[0]}`,\n    y1: `${start[1]}`,\n    x2: `${end[0]}`,\n    y2: `${end[1]}`,\n    stroke: color,\n    style: dropShadowStyle,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newLine = document.createElementNS(svgns, 'line');\n\n    if (dataId !== '') {\n      newLine.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newLine);\n\n    svgDrawingHelper.appendNode(newLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG polyline with the given points.\n *\n * The `connectLastToFirst` option, if true, draws a closed polyline, with the\n * last point connected to the first.\n */\nexport default function drawPolyline(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  polylineUID: string,\n  points: Types.Point2[],\n  options: {\n    color?: string;\n    fillColor?: string;\n    fillOpacity?: number;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    connectLastToFirst?: boolean;\n  }\n): void {\n  if (points.length < 2) {\n    return;\n  }\n\n  const { fillColor, fillOpacity, color, width, lineWidth, lineDash } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        width: '2',\n        fillColor: 'none',\n        fillOpacity: 0,\n        lineWidth: undefined,\n        lineDash: undefined,\n        connectLastToFirst: false,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  let pointsAttribute = '';\n\n  for (const point of points) {\n    pointsAttribute += `${point[0]}, ${point[1]} `;\n  }\n\n  if (options.connectLastToFirst) {\n    const firstPoint = points[0];\n\n    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n  }\n\n  const attributes = {\n    points: pointsAttribute,\n    stroke: color,\n    fill: fillColor,\n    'fill-opacity': fillOpacity,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingPolyLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingPolyLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newPolyLine = document.createElementNS(svgns, 'polyline');\n\n    setNewAttributesIfValid(attributes, newPolyLine);\n\n    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\n\n/**\n * Draws a textBox.\n *\n * @param textLines - The text to display.\n * @param position - The x/y position of the textbox\n * @param options - Options for the textBox.\n * @returns Bounding box; can be used for isPointNearTool\n */\nfunction drawTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string>,\n  position: Types.Point2,\n  options = {}\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontSize: '14px',\n      color: 'rgb(255, 255, 0)',\n      background: '',\n      padding: 25,\n      centerX: false,\n      centerY: true,\n    },\n    options\n  );\n\n  // Draw each of the text lines on top of the background box\n  const textGroupBoundingBox = _drawTextGroup(\n    svgDrawingHelper,\n    annotationUID,\n    textUID,\n    textLines,\n    position,\n    mergedOptions\n  );\n\n  return textGroupBoundingBox;\n}\n\nfunction _drawTextGroup(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string> = [''],\n  position: Types.Point2,\n  options: any\n): SVGRect {\n  const { padding, color, fontFamily, fontSize, background } = options;\n\n  let textGroupBoundingBox;\n  const [x, y] = [position[0] + padding, position[1] + padding];\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  // Todo: right now textBox gets a re-render even if the textBox has not changed\n  // and evenIf the attributes are not set again since they are the same.\n  if (existingTextGroup) {\n    // TODO: Iterate each node and update color? font-size?\n    const textElement = existingTextGroup.querySelector('text');\n    const textSpans = Array.from(textElement.children) as Array<SVGElement>;\n\n    for (let i = 0; i < textSpans.length; i++) {\n      const textSpanElement = textSpans[i];\n      const text = textLines[i] || '';\n\n      textSpanElement.textContent = text;\n    }\n\n    // if the textLines have changed size, we need to create textSpans for them\n    if (textLines.length > textSpans.length) {\n      for (let i = 0; i < textLines.length - textSpans.length; i++) {\n        const textLine = textLines[i + textSpans.length];\n        const textSpan = _createTextSpan(textLine);\n\n        textElement.appendChild(textSpan);\n      }\n\n      existingTextGroup.appendChild(textElement);\n      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n    }\n\n    const textAttributes = {\n      fill: color,\n      'font-size': fontSize,\n      'font-family': fontFamily,\n    };\n\n    const textGroupAttributes = {\n      transform: `translate(${x} ${y})`,\n    };\n\n    // Todo: for some reason this does not work to not re-render the textBox\n    setAttributesIfNecessary(textAttributes, textElement);\n    setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n\n    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const textGroup = document.createElementNS(svgns, 'g');\n\n    textGroup.setAttribute('transform', `translate(${x} ${y})`);\n\n    //\n    const textElement = _createTextElement(svgDrawingHelper, options);\n    for (let i = 0; i < textLines.length; i++) {\n      const textLine = textLines[i];\n      const textSpan = _createTextSpan(textLine);\n\n      textElement.appendChild(textSpan);\n    }\n\n    textGroup.appendChild(textElement);\n    svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n    textGroupBoundingBox = _drawTextBackground(textGroup, background);\n  }\n\n  // We translate the group using `position`\n  // which means we also need to pluck those values when returning\n  // the bounding box\n  return Object.assign({}, textGroupBoundingBox, {\n    x,\n    y,\n    height: textGroupBoundingBox.height + padding,\n    width: textGroupBoundingBox.width + padding,\n  });\n}\n\nfunction _createTextElement(\n  svgDrawingHelper: SVGDrawingHelper,\n  options: any\n): SVGElement {\n  const { color, fontFamily, fontSize } = options;\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textElement = document.createElementNS(svgns, 'text');\n  const noSelectStyle =\n    'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n\n  // font-size=\"100\"\n  textElement.setAttribute('x', '0');\n  textElement.setAttribute('y', '0');\n  textElement.setAttribute('fill', color);\n  textElement.setAttribute('font-family', fontFamily);\n  textElement.setAttribute('font-size', fontSize);\n  textElement.setAttribute('style', combinedStyle);\n\n  return textElement;\n}\n\nfunction _createTextSpan(text): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textSpanElement = document.createElementNS(svgns, 'tspan');\n\n  // TODO: centerX\n  // (parent width / 2) - my width\n  // TODO: centerY\n\n  textSpanElement.setAttribute('x', '0');\n  textSpanElement.setAttribute('dy', '1.2em');\n  textSpanElement.textContent = text;\n\n  return textSpanElement;\n}\n\nfunction _drawTextBackground(group: SVGGElement, color: string) {\n  let element = group.querySelector('rect.background');\n\n  // If we have no background color, remove any element that exists and return\n  // the bounding box of the text\n  if (!color) {\n    if (element) {\n      group.removeChild(element);\n    }\n\n    return group.getBBox();\n  }\n\n  // Otherwise, check if we have a <rect> element. If not, create one\n  if (!element) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    element.setAttribute('class', 'background');\n    group.insertBefore(element, group.firstChild);\n  }\n\n  // Get the text groups's bounding box and use it to draw the background rectangle\n  const bBox = group.getBBox();\n\n  const attributes = {\n    x: `${bBox.x}`,\n    y: `${bBox.y}`,\n    width: `${bBox.width}`,\n    height: `${bBox.height}`,\n    fill: color,\n  };\n\n  setAttributesIfNecessary(attributes, element);\n\n  return bBox;\n}\n\nexport default drawTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Find the closest point to the target point\n *\n * @param sourcePoints - The potential source points.\n * @param targetPoint - The target point, used to find the closest source.\n * @returns The closest point in the array of point sources\n */\nexport default function findClosestPoint(\n  sourcePoints: Array<Types.Point2>,\n  targetPoint: Types.Point2\n): Types.Point2 {\n  let minPoint = [0, 0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n\n  sourcePoints.forEach(function (sourcePoint) {\n    const distance = _distanceBetween(targetPoint, sourcePoint);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPoint = [...sourcePoint];\n    }\n  });\n\n  return minPoint as Types.Point2;\n}\n\n/**\n *\n * @private\n * @param p1\n * @param p2\n */\nfunction _distanceBetween(p1: Types.Point2, p2: Types.Point2): number {\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nimport { PlanarBoundingBox, SVGDrawingHelper } from '../types';\n\n/**\n * Draw a link between an annotation to a box.\n */\nfunction drawLink(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  linkUID: string,\n  // Find closest point to approx. bounding box\n  annotationAnchorPoints: Array<Types.Point2>,\n  refPoint: Types.Point2,\n  // Find bounding box point that's closest to our identified\n  // start point\n  boundingBox: PlanarBoundingBox,\n  options = {}\n): void {\n  // The closest anchor point (for the annotation) to the\n  // text box / bounding box\n  const start =\n    annotationAnchorPoints.length > 0\n      ? findClosestPoint(annotationAnchorPoints, refPoint)\n      : refPoint;\n\n  // Calculate the midpoints of the bounding box\n  const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n  // Find the closest textBox midpoint to the annotation's anchor/start point\n  const end = findClosestPoint(boundingBoxPoints, start);\n\n  // Finally we draw the dashed linking line\n  const mergedOptions = Object.assign(\n    {\n      color: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '2,3',\n    },\n    options\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    `link-${linkUID}`,\n    start,\n    end,\n    mergedOptions\n  );\n}\n\n/**\n * Find potential anchor points for a given bounding box. For example, it may\n * look nicer to draw a line from the \"middle left\" of a bounding box to an\n * annotation (instead of from a corner). This function calculates those points\n *\n * @param boundingBox\n */\nfunction _boundingBoxPoints(\n  boundingBox: PlanarBoundingBox\n): Array<Types.Point2> {\n  const { x: left, y: top, height, width } = boundingBox;\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n\n  const topMiddle = [left + halfWidth, top] as Types.Point2;\n  const leftMiddle = [left, top + halfHeight] as Types.Point2;\n  const bottomMiddle = [left + halfWidth, top + height] as Types.Point2;\n  const rightMiddle = [left + width, top + halfHeight] as Types.Point2;\n\n  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\n\nexport default drawLink;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawLinkedTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textBoxUID: string,\n  //\n  textLines: Array<string>,\n  textBoxPosition: Types.Point2,\n  annotationAnchorPoints: Array<Types.Point2>,\n  textBox: unknown,\n  options = {}\n  // TODO: yCenter as an option\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      handleRadius: '6',\n      centering: {\n        x: false,\n        y: true, // yCenter,\n      },\n    },\n    options\n  );\n\n  // Draw the text box\n  const canvasBoundingBox = drawTextBox(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    textLines,\n    textBoxPosition,\n    mergedOptions\n  );\n  // if (textBox.hasMoved) {\n  //   // Draw dashed link line between tool and text\n  drawLink(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    annotationAnchorPoints, // annotationAnchorPoints\n    textBoxPosition, // refPoint (text)\n    canvasBoundingBox, // textBoxBoundingBox\n    mergedOptions\n  );\n  // }\n\n  // const { top, left, width, height } = canvasBoundingBox\n\n  // textBox.worldBoundingBox = {\n  //   topLeft: canvasToWorld([left, top]),\n  //   topRight: canvasToWorld([left + width, top]),\n  //   bottomLeft: canvasToWorld([left, top + height]),\n  //   bottomRight: canvasToWorld([left + width, top + height]),\n  // }\n\n  return canvasBoundingBox;\n}\n\nexport default drawLinkedTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport { SVGDrawingHelper } from '../types';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRect(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  rectangleUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    if (dataId !== '') {\n      svgRectElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\nimport drawLine from './drawLine';\n\nexport default function drawArrow(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  arrowUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {}\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // The line itself\n  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n    color,\n    width,\n    lineWidth,\n    lineDash,\n  });\n\n  // Drawing the head arrow with two lines\n  // Variables to be used when creating the arrow\n  const headLength = 10;\n  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n\n  const firstLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle - Math.PI / 7),\n      end[1] - headLength * Math.sin(angle - Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  const secondLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle + Math.PI / 7),\n      end[1] - headLength * Math.sin(angle + Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '2',\n    firstLine.start,\n    firstLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '3',\n    secondLine.start,\n    secondLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRedactionRect(\n  svgDrawingHelper: any,\n  annotationUID: string,\n  rectangleUID: string,\n  start: any,\n  end: any,\n  options = {}\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'black',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    _setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    _setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import { ToolGroupManager } from '../store';\nimport { ToolModes } from '../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Finds the enabled element, and iterates over the tools inside its\n * toolGroup. Returns the list of tool instances that are valid based\n * on the provided tool mode.\n *\n * @param element Canvas element\n * @param modesFilter tool modes: active, passive, enabled, disabled\n * @returns enabled tool instances\n */\nexport default function getToolsWithModesForElement(\n  element: HTMLDivElement,\n  modesFilter: ModesFilter\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    /* filter out tools that don't have options */\n    if (!toolOptions) {\n      continue;\n    }\n\n    if (modesFilter.includes(toolOptions.mode)) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import {\n  getEnabledElement,\n  triggerEvent,\n  getRenderingEngine,\n} from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../enums';\nimport { draw as drawSvg } from '../drawingSvg';\nimport getToolsWithModesForElement from './getToolsWithModesForElement';\nimport { AnnotationRenderedEventDetail } from '../types/EventTypes';\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * AnnotationRenderingEngine is a class that is responsible for rendering\n * annotations defined in the renderAnnotation method of annotation tools on the page.\n * It mimics the RenderingEngine in the Cornerstone Core. Here it uses requestAnimationFrame\n * is used to render annotations by calling renderAnnotations() on each enabled tool. Note: This\n * is a Singleton class and should not be instantiated directly. To trigger\n * an annotation render for an HTML element containing a viewport you can use\n *\n * ```\n * triggerAnnotationRender(element)\n * ```\n */\nclass AnnotationRenderingEngine {\n  public hasBeenDestroyed: boolean;\n  private _needsRender: Set<HTMLDivElement> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  private _viewportElements: Map<string, HTMLDivElement>;\n\n  constructor() {\n    this._viewportElements = new Map();\n  }\n\n  /**\n   * Add the viewport's HTMLDivElement to the viewports for rendering. This method\n   * just informs the annotationRenderingEngine about the viewport and\n   * does not initiate a render.\n   * @param viewportId - Viewport Unique identifier\n   * @param element - HTMLDivElement\n   */\n  public addViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.set(viewportId, element);\n  }\n\n  /**\n   * Remove the viewport's HTMLDivElement from subsequent annotation renders\n   * @param viewportId - Viewport Unique identifier\n   */\n  public removeViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.delete(viewportId);\n\n    // delete element from needsRender if element exist\n    this._needsRender.delete(element);\n\n    // I don' think there is any disadvantage to canceling the animation frame\n    // and resetting the flags on viewport's element removal, since the removeVIewportElement\n    // might be as a result of reEnabling the element (in re-enable we disable first), hence the need to render the\n    // new one while removing the old one\n    this._reset();\n  }\n\n  /**\n   * It tells the AnnotationRenderingEngine to render the viewport element the next\n   * time it renders.\n   *\n   * @param element - The element to render.\n   */\n  public renderViewport(element: HTMLDivElement): void {\n    this._setViewportsToBeRenderedNextFrame([element]);\n  }\n\n  /**\n   * _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _renderFlaggedViewports = () => {\n    this._throwIfDestroyed();\n\n    const elements = Array.from(this._viewportElements.values());\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (this._needsRender.has(element)) {\n        this._triggerRender(element);\n\n        // This viewport has been rendered, we can remove it from the set\n        this._needsRender.delete(element);\n\n        // If there is nothing left that is flagged for rendering, stop here\n        // and allow RAF to be called again\n        if (this._needsRender.size === 0) {\n          this._animationFrameSet = false;\n          this._animationFrameHandle = null;\n          return;\n        }\n      }\n    }\n  };\n\n  private _setAllViewportsToBeRenderedNextFrame() {\n    const elements = [...this._viewportElements.values()];\n\n    elements.forEach((element) => {\n      this._needsRender.add(element);\n    });\n\n    this._renderFlaggedViewports();\n  }\n\n  private _setViewportsToBeRenderedNextFrame(elements: HTMLDivElement[]) {\n    const elementsEnabled = [...this._viewportElements.values()];\n\n    // Add the viewports to the set of flagged viewports\n    elements.forEach((element) => {\n      // only enabledElement need to render\n      if (elementsEnabled.indexOf(element) !== -1) {\n        this._needsRender.add(element);\n      }\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   * _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedViewports\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  _triggerRender(element) {\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      console.warn('Element has been disabled');\n      return;\n    }\n\n    const renderingEngine = getRenderingEngine(\n      enabledElement.renderingEngineId\n    );\n    if (!renderingEngine) {\n      console.warn('rendering Engine has been destroyed');\n      return;\n    }\n\n    const enabledTools = getToolsWithModesForElement(element, [\n      Active,\n      Passive,\n      Enabled,\n    ]);\n\n    const { renderingEngineId, viewportId } = enabledElement;\n    const eventDetail: AnnotationRenderedEventDetail = {\n      element,\n      renderingEngineId,\n      viewportId,\n    };\n\n    // const enabledToolsWithAnnotations = enabledTools.filter((tool) => {\n    //   const annotations = getAnnotations(tool.getToolName(), {FrameOfReferenceUID});\n    //   return annotations && annotations.length;\n    // });\n\n    drawSvg(element, (svgDrawingHelper) => {\n      let anyRendered = false;\n      const handleDrawSvg = (tool) => {\n        if (tool.renderAnnotation) {\n          const rendered = tool.renderAnnotation(\n            enabledElement,\n            svgDrawingHelper\n          );\n          anyRendered = anyRendered || rendered;\n        }\n      };\n\n      /**\n       * We should be able to filter tools that don't have annotations, but\n       * currently some of tools have renderAnnotation method BUT\n       * don't keep annotation in the state, so if we do so, the tool will not be\n       * rendered.\n       */\n      enabledTools.forEach(handleDrawSvg);\n\n      if (anyRendered) {\n        triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n      }\n    });\n  }\n\n  /**\n   * _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    this._setAllViewportsToBeRenderedNextFrame();\n  }\n}\n\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\n\n/**\n * It triggers the rendering of the annotations for the given HTML element using\n * the `AnnotationRenderingEngine`\n * @param element - The element to render the annotation on.\n */\nfunction triggerAnnotationRender(element: HTMLDivElement): void {\n  annotationRenderingEngine.renderViewport(element);\n}\n\nexport { annotationRenderingEngine, triggerAnnotationRender };\n\nexport default triggerAnnotationRender;\n","import { vec3 } from 'gl-matrix';\nimport { CONSTANTS, metaData } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Annotations, Annotation } from '../../types';\nimport { debug } from 'console';\n\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n\n/**\n * given some `Annotations`, and the slice defined by the camera's normal\n * direction and the spacing in the normal, filter the `Annotations` which\n * is within the slice.\n *\n * @param annotations - Annotations\n * @param camera - The camera\n * @param spacingInNormalDirection - The spacing in the normal direction\n * @returns The filtered `Annotations`.\n */\nexport default function filterAnnotationsWithinSlice(\n  annotations: Annotations,\n  camera: Types.ICamera,\n  spacingInNormalDirection: number\n): Annotations {\n  const { viewPlaneNormal } = camera;\n\n  // The reason we use parallel normals instead of actual orientation is that\n  // flipped action is done through camera API, so we can't rely on the\n  // orientation (viewplaneNormal and viewUp) since even the same image and\n  // same slice if flipped will have different orientation, but still rendering\n  // the same slice. Instead, we choose to use the parallel normals to filter\n  // the annotations and later we fine tune it with the annotation within slice\n  // logic down below.\n  const annotationsWithParallelNormals = annotations.filter(\n    (td: Annotation) => {\n      let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n      if (!annotationViewPlaneNormal) {\n        // This code is run to set the annotation view plane normal\n        // for historical data which was saved without the normal.\n        const { referencedImageId } = td.metadata;\n        const { imageOrientationPatient } = metaData.get(\n          'imagePlaneModule',\n          referencedImageId\n        );\n        const rowCosineVec = vec3.fromValues(\n          imageOrientationPatient[0],\n          imageOrientationPatient[1],\n          imageOrientationPatient[2]\n        );\n\n        const colCosineVec = vec3.fromValues(\n          imageOrientationPatient[3],\n          imageOrientationPatient[4],\n          imageOrientationPatient[5]\n        );\n\n        annotationViewPlaneNormal = vec3.create() as Types.Point3;\n\n        vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n        td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n      }\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      return annotationViewPlaneNormal && isParallel;\n    }\n  );\n\n  // No in plane annotations.\n  if (!annotationsWithParallelNormals.length) {\n    return [];\n  }\n\n  // Annotation should be within the slice, which means that it should be between\n  // camera's focalPoint +/- spacingInNormalDirection.\n\n  const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n  const { focalPoint } = camera;\n\n  const annotationsWithinSlice = [];\n\n  for (const annotation of annotationsWithParallelNormals) {\n    const data = annotation.data;\n    const point = data.handles.points[0];\n\n    if (!annotation.isVisible) {\n      continue;\n    }\n    // A = point\n    // B = focal point\n    // P = normal\n\n    // B-A dot P  => Distance in the view direction.\n    // this should be less than half the slice distance.\n\n    const dir = vec3.create();\n\n    vec3.sub(dir, focalPoint, point);\n\n    const dot = vec3.dot(dir, viewPlaneNormal);\n\n    if (Math.abs(dot) < halfSpacingInNormalDirection) {\n      annotationsWithinSlice.push(annotation);\n    }\n  }\n\n  return annotationsWithinSlice;\n}\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport { Annotation } from '../types';\n\nexport type FramesRange = [number, number] | number;\n\n/**\n * This class handles the annotation frame range values for multiframes.\n * Mostly used for the Video viewport, it allows references to\n * a range of frame values.\n */\nexport default class AnnotationFrameRange {\n  protected static frameRangeExtractor =\n    /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i;\n\n  protected static imageIdToFrames(imageId: string): FramesRange {\n    const match = imageId.match(this.frameRangeExtractor);\n    if (!match || !match[2]) {\n      return null;\n    }\n    const range = match[2].split('-').map((it) => Number(it));\n    if (range.length === 1) {\n      return range[0];\n    }\n    return range as FramesRange;\n  }\n\n  public static framesToString(range) {\n    if (Array.isArray(range)) {\n      return `${range[0]}-${range[1]}`;\n    }\n    return String(range);\n  }\n\n  protected static framesToImageId(\n    imageId: string,\n    range: FramesRange | string\n  ): string {\n    const match = imageId.match(this.frameRangeExtractor);\n    if (!match || !match[2]) {\n      return null;\n    }\n    const newRangeString = this.framesToString(range);\n    return imageId.replace(\n      this.frameRangeExtractor,\n      `${match[1]}${newRangeString}`\n    );\n  }\n\n  /**\n   * Sets the range of frames to associate with the given annotation.\n   * The range can be a single frame number (1 based according to DICOM),\n   * or a range of values in the format `min-max` where min, max are inclusive\n   * Modifies the referencedImageID to specify the updated URL.\n   */\n  public static setFrameRange(\n    annotation: Annotation,\n    range: FramesRange | string,\n    eventBase?: { viewportId; renderingEngineId }\n  ) {\n    const { referencedImageId } = annotation.metadata;\n    annotation.metadata.referencedImageId = this.framesToImageId(\n      referencedImageId,\n      range\n    );\n    const eventDetail = {\n      ...eventBase,\n      annotation,\n    };\n    triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n  }\n\n  public static getFrameRange(\n    annotation: Annotation\n  ): number | [number, number] {\n    return this.imageIdToFrames(annotation.metadata.referencedImageId);\n  }\n}\n","import {\n  StackViewport,\n  VolumeViewport,\n  VideoViewport,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport type { Annotations } from '../../types';\nimport annotationFrameRange from '../annotationFrameRange';\n\nconst baseUrlExtractor = /(videoId:|imageId:|volumeId:)([a-zA-Z]*:)/;\n\n/**\n * Given the viewport and the annotations, it filters the annotations array and only\n * return those annotation that should be displayed on the viewport\n * @param annotations - Annotations\n * @returns A filtered version of the annotations.\n */\nexport default function filterAnnotationsForDisplay(\n  viewport: Types.IViewport,\n  annotations: Annotations\n): Annotations {\n  if (viewport instanceof StackViewport) {\n    // 1. Get the currently displayed imageId from the StackViewport\n    const imageId = viewport.getCurrentImageId();\n\n    // 2. remove the dataLoader scheme since it might be an annotation that was\n    // created on the volumeViewport initially and has the volumeLoader scheme\n    // but shares the same imageId\n    const colonIndex = imageId.indexOf(':');\n    const imageURI = imageId.substring(colonIndex + 1);\n\n    // 3. Filter annotation in the frame of reference by the referenced image ID property\n    // Note: With the current implementation drawing on the stack (PT stack) will not\n    // show the annotation on a volume that does not share the same imageURIs (CT Volume),\n    // and we don't have a proper way to check distance either since a stack can be\n    // composed of multiple unrelated images\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n\n      const imageId = annotation.metadata.referencedImageId;\n\n      if (imageId === undefined) {\n        // This annotation was not drawn on a non-coplanar reformat, and such does\n        // not have a referenced imageId.\n        return false;\n      }\n\n      const colonIndex = imageId.indexOf(':');\n      const referenceImageURI = imageId.substring(colonIndex + 1);\n      return referenceImageURI === imageURI;\n    });\n  } else if (viewport instanceof VideoViewport) {\n    const frameOfReferenceUID: string = viewport.getFrameOfReferenceUID();\n\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n      if (annotation.metadata.FrameOfReferenceUID !== frameOfReferenceUID) {\n        return false;\n      }\n      const testURI = annotation.metadata.referencedImageId.replace(\n        baseUrlExtractor,\n        ''\n      );\n\n      if (!viewport.hasImageURI(testURI)) {\n        return false;\n      }\n      const range = annotationFrameRange.getFrameRange(annotation);\n      const frameNumber = viewport.getFrameNumber();\n      if (Array.isArray(range)) {\n        return frameNumber >= range[0] && frameNumber <= range[1];\n      }\n      // Arbitrary 5 frames of slop on the video for matching single frame\n      // number to position - this allows the annotation to display  when\n      // the video element is not exactly the same timing as expected or when\n      // playing video back.\n      return Math.abs(frameNumber - range) <= 5;\n    });\n  } else if (viewport instanceof VolumeViewport) {\n    const camera = viewport.getCamera();\n\n    const { spacingInNormalDirection } =\n      csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n    // Get data with same normal and within the same slice\n    return filterAnnotationsWithinSlice(\n      annotations,\n      camera,\n      spacingInNormalDirection\n    );\n  } else {\n    throw new Error(`Viewport Type ${viewport.type} not supported`);\n  }\n}\n","import {\n  StyleConfig,\n  ToolStyleConfig,\n  StyleSpecifier,\n  AnnotationStyle,\n} from '../../../types/AnnotationStyle';\n\n/**\n * This class handles the configuration of the tool style. You can use it to set\n * the style of a tool at various levels (annotation, viewport, toolGroup, global).\n *\n * The hierarchy of the configuration is as follows (each level falls back to the\n * next level if not specified):\n *\n * 1) Annotation-level styles (with annotationUID)\n *     2) Viewport-level tool styles\n *         - Per-tool: Length on the viewport with viewportId\n *         - Global: All tools on the viewport with viewportId\n *             3) ToolGroup tool styles\n *                 - Per-tool: Angle on toolGroupId in all viewports of the toolGroup\n *                 - Global: All tools in the toolGroupId for all viewports\n *                     4) Default level:\n *                         - Per-tool: Length styles\n *                         - Global: Opinionated styles by CornerstoneJS\n */\nclass ToolStyle {\n  config: StyleConfig;\n\n  constructor() {\n    const defaultConfig = {\n      color: 'rgb(255, 255, 0)',\n      colorHighlighted: 'rgb(0, 255, 0)',\n      colorSelected: 'rgb(0, 220, 0)',\n      colorLocked: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '',\n      shadow: true,\n      textBoxVisibility: true,\n      textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n      textBoxFontSize: '14px',\n      textBoxColor: 'rgb(255, 255, 0)',\n      textBoxColorHighlighted: 'rgb(0, 255, 0)',\n      textBoxColorSelected: 'rgb(0, 255, 0)',\n      textBoxColorLocked: 'rgb(255, 255, 0)',\n      textBoxBackground: '',\n      textBoxLinkLineWidth: '1',\n      textBoxLinkLineDash: '2,3',\n      textBoxShadow: true,\n    };\n\n    this._initializeConfig(defaultConfig);\n  }\n\n  /**\n   * It returns the annotation-specific tool styles for the annotation with the given UID\n   * @param annotationUID - The unique identifier of the annotation.\n   * @returns The annotation tool styles for the annotation with the given UID.\n   */\n  getAnnotationToolStyles(annotationUID: string): AnnotationStyle {\n    return this.config.annotations && this.config.annotations[annotationUID];\n  }\n\n  /**\n   * It returns the styles for a given viewport. It includes tool-specific and\n   * global styles (all tools in the viewport)\n   * @param viewportId - The id of the viewport\n   * @returns The viewport tool styles for the given viewport id.\n   */\n  getViewportToolStyles(viewportId: string): ToolStyleConfig {\n    return this.config.viewports && this.config.viewports[viewportId];\n  }\n\n  /**\n   * It returns the tool style for the given toolGroup. It includes tool-specific and\n   * global styles (all tools in the toolGroup)\n   * @param toolGroupId - The id of the toolGroup.\n   * @returns The tool styles for the tool group with the given id.\n   */\n  getToolGroupToolStyles(toolGroupId: string): ToolStyleConfig {\n    return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n  }\n\n  /**\n   * It returns the default tool styles from the config file. It includes tool-specific and\n   * global styles (all tools in all tooLGroups)\n   * @returns The default tool styles.\n   */\n  getDefaultToolStyles(): ToolStyleConfig {\n    return this.config.default;\n  }\n\n  /**\n   * It takes an annotationUID and a style object and sets the styles at\n   * the annotationLevel (highest priority in the hierarchy). The styles is an\n   * object with key value pairs.\n   * @param annotationUID - string - The unique identifier for the annotation.\n   * @param styles - ToolStyles\n   */\n  setAnnotationStyles(annotationUID: string, styles: AnnotationStyle) {\n    let annotationSpecificStyles = this.config.annotations;\n\n    if (!annotationSpecificStyles) {\n      this.config = {\n        ...this.config,\n        annotations: {},\n      };\n\n      annotationSpecificStyles = this.config.annotations;\n    }\n\n    annotationSpecificStyles[annotationUID] = styles;\n  }\n\n  /**\n   * It takes a viewportId and a ToolStyles object, and adds the ToolStyles object\n   * at the viewport level (second highest priority in the hierarchy after the annotation level).\n   * @param viewportId - The id of the viewport\n   * @param styles - style object including tool-specific and/or global styles (All tools in the viewport)\n   */\n  setViewportToolStyles(viewportId: string, styles: ToolStyleConfig) {\n    let viewportSpecificStyles = this.config.viewports;\n\n    if (!viewportSpecificStyles) {\n      this.config = {\n        ...this.config,\n        viewports: {},\n      };\n\n      viewportSpecificStyles = this.config.viewports;\n    }\n\n    viewportSpecificStyles[viewportId] = styles;\n  }\n\n  /**\n   * It takes a toolGroupId and a ToolStyles object, and it adds the ToolStyles object\n   * at the toolGroup level (third highest priority in the hierarchy after the viewport level).\n   * @param toolGroupId - The id of the toolGroup\n   * @param styles - style object including tool-specific (in all viewports of the toolGroup) and/or\n   * global styles (All tools in the toolGroup for all viewports)\n   */\n  setToolGroupToolStyles(toolGroupId: string, styles: ToolStyleConfig) {\n    let toolGroupSpecificStyles = this.config.toolGroups;\n\n    if (!toolGroupSpecificStyles) {\n      this.config = {\n        ...this.config,\n        toolGroups: {},\n      };\n\n      toolGroupSpecificStyles = this.config.toolGroups;\n    }\n\n    toolGroupSpecificStyles[toolGroupId] = styles;\n  }\n\n  /**\n   * Sets the default tool styles for the editor. It overrides the default styles for all tools.\n   * @param styles - style object including tool-specific (a tool in all toolGroups) and/or\n   * global styles (All tools in all tooLGroups)\n   */\n  setDefaultToolStyles(styles: ToolStyleConfig) {\n    this.config.default = styles;\n  }\n\n  /**\n   * It returns the value for a given style key, based on the provided specifications.\n   * It starts by looking at the annotation-specific styles, then at the viewport-specific styles,\n   * then at the toolGroup-specific styles, and finally at the default styles.\n   * @param styleKey - The key of the style.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met\n   * @returns The value for the given style key.\n   */\n  getStyleProperty(toolStyle: string, specifications: StyleSpecifier) {\n    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n\n    return this._getToolStyle(\n      toolStyle,\n      annotationUID,\n      viewportId,\n      toolGroupId,\n      toolName\n    );\n  }\n\n  private _getToolStyle(\n    property: string,\n    annotationUID: string,\n    viewportId: string,\n    toolGroupId: string,\n    toolName: string\n  ) {\n    if (annotationUID) {\n      const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n\n      if (annotationToolStyles) {\n        // check first in the toolSpecific styles\n        if (annotationToolStyles[property] !== undefined) {\n          return annotationToolStyles[property];\n        }\n      }\n    }\n\n    if (viewportId) {\n      const viewportToolStyles = this.getViewportToolStyles(viewportId);\n\n      if (viewportToolStyles) {\n        // check if we have the viewportId specific style\n        // check first in the toolSpecific styles\n        if (\n          viewportToolStyles[toolName] &&\n          viewportToolStyles[toolName][property] !== undefined\n        ) {\n          return viewportToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the viewport specific global viewportSpecificStyles\n        if (\n          viewportToolStyles.global &&\n          viewportToolStyles.global[property] !== undefined\n        ) {\n          return viewportToolStyles.global[property];\n        }\n      }\n    }\n\n    if (toolGroupId) {\n      const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n\n      if (toolGroupToolStyles) {\n        // check first in the toolSpecific styles\n        if (\n          toolGroupToolStyles[toolName] &&\n          toolGroupToolStyles[toolName][property] !== undefined\n        ) {\n          return toolGroupToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the toolGroup specific global styles\n        if (\n          toolGroupToolStyles.global &&\n          toolGroupToolStyles.global[property] !== undefined\n        ) {\n          return toolGroupToolStyles.global[property];\n        }\n      }\n    }\n\n    const globalStyles = this.getDefaultToolStyles();\n\n    if (\n      globalStyles[toolName] &&\n      globalStyles[toolName][property] !== undefined\n    ) {\n      return globalStyles[toolName][property];\n    }\n\n    if (globalStyles.global && globalStyles.global[property] !== undefined) {\n      return globalStyles.global[property];\n    }\n  }\n\n  private _initializeConfig(config) {\n    const toolStyles = {};\n    for (const name in config) {\n      toolStyles[name] = config[name];\n    }\n\n    this.config = {\n      default: {\n        global: toolStyles as AnnotationStyle,\n      },\n    };\n  }\n}\n\nconst toolStyle = new ToolStyle();\n\nexport default toolStyle;\n","import { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport toolStyle from './ToolStyle';\n\n/**\n * Build a list of hierarchal property names in ascending order of priority\n * @param property - The base property name -- e.g., 'color'\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns A list of property names\n */\nfunction getHierarchalPropertyStyles(\n  property: string,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string[] {\n  const list = [`${property}`];\n  if (state) {\n    list.push(`${list[0]}${state}`);\n  }\n  if (mode) {\n    list.push(`${list[list.length - 1]}${mode}`);\n  }\n  return list;\n}\n\n/**\n * Get the value of a style property from the ToolStyle config\n * @param property - The name of the property to get.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - The state of the tool (Default, Locked etc.)\n * @param mode - The current tool mode. (Active, Passive etc.)\n * @returns The value of the property.\n */\nfunction getStyleProperty(\n  property: string,\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  // Hierarchal property styles is a list of property names with priority in ascending\n  // order like: ['color', 'colorSelected', 'colorSelectedActive'], if in the toolStyle\n  // config, the `colorSelectedActive` property is defined, it will be used, otherwise\n  // the `colorSelected` property will be used, and if that is not defined, the `color`\n  // property will be used. This is done to ensure that the most specific property is used.\n  // Thus, we attempt resolving property names in reverse order\n  const alternatives = getHierarchalPropertyStyles(property, state, mode);\n  for (let i = alternatives.length - 1; i >= 0; --i) {\n    const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n    if (style !== undefined) {\n      return style;\n    }\n  }\n}\n\nexport { getStyleProperty };\n","import { Annotation } from '../../../types';\nimport { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\n\n/**\n * Given a Annotation object, return the annotationStyle State that it\n * should be in based on its data\n * @param annotation - The annotation that we want to style.\n * @returns The state of the annotation whether it is Default, Highlighted, Locked, or Selected.\n */\nfunction getState(annotation?: Annotation): AnnotationStyleStates {\n  if (annotation) {\n    if (annotation.data && annotation.highlighted) {\n      return AnnotationStyleStates.Highlighted;\n    }\n    if (isAnnotationSelected(annotation.annotationUID)) {\n      return AnnotationStyleStates.Selected;\n    }\n\n    // Todo: make annotation lock api not to rely on the annotation itself\n    if (isAnnotationLocked(annotation)) {\n      return AnnotationStyleStates.Locked;\n    }\n  }\n\n  return AnnotationStyleStates.Default;\n}\n\nexport default getState;\n","import { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport { getStyleProperty } from './helpers';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\n\n/**\n * getFont - Returns a font string of the form \"{fontSize}px fontName\" used by `canvas`.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns The font string.\n */\nfunction getFont(\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  const fontSize = getStyleProperty(\n    'textBoxFontSize',\n    styleSpecifier,\n    state,\n    mode\n  );\n  const fontFamily = getStyleProperty(\n    'textBoxFontFamily',\n    styleSpecifier,\n    state,\n    mode\n  );\n\n  return `${fontSize}px ${fontFamily}`;\n}\n\nexport default getFont;\n","import {\n  utilities,\n  getEnabledElement,\n  StackViewport,\n  cache,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport { Annotation, Annotations, SVGDrawingHelper } from '../../types';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationDisplayTool extends BaseTool {\n  static toolName;\n\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract renderAnnotation it used to draw the tool's annotation in each\n   * request animation frame\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  abstract renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  );\n\n  /**\n   * @virtual Given the element and annotations which is an array of annotation, it\n   * filters the annotations array to only include the annotation based on the viewportType.\n   * If the viewport is StackViewport, it filters based on the current imageId of the viewport,\n   * if the viewport is volumeViewport, it only returns those that are within the\n   * same slice as the current rendered slice in the volume viewport.\n   * imageId as the enabledElement.\n   * @param element - The HTML element\n   * @param annotations - The annotations to filter (array of annotation)\n   * @returns The filtered annotations\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    return filterAnnotationsForDisplay(viewport, annotations);\n  }\n\n  /**\n   * On Image Calibration, take all the annotation from the AnnotationState manager,\n   * and invalidate them to force them to be re-rendered and their stats to be recalculated.\n   * Then use the old and new imageData (non-calibrated and calibrated) to calculate the\n   * new position for the annotations in the space of the new imageData.\n   *\n   * @param evt - The calibration event\n   *\n   */\n  public onImageSpacingCalibrated = (\n    evt: Types.EventTypes.ImageSpacingCalibratedEvent\n  ) => {\n    const { element, imageId } = evt.detail;\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const annotationManager = getAnnotationManager();\n    const framesOfReference = annotationManager.getFramesOfReference();\n\n    // For each frame Of Reference\n    framesOfReference.forEach((frameOfReference) => {\n      const frameOfReferenceSpecificAnnotations =\n        annotationManager.getAnnotations(frameOfReference);\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[this.getToolName()];\n\n      if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n        return;\n      }\n\n      // for this specific tool\n      toolSpecificAnnotations.forEach((annotation) => {\n        if (!annotation.metadata?.referencedImageId) {\n          return;\n        }\n\n        // if the annotation is drawn on the same imageId\n        const referencedImageURI = utilities.imageIdToURI(\n          annotation.metadata.referencedImageId\n        );\n\n        if (referencedImageURI === imageURI) {\n          // make them invalid since the image has been calibrated so that\n          // we can update the cachedStats and also rendering\n          annotation.invalidated = true;\n          annotation.data.cachedStats = {};\n        }\n      });\n      triggerAnnotationRender(element);\n    });\n  };\n\n  protected getReferencedImageId(\n    viewport: Types.IViewport,\n    worldPos: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else if (viewport instanceof VideoViewport) {\n      referencedImageId = targetId.split('videoId:')[1];\n    } else {\n      const volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = utilities.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    return referencedImageId;\n  }\n\n  /**\n   * It takes the property (color, lineDash, etc.) and based on the state of the\n   * annotation (selected, highlighted etc.) it returns the appropriate value\n   * based on the central toolStyle settings for each level of specification.\n   * @param property - The name of the style property to get.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns The value of the property.\n   */\n  public getStyle(\n    property: string,\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): unknown {\n    return getStyleProperty(\n      property,\n      specifications,\n      getState(annotation),\n      this.mode\n    );\n  }\n}\n\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import {\n  BaseVolumeViewport,\n  cache,\n  getEnabledElement,\n  metaData,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec2 } from 'gl-matrix';\n\nimport AnnotationDisplayTool from './AnnotationDisplayTool';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  InteractionTypes,\n  ToolProps,\n  PublicToolProps,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**-q\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationTool extends AnnotationDisplayTool {\n  static toolName;\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    super(toolProps, defaultToolProps);\n\n    if (toolProps.configuration?.getTextLines) {\n      this.configuration.getTextLines = toolProps.configuration.getTextLines;\n    }\n\n    if (toolProps.configuration?.statsCalculator) {\n      this.configuration.statsCalculator =\n        toolProps.configuration.statsCalculator;\n    }\n  }\n\n  /**\n   * @abstract addNewAnnotation Creates a new annotation based on the clicked mouse position\n   *\n   * @param evt - The normalized mouse event\n   * @param interactionType -  The interaction type used to add the annotation.\n   */\n  abstract addNewAnnotation(\n    evt: EventTypes.InteractionEventType,\n    interactionType: InteractionTypes\n  ): Annotation;\n\n  /**\n   * @abstract cancel Used to cancel the ongoing tool drawing and manipulation\n   *\n   */\n  abstract cancel(element: HTMLDivElement);\n\n  /**\n   * handleSelectedCallback Custom callback for when a handle is selected.\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The annotation selected.\n   * @param handle - The selected handle (either Types.Point3 in space for annotations, or TextBoxHandle object for text boxes).\n   * @param interactionType - The interaction type the handle was selected with.\n   */\n  abstract handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Custom callback for when an annotation is selected\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The `Annotation` to check.\n   * @param interactionType - The interaction type used to select the tool.\n   */\n  abstract toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes,\n    canvasCoords?: Types.Point2\n  ): void;\n\n  /**\n   * Returns true if the provided canvas coordinate tool is near the annotation\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinate to check\n   * @param proximity - The minimum proximity to consider the point near\n   * @param interactionType - The interaction type used to select the tool.\n   *\n   * @returns boolean if the point is near.\n   */\n  abstract isPointNearTool(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number,\n    interactionType: string\n  ): boolean;\n\n  /**\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  public mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredAnnotations?: Annotations\n  ): boolean => {\n    if (!filteredAnnotations) {\n      return false;\n    }\n\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let annotationsNeedToBeRedrawn = false;\n\n    for (const annotation of filteredAnnotations) {\n      // Do not do anything if the annotation is locked or hidden.\n      if (\n        isAnnotationLocked(annotation) ||\n        !isAnnotationVisible(annotation.annotationUID)\n      ) {\n        continue;\n      }\n\n      const { data } = annotation;\n      const activateHandleIndex = data.handles\n        ? data.handles.activeHandleIndex\n        : undefined;\n\n      // Perform tool specific imagePointNearToolOrHandle to determine if the mouse\n      // is near the tool or its handles or its textBox.\n      const near = this._imagePointNearToolOrHandle(\n        element,\n        annotation,\n        canvasCoords,\n        6 // Todo: This should come from the state\n      );\n\n      const nearToolAndNotMarkedActive = near && !annotation.highlighted;\n      const notNearToolAndMarkedActive = !near && annotation.highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !annotation.highlighted;\n        annotationsNeedToBeRedrawn = true;\n      } else if (\n        data.handles &&\n        data.handles.activeHandleIndex !== activateHandleIndex\n      ) {\n        // Active handle index has changed, re-render.\n        annotationsNeedToBeRedrawn = true;\n      }\n    }\n\n    return annotationsNeedToBeRedrawn;\n  };\n\n  /**\n   * It checks if the mouse click is near TextBoxHandle or AnnotationHandle itself, and\n   * return either it. It prioritize TextBoxHandle over AnnotationHandle. If\n   * the mouse click is not near any of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points, textBox } = data.handles;\n\n    if (textBox) {\n      const { worldBoundingBox } = textBox;\n      if (worldBoundingBox) {\n        const canvasBoundingBox = {\n          topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),\n          topRight: viewport.worldToCanvas(worldBoundingBox.topRight),\n          bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),\n          bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight),\n        };\n\n        if (\n          canvasCoords[0] >= canvasBoundingBox.topLeft[0] &&\n          canvasCoords[0] <= canvasBoundingBox.bottomRight[0] &&\n          canvasCoords[1] >= canvasBoundingBox.topLeft[1] &&\n          canvasCoords[1] <= canvasBoundingBox.bottomRight[1]\n        ) {\n          data.handles.activeHandleIndex = null;\n          return textBox as ToolHandle;\n        }\n      }\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  }\n\n  /**\n   * It returns the style for the text box\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns An object of the style settings for the text box.\n   */\n  public getLinkedTextBoxStyle(\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): Record<string, unknown> {\n    // Todo: this function can be used to set different styles for different toolMode\n    // for the textBox.\n\n    return {\n      visibility: this.getStyle(\n        'textBoxVisibility',\n        specifications,\n        annotation\n      ),\n      fontFamily: this.getStyle(\n        'textBoxFontFamily',\n        specifications,\n        annotation\n      ),\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\n      color: this.getStyle('textBoxColor', specifications, annotation),\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\n      background: this.getStyle(\n        'textBoxBackground',\n        specifications,\n        annotation\n      ),\n      lineWidth: this.getStyle(\n        'textBoxLinkLineWidth',\n        specifications,\n        annotation\n      ),\n      lineDash: this.getStyle(\n        'textBoxLinkLineDash',\n        specifications,\n        annotation\n      ),\n    };\n  }\n\n  /**\n   * Returns true if the viewport is scaled to SUV units\n   * @param viewport - The viewport\n   * @param targetId - The annotation targetId\n   * @param imageId - The annotation imageId\n   * @returns\n   */\n  isSuvScaled(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    targetId: string,\n    imageId?: string\n  ): boolean {\n    if (viewport instanceof BaseVolumeViewport) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const volume = cache.getVolume(volumeId);\n      return volume.scaling?.PT !== undefined;\n    }\n    const scalingModule: Types.ScalingParameters | undefined =\n      imageId && metaData.get('scalingModule', imageId);\n    return typeof scalingModule?.suvbw === 'number';\n  }\n\n  /**\n   * Returns true if the `canvasCoords` are near a handle or selectable part of the tool\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinates to check\n   * @param proximity - The proximity to consider\n   *\n   * @returns If the point is near.\n   */\n  private _imagePointNearToolOrHandle(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean {\n    // Based on the tool instance type, check if the point is near the tool handles\n    const handleNearImagePoint = this.getHandleNearImagePoint(\n      element,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (handleNearImagePoint) {\n      return true;\n    }\n\n    // If the point is not near the handles, check if the point is near the tool\n    const toolNewImagePoint = this.isPointNearTool(\n      element,\n      annotation,\n      canvasCoords,\n      proximity,\n      'mouse'\n    );\n\n    if (toolNewImagePoint) {\n      return true;\n    }\n  }\n}\n\nAnnotationTool.toolName = 'AnnotationTool';\nexport default AnnotationTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the surface representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the surface representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.startsWith(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","export function pointToString(point, decimals = 5) {\n  return (\n    parseFloat(point[0]).toFixed(decimals) +\n    ',' +\n    parseFloat(point[1]).toFixed(decimals) +\n    ',' +\n    parseFloat(point[2]).toFixed(decimals) +\n    ','\n  );\n}\n","import {\n  getEnabledElement,\n  Enums,\n  VolumeViewport3D,\n} from '@cornerstonejs/core';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkClipClosedSurface from '@kitware/vtk.js/Filters/General/ClipClosedSurface';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { pointToString } from '../../../utilities/pointToString';\n\nconst polyDataCache = new Map();\n\nfunction addSurfaceToElement(\n  element: HTMLDivElement,\n  surface: any,\n  actorUID: string\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const points = surface.getPoints();\n  const polys = surface.getPolys();\n  const color = surface.getColor();\n\n  const polyData = vtkPolyData.newInstance();\n  polyData.getPoints().setData(points, 3);\n\n  const triangles = vtkCellArray.newInstance({\n    values: Float32Array.from(polys),\n  });\n  polyData.setPolys(triangles);\n\n  const mapper = vtkMapper.newInstance({});\n  let clippingFilter;\n  if (!(viewport instanceof VolumeViewport3D)) {\n    clippingFilter = vtkClipClosedSurface.newInstance({\n      clippingPlanes: [],\n      activePlaneId: 2,\n      passPointData: false,\n    });\n    clippingFilter.setInputData(polyData);\n    clippingFilter.setGenerateOutline(true);\n    clippingFilter.setGenerateFaces(false);\n    clippingFilter.update();\n    const filteredData = clippingFilter.getOutputData();\n    mapper.setInputData(filteredData);\n  } else {\n    mapper.setInputData(polyData);\n  }\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n\n  // sets the color of the surface actor\n  actor.getProperty().setColor(color[0] / 255, color[1] / 255, color[2] / 255);\n  viewport.addActor({\n    actor,\n    uid: actorUID,\n    clippingFilter,\n  });\n\n  element.addEventListener(\n    Enums.Events.CLIPPING_PLANES_UPDATED,\n    updateSurfacePlanes\n  );\n}\n\n/**\n * Updates the clipping planes of a surface and caches the resulting poly data\n * @param evt\n */\nfunction updateSurfacePlanes(evt) {\n  const { actorEntry, vtkPlanes, viewport } = evt.detail;\n  if (!actorEntry?.clippingFilter) {\n    return;\n  }\n\n  const mapper = actorEntry.actor.getMapper();\n\n  const { viewPlaneNormal } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n\n  // we should not use the focalPoint here, since the pan and zoom updates it,\n  // imageIndex is reliable enough\n  const cacheId = `${viewport.id}-${pointToString(\n    viewPlaneNormal\n  )}-${imageIndex}`;\n\n  let actorCache = polyDataCache.get(actorEntry.uid);\n  if (!actorCache) {\n    actorCache = new Map();\n    polyDataCache.set(actorEntry.uid, actorCache);\n  }\n\n  let polyData = actorCache.get(cacheId);\n  if (!polyData) {\n    const clippingFilter = actorEntry.clippingFilter;\n    clippingFilter.setClippingPlanes(vtkPlanes);\n    try {\n      clippingFilter.update();\n      polyData = clippingFilter.getOutputData();\n      actorCache.set(cacheId, polyData);\n    } catch (e) {\n      console.error('Error clipping surface', e);\n    }\n  }\n  mapper.setInputData(polyData);\n}\n\nexport default addSurfaceToElement;\n","import {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  Enums,\n} from '@cornerstonejs/core';\n\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addSurfaceToElement from './addSurfaceToElement';\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeSurfaceFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the Surface  for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const SurfaceData = segmentation.representationData[Representations.Surface];\n  const { geometryId } = SurfaceData;\n\n  if (!geometryId) {\n    console.warn(\n      `No Surfaces found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  const geometry = cache.getGeometry(geometryId);\n  if (!geometry) {\n    throw new Error(`No Surfaces found for geometryId ${geometryId}`);\n  }\n\n  if (geometry.type !== Enums.GeometryType.SURFACE) {\n    // Todo: later we can support converting other geometries to Surfaces\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No Surfaces found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n\n  const surface = geometry.data;\n\n  const surfaceUID = `${segmentationRepresentationUID}_${surface.id}}`;\n  _renderSurface(viewport, surface, surfaceUID);\n\n  viewport.resetCamera();\n  viewport.render();\n}\n\nfunction _renderSurface(\n  viewport: Types.IVolumeViewport,\n  surface: any,\n  surfaceUID: string\n): void {\n  const actorUID = surfaceUID;\n  const actorEntry = viewport.getActor(actorUID);\n\n  if (!actorEntry) {\n    addSurfaceToElement(viewport.element, surface, actorUID);\n  } else {\n    throw new Error('Not implemented yet. (Update surface)');\n  }\n}\n\nfunction _removeSurfaceFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeSurfaceFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  removeSegmentationRepresentation,\n};\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { setSegmentationVisibility } from '../../stateManagement/segmentation/config/segmentationVisibility';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { PublicToolProps, ToolProps } from '../../types';\nimport { BaseTool } from '../base';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../types/SegmentationStateTypes';\nimport { surfaceDisplay } from './Surface';\nimport { contourDisplay } from './Contour';\nimport { labelmapDisplay } from './Labelmap';\n\n/**\n * In Cornerstone3DTools, displaying of segmentations are handled by the SegmentationDisplayTool.\n * Generally, any Segmentation can be viewed in various representations such as\n * labelmap (3d), contours, surface etc. As of now, Cornerstone3DTools only implements\n * Labelmap representation.\n *\n * SegmentationDisplayTool works at ToolGroup level, and is responsible for displaying the\n * segmentation representation for ALL viewports of a toolGroup, this way we can support complex\n * scenarios for displaying segmentations.\n *\n * Current Limitations:\n * - Only supports rendering of the volumetric segmentations in 3D space. (StackViewport segmentations are not supported yet)\n * - Labelmap representation is the only supported representation for now.\n *\n * Similar to other tools in Cornerstone3DTools, the SegmentationDisplayTool should\n * be added to the CornerstoneTools by calling cornerstoneTools.addTool(SegmentationDisplayTool)\n * and a toolGroup should be created for it using the ToolGroupManager API, finally\n * viewports information such as viewportId and renderingEngineId should be provided\n * to the toolGroup and the SegmentationDisplayTool should be set to be activated.\n *\n *\n */\nclass SegmentationDisplayTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility true\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          true\n        );\n      }\n    );\n  }\n\n  onSetToolDisabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility false\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          false\n        );\n      }\n    );\n  }\n\n  /**\n   * It is used to trigger the render for each segmentations in the toolGroup.\n   * Based on the segmentation representation type, it will call the corresponding\n   * render function.\n   *\n   * @param toolGroupId - the toolGroupId\n   */\n  renderSegmentation = (toolGroupId: string): void => {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      return;\n    }\n\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // toolGroup Viewports\n    const toolGroupViewports = toolGroup.viewportsInfo.map(\n      ({ renderingEngineId, viewportId }) => {\n        const enabledElement = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n\n        if (enabledElement) {\n          return enabledElement.viewport;\n        }\n      }\n    );\n\n    // Render each segmentationData, in each viewport in the toolGroup\n    const segmentationRenderList = toolGroupSegmentationRepresentations.map(\n      (representation: ToolGroupSpecificRepresentation) => {\n        const config = this._getMergedRepresentationsConfig(toolGroupId);\n\n        const viewportsRenderList = [];\n\n        const renderers = {\n          [Representations.Labelmap]: labelmapDisplay,\n          [Representations.Contour]: contourDisplay,\n          [Representations.Surface]: surfaceDisplay,\n        };\n\n        const display = renderers[representation.type];\n\n        for (const viewport of toolGroupViewports) {\n          const renderedViewport = display.render(\n            viewport as Types.IVolumeViewport,\n            representation,\n            config\n          );\n\n          viewportsRenderList.push(renderedViewport);\n        }\n        return viewportsRenderList;\n      }\n    );\n\n    Promise.allSettled(segmentationRenderList).then(() => {\n      // for all viewports in the toolGroup trigger a re-render\n      toolGroupViewports.forEach((viewport) => {\n        viewport.render();\n      });\n    });\n  };\n\n  /**\n   * Merge the toolGroup specific configuration with the default global configuration\n   * @param toolGroupId\n   * @returns\n   */\n  _getMergedRepresentationsConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig {\n    const toolGroupConfig =\n      segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n\n    // merge two configurations and override the global config\n    const mergedConfig = csUtils.deepMerge(globalConfig, toolGroupConfig);\n\n    return mergedConfig;\n  }\n}\n\nSegmentationDisplayTool.toolName = 'SegmentationDisplay';\nexport default SegmentationDisplayTool;\n","import {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\nimport { Events as csToolsEvents } from '../../enums';\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../../store/ToolGroupManager';\n\nimport SegmentationDisplayTool from '../../tools/displayTools/SegmentationDisplayTool';\nimport { SegmentationRenderedEventDetail } from '../../types/EventTypes';\n\n/**\n * SegmentationRenderingEngine is a class that is responsible for rendering\n * segmentations for a toolGroup. It will call SegmentationDisplayTool to render the segmentation\n * based on the segmentation data and their configurations. Note: This is a Singleton class\n * and should not be instantiated directly. To trigger a render for all the\n * segmentations of a tool group you can use.\n *\n * ```\n * triggerSegmentationRender(toolGroupId)\n * ```\n */\nclass SegmentationRenderingEngine {\n  private _needsRender: Set<string> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  public hasBeenDestroyed: boolean;\n\n  public removeToolGroup(toolGroupId) {\n    this._needsRender.delete(toolGroupId);\n\n    if (this._needsRender.size === 0) {\n      this._reset();\n    }\n  }\n\n  public renderToolGroupSegmentations(toolGroupId): void {\n    this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);\n  }\n\n  /**\n   *  _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _setToolGroupSegmentationToBeRenderedNextFrame(\n    toolGroupIds: string[]\n  ) {\n    // Add the viewports to the set of flagged viewports\n    toolGroupIds.forEach((toolGroupId) => {\n      this._needsRender.add(toolGroupId);\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   *  _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedToolGroups\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  private _renderFlaggedToolGroups = () => {\n    this._throwIfDestroyed();\n\n    // for each toolGroupId insides the _needsRender set, render the segmentation\n    const toolGroupIds = Array.from(this._needsRender.values());\n\n    for (const toolGroupId of toolGroupIds) {\n      this._triggerRender(toolGroupId);\n\n      // This viewport has been rendered, we can remove it from the set\n      this._needsRender.delete(toolGroupId);\n\n      // If there is nothing left that is flagged for rendering, stop here\n      // and allow RAF to be called again\n      if (this._needsRender.size === 0) {\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        return;\n      }\n    }\n  };\n  _triggerRender(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);\n      return;\n    }\n\n    const { viewportsInfo } = toolGroup;\n    const viewports = [];\n\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const renderingEngine = getRenderingEngine(renderingEngineId);\n\n      if (!renderingEngine) {\n        console.warn('rendering Engine has been destroyed');\n        return;\n      }\n\n      viewports.push(renderingEngine.getViewport(viewportId));\n    });\n\n    const segmentationDisplayToolInstance = toolGroup.getToolInstance(\n      SegmentationDisplayTool.toolName\n    ) as SegmentationDisplayTool;\n    if (!segmentationDisplayToolInstance) {\n      console.warn('No segmentation tool found inside', toolGroupId);\n      return;\n    }\n\n    function onSegmentationRender(evt: Types.EventTypes.ImageRenderedEvent) {\n      const { element, viewportId, renderingEngineId } = evt.detail;\n\n      element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n\n      const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn('toolGroup has been destroyed');\n        return;\n      }\n\n      const eventDetail: SegmentationRenderedEventDetail = {\n        toolGroupId: toolGroup.id,\n        viewportId,\n      };\n\n      triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n        ...eventDetail,\n      });\n    }\n\n    // Todo: for other representations we probably need the drawSVG, but right now we are not using it\n    // drawSvg(element, (svgDrawingHelper) => {\n    //   const handleDrawSvg = (tool) => {\n    //     if (tool instanceof SegmentationDisplayTool && tool.renderAnnotation) {\n    //       tool.renderAnnotation({ detail: eventDetail })\n    //       triggerEvent(element, csToolsEvents.SEGMENTATION_RENDERED, { ...eventDetail })\n    //     }\n    //   }\n    //   enabledTools.forEach(handleDrawSvg)\n    // })\n\n    viewports.forEach(({ element }) => {\n      element.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender\n      );\n    });\n\n    segmentationDisplayToolInstance.renderSegmentation(toolGroupId);\n  }\n\n  /**\n   *  _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n  }\n}\n\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\n\n/**\n * It triggers a render for all the segmentations of the tool group with the given Id.\n * @param toolGroupId - The Id of the tool group to render.\n */\nfunction triggerSegmentationRender(toolGroupId: string): void {\n  segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);\n}\n\nexport { segmentationRenderingEngine, triggerSegmentationRender };\nexport default triggerSegmentationRender;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationModifiedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationStateModified` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationModifiedListener = function (\n  evt: SegmentationRepresentationModifiedEventType\n): void {\n  const { toolGroupId } = evt.detail;\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationModifiedListener;\n","import {\n  cache,\n  getEnabledElementByIds,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../types/EventTypes';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId, modifiedSlicesToUse } = evt.detail;\n\n  const { representationData, type } =\n    SegmentationState.getSegmentation(segmentationId);\n\n  const toolGroupIds =\n    SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n\n  if (type !== SegmentationRepresentations.Labelmap) {\n    throw new Error(\n      `onSegmentationDataModified: representationType ${type} not supported yet`\n    );\n  }\n\n  if (isVolumeSegmentation(representationData[type])) {\n    // get the volume from cache, we need the openGLTexture to be updated to GPU\n    const segmentationVolume = cache.getVolume(\n      (representationData[type] as LabelmapSegmentationDataVolume).volumeId\n    );\n\n    if (!segmentationVolume) {\n      console.warn('segmentation not found in cache');\n      return;\n    }\n\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n\n    // Update the texture for the volume in the GPU\n    let slicesToUpdate;\n    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n      slicesToUpdate = modifiedSlicesToUse;\n    } else {\n      const numSlices = imageData.getDimensions()[2];\n      slicesToUpdate = [...Array(numSlices).keys()];\n    }\n\n    slicesToUpdate.forEach((i) => {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n\n    // Trigger modified on the imageData to update the image\n    imageData.modified();\n  } else {\n    toolGroupIds.forEach((toolGroupId) => {\n      const toolGroupSegmentationRepresentations =\n        SegmentationState.getSegmentationRepresentations(toolGroupId);\n\n      const toolGroup = getToolGroup(toolGroupId);\n      const viewportsInfo = toolGroup.getViewportsInfo();\n\n      toolGroupSegmentationRepresentations.forEach((representation) => {\n        if (representation.segmentationId !== segmentationId) {\n          return;\n        }\n\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n          const viewport = getEnabledElementByIds(\n            viewportId,\n            renderingEngineId\n          ).viewport;\n\n          const actorEntry = viewport.getActor(\n            representation.segmentationRepresentationUID\n          );\n\n          if (!actorEntry) {\n            return;\n          }\n\n          const currentImageId = viewport.getCurrentImageId();\n\n          const segImageData = actorEntry.actor.getMapper().getInputData();\n\n          const { imageIdReferenceMap } = representationData[\n            type\n          ] as LabelmapSegmentationDataStack;\n\n          const currentSegmentationImageId =\n            imageIdReferenceMap.get(currentImageId);\n\n          const segmentationImage = cache.getImage(currentSegmentationImageId);\n          segImageData.modified();\n\n          // update the cache with the new image data\n          csUtils.updateVTKImageDataWithCornerstoneImage(\n            segImageData,\n            segmentationImage\n          );\n        });\n      });\n    });\n  }\n\n  toolGroupIds.forEach((toolGroupId) => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\n\nexport default onSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationRemovedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationRepresentationRemoved` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationRemovedEventListener = function (\n  evt: SegmentationRepresentationRemovedEventType\n): void {\n  const { toolGroupId, segmentationRepresentationUID } = evt.detail;\n\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationRemovedEventListener;\n","import { SegmentationModifiedEventType } from '../../types/EventTypes';\nimport {\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\n\n/** A function that listens to the `segmentationModified` event and triggers\n * the triggerSegmentationRepresentationModified on each toolGroup that\n * has a representation of the given segmentationId.\n */\nconst segmentationModifiedListener = function (\n  evt: SegmentationModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n\n  const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n  toolGroupIds.forEach((toolGroupId) => {\n    const segRepresentations = getSegmentationRepresentations(toolGroupId);\n    segRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        triggerSegmentationRepresentationModified(\n          toolGroupId,\n          representation.segmentationRepresentationUID\n        );\n      }\n    });\n  });\n};\n\nexport default segmentationModifiedListener;\n","import {\n  StackViewport,\n  getEnabledElement,\n  Enums,\n  getEnabledElementByIds,\n  cache,\n  utilities,\n  Types,\n  metaData,\n} from '@cornerstonejs/core';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationDataStack } from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\n\nconst enable = function (element: HTMLDivElement): void {\n  const { viewport } = getEnabledElement(element);\n\n  if (!(viewport instanceof StackViewport)) {\n    return;\n  }\n\n  element.addEventListener(\n    Enums.Events.STACK_NEW_IMAGE,\n    _imageChangeEventListener as EventListener\n  );\n  // this listener handles the segmentation modifications\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    _imageChangeEventListener as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  const { viewport } = getEnabledElement(element);\n\n  if (!(viewport instanceof StackViewport)) {\n    return;\n  }\n\n  element.removeEventListener(\n    Enums.Events.STACK_NEW_IMAGE,\n    _imageChangeEventListener as EventListener\n  );\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    _imageChangeEventListener as EventListener\n  );\n};\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nfunction _imageChangeEventListener(evt) {\n  const eventData = evt.detail;\n  const { viewportId, renderingEngineId } = eventData;\n  const { viewport } = getEnabledElementByIds(\n    viewportId,\n    renderingEngineId\n  ) as { viewport: Types.IStackViewport };\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (!toolGroup) {\n    return;\n  }\n\n  let toolGroupSegmentationRepresentations =\n    SegmentationState.getSegmentationRepresentations(toolGroup.id) || [];\n\n  toolGroupSegmentationRepresentations =\n    toolGroupSegmentationRepresentations.filter(\n      (representation) => representation.type === Representations.Labelmap\n    );\n\n  if (!toolGroupSegmentationRepresentations?.length) {\n    return;\n  }\n\n  const segmentationRepresentations = {};\n  toolGroupSegmentationRepresentations.forEach((representation) => {\n    const segmentation = SegmentationState.getSegmentation(\n      representation.segmentationId\n    );\n\n    if (!segmentation) {\n      return;\n    }\n\n    const labelmapData =\n      segmentation.representationData[Representations.Labelmap];\n\n    if (isVolumeSegmentation(labelmapData)) {\n      return;\n    }\n\n    const { imageIdReferenceMap } =\n      labelmapData as LabelmapSegmentationDataStack;\n\n    segmentationRepresentations[representation.segmentationRepresentationUID] =\n      {\n        imageIdReferenceMap,\n      };\n  });\n\n  const representationList = Object.keys(segmentationRepresentations);\n  const currentImageId = viewport.getCurrentImageId();\n  const actors = viewport.getActors();\n\n  actors.forEach((actor) => {\n    if (!representationList.includes(actor.uid)) {\n      return;\n    }\n    const segmentationActor = actor.actor;\n\n    const { imageIdReferenceMap } = segmentationRepresentations[actor.uid];\n\n    const derivedImageId = imageIdReferenceMap.get(currentImageId);\n\n    const segmentationImageData = segmentationActor.getMapper().getInputData();\n\n    if (!derivedImageId) {\n      // this means that this slice doesn't have a segmentation for this representation\n      // this can be a case where the segmentation was added to certain slices only\n      // so we can keep the actor but empty out the imageData\n      const scalarArray = vtkDataArray.newInstance({\n        name: 'Pixels',\n        numberOfComponents: 1,\n        values: new Uint8Array(segmentationImageData.getNumberOfPoints()),\n      });\n\n      const imageData = vtkImageData.newInstance();\n      imageData.getPointData().setScalars(scalarArray);\n      segmentationActor.getMapper().setInputData(imageData);\n      return;\n    }\n\n    const derivedImage = cache.getImage(derivedImageId);\n\n    const { origin, dimensions, spacing, direction } =\n      viewport.getImageDataMetadata(derivedImage);\n\n    segmentationImageData.setOrigin(origin);\n    segmentationImageData.modified();\n\n    if (\n      segmentationImageData.getDimensions()[0] !== dimensions[0] ||\n      segmentationImageData.getDimensions()[1] !== dimensions[1]\n    ) {\n      // IMPORTANT: Not sure why we can't just update the dimensions\n      // and the orientation of the image data and then call modified\n      // I tried calling modified on everything, but seems like we should remove\n      // and add the actor again below\n      viewport.removeActors([actor.uid]);\n      viewport.addImages(\n        [\n          {\n            imageId: derivedImageId,\n            actorUID: actor.uid,\n            callback: ({ imageActor }) => {\n              const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: [...derivedImage.getPixelData()],\n              });\n\n              const imageData = vtkImageData.newInstance();\n\n              imageData.setDimensions(dimensions[0], dimensions[1], 1);\n              imageData.setSpacing(spacing);\n              imageData.setDirection(direction);\n              imageData.setOrigin(origin);\n              imageData.getPointData().setScalars(scalarArray);\n\n              imageActor.getMapper().setInputData(imageData);\n            },\n          },\n        ],\n        true,\n        false\n      );\n\n      triggerSegmentationRender(toolGroup.id);\n      return;\n    }\n\n    utilities.updateVTKImageDataWithCornerstoneImage(\n      segmentationImageData,\n      derivedImage\n    );\n    viewport.render();\n\n    // This is put here to make sure that the segmentation is rendered\n    // for the initial image as well after that we don't need it since\n    // stack new image is called when changing slices\n    if (evt.type === Enums.Events.IMAGE_RENDERED) {\n      // unsubscribe after the initial render\n      viewport.element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        _imageChangeEventListener as EventListener\n      );\n    }\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool, BaseTool } from '../tools';\nimport { Annotation } from '../types';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\n\n/**\n * Get the annotation that is close to the provided canvas point, it will return\n * the first annotation that is found.\n *\n * @param element - The element to search for an annotation on.\n * @param canvasPoint - The canvasPoint on the page where the user clicked.\n * @param proximity - The distance from the canvasPoint to the annotation.\n * @returns The annotation for the element\n */\nfunction getAnnotationNearPoint(\n  element: HTMLDivElement,\n  canvasPoint: Types.Point2,\n  proximity = 5\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    throw new Error('getAnnotationNearPoint: enabledElement not found');\n  }\n\n  return getAnnotationNearPointOnEnabledElement(\n    enabledElement,\n    canvasPoint,\n    proximity\n  );\n}\n\n/**\n * \"Find the annotation near the point on the enabled element.\" it will return the\n * first annotation that is found.\n *\n * @param enabledElement - The element that is currently active.\n * @param point - The point to search near.\n * @param proximity - The distance from the point that the annotation must\n * be within.\n * @returns A Annotation object.\n */\nfunction getAnnotationNearPointOnEnabledElement(\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const { renderingEngineId, viewportId } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const { _toolInstances: tools } = toolGroup;\n  for (const name in tools) {\n    const found = findAnnotationNearPointByTool(\n      tools[name],\n      enabledElement,\n      point,\n      proximity\n    );\n    if (found) {\n      return found;\n    }\n  }\n\n  return null;\n}\n\n/**\n * For the provided toolClass, it will find the annotation that is near the point,\n * it will return the first annotation that is found.\n *\n * @param tool - AnnotationTool\n * @param enabledElement - The element that is currently active.\n * @param point - The point in the image where the user clicked.\n * @param proximity - The distance from the point that the tool must be\n * within to be considered \"near\" the point.\n * @returns The annotation object that is being returned is the annotation object that\n * is being used in the tool.\n */\nfunction findAnnotationNearPointByTool(\n  tool: AnnotationTool,\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function does not return closest annotation. It just returns\n  // the first annotation that is found in the proximity. BUT, we are not using\n  // the function anywhere.\n  const { viewport } = enabledElement;\n\n  const annotations = getAnnotations(\n    (tool.constructor as typeof BaseTool).toolName,\n    viewport?.element\n  );\n  const currentId = viewport?.getCurrentImageId?.();\n  if (annotations?.length) {\n    const { element } = enabledElement.viewport;\n    for (const annotation of annotations) {\n      const referencedImageId = annotation.metadata?.referencedImageId;\n      if (\n        (currentId && referencedImageId && currentId !== referencedImageId) ||\n        !tool.isPointNearTool\n      ) {\n        continue;\n      }\n\n      if (\n        tool.isPointNearTool(element, annotation, point, proximity, '') ||\n        tool.getHandleNearImagePoint(element, annotation, point, proximity)\n      ) {\n        return annotation;\n      }\n    }\n  }\n  return null;\n}\n\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n */\nfunction isObject(value) {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport default isObject;\n","import isObject from './isObject';\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF =\n    !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  wait = Number(wait) || 0;\n  if (isObject(options)) {\n    leading = Boolean(options.leading);\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n\n    return result;\n  }\n\n  function startTimer(pendingFunc, wait) {\n    if (useRAF) {\n      return window.requestAnimationFrame(pendingFunc);\n    }\n\n    return setTimeout(pendingFunc, wait);\n  }\n\n  function cancelTimer(id) {\n    if (useRAF) {\n      return window.cancelAnimationFrame(id);\n    }\n    clearTimeout(id);\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = startTimer(timerExpired, wait);\n\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  function timerExpired() {\n    const time = Date.now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      cancelTimer(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(Date.now());\n  }\n\n  function pending() {\n    return timerId !== undefined;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this; // eslint-disable-line consistent-this\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = startTimer(timerExpired, wait);\n\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  debounced.pending = pending;\n\n  return debounced;\n}\n\nexport default debounce;\n","import debounce from './debounce';\nimport isObject from './isObject';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', throttle(updatePosition, 100))\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = throttle(renewToken, 300000, { 'trailing': false })\n * jQuery(element).on('click', throttled)\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel)\n */\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? Boolean(options.leading) : leading;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n","/**\n * Clips a value to an upper and lower bound.\n * @export @public @method\n * @name clip\n *\n * @param  {number} val  The value to clip.\n * @param  {number} low  The lower bound.\n * @param  {number} high The upper bound.\n * @returns {number}      The clipped value.\n */\nexport function clip(val, low, high) {\n  return Math.min(Math.max(low, val), high);\n}\n\n/**\n * Clips a value within a box.\n * @export @public @method\n * @name clipToBox\n *\n * @param  {Object} point The point to clip\n * @param  {Object} box   The bounding box to clip to.\n * @returns {Object}       The clipped point.\n */\nexport function clipToBox(point, box) {\n  // Clip an {x, y} point to a box of size {width, height}\n  point.x = clip(point.x, 0, box.width);\n  point.y = clip(point.y, 0, box.height);\n}\n\nexport default clip;\n","import { utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\n\n/**\n * It adds the provided spacing to the Cornerstone internal calibratedPixelSpacing\n * metadata provider, then it invalidates all the tools that have the imageId as\n * their reference imageIds. Finally, it triggers a re-render for invalidated annotations.\n * @param imageId - ImageId for the calibrated image\n * @param rowPixelSpacing - Spacing in row direction\n * @param calibrationOrScale - either the calibration object or a scale value\n */\nexport default function calibrateImageSpacing(\n  imageId: string,\n  renderingEngine: Types.IRenderingEngine,\n  calibrationOrScale: Types.IImageCalibration | number\n): void {\n  // Handle simple parameter version\n  if (typeof calibrationOrScale === 'number') {\n    calibrationOrScale = {\n      type: Enums.CalibrationTypes.USER,\n      scale: calibrationOrScale,\n    };\n  }\n  // 1. Add the calibratedPixelSpacing metadata to the metadata\n  calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n\n  // 2. Update the actor for stackViewports\n  const viewports = renderingEngine.getStackViewports();\n\n  // 2.1 If imageId is already being used in a stackViewport -> update actor\n  viewports.forEach((viewport) => {\n    const imageIds = viewport.getImageIds();\n    if (imageIds.includes(imageId)) {\n      viewport.calibrateSpacing(imageId);\n    }\n  });\n\n  // 2.2 If imageId is cached but not being displayed in a viewport, stackViewport\n  // will handle using the calibratedPixelSpacing since it has been added\n  // to the provider\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\n\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\n\nconst SUPPORTED_REGION_DATA_TYPES = [\n  1, // Tissue\n];\n\nconst SUPPORTED_LENGTH_VARIANT = [\n  '3,3', // x: cm  &  y:cm\n];\n\nconst SUPPORTED_PROBE_VARIANT = [\n  '4,3', // x: seconds  &  y : cm\n];\n\nconst UNIT_MAPPING = {\n  3: 'cm',\n  4: 'seconds',\n};\n\nconst EPS = 1e-3;\n\n/**\n * Extracts the length units and the type of calibration for those units\n * into the response.  The length units will typically be either mm or px\n * while the calibration type can be any of a number of different calibration types.\n *\n * Volumetric images have no calibration type, so are just the raw mm.\n *\n * TODO: Handle region calibration\n *\n * @param handles - used to detect if the spacing information is different\n *   between various points (eg angled ERMF or US Region).\n *   Currently unused, but needed for correct US Region handling\n * @param image - to extract the calibration from\n *        image.calibration - calibration value to extract units form\n * @returns String containing the units and type of calibration\n */\nconst getCalibratedLengthUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  // Anachronistic - moving to using calibration consistently, but not completed yet\n  const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  if (\n    !calibration ||\n    (!calibration.type && !calibration.sequenceOfUltrasoundRegions)\n  ) {\n    return units;\n  }\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n    return PIXEL_UNITS;\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\n\nconst SQUARE = '\\xb2';\n/**\n *  Extracts the area units, including the squared sign plus calibration type.\n */\nconst getCalibratedAreaUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;\n  if (!calibration || !calibration.type) {\n    return units;\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\n\n/**\n * Gets the scale divisor for converting from internal spacing to\n * image spacing for calibrated images.\n */\nconst getCalibratedScale = (image, handles = []) => {\n  if (image.calibration?.sequenceOfUltrasoundRegions) {\n    // image.spacing / image.us.space\n  } else if (image.calibration?.scale) {\n    return image.calibration.scale;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * Extracts the calibrated length units, area units, and the scale\n * for converting from internal spacing to image spacing.\n *\n * @param handles - to detect if spacing information is different between points\n * @param image - to extract the calibration from\n * @returns Object containing the units, area units, and scale\n */\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n  const [imageIndex1, imageIndex2] = handles;\n  const { calibration, hasPixelSpacing } = image;\n  let units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  const areaUnits = units + SQUARE;\n  let scale = 1;\n  let calibrationType = '';\n\n  if (\n    !calibration ||\n    (!calibration.type && !calibration.sequenceOfUltrasoundRegions)\n  ) {\n    return { units, areaUnits, scale };\n  }\n\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n    return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };\n  }\n\n  if (calibration.sequenceOfUltrasoundRegions) {\n    let regions = calibration.sequenceOfUltrasoundRegions.filter(\n      (region) =>\n        imageIndex1[0] >= region.regionLocationMinX0 &&\n        imageIndex1[0] <= region.regionLocationMaxX1 &&\n        imageIndex1[1] >= region.regionLocationMinY0 &&\n        imageIndex1[1] <= region.regionLocationMaxY1 &&\n        imageIndex2[0] >= region.regionLocationMinX0 &&\n        imageIndex2[0] <= region.regionLocationMaxX1 &&\n        imageIndex2[1] >= region.regionLocationMinY0 &&\n        imageIndex2[1] <= region.regionLocationMaxY1\n    );\n\n    // If we are not in a region at all we should show the underlying calibration\n    // which might be the mm spacing for the image\n    if (!regions?.length) {\n      return { units, areaUnits, scale };\n    }\n\n    // if we are in a region then it is the question of whether we support it\n    // or not. If we do not support it we should show px\n\n    regions = regions.filter(\n      (region) =>\n        SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n        SUPPORTED_LENGTH_VARIANT.includes(\n          `${region.physicalUnitXDirection},${region.physicalUnitYDirection}`\n        )\n    );\n\n    if (!regions.length) {\n      return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };\n    }\n\n    // Todo: expand on this logic\n    const region = regions[0];\n\n    const physicalDeltaX = Math.abs(region.physicalDeltaX);\n    const physicalDeltaY = Math.abs(region.physicalDeltaY);\n\n    // if we are in a supported region then we should check if the\n    // physicalDeltaX and physicalDeltaY are the same. If they are not\n    // then we should show px again, but if they are the same then we should\n    // show the units\n    const isSamePhysicalDelta = utilities.isEqual(\n      physicalDeltaX,\n      physicalDeltaY,\n      EPS\n    );\n\n    if (isSamePhysicalDelta) {\n      scale = 1 / (physicalDeltaX * physicalDeltaY * 100);\n      calibrationType = 'US Region';\n      units = 'mm';\n    } else {\n      return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };\n    }\n  } else if (calibration.scale) {\n    scale = calibration.scale;\n  }\n\n  return {\n    units: units + (calibrationType ? ` ${calibrationType}` : ''),\n    areaUnits: areaUnits + (calibrationType ? ` ${calibrationType}` : ''),\n    scale,\n  };\n};\n\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n  const [imageIndex] = handles;\n  const { calibration } = image;\n  let units = ['raw'];\n  let values = [null];\n  let calibrationType = '';\n\n  if (\n    !calibration ||\n    (!calibration.type && !calibration.sequenceOfUltrasoundRegions)\n  ) {\n    return { units, values };\n    // Todo: add support for other scenarios\n  }\n\n  if (calibration.sequenceOfUltrasoundRegions) {\n    // for Probe tool\n    const supportedRegionsMetadata =\n      calibration.sequenceOfUltrasoundRegions.filter(\n        (region) =>\n          SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n          SUPPORTED_PROBE_VARIANT.includes(\n            `${region.physicalUnitXDirection},${region.physicalUnitYDirection}`\n          )\n      );\n\n    if (!supportedRegionsMetadata?.length) {\n      return { units, values };\n    }\n\n    const region = supportedRegionsMetadata.find(\n      (region) =>\n        imageIndex[0] >= region.regionLocationMinX0 &&\n        imageIndex[0] <= region.regionLocationMaxX1 &&\n        imageIndex[1] >= region.regionLocationMinY0 &&\n        imageIndex[1] <= region.regionLocationMaxY1\n    );\n\n    if (!region) {\n      return { units, values };\n    }\n\n    // Todo: I think this is a ok assumption for now that if the referencePixelX0 and referencePixelY0\n    // are not defined, then we can assume 0 for them\n    const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n    const { physicalDeltaX, physicalDeltaY } = region;\n\n    const yValue =\n      (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n      physicalDeltaY;\n\n    const xValue =\n      (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n      physicalDeltaX;\n\n    calibrationType = 'US Region';\n    values = [xValue, yValue];\n    units = [\n      UNIT_MAPPING[region.physicalUnitXDirection],\n      UNIT_MAPPING[region.physicalUnitYDirection],\n    ];\n  }\n\n  return {\n    units,\n    values,\n    calibrationType,\n  };\n};\n\n/** Gets the aspect ratio of the screen display relative to the image\n * display in order to square up measurement values.\n * That is, suppose the spacing on the image is 1, 0.5 (x,y spacing)\n * This is displayed at 1, 1 spacing on screen, then the\n * aspect value will be 1/0.5 = 2\n */\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\n\nexport default getCalibratedLengthUnits;\n\nexport {\n  getCalibratedAreaUnits,\n  getCalibratedLengthUnits,\n  getCalibratedLengthUnitsAndScale,\n  getCalibratedScale,\n  getCalibratedAspect,\n  getCalibratedProbeUnitsAndValue,\n};\n","import type { Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\n\nexport function triggerAnnotationRenderForViewportIds(\n  renderingEngine: Types.IRenderingEngine,\n  viewportIdsToRender: string[]\n): void {\n  if (!viewportIdsToRender.length) {\n    return;\n  }\n\n  viewportIdsToRender.forEach((viewportId) => {\n    const { element } = renderingEngine.getViewport(viewportId);\n    triggerAnnotationRender(element);\n  });\n}\n\nexport default triggerAnnotationRenderForViewportIds;\n","import {\n  StackViewport,\n  Types,\n  VolumeViewport,\n  eventTarget,\n  EVENTS,\n  utilities as csUtils,\n  getEnabledElement,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport { ScrollOptions, EventTypes } from '../types';\n\n/**\n * It scrolls one slice in the Stack or Volume Viewport, it uses the options provided\n * to determine the slice to scroll to. For Stack Viewport, it scrolls in the 1 or -1\n * direction, for Volume Viewport, it uses the camera and focal point to determine the\n * slice to scroll to based on the spacings.\n * @param viewport - The viewport in which to scroll\n * @param options - Options to use for scrolling, including direction, invert, and volumeId\n * @returns\n */\nexport default function scroll(\n  viewport: Types.IViewport,\n  options: ScrollOptions\n): void {\n  // check if viewport is disabled then throw error\n  const enabledElement = getEnabledElement(viewport.element);\n\n  if (!enabledElement) {\n    throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n  }\n\n  if (\n    viewport instanceof StackViewport &&\n    viewport.getImageIds().length === 0\n  ) {\n    throw new Error('Scroll::Stack Viewport has no images');\n  }\n\n  const { type: viewportType } = viewport;\n  const { volumeId, delta, scrollSlabs } = options;\n\n  if (viewport instanceof StackViewport) {\n    viewport.scroll(delta, options.debounceLoading, options.loop);\n  } else if (viewport instanceof VolumeViewport) {\n    scrollVolume(viewport, volumeId, delta, scrollSlabs);\n  } else if (viewport instanceof VideoViewport) {\n    viewport.scroll(delta);\n  } else {\n    throw new Error(`Not implemented for Viewport Type: ${viewportType}`);\n  }\n}\n\nexport function scrollVolume(\n  viewport: VolumeViewport,\n  volumeId: string,\n  delta: number,\n  scrollSlabs = false\n) {\n  const useSlabThickness = scrollSlabs;\n\n  const { numScrollSteps, currentStepIndex, sliceRangeInfo } =\n    csUtils.getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n\n  if (!sliceRangeInfo) {\n    return;\n  }\n\n  const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n  const { focalPoint, viewPlaneNormal, position } = camera;\n\n  const { newFocalPoint, newPosition } = csUtils.snapFocalPointToSlice(\n    focalPoint,\n    position,\n    sliceRange,\n    viewPlaneNormal,\n    spacingInNormalDirection,\n    delta\n  );\n\n  viewport.setCamera({\n    focalPoint: newFocalPoint,\n    position: newPosition,\n  });\n  viewport.render();\n\n  const desiredStepIndex = currentStepIndex + delta;\n\n  if (\n    (desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n    viewport.getCurrentImageId() // Check that we are in the plane of acquistion\n  ) {\n    // One common use case of this trigger might be to load the next\n    // volume in a time series or the next segment of a partially loaded volume.\n\n    const VolumeScrollEventDetail = {\n      volumeId,\n      viewport,\n      delta,\n      desiredStepIndex,\n      currentStepIndex,\n      numScrollSteps,\n      currentImageId: viewport.getCurrentImageId(),\n    };\n\n    csUtils.triggerEvent(\n      eventTarget,\n      EVENTS.VOLUME_SCROLL_OUT_OF_BOUNDS,\n      VolumeScrollEventDetail as EventTypes.VolumeScrollOutOfBoundsEventDetail\n    );\n  }\n}\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n  Types,\n} from '@cornerstonejs/core';\nimport JumpToSliceOptions from '../../types/JumpToSliceOptions';\nimport clip from '../clip';\nimport scroll from '../scroll';\n\n/**\n * It uses the imageIndex in the Options to scroll to the slice that is intended.\n * It works for both Stack and Volume viewports. In VolumeViewports, the imageIndex\n * should be given with respect to the index in the 3D image in the view direction\n * (i.e. the index of the slice in Axial, Sagittal, Coronal, or Oblique).\n *\n * @param element - the HTML Div element scrolling inside\n * @param options - the options used for jumping to a slice\n * @returns Promise that resolves to ImageIdIndex\n */\nasync function jumpToSlice(\n  element: HTMLDivElement,\n  options = {} as JumpToSliceOptions\n): Promise<void> {\n  const { imageIndex, debounceLoading, volumeId } = options;\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error('Element has been disabled');\n  }\n\n  const { viewport } = enabledElement;\n\n  const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(\n    viewport,\n    debounceLoading\n  );\n\n  const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n  const delta = imageIndexToJump - currentImageIndex;\n\n  scroll(viewport, { delta, debounceLoading, volumeId });\n}\n\nfunction _getImageSliceData(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  debounceLoading?: boolean\n): Types.ImageSliceData {\n  if (viewport instanceof StackViewport) {\n    return {\n      numberOfSlices: viewport.getImageIds().length,\n      imageIndex: debounceLoading\n        ? viewport.getTargetImageIdIndex()\n        : viewport.getCurrentImageIdIndex(),\n    };\n  } else if (viewport instanceof VolumeViewport) {\n    return csUtils.getImageSliceDataForVolumeViewport(viewport);\n  } else {\n    throw new Error('Unsupported viewport type');\n  }\n}\n\nfunction _getImageIndexToJump(\n  numberOfSlices: number,\n  imageIndex: number\n): number {\n  const lastSliceIndex = numberOfSlices - 1;\n\n  return clip(imageIndex, 0, lastSliceIndex);\n}\n\nexport default jumpToSlice;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport BoundsIJK from '../types/BoundsIJK';\n\nexport type PointInShape = {\n  value: number;\n  index: number;\n  pointIJK: vec3;\n  pointLPS: vec3;\n};\n\nexport type PointInShapeCallback = ({\n  value,\n  index,\n  pointIJK,\n  pointLPS,\n}: {\n  value: number;\n  index: number;\n  pointIJK: vec3;\n  pointLPS: vec3;\n}) => void;\n\nexport type ShapeFnCriteria = (pointIJK: vec3, pointLPS: vec3) => boolean;\n\n/**\n * For each point in the image (If boundsIJK is not provided, otherwise, for each\n * point in the provided bounding box), It runs the provided callback IF the point\n * passes the provided criteria to be inside the shape (which is defined by the\n * provided pointInShapeFn)\n *\n * @param imageData - The image data object.\n * @param dimensions - The dimensions of the image.\n * @param pointInShapeFn - A function that takes a point in LPS space and returns\n * true if the point is in the shape and false if it is not.\n * @param callback - A function that will be called for\n * every point in the shape.\n * @param boundsIJK - The bounds of the volume in IJK coordinates.\n */\nexport default function pointInShapeCallback(\n  imageData: vtkImageData | Types.CPUImageData,\n  pointInShapeFn: ShapeFnCriteria,\n  callback?: PointInShapeCallback,\n  boundsIJK?: BoundsIJK\n): Array<PointInShape> {\n  let iMin, iMax, jMin, jMax, kMin, kMax;\n\n  let scalarData;\n\n  // if getScalarData is a method on imageData\n  if ((imageData as Types.CPUImageData).getScalarData) {\n    scalarData = (imageData as Types.CPUImageData).getScalarData();\n  } else {\n    scalarData = (imageData as vtkImageData)\n      .getPointData()\n      .getScalars()\n      .getData();\n  }\n\n  const dimensions = imageData.getDimensions();\n\n  if (!boundsIJK) {\n    iMin = 0;\n    iMax = dimensions[0];\n    jMin = 0;\n    jMax = dimensions[1];\n    kMin = 0;\n    kMax = dimensions[2];\n  } else {\n    [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n  }\n\n  const start = vec3.fromValues(iMin, jMin, kMin);\n\n  const direction = imageData.getDirection();\n  const rowCosines = direction.slice(0, 3);\n  const columnCosines = direction.slice(3, 6);\n  const scanAxisNormal = direction.slice(6, 9);\n\n  const spacing = imageData.getSpacing();\n  const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n\n  // @ts-ignore will be fixed in vtk-master\n  const worldPosStart = imageData.indexToWorld(start);\n\n  const rowStep = vec3.fromValues(\n    rowCosines[0] * rowSpacing,\n    rowCosines[1] * rowSpacing,\n    rowCosines[2] * rowSpacing\n  );\n\n  const columnStep = vec3.fromValues(\n    columnCosines[0] * columnSpacing,\n    columnCosines[1] * columnSpacing,\n    columnCosines[2] * columnSpacing\n  );\n\n  const scanAxisStep = vec3.fromValues(\n    scanAxisNormal[0] * scanAxisSpacing,\n    scanAxisNormal[1] * scanAxisSpacing,\n    scanAxisNormal[2] * scanAxisSpacing\n  );\n\n  const xMultiple =\n    scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n  const yMultiple = dimensions[0] * xMultiple;\n  const zMultiple = dimensions[1] * yMultiple;\n\n  const pointsInShape: Array<PointInShape> = [];\n\n  const currentPos = vec3.clone(worldPosStart);\n\n  for (let k = kMin; k <= kMax; k++) {\n    const startPosJ = vec3.clone(currentPos);\n\n    for (let j = jMin; j <= jMax; j++) {\n      const startPosI = vec3.clone(currentPos);\n\n      for (let i = iMin; i <= iMax; i++) {\n        const pointIJK: Types.Point3 = [i, j, k];\n\n        // The current world position (pointLPS) is now in currentPos\n        if (pointInShapeFn(currentPos as Types.Point3, currentPos)) {\n          const index = k * zMultiple + j * yMultiple + i * xMultiple;\n          let value;\n          if (xMultiple > 2) {\n            value = [\n              scalarData[index],\n              scalarData[index + 1],\n              scalarData[index + 2],\n            ];\n          } else {\n            value = scalarData[index];\n          }\n\n          pointsInShape.push({ value, index, pointIJK, pointLPS: currentPos });\n          if (callback) {\n            callback({ value, index, pointIJK, pointLPS: currentPos });\n          }\n        }\n\n        // Increment currentPos by rowStep for the next iteration\n        vec3.add(currentPos, currentPos, rowStep);\n      }\n\n      // Reset currentPos to the start of the next J line and increment by columnStep\n      vec3.copy(currentPos, startPosI);\n      vec3.add(currentPos, currentPos, columnStep);\n    }\n\n    // Reset currentPos to the start of the next K slice and increment by scanAxisStep\n    vec3.copy(currentPos, startPosJ);\n    vec3.add(currentPos, currentPos, scanAxisStep);\n  }\n\n  return pointsInShape;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Sphere = {\n  center: Types.Point3 | vec3;\n  radius: number;\n  // Square of the radius\n  radius2?: number;\n};\n\n/**\n * Checks if a point is inside a sphere. Note: this is similar to the\n * `pointInEllipse` function, but since we don't need checks for the\n * ellipse's rotation in different views, we can use a simpler equation\n * which would be faster (no if statements).\n *\n * This is safe to call for point in circle as long as you don't call it with\n * anything off-plane - that is, a circle is a degenerate sphere that is\n * intersected with the primary plane.\n *\n * @param sphere - Sphere object with center and radius and radius squared\n *     as radius2 if you are calling this a huge number of times.\n * @param pointLPS - the point to check in world coordinates\n * @returns boolean\n */\nexport default function pointInSphere(sphere: Sphere, pointLPS: vec3): boolean {\n  const { center, radius } = sphere;\n  const radius2 = sphere.radius2 || radius * radius;\n\n  return (\n    (pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n      (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n      (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n    radius2\n  );\n}\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Uses the current bounds of the 2D rectangle and extends it in the view axis by numSlices\n * It compares min and max of each IJK to find the view axis (for axial, zMin === zMax) and\n * then calculates the extended range. It will assume the slice is relative to the\n * current slice and will add the given slices to the current max of the boundingBox.\n * @param boundsIJK - [[iMin, iMax], [jMin, jMax], [kMin, kMax]]\n * @param slices - number of slices to project before and after\n * @returns extended bounds\n */\nfunction extend2DBoundingBoxInViewAxis(\n  boundsIJK: [Types.Point2, Types.Point2, Types.Point2],\n  numSlicesToProject: number\n): [Types.Point2, Types.Point2, Types.Point2] {\n  // find which index in boundsIJK has the same first and last value\n  const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n\n  if (sliceNormalIndex === -1) {\n    throw new Error('3D bounding boxes not supported in an oblique plane');\n  }\n\n  // get the index and subtract slices from the min and add to the max\n  boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n  boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n  return boundsIJK;\n}\n\nexport default extend2DBoundingBoxInViewAxis;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * With a given vertices (points) coordinates in IJK, it calculates the minimum and maximum\n * coordinate in each axis, and returns them. If dimensions are provided it also\n * clip the min, max to the provided width, height and depth\n *\n * @param points - shape corner points coordinates (IJK)\n * @param dimensions - dimensions of the image\n * @returns [[xMin,xMax],[yMin,yMax], [zMin,zMax]]\n */\nfunction getBoundingBoxAroundShape(\n  points: Types.Point3[],\n  dimensions?: Types.Point3\n): [Types.Point2, Types.Point2, Types.Point2] {\n  let xMin = Infinity;\n  let xMax = 0;\n  let yMin = Infinity;\n  let yMax = 0;\n  let zMin = Infinity;\n  let zMax = 0;\n\n  points.forEach((p) => {\n    xMin = Math.min(p[0], xMin);\n    xMax = Math.max(p[0], xMax);\n    yMin = Math.min(p[1], yMin);\n    yMax = Math.max(p[1], yMax);\n    zMin = Math.min(p[2], zMin);\n    zMax = Math.max(p[2], zMax);\n  });\n\n  xMin = Math.floor(xMin);\n  xMax = Math.floor(xMax);\n  yMin = Math.floor(yMin);\n  yMax = Math.floor(yMax);\n  zMin = Math.floor(zMin);\n  zMax = Math.floor(zMax);\n\n  if (dimensions) {\n    // clip the min, max to the provided width, height and depth\n    const [width, height, depth] = dimensions;\n    xMin = Math.max(0, xMin);\n    xMax = Math.min(width - 1, xMax);\n    yMin = Math.max(0, yMin);\n    yMax = Math.min(height - 1, yMax);\n    zMin = Math.max(0, zMin);\n    zMax = Math.min(depth - 1, zMax);\n  }\n\n  return [\n    [xMin, xMax],\n    [yMin, yMax],\n    [zMin, zMax],\n  ];\n}\n\nexport default getBoundingBoxAroundShape;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport pointInShapeCallback, {\n  PointInShapeCallback,\n} from './pointInShapeCallback';\nimport { BoundsIJK } from '../types';\nimport { getBoundingBoxAroundShape } from './boundingBox';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * Given an imageData, and the great circle top and bottom points of a sphere,\n * this function will run the callback for each point of the imageData that is\n * within the sphere defined by the great circle points. If the viewport\n * is provided, region of interest will be an accurate approximation of the\n * sphere (using viewport camera), and the resulting performance will be\n * better.\n *\n * @privateRemarks great circle also known as orthodrome is the intersection of\n * the sphere and the plane that passes through the center of the sphere\n *\n * @param imageData - The volume imageData\n * @param circlePoints - bottom and top points of the great circle in world coordinates\n * @param callback - A callback function that will be called for each point in the shape.\n */\nexport default function pointInSurroundingSphereCallback(\n  imageData: vtkImageData,\n  circlePoints: [Types.Point3, Types.Point3],\n  callback: PointInShapeCallback,\n  viewport?: Types.IVolumeViewport\n): void {\n  // We can run the sphere equation to determine if a point is inside\n  // the sphere; however, since the imageData dimensions can be quite large, we\n  // can narrow down the search by estimating the bounds of the sphere in index\n  // space.\n  const { boundsIJK, centerWorld, radiusWorld } = _getBounds(\n    circlePoints,\n    imageData,\n    viewport\n  );\n\n  const sphereObj = {\n    center: centerWorld,\n    radius: radiusWorld,\n  };\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS) => pointInSphere(sphereObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n}\n\nfunction _getBounds(\n  circlePoints: [Types.Point3, Types.Point3],\n  imageData: vtkImageData,\n  viewport\n): {\n  boundsIJK: BoundsIJK;\n  centerWorld: Types.Point3;\n  radiusWorld: number;\n} {\n  const [bottom, top] = circlePoints;\n\n  // Sphere center in world\n  const centerWorld = vec3.fromValues(\n    (bottom[0] + top[0]) / 2,\n    (bottom[1] + top[1]) / 2,\n    (bottom[2] + top[2]) / 2\n  );\n\n  // sphere radius in world\n  const radiusWorld = vec3.distance(bottom, top) / 2;\n\n  let boundsIJK;\n\n  if (!viewport) {\n    // If no viewport is provide (no camera), we can estimate the bounding box\n    // of the sphere in index space.\n    // This is done by calculating the maximum value for radius in the index\n    // space (since the radius is in world space, we need to convert it to index, and\n    // each dimensions can have a different scale factor). Therefore, by finding\n    // the minimum spacing value in the imageData, we can calculate the maximum\n    // radius in index space and use that to calculate the bounds of the sphere\n    // This will not be accurate, but it is a good first approximation.\n    // sphere center in index\n    const centerIJK = transformWorldToIndex(\n      imageData,\n      centerWorld as Types.Point3\n    );\n\n    const spacings = imageData.getSpacing();\n    const minSpacing = Math.min(...spacings);\n\n    const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n\n    boundsIJK = [\n      [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n      [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n      [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n    ];\n\n    return {\n      boundsIJK,\n      centerWorld: centerWorld as Types.Point3,\n      radiusWorld,\n    };\n  }\n\n  boundsIJK = _computeBoundsIJKWithCamera(\n    imageData,\n    viewport,\n    circlePoints,\n    centerWorld,\n    radiusWorld\n  );\n\n  return {\n    boundsIJK,\n    centerWorld: centerWorld as Types.Point3,\n    radiusWorld,\n  };\n}\n\nfunction _computeBoundsIJKWithCamera(\n  imageData,\n  viewport,\n  circlePoints,\n  centerWorld,\n  radiusWorld\n) {\n  const [bottom, top] = circlePoints;\n\n  const dimensions = imageData.getDimensions() as Types.Point3;\n  const camera = viewport.getCamera();\n\n  // Calculate viewRight from the camera, this will get used in order to\n  // calculate circles topLeft and bottomRight on different planes of intersection\n  // between sphere and viewPlane\n  const viewUp = vec3.fromValues(\n    camera.viewUp[0],\n    camera.viewUp[1],\n    camera.viewUp[2]\n  );\n  const viewPlaneNormal = vec3.fromValues(\n    camera.viewPlaneNormal[0],\n    camera.viewPlaneNormal[1],\n    camera.viewPlaneNormal[2]\n  );\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n  // we need to find the bounding box of the sphere in the image, e.g., the\n  // topLeftWorld and bottomRightWorld points of the bounding box.\n  // We go from the sphereCenter in the normal direction of amount radius, and\n  // we go left to find the topLeftWorld point of the bounding box. Next we go\n  // in the opposite direction and go right to find the bottomRightWorld point\n  // of the bounding box.\n  const topLeftWorld = vec3.create();\n  const bottomRightWorld = vec3.create();\n\n  vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n\n  // go in the direction of viewRight with the value of radius\n  vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n\n  // convert the world coordinates to index coordinates\n\n  const sphereCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, <Types.Point3>topLeftWorld),\n    <Types.Point3>(\n      transformWorldToIndex(imageData, <Types.Point3>bottomRightWorld)\n    ),\n  ];\n\n  // get the bounding box of the sphere in the image\n  const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n\n  return boundsIJK;\n}\n","/**\n * Truncates decimal points to that there is at least 1+precision significant\n * digits.\n *\n * For example, with the default precision 2 (3 significant digits)\n * * Values larger than 100 show no information after the decimal point\n * * Values between 10 and 99 show 1 decimal point\n * * Values between 1 and 9 show 2 decimal points\n *\n * @param value - to return a fixed measurement value from\n * @param precision - defining how many digits after 1..9 are desired\n */\nfunction roundNumber(\n  value: string | number | (string | number)[],\n  precision = 2\n): string {\n  if (Array.isArray(value)) {\n    return value.map((v) => roundNumber(v, precision)).join(', ');\n  }\n  if (value === undefined || value === null || value === '') {\n    return 'NaN';\n  }\n  value = Number(value);\n  if (value < 0.0001) {\n    return `${value}`;\n  }\n  const fixedPrecision =\n    value >= 100\n      ? precision - 2\n      : value >= 10\n      ? precision - 1\n      : value >= 1\n      ? precision\n      : value >= 0.1\n      ? precision + 1\n      : value >= 0.01\n      ? precision + 2\n      : value >= 0.001\n      ? precision + 3\n      : precision + 4;\n  return value.toFixed(fixedPrecision);\n}\n\nexport default roundNumber;\n","import type { Types } from '@cornerstonejs/core';\ninterface Inverts {\n  invXRadiusSq?: number;\n  invYRadiusSq?: number;\n  invZRadiusSq?: number;\n  fast?: boolean;\n  /**\n   * If you call the pointInEllipse.precalculateInverts first, then you\n   * can call precalculated directly instead of having the extra time for\n   * the if conditions.\n   */\n  precalculated?: (pointLPS: Types.Point3) => boolean;\n}\n\n/**\n * Given an ellipse and a point, return true if the point is inside the ellipse\n * @param ellipse - The ellipse object to check against.\n * @param pointLPS - The point in LPS space to test.\n * @param inverts - An object to cache the inverted radius squared values, if you\n * are testing multiple points against the same ellipse then it is recommended to\n * pass in the same object to cache the values. However, there is a simpler way\n * to do this by passing in the fast flag as true, then on the first iteration\n * the values will be cached and on subsequent iterations the cached values will\n * be used.\n *\n * @returns A boolean value.\n */\nexport default function pointInEllipse(\n  ellipse,\n  pointLPS,\n  inverts: Inverts = {}\n) {\n  if (!inverts.precalculated) {\n    precalculatePointInEllipse(ellipse, inverts);\n  }\n  return inverts.precalculated(pointLPS);\n}\n\n/**\n * This will perform some precalculations to make things faster.\n * Ideally, use the 'precalculated' function inside inverts to call the\n * test function.  This minimizes re-reading of variables and only needs the\n * LPS passed each time.\n * That is:\n *\n * ```\n *    const inverts = precalcualtePointInEllipse(ellipse);\n *    if( inverts.precalculated(pointLPS) ) ...\n * ```\n */\nconst precalculatePointInEllipse = (ellipse, inverts: Inverts = {}) => {\n  const { xRadius, yRadius, zRadius } = ellipse;\n\n  // This will run only once since we are caching the values in the same\n  // object that is passed in.\n  if (\n    inverts.invXRadiusSq === undefined ||\n    inverts.invYRadiusSq === undefined ||\n    inverts.invZRadiusSq === undefined\n  ) {\n    inverts.invXRadiusSq = xRadius !== 0 ? 1 / xRadius ** 2 : 0;\n    inverts.invYRadiusSq = yRadius !== 0 ? 1 / yRadius ** 2 : 0;\n    inverts.invZRadiusSq = zRadius !== 0 ? 1 / zRadius ** 2 : 0;\n  }\n\n  const { invXRadiusSq, invYRadiusSq, invZRadiusSq } = inverts;\n  const { center } = ellipse;\n  const [centerL, centerP, centerS] = center;\n\n  inverts.precalculated = (pointLPS) => {\n    // Calculate the sum of normalized squared distances\n    const dx = pointLPS[0] - centerL;\n    let inside = dx * dx * invXRadiusSq;\n    if (inside > 1) {\n      return false;\n    }\n\n    const dy = pointLPS[1] - centerP;\n    inside += dy * dy * invYRadiusSq;\n    if (inside > 1) {\n      return false;\n    }\n\n    const dz = pointLPS[2] - centerS;\n    inside += dz * dz * invZRadiusSq;\n\n    // Check if the point is inside the ellipse\n    return inside <= 1;\n  };\n\n  return inverts;\n};\n\nexport { precalculatePointInEllipse };\n","import type { Types } from '@cornerstonejs/core';\n\nexport type CanvasCoordinates = [\n  Types.Point2, // bottom\n  Types.Point2, // top\n  Types.Point2, // left\n  Types.Point2 // right\n];\n\n/**\n * It takes the canvas coordinates of the ellipse corners and returns the top left and bottom right\n * corners of it\n *\n * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasEllipseCorners(\n  ellipseCanvasPoints: CanvasCoordinates\n): Array<Types.Point2> {\n  const [bottom, top, left, right] = ellipseCanvasPoints;\n\n  const topLeft = <Types.Point2>[left[0], top[1]];\n  const bottomRight = <Types.Point2>[right[0], bottom[1]];\n\n  return [topLeft, bottomRight];\n}\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport pointInShapeCallback from '../../../../utilities/pointInShapeCallback';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * This function determines whether to fill or erase based on what the user\n * initially clicks on.  The behaviour is:\n * 1. If the user clicks on an area that has no active segment index in it,\n *    then assume the user using the active segment index for filling\n * 2. Find the segment index of the pixel the user clicked on, and assume they\n *    want to fill with that segment index.  Use the given segment index for\n *    the fill colour.\n *    a. If the user clicks on the active segment index, then they will fill\n *       with the active segment\n *    b. If the user clicks on the 0 segment index, they will clear the segment\n *       index, erasing the segment.\n *    c. If the user clicks on another segment index, they will \"restore\" that\n *       segment index, so that they can push back the segment area.\n *\n */\nexport default {\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    const { strategySpecificConfiguration } = operationData;\n    if (!strategySpecificConfiguration) {\n      return;\n    }\n    const { centerSegmentIndex } = strategySpecificConfiguration;\n    if (centerSegmentIndex) {\n      operationData.segmentIndex = centerSegmentIndex.segmentIndex;\n    }\n  },\n\n  [StrategyCallbacks.OnInteractionStart]: (\n    operationData: InitializedOperationData\n  ) => {\n    const {\n      segmentIndex,\n      previewSegmentIndex,\n      segmentationVoxelManager: segmentationVoxelManager,\n      centerIJK,\n      strategySpecificConfiguration,\n      imageVoxelManager: imageVoxelManager,\n      segmentationImageData,\n      preview,\n    } = operationData;\n    if (!strategySpecificConfiguration?.useCenterSegmentIndex) {\n      return;\n    }\n    // Get rid of the previous data\n    delete strategySpecificConfiguration.centerSegmentIndex;\n\n    let hasSegmentIndex = false;\n    let hasPreviewIndex = false;\n    const callback = ({ value }) => {\n      hasSegmentIndex ||= value === segmentIndex;\n      hasPreviewIndex ||= value === previewSegmentIndex;\n    };\n\n    pointInShapeCallback(\n      segmentationImageData as unknown,\n      imageVoxelManager.isInObject,\n      callback,\n      segmentationVoxelManager.boundsIJK\n    );\n\n    if (!hasSegmentIndex && !hasPreviewIndex) {\n      return;\n    }\n\n    let existingValue = segmentationVoxelManager.getAtIJKPoint(centerIJK);\n    if (existingValue === previewSegmentIndex) {\n      if (preview) {\n        existingValue = preview.segmentIndex;\n      } else {\n        return;\n      }\n    } else if (hasPreviewIndex) {\n      // Clear the preview area\n      existingValue = null;\n    }\n    operationData.segmentIndex = existingValue;\n    strategySpecificConfiguration.centerSegmentIndex = {\n      segmentIndex: existingValue,\n    };\n  },\n};\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport type BoundsIJK from '../../../../types/BoundsIJK';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Initializes the threshold values for the dynamic threshold.\n * If the threshold is undefined/null, the threshold will be set\n * by looking at the area centered on the centerIJK, with a delta radius,\n * and taking the range of those pixel values.\n * If the threshold is already set, then the range will be extended by just the\n * center voxel at centerIJK.\n */\nexport default {\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    const {\n      centerIJK,\n      strategySpecificConfiguration,\n      segmentationVoxelManager: segmentationVoxelManager,\n      imageVoxelManager: imageVoxelManager,\n      segmentIndex,\n    } = operationData;\n    const { THRESHOLD } = strategySpecificConfiguration;\n\n    if (!THRESHOLD?.isDynamic || !centerIJK || !segmentIndex) {\n      return;\n    }\n\n    const { boundsIJK } = segmentationVoxelManager;\n    const { threshold: oldThreshold, dynamicRadius = 0 } = THRESHOLD;\n    const useDelta = oldThreshold ? 0 : dynamicRadius;\n    const nestedBounds = boundsIJK.map((ijk, idx) => {\n      const [min, max] = ijk;\n      return [\n        Math.max(min, centerIJK[idx] - useDelta),\n        Math.min(max, centerIJK[idx] + useDelta),\n      ];\n    }) as BoundsIJK;\n\n    const threshold = oldThreshold || [Infinity, -Infinity];\n    const callback = ({ value }) => {\n      threshold[0] = Math.min(value, threshold[0]);\n      threshold[1] = Math.max(value, threshold[1]);\n    };\n    imageVoxelManager.forEach(callback, { boundsIJK: nestedBounds });\n\n    operationData.strategySpecificConfiguration.THRESHOLD.threshold = threshold;\n  },\n  // Setup a clear threshold value on mouse/touch down\n  [StrategyCallbacks.OnInteractionStart]: (\n    operationData: InitializedOperationData\n  ) => {\n    const { strategySpecificConfiguration, preview } = operationData;\n    if (!strategySpecificConfiguration?.THRESHOLD?.isDynamic && !preview) {\n      return;\n    }\n    strategySpecificConfiguration.THRESHOLD.threshold = null;\n  },\n};\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Sets up a preview to erase/clear the segment values.\n */\nexport default {\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    operationData.segmentIndex = 0;\n  },\n};\n","import type {\n  FloodFillResult,\n  FloodFillGetter,\n  FloodFillOptions,\n} from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * floodFill.js - Taken from MIT OSS lib - https://github.com/tuzz/n-dimensional-flood-fill\n * Refactored to ES6.\n *\n * @param {function} getter The getter to the elements of your data structure,\n *                          e.g. getter(x,y) for a 2D interprettation of your structure.\n * @param {number[]} seed The seed for your fill. The dimensionality is infered\n *                        by the number of dimensions of the seed.\n * @param {function} [options.onFlood] An optional callback to execute when each pixel is flooded.\n *                             e.g. onFlood(x,y).\n * @param {function} [options.onBoundary] An optional callback to execute whenever a boundary is reached.\n *                                a boundary could be another segmentIndex, or the edge of your\n *                                data structure (i.e. when your getter returns undefined).\n * @param {function} [options.equals] An optional equality method for your datastructure.\n *                            Default is simply value1 = value2.\n * @param {boolean} [options.diagonals] Whether you allow flooding through diagonals. Defaults to false.\n *\n * @returns {Object}\n */\nfunction floodFill(\n  getter: FloodFillGetter,\n  seed: Types.Point2 | Types.Point3,\n  options: FloodFillOptions = {}\n): FloodFillResult {\n  const onFlood = options.onFlood;\n  const onBoundary = options.onBoundary;\n  const equals = options.equals || defaultEquals;\n  const diagonals = options.diagonals || false;\n  const startNode = get(seed);\n  const permutations = prunedPermutations();\n  const stack = [];\n  const flooded = [];\n  const visits = {};\n  const bounds = {};\n\n  stack.push({ currentArgs: seed });\n\n  while (stack.length > 0) {\n    flood(stack.pop());\n  }\n\n  return {\n    flooded,\n    boundaries: boundaries(),\n  };\n\n  function flood(job) {\n    const getArgs = job.currentArgs;\n    const prevArgs = job.previousArgs;\n\n    if (visited(getArgs)) {\n      return;\n    }\n    markAsVisited(getArgs);\n\n    if (member(getArgs)) {\n      markAsFlooded(getArgs);\n      pushAdjacent(getArgs);\n    } else {\n      markAsBoundary(prevArgs);\n    }\n  }\n\n  function visited(key) {\n    return visits[key] === true;\n  }\n\n  function markAsVisited(key) {\n    visits[key] = true;\n  }\n\n  function member(getArgs) {\n    const node = safely(get, [getArgs]);\n\n    return safely(equals, [node, startNode]);\n  }\n\n  function markAsFlooded(getArgs) {\n    flooded.push(getArgs);\n    if (onFlood) {\n      //@ts-ignore\n      onFlood(...getArgs);\n    }\n  }\n\n  function markAsBoundary(prevArgs) {\n    bounds[prevArgs] = prevArgs;\n    if (onBoundary) {\n      //@ts-ignore\n      onBoundary(...prevArgs);\n    }\n  }\n\n  function pushAdjacent(getArgs) {\n    for (let i = 0; i < permutations.length; i += 1) {\n      const perm = permutations[i];\n      const nextArgs = getArgs.slice(0);\n\n      for (let j = 0; j < getArgs.length; j += 1) {\n        nextArgs[j] += perm[j];\n      }\n\n      stack.push({\n        currentArgs: nextArgs,\n        previousArgs: getArgs,\n      });\n    }\n  }\n\n  function get(getArgs) {\n    //@ts-ignore\n    return getter(...getArgs);\n  }\n\n  function safely(f, args) {\n    try {\n      return f(...args);\n    } catch (error) {\n      return;\n    }\n  }\n\n  function prunedPermutations() {\n    const permutations = permute(seed.length);\n\n    return permutations.filter(function (perm) {\n      const count = countNonZeroes(perm);\n\n      return count !== 0 && (count === 1 || diagonals);\n    });\n  }\n\n  function permute(length) {\n    const perms = [];\n\n    const permutation = function (string) {\n      return string.split('').map(function (c) {\n        return parseInt(c, 10) - 1;\n      });\n    };\n\n    for (let i = 0; i < Math.pow(3, length); i += 1) {\n      const string = lpad(i.toString(3), '0', length);\n\n      perms.push(permutation(string));\n    }\n\n    return perms;\n  }\n\n  function boundaries() {\n    const array = [];\n\n    for (const key in bounds) {\n      if (bounds[key] !== undefined) {\n        array.unshift(bounds[key]);\n      }\n    }\n\n    return array;\n  }\n}\n\nfunction defaultEquals(a, b) {\n  return a === b;\n}\n\nfunction countNonZeroes(array) {\n  let count = 0;\n\n  for (let i = 0; i < array.length; i += 1) {\n    if (array[i] !== 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction lpad(string, character, length) {\n  const array = new Array(length + 1);\n  const pad = array.join(character);\n\n  return (pad + string).slice(-length);\n}\n\nexport default floodFill;\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport floodFill from '../../../../utilities/segmentation/floodFill';\nimport { triggerSegmentationDataModified } from '../../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Removes external islands and fills internal islands.\n * External islands are areas of preview which are not connected via fill or\n * preview colours to the clicked/dragged over points.\n * Internal islands are areas of non-preview which are entirely surrounded by\n * colours connected to the clicked/dragged over points.\n */\nexport default {\n  [StrategyCallbacks.OnInteractionEnd]: (\n    operationData: InitializedOperationData\n  ) => {\n    const {\n      previewVoxelManager: previewVoxelManager,\n      segmentationVoxelManager: segmentationVoxelManager,\n      strategySpecificConfiguration,\n      previewSegmentIndex,\n      segmentIndex,\n    } = operationData;\n\n    if (!strategySpecificConfiguration.THRESHOLD || segmentIndex === null) {\n      return;\n    }\n\n    const clickedPoints = previewVoxelManager.getPoints();\n    if (!clickedPoints?.length) {\n      return;\n    }\n\n    if (previewSegmentIndex === undefined) {\n      return;\n    }\n\n    // Ensure the bounds includes the clicked points, otherwise the fill\n    // fails.\n    const boundsIJK = previewVoxelManager\n      .getBoundsIJK()\n      .map((bound, i) => [\n        Math.min(bound[0], ...clickedPoints.map((point) => point[i])),\n        Math.max(bound[1], ...clickedPoints.map((point) => point[i])),\n      ]);\n\n    if (boundsIJK.find((it) => it[0] < 0 || it[1] > 65535)) {\n      // Nothing done, so just skip this\n      return;\n    }\n\n    const floodedSet = new Set<number>();\n    // Returns true for new colour, and false otherwise\n    const getter = (i, j, k) => {\n      if (\n        i < boundsIJK[0][0] ||\n        i > boundsIJK[0][1] ||\n        j < boundsIJK[1][0] ||\n        j > boundsIJK[1][1] ||\n        k < boundsIJK[2][0] ||\n        k > boundsIJK[2][1]\n      ) {\n        return -1;\n      }\n      const index = segmentationVoxelManager.toIndex([i, j, k]);\n      if (floodedSet.has(index)) {\n        // Values already flooded\n        return -2;\n      }\n      const oldVal = segmentationVoxelManager.getAtIndex(index);\n      const isIn =\n        oldVal === previewSegmentIndex || oldVal === segmentIndex ? 1 : 0;\n      if (!isIn) {\n        segmentationVoxelManager.addPoint(index);\n      }\n      // 1 is values that are preview/segment index, 0 is everything else\n      return isIn;\n    };\n\n    let floodedCount = 0;\n\n    const onFlood = (i, j, k) => {\n      const index = segmentationVoxelManager.toIndex([i, j, k]);\n      if (floodedSet.has(index)) {\n        return;\n      }\n      // Fill this point with an indicator that this point is connected\n      previewVoxelManager.setAtIJK(i, j, k, previewSegmentIndex);\n      floodedSet.add(index);\n      floodedCount++;\n    };\n\n    clickedPoints.forEach((clickedPoint, index) => {\n      // @ts-ignore - need to ignore the spread appication to array params\n      if (getter(...clickedPoint) === 1) {\n        floodFill(getter, clickedPoint, {\n          onFlood,\n          diagonals: true,\n        });\n      }\n    });\n\n    let clearedCount = 0;\n    let previewCount = 0;\n\n    const callback = ({ index, pointIJK, value: trackValue }) => {\n      const value = segmentationVoxelManager.getAtIndex(index);\n      if (floodedSet.has(index)) {\n        previewCount++;\n        const newValue =\n          trackValue === segmentIndex ? segmentIndex : previewSegmentIndex;\n        previewVoxelManager.setAtIJKPoint(pointIJK, newValue);\n      } else if (value === previewSegmentIndex) {\n        clearedCount++;\n        const newValue = trackValue ?? 0;\n        previewVoxelManager.setAtIJKPoint(pointIJK, newValue);\n      }\n    };\n\n    previewVoxelManager.forEach(callback, {});\n\n    if (floodedCount - previewCount !== 0) {\n      console.warn(\n        'There were flooded=',\n        floodedCount,\n        'cleared=',\n        clearedCount,\n        'preview count=',\n        previewCount,\n        'not handled',\n        floodedCount - previewCount\n      );\n    }\n    const islandMap = new Set(segmentationVoxelManager.points || []);\n    floodedSet.clear();\n\n    for (const index of islandMap.keys()) {\n      if (floodedSet.has(index)) {\n        continue;\n      }\n      let isInternal = true;\n      const internalSet = new Set<number>();\n      const onFloodInternal = (i, j, k) => {\n        const floodIndex = previewVoxelManager.toIndex([i, j, k]);\n        floodedSet.add(floodIndex);\n        if (\n          (boundsIJK[0][0] !== boundsIJK[0][1] &&\n            (i === boundsIJK[0][0] || i === boundsIJK[0][1])) ||\n          (boundsIJK[1][0] !== boundsIJK[1][1] &&\n            (j === boundsIJK[1][0] || j === boundsIJK[1][1])) ||\n          (boundsIJK[2][0] !== boundsIJK[2][1] &&\n            (k === boundsIJK[2][0] || k === boundsIJK[2][1]))\n        ) {\n          isInternal = false;\n        }\n        if (isInternal) {\n          internalSet.add(floodIndex);\n        }\n      };\n      const pointIJK = previewVoxelManager.toIJK(index);\n      if (getter(...pointIJK) !== 0) {\n        continue;\n      }\n      floodFill(getter, pointIJK, {\n        onFlood: onFloodInternal,\n        diagonals: false,\n      });\n      if (isInternal) {\n        for (const index of internalSet) {\n          previewVoxelManager.setAtIndex(index, previewSegmentIndex);\n        }\n      }\n    }\n    triggerSegmentationDataModified(\n      operationData.segmentationId,\n      previewVoxelManager.getArrayOfSlices()\n    );\n  },\n};\n","import type { Types } from '@cornerstonejs/core';\nimport type { InitializedOperationData } from '../BrushStrategy';\nimport { triggerSegmentationDataModified } from '../../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { config as segmentationConfig } from '../../../../stateManagement/segmentation';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Sets up a preview to use an alternate set of colours.  First fills the\n * preview segment index with the final one for all pixels, then resets\n * the preview colours.\n * This is only activated when the preview segment index is defined, either\n * from the initial state or from the global state.\n */\nexport default {\n  [StrategyCallbacks.Preview]: function (\n    operationData: InitializedOperationData\n  ) {\n    const { previewColors, strategySpecificConfiguration, enabledElement } =\n      operationData;\n    if (!previewColors || !strategySpecificConfiguration) {\n      return;\n    }\n\n    // Clean up old preview data\n    if (operationData.preview) {\n      delete operationData.preview;\n    }\n    delete strategySpecificConfiguration.centerSegmentIndex;\n\n    // Now generate a normal preview as though the user had clicked, filled, released\n    this.onInteractionStart?.(enabledElement, operationData);\n    const preview = this.fill(enabledElement, operationData);\n    if (preview) {\n      preview.isPreviewFromHover = true;\n      operationData.preview = preview;\n      this.onInteractionEnd?.(enabledElement, operationData);\n    }\n    return preview;\n  },\n\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    const {\n      toolGroupId,\n      segmentIndex,\n      segmentationRepresentationUID,\n      previewSegmentIndex,\n      previewColors,\n      preview,\n    } = operationData;\n    if (previewColors === undefined) {\n      return;\n    }\n    if (preview) {\n      preview.previewVoxelManager.sourceVoxelManager =\n        operationData.segmentationVoxelManager;\n      // And use the preview data associated with this tracking object as needed\n      operationData.previewVoxelManager = preview.previewVoxelManager;\n    }\n\n    if (segmentIndex === null || !previewSegmentIndex) {\n      // Null means to reset the value, so we don't change the preview colour\n      return;\n    }\n\n    const configColor = previewColors?.[segmentIndex];\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n    if (!configColor && !segmentColor) {\n      return;\n    }\n    const previewColor = configColor || segmentColor.map((it) => it * 0.9);\n    segmentationConfig.color.setColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      previewSegmentIndex,\n      previewColor as Types.Color\n    );\n  },\n\n  [StrategyCallbacks.AcceptPreview]: (\n    operationData: InitializedOperationData\n  ) => {\n    const {\n      segmentationVoxelManager: segmentationVoxelManager,\n      previewVoxelManager: previewVoxelManager,\n      previewSegmentIndex,\n      preview,\n    } = operationData;\n    if (previewSegmentIndex === undefined) {\n      return;\n    }\n    const segmentIndex = preview?.segmentIndex ?? operationData.segmentIndex;\n    const tracking = previewVoxelManager;\n    if (!tracking || tracking.modifiedSlices.size === 0) {\n      return;\n    }\n\n    const callback = ({ index }) => {\n      const oldValue = segmentationVoxelManager.getAtIndex(index);\n      if (oldValue === previewSegmentIndex) {\n        segmentationVoxelManager.setAtIndex(index, segmentIndex);\n      }\n    };\n    tracking.forEach(callback, {});\n\n    triggerSegmentationDataModified(\n      operationData.segmentationId,\n      tracking.getArrayOfSlices()\n    );\n    tracking.clear();\n  },\n\n  [StrategyCallbacks.RejectPreview]: (\n    operationData: InitializedOperationData\n  ) => {\n    const {\n      previewVoxelManager: previewVoxelManager,\n      segmentationVoxelManager: segmentationVoxelManager,\n    } = operationData;\n    if (previewVoxelManager.modifiedSlices.size === 0) {\n      return;\n    }\n\n    const callback = ({ index, value }) => {\n      segmentationVoxelManager.setAtIndex(index, value);\n    };\n    previewVoxelManager.forEach(callback);\n\n    triggerSegmentationDataModified(\n      operationData.segmentationId,\n      previewVoxelManager.getArrayOfSlices()\n    );\n    previewVoxelManager.clear();\n  },\n};\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport pointInShapeCallback from '../../../../utilities/pointInShapeCallback';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Creates a fill strategy that uses the isWithinThreshold created by the\n * createIsInThreshold and the bounds specified in the boundsIJK to go over\n * the specified area, checking if in threshold, and if so, filling that area\n * with the new segment by calling the setValue function.\n */\nexport default {\n  [StrategyCallbacks.Fill]: (operationData: InitializedOperationData) => {\n    const {\n      segmentsLocked,\n      segmentationImageData,\n      segmentationVoxelManager: segmentationVoxelManager,\n      previewVoxelManager: previewVoxelManager,\n      imageVoxelManager: imageVoxelManager,\n      brushStrategy,\n      centerIJK,\n    } = operationData;\n    const isWithinThreshold =\n      brushStrategy.createIsInThreshold?.(operationData);\n    const { setValue } = brushStrategy;\n\n    const callback = isWithinThreshold\n      ? (data) => {\n          const { value, index } = data;\n          if (segmentsLocked.includes(value) || !isWithinThreshold(index)) {\n            return;\n          }\n          setValue(operationData, data);\n        }\n      : (data) => setValue(operationData, data);\n\n    pointInShapeCallback(\n      segmentationImageData as unknown,\n      imageVoxelManager.isInObject,\n      callback,\n      segmentationVoxelManager.boundsIJK\n    );\n\n    previewVoxelManager.addPoint(centerIJK);\n  },\n};\n","import determineSegmentIndex from './determineSegmentIndex';\nimport dynamicThreshold from './dynamicThreshold';\nimport erase from './erase';\nimport islandRemoval from './islandRemoval';\nimport preview from './preview';\nimport regionFill from './regionFill';\nimport setValue from './setValue';\nimport threshold from './threshold';\n\nexport default {\n  determineSegmentIndex,\n  dynamicThreshold,\n  erase,\n  islandRemoval,\n  preview,\n  regionFill,\n  setValue,\n  threshold,\n};\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Creates a set value function which will apply the specified segmentIndex\n * to the given location.\n * If segmentIndex is null, it will clear the given segment index instead\n * This is all done through the previewVoxelManager so that values can be recorded\n * as changed, and the original values remembered.\n */\nexport default {\n  [StrategyCallbacks.INTERNAL_setValue]: (\n    operationData: InitializedOperationData,\n    { value, index }\n  ) => {\n    const {\n      segmentsLocked,\n      segmentIndex,\n      previewVoxelManager: previewVoxelManager,\n      previewSegmentIndex,\n      segmentationVoxelManager: segmentationVoxelManager,\n    } = operationData;\n    const existingValue = segmentationVoxelManager.getAtIndex(index);\n    if (segmentIndex === null) {\n      const oldValue = previewVoxelManager.getAtIndex(index);\n      if (oldValue !== undefined) {\n        previewVoxelManager.setAtIndex(index, oldValue);\n      }\n      return;\n    }\n\n    if (existingValue === segmentIndex || segmentsLocked.includes(value)) {\n      return;\n    }\n    // Correct for preview data getting into the image area and not accepted/rejected\n    if (existingValue === previewSegmentIndex) {\n      if (previewVoxelManager.getAtIndex(index) === undefined) {\n        // Reset the value to ensure preview gets added to the indices\n        segmentationVoxelManager.setAtIndex(index, segmentIndex);\n      } else {\n        return;\n      }\n    }\n\n    // Now, just update the displayed value\n    const useSegmentIndex = previewSegmentIndex ?? segmentIndex;\n\n    previewVoxelManager.setAtIndex(index, useSegmentIndex);\n  },\n};\n","import type { InitializedOperationData } from '../BrushStrategy';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\n\n/**\n * Adds an isWithinThreshold to the operation data that checks that the\n * image value is within threshold[0]...threshold[1]\n * No-op if threshold not defined.\n */\nexport default {\n  [StrategyCallbacks.CreateIsInThreshold]: (\n    operationData: InitializedOperationData\n  ) => {\n    const {\n      imageVoxelManager: imageVoxelManager,\n      strategySpecificConfiguration,\n      segmentIndex,\n    } = operationData;\n    if (!strategySpecificConfiguration || !segmentIndex) {\n      return;\n    }\n    return (index) => {\n      const { THRESHOLD, THRESHOLD_INSIDE_CIRCLE } =\n        strategySpecificConfiguration;\n\n      const voxelValue = imageVoxelManager.getAtIndex(index);\n      // Prefer the generic version of the THRESHOLD configuration, but fallback\n      // to the older THRESHOLD_INSIDE_CIRCLE version.\n      const { threshold } = THRESHOLD || THRESHOLD_INSIDE_CIRCLE || {};\n      if (!threshold?.length) {\n        return true;\n      }\n      return threshold[0] <= voxelValue && voxelValue <= threshold[1];\n    };\n  },\n};\n","import { cache, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { isVolumeSegmentation } from './stackVolumeCheck';\nimport { LabelmapToolOperationDataStack } from '../../../../types';\n\nconst { VoxelManager } = utilities;\n\nfunction getStrategyData({ operationData, viewport }) {\n  let segmentationImageData, segmentationScalarData, imageScalarData;\n  let dimensions: Types.Point3;\n  if (isVolumeSegmentation(operationData)) {\n    const { volumeId, referencedVolumeId } = operationData;\n\n    const segmentationVolume = cache.getVolume(volumeId);\n    const imageVolume = cache.getVolume(referencedVolumeId);\n\n    if (!segmentationVolume || !imageVolume) {\n      return;\n    }\n\n    ({ imageData: segmentationImageData } = segmentationVolume);\n    segmentationScalarData = segmentationVolume.getScalarData();\n    imageScalarData = imageVolume.getScalarData();\n    dimensions = imageVolume.dimensions;\n  } else {\n    const { imageIdReferenceMap, segmentationRepresentationUID } =\n      operationData as LabelmapToolOperationDataStack;\n\n    if (!imageIdReferenceMap) {\n      return;\n    }\n\n    const currentImageId = viewport.getCurrentImageId();\n    if (!currentImageId) {\n      return;\n    }\n\n    // we know that the segmentationRepresentationUID is the name of the actor always\n    // and always circle modifies the current imageId which in fact is the imageData\n    // of that actor at that moment so we have the imageData already\n    const actor = viewport.getActor(segmentationRepresentationUID);\n    segmentationImageData = actor.actor.getMapper().getInputData();\n    const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);\n\n    const segmentationImage = cache.getImage(currentSegmentationImageId);\n    segmentationScalarData = segmentationImage.getPixelData();\n\n    const image = cache.getImage(currentImageId);\n\n    // VERY IMPORTANT\n    // This is the pixel data of the image that is being segmented in the cache\n    // and we need to use this to for the modification\n    imageScalarData = image.getPixelData();\n    dimensions = [image.columns, image.rows, 1];\n  }\n\n  return {\n    segmentationImageData,\n    segmentationScalarData,\n    segmentationVoxelManager: VoxelManager.createVolumeVoxelManager(\n      dimensions,\n      segmentationScalarData\n    ),\n    imageScalarData,\n    imageVoxelManager: VoxelManager.createVolumeVoxelManager(\n      dimensions,\n      imageScalarData\n    ),\n  };\n}\n\nexport { getStrategyData };\n","import type { Types } from '@cornerstonejs/core';\nimport { cache, utilities as csUtils } from '@cornerstonejs/core';\n\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport compositions from './compositions';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isVolumeSegmentation } from './utils/stackVolumeCheck';\nimport { StrategyCallbacks } from '../../../enums';\nimport type {\n  LabelmapToolOperationDataAny,\n  LabelmapToolOperationDataVolume,\n} from '../../../types/LabelmapToolOperationData';\n\nconst { VoxelManager } = csUtils;\n\nexport type InitializedOperationData = LabelmapToolOperationDataAny & {\n  // Additional data for performing the strategy\n  enabledElement: Types.IEnabledElement;\n  centerIJK?: Types.Point3;\n  centerWorld: Types.Point3;\n  viewport: Types.IViewport;\n  imageVoxelManager: csUtils.VoxelManager<number>;\n  segmentationVoxelManager: csUtils.VoxelManager<number>;\n  segmentationImageData: ImageData;\n  previewVoxelManager: csUtils.VoxelManager<number>;\n  // The index to use for the preview segment.  Currently always undefined or 255\n  // but define it here for future expansion of LUT tables\n  previewSegmentIndex?: number;\n\n  brushStrategy: BrushStrategy;\n};\n\nexport type StrategyFunction = (\n  operationData: InitializedOperationData,\n  ...args\n) => unknown;\n\nexport type CompositionInstance = {\n  [callback in StrategyCallbacks]?: StrategyFunction;\n};\n\nexport type CompositionFunction = () => CompositionInstance;\n\nexport type Composition = CompositionFunction | CompositionInstance;\n\n/**\n * A brush strategy is a composition of individual parts which together form\n * the strategy for a brush tool.\n *\n * Parts of a strategy:\n * 1. Fill strategy - how the fill gets done (left/right, 3d, paint fill etc)\n * 2. Set value strategy - can clear values or set them, or something else?\n * 3. In object strategy - how to tell if a point is contained in the object\n *    * Bounding box getter for the object strategy\n * 4. threshold - how to determine if a point is within a threshold value\n * 5. preview - how to display preview information\n * 6. Various strategy customizations such as erase\n *\n * These combine to form an actual brush:\n *\n * Circle - convexFill, defaultSetValue, inEllipse/boundingbox ellipse, empty threshold\n * Rectangle - - convexFill, defaultSetValue, inRectangle/boundingbox rectangle, empty threshold\n * might also get parameter values from input,  init for setup of convexFill\n *\n * The pieces are combined to generate a strategyFunction, which performs\n * the actual strategy operation, as well as various callbacks for the strategy\n * to allow more control over behaviour in the specific strategy (such as displaying\n * preview)\n */\n\nexport default class BrushStrategy {\n  /**\n   * Provide some default initializers for various situations, mostly for\n   * external use to allow defining new brushes\n   */\n  public static COMPOSITIONS = compositions;\n\n  protected static childFunctions = {\n    [StrategyCallbacks.OnInteractionStart]: addListMethod(\n      StrategyCallbacks.OnInteractionStart,\n      StrategyCallbacks.Initialize\n    ),\n    [StrategyCallbacks.OnInteractionEnd]: addListMethod(\n      StrategyCallbacks.OnInteractionEnd,\n      StrategyCallbacks.Initialize\n    ),\n    [StrategyCallbacks.Fill]: addListMethod(StrategyCallbacks.Fill),\n    [StrategyCallbacks.Initialize]: addListMethod(StrategyCallbacks.Initialize),\n    [StrategyCallbacks.CreateIsInThreshold]: addSingletonMethod(\n      StrategyCallbacks.CreateIsInThreshold\n    ),\n    [StrategyCallbacks.AcceptPreview]: addListMethod(\n      StrategyCallbacks.AcceptPreview,\n      StrategyCallbacks.Initialize\n    ),\n    [StrategyCallbacks.RejectPreview]: addListMethod(\n      StrategyCallbacks.RejectPreview,\n      StrategyCallbacks.Initialize\n    ),\n    [StrategyCallbacks.INTERNAL_setValue]: addSingletonMethod(\n      StrategyCallbacks.INTERNAL_setValue\n    ),\n    [StrategyCallbacks.Preview]: addSingletonMethod(\n      StrategyCallbacks.Preview,\n      false\n    ),\n    // Add other exposed fields below\n    // initializers is exposed on the function to allow extension of the composition object\n    compositions: null,\n  };\n\n  public compositions: Composition[];\n  public strategyFunction: (enabledElement, operationData) => unknown;\n\n  protected configurationName: string;\n  protected _initialize = [];\n  protected _fill = [];\n  protected _acceptPreview: [];\n  protected _onInteractionStart = [];\n\n  constructor(name, ...initializers: Composition[]) {\n    this.configurationName = name;\n    this.compositions = initializers;\n    initializers.forEach((initializer) => {\n      const result =\n        typeof initializer === 'function' ? initializer() : initializer;\n      if (!result) {\n        return;\n      }\n      for (const key in result) {\n        if (!BrushStrategy.childFunctions[key]) {\n          throw new Error(`Didn't find ${key} as a brush strategy`);\n        }\n        BrushStrategy.childFunctions[key](this, result[key]);\n      }\n    });\n    this.strategyFunction = (enabledElement, operationData) =>\n      this.fill(enabledElement, operationData);\n\n    for (const key of Object.keys(BrushStrategy.childFunctions)) {\n      this.strategyFunction[key] = this[key];\n    }\n  }\n\n  /**\n   * Performs a fill of the given region.\n   * Returns the preview data if the fill performs a preview, and otherwise\n   * returns null.\n   */\n  public fill = (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => {\n    const initializedData = this.initialize(enabledElement, operationData);\n\n    const { strategySpecificConfiguration = {}, centerIJK } = initializedData;\n    // Store the center IJK location so that we can skip an immediate same-point update\n    // TODO - move this to the BrushTool\n    if (csUtils.isEqual(centerIJK, strategySpecificConfiguration.centerIJK)) {\n      return operationData.preview;\n    } else {\n      strategySpecificConfiguration.centerIJK = centerIJK;\n    }\n\n    this._fill.forEach((func) => func(initializedData));\n\n    const {\n      segmentationVoxelManager,\n      previewVoxelManager,\n      previewSegmentIndex,\n    } = initializedData;\n\n    triggerSegmentationDataModified(\n      initializedData.segmentationId,\n      segmentationVoxelManager.getArrayOfSlices()\n    );\n    // We are only previewing if there is a preview index, and there is at\n    // least one slice modified\n    if (!previewSegmentIndex || !previewVoxelManager.modifiedSlices.size) {\n      return null;\n    }\n    // Use the original initialized data set to preserve preview info\n    return initializedData.preview || initializedData;\n  };\n\n  protected initialize(\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ): InitializedOperationData {\n    const { viewport } = enabledElement;\n    const data = getStrategyData({ operationData, viewport });\n\n    if (!data) {\n      console.warn('No data found for BrushStrategy');\n      return operationData.preview;\n    }\n\n    if (isVolumeSegmentation(operationData)) {\n      const { referencedVolumeId, volumeId } =\n        operationData as LabelmapToolOperationDataVolume;\n\n      const imageVolume = cache.getVolume(referencedVolumeId);\n      const segmentation = cache.getVolume(volumeId);\n\n      if (\n        !csUtils.isEqual(segmentation.dimensions, imageVolume.dimensions) ||\n        !csUtils.isEqual(segmentation.direction, imageVolume.direction)\n      ) {\n        throw new Error(\n          'Only source data the same dimensions/size/orientation as the segmentation currently supported.'\n        );\n      }\n    }\n\n    const {\n      imageVoxelManager,\n      segmentationVoxelManager,\n      segmentationImageData,\n    } = data;\n    const previewVoxelManager =\n      operationData.preview?.previewVoxelManager ||\n      VoxelManager.createHistoryVoxelManager(segmentationVoxelManager);\n    const previewEnabled = !!operationData.previewColors;\n    const previewSegmentIndex = previewEnabled ? 255 : undefined;\n\n    const initializedData: InitializedOperationData = {\n      previewSegmentIndex,\n      ...operationData,\n      enabledElement,\n      imageVoxelManager,\n      segmentationVoxelManager,\n      segmentationImageData,\n      previewVoxelManager,\n      viewport,\n\n      centerWorld: null,\n      brushStrategy: this,\n    };\n\n    this._initialize.forEach((func) => func(initializedData));\n\n    return initializedData;\n  }\n\n  /**\n   * Function called to initialize the start of the strategy.  Often this is\n   * on mouse down, so calling this initDown.\n   * Over-written by the strategy composition.\n   */\n  public onInteractionStart = (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => {\n    const { preview } = operationData;\n    // Need to skip the init down if it has already occurred in teh preview\n    // That prevents resetting values which were used to determine the preview\n    if (preview?.isPreviewFromHover) {\n      preview.isPreviewFromHover = false;\n      return;\n    }\n    const initializedData = this.initialize(enabledElement, operationData);\n    this._onInteractionStart.forEach((func) =>\n      func.call(this, initializedData)\n    );\n  };\n\n  /**\n   * Function called when a strategy is complete in some way.\n   * Often called on mouse up, hence the name.\n   *\n   * Over-written by the strategy composition.\n   */\n  public onInteractionEnd: (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => void;\n\n  /**\n   * Reject the preview.\n   * Over-written by the strategy composition.\n   */\n  public rejectPreview: (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => void;\n\n  /**\n   * Accept the preview, making it part of the overall segmentation\n   *\n   * Over-written by the strategy composition.\n   */\n  public acceptPreview: (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => void;\n\n  /**\n   * Display a preview at the current position.  This will typically\n   * using the onInteractionStart, fill and onInteractionEnd methods,\n   * plus optional use of a preview.\n   *\n   * Over-written by the strategy composition.\n   * @returns preview data if a preview is displayed.\n   */\n  public preview: (\n    enabledElement: Types.IEnabledElement,\n    operationData: LabelmapToolOperationDataAny\n  ) => unknown;\n\n  /**\n   * Over-written by the strategy composition.\n   */\n  public setValue: (operationData: InitializedOperationData, data) => void;\n\n  /**\n   * Over-written by the strategy composition.\n   */\n  public createIsInThreshold: (operationData: InitializedOperationData) => any;\n}\n\n/**\n * Adds a list method to the set of defined methods.\n */\nfunction addListMethod(name: string, createInitialized?: string) {\n  const listName = `_${name}`;\n  return (brushStrategy, func) => {\n    brushStrategy[listName] ||= [];\n    brushStrategy[listName].push(func);\n    brushStrategy[name] ||= createInitialized\n      ? (enabledElement, operationData) => {\n          const initializedData = brushStrategy[createInitialized](\n            enabledElement,\n            operationData\n          );\n          brushStrategy[listName].forEach((func) =>\n            func.call(brushStrategy, initializedData)\n          );\n        }\n      : (operationData) => {\n          brushStrategy[listName].forEach((func) =>\n            func.call(brushStrategy, operationData)\n          );\n        };\n  };\n}\n\n/**\n * Adds a singleton method, throwing an exception if it is already defined\n */\nfunction addSingletonMethod(name: string, isInitialized = true) {\n  return (brushStrategy, func) => {\n    if (brushStrategy[name]) {\n      throw new Error(`The singleton method ${name} already exists`);\n    }\n    brushStrategy[name] = isInitialized\n      ? func\n      : (enabledElement, operationData) => {\n          // Store the enabled element in the operation data so we can use single\n          // argument calls\n          operationData.enabledElement = enabledElement;\n          return func.call(brushStrategy, operationData);\n        };\n  };\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCanvasEllipseCorners,\n  precalculatePointInEllipse,\n} from '../../../utilities/math/ellipse';\nimport pointInSphere from '../../../utilities/math/sphere/pointInSphere';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport type { Composition, InitializedOperationData } from './BrushStrategy';\nimport type { CanvasCoordinates } from '../../../types';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\n\nconst { transformWorldToIndex } = csUtils;\nconst EPSILON = 1e-4;\nconst nearOrZero = (testValue, nearValue) =>\n  Math.abs(testValue) < EPSILON || Math.abs(testValue - nearValue) < EPSILON;\n\nconst initializeCircle = {\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    const {\n      points,\n      imageVoxelManager: imageVoxelManager,\n      viewport,\n      segmentationImageData,\n      segmentationVoxelManager: segmentationVoxelManager,\n    } = operationData;\n\n    // Happens on a preview setup\n    if (!points) {\n      return;\n    }\n    // Average the points to get the center of the ellipse\n    const center = vec3.fromValues(0, 0, 0);\n    points.forEach((point) => {\n      vec3.add(center, center, point);\n    });\n    vec3.scale(center, center, 1 / points.length);\n\n    operationData.centerWorld = center as Types.Point3;\n    operationData.centerIJK = transformWorldToIndex(\n      segmentationImageData,\n      center as Types.Point3\n    );\n    const canvasCoordinates = points.map((p) =>\n      viewport.worldToCanvas(p)\n    ) as CanvasCoordinates;\n\n    // 1. From the drawn tool: Get the ellipse (circle) topLeft and bottomRight\n    // corners in canvas coordinates\n    const [topLeftCanvas, bottomRightCanvas] =\n      getCanvasEllipseCorners(canvasCoordinates);\n\n    // 2. Find the extent of the ellipse (circle) in IJK index space of the image\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n\n    const ellipsoidCornersIJK = [\n      <Types.Point3>transformWorldToIndex(segmentationImageData, topLeftWorld),\n      <Types.Point3>(\n        transformWorldToIndex(segmentationImageData, bottomRightWorld)\n      ),\n    ];\n\n    segmentationVoxelManager.boundsIJK = getBoundingBoxAroundShape(\n      ellipsoidCornersIJK,\n      segmentationVoxelManager.dimensions\n    );\n    imageVoxelManager.isInObject = createPointInEllipse({\n      topLeftWorld,\n      bottomRightWorld,\n      center,\n    });\n  },\n} as Composition;\n\n/**\n * Creates a function that tells the user if the provided point in LPS space\n * is inside the ellipse.\n *\n * This will return a sphere test function if the bounds are a circle or\n * sphere shape (same radius in two or three dimensions), or an elliptical shape\n * if they differ.\n */\nfunction createPointInEllipse(worldInfo: {\n  topLeftWorld: Types.Point3;\n  bottomRightWorld: Types.Point3;\n  center: Types.Point3 | vec3;\n}) {\n  const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n\n  const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n  const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n  const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n\n  const radius = Math.max(xRadius, yRadius, zRadius);\n  if (\n    nearOrZero(xRadius, radius) &&\n    nearOrZero(yRadius, radius) &&\n    nearOrZero(zRadius, radius)\n  ) {\n    const sphereObj = {\n      center,\n      radius,\n      radius2: radius * radius,\n    };\n    return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n  }\n  // using circle as a form of ellipse\n  const ellipseObj = {\n    center: center as Types.Point3,\n    xRadius,\n    yRadius,\n    zRadius,\n  };\n  const inverts = precalculatePointInEllipse(ellipseObj);\n  const { precalculated } = inverts;\n\n  return precalculated;\n}\n\nconst CIRCLE_STRATEGY = new BrushStrategy(\n  'Circle',\n  compositions.regionFill,\n  compositions.setValue,\n  initializeCircle,\n  compositions.determineSegmentIndex,\n  compositions.preview\n);\n\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy(\n  'CircleThreshold',\n  compositions.regionFill,\n  compositions.setValue,\n  initializeCircle,\n  compositions.determineSegmentIndex,\n  compositions.dynamicThreshold,\n  compositions.threshold,\n  compositions.preview,\n  compositions.islandRemoval\n);\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\n\n/**\n * Fill outside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels outside the  defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillOutsideCircle(): void {\n  throw new Error('Not yet implemented');\n}\n\nexport {\n  CIRCLE_STRATEGY,\n  CIRCLE_THRESHOLD_STRATEGY,\n  fillInsideCircle,\n  thresholdInsideCircle,\n  createPointInEllipse as createEllipseInPoint,\n};\n","import type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport { getCanvasEllipseCorners } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport type { InitializedOperationData, Composition } from './BrushStrategy';\nimport type { CanvasCoordinates } from '../../../types';\nimport compositions from './compositions';\nimport StrategyCallbacks from '../../../enums/StrategyCallbacks';\nimport { createEllipseInPoint } from './fillCircle';\nconst { transformWorldToIndex } = csUtils;\n\nconst sphereComposition = {\n  [StrategyCallbacks.Initialize]: (operationData: InitializedOperationData) => {\n    const {\n      points,\n      imageVoxelManager: imageVoxelManager,\n      viewport,\n      segmentationImageData,\n      segmentationVoxelManager: segmentationVoxelManager,\n    } = operationData;\n\n    // Happens on a preview setup\n    if (!points) {\n      return;\n    }\n    // Average the points to get the center of the ellipse\n    const center = vec3.fromValues(0, 0, 0);\n    points.forEach((point) => {\n      vec3.add(center, center, point);\n    });\n    vec3.scale(center, center, 1 / points.length);\n\n    operationData.centerWorld = center as Types.Point3;\n    operationData.centerIJK = transformWorldToIndex(\n      segmentationImageData,\n      center as Types.Point3\n    );\n    const canvasCoordinates = points.map((p) =>\n      viewport.worldToCanvas(p)\n    ) as CanvasCoordinates;\n\n    // 1. From the drawn tool: Get the ellipse (circle) topLeft and bottomRight\n    // corners in canvas coordinates\n    const [topLeftCanvas, bottomRightCanvas] =\n      getCanvasEllipseCorners(canvasCoordinates);\n\n    // 2. Find the extent of the ellipse (circle) in IJK index space of the image\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    // This will be 2d, now expand to 3d\n    const diameters = topLeftWorld.map((left, index) =>\n      Math.abs(bottomRightWorld[index] - left)\n    );\n    const radius = Math.max(...diameters) / 2;\n    // Make 3d sphere\n    topLeftWorld.forEach((left, index) => {\n      const right = bottomRightWorld[index];\n      if (left === right) {\n        topLeftWorld[index] = left - radius;\n        bottomRightWorld[index] = left + radius;\n      }\n    });\n\n    const ellipsoidCornersIJK = [\n      <Types.Point3>transformWorldToIndex(segmentationImageData, topLeftWorld),\n      <Types.Point3>(\n        transformWorldToIndex(segmentationImageData, bottomRightWorld)\n      ),\n    ];\n\n    segmentationVoxelManager.boundsIJK = getBoundingBoxAroundShape(\n      ellipsoidCornersIJK,\n      segmentationVoxelManager.dimensions\n    );\n\n    imageVoxelManager.isInObject = createEllipseInPoint({\n      topLeftWorld,\n      bottomRightWorld,\n      center,\n    });\n  },\n} as Composition;\n\nconst SPHERE_STRATEGY = new BrushStrategy(\n  'Sphere',\n  compositions.regionFill,\n  compositions.setValue,\n  sphereComposition,\n  compositions.determineSegmentIndex,\n  compositions.preview\n);\n\n/**\n * Fill inside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nconst fillInsideSphere = SPHERE_STRATEGY.strategyFunction;\n\nconst SPHERE_THRESHOLD_STRATEGY = new BrushStrategy(\n  'SphereThreshold',\n  ...SPHERE_STRATEGY.compositions,\n  compositions.dynamicThreshold,\n  compositions.threshold,\n  compositions.islandRemoval\n);\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being filled.\n * @param operationData - EraseOperationData\n */\n\nconst thresholdInsideSphere = SPHERE_THRESHOLD_STRATEGY.strategyFunction;\n\n/**\n * Fill outside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillOutsideSphere(): void {\n  throw new Error('fill outside sphere not implemented');\n}\n\nexport { fillInsideSphere, thresholdInsideSphere, SPHERE_STRATEGY };\n","import BrushStrategy from './BrushStrategy';\nimport { SPHERE_STRATEGY } from './fillSphere';\nimport compositions from './compositions';\n\nconst ERASE_SPHERE_STRATEGY = new BrushStrategy(\n  'EraseSphere',\n  compositions.erase,\n  ...SPHERE_STRATEGY.compositions\n);\n\nconst eraseInsideSphere = ERASE_SPHERE_STRATEGY.strategyFunction;\n\nexport { eraseInsideSphere };\n","import BrushStrategy from './BrushStrategy';\nimport { CIRCLE_STRATEGY } from './fillCircle';\nimport compositions from './compositions';\n\nconst ERASE_CIRCLE_STRATEGY = new BrushStrategy(\n  'EraseCircle',\n  compositions.erase,\n  ...CIRCLE_STRATEGY.compositions\n);\n\nconst eraseInsideCircle = ERASE_CIRCLE_STRATEGY.strategyFunction;\n\nexport { eraseInsideCircle };\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n  'alias',\n  'all-scroll',\n  'auto',\n  'cell',\n  'col-resize',\n  'context-menu',\n  'copy',\n  'crosshair',\n  'default',\n  'e-resize',\n  'ew-resize',\n  'grab',\n  'grabbing',\n  'help',\n  'move',\n  'ne-resize',\n  'nesw-resize',\n  'no-drop',\n  'none',\n  'not-allowed',\n  'n-resize',\n  'ns-resize',\n  'nw-resize',\n  'nwse-resize',\n  'pointer',\n  'progress',\n  'row-resize',\n  'se-resize',\n  's-resize',\n  'sw-resize',\n  'text',\n  'vertical-text',\n  'wait',\n  'w-resize',\n  'zoom-in',\n  'zoom-out',\n]);\n\nexport default class MouseCursor {\n  private name: string;\n  private fallback: MouseCursor | undefined;\n\n  constructor(name: string, fallback?: MouseCursor | undefined) {\n    this.name = name + '';\n    this.fallback = fallback;\n  }\n\n  getName(): string {\n    return this.name + '';\n  }\n\n  addFallbackStyleProperty(style: string): string {\n    const { fallback } = this;\n    if (fallback instanceof MouseCursor) {\n      return `${style}, ${fallback.getStyleProperty()}`;\n    }\n    return style + '';\n  }\n\n  getStyleProperty(): string {\n    return this.addFallbackStyleProperty(this.name) + '';\n  }\n\n  static getDefinedCursor(name: string): MouseCursor | undefined {\n    const definedCursors = getDefinedCursors(\n      // @ts-ignore\n      MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n      DEFINED_CURSORS\n    );\n    let mouseCursor = definedCursors.get(name);\n    if (mouseCursor instanceof MouseCursor) {\n      return mouseCursor;\n    }\n    if (STANDARD_CURSORS.has(name)) {\n      mouseCursor = new MouseCursor(name);\n      definedCursors.set(name, mouseCursor);\n      return mouseCursor;\n    }\n  }\n\n  static setDefinedCursor(name: string, cursor: MouseCursor): boolean {\n    if (cursor instanceof MouseCursor) {\n      const definedCursors = getDefinedCursors(\n        // @ts-ignore\n        MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n        DEFINED_CURSORS\n      );\n      definedCursors.set(name, cursor);\n      return true;\n    }\n    return false;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction getDefinedCursors(\n  context: Record<symbol, Map<string, MouseCursor>>,\n  symbol: symbol\n): Map<string, MouseCursor> {\n  let definedCursors = context[symbol];\n  if (!(definedCursors instanceof Map)) {\n    definedCursors = new Map();\n    Object.defineProperty(context, symbol, { value: definedCursors });\n  }\n  return definedCursors;\n}\n\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\n\nconst DEFAULT_NAME = 'image-cursor';\n\nexport default class ImageMouseCursor extends MouseCursor {\n  private url: string;\n  private x: number;\n  private y: number;\n\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(\n      name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME),\n      fallback\n    );\n    this.url = url;\n    this.x = Number(x) || 0;\n    this.y = Number(y) || 0;\n  }\n\n  getStyleProperty(): string {\n    const { url, x, y } = this;\n    let style = `url('${url}')`;\n    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n      style += ` ${x} ${y}`;\n    }\n    return this.addFallbackStyleProperty(style);\n  }\n\n  static getUniqueInstanceName(prefix: string): string {\n    return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n  }\n}\n","import { SVGCursorDescriptor } from '../types';\n\n/*\n * Definitions\n */\n\nconst BASE: SVGCursorDescriptor = {\n  iconContent: '',\n  iconSize: 16,\n  viewBox: {\n    x: 16,\n    y: 16,\n  },\n  mousePoint: {\n    x: 8,\n    y: 8,\n  },\n  mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\n\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n  x: 127,\n  y: 60,\n};\n\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\n\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\n\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\n\nconst CursorSVG: Record<string, SVGCursorDescriptor> = {\n  Angle: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  ArrowAnnotate: extend(BASE, {\n    iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Bidirectional: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n    viewBox: {\n      x: 48,\n      y: 48,\n    },\n  }),\n  CobbAngle: extend(BASE, {\n    iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  CircleROI: extend(BASE, {\n    iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  EllipticalROI: extend(BASE, {\n    iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  FreehandROI: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  FreehandROISculptor: extend(BASE, {\n    iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Length: extend(BASE, {\n    iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Probe: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  RectangleROI: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  TextMarker: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Crosshairs: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Eraser: extend(BASE, {\n    iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n    viewBox: {\n      x: 2048,\n      y: 1792,\n    },\n  }),\n  Magnify: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n    viewBox: {\n      x: 512,\n      y: 512,\n    },\n  }),\n  Pan: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Rotate: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  StackScroll: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n    viewBox: {\n      x: 24,\n      y: 28,\n    },\n  }),\n  WindowLevelRegion: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  WindowLevel: extend(BASE, {\n    iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Zoom: extend(BASE, {\n    iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n    viewBox: {\n      x: 640,\n      y: 512,\n    },\n  }),\n\n  /*\n   * Segmentation Cursors\n   */\n\n  SegmentationFreeHandEraseInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandEraseOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationRectangleEraseInside: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  // Default Rectangle Scissors\n  RectangleScissor: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  CircleScissor: extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n};\n\n/*\n * Utils\n */\n\nfunction extend(\n  base: SVGCursorDescriptor,\n  values: Record<string, unknown>\n): SVGCursorDescriptor {\n  return Object.assign(Object.create(base), values);\n}\n\n/**\n * Registers a cursor to the list, so that it will be used for the given `toolName`.\n * Overwrites the given cursor if it is already set.\n *\n * @param toolName - The name of the tool to assign a cursor to.\n * @param iconContent - The SVG icon content of the cursor.\n * @param viewBox - The viewBox of the cursor object.\n */\nfunction registerCursor(\n  toolName: string,\n  iconContent: string,\n  viewBox: { x: number; y: number }\n) {\n  CursorSVG[toolName] = extend(BASE, {\n    iconContent,\n    viewBox,\n  });\n}\n\nfunction getDefinedSVGCursorDescriptor(\n  name: string\n): SVGCursorDescriptor | undefined {\n  return CursorSVG[name];\n}\n\n/*\n * Exports\n */\nconst svgCursorNames = Object.keys(CursorSVG);\n\nexport {\n  getDefinedSVGCursorDescriptor,\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n};\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport MouseCursor from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\n\nimport type { StyleSpecifier } from '../types/AnnotationStyle';\nimport type { SVGCursorDescriptor } from '../types';\n\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\n\nexport default class SVGMouseCursor extends ImageMouseCursor {\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(url, x, y, name, fallback);\n  }\n\n  /**\n   * Get a shared instance of the SVGMouseCursor class satisfying the given parameters.\n   *\n   * @param name - The name of the cursor (defined in SVGCursorDescriptor.ts);\n   * @param pointer - Should be true to use the version of the cursor containing\n   * a mouse pointer. Defaults to false (which does not add a pointer to the cursor);\n   * @param color - The color of the cursor. Defaults to tool.style.colorHighlightedActive;\n   * @returns a SVGMouseCursor instance or\n   * undefined if no SVG cursor descriptor was found with the given name;\n   */\n  static getDefinedCursor(\n    name: string,\n    pointer = false,\n    color?: string\n  ): MouseCursor {\n    if (!color) {\n      color = getStyleProperty(PROPERTY, {} as StyleSpecifier, STATE, MODE);\n    }\n    const urn = getCursorURN(name, pointer, color);\n    let cursor = super.getDefinedCursor(urn);\n    if (!cursor) {\n      const descriptor = getDefinedSVGCursorDescriptor(name);\n      if (descriptor) {\n        cursor = createSVGMouseCursor(\n          descriptor,\n          urn,\n          pointer,\n          color,\n          super.getDefinedCursor('default')\n        );\n        super.setDefinedCursor(urn, cursor);\n      }\n    }\n    return cursor;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction format(template: string, dictionary: Record<string, unknown>): string {\n  const dict = Object(dictionary);\n  const defined = Object.prototype.hasOwnProperty.bind(dict);\n  return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n    return defined(key) ? dict[key] + '' : '';\n  });\n}\n\nfunction getCursorURN(name: string, pointer: boolean, color: string) {\n  const type = pointer ? 'pointer' : 'cursor';\n  return `${type}:${name}/${color}`;\n}\n\nfunction createSVGMouseCursor(\n  descriptor: SVGCursorDescriptor,\n  name: string,\n  pointer: boolean,\n  color: string,\n  fallback: MouseCursor\n): SVGMouseCursor {\n  const { x, y } = descriptor.mousePoint;\n  return new SVGMouseCursor(\n    createSVGIconUrl(descriptor, pointer, { color }),\n    x,\n    y,\n    name,\n    fallback\n  );\n}\n\nfunction createSVGIconUrl(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): string {\n  return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));\n}\n\nfunction createSVGIconBlob(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): Blob {\n  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(\n    descriptor,\n    options\n  );\n  return new Blob([svgString], { type: 'image/svg+xml' });\n}\n\nfunction createSVGIcon(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n): string {\n  const { iconContent, iconSize, viewBox } = descriptor;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n  return format(svgString, options);\n}\n\nfunction createSVGIconWithPointer(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n) {\n  const { iconContent, iconSize, viewBox, mousePointerGroupString } =\n    descriptor;\n  const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n  const svgSize = 16 + iconSize;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n  return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\n\n/**\n * Set the cursor for an HTML element. cursorNames can be either\n * cornerstone3DTools cursors or standard cursors.\n *\n * @param element - The element to set the cursor on.\n * @param cursorName - The name of the cursor to set. This can be\n * any cursor name either Cornerstone-specific cursor names or the standard\n * CSS cursor names.\n */\nfunction setCursorForElement(\n  element: HTMLDivElement,\n  cursorName: string\n): void {\n  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n  if (!cursor) {\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  if (!cursor) {\n    console.log(\n      `Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`\n    );\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  setElementCursor(element, cursor);\n}\n\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport {\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n} from './SVGCursorDescriptor';\n\n// Todo: this should be enum\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\n\nexport {\n  MouseCursor,\n  ImageMouseCursor,\n  SVGMouseCursor,\n  elementCursor,\n  registerCursor,\n  CursorNames,\n  CursorSVG,\n  setCursorForElement,\n};\n","import { MouseCursor } from '.';\n\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\n\n/*\n * Public Methods\n */\n\nfunction initElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  _getElementCursors(element)[0] = cursor;\n  _setElementCursor(element, cursor);\n}\n\nfunction _setElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  const cursors = _getElementCursors(element);\n  cursors[1] = cursors[0];\n  cursors[0] = cursor;\n  element.style.cursor = (\n    cursor instanceof MouseCursor\n      ? cursor\n      : MouseCursor.getDefinedCursor('auto')\n  ).getStyleProperty();\n}\n\nfunction resetElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, _getElementCursors(element)[1]);\n}\n\nfunction hideElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\n\n/*\n * Helpers\n */\n\nfunction _getElementCursors(\n  element: HTMLDivElement\n): [MouseCursor | null, MouseCursor | null] {\n  let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n  if (!(map instanceof WeakMap)) {\n    map = new WeakMap();\n    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n      value: map,\n    });\n  }\n  let cursors = map.get(element);\n  if (!cursors) {\n    cursors = [null, null];\n    map.set(element, cursors);\n  }\n  return cursors;\n}\n\n/*\n * Exports\n */\nexport {\n  initElementCursor,\n  resetElementCursor,\n  hideElementCursor,\n  _setElementCursor as setElementCursor,\n};\n","import { utilities as csUtils, getEnabledElement } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\n\nimport type { Types } from '@cornerstonejs/core';\nimport type {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BaseTool } from '../base';\nimport {\n  fillInsideSphere,\n  thresholdInsideSphere,\n} from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport {\n  thresholdInsideCircle,\n  fillInsideCircle,\n} from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport {\n  Events,\n  ToolModes,\n  SegmentationRepresentations,\n  StrategyCallbacks,\n} from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  state as segmentationState,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\nimport {\n  LabelmapSegmentationDataVolume,\n  LabelmapSegmentationDataStack,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * A type for preview data/information, used to setup previews on hover, or\n * maintain the preview information.\n */\nexport type PreviewData = {\n  /**\n   *  The preview data returned from the strategy\n   */\n  preview: unknown;\n  timer?: number;\n  timerStart: number;\n  startPoint: Types.Point2;\n  element: HTMLDivElement;\n  isDrag: boolean;\n};\n\n/**\n * @public\n */\nclass BrushTool extends BaseTool {\n  static toolName;\n  private _editData: {\n    segmentsLocked: number[]; //\n    segmentationRepresentationUID?: string;\n    imageIdReferenceMap?: Map<string, string>;\n    volumeId?: string;\n    referencedVolumeId?: string;\n  } | null;\n  private _hoverData?: {\n    brushCursor: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentationRepresentationUID: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    centerCanvas?: Array<number>;\n  };\n\n  private _previewData?: PreviewData = {\n    preview: null,\n    element: null,\n    timerStart: 0,\n    timer: null,\n    startPoint: [NaN, NaN],\n    isDrag: false,\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE_CIRCLE: fillInsideCircle,\n          ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n          FILL_INSIDE_SPHERE: fillInsideSphere,\n          ERASE_INSIDE_SPHERE: eraseInsideSphere,\n          THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n          THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n        },\n        strategySpecificConfiguration: {\n          THRESHOLD: {\n            threshold: [-150, -70], // E.g. CT Fat // Only used during threshold strategies.\n          },\n        },\n        defaultStrategy: 'FILL_INSIDE_CIRCLE',\n        activeStrategy: 'FILL_INSIDE_CIRCLE',\n        brushSize: 25,\n        preview: {\n          // Have to enable the preview to use this\n          enabled: false,\n          previewColors: {},\n          // The time before showing a preview\n          previewTimeMs: 250,\n          // The distance to move to show a preview before preview time expired\n          previewMoveDistance: 8,\n          // The distance to drag before being considered a drag rather than click\n          dragMoveDistance: 4,\n          // The time to consider a mouse click a drag when moved less than dragMoveDistance\n          dragTimeMs: 500,\n        },\n        // Whether to show a center circle/position.  Set to null to not show\n        centerRadius: 2,\n        actions: {\n          [StrategyCallbacks.AcceptPreview]: {\n            method: StrategyCallbacks.AcceptPreview,\n            bindings: [\n              {\n                key: 'Enter',\n              },\n            ],\n          },\n          [StrategyCallbacks.RejectPreview]: {\n            method: StrategyCallbacks.RejectPreview,\n            bindings: [\n              {\n                key: 'Escape',\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolPassive = (evt) => {\n    this.disableCursor();\n  };\n\n  onSetToolEnabled = () => {\n    this.disableCursor();\n  };\n\n  onSetToolDisabled = (evt) => {\n    this.disableCursor();\n  };\n\n  private disableCursor() {\n    this._hoverData = undefined;\n    this.rejectPreview();\n  }\n\n  createEditData(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n    }\n\n    const { segmentationId, type, segmentationRepresentationUID } =\n      activeSegmentationRepresentation;\n\n    if (type === SegmentationRepresentations.Contour) {\n      throw new Error('Not implemented yet');\n    }\n\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const { representationData } =\n      segmentationState.getSegmentation(segmentationId);\n\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    const viewportIdsToRender = [viewport.id];\n\n    if (isVolumeSegmentation(labelmapData)) {\n      const { volumeId } = representationData[\n        type\n      ] as LabelmapSegmentationDataVolume;\n      const actors = viewport.getActors();\n\n      // Note: For tools that need the source data. Assumed to use\n      // First volume actor for now.\n      const firstVolumeActorUID = actors[0].uid;\n\n      return {\n        volumeId,\n        referencedVolumeId: firstVolumeActorUID,\n        segmentsLocked,\n        segmentationRepresentationUID,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      const currentImageId = viewport.getCurrentImageId();\n\n      if (!imageIdReferenceMap.get(currentImageId)) {\n        // if there is no stack segmentation slice for the current image\n        // we should not allow the user to perform any operation\n        return;\n      }\n\n      // here we should identify if we can perform sphere manipulation\n      // for these stack of images, if the metadata is not present\n      // to create a volume or if there are inconsistencies between\n      // the image metadata we should not allow the sphere manipulation\n      // and should throw an error or maybe simply just allow circle manipulation\n      // and not sphere manipulation\n      if (this.configuration.activeStrategy.includes('SPHERE')) {\n        console.warn(\n          'Sphere manipulation is not supported for this stack of images yet'\n        );\n        return;\n\n        // Todo: add sphere (volumetric) manipulation support for stacks of images\n        // we should basically check if the stack constructs a valid volume\n        // meaning all the metadata is present and consistent\n        // then we use a VoxelManager mapping to map a volume like appearance\n        // for the stack data.\n        // csUtils.isValidVolume(referencedImageIds\n      }\n\n      return {\n        imageIdReferenceMap,\n        segmentsLocked,\n        segmentationRepresentationUID,\n      };\n    }\n  }\n\n  preMouseDownCallback = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): boolean => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._editData = this.createEditData(element);\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    // This might be a mouse down\n    this._previewData.isDrag = false;\n    this._previewData.timerStart = Date.now();\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      this._hoverData.viewportIdsToRender\n    );\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.OnInteractionStart\n    );\n\n    return true;\n  };\n\n  /**\n   * This call will be made when the mouse moves and the tool is active, but\n   * not actually drawing at the moment.\n   * The behavior is:\n   *    1. Update the cursor\n   *    2. Call the active strategy event 'preview' and 'rejectPreview'\n   *       on the mouse cursor position on a periodic basis to create a preview\n   *       when configured to do so.\n   *\n   * The preview will be shown after the mouse has been stationary for 250 ms.\n   * Any preview will be cancelled (immediately) after moving outside the center\n   * distance.\n   * As well, if the mouse moves but stays inside the center area for 250 ms,\n   * then the cancel will happen with a new preview being added.\n   *\n   * See mouse up details for how the preview gets accepted.\n   *\n   * The preview also needs to be cancelled on changing tools.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    if (this.mode === ToolModes.Active) {\n      this.updateCursor(evt);\n      if (!this.configuration.preview.enabled) {\n        return;\n      }\n      const { previewTimeMs, previewMoveDistance, dragMoveDistance } =\n        this.configuration.preview;\n      const { currentPoints, element } = evt.detail;\n      const { canvas } = currentPoints;\n\n      const { preview, startPoint, timer, timerStart, isDrag } =\n        this._previewData;\n      const delta = vec2.distance(canvas, startPoint);\n      const time = Date.now() - timerStart;\n      if (\n        delta > previewMoveDistance ||\n        (time > previewTimeMs && delta > dragMoveDistance)\n      ) {\n        if (timer) {\n          window.clearTimeout(timer);\n          this._previewData.timer = null;\n        }\n        if (preview && !isDrag) {\n          this.rejectPreview(element);\n        }\n      }\n      if (!this._previewData.timer) {\n        const timer = window.setTimeout(this.previewCallback, 250);\n        Object.assign(this._previewData, {\n          timerStart: Date.now(),\n          timer,\n          startPoint: canvas,\n          element,\n        });\n      }\n    }\n  };\n\n  previewCallback = () => {\n    if (this._previewData.preview) {\n      return;\n    }\n    this._previewData.timer = null;\n    this._previewData.preview = this.applyActiveStrategyCallback(\n      getEnabledElement(this._previewData.element),\n      this.getOperationData(this._previewData.element),\n      StrategyCallbacks.Preview\n    );\n  };\n\n  private createHoverData(element, centerCanvas?) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      console.warn(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n      return;\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const viewportIdsToRender = [viewport.id];\n\n    // Center of circle in canvas Coordinates\n\n    const brushCursor = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {},\n    };\n\n    return {\n      brushCursor,\n      centerCanvas,\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n      viewportIdsToRender,\n    };\n  }\n\n  /**\n   * Updates the cursor position and whether it is showing or not.\n   * Can be over-ridden to add more cursor details or a preview.\n   */\n  protected updateCursor(evt: EventTypes.InteractionEventType) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { currentPoints } = eventData;\n    const centerCanvas = currentPoints.canvas;\n    this._hoverData = this.createHoverData(element, centerCanvas);\n\n    this._calculateCursor(element, centerCanvas);\n\n    triggerAnnotationRenderForViewportUIDs(\n      getEnabledElement(element).renderingEngine,\n      this._hoverData.viewportIdsToRender\n    );\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.updateCursor(evt);\n\n    const { viewportIdsToRender } = this._hoverData;\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    const delta = vec2.distance(\n      currentPoints.canvas,\n      this._previewData.startPoint\n    );\n    const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n    if (\n      !this._previewData.isDrag &&\n      this._previewData.preview &&\n      Date.now() - this._previewData.timerStart < dragTimeMs &&\n      delta < dragMoveDistance\n    ) {\n      // If we are showing a preview, then don't start dragging quite immediately\n      // so that click up can accept the preview.\n      return;\n    }\n\n    this._previewData.preview = this.applyActiveStrategy(\n      enabledElement,\n      this.getOperationData()\n    );\n    this._previewData.element = element;\n    // Add a bit of time to the timer start so small accidental movements dont\n    // cause issues on clicking\n    this._previewData.timerStart = Date.now() + dragTimeMs;\n    this._previewData.isDrag = true;\n    this._previewData.startPoint = currentPoints.canvas;\n  };\n\n  protected getOperationData(element?) {\n    const editData = this._editData || this.createEditData(element);\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n    } = this._hoverData || this.createHoverData(element);\n    const { data, metadata = {} } = brushCursor || {};\n    const { viewPlaneNormal, viewUp } = metadata;\n    const operationData = {\n      ...editData,\n      points: data?.handles?.points,\n      segmentIndex,\n      previewColors: this.configuration.preview.enabled\n        ? this.configuration.preview.previewColors\n        : null,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n      // Provide the preview information so that data can be used directly\n      preview: this._previewData?.preview,\n    };\n    return operationData;\n  }\n\n  private _calculateCursor(element, centerCanvas) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n    const camera = viewport.getCamera();\n    const { brushSize } = this.configuration;\n\n    const viewUp = vec3.fromValues(\n      camera.viewUp[0],\n      camera.viewUp[1],\n      camera.viewUp[2]\n    );\n    const viewPlaneNormal = vec3.fromValues(\n      camera.viewPlaneNormal[0],\n      camera.viewPlaneNormal[1],\n      camera.viewPlaneNormal[2]\n    );\n    const viewRight = vec3.create();\n\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n    // in the world coordinate system, the brushSize is the radius of the circle\n    // in mm\n    const centerCursorInWorld: Types.Point3 = canvasToWorld([\n      centerCanvas[0],\n      centerCanvas[1],\n    ]);\n\n    const bottomCursorInWorld = vec3.create();\n    const topCursorInWorld = vec3.create();\n    const leftCursorInWorld = vec3.create();\n    const rightCursorInWorld = vec3.create();\n\n    // Calculate the bottom and top points of the circle in world coordinates\n    for (let i = 0; i <= 2; i++) {\n      bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n      topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n      leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n      rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n    }\n\n    const { brushCursor } = this._hoverData;\n    const { data } = brushCursor;\n\n    if (data.handles === undefined) {\n      data.handles = {};\n    }\n\n    data.handles.points = [\n      bottomCursorInWorld,\n      topCursorInWorld,\n      leftCursorInWorld,\n      rightCursorInWorld,\n    ];\n\n    data.invalidated = false;\n  }\n\n  /**\n   * The end callback call is made when the mouse is released.  This will\n   * perform another active strategy render event to render the final position.\n   * As well, the finish strategy callback will be made during this time.\n   */\n  private _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = this.getOperationData(element);\n    // Don't re-fill when the preview is showing and the user clicks again\n    // otherwise the new area of hover may get filled, which is unexpected\n    if (!this._previewData.preview && !this._previewData.isDrag) {\n      this.applyActiveStrategy(enabledElement, operationData);\n    }\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    this.updateCursor(evt);\n\n    this._editData = null;\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      operationData,\n      StrategyCallbacks.OnInteractionEnd\n    );\n\n    if (!this._previewData.isDrag) {\n      this.acceptPreview(element);\n    }\n  };\n\n  /**\n   * Cancels any preview view being shown, resetting any segments being shown.\n   */\n  public rejectPreview(element = this._previewData.element) {\n    if (!element || !this._previewData.preview) {\n      return;\n    }\n    const enabledElement = getEnabledElement(element);\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.RejectPreview\n    );\n    this._previewData.preview = null;\n    this._previewData.isDrag = false;\n  }\n\n  /**\n   * Accepts a preview, marking it as the active segment.\n   */\n  public acceptPreview(element = this._previewData.element) {\n    if (!element) {\n      return;\n    }\n    const enabledElement = getEnabledElement(element);\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.AcceptPreview\n    );\n    this._previewData.isDrag = false;\n    this._previewData.preview = null;\n  }\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  private _activateDraw = (element: HTMLDivElement): void => {\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  private _deactivateDraw = (element: HTMLDivElement): void => {\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  public invalidateBrushCursor() {\n    if (this._hoverData !== undefined) {\n      const { data } = this._hoverData.brushCursor;\n\n      data.invalidated = true;\n    }\n  }\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): void {\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return;\n    }\n\n    const brushCursor = this._hoverData.brushCursor;\n\n    if (brushCursor.data.invalidated === true) {\n      const { centerCanvas } = this._hoverData;\n      const { element } = viewport;\n\n      // This can be set true when changing the brush size programmatically\n      // whilst the cursor is being rendered.\n      this._calculateCursor(element, centerCanvas);\n    }\n\n    const toolMetadata = brushCursor.metadata;\n    const annotationUID = toolMetadata.brushCursorUID;\n\n    const data = brushCursor.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    const { centerRadius } = this.configuration;\n    if (centerRadius >= 0) {\n      const circleUID1 = '1';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID1,\n        center as Types.Point2,\n        2,\n        {\n          color,\n        }\n      );\n    }\n  }\n}\n\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\n\nexport type ThresholdInformation = {\n  volume: Types.IImageVolume;\n  lower: number;\n  upper: number;\n};\n\nexport default function getBrushToolInstances(\n  toolGroupId: string,\n  toolName?: string\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  if (toolName && toolInstances[toolName]) {\n    return [toolInstances[toolName]];\n  }\n\n  // For each tool that has BrushTool as base class, set the brush size.\n  const brushBasedToolInstances = Object.values(toolInstances).filter(\n    (toolInstance) => toolInstance instanceof BrushTool\n  ) as BrushTool[];\n\n  return brushBasedToolInstances;\n}\n\nconst equalsCheck = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\n/**\n * Given the center of a voxel in world coordinates, calculate the voxel\n * corners in world coords to calculate the voxel overlap in another volume\n */\nexport function getVoxelOverlap(\n  imageData,\n  dimensions,\n  voxelSpacing,\n  voxelCenter\n) {\n  const voxelCornersWorld = [];\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 2; j++) {\n      for (let k = 0; k < 2; k++) {\n        const point = [...voxelCenter]; // Create a new point from voxelCenter\n        point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;\n        point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;\n        point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;\n        voxelCornersWorld.push(point);\n      }\n    }\n  }\n  const voxelCornersIJK = voxelCornersWorld.map(\n    (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n  );\n  const overlapBounds = getBoundingBoxAroundShape(voxelCornersIJK, dimensions);\n\n  return overlapBounds;\n}\n\n/**\n * Prepare a list of volume information objects for callback functions\n */\nexport function processVolumes(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[]\n) {\n  const { spacing: segmentationSpacing } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const volumeInfoList = [];\n  let baseVolumeIdx = 0;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    const { imageData, spacing, dimensions } =\n      thresholdVolumeInformation[i].volume;\n\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    // discover the index of the volume the segmentation data is based on\n    if (\n      volumeSize === scalarData.length &&\n      equalsCheck(spacing, segmentationSpacing)\n    ) {\n      baseVolumeIdx = i;\n    }\n\n    // prepare information used in callback functions\n    const referenceValues = imageData.getPointData().getScalars().getData();\n    const lower = thresholdVolumeInformation[i].lower;\n    const upper = thresholdVolumeInformation[i].upper;\n\n    volumeInfoList.push({\n      imageData,\n      referenceValues,\n      lower,\n      upper,\n      spacing,\n      dimensions,\n      volumeSize,\n    });\n  }\n\n  return {\n    volumeInfoList,\n    baseVolumeIdx,\n  };\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { BoundsIJK } from '../../types';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\nexport type ThresholdRangeOptions = {\n  overwrite: boolean;\n  boundsIJK: BoundsIJK;\n  overlapType?: number;\n};\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param options - the options for thresholding\n * As there is a chance the volumes might have different dimensions and spacing,\n * could be the case of no 1 to 1 mapping. So we need to work with the idea of\n * voxel overlaps (1 to many mappings). We consider all intersections valid, to\n * avoid the complexity to calculate a minimum voxel intersection percentage.\n * This function, given a voxel center and spacing, calculates the overlap of\n * the voxel with another volume and range check the voxels in the overlap.\n * Three situations can occur: all voxels pass the range check, some voxels pass\n * or none voxels pass. The overlapType parameter indicates if the user requires\n * all voxels pass (overlapType = 1) or any voxel pass (overlapType = 0)\n *\n * @returns segmented volume\n */\nfunction thresholdVolumeByRange(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdRangeOptions\n): Types.IImageVolume {\n  const { imageData: segmentationImageData } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  const { overwrite, boundsIJK } = options;\n  const overlapType = options?.overlapType || 0;\n\n  // set the segmentation to all zeros\n  if (overwrite) {\n    for (let i = 0; i < scalarData.length; i++) {\n      scalarData[i] = 0;\n    }\n  }\n\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  // global variables used in callbackOverlap function\n  let overlaps, total, range;\n\n  const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n    /**\n     * This callback function will test all overlaps between a voxel in base\n     * volume (the reference for segmentation volume creation) and voxels in other\n     * volumes.\n     */\n    const callbackOverlap = ({ value }) => {\n      total = total + 1;\n      if (value >= range.lower && value <= range.upper) {\n        overlaps = overlaps + 1;\n      }\n    };\n\n    const { imageData, dimensions, lower, upper } = volumeInfo;\n\n    const overlapBounds = getVoxelOverlap(\n      imageData,\n      dimensions,\n      voxelSpacing,\n      voxelCenter\n    );\n\n    // reset global variables and setting the range check\n    total = 0;\n    overlaps = 0;\n    range = { lower, upper };\n\n    let overlapTest = false;\n\n    // check all voxel overlaps\n    pointInShapeCallback(imageData, () => true, callbackOverlap, overlapBounds);\n\n    if (overlapType === 0) {\n      overlapTest = overlaps > 0; // any voxel overlap is accepted\n    } else if (overlapType == 1) {\n      overlapTest = overlaps === total; // require all voxel overlaps\n    }\n    return overlapTest;\n  };\n\n  // range checks a voxel in a volume with same dimension as the segmentation\n  const testRange = (volumeInfo, pointIJK) => {\n    const { imageData, referenceValues, lower, upper } = volumeInfo;\n    const offset = imageData.computeOffsetIndex(pointIJK);\n\n    const value = referenceValues[offset];\n    if (value <= lower || value >= upper) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * This callback function will test all overlaps between a voxel in base\n   * volume (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   */\n  const callback = ({ index, pointIJK, pointLPS }) => {\n    let insert = volumeInfoList.length > 0;\n    for (let i = 0; i < volumeInfoList.length; i++) {\n      // if volume has the same size as segmentation volume, just range check\n      if (volumeInfoList[i].volumeSize === scalarData.length) {\n        insert = testRange(volumeInfoList[i], pointIJK);\n      } else {\n        // if not, need to calculate overlaps\n        insert = testOverlapRange(\n          volumeInfoList[i],\n          volumeInfoList[baseVolumeIdx].spacing,\n          pointLPS\n        );\n      }\n      if (!insert) {\n        break;\n      }\n    }\n\n    // Todo: make the segmentIndex a parameter\n    if (insert) {\n      scalarData[index] = 1;\n    }\n  };\n\n  pointInShapeCallback(segmentationImageData, () => true, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nexport default thresholdVolumeByRange;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\n\nexport type BaseEventDetail = {\n  viewportId: string;\n  renderingEngineId: string;\n};\n\n/**\n * An annotation group\n */\n\nexport default class AnnotationGroup {\n  private annotationUIDs = new Set<string>();\n  private _isVisible = true;\n\n  public visibleFilter: (uid: string) => boolean;\n\n  constructor() {\n    this.visibleFilter = this.unboundVisibleFilter.bind(this);\n  }\n\n  /**\n   * Returns true if other groups are free to hide this annotation.\n   * That is, if the annotation is not a member or is hidden.\n   */\n  protected unboundVisibleFilter(uid: string): boolean {\n    return !this._isVisible || !this.annotationUIDs.has(uid);\n  }\n\n  public has(uid: string): boolean {\n    return this.annotationUIDs.has(uid);\n  }\n  /**\n   * Sets whether annotations belonging to this group are visible or not.\n   * If there are multiple groups, then the set visible false should be called\n   * before before re-enabling the other groups with setVisible true.\n   */\n  public setVisible(\n    isVisible = true,\n    baseEvent: BaseEventDetail,\n    filter?: (annotationUID: string) => boolean\n  ) {\n    if (this._isVisible === isVisible) {\n      return;\n    }\n    this._isVisible = isVisible;\n    this.annotationUIDs.forEach((uid) => {\n      const annotation = getAnnotation(uid);\n      if (!annotation) {\n        this.annotationUIDs.delete(uid);\n        return;\n      }\n      if (annotation.isVisible === isVisible) {\n        return;\n      }\n      if (!isVisible && filter?.(uid) === false) {\n        return;\n      }\n      annotation.isVisible = isVisible;\n      const eventDetail = {\n        ...baseEvent,\n        annotation,\n      };\n      triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n    });\n  }\n\n  public get isVisible() {\n    return this._isVisible;\n  }\n\n  /** Finds the nearby/next annotation in the given direction */\n  public findNearby(uid: string, direction: 1) {\n    const uids = [...this.annotationUIDs];\n    if (uids.length === 0) {\n      return null;\n    }\n    if (!uid) {\n      return uids[direction === 1 ? 0 : uids.length - 1];\n    }\n    const index = uids.indexOf(uid);\n    if (\n      index === -1 ||\n      index + direction < 0 ||\n      index + direction >= uids.length\n    ) {\n      return null;\n    }\n    return uids[index + direction];\n  }\n\n  /**\n   * Adds the annotation to the group\n   * Does NOT change the visibility status of the annotation.\n   */\n  public add(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.add(annotationUID)\n    );\n  }\n\n  /**\n   * Removes the annotation from the group.\n   * Does not affect the visibility status of the annotation.\n   */\n  public remove(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.delete(annotationUID)\n    );\n  }\n\n  /**\n   * Removes everything from the group.\n   */\n  public clear() {\n    this.annotationUIDs.clear();\n  }\n}\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * Tool that pans the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass PanTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\n\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { BaseTool } from './base';\n\n/**\n * Tool that rotates the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass TrackballRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        rotateIncrementDegrees: 2,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  rotateCamera = (viewport, centerWorld, axis, angle) => {\n    const vtkCamera = viewport.getVtkActiveCamera();\n    const viewUp = vtkCamera.getViewUp();\n    const focalPoint = vtkCamera.getFocalPoint();\n    const position = vtkCamera.getPosition();\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, centerWorld);\n    mat4.rotate(transform, transform, angle, axis);\n    mat4.translate(transform, transform, [\n      -centerWorld[0],\n      -centerWorld[1],\n      -centerWorld[2],\n    ]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, axis);\n    vec3.transformMat4(newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n  };\n\n  // pseudocode inspired from\n  // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js\n  _dragCallback(evt: EventTypes.InteractionEventType): void {\n    const { element, currentPoints, lastPoints } = evt.detail;\n    const currentPointsCanvas = currentPoints.canvas;\n    const lastPointsCanvas = lastPoints.canvas;\n    const { rotateIncrementDegrees } = this.configuration;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const normalizedPosition = [\n      currentPointsCanvas[0] / width,\n      currentPointsCanvas[1] / height,\n    ];\n\n    const normalizedPreviousPosition = [\n      lastPointsCanvas[0] / width,\n      lastPointsCanvas[1] / height,\n    ];\n\n    const center: Types.Point2 = [width * 0.5, height * 0.5];\n    // NOTE: centerWorld corresponds to the focal point in cornerstone3D\n    const centerWorld = viewport.canvasToWorld(center);\n    const normalizedCenter = [0.5, 0.5];\n\n    const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n    const op = [normalizedPreviousPosition[0], 0, 0];\n    const oe = [normalizedPosition[0], 0, 0];\n\n    const opsq = op[0] ** 2;\n    const oesq = oe[0] ** 2;\n\n    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n\n    const nop: Types.Point3 = [op[0], 0, lop];\n    vtkMath.normalize(nop);\n    const noe: Types.Point3 = [oe[0], 0, loe];\n    vtkMath.normalize(noe);\n\n    const dot = vtkMath.dot(nop, noe);\n    if (Math.abs(dot) > 0.0001) {\n      const angleX =\n        -2 *\n        Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n        Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n        rotateIncrementDegrees;\n\n      const upVec = camera.viewUp;\n      const atV = camera.viewPlaneNormal;\n      const rightV: Types.Point3 = [0, 0, 0];\n      const forwardV: Types.Point3 = [0, 0, 0];\n\n      vtkMath.cross(upVec, atV, rightV);\n      vtkMath.normalize(rightV);\n\n      vtkMath.cross(atV, rightV, forwardV);\n      vtkMath.normalize(forwardV);\n      vtkMath.normalize(upVec);\n\n      this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n\n      const angleY =\n        (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n        rotateIncrementDegrees;\n\n      this.rotateCamera(viewport, centerWorld, rightV, angleY);\n\n      viewport.render();\n    }\n  }\n}\n\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  utilities,\n  cache,\n  Types,\n} from '@cornerstonejs/core';\nimport { EventTypes } from '../types';\n\n// Todo: should move to configuration\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\n\n/**\n * WindowLevel tool manipulates the windowLevel applied to a viewport. It\n * provides a way to set the windowCenter and windowWidth of a viewport\n * by dragging mouse over the image.\n *\n */\nclass WindowLevelTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this.mouseDragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    let volumeId,\n      lower,\n      upper,\n      modality,\n      newRange,\n      viewportsContainingVolumeUID;\n    let isPreScaled = false;\n\n    const properties = viewport.getProperties();\n    if (viewport instanceof VolumeViewport) {\n      const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n      volumeId = targetId.split('volumeId:')[1];\n      viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n      ({ lower, upper } = properties.voiRange);\n      const volume = cache.getVolume(volumeId);\n      if (!volume) {\n        throw new Error('Volume not found ' + volumeId);\n      }\n      modality = volume.metadata.Modality;\n      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n    } else if (properties.voiRange) {\n      modality = (viewport as any).modality;\n      ({ lower, upper } = properties.voiRange);\n      const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n      isPreScaled =\n        preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n\n    // If modality is PT, treat it special to not include the canvas delta in\n    // the x direction. For other modalities, use the canvas delta in both\n    // directions, and if the viewport is a volumeViewport, the multiplier\n    // is calculate using the volume min and max.\n    if (modality === PT) {\n      newRange = this.getPTScaledNewRange({\n        deltaPointsCanvas: deltaPoints.canvas,\n        lower,\n        upper,\n        clientHeight: element.clientHeight,\n        isPreScaled,\n        viewport,\n        volumeId,\n      });\n    } else {\n      newRange = this.getNewRange({\n        viewport,\n        deltaPointsCanvas: deltaPoints.canvas,\n        volumeId,\n        lower,\n        upper,\n      });\n    }\n\n    viewport.setProperties({\n      voiRange: newRange,\n    });\n\n    viewport.render();\n\n    if (viewport instanceof VolumeViewport) {\n      viewportsContainingVolumeUID.forEach((vp) => {\n        if (viewport !== vp) {\n          vp.render();\n        }\n      });\n      return;\n    }\n  }\n\n  getPTScaledNewRange({\n    deltaPointsCanvas,\n    lower,\n    upper,\n    clientHeight,\n    viewport,\n    volumeId,\n    isPreScaled,\n  }) {\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (isPreScaled) {\n      multiplier = 5 / clientHeight;\n    } else {\n      multiplier =\n        this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n        DEFAULT_MULTIPLIER;\n    }\n\n    const deltaY = deltaPointsCanvas[1];\n    const wcDelta = deltaY * multiplier;\n\n    upper -= wcDelta;\n    upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n\n    return { lower, upper };\n  }\n\n  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n    const multiplier =\n      this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n      DEFAULT_MULTIPLIER;\n\n    const wwDelta = deltaPointsCanvas[0] * multiplier;\n    const wcDelta = deltaPointsCanvas[1] * multiplier;\n\n    let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\n      lower,\n      upper\n    );\n\n    windowWidth += wwDelta;\n    windowCenter += wcDelta;\n\n    windowWidth = Math.max(windowWidth, 1);\n\n    // Convert back to range\n    return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n  }\n\n  _getMultiplierFromDynamicRange(viewport, volumeId) {\n    let imageDynamicRange;\n\n    if (volumeId) {\n      const imageVolume = cache.getVolume(volumeId);\n      const { dimensions } = imageVolume;\n      const scalarData = imageVolume.getScalarData();\n      const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(\n        scalarData,\n        dimensions\n      );\n      const BitsStored = imageVolume?.metadata?.BitsStored;\n      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n      // Burned in Pixels often use pixel values above the BitsStored.\n      // This results in a multiplier which is way higher than what you would\n      // want in practice. Thus we take the min between the metadata dynamic\n      // range and actual middel slice dynamic range.\n      imageDynamicRange = Math.min(\n        calculatedDynamicRange,\n        metadataDynamicRange\n      );\n    } else {\n      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n    }\n\n    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (ratio > 1) {\n      multiplier = Math.round(ratio);\n    }\n    return multiplier;\n  }\n\n  _getImageDynamicRangeFromViewport(viewport) {\n    const { imageData } = viewport.getImageData();\n    const dimensions = imageData.getDimensions();\n\n    if (imageData.getRange) {\n      return imageData.getRange();\n    }\n    let scalarData;\n    // if getScalarData is a method on imageData\n    if (imageData.getScalarData) {\n      scalarData = imageData.getScalarData();\n    } else {\n      scalarData = imageData.getPointData().getScalars();\n    }\n\n    if (dimensions[2] !== 1) {\n      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n    }\n\n    let range;\n    if (scalarData.getRange) {\n      range = scalarData.getRange();\n    } else {\n      const { min, max } = this._getMinMax(scalarData, scalarData.length);\n      range = [min, max];\n    }\n\n    return range[1] - range[0];\n  }\n\n  _getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n    const middleSliceIndex = Math.floor(dimensions[2] / 2);\n\n    const frameLength = dimensions[0] * dimensions[1];\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n\n    if (scalarData instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else if (scalarData instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (scalarData instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (scalarData instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    }\n\n    const buffer = scalarData.buffer;\n    const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n    const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n\n    const { max, min } = this._getMinMax(frame, frameLength);\n\n    return max - min;\n  };\n\n  private _getMinMax(frame: Uint8Array | Float32Array, frameLength: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0; i < frameLength; i++) {\n      const voxel = frame[i];\n\n      if (voxel < min) {\n        min = voxel;\n      }\n\n      if (voxel > max) {\n        max = voxel;\n      }\n    }\n    return { max, min };\n  }\n}\n\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { getEnabledElementByIds, VolumeViewport } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { scroll } from '../utilities';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The StackScrollTool is a tool that allows the user to scroll through a\n * stack of images by pressing the mouse click and dragging\n */\nclass StackScrollTool extends BaseTool {\n  static toolName;\n  deltaY: number;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.deltaY = 1;\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n\n    const targetId = this.getTargetId(viewport);\n    const { debounceIfNotLoaded, invert, loop } = this.configuration;\n\n    const deltaPointY = deltaPoints.canvas[1];\n    let volumeId;\n    if (viewport instanceof VolumeViewport) {\n      volumeId = targetId.split('volumeId:')[1];\n    }\n\n    const pixelsPerImage = this._getPixelPerImage(viewport);\n    const deltaY = deltaPointY + this.deltaY;\n\n    if (!pixelsPerImage) {\n      return;\n    }\n\n    if (Math.abs(deltaY) >= pixelsPerImage) {\n      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n\n      scroll(viewport, {\n        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n        volumeId,\n        debounceLoading: debounceIfNotLoaded,\n        loop: loop,\n      });\n\n      this.deltaY = deltaY % pixelsPerImage;\n    } else {\n      this.deltaY = deltaY;\n    }\n  }\n\n  _getPixelPerImage(viewport) {\n    const { element } = viewport;\n    const numberOfSlices = viewport.getNumberOfSlices();\n\n    // The Math.max here makes it easier to mouseDrag-scroll small or really large image stacks\n    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n  }\n}\n\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\n\ntype Line2D = [Types.Point2, Types.Point2];\ntype Line3D = [Types.Point3, Types.Point3];\ntype Line = Line2D | Line3D;\n\n/**\n * Calculates the angle between two 3D lines.\n */\nfunction angleBetween3DLines(line1: Line3D, line2: Line3D): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec3.sub(vec3.create(), p2, p1);\n  const v2 = vec3.sub(vec3.create(), p3, p4);\n\n  const dot = vec3.dot(v1, v2);\n\n  const v1Length = vec3.length(v1);\n  const v2Length = vec3.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n\n  const radian = Math.acos(cos);\n\n  return (radian * 180) / Math.PI;\n}\n\n/**\n * Calculates the angle between two 2D lines.\n */\nfunction angleBetween2DLines(line1: Line2D, line2: Line2D): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec2.sub(vec2.create(), p2, p1);\n  const v2 = vec2.sub(vec2.create(), p3, p4);\n\n  const dot = vec2.dot(v1, v2);\n  const v1Length = vec2.length(v1);\n  const v2Length = vec2.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n  return Math.acos(cos) * (180 / Math.PI);\n}\n\n/**\n * Returns the angle between two lines in degrees.\n * The angle measured is that between the vectors\n * line1[1]->line1[0] AND line2[0]->line2[1].\n * @param line1 - Line = [p1, p2]\n * @param line2 - Line = [p3, p4]\n * @returns The angle between two lines in degrees.\n */\nexport default function angleBetweenLines(line1: Line, line2: Line): number {\n  const is3D = line1[0].length === 3;\n  return is3D\n    ? angleBetween3DLines(line1 as Line3D, line2 as Line3D)\n    : angleBetween2DLines(line1 as Line2D, line2 as Line2D);\n}\n","import {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Types,\n} from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The PlanarRotateTool is a tool that allows the user to rotate\n * the image by pressing the mouse click and dragging\n */\nclass PlanarRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n  mouseDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  _dragCallback(evt: EventTypes.MouseDragEventType) {\n    const { element, currentPoints, startPoints } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const centerCanvas: Types.Point2 = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n\n    let angle = angleBetweenLines(\n      [startPointWorld, centerWorld],\n      [centerWorld, currentPointWorld]\n    );\n\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n\n    if (Number.isNaN(angle)) {\n      return;\n    }\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = (angle * Math.PI) / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({ viewUp: rotatedViewUp as Types.Point3 });\n    } else {\n      const { rotation } = (viewport as Types.IStackViewport).getProperties();\n      viewport.setProperties({ rotation: rotation + angle });\n    }\n\n    viewport.render();\n  }\n}\n\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { MouseWheelEventType } from '../types/EventTypes';\nimport scroll from '../utilities/scroll';\n\n/**\n * The StackScrollMouseWheelTool is a tool that allows the user to scroll through a\n * stack of images using the mouse wheel\n */\nclass StackScrollMouseWheelTool extends BaseTool {\n  static toolName;\n\n  _configuration: any;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n        scrollSlabs: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType): void {\n    const { wheel, element } = evt.detail;\n    const { direction } = wheel;\n    const { invert } = this.configuration;\n    const { viewport } = getEnabledElement(element);\n    const delta = direction * (invert ? -1 : 1);\n\n    const targetId = this.getTargetId(viewport);\n    const volumeId = targetId.split('volumeId:')[1];\n\n    scroll(viewport, {\n      delta,\n      debounceLoading: this.configuration.debounceIfNotLoaded,\n      loop: this.configuration.loop,\n      volumeId,\n      scrollSlabs: this.configuration.scrollSlabs,\n    });\n  }\n}\n\nStackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';\nexport default StackScrollMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement, Types } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * ZoomTool tool manipulates the camera zoom applied to a viewport. It\n * provides a way to set the zoom of a viewport by dragging mouse over the image.\n *\n */\nclass ZoomTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  initialMousePosWorld: Types.Point3;\n  dirVec: Types.Point3;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        // whether zoom to the center of the image OR zoom to the mouse position\n        zoomToCenter: false,\n        minZoomScale: 0.1,\n        maxZoomScale: 30,\n        pinchToZoom: true,\n        pan: true,\n        invert: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.initialMousePosWorld = [0, 0, 0];\n    this.dirVec = [0, 0, 0];\n    if (this.configuration.pinchToZoom) {\n      this.touchDragCallback = this._pinchCallback.bind(this);\n    } else {\n      this.touchDragCallback = this._dragCallback.bind(this);\n    }\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint } = camera;\n\n    this.initialMousePosWorld = worldPos;\n\n    // The direction vector from the clicked location to the focal point\n    // which would act as the vector to translate the image (if zoomToCenter is false)\n    let dirVec = vec3.fromValues(\n      focalPoint[0] - worldPos[0],\n      focalPoint[1] - worldPos[1],\n      focalPoint[2] - worldPos[2]\n    );\n\n    dirVec = vec3.normalize(vec3.create(), dirVec);\n\n    this.dirVec = dirVec as Types.Point3;\n\n    // we should not return true here, returning true in the preMouseDownCallback\n    // means that the event is handled by the tool and no other methods\n    // can claim the event, which will result in a bug where having Zoom on primary\n    // and clicking on an annotation will not manipulate the annotation, but will\n    // instead zoom the image (which is not what we want), so we return false here\n    return false;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (!this.configuration.pinchToZoom) {\n      return this.preMouseDownCallback(evt);\n    }\n  };\n\n  _pinchCallback(evt: EventTypes.InteractionEventType) {\n    const pointsList = (evt as EventTypes.TouchStartEventType).detail\n      .currentPointsList;\n\n    if (pointsList.length > 1) {\n      const { element, currentPoints } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const { viewport } = enabledElement;\n      const camera = viewport.getCamera();\n      const worldPos = currentPoints.world;\n      const { focalPoint } = camera;\n      this.initialMousePosWorld = worldPos;\n      // The direction vector from the clicked location to the focal point\n      // which would act as the vector to translate the image (if zoomToCenter is false)\n      let dirVec = vec3.fromValues(\n        focalPoint[0] - worldPos[0],\n        focalPoint[1] - worldPos[1],\n        focalPoint[2] - worldPos[2]\n      );\n      dirVec = vec3.normalize(vec3.create(), dirVec);\n\n      this.dirVec = dirVec as Types.Point3;\n      if (camera.parallelProjection) {\n        this._dragParallelProjection(evt, viewport, camera, true);\n      } else {\n        this._dragPerspectiveProjection(evt, viewport, camera, true);\n      }\n      viewport.render();\n    }\n\n    if (this.configuration.pan) {\n      this._panCallback(evt);\n    }\n  }\n\n  // Takes ICornerstoneEvent, Mouse or Touch\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n\n    if (camera.parallelProjection) {\n      this._dragParallelProjection(evt, viewport, camera);\n    } else {\n      this._dragPerspectiveProjection(evt, viewport, camera);\n    }\n\n    viewport.render();\n  }\n\n  _dragParallelProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { parallelScale, focalPoint, position } = camera;\n\n    const zoomScale = 5 / size[1];\n    const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n\n    const parallelScaleToSet = (1.0 - k) * parallelScale;\n\n    let focalPointToSet = focalPoint;\n    let positionToSet = position;\n\n    // if we're not zooming to the center, we need to adjust the focal point\n    // and position to set the focal point and position to the value that\n    // would simulate the zoom to the mouse position\n    if (!this.configuration.zoomToCenter) {\n      // Distance of the initial mouse position (world) to the focal point\n      // which is always the center of the canvas.\n      const distanceToCanvasCenter = vec3.distance(\n        focalPoint,\n        this.initialMousePosWorld\n      );\n\n      positionToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        position,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n\n      focalPointToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        focalPoint,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n    }\n\n    // If it is a regular GPU accelerated viewport, then parallel scale\n    // has a physical meaning and we can use that to determine the threshold\n    // Added spacing preset in case there is no imageData on viewport\n    const imageData = viewport.getImageData();\n    let spacing = [1, 1, 1];\n    if (imageData) {\n      spacing = imageData.spacing;\n    }\n\n    const { minZoomScale, maxZoomScale } = this.configuration;\n\n    const t = element.clientHeight * spacing[1] * 0.5;\n    const scale = t / parallelScaleToSet;\n\n    let cappedParallelScale = parallelScaleToSet;\n    let thresholdExceeded = false;\n\n    if (imageData) {\n      if (scale < minZoomScale) {\n        cappedParallelScale = t / minZoomScale;\n        thresholdExceeded = true;\n      } else if (scale >= maxZoomScale) {\n        cappedParallelScale = t / maxZoomScale;\n        thresholdExceeded = true;\n      }\n    }\n\n    viewport.setCamera({\n      parallelScale: cappedParallelScale,\n      focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n      position: thresholdExceeded ? position : positionToSet,\n    });\n  };\n\n  _dragPerspectiveProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { position, focalPoint, viewPlaneNormal } = camera;\n\n    const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n    const zoomScale = Math.sqrt(distance) / size[1];\n\n    const directionOfProjection = [\n      -viewPlaneNormal[0],\n      -viewPlaneNormal[1],\n      -viewPlaneNormal[2],\n    ];\n\n    const k = this.configuration.invert\n      ? deltaY / zoomScale\n      : deltaY * zoomScale;\n\n    let tmp = k * directionOfProjection[0];\n    position[0] += tmp;\n    focalPoint[0] += tmp;\n\n    tmp = k * directionOfProjection[1];\n    position[1] += tmp;\n    focalPoint[1] += tmp;\n\n    tmp = k * directionOfProjection[2];\n    position[2] += tmp;\n    focalPoint[2] += tmp;\n\n    viewport.setCamera({ position, focalPoint });\n  };\n\n  _panCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { mat4, vec3 } from 'gl-matrix';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { MouseWheelEventType } from '../types/EventTypes';\n\nconst DIRECTIONS = {\n  X: [1, 0, 0],\n  Y: [0, 1, 0],\n  Z: [0, 0, 1],\n  CUSTOM: [],\n};\n\n/**\n * Tool that rotates the camera on mouse wheel.\n * It rotates the camera around the focal point, and around a defined axis. Default\n * axis is set to be Z axis, but it can be configured to any custom normalized axis.\n *\n */\nclass VolumeRotateMouseWheelTool extends BaseTool {\n  static toolName;\n  _configuration: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        direction: DIRECTIONS.Z,\n        rotateIncrementDegrees: 30,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType) {\n    // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js#L73\n    const { element, wheel } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { direction, rotateIncrementDegrees } = this.configuration;\n\n    const camera = viewport.getCamera();\n    const { viewUp, position, focalPoint } = camera;\n\n    const { direction: deltaY } = wheel;\n\n    const [cx, cy, cz] = focalPoint;\n    const [ax, ay, az] = direction;\n\n    //Calculate angle in radian as glmatrix rotate is in radian\n    const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n\n    // position[3] = 1.0\n    // focalPoint[3] = 1.0\n    // viewUp[3] = 0.0\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    vec3.transformMat4(<Types.Point3>newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n\n    viewport.render();\n  }\n}\n\nVolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined\n * by a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates\n * of the rectangle defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param topLeftWorld - The first world position.\n * @param bottomRightWorld - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromCorners(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  topLeftWorld: Types.Point3,\n  bottomRightWorld: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...topLeftWorld);\n  const pos2 = vec3.fromValues(...bottomRightWorld);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n/**\n * Returns a point based on some criteria (e.g., minimum or maximum intensity) in\n * the line of sight (on the line between the passed worldPosition and camera position).\n * It iterated over the points with a step size on the line.\n *\n * @param viewport - Volume viewport\n * @param worldPos - World coordinates of the clicked location\n * @param targetVolumeId - target Volume ID in the viewport\n * @param criteriaFunction - A function that returns the point if it passes a certain\n * written logic, for instance, it can be a maxValue function that keeps the\n * records of all intensity values, and only return the point if its intensity\n * is greater than the maximum intensity of the points passed before.\n * @param stepsSize - Percentage of the spacing in the normal direction, default value\n * is 0.25 which means steps = 1/4 of the spacing in the normal direction.\n * @returns the World pos of the point that passes the criteriaFunction\n */\nexport default function getPointInLineOfSightWithCriteria(\n  viewport: Types.IVolumeViewport,\n  worldPos: Types.Point3,\n  targetVolumeId: string,\n  criteriaFunction: (intensity: number, point: Types.Point3) => Types.Point3,\n  stepSize = 0.25\n): Types.Point3 {\n  // 1. Getting the camera from the event details\n  const camera = viewport.getCamera();\n  const { position: cameraPosition } = camera;\n\n  // 2. Calculating the spacing in the normal direction, this will get\n  // used as the step size for iterating over the points in the line of sight\n  const { spacingInNormalDirection } =\n    csUtils.getTargetVolumeAndSpacingInNormalDir(\n      viewport,\n      camera,\n      targetVolumeId\n    );\n  // 2.1 Making sure, we are not missing any point\n  const step = spacingInNormalDirection * stepSize;\n\n  // 3. Getting the bounds of the viewports. Search for brightest point is\n  // limited to the visible bound\n  // Todo: this might be a problem since bounds will change to spatial bounds.\n  const bounds = viewport.getBounds();\n  const xMin = bounds[0];\n  const xMax = bounds[1];\n\n  // 5. Calculating the line, we use a parametric line definition\n  const vector = <Types.Point3>[0, 0, 0];\n\n  // 5.1 Point coordinate on the line\n  let point = <Types.Point3>[0, 0, 0];\n\n  // 5.2 Calculating the line direction, and storing in vector\n  vtkMath.subtract(worldPos, cameraPosition, vector);\n\n  let pickedPoint;\n\n  // 6. Iterating over the line from the lower bound to the upper bound, with the\n  // specified step size\n  for (let pointT = xMin; pointT <= xMax; pointT = pointT + step) {\n    // 6.1 Calculating the point x location\n    point = [pointT, 0, 0];\n    // 6.2 Calculating the point y,z location based on the line equation\n    const t = (pointT - cameraPosition[0]) / vector[0];\n    point[1] = t * vector[1] + cameraPosition[1];\n    point[2] = t * vector[2] + cameraPosition[2];\n\n    // 6.3 Checking if the points is inside the bounds\n    if (_inBounds(point, bounds)) {\n      // 6.4 Getting the intensity of the point\n      const intensity = viewport.getIntensityFromWorld(point);\n      // 6.5 Passing the intensity to the maximum value functions which decides\n      // whether the current point is of interest based on some criteria\n      const pointToPick = criteriaFunction(intensity, point);\n      if (pointToPick) {\n        pickedPoint = pointToPick;\n      }\n    }\n  }\n\n  return pickedPoint;\n}\n\n/**\n * Returns whether the point in the world is inside the bounds of the viewport\n * @param point - coordinates in the world\n * @returns boolean\n */\nconst _inBounds = function (\n  point: Types.Point3,\n  bounds: Array<number>\n): boolean {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  return (\n    point[0] > xMin &&\n    point[0] < xMax &&\n    point[1] > yMin &&\n    point[1] < yMax &&\n    point[2] > zMin &&\n    point[2] < zMax\n  );\n};\n","import filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport getWorldWidthAndHeightFromCorners from './getWorldWidthAndHeightFromCorners';\nimport filterAnnotationsForDisplay from './filterAnnotationsForDisplay';\nimport getPointInLineOfSightWithCriteria from './getPointInLineOfSightWithCriteria';\n\nexport default {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n\nexport {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n","import { VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\n\n// Todo: merge this utility functionality with Crosshair _jump\n/**\n * Uses the viewport's current camera to jump to a specific world coordinate\n * @param enabledElement - enabled element\n * @param jumpWorld - location in the world to jump to\n * @returns True if successful\n */\nexport default function jumpToWorld(\n  viewport: Types.IVolumeViewport,\n  jumpWorld: Types.Point3\n): true | undefined {\n  // if not instance of volumeViewport, return\n  if (!(viewport instanceof VolumeViewport)) {\n    return;\n  }\n\n  const { focalPoint } = viewport.getCamera();\n\n  const delta: Types.Point3 = [0, 0, 0];\n  vec3.sub(delta, jumpWorld, focalPoint);\n\n  _applyShift(viewport, delta);\n\n  return true;\n}\n\nfunction _applyShift(viewport, delta) {\n  const camera = viewport.getCamera();\n  const normal = camera.viewPlaneNormal;\n\n  const dotProd = vec3.dot(delta, normal);\n  const projectedDelta = vec3.fromValues(normal[0], normal[1], normal[2]);\n\n  vec3.scale(projectedDelta, projectedDelta, dotProd);\n\n  if (\n    Math.abs(projectedDelta[0]) > 1e-3 ||\n    Math.abs(projectedDelta[1]) > 1e-3 ||\n    Math.abs(projectedDelta[2]) > 1e-3\n  ) {\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newPosition: Types.Point3 = [0, 0, 0];\n\n    vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);\n    vec3.add(newPosition, camera.position, projectedDelta);\n\n    viewport.setCamera({\n      focalPoint: newFocalPoint,\n      position: newPosition,\n    });\n    viewport.render();\n  }\n}\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport jumpToWorld from '../utilities/viewport/jumpToWorld';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\n\n/**\n * On a Maximum Intensity Projection (MIP) viewport, MIPJumpToClickTool allows the\n * user to click on a point in the MIP and the targetViewportIdS (provided in the\n * tool configuration) will be scrolled (jumped) to the location of the point with\n * the highest intensity value in the MIP.\n */\nclass MIPJumpToClickTool extends BaseTool {\n  static toolName;\n\n  _bounds: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        targetViewportIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Handles the click event, and move the camera's focal point the brightest\n   * point that is in the line of sight of camera. This function 1) search for the\n   * brightest point in the line of sight, 2) move the camera to that point,\n   * this triggers a cameraModified event which then 4) moves all other synced\n   * viewports and their crosshairs.\n   *\n   * @param evt - click event\n   */\n  mouseClickCallback(evt): void {\n    const { element, currentPoints } = evt.detail;\n\n    // 1. Getting the enabled element\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    // 2. Getting the target volume that is clicked on\n    const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n\n    if (!targetId.startsWith('volumeId')) {\n      throw new Error(\n        `MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`\n      );\n    }\n\n    const volumeId = targetId.split('volumeId:')[1];\n\n    // 3. Criteria function to search for the point (maximum intensity)\n    let maxIntensity = -Infinity;\n    const maxFn = (intensity, point) => {\n      if (intensity > maxIntensity) {\n        maxIntensity = intensity;\n        return point;\n      }\n    };\n\n    // 4. Search for the brightest point location in the line of sight\n    const brightestPoint = getPointInLineOfSightWithCriteria(\n      viewport as Types.IVolumeViewport,\n      currentPoints.world,\n      volumeId,\n      maxFn\n    );\n\n    if (!brightestPoint || !brightestPoint.length) {\n      return;\n    }\n\n    const { targetViewportIds, toolGroupId } = this.configuration;\n    // TODO - consider making this a utility\n    const viewports = renderingEngine.getViewports().filter((vp) => {\n      if (targetViewportIds?.indexOf(vp.id) >= 0) {\n        return true;\n      }\n      const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n      if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n        return true;\n      }\n      return false;\n    });\n\n    // 6. Update all the targetedViewports to jump\n    viewports.forEach((viewport) => {\n      // Todo: current limitation is that we cannot jump in viewports\n      // that don't belong to the renderingEngine of the source clicked viewport\n      if (viewport instanceof VolumeViewport) {\n        jumpToWorld(viewport, brightestPoint);\n      } else {\n        console.warn(\n          'Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport'\n        );\n      }\n    });\n  }\n}\n\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given an array of viewports, returns a list of viewports that are viewing a\n * world space with the given `FrameOfReferenceUID`.\n *\n * @param viewports - An array of viewports.\n * @param FrameOfReferenceUID - The UID defining a particular world space/Frame Of Reference.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithFrameOfReferenceUID(\n  viewports: Array<Types.IViewport>,\n  FrameOfReferenceUID: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n  const viewportsWithFrameOfReferenceUID = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n      viewportsWithFrameOfReferenceUID.push(viewport);\n    }\n  }\n\n  return viewportsWithFrameOfReferenceUID;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport type { IToolGroup } from '../../types';\nimport { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * Given an array of viewports, returns a list of viewports that have the the specified tool enabled.\n *\n * @param viewports - An array of viewports.\n * @param toolName - The name of the tool to filter on.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithToolEnabled(\n  viewports: Array<Types.IViewport>,\n  toolName: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n\n  const viewportsWithToolEnabled = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewport.id,\n      viewport.renderingEngineId\n    );\n\n    if (!toolGroup) {\n      continue;\n    }\n\n    const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(\n      toolGroup,\n      toolName\n    );\n\n    if (hasTool) {\n      viewportsWithToolEnabled.push(viewport);\n    }\n  }\n\n  return viewportsWithToolEnabled;\n}\n\n/**\n * Given a toolGroup, return true if it contains the tool with the given `toolName` and it is\n * active, passive or enabled.\n *\n * @param toolGroup - The `toolGroup` to check.\n * @param toolName - The name of the tool.\n *\n * @returns True if the tool is enabled, passive or active in the `toolGroup`.\n */\nfunction _toolGroupHasActiveEnabledOrPassiveTool(\n  toolGroup: IToolGroup,\n  toolName: string\n) {\n  const { toolOptions } = toolGroup;\n  const tool = toolOptions[toolName];\n\n  if (!tool) {\n    return false;\n  }\n\n  const toolMode = tool.mode;\n\n  return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * It filters the viewports that are looking in the same view as the camera\n * It basically checks if the viewPlaneNormal is parallel to the camera viewPlaneNormal\n * @param viewports - Array of viewports to filter\n * @param camera - Camera to compare against\n * @returns - Array of viewports with the same view\n */\nexport function filterViewportsWithParallelNormals(\n  viewports,\n  camera,\n  EPS = 0.999\n) {\n  return viewports.filter((viewport) => {\n    const vpCamera = viewport.getCamera();\n\n    const isParallel =\n      Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n      EPS;\n\n    return isParallel;\n  });\n}\n\nexport default filterViewportsWithParallelNormals;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport filterViewportsWithFrameOfReferenceUID from './filterViewportsWithFrameOfReferenceUID';\nimport filterViewportsWithToolEnabled from './filterViewportsWithToolEnabled';\nimport filterViewportsWithParallelNormals from './filterViewportsWithParallelNormals';\n\n/**\n * Given a cornerstone3D enabled `element`, and a `toolName`, find all viewportIds\n * looking at the same Frame Of Reference that have the tool with the given `toolName`\n * active, passive or enabled.\n *\n * @param element - The target cornerstone3D enabled element.\n * @param toolName - The string toolName.\n * @param requireParallelNormals - If true, only return viewports that have parallel normals.\n *\n * @returns An array of viewportIds.\n */\nexport default function getViewportIdsWithToolToRender(\n  element: HTMLDivElement,\n  toolName: string,\n  requireParallelNormals = true\n): string[] {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, FrameOfReferenceUID } = enabledElement;\n\n  let viewports = renderingEngine.getViewports();\n\n  viewports = filterViewportsWithFrameOfReferenceUID(\n    viewports,\n    FrameOfReferenceUID\n  );\n  viewports = filterViewportsWithToolEnabled(viewports, toolName);\n\n  const viewport = renderingEngine.getViewport(enabledElement.viewportId);\n\n  if (requireParallelNormals) {\n    viewports = filterViewportsWithParallelNormals(\n      viewports,\n      viewport.getCamera()\n    );\n  }\n\n  const viewportIds = viewports.map((vp) => vp.id);\n\n  return viewportIds;\n}\n","// Pulled from source: https://github.com/w8r/liang-barsky\n// MIT Licensed.\n\n/**\n * Fast, destructive implementation of Liang-Barsky line clipping algorithm.\n * It clips a 2D segment by a rectangle.\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n */\n\nconst EPSILON = 1e-6;\nconst INSIDE = 1;\nconst OUTSIDE = 0;\n\nfunction clipT(num, denom, c) {\n  const [tE, tL] = c;\n  if (Math.abs(denom) < EPSILON) {\n    return num < 0;\n  }\n  const t = num / denom;\n\n  if (denom > 0) {\n    if (t > tL) {\n      return 0;\n    }\n    if (t > tE) {\n      c[0] = t;\n    }\n  } else {\n    if (t < tE) {\n      return 0;\n    }\n    if (t < tL) {\n      c[1] = t;\n    }\n  }\n  return 1;\n}\n\n/**\n * @param  {Point} a\n * @param  {Point} b\n * @param  {BoundingBox} box [xmin, ymin, xmax, ymax]\n * @param  {Point?} [da]\n * @param  {Point?} [db]\n * @return {number}\n */\nexport default function clip(a, b, box, da?, db?) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (da === undefined || db === undefined) {\n    da = a;\n    db = b;\n  } else {\n    da[0] = a[0];\n    da[1] = a[1];\n    db[0] = b[0];\n    db[1] = b[1];\n  }\n\n  if (\n    Math.abs(dx) < EPSILON &&\n    Math.abs(dy) < EPSILON &&\n    x1 >= box[0] &&\n    x1 <= box[2] &&\n    y1 >= box[1] &&\n    y1 <= box[3]\n  ) {\n    return INSIDE;\n  }\n\n  const c = [0, 1];\n  if (\n    clipT(box[0] - x1, dx, c) &&\n    clipT(x1 - box[2], -dx, c) &&\n    clipT(box[1] - y1, dy, c) &&\n    clipT(y1 - box[3], -dy, c)\n  ) {\n    const [tE, tL] = c;\n    if (tL < 1) {\n      db[0] = x1 + tL * dx;\n      db[1] = y1 + tL * dy;\n    }\n    if (tE > 0) {\n      da[0] += tE * dx;\n      da[1] += tE * dy;\n    }\n    return INSIDE;\n  }\n  return OUTSIDE;\n}\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to an AABB using 2D Box SDF (Signed Distance Field)\n *\n * The SDF of a Box\n * https://www.youtube.com/watch?v=62-pRVZuS5c\n *\n * @param aabb - Axis-aligned bound box\n * @param point - 2D point\n * @returns The closest distance between the 2D point and the AABB\n */\nexport default function distanceToPointSquared(\n  aabb: Types.AABB2,\n  point: Types.Point2\n): number {\n  const aabbWidth = aabb.maxX - aabb.minX;\n  const aabbHeight = aabb.maxY - aabb.minY;\n  const aabbSize = [aabbWidth, aabbHeight];\n  const aabbCenter: Types.Point2 = [\n    aabb.minX + aabbWidth / 2,\n    aabb.minY + aabbHeight / 2,\n  ];\n\n  // Translates the point as the center of the AABB is the new origin.\n  // THe point is also mirroed to the first quadrant to simplify the math.\n  const translatedPoint = [\n    Math.abs(point[0] - aabbCenter[0]),\n    Math.abs(point[1] - aabbCenter[1]),\n  ];\n\n  // Calculate the distance from the point to the vertical and horizontal AABB borders\n  const dx = translatedPoint[0] - aabbSize[0] * 0.5;\n  const dy = translatedPoint[1] - aabbSize[1] * 0.5;\n\n  // dx >  0 && dy >  0: diagonal line connecting the point to AABB's corner\n  // dx >  0 && dy <= 0: a line parallel to x-axis connecting the point to AABB's right side\n  // dx <= 0 && dy >  0: a line parallel to y-axis connecting the point to AABB's top side\n  // dx <= 0 && dy <= 0: the point is inside the AABB\n  if (dx > 0 && dy > 0) {\n    return dx * dx + dy * dy;\n  }\n\n  const dist = Math.max(dx, 0) + Math.max(dy, 0);\n\n  return dist * dist;\n}\n","import { Types } from '@cornerstonejs/core';\nimport distanceToPointSquared from './distanceToPointSquared';\n\n/**\n * Calculates the squared distance of a point to an AABB using\n * 2D Box SDF (Signed Distance Field)\n *\n * The SDF of a Box\n * https://www.youtube.com/watch?v=62-pRVZuS5c\n *\n * @param aabb - Axis-aligned bound box (minX, minY, maxX and maxY)\n * @param point - 2D point\n * @returns The squared distance between the 2D point and the AABB\n */\nexport default function distanceToPoint(\n  aabb: Types.AABB2,\n  point: Types.Point2\n): number {\n  return Math.sqrt(distanceToPointSquared(aabb, point));\n}\n","import { Statistics } from '../../../types';\n\nabstract class Calculator {\n  static run: ({ value }) => void;\n  static getStatistics: () => Statistics[];\n}\n\nexport default Calculator;\n","import { Statistics } from '../../../types';\nimport Calculator from './Calculator';\n\nexport default class BasicStatsCalculator extends Calculator {\n  private static max = [-Infinity];\n  private static sum = [0];\n  private static sumSquares = [0];\n  private static squaredDiffSum = [0];\n  private static count = 0;\n\n  /**\n   * This callback is used when we verify if the point is in the annotion drawn so we can get every point\n   * in the shape to calculate the statistics\n   * @param value of the point in the shape of the annotation\n   */\n  static statsCallback = ({ value: newValue }): void => {\n    if (\n      Array.isArray(newValue) &&\n      newValue.length > 1 &&\n      this.max.length === 1\n    ) {\n      this.max.push(this.max[0], this.max[0]);\n      this.sum.push(this.sum[0], this.sum[0]);\n      this.sumSquares.push(this.sumSquares[0], this.sumSquares[0]);\n      this.squaredDiffSum.push(this.squaredDiffSum[0], this.squaredDiffSum[0]);\n    }\n\n    const newArray = Array.isArray(newValue) ? newValue : [newValue];\n    this.count += 1;\n\n    this.max.forEach(\n      (it, idx) => (this.max[idx] = Math.max(it, newArray[idx]))\n    );\n    this.sum.map((it, idx) => (this.sum[idx] += newArray[idx]));\n    this.sumSquares.map(\n      (it, idx) => (this.sumSquares[idx] += newArray[idx] ** 2)\n    );\n    this.squaredDiffSum.map(\n      (it, idx) =>\n        (this.squaredDiffSum[idx] += Math.pow(\n          newArray[idx] - this.sum[idx] / this.count,\n          2\n        ))\n    );\n  };\n\n  /**\n   * Basic function that calculates statictics for a given array of points.\n   * @param points\n   * @returns An object that contains :\n   * max : The maximum value of the array\n   * mean : mean of the array\n   * stdDev : standard deviation of the array\n   * stdDevWithSumSquare : standard deviation of the array using sum²\n   */\n\n  static getStatistics = (): Statistics[] => {\n    const mean = this.sum.map((sum) => sum / this.count);\n    const stdDev = this.squaredDiffSum.map((squaredDiffSum) =>\n      Math.sqrt(squaredDiffSum / this.count)\n    );\n    const stdDevWithSumSquare = this.sumSquares.map((it, idx) =>\n      Math.sqrt(this.sumSquares[idx] / this.count - mean[idx] ** 2)\n    );\n    const currentMax = this.max;\n\n    this.max = [-Infinity];\n    this.sum = [0];\n    this.sumSquares = [0];\n    this.squaredDiffSum = [0];\n    this.count = 0;\n\n    return [\n      { name: 'max', value: singleArrayAsNumber(currentMax), unit: null },\n      { name: 'mean', value: singleArrayAsNumber(mean), unit: null },\n      { name: 'stdDev', value: singleArrayAsNumber(stdDev), unit: null },\n      {\n        name: 'stdDevWithSumSquare',\n        value: singleArrayAsNumber(stdDevWithSumSquare),\n        unit: null,\n      },\n    ];\n  };\n}\n\nfunction singleArrayAsNumber(val: number[]) {\n  return val.length === 1 ? val[0] : val;\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype Point = Types.Point2 | Types.Point3;\n\n/**\n * Calculates the distance squared of a point to another point\n *\n * @param p1 - x,y or x,y,z of the point\n * @param p2 - x,y or x,y,z of the point\n * @returns distance\n */\nexport default function distanceToPointSquared(p1: Point, p2: Point): number {\n  if (p1.length !== p2.length) {\n    throw Error('Both points should have the same dimensionality');\n  }\n\n  const [x1, y1, z1 = 0] = p1;\n  const [x2, y2, z2 = 0] = p2;\n\n  return Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) + Math.pow(z1 - z2, 2);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport distanceToPointSquared from './distanceToPointSquared';\n\ntype Point = Types.Point2 | Types.Point3;\n\n/**\n * Calculates the distance of a point to another point\n *\n * @param p1 - x,y or x,y,z of the point\n * @param p2 - x,y or x,y,z of the point\n * @returns distance\n */\nexport default function distanceToPoint(p1: Point, p2: Point): number {\n  return Math.sqrt(distanceToPointSquared(p1, p2));\n}\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Get a mirrored point along the line created by two points where one of them\n * is the static (\"anchor\") point and the other one is the point to be mirroed.\n * @param mirrorPoint - 2D Point to be mirroed\n * @param staticPoint - Static 2D point\n * @returns Mirroed 2D point\n */\nexport default function mirror(\n  mirrorPoint: Types.Point2,\n  staticPoint: Types.Point2\n): Types.Point2 {\n  const [x1, y1] = mirrorPoint;\n  const [x2, y2] = staticPoint;\n\n  const newX = 2 * x2 - x1;\n  const newY = 2 * y2 - y1;\n\n  return [newX, newY];\n}\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Orientation algoritm to determine if two lines cross.\n * Credit and details: geeksforgeeks.org/check-if-two-given-line-segments-intersect/\n */\n\nfunction getAllIntersectionsWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  let initialI;\n  let j;\n  const intersections: Types.Point2[] = [];\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  return intersections;\n}\n\n/**\n * Returns all intersections points\n * between a line and a polyline\n */\nfunction getIntersectionCoordinatesWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  const result = [];\n  const polylineIndexes = getAllIntersectionsWithPolyline(\n    points,\n    p1,\n    q1,\n    closed\n  );\n\n  for (let i = 0; i < polylineIndexes.length; i++) {\n    const p2 = points[polylineIndexes[i][0]];\n    const q2 = points[polylineIndexes[i][1]];\n    const intersection = getIntersection(p1, q1, p2, q2);\n    result.push(intersection);\n  }\n  return result;\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the first value.\n */\nfunction getFirstIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2 | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      return [j, i];\n    }\n\n    j = i;\n  }\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the closest value.\n */\nfunction getClosestIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): { segment: Types.Point2; distance: number } | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  const intersections = [];\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  if (intersections.length === 0) {\n    return;\n  }\n\n  // Find intersection closest to the start point\n  const distances = [];\n\n  intersections.forEach((intersection) => {\n    const intersectionPoints = [\n      points[intersection[0]],\n      points[intersection[1]],\n    ];\n\n    const midpoint = [\n      (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,\n      (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,\n    ];\n\n    distances.push(vec2.distance(<vec2>midpoint, p1));\n  });\n\n  const minDistance = Math.min(...distances);\n  const indexOfMinDistance = distances.indexOf(minDistance);\n\n  return {\n    segment: intersections[indexOfMinDistance],\n    distance: minDistance,\n  };\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects the line (`p2`,`q2`) via an orientation algorithm.\n */\nfunction doesIntersect(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): boolean {\n  let result = false;\n\n  const orient = [\n    orientation(p1, q1, p2),\n    orientation(p1, q1, q2),\n    orientation(p2, q2, p1),\n    orientation(p2, q2, q1),\n  ];\n\n  // General Case\n  if (orient[0] !== orient[1] && orient[2] !== orient[3]) {\n    return true;\n  }\n\n  // Special Cases\n  if (orient[0] === 0 && onSegment(p1, p2, q1)) {\n    // If p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    result = true;\n  } else if (orient[1] === 0 && onSegment(p1, q2, q1)) {\n    // If p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    result = true;\n  } else if (orient[2] === 0 && onSegment(p2, p1, q2)) {\n    // If p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    result = true;\n  } else if (orient[3] === 0 && onSegment(p2, q1, q2)) {\n    // If p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * Checks the orientation of 3 points, returns a 0, 1 or 2 based on\n * the orientation of the points.\n */\nfunction orientation(\n  p: Types.Point2,\n  q: Types.Point2,\n  r: Types.Point2\n): number {\n  const orientationValue =\n    (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n\n  if (orientationValue === 0) {\n    return 0; // Colinear\n  }\n\n  return orientationValue > 0 ? 1 : 2;\n}\n\n/**\n * Checks if point `q` lies on the segment (`p`,`r`).\n */\nfunction onSegment(p: Types.Point2, q: Types.Point2, r: Types.Point2): boolean {\n  if (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Gets the intersection between the line (`p1`,`q1`) and the line (`p2`,`q2`)\n * http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\n * https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n */\nfunction getIntersection(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): Types.Point2 {\n  const denominator =\n    (q2[1] - p2[1]) * (q1[0] - p1[0]) - (q2[0] - p2[0]) * (q1[1] - p1[1]);\n  if (denominator == 0) {\n    return;\n  }\n  let a = p1[1] - p2[1];\n  let b = p1[0] - p2[0];\n  const numerator1 = (q2[0] - p2[0]) * a - (q2[1] - p2[1]) * b;\n  const numerator2 = (q1[0] - p1[0]) * a - (q1[1] - p1[1]) * b;\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  const resultX = p1[0] + a * (q1[0] - p1[0]);\n  const resultY = p1[1] + a * (q1[1] - p1[1]);\n\n  return [resultX, resultY];\n}\n\nexport {\n  getAllIntersectionsWithPolyline,\n  getFirstIntersectionWithPolyline,\n  getClosestIntersectionWithPolyline,\n  getIntersectionCoordinatesWithPolyline,\n};\n","import { StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nconst EPSILON = 1e-3;\n\n/**\n * Gets the desired spacing for points in the polyline for the\n * `PlanarFreehandROITool` in the x and y canvas directions, as well as\n * returning these canvas directions in world space.\n *\n * @param viewport - The Cornerstone3D `StackViewport` or `VolumeViewport`.\n * @param subPixelResolution - The number to divide the image pixel spacing by\n * to get the sub pixel spacing. E.g. `10` will return spacings 10x smaller than\n * the native image spacing.\n * @returns The spacings of the X and Y directions, and the 3D directions of the\n * x and y directions.\n */\nconst getSubPixelSpacingAndXYDirections = (\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  subPixelResolution: number\n): { spacing: Types.Point2; xDir: Types.Point3; yDir: Types.Point3 } => {\n  let spacing;\n  let xDir;\n  let yDir;\n\n  if (viewport instanceof StackViewport) {\n    // Check XY directions\n    const imageData = viewport.getImageData();\n\n    xDir = imageData.direction.slice(0, 3);\n    yDir = imageData.direction.slice(3, 6);\n\n    spacing = imageData.spacing;\n  } else {\n    // Check volume directions\n    const imageData = viewport.getImageData();\n    const { direction, spacing: volumeSpacing } = imageData;\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    // Calculate size of spacing vector in normal direction\n    const iVector = direction.slice(0, 3) as Types.Point3;\n    const jVector = direction.slice(3, 6) as Types.Point3;\n    const kVector = direction.slice(6, 9) as Types.Point3;\n\n    const viewRight = vec3.create(); // Get the X direction of the viewport\n\n    vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n    const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n    const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n    const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n\n    // Get X spacing\n    let xSpacing;\n    if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n      xSpacing = volumeSpacing[0];\n      xDir = iVector;\n    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n      xSpacing = volumeSpacing[1];\n      xDir = jVector;\n    } else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n      xSpacing = volumeSpacing[2];\n      xDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n    const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n    const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n\n    // Get Y spacing\n    let ySpacing;\n    if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n      ySpacing = volumeSpacing[0];\n      yDir = iVector;\n    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n      ySpacing = volumeSpacing[1];\n      yDir = jVector;\n    } else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n      ySpacing = volumeSpacing[2];\n      yDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    spacing = [xSpacing, ySpacing];\n  }\n\n  const subPixelSpacing: Types.Point2 = [\n    spacing[0] / subPixelResolution,\n    spacing[1] / subPixelResolution,\n  ];\n\n  return { spacing: subPixelSpacing, xDir, yDir };\n};\n\nexport default getSubPixelSpacingAndXYDirections;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Returns true if points `p1` and `p2` are within `closeContourProximity`.\n */\nconst pointsAreWithinCloseContourProximity = (\n  p1: Types.Point2,\n  p2: Types.Point2,\n  closeContourProximity: number\n): boolean => {\n  return vec2.dist(p1, p2) < closeContourProximity;\n};\n\nexport default pointsAreWithinCloseContourProximity;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { PlanarFreehandROICommonData } from './planarFreehandROIInternalTypes';\n\n/**\n * Adds one or more points to the array at a resolution defined by the underlying image.\n */\nconst addCanvasPointsToArray = (\n  element: HTMLDivElement,\n  canvasPoints: Types.Point2[],\n  newCanvasPoint: Types.Point2,\n  commonData: PlanarFreehandROICommonData\n): number => {\n  const { xDir, yDir, spacing } = commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const lastWorldPos = viewport.canvasToWorld(\n    canvasPoints[canvasPoints.length - 1]\n  );\n  const newWorldPos = viewport.canvasToWorld(newCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  const numPointsToAdd = Math.max(\n    Math.floor(xDist / spacing[0]),\n    Math.floor(yDist / spacing[0])\n  );\n\n  if (numPointsToAdd > 1) {\n    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n\n    const canvasDist = vec2.dist(lastCanvasPoint, newCanvasPoint);\n\n    const canvasDir = vec2.create();\n\n    vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);\n\n    vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);\n\n    const distPerPoint = canvasDist / numPointsToAdd;\n\n    for (let i = 1; i <= numPointsToAdd; i++) {\n      canvasPoints.push([\n        lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,\n        lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,\n      ]);\n    }\n  } else {\n    canvasPoints.push(newCanvasPoint);\n  }\n\n  return numPointsToAdd;\n};\n\nexport default addCanvasPointsToArray;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Returns `true` if the point `p` can project onto point (`p1`, `p2`), and if\n * this projected point is less than `proximity` units away.\n */\nconst pointCanProjectOnLine = (\n  p: Types.Point2,\n  p1: Types.Point2,\n  p2: Types.Point2,\n  proximity: number\n): boolean => {\n  // Perfom checks in order of computational complexity.\n  const p1p = [p[0] - p1[0], p[1] - p1[1]];\n  const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];\n\n  const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];\n\n  // Dot product needs to be positive to be a candidate for projection onto line segment.\n  if (dot < 0) {\n    return false;\n  }\n\n  const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);\n\n  if (p1p2Mag === 0) {\n    return false;\n  }\n\n  const projectionVectorMag = dot / p1p2Mag;\n  const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];\n  const projectionVector = [\n    p1p2UnitVector[0] * projectionVectorMag,\n    p1p2UnitVector[1] * projectionVectorMag,\n  ];\n  const projectionPoint = <Types.Point2>[\n    p1[0] + projectionVector[0],\n    p1[1] + projectionVector[1],\n  ];\n\n  const distance = vec2.distance(p, projectionPoint);\n\n  if (distance > proximity) {\n    // point is too far away.\n    return false;\n  }\n\n  // Check projects onto line segment.\n  if (vec2.distance(p1, projectionPoint) > vec2.distance(p1, p2)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default pointCanProjectOnLine;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the area of an array of `Point2` points using the shoelace algorithm.\n *\n * The units of the area are in the same units as the points are in. E.g. if\n * the points are in canvas, then the result is in canvas pixels ^2; If they are\n * in mm, then the result is in mm^2; etc.\n */\nexport default function calculateAreaOfPoints(points: Types.Point2[]): number {\n  // Shoelace algorithm.\n  const n = points.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum (half as summing up traingles).\n  return Math.abs(area / 2.0);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport * as lineSegment from '../line';\n\ntype rectLineSegments = {\n  top: Types.Point2[];\n  right: Types.Point2[];\n  bottom: Types.Point2[];\n  left: Types.Point2[];\n};\n\n/**\n * Given a rectangle left, top, width and height, return an object containing the\n * line segments that make up the rectangle's four sides\n * @param left - The x-coordinate of the left edge of the rectangle.\n * @param top - The y-coordinate of the top edge of the rectangle.\n * @param width - The width of the rectangle.\n * @param height - The height of the rectangle.\n * @returns An object with four keys, each of which contains an array of two\n * points.\n */\nfunction rectToLineSegments(\n  left: number,\n  top: number,\n  width: number,\n  height: number\n): rectLineSegments {\n  const topLineStart: Types.Point2 = [left, top];\n  const topLineEnd: Types.Point2 = [left + width, top];\n\n  const rightLineStart: Types.Point2 = [left + width, top];\n  const rightLineEnd: Types.Point2 = [left + width, top + height];\n\n  const bottomLineStart: Types.Point2 = [left + width, top + height];\n  const bottomLineEnd: Types.Point2 = [left, top + height];\n\n  const leftLineStart: Types.Point2 = [left, top + height];\n  const leftLineEnd: Types.Point2 = [left, top];\n\n  const lineSegments = {\n    top: [topLineStart, topLineEnd],\n    right: [rightLineStart, rightLineEnd],\n    bottom: [bottomLineStart, bottomLineEnd],\n    left: [leftLineStart, leftLineEnd],\n  };\n\n  return lineSegments;\n}\n\n/**\n * Calculates distance of the point to the rectangle. It calculates the minimum\n * distance between the point and each line segment of the rectangle.\n *\n * @param rect - coordinates of the rectangle [left, top, width, height]\n * @param point - [x,y] coordinates of a point\n * @returns\n */\nexport default function distanceToPoint(\n  rect: number[],\n  point: Types.Point2\n): number {\n  if (rect.length !== 4 || point.length !== 2) {\n    throw Error(\n      'rectangle:[left, top, width, height] or point: [x,y] not defined correctly'\n    );\n  }\n\n  const [left, top, width, height] = rect;\n\n  let minDistance = 655535;\n  const lineSegments = rectToLineSegments(left, top, width, height);\n\n  Object.keys(lineSegments).forEach((segment) => {\n    const [lineStart, lineEnd] = lineSegments[segment];\n    const distance = lineSegment.distanceToPoint(lineStart, lineEnd, point);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  });\n\n  return minDistance;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport * as math from '../';\n\n/**\n * Calculate the closest point and the squared distance between a reference point and a line segment.\n *\n * It projects the reference point onto the line segment but it shall be bounded by the\n * start/end points since this is a line segment and not a line which could be extended.\n *\n * @param lineStart - Start point of the line segment\n * @param lineEnd - End point of the line segment\n * @param point - Reference point\n * @returns Closest point and the squared distance between a `point` and a line\n *   segment defined by `lineStart` and `lineEnd` points\n */\nexport default function distanceToPointSquaredInfo(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): {\n  point: Types.Point2;\n  distanceSquared: number;\n} {\n  let closestPoint: Types.Point2;\n  const distanceSquared = math.point.distanceToPointSquared(lineStart, lineEnd);\n\n  // Check if lineStart is the same as lineEnd which means\n  if (lineStart[0] === lineEnd[0] && lineStart[1] === lineEnd[1]) {\n    closestPoint = lineStart;\n  }\n\n  if (!closestPoint) {\n    const dotProduct =\n      ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +\n        (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /\n      distanceSquared;\n\n    if (dotProduct < 0) {\n      closestPoint = lineStart;\n    } else if (dotProduct > 1) {\n      closestPoint = lineEnd;\n    } else {\n      closestPoint = [\n        lineStart[0] + dotProduct * (lineEnd[0] - lineStart[0]),\n        lineStart[1] + dotProduct * (lineEnd[1] - lineStart[1]),\n      ];\n    }\n  }\n\n  return {\n    point: [...closestPoint],\n    distanceSquared: math.point.distanceToPointSquared(point, closestPoint),\n  };\n}\n","import { Types } from '@cornerstonejs/core';\nimport distanceToPointSquaredInfo from './distanceToPointSquaredInfo';\n\n/**\n * Calculates the distance-squared of a point to a line segment\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance-squared\n */\nexport default function distanceToPointSquared(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  return distanceToPointSquaredInfo(lineStart, lineEnd, point).distanceSquared;\n}\n","import distanceToPointSquared from './distanceToPointSquared';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {\n    throw Error(\n      'lineStart, lineEnd, and point should have 2 elements of [x, y]'\n    );\n  }\n\n  return Math.sqrt(distanceToPointSquared(lineStart, lineEnd, point));\n}\n","import type { Types } from '@cornerstonejs/core';\n\n// Returns sign of number\nfunction sign(x: any) {\n  return typeof x === 'number'\n    ? x\n      ? x < 0\n        ? -1\n        : 1\n      : x === x\n      ? 0\n      : NaN\n    : NaN;\n}\n\n/**\n * Calculates the intersection point between two lines in the 2D plane\n *\n * @param line1Start - x,y coordinates of the start of the first line\n * @param line1End - x,y coordinates of the end of the first line\n * @param line2Start - x,y coordinates of the start of the second line\n * @param line2End - x,y coordinates of the end of the second line\n * @returns [x,y] - point x,y of the point\n */\n\nexport default function intersectLine(\n  line1Start: Types.Point2,\n  line1End: Types.Point2,\n  line2Start: Types.Point2,\n  line2End: Types.Point2\n): number[] {\n  const [x1, y1] = line1Start;\n  const [x2, y2] = line1End;\n  const [x3, y3] = line2Start;\n  const [x4, y4] = line2End;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n  const a1 = y2 - y1;\n  const b1 = x1 - x2;\n  const c1 = x2 * y1 - x1 * y2;\n\n  // Compute r3 and r4\n  const r3 = a1 * x3 + b1 * y3 + c1;\n  const r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {\n    return;\n  }\n\n  // Compute a2, b2, c2\n  const a2 = y4 - y3;\n  const b2 = x3 - x4;\n  const c2 = x4 * y3 - x3 * y4;\n\n  // Compute r1 and r2\n  const r1 = a2 * x1 + b2 * y1 + c2;\n  const r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n\n  if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {\n    return;\n  }\n\n  /* Line segments intersect: compute intersection point.\n   */\n\n  const denom = a1 * b2 - a2 * b1;\n  let num;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n\n  num = b1 * c2 - b2 * c1;\n  const x = num / denom;\n\n  num = a2 * c1 - a1 * c2;\n  const y = num / denom;\n\n  const intersectionPoint = [x, y];\n\n  return intersectionPoint;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\n\nimport { AnnotationTool } from './base';\n\nimport {\n  getEnabledElementByIds,\n  getEnabledElement,\n  utilities as csUtils,\n  Enums,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../store/ToolGroupManager';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\n\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\n\nimport * as lineSegment from '../utilities/math/line';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../types';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { CONSTANTS } from '@cornerstonejs/core';\n\nconst { RENDERING_DEFAULTS } = CONSTANTS;\n\n// TODO: nested config is weird\ninterface ToolConfiguration {\n  configuration?: {\n    getReferenceLineColor?: (viewportId: string) => string;\n    getReferenceLineControllable?: (viewportId: string) => boolean;\n    getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n    getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n    referenceLinesCenterGapRadius?: number;\n    shadow?: boolean;\n    autopan?: {\n      enabled: boolean;\n      panSize: number;\n    };\n    mobile?: {\n      enabled: boolean;\n      opacity: number;\n      handleRadius: number;\n    };\n  };\n}\n\ninterface CrosshairsAnnotation extends Annotation {\n  data: {\n    handles: {\n      rotationPoints: any[]; // rotation handles, used for rotation interactions\n      slabThicknessPoints: any[]; // slab thickness handles, used for setting the slab thickness\n      activeOperation: number | null; // 0 translation, 1 rotation handles, 2 slab thickness handles\n      toolCenter: Types.Point3;\n    };\n    activeViewportIds: string[]; // a list of the viewport ids connected to the reference lines being translated\n    viewportId: string;\n  };\n}\n\nfunction defaultReferenceLineColor() {\n  return 'rgb(0, 200, 0)';\n}\n\nfunction defaultReferenceLineControllable() {\n  return true;\n}\n\nfunction defaultReferenceLineDraggableRotatable() {\n  return true;\n}\n\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n  return true;\n}\n\nconst OPERATION = {\n  DRAG: 1,\n  ROTATE: 2,\n  SLAB: 3,\n};\n\nconst EPSILON = 1e-3;\n\n/**\n * CrosshairsTool is a tool that provides reference lines between different viewports\n * of a toolGroup. Using crosshairs, you can jump to a specific location in one\n * viewport and the rest of the viewports in the toolGroup will be aligned to that location.\n * Crosshairs have grababble handles that can be used to rotate and translate the\n * reference lines. They can also be used to set the slab thickness of the viewports\n * by modifying the slab thickness handles.\n *\n */\nclass CrosshairsTool extends AnnotationTool {\n  static toolName;\n\n  toolCenter: Types.Point3 = [0, 0, 0]; // NOTE: it is assumed that all the active/linked viewports share the same crosshair center.\n  // This because the rotation operation rotates also all the other active/intersecting reference lines of the same angle\n  _getReferenceLineColor?: (viewportId: string) => string;\n  _getReferenceLineControllable?: (viewportId: string) => boolean;\n  _getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n  _getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n  editData: {\n    annotation: any;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse'],\n      configuration: {\n        shadow: true,\n        // renders a colored circle on top right of the viewports whose color\n        // matches the color of the reference line\n        viewportIndicators: true,\n        // Auto pan is a configuration which will update pan\n        // other viewports in the toolGroup if the center of the crosshairs\n        // is outside of the viewport. This might be useful for the case\n        // when the user is scrolling through an image (usually in the zoomed view)\n        // and the crosshairs will eventually get outside of the viewport for\n        // the other viewports.\n        autoPan: {\n          enabled: false,\n          panSize: 10,\n        },\n        // radius of the area around the intersection of the planes, in which\n        // the reference lines will not be rendered. This is only used when\n        // having 3 viewports in the toolGroup.\n        referenceLinesCenterGapRadius: 20,\n        // actorUIDs for slabThickness application, if not defined, the slab thickness\n        // will be applied to all actors of the viewport\n        filterActorUIDsToSetSlabThickness: [],\n        // blend mode for slabThickness modifications\n        slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n        mobile: {\n          enabled: false,\n          opacity: 0.8,\n          handleRadius: 9,\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._getReferenceLineColor =\n      toolProps.configuration?.getReferenceLineColor ||\n      defaultReferenceLineColor;\n    this._getReferenceLineControllable =\n      toolProps.configuration?.getReferenceLineControllable ||\n      defaultReferenceLineControllable;\n    this._getReferenceLineDraggableRotatable =\n      toolProps.configuration?.getReferenceLineDraggableRotatable ||\n      defaultReferenceLineDraggableRotatable;\n    this._getReferenceLineSlabThicknessControlsOn =\n      toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n      defaultReferenceLineSlabThicknessControlsOn;\n  }\n\n  /**\n   * Gets the camera from the viewport, and adds crosshairs annotation for the viewport\n   * to the annotationManager. If any annotation is found in the annotationManager, it\n   * overwrites it.\n   * @param viewportInfo - The viewportInfo for the viewport to add the crosshairs\n   * @returns viewPlaneNormal and center of viewport canvas in world space\n   */\n  initializeViewport = ({\n    renderingEngineId,\n    viewportId,\n  }: Types.IViewportId): {\n    normal: Types.Point3;\n    point: Types.Point3;\n  } => {\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    const { FrameOfReferenceUID, viewport } = enabledElement;\n    const { element } = viewport;\n    const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n    // Check if there is already annotation for this viewport\n    let annotations = this._getAnnotations(enabledElement);\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (annotations.length) {\n      // If found, it will override it by removing the annotation and adding it later\n      removeAnnotation(annotations[0].annotationUID);\n    }\n\n    const annotation = {\n      highlighted: false,\n      metadata: {\n        cameraPosition: <Types.Point3>[...position],\n        cameraFocalPoint: <Types.Point3>[...focalPoint],\n        FrameOfReferenceUID,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          rotationPoints: [], // rotation handles, used for rotation interactions\n          slabThicknessPoints: [], // slab thickness handles, used for setting the slab thickness\n          toolCenter: this.toolCenter,\n        },\n        activeOperation: null, // 0 translation, 1 rotation handles, 2 slab thickness handles\n        activeViewportIds: [], // a list of the viewport ids connected to the reference lines being translated\n        viewportId,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    return {\n      normal: viewPlaneNormal,\n      point: viewport.canvasToWorld([\n        viewport.canvas.clientWidth / 2,\n        viewport.canvas.clientHeight / 2,\n      ]),\n    };\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    // Upon new setVolumes on viewports we need to update the crosshairs\n    // reference points in the new space, so we subscribe to the event\n    // and update the reference points accordingly.\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    this._subscribeToViewportNewVolumeSet(viewportsInfo);\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolPassive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolEnabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolDisabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n\n    // Crosshairs annotations in the state\n    // has no value when the tool is disabled\n    // since viewports can change (zoom, pan, scroll)\n    // between disabled and enabled/active states.\n    // so we just remove the annotations from the state\n    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const annotations = this._getAnnotations(enabledElement);\n\n      if (annotations?.length) {\n        annotations.forEach((annotation) => {\n          removeAnnotation(annotation.annotationUID);\n        });\n      }\n    });\n  }\n\n  /**\n   * When activated, it initializes the crosshairs. It begins by computing\n   * the intersection of viewports associated with the crosshairs instance.\n   * When all three views are accessible, the intersection (e.g., crosshairs tool centre)\n   * will be an exact point in space; however, with two viewports, because the\n   * intersection of two planes is a line, it assumes the last view is between the centre\n   * of the two rendering viewports.\n   * @param viewportsInfo Array of viewportInputs which each item containing {viewportId, renderingEngineId}\n   */\n  computeToolCenter = (viewportsInfo): void => {\n    if (!viewportsInfo.length || viewportsInfo.length === 1) {\n      throw new Error(\n        'For crosshairs to operate, at least two viewports must be given.'\n      );\n    }\n\n    // Todo: handle two same view viewport, or more than 3 viewports\n    const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n\n    // Initialize first viewport\n    const { normal: normal1, point: point1 } =\n      this.initializeViewport(firstViewport);\n\n    // Initialize second viewport\n    const { normal: normal2, point: point2 } =\n      this.initializeViewport(secondViewport);\n\n    let normal3 = <Types.Point3>[0, 0, 0];\n    let point3 = vec3.create();\n\n    // If there are three viewports\n    if (thirdViewport) {\n      ({ normal: normal3, point: point3 } =\n        this.initializeViewport(thirdViewport));\n    } else {\n      // If there are only two views (viewport) associated with the crosshairs:\n      // In this situation, we don't have a third information to find the\n      // exact intersection, and we \"assume\" the third view is looking at\n      // a location in between the first and second view centers\n      vec3.add(point3, point1, point2);\n      vec3.scale(point3, point3, 0.5);\n      vec3.cross(normal3, normal1, normal2);\n    }\n\n    // Planes of each viewport\n    const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n    const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n    const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n\n    // Calculating the intersection of 3 planes\n    // prettier-ignore\n    this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane)\n\n    // assuming all viewports are in the same rendering engine\n    const { renderingEngine } = getEnabledElementByIds(\n      viewportsInfo[0].viewportId,\n      viewportsInfo[0].renderingEngineId\n    );\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * addNewAnnotation acts as jump for the crosshairs tool. It is called when\n   * the user clicks on the image. It does not store the annotation in the stateManager though.\n   *\n   * @param evt - The mouse event\n   * @param interactionType - The type of interaction (e.g., mouse, touch, etc.)\n   * @returns Crosshairs annotation\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CrosshairsAnnotation => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { currentPoints } = eventDetail;\n    const jumpWorld = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    this._jump(enabledElement, jumpWorld);\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      annotations\n    );\n\n    // viewport Annotation\n    const { data } = filteredAnnotations[0];\n\n    const { rotationPoints } = data.handles;\n    const viewportIdArray = [];\n    // put all the draggable reference lines in the viewportIdArray\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n      viewportIdArray.push(otherViewport.id);\n      // rotation handles are two per viewport\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n    // set translation operation\n    data.handles.activeOperation = OPERATION.DRAG;\n\n    evt.preventDefault();\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n    return filteredAnnotations[0];\n  };\n\n  cancel = () => {\n    console.log('Not implemented yet');\n  };\n\n  /**\n   * It checks if the mouse click is near crosshairs handles, if yes\n   * it returns the handle location. If the mouse click is not near any\n   * of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let point = this._getRotationHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n\n    point = this._getSlabThicknessHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n\n    // NOTE: handle index or coordinates are not used when dragging.\n    // This because the handle points are actually generated in the renderTool and they are a derivative\n    // from the camera variables of the viewports and of the slab thickness variable.\n    // Remember that the translation and rotation operations operate on the camera\n    // variables and not really on the handles. Similar for the slab thickness.\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * It returns if the canvas point is near the provided crosshairs annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CrosshairsAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  onCameraModified = (evt) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const viewport = enabledElement.viewport as Types.IVolumeViewport;\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport that the camera modified is originating from\n    const viewportAnnotation =\n      filteredToolAnnotations[0] as CrosshairsAnnotation;\n\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    // -- Update the camera of other linked viewports containing the same volumeId that\n    //    have the same camera in case of translation\n    // -- Update the crosshair center in world coordinates in annotation.\n    // This is necessary because other tools can modify the position of the slices,\n    // e.g. stackScroll tool at wheel scroll. So we update the coordinates of the center always here.\n    // NOTE: rotation and slab thickness handles are created/updated in renderTool.\n    const currentCamera = viewport.getCamera();\n    const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n    const deltaCameraPosition: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.position,\n      oldCameraPosition,\n      deltaCameraPosition\n    );\n\n    const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.focalPoint,\n      oldCameraFocalPoint,\n      deltaCameraFocalPoint\n    );\n\n    // updated cached \"previous\" camera position and focal point\n    viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n    viewportAnnotation.metadata.cameraFocalPoint = [\n      ...currentCamera.focalPoint,\n    ];\n\n    const viewportControllable = this._getReferenceLineControllable(\n      viewport.id\n    );\n    const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(\n      viewport.id\n    );\n    if (\n      !csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n      viewportControllable &&\n      viewportDraggableRotatable\n    ) {\n      // Is camera Modified a TRANSLATION or ROTATION?\n      let isRotation = false;\n\n      // This is guaranteed to be the same diff for both position and focal point\n      // if the camera is modified by pan, zoom, or scroll BUT for rotation of\n      // crosshairs handles it will be different.\n      const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(\n        deltaCameraPosition,\n        deltaCameraFocalPoint,\n        1e-3\n      );\n\n      // NOTE: it is a translation if the the focal point and camera position shifts are the same\n      if (!cameraModifiedSameForPosAndFocalPoint) {\n        isRotation = true;\n      }\n\n      const cameraModifiedInPlane =\n        Math.abs(\n          vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)\n        ) < 1e-2;\n\n      // TRANSLATION\n      // NOTE1: if the camera modified is a result of a pan or zoom don't update the crosshair center\n      // NOTE2: rotation handles are updates in renderTool\n      if (!isRotation && !cameraModifiedInPlane) {\n        this.toolCenter[0] += deltaCameraPosition[0];\n        this.toolCenter[1] += deltaCameraPosition[1];\n        this.toolCenter[2] += deltaCameraPosition[2];\n      }\n    }\n\n    // AutoPan modification\n    if (this.configuration.autoPan?.enabled) {\n      const toolGroup = getToolGroupForViewport(\n        viewport.id,\n        renderingEngine.id\n      );\n\n      const otherViewportIds = toolGroup\n        .getViewportIds()\n        .filter((id) => id !== viewport.id);\n\n      otherViewportIds.forEach((viewportId) => {\n        this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n      });\n    }\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredToolAnnotations: Annotations\n  ): boolean => {\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let imageNeedsUpdate = false;\n\n    for (let i = 0; i < filteredToolAnnotations.length; i++) {\n      const annotation = filteredToolAnnotations[i] as CrosshairsAnnotation;\n\n      if (isAnnotationLocked(annotation)) {\n        continue;\n      }\n\n      const { data, highlighted } = annotation;\n      if (!data.handles) {\n        continue;\n      }\n\n      const previousActiveOperation = data.handles.activeOperation;\n      const previousActiveViewportIds =\n        data.activeViewportIds && data.activeViewportIds.length > 0\n          ? [...data.activeViewportIds]\n          : [];\n\n      // This init are necessary, because when we move the mouse they are not cleaned by _endCallback\n      data.activeViewportIds = [];\n      data.handles.activeOperation = null;\n\n      const handleNearImagePoint = this.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        6\n      );\n\n      let near = false;\n      if (handleNearImagePoint) {\n        near = true;\n      } else {\n        near = this._pointNearTool(element, annotation, canvasCoords, 6);\n      }\n\n      const nearToolAndNotMarkedActive = near && !highlighted;\n      const notNearToolAndMarkedActive = !near && highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !highlighted;\n        imageNeedsUpdate = true;\n      } else if (\n        data.handles.activeOperation !== previousActiveOperation ||\n        !this._areViewportIdArraysEqual(\n          data.activeViewportIds,\n          previousActiveViewportIds\n        )\n      ) {\n        imageNeedsUpdate = true;\n      }\n    }\n\n    return imageNeedsUpdate;\n  };\n\n  filterInteractableAnnotationsForElement = (element, annotations) => {\n    if (!annotations || !annotations.length) {\n      return [];\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n\n    const viewportUIDSpecificCrosshairs = annotations.filter(\n      (annotation) => annotation.data.viewportId === viewportId\n    );\n\n    return viewportUIDSpecificCrosshairs;\n  };\n\n  /**\n   * renders the crosshairs lines and handles in the requestAnimationFrame callback\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n    const annotations = this._getAnnotations(enabledElement);\n    const camera = viewport.getCamera();\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!annotations?.length || !viewportAnnotation?.data) {\n      // No annotations yet, and didn't just create it as we likely don't have a FrameOfReference/any data loaded yet.\n      return renderStatus;\n    }\n\n    const annotationUID = viewportAnnotation.annotationUID;\n\n    // Get cameras/canvases for each of these.\n    // -- Get two world positions for this canvas in this line (e.g. the diagonal)\n    // -- Convert these world positions to this canvas.\n    // -- Extend/confine this line to fit in this canvas.\n    // -- Render this line.\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n\n    const data = viewportAnnotation.data;\n    const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    const otherViewportAnnotations =\n      this._filterAnnotationsByUniqueViewportOrientations(\n        enabledElement,\n        annotations\n      );\n\n    const referenceLines = [];\n\n    // get canvas information for points and lines (canvas box, canvas horizontal distances)\n    const canvasBox = [0, 0, clientWidth, clientHeight];\n\n    otherViewportAnnotations.forEach((annotation) => {\n      const { data } = annotation;\n\n      data.handles.toolCenter = this.toolCenter;\n\n      const otherViewport = renderingEngine.getViewport(\n        data.viewportId\n      ) as Types.IVolumeViewport;\n\n      const otherCamera = otherViewport.getCamera();\n\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const otherViewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      const otherViewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      // get coordinates for the reference line\n      const { clientWidth, clientHeight } = otherViewport.canvas;\n      const otherCanvasDiagonalLength = Math.sqrt(\n        clientWidth * clientWidth + clientHeight * clientHeight\n      );\n      const otherCanvasCenter: Types.Point2 = [\n        clientWidth * 0.5,\n        clientHeight * 0.5,\n      ];\n      const otherViewportCenterWorld =\n        otherViewport.canvasToWorld(otherCanvasCenter);\n\n      const direction: Types.Point3 = [0, 0, 0];\n      vtkMath.cross(\n        camera.viewPlaneNormal,\n        otherCamera.viewPlaneNormal,\n        direction\n      );\n      vtkMath.normalize(direction);\n      vtkMath.multiplyScalar(\n        <Types.Point3>direction,\n        otherCanvasDiagonalLength\n      );\n\n      const pointWorld0: Types.Point3 = [0, 0, 0];\n      vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n\n      const pointWorld1: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n\n      const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n\n      const otherViewportCenterCanvas = viewport.worldToCanvas(\n        otherViewportCenterWorld\n      );\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        pointCanvas0,\n        otherViewportCenterCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      // Graphic:\n      // Mid -> SlabThickness handle\n      // Short -> Rotation handle\n      //                           Long\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      // Long --- Mid--- Short--- Center --- Short --- Mid --- Long\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                           Long\n      const canvasVectorFromCenterLong = vec2.create();\n\n      vec2.scale(\n        canvasVectorFromCenterLong,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 100\n      );\n      const canvasVectorFromCenterMid = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterMid,\n        canvasUnitVectorFromCenter,\n        // to maximize the visibility of the controls, they need to be\n        // placed at most at half the length of the shortest side of the canvas.\n        // Chosen 0.4 to have some margin to the edge.\n        canvasMinDimensionLength * 0.4\n      );\n      const canvasVectorFromCenterShort = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterShort,\n        canvasUnitVectorFromCenter,\n        // Chosen 0.2 because is half of 0.4.\n        canvasMinDimensionLength * 0.2\n      );\n      const canvasVectorFromCenterStart = vec2.create();\n      const centerGap = this.configuration.referenceLinesCenterGapRadius;\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        // Don't put a gap if the the third view is missing\n        otherViewportAnnotations.length === 2 ? centerGap : 0\n      );\n\n      // Computing Reference start and end (4 lines per viewport in case of 3 view MPR)\n      const refLinePointOne = vec2.create();\n      const refLinePointTwo = vec2.create();\n      const refLinePointThree = vec2.create();\n      const refLinePointFour = vec2.create();\n\n      let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n      if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n        refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n      vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n      vec2.subtract(\n        refLinePointThree,\n        refLinesCenter,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        refLinePointFour,\n        refLinesCenter,\n        canvasVectorFromCenterLong\n      );\n\n      // Clipping lines to be only included in a box (canvas), we don't want\n      // the lines goes beyond canvas\n      liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n      liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n\n      // Computing rotation handle positions\n      const rotHandleOne = vec2.create();\n      vec2.subtract(\n        rotHandleOne,\n        crosshairCenterCanvas,\n        canvasVectorFromCenterMid\n      );\n\n      const rotHandleTwo = vec2.create();\n      vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n\n      // Computing SlabThickness (st below) position\n\n      // SlabThickness center in canvas\n      let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      // SlabThickness center in world\n      let stHandlesCenterWorld: Types.Point3 = [...this.toolCenter];\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterWorld = [...otherViewportCenterWorld];\n      }\n\n      const worldUnitVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n      vtkMath.normalize(worldUnitVectorFromCenter);\n\n      const { viewPlaneNormal } = camera;\n      // @ts-ignore // Todo: fix after vtk pr merged\n      const { matrix } = vtkMatrixBuilder\n        .buildFromDegree()\n        // @ts-ignore fix after vtk pr merged\n        .rotate(90, viewPlaneNormal);\n\n      const worldUnitOrthoVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vec3.transformMat4(\n        worldUnitOrthoVectorFromCenter,\n        worldUnitVectorFromCenter,\n        matrix\n      );\n\n      const slabThicknessValue = otherViewport.getSlabThickness();\n      const worldOrthoVectorFromCenter: Types.Point3 = [\n        ...worldUnitOrthoVectorFromCenter,\n      ];\n      vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n\n      const worldVerticalRefPoint: Types.Point3 = [0, 0, 0];\n      vtkMath.add(\n        stHandlesCenterWorld,\n        worldOrthoVectorFromCenter,\n        worldVerticalRefPoint\n      );\n\n      // convert vertical world distances in canvas coordinates\n      const canvasVerticalRefPoint = viewport.worldToCanvas(\n        worldVerticalRefPoint\n      );\n\n      // points for slab thickness lines\n      const canvasOrthoVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasOrthoVectorFromCenter,\n        stHandlesCenterCanvas,\n        canvasVerticalRefPoint\n      );\n\n      const stLinePointOne = vec2.create();\n      vec2.subtract(\n        stLinePointOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n\n      const stLinePointTwo = vec2.create();\n      vec2.add(\n        stLinePointTwo,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n\n      liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n\n      const stLinePointThree = vec2.create();\n      vec2.add(\n        stLinePointThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointThree,\n        stLinePointThree,\n        canvasOrthoVectorFromCenter\n      );\n\n      const stLinePointFour = vec2.create();\n      vec2.subtract(\n        stLinePointFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointFour,\n        stLinePointFour,\n        canvasOrthoVectorFromCenter\n      );\n\n      liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n\n      // points for slab thickness handles\n      const stHandleOne = vec2.create();\n      const stHandleTwo = vec2.create();\n      const stHandleThree = vec2.create();\n      const stHandleFour = vec2.create();\n\n      vec2.subtract(\n        stHandleOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n      vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n      vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n      vec2.subtract(\n        stHandleThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n      vec2.add(\n        stHandleFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n\n      referenceLines.push([\n        otherViewport,\n        refLinePointOne,\n        refLinePointTwo,\n        refLinePointThree,\n        refLinePointFour,\n        stLinePointOne,\n        stLinePointTwo,\n        stLinePointThree,\n        stLinePointFour,\n        rotHandleOne,\n        rotHandleTwo,\n        stHandleOne,\n        stHandleTwo,\n        stHandleThree,\n        stHandleFour,\n      ]);\n    });\n\n    const newRtpoints = [];\n    const newStpoints = [];\n    const viewportColor = this._getReferenceLineColor(viewport.id);\n    const color =\n      viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n    referenceLines.forEach((line, lineIndex) => {\n      // get color for the reference line\n      const otherViewport = line[0];\n      const viewportColor = this._getReferenceLineColor(otherViewport.id);\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const selectedViewportId = data.activeViewportIds.find(\n        (id) => id === otherViewport.id\n      );\n\n      let color =\n        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n      let lineWidth = 1;\n\n      const lineActive =\n        data.handles.activeOperation !== null &&\n        data.handles.activeOperation === OPERATION.DRAG &&\n        selectedViewportId;\n\n      if (lineActive) {\n        lineWidth = 2.5;\n      }\n\n      let lineUID = `${lineIndex}`;\n      if (viewportControllable && viewportDraggableRotatable) {\n        lineUID = `${lineIndex}One`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[1],\n          line[2],\n          {\n            color,\n            lineWidth,\n          }\n        );\n\n        lineUID = `${lineIndex}Two`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[3],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      } else {\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[2],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      if (viewportControllable) {\n        color =\n          viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n        const rotHandlesActive =\n          data.handles.activeOperation === OPERATION.ROTATE;\n        const rotationHandles = [line[9], line[10]];\n\n        const rotHandleWorldOne = [\n          viewport.canvasToWorld(line[9]),\n          otherViewport,\n          line[1],\n          line[2],\n        ];\n        const rotHandleWorldTwo = [\n          viewport.canvasToWorld(line[10]),\n          otherViewport,\n          line[3],\n          line[4],\n        ];\n        newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n\n        const slabThicknessHandlesActive =\n          data.handles.activeOperation === OPERATION.SLAB;\n        const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n\n        const slabThicknessHandleWorldOne = [\n          viewport.canvasToWorld(line[11]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldTwo = [\n          viewport.canvasToWorld(line[12]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldThree = [\n          viewport.canvasToWorld(line[13]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        const slabThicknessHandleWorldFour = [\n          viewport.canvasToWorld(line[14]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        newStpoints.push(\n          slabThicknessHandleWorldOne,\n          slabThicknessHandleWorldTwo,\n          slabThicknessHandleWorldThree,\n          slabThicknessHandleWorldFour\n        );\n\n        if (\n          (lineActive || this.configuration.mobile?.enabled) &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw all handles inactive (rotation and slab thickness)\n          let handleUID = `${lineIndex}One`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n          handleUID = `${lineIndex}Two`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (\n          lineActive &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw rotation handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n        } else if (\n          selectedViewportId &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportSlabThicknessControlsOn\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw slab thickness handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (rotHandlesActive && viewportDraggableRotatable) {\n          const handleUID = `${lineIndex}`;\n          // draw all rotation handles as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'circle',\n            }\n          );\n        } else if (\n          slabThicknessHandlesActive &&\n          selectedViewportId &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw only the slab thickness handles for the active viewport as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'rect',\n            }\n          );\n        }\n        const slabThicknessValue = otherViewport.getSlabThickness();\n        if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n          // draw slab thickness reference lines\n          lineUID = `${lineIndex}STOne`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[5],\n            line[6],\n            {\n              color,\n              width: 1,\n              lineDash: [2, 3],\n            }\n          );\n\n          lineUID = `${lineIndex}STTwo`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[7],\n            line[8],\n            {\n              color,\n              width: line,\n              lineDash: [2, 3],\n            }\n          );\n        }\n      }\n    });\n\n    renderStatus = true;\n\n    // Save new handles points in annotation\n    data.handles.rotationPoints = newRtpoints;\n    data.handles.slabThicknessPoints = newStpoints;\n\n    if (this.configuration.viewportIndicators) {\n      // render a circle to pin point the viewport color\n      // TODO: This should not be part of the tool, and definitely not part of the renderAnnotation loop\n      const referenceColorCoordinates = [\n        clientWidth * 0.95,\n        clientHeight * 0.05,\n      ] as Types.Point2;\n      const circleRadius = canvasDiagonalLength * 0.01;\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        referenceColorCoordinates,\n        circleRadius,\n        { color, fill: color }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _getAnnotations = (enabledElement: Types.IEnabledElement) => {\n    const { viewport } = enabledElement;\n    const annotations =\n      getAnnotations(this.getToolName(), viewport.element) || [];\n    const viewportIds = this._getViewportsInfo().map(\n      ({ viewportId }) => viewportId\n    );\n\n    // filter the annotations to only keep that are for this toolGroup\n    const toolGroupAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      return viewportIds.includes(data.viewportId);\n    });\n\n    return toolGroupAnnotations;\n  };\n\n  _onNewVolume = (e: any) => {\n    const viewportsInfo = this._getViewportsInfo();\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _subscribeToViewportNewVolumeSet(viewports) {\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.addEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _autoPanViewportIfNecessary(\n    viewportId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): void {\n    // 1. Check if the toolCenter is outside the viewport\n    // 2. If it is outside, pan the viewport to fit in the toolCenter\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const { clientWidth, clientHeight } = viewport.canvas;\n\n    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    // pan the viewport to fit the toolCenter in the direction\n    // that is out of bounds\n    const pan = this.configuration.autoPan.panSize;\n\n    const visiblePointCanvas = <Types.Point2>[\n      toolCenterCanvas[0],\n      toolCenterCanvas[1],\n    ];\n\n    if (toolCenterCanvas[0] < 0) {\n      visiblePointCanvas[0] = pan;\n    } else if (toolCenterCanvas[0] > clientWidth) {\n      visiblePointCanvas[0] = clientWidth - pan;\n    }\n\n    if (toolCenterCanvas[1] < 0) {\n      visiblePointCanvas[1] = pan;\n    } else if (toolCenterCanvas[1] > clientHeight) {\n      visiblePointCanvas[1] = clientHeight - pan;\n    }\n\n    if (\n      visiblePointCanvas[0] === toolCenterCanvas[0] &&\n      visiblePointCanvas[1] === toolCenterCanvas[1]\n    ) {\n      return;\n    }\n\n    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n\n    const deltaPointsWorld = [\n      visiblePointWorld[0] - this.toolCenter[0],\n      visiblePointWorld[1] - this.toolCenter[1],\n      visiblePointWorld[2] - this.toolCenter[2],\n    ];\n\n    const camera = viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    viewport.render();\n  }\n\n  _areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n    if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n      return false;\n    }\n\n    viewportIdArrayOne.forEach((id) => {\n      let itemFound = false;\n      for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n        if (id === viewportIdArrayTwo[i]) {\n          itemFound = true;\n          break;\n        }\n      }\n      if (itemFound === false) {\n        return false;\n      }\n    });\n\n    return true;\n  };\n\n  // It filters the viewports with crosshairs and only return viewports\n  // that have different camera.\n  _getAnnotationsForViewportsWithDifferentCameras = (\n    enabledElement,\n    annotations\n  ) => {\n    const { viewportId, renderingEngine, viewport } = enabledElement;\n\n    const otherViewportAnnotations = annotations.filter(\n      (annotation) => annotation.data.viewportId !== viewportId\n    );\n\n    if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, position } = camera;\n\n    const viewportsWithDifferentCameras = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { viewportId } = annotation.data;\n        const targetViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfTarget = targetViewport.getCamera();\n\n        return !(\n          csUtils.isEqual(\n            cameraOfTarget.viewPlaneNormal,\n            viewPlaneNormal,\n            1e-2\n          ) && csUtils.isEqual(cameraOfTarget.position, position, 1)\n        );\n      }\n    );\n\n    return viewportsWithDifferentCameras;\n  };\n\n  _filterViewportWithSameOrientation = (\n    enabledElement,\n    referenceAnnotation,\n    annotations\n  ) => {\n    const { renderingEngine } = enabledElement;\n    const { data } = referenceAnnotation;\n    const viewport = renderingEngine.getViewport(data.viewportId);\n\n    const linkedViewportAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      const otherViewport = renderingEngine.getViewport(data.viewportId);\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n\n      return otherViewportControllable === true;\n    });\n\n    if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherViewportsAnnotationsWithSameCameraDirection =\n      linkedViewportAnnotations.filter((annotation) => {\n        const { viewportId } = annotation.data;\n        const otherViewport = renderingEngine.getViewport(viewportId);\n        const otherCamera = otherViewport.getCamera();\n        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n        vtkMath.normalize(otherViewPlaneNormal);\n\n        return (\n          csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n          csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2)\n        );\n      });\n\n    return otherViewportsAnnotationsWithSameCameraDirection;\n  };\n\n  _filterAnnotationsByUniqueViewportOrientations = (\n    enabledElement,\n    annotations\n  ) => {\n    const { renderingEngine, viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable === true\n        );\n      }\n    );\n\n    const otherViewportsAnnotationsWithUniqueCameras = [];\n    // Iterate first on other viewport from the same scene linked\n    for (\n      let i = 0;\n      i < otherLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable !== true\n        );\n      }\n    );\n\n    // Iterate second on other viewport from the same scene non linked\n    for (\n      let i = 0;\n      i < otherNonLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    // Iterate on all the viewport\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n      const annotation = otherViewportAnnotations[i];\n      if (\n        otherViewportsAnnotationsWithUniqueCameras.some(\n          (element) => element === annotation\n        )\n      ) {\n        continue;\n      }\n\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    return otherViewportsAnnotationsWithUniqueCameras;\n  };\n\n  _checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n    const actors = viewport.getActors();\n    const otherViewportActors = otherViewport.getActors();\n\n    let sameScene = true;\n\n    actors.forEach((actor) => {\n      if (\n        actors.length !== otherViewportActors.length ||\n        otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined\n      ) {\n        sameScene = false;\n      }\n    });\n\n    return sameScene;\n  };\n\n  _jump = (enabledElement, jumpWorld) => {\n    state.isInteractingWithTool = true;\n    const { viewport, renderingEngine } = enabledElement;\n\n    const annotations = this._getAnnotations(enabledElement);\n\n    const delta: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n\n    // TRANSLATION\n    // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n\n        const sameScene = this._checkIfViewportsRenderingSameScene(\n          viewport,\n          otherViewport\n        );\n\n        return (\n          this._getReferenceLineControllable(otherViewport.id) &&\n          this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n          sameScene\n        );\n      }\n    );\n\n    if (viewportsAnnotationsToUpdate.length === 0) {\n      state.isInteractingWithTool = false;\n      return false;\n    }\n\n    this._applyDeltaShiftToSelectedViewportCameras(\n      renderingEngine,\n      viewportsAnnotationsToUpdate,\n      delta\n    );\n\n    state.isInteractingWithTool = false;\n\n    return true;\n  };\n\n  _activateModify = (element) => {\n    // mobile sometimes has lingering interaction even when touchEnd triggers\n    // this check allows for multiple handles to be active which doesn't affect\n    // tool usage.\n    state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this.editData.annotation.data.handles.activeOperation = null;\n    this.editData.annotation.data.activeViewportIds = [];\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const delta = eventDetail.deltaPoints.world;\n\n    if (\n      Math.abs(delta[0]) < 1e-3 &&\n      Math.abs(delta[1]) < 1e-3 &&\n      Math.abs(delta[2]) < 1e-3\n    ) {\n      return;\n    }\n\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const annotations = this._getAnnotations(\n      enabledElement\n    ) as CrosshairsAnnotation[];\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    const { handles } = viewportAnnotation.data;\n    const { currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n\n    if (handles.activeOperation === OPERATION.DRAG) {\n      // TRANSLATION\n      // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      this._applyDeltaShiftToSelectedViewportCameras(\n        renderingEngine,\n        viewportsAnnotationsToUpdate,\n        delta\n      );\n    } else if (handles.activeOperation === OPERATION.ROTATE) {\n      // ROTATION\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true\n          );\n        }\n      );\n\n      const dir1 = vec2.create();\n      const dir2 = vec2.create();\n\n      const center: Types.Point3 = [\n        this.toolCenter[0],\n        this.toolCenter[1],\n        this.toolCenter[2],\n      ];\n\n      const centerCanvas = viewport.worldToCanvas(center);\n\n      const finalPointCanvas = eventDetail.currentPoints.canvas;\n      const originalPointCanvas = vec2.create();\n      vec2.sub(\n        originalPointCanvas,\n        finalPointCanvas,\n        eventDetail.deltaPoints.canvas\n      );\n      vec2.sub(dir1, originalPointCanvas, <vec2>centerCanvas);\n      vec2.sub(dir2, finalPointCanvas, <vec2>centerCanvas);\n\n      let angle = vec2.angle(dir1, dir2);\n\n      if (\n        this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)\n      ) {\n        angle *= -1;\n      }\n\n      // Rounding the angle to allow rotated handles to be undone\n      // If we don't round and rotate handles clockwise by 0.0131233 radians,\n      // there's no assurance that the counter-clockwise rotation occurs at\n      // precisely -0.0131233, resulting in the drawn annotations being lost.\n      angle = Math.round(angle * 100) / 100;\n\n      const rotationAxis = viewport.getCamera().viewPlaneNormal;\n      // @ts-ignore : vtkjs incorrect typing\n      const { matrix } = vtkMatrixBuilder\n        .buildFromRadian()\n        .translate(center[0], center[1], center[2])\n        // @ts-ignore\n        .rotate(angle, rotationAxis) //todo: why we are passing\n        .translate(-center[0], -center[1], -center[2]);\n\n      const otherViewportsIds = [];\n      // update camera for the other viewports.\n      // NOTE: The lines then are rendered by the onCameraModified\n      viewportsAnnotationsToUpdate.forEach((annotation) => {\n        const { data } = annotation;\n        data.handles.toolCenter = center;\n\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const camera = otherViewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n\n        viewUp[0] += position[0];\n        viewUp[1] += position[1];\n        viewUp[2] += position[2];\n\n        vec3.transformMat4(focalPoint, focalPoint, matrix);\n        vec3.transformMat4(position, position, matrix);\n        vec3.transformMat4(viewUp, viewUp, matrix);\n\n        viewUp[0] -= position[0];\n        viewUp[1] -= position[1];\n        viewUp[2] -= position[2];\n\n        otherViewport.setCamera({\n          position,\n          viewUp,\n          focalPoint,\n        });\n        otherViewportsIds.push(otherViewport.id);\n      });\n      renderingEngine.renderViewports(otherViewportsIds);\n    } else if (handles.activeOperation === OPERATION.SLAB) {\n      // SLAB THICKNESS\n      // this should be just the active one under the mouse,\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const referenceAnnotations = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportSlabThicknessControlsOn =\n            this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportSlabThicknessControlsOn === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      if (referenceAnnotations.length === 0) {\n        return;\n      }\n      const viewportsAnnotationsToUpdate =\n        this._filterViewportWithSameOrientation(\n          enabledElement,\n          referenceAnnotations[0],\n          annotations\n        );\n\n      const viewportsIds = [];\n      viewportsIds.push(viewport.id);\n      viewportsAnnotationsToUpdate.forEach(\n        (annotation: CrosshairsAnnotation) => {\n          const { data } = annotation;\n\n          const otherViewport = renderingEngine.getViewport(\n            data.viewportId\n          ) as Types.IVolumeViewport;\n          const camera = otherViewport.getCamera();\n          const normal = camera.viewPlaneNormal;\n\n          const dotProd = vtkMath.dot(delta, normal);\n          const projectedDelta: Types.Point3 = [...normal];\n          vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n          if (\n            Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3\n          ) {\n            const mod = Math.sqrt(\n              projectedDelta[0] * projectedDelta[0] +\n                projectedDelta[1] * projectedDelta[1] +\n                projectedDelta[2] * projectedDelta[2]\n            );\n\n            const currentPoint = eventDetail.lastPoints.world;\n            const direction: Types.Point3 = [0, 0, 0];\n\n            const currentCenter: Types.Point3 = [\n              this.toolCenter[0],\n              this.toolCenter[1],\n              this.toolCenter[2],\n            ];\n\n            // use this.toolCenter only if viewportDraggableRotatable\n            const viewportDraggableRotatable =\n              this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n              const { rotationPoints } = this.editData.annotation.data.handles;\n              // Todo: what is a point uid?\n              const otherViewportRotationPoints = rotationPoints.filter(\n                (point) => point[1].uid === otherViewport.id\n              );\n              if (otherViewportRotationPoints.length === 2) {\n                const point1 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[0][3]\n                );\n                const point2 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[1][3]\n                );\n                vtkMath.add(point1, point2, currentCenter);\n                vtkMath.multiplyScalar(<Types.Point3>currentCenter, 0.5);\n              }\n            }\n\n            vtkMath.subtract(currentPoint, currentCenter, direction);\n            const dotProdDirection = vtkMath.dot(direction, normal);\n            const projectedDirection: Types.Point3 = [...normal];\n            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n            const normalizedProjectedDirection: Types.Point3 = [\n              projectedDirection[0],\n              projectedDirection[1],\n              projectedDirection[2],\n            ];\n            vec3.normalize(\n              normalizedProjectedDirection,\n              normalizedProjectedDirection\n            );\n            const normalizedProjectedDelta: Types.Point3 = [\n              projectedDelta[0],\n              projectedDelta[1],\n              projectedDelta[2],\n            ];\n            vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n\n            let slabThicknessValue = otherViewport.getSlabThickness();\n            if (\n              csUtils.isOpposite(\n                normalizedProjectedDirection,\n                normalizedProjectedDelta,\n                1e-3\n              )\n            ) {\n              slabThicknessValue -= mod;\n            } else {\n              slabThicknessValue += mod;\n            }\n\n            slabThicknessValue = Math.abs(slabThicknessValue);\n            slabThicknessValue = Math.max(\n              RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS,\n              slabThicknessValue\n            );\n\n            const near = this._pointNearReferenceLine(\n              viewportAnnotation,\n              canvasCoords,\n              6,\n              otherViewport\n            );\n\n            if (near) {\n              slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n\n            // We want to set the slabThickness for the viewport's actors but\n            // since the crosshairs tool instance has configuration regarding which\n            // actorUIDs (in case of volume -> actorUID = volumeIds) to set the\n            // slabThickness for, we need to delegate the slabThickness setting\n            // to the crosshairs tool instance of the toolGroup since configurations\n            // exist on the toolInstance and each toolGroup has its own crosshairs\n            // tool instance (Otherwise, we would need to set this filterActorUIDsToSetSlabThickness at\n            // the viewport level which makes tool and viewport state convoluted).\n            const toolGroup = getToolGroupForViewport(\n              otherViewport.id,\n              renderingEngine.id\n            );\n            const crosshairsInstance = toolGroup.getToolInstance(\n              this.getToolName()\n            );\n            crosshairsInstance.setSlabThickness(\n              otherViewport,\n              slabThicknessValue\n            );\n\n            viewportsIds.push(otherViewport.id);\n          }\n        }\n      );\n      renderingEngine.renderViewports(viewportsIds);\n    }\n  };\n\n  setSlabThickness(viewport, slabThickness) {\n    let actorUIDs;\n    const { filterActorUIDsToSetSlabThickness } = this.configuration;\n    if (\n      filterActorUIDsToSetSlabThickness &&\n      filterActorUIDsToSetSlabThickness.length > 0\n    ) {\n      actorUIDs = filterActorUIDsToSetSlabThickness;\n    }\n\n    let blendModeToUse = this.configuration.slabThicknessBlendMode;\n    if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n      blendModeToUse = Enums.BlendModes.COMPOSITE;\n    }\n\n    const immediate = false;\n    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n    viewport.setSlabThickness(slabThickness, actorUIDs);\n  }\n\n  _isClockWise(a, b, c) {\n    // return true if the rotation is clockwise\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n  }\n\n  _applyDeltaShiftToSelectedViewportCameras(\n    renderingEngine,\n    viewportsAnnotationsToUpdate,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    viewportsAnnotationsToUpdate.forEach((annotation) => {\n      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n    });\n  }\n\n  _applyDeltaShiftToViewportCamera(\n    renderingEngine: Types.IRenderingEngine,\n    annotation,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    const { data } = annotation;\n\n    const viewport = renderingEngine.getViewport(data.viewportId);\n    const camera = viewport.getCamera();\n    const normal = camera.viewPlaneNormal;\n\n    // Project delta over camera normal\n    // (we don't need to pan, we need only to scroll the camera as in the wheel stack scroll tool)\n    const dotProd = vtkMath.dot(delta, normal);\n    const projectedDelta: Types.Point3 = [...normal];\n    vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n    if (\n      Math.abs(projectedDelta[0]) > 1e-3 ||\n      Math.abs(projectedDelta[1]) > 1e-3 ||\n      Math.abs(projectedDelta[2]) > 1e-3\n    ) {\n      const newFocalPoint: Types.Point3 = [0, 0, 0];\n      const newPosition: Types.Point3 = [0, 0, 0];\n\n      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n      vtkMath.add(camera.position, projectedDelta, newPosition);\n\n      viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n      });\n      viewport.render();\n    }\n  }\n\n  _pointNearReferenceLine = (\n    annotation,\n    canvasCoords,\n    proximity,\n    lineViewport\n  ) => {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      if (otherViewport.id !== lineViewport.id) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        return true;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    return false;\n  };\n\n  _getRotationHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length; i++) {\n      const point = rotationPoints[i][0];\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportDraggableRotatable) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.ROTATE;\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _getSlabThicknessHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { slabThicknessPoints } = data.handles;\n\n    for (let i = 0; i < slabThicknessPoints.length; i++) {\n      const point = slabThicknessPoints[i][0];\n      const otherViewport = slabThicknessPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n      if (!viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.SLAB;\n\n        data.activeViewportIds = [otherViewport.id];\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _pointNearTool(element, annotation, canvasCoords, proximity) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const { data } = annotation;\n\n    const { rotationPoints } = data.handles;\n    const { slabThicknessPoints } = data.handles;\n    const viewportIdArray = [];\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id);\n        data.handles.activeOperation = OPERATION.DRAG;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n      const otherViewport = slabThicknessPoints[i][1];\n      if (viewportIdArray.find((id) => id === otherViewport.id)) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const stPointLineCanvas1 = slabThicknessPoints[i][2];\n      const stPointLineCanvas2 = slabThicknessPoints[i][3];\n\n      const centerCanvas = vec2.create();\n      vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n      vec2.scale(centerCanvas, centerCanvas, 0.5);\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        stPointLineCanvas1,\n        centerCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      const canvasVectorFromCenterStart = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 0.05\n      );\n\n      const stPointLineCanvas1Start = vec2.create();\n      const stPointLineCanvas2Start = vec2.create();\n      vec2.add(\n        stPointLineCanvas1Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        stPointLineCanvas2Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n\n      const lineSegment1 = {\n        start: {\n          x: stPointLineCanvas1Start[0],\n          y: stPointLineCanvas1Start[1],\n        },\n        end: {\n          x: stPointLineCanvas1[0],\n          y: stPointLineCanvas1[1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: stPointLineCanvas2Start[0],\n          y: stPointLineCanvas2Start[1],\n        },\n        end: {\n          x: stPointLineCanvas2[0],\n          y: stPointLineCanvas2[1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id); // we still need this to draw inactive slab thickness handles\n        data.handles.activeOperation = null; // no operation\n      }\n\n      // slab thickness handles are in couples\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n\n    this.editData = {\n      annotation,\n    };\n\n    return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n  }\n}\n\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\n\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store';\nimport { Enums } from '@cornerstonejs/core';\n\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { IPoints } from '../types';\n\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\n\nclass MagnifyTool extends BaseTool {\n  static toolName;\n  _bounds: any;\n  editData: {\n    referencedImageId: string;\n    viewportIdsToRender: string[];\n    enabledElement: Types.IEnabledElement;\n    renderingEngine: Types.IRenderingEngine;\n    currentPoints: IPoints;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        magnifySize: 10, // parallel scale , higher more zoom\n        magnifyWidth: 250, //px\n        magnifyHeight: 250, //px\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    }\n\n    return referencedImageId;\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error('MagnifyTool only works on StackViewports');\n    }\n\n    const referencedImageId = this._getReferencedImageId(viewport);\n\n    if (!referencedImageId) {\n      throw new Error(\n        'MagnifyTool: No referenced image id found, reconstructed planes not supported yet'\n      );\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      referencedImageId,\n      viewportIdsToRender,\n      enabledElement,\n      renderingEngine,\n      currentPoints,\n    };\n\n    this._createMagnificationViewport();\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType) => {\n    this.preMouseDownCallback(evt);\n  };\n\n  _createMagnificationViewport = () => {\n    const {\n      enabledElement,\n      referencedImageId,\n      viewportIdsToRender,\n      renderingEngine,\n      currentPoints,\n    } = this.editData;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const viewportProperties = viewport.getProperties();\n\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n\n    let magnifyToolElement: HTMLDivElement;\n\n    magnifyToolElement = element.querySelector('.magnifyTool');\n    if (magnifyToolElement === null) {\n      const magnifyElement = document.createElement('div');\n\n      magnifyElement.classList.add('magnifyTool');\n\n      magnifyElement.style.display = 'block';\n      magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n      magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n      magnifyElement.style.position = 'absolute';\n\n      magnifyToolElement = magnifyElement;\n\n      const viewportElement = element.querySelector('.viewport-element');\n      viewportElement.appendChild(magnifyElement);\n\n      const viewportInput = {\n        viewportId: MAGNIFY_VIEWPORT_ID,\n        type: Enums.ViewportType.STACK,\n        element: magnifyToolElement as HTMLDivElement,\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n\n    // Todo: use CSS transform instead of setting top and left for better performance\n    magnifyToolElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyToolElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const magnifyViewport = renderingEngine.getViewport(\n      MAGNIFY_VIEWPORT_ID\n    ) as Types.IStackViewport;\n\n    magnifyViewport.setStack([referencedImageId]).then(() => {\n      // match the original viewport voi range\n      magnifyViewport.setProperties(viewportProperties);\n\n      // Use the original viewport for the base for parallelScale\n      const { parallelScale } = viewport.getCamera();\n\n      const { focalPoint, position, viewPlaneNormal } =\n        magnifyViewport.getCamera();\n\n      const distance = Math.sqrt(\n        Math.pow(focalPoint[0] - position[0], 2) +\n          Math.pow(focalPoint[1] - position[1], 2) +\n          Math.pow(focalPoint[2] - position[2], 2)\n      );\n\n      const updatedFocalPoint = <Types.Point3>[\n        worldPos[0],\n        worldPos[1],\n        worldPos[2],\n      ];\n\n      const updatedPosition = <Types.Point3>[\n        updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n        updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n        updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n      ];\n\n      magnifyViewport.setCamera({\n        parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n        focalPoint: updatedFocalPoint,\n        position: updatedPosition,\n      });\n      magnifyViewport.render();\n    });\n\n    magnifyToolElement.style.display = 'block';\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n\n    const { deltaPoints, element, currentPoints } = eventDetail;\n    const deltaPointsWorld = deltaPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n\n    const magnifyElement = element.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    if (!magnifyElement) {\n      return;\n    }\n\n    magnifyElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const { focalPoint, position } = magnifyViewport.getCamera();\n\n    const updatedPosition = <Types.Point3>[\n      position[0] + deltaPointsWorld[0],\n      position[1] + deltaPointsWorld[1],\n      position[2] + deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] + deltaPointsWorld[0],\n      focalPoint[1] + deltaPointsWorld[1],\n      focalPoint[2] + deltaPointsWorld[2],\n    ];\n\n    magnifyViewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    magnifyViewport.render();\n  };\n\n  _dragEndCallback = (evt: EventTypes.InteractionEventType) => {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n\n    const viewportElement = element.querySelector('.viewport-element');\n\n    const magnifyToolElement = viewportElement.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    viewportElement.removeChild(magnifyToolElement);\n\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n}\n\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleRadius(\n  circleCanvasPoints: canvasCoordinates\n): number {\n  const [center, end] = circleCanvasPoints;\n  return distanceToPoint(center, end);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners (wrapping square rectangle)\n * and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleCorners(\n  circleCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [center, end] = circleCanvasPoints;\n  const radius = distanceToPoint(center, end);\n\n  const topLeft = <Types.Point2>[center[0] - radius, center[1] - radius];\n  const bottomRight = <Types.Point2>[center[0] + radius, center[1] + radius];\n\n  return [topLeft, bottomRight];\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  SegmentationRepresentations,\n  ToolModes,\n  Events as cstEvents,\n} from '../enums';\nimport { ToolGroupManager, state } from '../store';\nimport { debounce } from '../utilities';\nimport { ToolModeChangedEventType } from '../types/EventTypes';\nimport { segmentation } from '..';\nimport { EventTypes, IToolGroup } from '../types';\nimport {\n  AnnotationTool,\n  AdvancedMagnifyTool,\n  SegmentationDisplayTool,\n} from './';\nimport { distanceToPoint } from '../utilities/math/point';\n\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\n\n// TODO: find a better to identify segmentation actors\nconst isSegmentation = (actor) => actor.uid !== actor.referenceId;\n\nexport type AutoPanCallbackData = {\n  points: {\n    currentPosition: {\n      canvas: Types.Point2;\n      world: Types.Point3;\n    };\n    newPosition: {\n      canvas: Types.Point2;\n      world: Types.Point3;\n    };\n  };\n  delta: {\n    canvas: Types.Point2;\n    world: Types.Point3;\n  };\n};\n\nexport type AutoPanCallback = (data: AutoPanCallbackData) => void;\n\nclass AdvancedMagnifyViewport {\n  private _viewportId: string;\n  private _sourceEnabledElement: Types.IEnabledElement;\n  private _enabledElement: Types.IEnabledElement = null;\n  private _sourceToolGroup: IToolGroup = null;\n  private _magnifyToolGroup: IToolGroup = null;\n  private _isViewportReady = false;\n  private _radius = 0;\n  private _resized = false;\n  private _resizeViewportAsync: () => void;\n  private _canAutoPan = false;\n  private _autoPan: {\n    enabled: boolean;\n    padding: number;\n    callback: AutoPanCallback;\n  };\n  public position: Types.Point2;\n  public zoomFactor: number;\n  public visible: boolean;\n\n  constructor({\n    magnifyViewportId,\n    sourceEnabledElement,\n    radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS,\n    position = [0, 0],\n    zoomFactor,\n    autoPan,\n  }: {\n    magnifyViewportId?: string;\n    sourceEnabledElement: Types.IEnabledElement;\n    radius?: number;\n    position?: Types.Point2;\n    zoomFactor: number;\n    autoPan: {\n      enabled: boolean;\n      padding: number;\n      callback: AutoPanCallback;\n    };\n  }) {\n    // Private properties\n    this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n    this._sourceEnabledElement = sourceEnabledElement;\n    this._autoPan = autoPan;\n\n    // Pulic properties\n    this.radius = radius;\n    this.position = position;\n    this.zoomFactor = zoomFactor;\n    this.visible = true;\n\n    this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n    this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n    this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n    this._mouseDragCallback = this._mouseDragCallback.bind(this);\n    this._resizeViewportAsync = <() => void>(\n      debounce(this._resizeViewport.bind(this), 1)\n    );\n\n    this._initialize();\n  }\n\n  public get sourceEnabledElement() {\n    return this._sourceEnabledElement;\n  }\n\n  public get viewportId() {\n    return this._viewportId;\n  }\n\n  public get radius() {\n    return this._radius;\n  }\n\n  public set radius(radius: number) {\n    // Just moving the magnifying glass around may change its radius\n    // by very small amount due to floating number precision\n    if (Math.abs(this._radius - radius) > 0.00001) {\n      this._radius = radius;\n      this._resized = true;\n    }\n  }\n\n  public update() {\n    const { radius, position, visible } = this;\n    const { viewport } = this._enabledElement;\n    const { element } = viewport;\n    const size = 2 * radius;\n    const [x, y] = position;\n\n    if (this._resized) {\n      this._resizeViewportAsync();\n      this._resized = false;\n    }\n\n    Object.assign(element.style, {\n      display: visible ? 'block' : 'hidden',\n      width: `${size}px`,\n      height: `${size}px`,\n      left: `${-radius}px`,\n      top: `${-radius}px`,\n      transform: `translate(${x}px, ${y}px)`,\n    });\n\n    if (this._isViewportReady) {\n      this._syncViewports();\n      viewport.render();\n    }\n  }\n\n  public dispose() {\n    const { viewport } = this._enabledElement;\n    const { element } = viewport;\n    const renderingEngine = viewport.getRenderingEngine();\n\n    this._removeEventListeners(element);\n    renderingEngine.disableElement(viewport.id);\n\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  private _handleToolModeChanged(evt: ToolModeChangedEventType) {\n    const { _magnifyToolGroup: magnifyToolGroup } = this;\n    const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n\n    if (this._sourceToolGroup?.id !== toolGroupId) {\n      return;\n    }\n\n    switch (mode) {\n      case ToolModes.Active:\n        magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n        break;\n      case ToolModes.Passive:\n        magnifyToolGroup.setToolPassive(toolName);\n        break;\n      case ToolModes.Enabled:\n        magnifyToolGroup.setToolEnabled(toolName);\n        break;\n      case ToolModes.Disabled:\n        magnifyToolGroup.setToolDisabled(toolName);\n        break;\n      default:\n        throw new Error(`Unknow tool mode (${mode})`);\n    }\n  }\n\n  // Children elements need to inherit border-radius otherwise the canvas will\n  // trigger events when moving/dragging/clicking on the corners outside of the\n  // border (circle) region.\n  private _inheritBorderRadius(magnifyElement) {\n    const viewport = magnifyElement.querySelector('.viewport-element');\n    const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n\n    viewport.style.borderRadius = 'inherit';\n    canvas.style.borderRadius = 'inherit';\n  }\n\n  private _createViewportNode(): HTMLDivElement {\n    const magnifyElement = document.createElement('div');\n    const { radius } = this;\n    const size = radius * 2;\n\n    magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n\n    // Update the style and move the element out of the screen with \"transforms\"\n    // to make it \"invisible\" and preserving its size because when \"display\" is\n    // set to \"none\" both \"offsetWidth\" and \"offsetHeight\" returns zero. Another\n    // way would be setting \"visibility\" to \"hidden\" but \"transforms\" is used\n    // because it is already being updated when update() is called\n    Object.assign(magnifyElement.style, {\n      display: 'block',\n      width: `${size}px`,\n      height: `${size}px`,\n      position: 'absolute',\n      overflow: 'hidden',\n      borderRadius: '50%',\n      boxSizing: 'border-box',\n      left: `${-radius}px`,\n      top: `${-radius}px`,\n      transform: `translate(-1000px, -1000px)`,\n    });\n\n    return magnifyElement;\n  }\n\n  private _convertZoomFactorToParalellScale(\n    viewport,\n    magnifyViewport,\n    zoomFactor\n  ) {\n    const { parallelScale } = viewport.getCamera();\n    const canvasRatio =\n      magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n\n    return parallelScale * (1 / zoomFactor) * canvasRatio;\n  }\n\n  private _isStackViewport(\n    viewport: Types.IViewport\n  ): viewport is Types.IStackViewport {\n    return 'setStack' in viewport;\n  }\n\n  private _isVolumeViewport(\n    viewport: Types.IViewport\n  ): viewport is Types.IVolumeViewport {\n    return 'addVolumes' in viewport;\n  }\n\n  private _cloneToolGroups(\n    sourceViewport: Types.IViewport,\n    magnifyViewport: Types.IViewport\n  ) {\n    const sourceActors = sourceViewport.getActors();\n    const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n    const sourceToolGroup = ToolGroupManager.getToolGroupForViewport(\n      sourceViewport.id,\n      sourceViewport.renderingEngineId\n    );\n\n    const magnifyToolGroup = sourceToolGroup.clone(\n      magnifyToolGroupId,\n      (toolName) => {\n        const toolInstance = sourceToolGroup.getToolInstance(toolName);\n        const isAnnotationTool =\n          toolInstance instanceof AnnotationTool &&\n          !(toolInstance instanceof AdvancedMagnifyTool);\n\n        return (\n          isAnnotationTool || toolName === SegmentationDisplayTool.toolName\n        );\n      }\n    );\n\n    magnifyToolGroup.addViewport(\n      magnifyViewport.id,\n      magnifyViewport.renderingEngineId\n    );\n\n    sourceActors.filter(isSegmentation).forEach((actor) => {\n      segmentation.addSegmentationRepresentations(magnifyToolGroupId, [\n        {\n          segmentationId: actor.referenceId,\n          type: SegmentationRepresentations.Labelmap,\n        },\n      ]);\n    });\n\n    return { sourceToolGroup, magnifyToolGroup };\n  }\n\n  private _cloneStack(\n    sourceViewport: Types.IStackViewport,\n    magnifyViewport: Types.IStackViewport\n  ): void {\n    const imageIds = sourceViewport.getImageIds();\n\n    magnifyViewport.setStack(imageIds).then(() => {\n      this._isViewportReady = true;\n      this.update();\n    });\n  }\n\n  private _cloneVolumes(\n    sourceViewport: Types.IVolumeViewport,\n    magnifyViewport: Types.IVolumeViewport\n  ): Types.IVolumeViewport {\n    const actors = sourceViewport.getActors();\n    const volumeInputArray: Types.IVolumeInput[] = actors\n      .filter((actor) => !isSegmentation(actor))\n      .map((actor) => ({ volumeId: actor.uid }));\n\n    magnifyViewport.setVolumes(volumeInputArray).then(() => {\n      this._isViewportReady = true;\n      this.update();\n    });\n\n    return magnifyViewport;\n  }\n\n  private _cloneViewport(sourceViewport, magnifyElement) {\n    const { viewportId: magnifyViewportId } = this;\n    const renderingEngine =\n      sourceViewport.getRenderingEngine() as Types.IRenderingEngine;\n\n    const { options: sourceViewportOptions } = sourceViewport;\n    const viewportInput = {\n      element: magnifyElement,\n      viewportId: magnifyViewportId,\n      type: sourceViewport.type,\n      defaultOptions: { ...sourceViewportOptions },\n    };\n\n    renderingEngine.enableElement(viewportInput);\n\n    const magnifyViewport = <Types.IViewport>(\n      renderingEngine.getViewport(magnifyViewportId)\n    );\n\n    if (this._isStackViewport(sourceViewport)) {\n      this._cloneStack(sourceViewport, magnifyViewport as Types.IStackViewport);\n    } else if (this._isVolumeViewport(sourceViewport)) {\n      this._cloneVolumes(\n        sourceViewport,\n        magnifyViewport as Types.IVolumeViewport\n      );\n    }\n\n    // Prevent handling events outside of the magnifying glass because it has rounded border\n    this._inheritBorderRadius(magnifyElement);\n\n    const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n\n    this._sourceToolGroup = toolGroups.sourceToolGroup;\n    this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n  }\n\n  private _cancelMouseEventCallback(evt): void {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  private _browserMouseUpCallback(evt) {\n    const { element } = this._enabledElement.viewport;\n\n    document.removeEventListener('mouseup', this._browserMouseUpCallback);\n\n    // Restrict the scope of magnifying glass events again\n    element.addEventListener('mouseup', this._cancelMouseEventCallback);\n    element.addEventListener('mousemove', this._cancelMouseEventCallback);\n  }\n\n  private _browserMouseDownCallback(evt) {\n    const { element } = this._enabledElement.viewport;\n\n    // Enable auto pan only when user clicks inside of the magnifying glass\n    // viewport otherwise it can move when interacting with annotations outside\n    // of the magnifying glass or when trying to move/resize it.\n    this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n\n    // Wait for the mouseup event to restrict the scope of magnifying glass events again\n    document.addEventListener('mouseup', this._browserMouseUpCallback);\n\n    // Allow mouseup and mousemove events to make it possible to manipulate the\n    // tool when passing the mouse over the magnifying glass (dragging a handle).\n    // Just relying on state.isInteractingWithTool does not work because there\n    // is a 400ms delay to handle double click (see mouseDownListener) which\n    // makes the magnifying glass unresponsive for that amount of time.\n    element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n    element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n  }\n\n  private _mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    if (!state.isInteractingWithTool) {\n      return;\n    }\n\n    const { _autoPan: autoPan } = this;\n\n    if (!autoPan.enabled || !this._canAutoPan) {\n      return;\n    }\n\n    const { currentPoints } = evt.detail;\n    const { viewport } = this._enabledElement;\n    const { canvasToWorld } = viewport;\n    const { canvas: canvasCurrent } = currentPoints;\n    const { radius: magnifyRadius } = this;\n    const canvasCenter: Types.Point2 = [magnifyRadius, magnifyRadius];\n    const dist = distanceToPoint(canvasCenter, canvasCurrent);\n    const maxDist = magnifyRadius - autoPan.padding;\n\n    // No need to pan if it is not close to the border\n    if (dist <= maxDist) {\n      return;\n    }\n\n    const panDist = dist - maxDist;\n    const canvasDeltaPos = vec2.sub(\n      vec2.create(),\n      canvasCurrent,\n      canvasCenter\n    ) as Types.Point2;\n\n    vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n    vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n\n    const newCanvasPosition = vec2.add(\n      vec2.create(),\n      this.position,\n      canvasDeltaPos\n    ) as Types.Point2;\n    const currentWorldPos = canvasToWorld(this.position);\n    const newWorldPos = canvasToWorld(newCanvasPosition);\n    const worldDeltaPos = vec3.sub(\n      vec3.create(),\n      newWorldPos,\n      currentWorldPos\n    ) as Types.Point3;\n\n    const autoPanCallbackData: AutoPanCallbackData = {\n      points: {\n        currentPosition: {\n          canvas: this.position,\n          world: currentWorldPos,\n        },\n        newPosition: {\n          canvas: newCanvasPosition,\n          world: newWorldPos,\n        },\n      },\n      delta: {\n        canvas: canvasDeltaPos,\n        world: worldDeltaPos,\n      },\n    };\n\n    autoPan.callback(autoPanCallbackData);\n  }\n\n  private _addBrowserEventListeners(element) {\n    // mousedown on document is handled in the capture phase because the other\n    // mousedown event listener added to the magnifying glass element does not\n    // allow the event to buble up and reach the document.\n    document.addEventListener(\n      'mousedown',\n      this._browserMouseDownCallback,\n      true\n    );\n\n    // All mouse events should not buble up avoiding the source viewport from\n    // handling those events resulting in unexpected behaviors.\n    element.addEventListener('mousedown', this._cancelMouseEventCallback);\n    element.addEventListener('mouseup', this._cancelMouseEventCallback);\n    element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    element.addEventListener('dblclick', this._cancelMouseEventCallback);\n  }\n\n  private _removeBrowserEventListeners(element) {\n    document.removeEventListener(\n      'mousedown',\n      this._browserMouseDownCallback,\n      true\n    );\n    document.removeEventListener('mouseup', this._browserMouseUpCallback);\n\n    element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n    element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n    element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n  }\n\n  private _addEventListeners(element) {\n    eventTarget.addEventListener(\n      cstEvents.TOOL_MODE_CHANGED,\n      this._handleToolModeChanged\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n\n    this._addBrowserEventListeners(element);\n  }\n\n  private _removeEventListeners(element) {\n    eventTarget.removeEventListener(\n      cstEvents.TOOL_MODE_CHANGED,\n      this._handleToolModeChanged\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n\n    this._removeBrowserEventListeners(element);\n  }\n\n  private _initialize() {\n    const { _sourceEnabledElement: sourceEnabledElement } = this;\n    const { viewport: sourceViewport } = sourceEnabledElement;\n    const { canvas: sourceCanvas } = sourceViewport;\n    const magnifyElement = this._createViewportNode();\n\n    sourceCanvas.parentNode.appendChild(magnifyElement);\n\n    this._addEventListeners(magnifyElement);\n    this._cloneViewport(sourceViewport, magnifyElement);\n    this._enabledElement = getEnabledElement(magnifyElement);\n  }\n\n  private _syncViewportsCameras(sourceViewport, magnifyViewport) {\n    const worldPos = sourceViewport.canvasToWorld(this.position);\n\n    // Use the original viewport for the base for parallelScale\n    const parallelScale = this._convertZoomFactorToParalellScale(\n      sourceViewport,\n      magnifyViewport,\n      this.zoomFactor\n    );\n\n    const { focalPoint, position, viewPlaneNormal } =\n      magnifyViewport.getCamera();\n\n    const distance = Math.sqrt(\n      Math.pow(focalPoint[0] - position[0], 2) +\n        Math.pow(focalPoint[1] - position[1], 2) +\n        Math.pow(focalPoint[2] - position[2], 2)\n    );\n\n    const updatedFocalPoint = <Types.Point3>[\n      worldPos[0],\n      worldPos[1],\n      worldPos[2],\n    ];\n\n    const updatedPosition = <Types.Point3>[\n      updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n      updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n      updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n    ];\n\n    magnifyViewport.setCamera({\n      parallelScale,\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n  }\n\n  private _syncStackViewports(\n    sourceViewport: Types.IStackViewport,\n    magnifyViewport: Types.IStackViewport\n  ) {\n    magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n  }\n\n  private _syncViewports() {\n    const { viewport: sourceViewport } = this._sourceEnabledElement;\n    const { viewport: magnifyViewport } = this._enabledElement;\n    const sourceProperties = sourceViewport.getProperties();\n\n    magnifyViewport.setProperties(sourceProperties);\n    this._syncViewportsCameras(sourceViewport, magnifyViewport);\n\n    if (this._isStackViewport(sourceViewport)) {\n      this._syncStackViewports(\n        sourceViewport as Types.IStackViewport,\n        magnifyViewport as Types.IStackViewport\n      );\n    }\n  }\n\n  private _resizeViewport() {\n    const { viewport } = this._enabledElement;\n    const renderingEngine = viewport.getRenderingEngine();\n\n    renderingEngine.resize();\n  }\n}\n\nexport { AdvancedMagnifyViewport as default, AdvancedMagnifyViewport };\n","import { vec3 } from 'gl-matrix';\nimport {\n  eventTarget,\n  Enums,\n  getRenderingEngine,\n  CONSTANTS,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { AnnotationRemovedEventType } from '../types/EventTypes';\nimport { Events as cstEvents } from '../enums';\nimport {\n  AdvancedMagnifyViewport,\n  AutoPanCallback,\n} from './AdvancedMagnifyViewport';\nimport { AdvancedMagnifyAnnotation } from '../types/ToolSpecificAnnotationTypes';\n\n// Defined the tool name internally instead of importing\n// AdvangedMagnifyTool due to cyclic dependency\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\n\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nconst { Events } = Enums;\n\nexport type MagnifyViewportInfo = {\n  // Viewport id to be used or new v4 compliant GUID is used instead\n  magnifyViewportId?: string;\n  // Enabled element where the magnifying glass shall be added to\n  sourceEnabledElement: Types.IEnabledElement;\n  // Magnifying glass position (center)\n  position: Types.Point2;\n  // Magnifying glass radius (pixels)\n  radius: number;\n  // Amount of magnification applied to the magnifying glass image compared to the source viewport.\n  zoomFactor: number;\n  // Allow panning the viewport when moving an annotation point close to the border of the magnifying glass\n  autoPan: {\n    // Enable or disable auto pan\n    enabled: boolean;\n    // Minimum distance to the border before start auto panning\n    padding: number;\n    // Callback function responsible for updating the annotation (circle)\n    // that contains the magnifying viewport\n    callback: AutoPanCallback;\n  };\n};\n\ntype MagnifyViewportsMapEntry = {\n  annotation: AdvancedMagnifyAnnotation;\n  magnifyViewport: AdvancedMagnifyViewport;\n};\n\n/**\n * Manager responsible for creating, storing and destroying magnifying glass\n * viewports. There are no restrictions to create a new instance of it but it\n * should be accessed through getInstance() method.\n */\nclass AdvancedMagnifyViewportManager {\n  private static _singleton: AdvancedMagnifyViewportManager;\n  private _magnifyViewportsMap: Map<string, MagnifyViewportsMapEntry>;\n\n  constructor() {\n    this._magnifyViewportsMap = new Map();\n    this._initialize();\n  }\n\n  /**\n   * Creates a new magnifying glass viewport manager instance when this method is\n   * called for the first time or return the instance previously created for\n   * any subsequent call (singleton pattern).\n   * @returns A magnifying viewport manager instance\n   */\n  public static getInstance(): AdvancedMagnifyViewportManager {\n    AdvancedMagnifyViewportManager._singleton =\n      AdvancedMagnifyViewportManager._singleton ??\n      new AdvancedMagnifyViewportManager();\n\n    return AdvancedMagnifyViewportManager._singleton;\n  }\n\n  /**\n   * Creates a new magnifying glass viewport instance\n   * @param viewportInfo - Viewport data used when creating a new magnifying glass viewport\n   * @returns A magnifying glass viewport instance\n   */\n  public createViewport = (\n    annotation: AdvancedMagnifyAnnotation,\n    viewportInfo: MagnifyViewportInfo\n  ): AdvancedMagnifyViewport => {\n    const {\n      magnifyViewportId,\n      sourceEnabledElement,\n      position,\n      radius,\n      zoomFactor,\n      autoPan,\n    } = viewportInfo;\n    const { viewport: sourceViewport } = sourceEnabledElement;\n    const { element: sourceElement } = sourceViewport;\n\n    const magnifyViewport = new AdvancedMagnifyViewport({\n      magnifyViewportId,\n      sourceEnabledElement,\n      radius,\n      position,\n      zoomFactor,\n      autoPan,\n    });\n\n    this._addSourceElementEventListener(sourceElement);\n    this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n      annotation,\n      magnifyViewport,\n    });\n\n    return magnifyViewport;\n  };\n\n  /**\n   * Find and return a magnifying glass viewport based on its id\n   * @param magnifyViewportId - Magnifying glass viewport id\n   * @returns A magnifying glass viewport instance\n   */\n  public getViewport(magnifyViewportId: string): AdvancedMagnifyViewport {\n    return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n  }\n\n  /**\n   * Release all magnifying glass viewport instances and remove all event\n   * listeners making all objects available to be garbage collected.\n   */\n  public dispose() {\n    this._removeEventListeners();\n    this._destroyViewports();\n  }\n\n  private _destroyViewport(magnifyViewportId: string) {\n    const magnifyViewportMapEntry =\n      this._magnifyViewportsMap.get(magnifyViewportId);\n\n    if (magnifyViewportMapEntry) {\n      const { magnifyViewport } = magnifyViewportMapEntry;\n      const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n      const { element: sourceElement } = sourceViewport;\n\n      this._removeSourceElementEventListener(sourceElement);\n\n      magnifyViewport.dispose();\n      this._magnifyViewportsMap.delete(magnifyViewportId);\n    }\n  }\n\n  private _destroyViewports() {\n    const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n\n    magnifyViewportIds.forEach((magnifyViewportId) =>\n      this._destroyViewport(magnifyViewportId)\n    );\n  }\n\n  private _annotationRemovedCallback = (evt: AnnotationRemovedEventType) => {\n    const { annotation } = evt.detail;\n\n    if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n      return;\n    }\n\n    this._destroyViewport(annotation.data.magnifyViewportId);\n  };\n\n  private _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n    const magnifyViewportsMapEntries = Array.from(\n      this._magnifyViewportsMap.values()\n    );\n\n    return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n      const { viewport } = magnifyViewport.sourceEnabledElement;\n      return viewport.id === sourceViewportId;\n    });\n  }\n\n  private _newStackImageCallback = (\n    evt: Types.EventTypes.StackNewImageEvent\n  ) => {\n    const { viewportId: sourceViewportId, imageId } = evt.detail;\n    const magnifyViewportsMapEntries =\n      this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n\n    magnifyViewportsMapEntries.forEach(({ annotation }) => {\n      annotation.metadata.referencedImageId = imageId;\n      annotation.invalidated = true;\n    });\n  };\n\n  private _newVolumeImageCallback = (\n    evt: Types.EventTypes.VolumeNewImageEvent\n  ) => {\n    const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n    const { viewPlaneNormal: currentViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    const magnifyViewportsMapEntries =\n      this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n\n    magnifyViewportsMapEntries.forEach(({ annotation }) => {\n      const { viewPlaneNormal } = annotation.metadata;\n\n      // Compare the normal to make sure the volume is not rotate in 3D space\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      if (!isParallel) {\n        return;\n      }\n\n      const { handles } = annotation.data;\n      const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n      const vecHandleToImagePlane = vec3.sub(\n        vec3.create(),\n        worldImagePlanePoint,\n        handles.points[0]\n      );\n      const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n      const worldDelta = vec3.scale(\n        vec3.create(),\n        currentViewPlaneNormal,\n        worldDist\n      );\n\n      // Move all handle points to the image plane to make the annotation visible\n      for (let i = 0, len = handles.points.length; i < len; i++) {\n        const point = handles.points[i];\n\n        point[0] += worldDelta[0];\n        point[1] += worldDelta[1];\n        point[2] += worldDelta[2];\n      }\n\n      annotation.invalidated = true;\n    });\n  };\n\n  private _addEventListeners() {\n    eventTarget.addEventListener(\n      cstEvents.ANNOTATION_REMOVED,\n      this._annotationRemovedCallback\n    );\n  }\n\n  private _removeEventListeners() {\n    eventTarget.removeEventListener(\n      cstEvents.ANNOTATION_REMOVED,\n      this._annotationRemovedCallback\n    );\n  }\n\n  private _addSourceElementEventListener(element) {\n    element.addEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._newStackImageCallback\n    );\n\n    element.addEventListener(\n      Events.VOLUME_NEW_IMAGE,\n      this._newVolumeImageCallback\n    );\n  }\n\n  private _removeSourceElementEventListener(element) {\n    element.removeEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._newStackImageCallback\n    );\n\n    element.removeEventListener(\n      Events.VOLUME_NEW_IMAGE,\n      this._newVolumeImageCallback\n    );\n  }\n\n  private _initialize() {\n    this._addEventListeners();\n  }\n}\n\nexport {\n  AdvancedMagnifyViewportManager as default,\n  AdvancedMagnifyViewportManager,\n};\n","import { AnnotationTool } from './base';\n\nimport {\n  getEnabledElement,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events, MouseBindings, KeyboardBindings } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { AdvancedMagnifyAnnotation } from '../types/ToolSpecificAnnotationTypes';\n\nimport { AnnotationCompletedEventDetail } from '../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport AdvancedMagnifyViewportManager from './AdvancedMagnifyViewportManager';\nimport type { AutoPanCallbackData } from './AdvancedMagnifyViewport';\n\nenum AdvancedMagnifyToolActions {\n  ShowZoomFactorsList = 'showZoomFactorsList',\n}\n\nclass AdvancedMagnifyTool extends AnnotationTool {\n  static toolName;\n  static Actions = AdvancedMagnifyToolActions;\n\n  magnifyViewportManager: AdvancedMagnifyViewportManager;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        magnifyingGlass: {\n          radius: 125, // px\n          zoomFactor: 2.5,\n          zoomFactorList: [2.5, 3, 3.5, 4, 4.5, 5],\n          autoPan: {\n            enabled: true,\n            padding: 10, // px\n          },\n        },\n        actions: {\n          showZoomFactorsList: {\n            method: 'showZoomFactorsList',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Secondary,\n                modifierKey: KeyboardBindings.Shift,\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AdvancedMagnifyAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const { magnifyingGlass: config } = this.configuration;\n    const { radius, zoomFactor, autoPan } = config;\n\n    const worldHandlesPoints = this._getWorldHandlesPoints(\n      viewport,\n      canvasPos,\n      radius\n    );\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotationUID = csUtils.uuidv4();\n    const magnifyViewportId = csUtils.uuidv4();\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: AdvancedMagnifyAnnotation = {\n      annotationUID,\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        sourceViewportId: viewport.id,\n        magnifyViewportId,\n        zoomFactor,\n        handles: {\n          points: worldHandlesPoints,\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    this.magnifyViewportManager.createViewport(annotation, {\n      magnifyViewportId,\n      sourceEnabledElement: enabledElement,\n      position: canvasPos,\n      radius,\n      zoomFactor,\n      autoPan: {\n        enabled: autoPan.enabled,\n        padding: autoPan.padding,\n        callback: (data: AutoPanCallbackData) => {\n          const annotationPoints = annotation.data.handles.points;\n          const { world: worldDelta } = data.delta;\n\n          for (let i = 0, len = annotationPoints.length; i < len; i++) {\n            annotationPoints[i][0] += worldDelta[0];\n            annotationPoints[i][1] += worldDelta[1];\n            annotationPoints[i][2] += worldDelta[2];\n          }\n        },\n      },\n    });\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  public isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AdvancedMagnifyAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const center = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ] as Types.Point2;\n    const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n\n    if (Math.abs(radiusPoint - radius) < proximity * 1.5) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const { points } = data.handles;\n    const handleIndex = points.findIndex((p) => p === handle);\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element, deltaPoints } = eventDetail;\n    const worldPosDelta = deltaPoints?.world ?? [0, 0, 0];\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { points } = annotation.data.handles;\n\n    points.forEach((point) => {\n      point[0] += worldPosDelta[0];\n      point[1] += worldPosDelta[1];\n      point[2] += worldPosDelta[2];\n    });\n\n    annotation.invalidated = true;\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n\n    const { annotation } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const canvasCenter: Types.Point2 = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ];\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    const newRadius = getCanvasCircleRadius([\n      canvasCenter,\n      currentCanvasPoints,\n    ]);\n    const newWorldHandlesPoints = this._getWorldHandlesPoints(\n      viewport,\n      canvasCenter,\n      newRadius\n    );\n\n    points[0] = newWorldHandlesPoints[0];\n    points[1] = newWorldHandlesPoints[1];\n    points[2] = newWorldHandlesPoints[2];\n    points[3] = newWorldHandlesPoints[3];\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    annotations = annotations?.filter(\n      (annotation) =>\n        (<AdvancedMagnifyAnnotation>annotation).data.sourceViewportId ===\n        viewport.id\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AdvancedMagnifyAnnotation;\n      const { annotationUID, data } = annotation;\n      const { magnifyViewportId, zoomFactor, handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as Types.Point2[];\n      const canvasTop = canvasCoordinates[0];\n      const canvasBottom = canvasCoordinates[2];\n      const canvasLeft = canvasCoordinates[3];\n      const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n      const center = [\n        canvasLeft[0] + radius,\n        canvasTop[1] + radius,\n      ] as Types.Point2;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-advancedMagnify`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      const magnifyViewport =\n        this.magnifyViewportManager.getViewport(magnifyViewportId);\n\n      magnifyViewport.position = center;\n      magnifyViewport.radius = radius;\n      magnifyViewport.zoomFactor = zoomFactor;\n      magnifyViewport.update();\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  // Basic dropdown component that allows the user to select a different zoom factor.\n  // configurations.actions may be changed to use a customized dropdown.\n  public showZoomFactorsList(\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ) {\n    const { element, currentPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvas: canvasPoint } = currentPoints;\n    const viewportElement = element.querySelector(':scope .viewport-element');\n    const currentZoomFactor = annotation.data.zoomFactor;\n    const remove = () => dropdown.parentElement.removeChild(dropdown);\n\n    const dropdown = this._getZoomFactorsListDropdown(\n      currentZoomFactor,\n      (newZoomFactor) => {\n        if (newZoomFactor !== undefined) {\n          annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n          annotation.invalidated = true;\n        }\n\n        remove();\n        viewport.render();\n      }\n    );\n\n    Object.assign(dropdown.style, {\n      left: `${canvasPoint[0]}px`,\n      top: `${canvasPoint[1]}px`,\n    });\n\n    viewportElement.appendChild(dropdown);\n    dropdown.focus();\n  }\n\n  private _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n    const { zoomFactorList } = this.configuration.magnifyingGlass;\n    const dropdown = document.createElement('select');\n\n    dropdown.size = 5;\n    Object.assign(dropdown.style, {\n      width: '50px',\n      position: 'absolute',\n    });\n\n    ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n      dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n    });\n\n    dropdown.addEventListener('change', (evt) => {\n      evt.stopPropagation();\n      onChangeCallback(dropdown.value);\n    });\n\n    dropdown.addEventListener('keydown', (evt) => {\n      const shouldCancel =\n        (evt.keyCode ?? evt.which === 27) ||\n        evt.key?.toLowerCase() === 'escape';\n\n      if (shouldCancel) {\n        evt.stopPropagation();\n        onChangeCallback();\n      }\n    });\n\n    zoomFactorList.forEach((zoomFactor) => {\n      const option = document.createElement('option');\n\n      option.label = zoomFactor;\n      option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n      option.value = zoomFactor;\n      option.defaultSelected = zoomFactor === currentZoomFactor;\n\n      dropdown.add(option);\n    });\n\n    return dropdown;\n  }\n\n  private _getWorldHandlesPoints = (\n    viewport,\n    canvasCenterPos,\n    canvasRadius\n  ): Types.Point3[] => {\n    const canvasHandlesPoints = [\n      [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius], // top\n      [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1]], // right\n      [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius], // bottom\n      [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1]], // left\n    ];\n\n    const worldHandlesPoints = canvasHandlesPoints.map((p) =>\n      viewport.canvasToWorld(p)\n    ) as Types.Point3[];\n\n    return worldHandlesPoints;\n  };\n}\n\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\n\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngines,\n  CONSTANTS,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport { ReferenceLineAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\n/**\n * @public\n */\n\nclass ReferenceLines extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    sourceViewport: any;\n    annotation: ReferenceLineAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceViewportId: '',\n        showFullDimension: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // this._throttledCalculateCachedStats = throttle(\n    //   this._calculateCachedStats,\n    //   100,\n    //   { trailing: true }\n    // );\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    // Todo: handle this case where it is too soon to get the rendering engine\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    const sourceViewport = renderingEngine.getViewport(\n      this.configuration.sourceViewportId\n    ) as Types.IVolumeViewport;\n\n    if (!sourceViewport || !sourceViewport.getImageData()) {\n      return;\n    }\n\n    const { element } = sourceViewport;\n    const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n\n    const sourceViewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(sourceViewport);\n\n    let annotation = this.editData.annotation;\n    const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n\n    if (!annotation) {\n      const newAnnotation: ReferenceLineAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: sourceViewportCanvasCornersInWorld,\n          },\n        },\n      };\n\n      addAnnotation(newAnnotation, element);\n      annotation = newAnnotation;\n    } else {\n      this.editData.annotation.data.handles.points =\n        sourceViewportCanvasCornersInWorld;\n    }\n\n    this.editData = {\n      sourceViewport,\n      renderingEngine,\n      annotation,\n    };\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewports\n        .filter((viewport) => viewport.id !== sourceViewport.id)\n        .map((viewport) => viewport.id)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the reference lines\n    // we really don't care which viewport triggered the\n    // camera modification, since we want to update all of them\n    // with respect to the targetViewport\n    this._init();\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport: targetViewport } = enabledElement;\n    const { annotation, sourceViewport } = this.editData;\n\n    let renderStatus = false;\n\n    if (!sourceViewport) {\n      return renderStatus;\n    }\n\n    if (sourceViewport.id === targetViewport.id) {\n      // If the source viewport is the same as the current viewport, we don't need to render\n      return renderStatus;\n    }\n\n    if (!annotation || !annotation?.data?.handles?.points) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n    const { viewPlaneNormal: sourceViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    let pointSetToUse = pointSet1;\n\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const newNormal = vec3.cross(\n      vec3.create(),\n      topBottomVec,\n      topRightVec\n    ) as Types.Point3;\n\n    if (this.isParallel(newNormal, viewPlaneNormal)) {\n      return renderStatus;\n    }\n\n    // check if it is perpendicular to the viewPlaneNormal which means\n    // the line does not intersect the viewPlaneNormal\n    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n      // 'use pointSet2';\n      pointSetToUse = pointSet2;\n    }\n\n    const lineStartWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[0],\n      pointSetToUse[1],\n      targetViewportPlane\n    );\n\n    const lineEndWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[2],\n      pointSetToUse[3],\n      targetViewportPlane\n    );\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n      targetViewport.worldToCanvas(world)\n    );\n\n    if (this.configuration.showFullDimension) {\n      canvasCoordinates = this.handleFullDimension(\n        targetViewport,\n        lineStartWorld,\n        viewPlaneNormal,\n        viewUp,\n        lineEndWorld,\n        canvasCoordinates\n      );\n    }\n\n    const dataId = `${annotationUID}-line`;\n    const lineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      lineUID,\n      canvasCoordinates[0],\n      canvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      dataId\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  isPerpendicular = (vec1: Types.Point3, vec2: Types.Point3): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private handleFullDimension(\n    targetViewport: Types.IStackViewport | Types.IVolumeViewport,\n    lineStartWorld: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3,\n    lineEndWorld: Types.Point3,\n    canvasCoordinates: Types.Point2[]\n  ) {\n    const renderingEngine = targetViewport.getRenderingEngine();\n    const targetId = this.getTargetId(targetViewport);\n    const targetImage = this.getTargetIdImage(targetId, renderingEngine);\n\n    const referencedImageId = this.getReferencedImageId(\n      targetViewport,\n      lineStartWorld,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    if (referencedImageId && targetImage) {\n      try {\n        const { imageData, dimensions } = targetImage;\n\n        // Calculate bound image coordinates\n        const [\n          topLeftImageCoord,\n          topRightImageCoord,\n          bottomRightImageCoord,\n          bottomLeftImageCoord,\n        ] = [\n          imageData.indexToWorld([0, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([dimensions[0] - 1, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n          ]) as Types.Point3,\n          imageData.indexToWorld([0, dimensions[1] - 1, 0]) as Types.Point3,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate line start and end image coordinates\n        const [lineStartImageCoord, lineEndImageCoord] = [\n          lineStartWorld,\n          lineEndWorld,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate intersection points between line and image bounds\n        canvasCoordinates = [\n          [topLeftImageCoord, topRightImageCoord],\n          [topRightImageCoord, bottomRightImageCoord],\n          [bottomLeftImageCoord, bottomRightImageCoord],\n          [topLeftImageCoord, bottomLeftImageCoord],\n        ]\n          .map(([start, end]) =>\n            this.intersectInfiniteLines(\n              start,\n              end,\n              lineStartImageCoord,\n              lineEndImageCoord\n            )\n          )\n          .filter((point) => point && this.isInBound(point, dimensions))\n          .map((point) => {\n            const world = csUtils.imageToWorldCoords(\n              referencedImageId,\n              point as Types.Point2\n            );\n            return targetViewport.worldToCanvas(world);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    return canvasCoordinates;\n  }\n\n  // get the intersection point between two infinite lines, not line segments\n  intersectInfiniteLines(\n    line1Start: Types.Point2,\n    line1End: Types.Point2,\n    line2Start: Types.Point2,\n    line2End: Types.Point2\n  ) {\n    const [x1, y1] = line1Start;\n    const [x2, y2] = line1End;\n    const [x3, y3] = line2Start;\n    const [x4, y4] = line2End;\n\n    // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n    const a1 = y2 - y1;\n    const b1 = x1 - x2;\n    const c1 = x2 * y1 - x1 * y2;\n\n    // Compute a2, b2, c2\n    const a2 = y4 - y3;\n    const b2 = x3 - x4;\n    const c2 = x4 * y3 - x3 * y4;\n\n    if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n      return;\n    }\n\n    const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n    const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n\n    return [x, y];\n  }\n\n  isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  isInBound(point: number[], dimensions: Types.Point3): boolean {\n    return (\n      point[0] >= 0 &&\n      point[0] <= dimensions[0] &&\n      point[1] >= 0 &&\n      point[1] <= dimensions[1]\n    );\n  }\n}\n\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport {\n  metaData,\n  CONSTANTS,\n  getRenderingEngine,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\n\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\nexport interface OverlayGridAnnotation extends Annotation {\n  data: {\n    viewportData: Map<string, object>;\n    pointSets: Array<object>;\n  };\n}\n\n/**\n * @public\n */\nclass OverlayGridTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceImageIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onSetToolActive = (): void => {\n    this._init();\n  };\n\n  _init = (): void => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n    if (!sourceImageIds?.length) {\n      console.warn(\n        'OverlayGridTool: No sourceImageIds provided in configuration'\n      );\n      return;\n    }\n\n    const imagePlaneModule = metaData.get(\n      'imagePlaneModule',\n      sourceImageIds[0]\n    );\n\n    if (!imagePlaneModule) {\n      console.warn(\n        'OverlayGridTool: No imagePlaneModule found for sourceImageIds'\n      );\n      return;\n    }\n\n    const { frameOfReferenceUID } = imagePlaneModule;\n\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn('OverlayGridTool: No viewports found');\n      return;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const pointSets = sourceImageIds.map((id) => {\n        // check if pointSets for the imageId was calculated. If not calculate and store\n        return this.calculateImageIdPointSets(id);\n      });\n\n      const newAnnotation: OverlayGridAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          viewportData: new Map(),\n          pointSets,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * Calculates the point sets based on the image corners relative to an imageId\n   * @param imageId - The imageId to calculate the point sets for\n   * @returns\n   */\n  calculateImageIdPointSets = (imageId: string) => {\n    const {\n      imagePositionPatient,\n      rows,\n      columns,\n      rowCosines,\n      columnCosines,\n      rowPixelSpacing,\n      columnPixelSpacing,\n    } = metaData.get('imagePlaneModule', imageId);\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = <Types.Point3>[...imagePositionPatient];\n    const topRight = <Types.Point3>[...imagePositionPatient];\n    const bottomLeft = <Types.Point3>[...imagePositionPatient];\n    const bottomRight = <Types.Point3>[...imagePositionPatient];\n\n    vec3.scaleAndAdd(\n      topRight,\n      imagePositionPatient,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n    vec3.scaleAndAdd(\n      bottomLeft,\n      imagePositionPatient,\n      rowCosines,\n      rows * rowPixelSpacing\n    );\n\n    vec3.scaleAndAdd(\n      bottomRight,\n      bottomLeft,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    return { pointSet1, pointSet2 };\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n\n    let renderStatus = false;\n    if (!sourceImageIds?.length) {\n      return renderStatus;\n    }\n\n    const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n    const targetImageIds = targetViewport.getImageIds();\n    if (targetImageIds.length < 2) {\n      return renderStatus;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n\n    const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n    const imageIdNormal = <Types.Point3>(\n      this.getImageIdNormal(sourceImageIds[0])\n    );\n\n    if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    const pointSets = annotation.data.pointSets;\n    const viewportData = annotation.data.viewportData;\n    for (let i = 0; i < sourceImageIds.length; i++) {\n      // check if pointSets for the imageId was calculated. If not calculate and store\n      const { pointSet1, pointSet2 } = pointSets[i];\n\n      const targetData =\n        viewportData.get(targetViewport.id) ||\n        this.initializeViewportData(viewportData, targetViewport.id);\n\n      // check if pointSetToUse was calculated. If not calculate and store\n      if (!targetData.pointSetsToUse[i]) {\n        let pointSetToUse = pointSet1;\n\n        let topBottomVec = vec3.subtract(\n          vec3.create(),\n          pointSet1[0],\n          pointSet1[1]\n        );\n        topBottomVec = vec3.normalize(\n          vec3.create(),\n          topBottomVec\n        ) as Types.Point3;\n\n        // check if it is perpendicular to the viewPlaneNormal which means\n        // the line does not intersect the viewPlaneNormal\n        if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n          // 'use pointSet2';\n          pointSetToUse = pointSet2;\n        }\n\n        targetData.pointSetsToUse[i] = pointSetToUse;\n\n        targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[0],\n          pointSetToUse[1],\n          targetViewportPlane\n        );\n\n        targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[2],\n          pointSetToUse[3],\n          targetViewportPlane\n        );\n      }\n\n      const lineStartWorld = targetData.lineStartsWorld[i];\n      const lineEndWorld = targetData.lineEndsWorld[i];\n\n      styleSpecifier.annotationUID = annotationUID;\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n        targetViewport.worldToCanvas(world)\n      );\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = `${i}`;\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n    }\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  private initializeViewportData = (viewportData, id) => {\n    viewportData.set(id, {\n      pointSetsToUse: [],\n      lineStartsWorld: [],\n      lineEndsWorld: [],\n    });\n\n    return viewportData.get(id);\n  };\n\n  private isPerpendicular = (\n    vec1: Types.Point3,\n    vec2: Types.Point3\n  ): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  private getImageIdNormal(imageId: string): vec3 {\n    const { imageOrientationPatient } = metaData.get(\n      'imagePlaneModule',\n      imageId\n    );\n    const rowCosineVec = vec3.fromValues(\n      imageOrientationPatient[0],\n      imageOrientationPatient[1],\n      imageOrientationPatient[2]\n    );\n    const colCosineVec = vec3.fromValues(\n      imageOrientationPatient[3],\n      imageOrientationPatient[4],\n      imageOrientationPatient[5]\n    );\n    return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n  }\n}\n\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { drawPolyline } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { Annotation } from '../types';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\n\nexport interface SegmentationIntersectionAnnotation extends Annotation {\n  data: {\n    actorsWorldPointsMap: Map<string, Map<string, object>>;\n  };\n}\n\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        opacity: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Initialize the annotation data and calculates surface intersections\n   * @returns\n   */\n  _init = (): void => {\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn(this.getToolName() + 'Tool: No viewports found');\n      return;\n    }\n\n    const firstViewport = getRenderingEngine(\n      viewportsInfo[0].renderingEngineId\n    )?.getViewport(viewportsInfo[0].viewportId);\n\n    if (!firstViewport) {\n      return;\n    }\n    const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const actorsWorldPointsMap = new Map();\n      calculateSurfaceSegmentationIntersections(\n        actorsWorldPointsMap,\n        viewportsInfo\n      );\n      const newAnnotation: SegmentationIntersectionAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          actorsWorldPointsMap,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    this._init();\n  };\n\n  /**\n   * Renders the surface intersections\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    let renderStatus = false;\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n    const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n\n    actorEntries.forEach((actorEntry) => {\n      if (!actorEntry?.clippingFilter) {\n        return;\n      }\n      const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n      if (!actorWorldPointMap) {\n        return;\n      }\n      if (!actorWorldPointMap.get(cacheId)) {\n        return;\n      }\n      let polyLineIdx = 1;\n      const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n      for (let i = 0; i < worldPointsSet.length; i++) {\n        const worldPoints = worldPointsSet[i];\n        const canvasPoints = worldPoints.map((point) =>\n          viewport.worldToCanvas(point)\n        );\n\n        const options = {\n          color: color,\n          fillColor: color,\n          fillOpacity: this.configuration.opacity,\n          connectLastToFirst: true,\n        };\n\n        const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n        drawPolyline(\n          svgDrawingHelper,\n          annotationUID,\n          polyLineUID,\n          canvasPoints,\n          options\n        );\n        polyLineIdx++;\n      }\n    });\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a list of viewports\n * @param actorWorldPointsMap\n * @param viewportsInfo\n */\nfunction calculateSurfaceSegmentationIntersections(\n  actorsWorldPointsMap,\n  viewportsInfo\n) {\n  viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n    const viewport =\n      getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n  });\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a viewport\n * generating a set of polyline points for each actor\n * @param actorWorldPointsMap\n * @param viewport\n */\nfunction calculateSurfaceSegmentationIntersectionsForViewport(\n  actorsWorldPointsMap,\n  viewport\n) {\n  const actorEntries = viewport.getActors();\n\n  // we should not use the focalPoint here, since the pan and zoom updates it,\n  // imageIndex is reliable enough\n  const cacheId = getCacheId(viewport);\n\n  actorEntries.forEach((actorEntry) => {\n    if (!actorEntry?.clippingFilter) {\n      return;\n    }\n\n    let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n    if (!actorWorldPointsMap) {\n      actorWorldPointsMap = new Map();\n      actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n    }\n    if (!actorWorldPointsMap.get(cacheId)) {\n      const polyData = actorEntry.clippingFilter.getOutputData();\n      const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n      if (!worldPointsSet) {\n        return;\n      }\n\n      // worldPointsSet = removeExtraPoints(viewport, worldPointsSet);\n      const colorArray = actorEntry.actor.getProperty().getColor();\n      const color = colorToString(colorArray);\n      actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n    }\n  });\n}\n\nfunction getCacheId(viewport) {\n  const { viewPlaneNormal } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\n\n/**\n * Transform a color array into a string\n * @param colorArray\n * @returns\n */\nfunction colorToString(colorArray): string {\n  function colorComponentToString(component) {\n    let componentString = Math.floor(component * 255).toString(16);\n    if (componentString.length === 1) {\n      componentString = '0' + componentString;\n    }\n    return componentString;\n  }\n  return (\n    '#' +\n    colorComponentToString(colorArray[0]) +\n    colorComponentToString(colorArray[1]) +\n    colorComponentToString(colorArray[2])\n  );\n}\n\n/**\n * Remove duplicate and unnecessary points\n * @param worldPoints\n * @param canvasPoints\n * @returns\n */\nfunction removeExtraPoints(viewport, worldPointsSet) {\n  return worldPointsSet.map((worldPoints) => {\n    const canvasPoints = worldPoints.map((point) => {\n      const canvasPoint = viewport.worldToCanvas(point);\n      return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n    });\n\n    let lastPoint;\n    const newWorldPoints = [];\n    let newCanvasPoints = [];\n    // removing duplicate points\n    for (let i = 0; i < worldPoints.length; i++) {\n      if (lastPoint) {\n        if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n          newWorldPoints.push(worldPoints[i]);\n          newCanvasPoints.push(canvasPoints[i]);\n        }\n      }\n      lastPoint = canvasPoints[i];\n    }\n\n    // checking if a middle point is near the start\n    const firstPoint = newCanvasPoints[0];\n    for (\n      let j = Math.min(30, newCanvasPoints.length);\n      j < newCanvasPoints.length;\n      j++\n    ) {\n      if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n        newCanvasPoints = newCanvasPoints.slice(0, j);\n        return newWorldPoints.slice(0, j);\n      }\n    }\n    return newWorldPoints;\n  });\n}\n\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  Annotations,\n} from '../types';\nimport { ReferenceCursor } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * ReferenceCursors is a tool that will show your cursors position in all other elements in the toolGroup if they have a matching FrameOfReference relative to its position in world space.\n * Also when positionSync is enabled, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n *\n * Configuration:\n * - positionSync: boolean, if true, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n * - disableCursor: boolean, if true, it will hide the cursor in all viewports. You need to disable and reactivate the tool for this to apply.\n * - displayThreshold: number, if the distance of the cursor in a viewport is bigger than this threshold the cursor will not be displayed.\n *\n * Only uses Active and Disabled state\n */\nclass ReferenceCursors extends AnnotationDisplayTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing = false;\n  isHandleOutsideImage = false;\n  _elementWithCursor: null | HTMLDivElement = null;\n  _currentCursorWorldPosition: null | Types.Point3 = null;\n  _currentCanvasPosition: null | Types.Point2 = null;\n  //need to keep track if this was enabled when tool was enabled because we need to know if we should reset cursors\n  _disableCursorEnabled = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        displayThreshold: 5,\n        positionSync: true,\n        disableCursor: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this._disableCursorEnabled = this.configuration.disableCursor;\n  }\n\n  /**\n   * Overwritten mouseMoveCallback since we want to keep track of the current mouse position and redraw on mouseMove\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const { detail } = evt;\n    const { element, currentPoints } = detail;\n\n    //save current positions and current element the curser is hovering over\n    this._currentCursorWorldPosition = currentPoints.world;\n    this._currentCanvasPosition = currentPoints.canvas;\n    this._elementWithCursor = element;\n\n    const annotation = this.getActiveAnnotation(element);\n    if (annotation === null) {\n      this.createInitialAnnotation(currentPoints.world, element);\n      return false;\n    }\n    this.updateAnnotationPosition(element, annotation);\n    return false;\n  };\n\n  onSetToolActive(): void {\n    this._disableCursorEnabled = this.configuration.disableCursor;\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    enabledElements.forEach((element) => {\n      if (element) {\n        hideElementCursor(element.viewport.element);\n      }\n    });\n  }\n  onSetToolDisabled(): void {\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n    enabledElements.forEach((element) => {\n      if (element) {\n        resetElementCursor(element.viewport.element);\n      }\n    });\n  }\n\n  createInitialAnnotation = (\n    worldPos: Types.Point3,\n    element: HTMLDivElement\n  ): void => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      throw new Error('No enabled element found');\n    }\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    if (!viewPlaneNormal || !viewUp) {\n      throw new Error('Camera not found');\n    }\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [[...worldPos]] as [Types.Point3],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n      },\n    };\n\n    const annotations = getAnnotations(this.getToolName(), element);\n\n    if (annotations.length > 0) {\n      return null;\n    }\n    const annotationId = addAnnotation(annotation, element);\n\n    if (annotationId === null) {\n      return;\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  getActiveAnnotation(element: HTMLDivElement): null | Annotation {\n    const annotations = getAnnotations(this.getToolName(), element);\n    if (!annotations.length) {\n      return null;\n    }\n    const targetAnnotation = annotations[0];\n    return targetAnnotation;\n  }\n\n  /**\n   * updates the position of the annotation to match the currently set world position\n   */\n  updateAnnotationPosition(\n    element: HTMLDivElement,\n    annotation: Annotation\n  ): void {\n    const worldPos = this._currentCursorWorldPosition;\n    if (!worldPos) {\n      return;\n    }\n    if (!annotation.data?.handles?.points) {\n      return;\n    }\n    annotation.data.handles.points = [[...worldPos]];\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      return;\n    }\n    const { renderingEngine } = enabledElement;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  //checks if we need to update the annotation position due to camera changes\n  onCameraModified = (evt: any): void => {\n    const eventDetail = evt.detail;\n    const { element, previousCamera, camera } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const viewport = enabledElement.viewport as\n      | Types.IVolumeViewport\n      | Types.IStackViewport;\n\n    //only react to changes for element with cursor, otherwise would cause infinite loop\n    if (element !== this._elementWithCursor) {\n      return;\n    }\n    //check if camera moved along its normal\n    const oldFocalPoint = previousCamera.focalPoint;\n    const cameraNormal = camera.viewPlaneNormal;\n    const newFocalPoint = camera.focalPoint;\n\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n    //check if focal point changed\n    if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n      return;\n    }\n    //if nomrmal is perpendicular to focal point change, then we are not moving along the normal\n    const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n    //dot product is 0 -> perpendicular\n    if (Math.abs(dotProduct) < 1e-2) {\n      return;\n    }\n\n    //need to update the position of the annotation since camera changed\n    if (!this._currentCanvasPosition) {\n      return;\n    }\n\n    const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n    this._currentCursorWorldPosition = newWorldPos;\n    this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n  };\n\n  //display annotation if current viewing plane has a max distance of \"displayThreshold\" from the annotation\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations {\n    //calculate distance of current viewport to annotation\n    if (!(annotations instanceof Array) || annotations.length === 0) {\n      return [];\n    }\n    const annotation = annotations[0];\n    const viewport = getEnabledElement(element)?.viewport;\n    if (!viewport) {\n      return [];\n    }\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, focalPoint } = camera;\n    if (!viewPlaneNormal || !focalPoint) {\n      return [];\n    }\n    const points = annotation.data?.handles?.points;\n    if (!(points instanceof Array) || points.length !== 1) {\n      return [];\n    }\n    const worldPos = points[0];\n    const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n    const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n    return distance < this.configuration.displayThreshold ? [annotation] : [];\n  }\n\n  /**\n   * Draws the cursor representation on the enabledElement\n   * Checks if a stack change has happened and updates annotation in that case\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    const isElementWithCursor = this._elementWithCursor === viewport.element;\n\n    //update stack position if position sync is enabled\n    if (this.configuration.positionSync && !isElementWithCursor) {\n      this.updateViewportImage(viewport);\n    }\n\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    //the viewport change from updateStackPosition might not be applied yet, so sometimes the annotation might not be immediately visible\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as Annotations;\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ReferenceCursor;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      if (!annotationUID) {\n        return renderStatus;\n      }\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidthBase = parseFloat(\n        this.getStyle('lineWidth', styleSpecifier, annotation) as string\n      );\n\n      const lineWidth =\n        typeof lineWidthBase === 'number' && isElementWithCursor\n          ? lineWidthBase\n          : lineWidthBase;\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (points[0].some((e) => isNaN(e))) {\n        return renderStatus;\n      }\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2];\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      const crosshairUIDs = {\n        upper: 'upper',\n        right: 'right',\n        lower: 'lower',\n        left: 'left',\n      };\n      const [x, y] = canvasCoordinates[0];\n      const centerSpace = isElementWithCursor ? 20 : 7;\n      const lineLength = isElementWithCursor ? 5 : 7;\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.upper,\n        [x, y - (centerSpace / 2 + lineLength)],\n        [x, y - centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.lower,\n        [x, y + (centerSpace / 2 + lineLength)],\n        [x, y + centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.right,\n        [x + (centerSpace / 2 + lineLength), y],\n        [x + centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.left,\n        [x - (centerSpace / 2 + lineLength), y],\n        [x - centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  updateViewportImage(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const currentMousePosition = this._currentCursorWorldPosition;\n\n    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n      return;\n    }\n\n    if (viewport instanceof StackViewport) {\n      const closestIndex = utilities.getClosestStackImageIndexForPoint(\n        currentMousePosition,\n        viewport\n      );\n\n      if (closestIndex === null) {\n        return;\n      }\n      if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n        viewport.setImageIdIndex(closestIndex);\n      }\n    } else if (viewport instanceof VolumeViewport) {\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n      if (!focalPoint || !viewPlaneNormal) {\n        return;\n      }\n      const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const currentDistance = utilities.planar.planeDistanceToPoint(\n        plane,\n        currentMousePosition,\n        true\n      );\n\n      if (Math.abs(currentDistance) < 0.5) {\n        return;\n      }\n      const normalizedViewPlane = vec3.normalize(\n        vec3.create(),\n        vec3.fromValues(...viewPlaneNormal)\n      );\n      const scaledPlaneNormal = vec3.scale(\n        vec3.create(),\n        normalizedViewPlane,\n        currentDistance\n      );\n      const newFocalPoint = vec3.add(\n        vec3.create(),\n        vec3.fromValues(...focalPoint),\n        scaledPlaneNormal\n      ) as Types.Point3;\n      //TODO: make check if new focal point is within bounds of volume\n      const isInBounds = true;\n      if (isInBounds) {\n        viewport.setCamera({ focalPoint: newFocalPoint });\n        const renderingEngine = viewport.getRenderingEngine();\n        if (renderingEngine) {\n          renderingEngine.renderViewport(viewport.id);\n        }\n      }\n    }\n  }\n}\n\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElementByIds,\n  getRenderingEngines,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { ScaleOverlayAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport {\n  drawLine as drawLineSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../drawingSvg';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nconst SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';\nconst viewportsWithAnnotations = [];\n\n/**\n * @public\n * @class ScaleOverlayTool\n * @memberof Tools\n *\n * @classdesc Tool for displaying a scale overlay on the image.\n * @extends Tools.Base.BaseTool\n */\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    viewport: any;\n    annotation: ScaleOverlayAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        viewportId: '',\n        scaleLocation: 'bottom',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    // get viewports with tool enabled\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportIds) {\n      return;\n    }\n\n    // get enabled elements\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    let { viewport } = enabledElements[0];\n    const { FrameOfReferenceUID } = enabledElements[0];\n\n    // onCameraModified, configuration.viewportId is set to the active\n    // viewport Id, here we are setting the viewport variable to the\n    // viewport with the matching Id\n    if (this.configuration.viewportId) {\n      enabledElements.forEach((element) => {\n        if (element.viewport.id == this.configuration.viewportId) {\n          viewport = element.viewport;\n        }\n      });\n    }\n\n    if (!viewport) {\n      return;\n    }\n\n    const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n    const viewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(viewport);\n\n    let annotation = this.editData.annotation;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    // if annotations have been created, get the annotation for the\n    // current viewport Id\n    if (annotations.length) {\n      annotation = annotations.filter(\n        (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n      )[0] as ScaleOverlayAnnotation;\n    }\n\n    // viewportsWithAnnotations stores which viewports have an annotation,\n    // if the viewport does not have an annotation, create a new one\n    if (!viewportsWithAnnotations.includes(viewport.id)) {\n      const newAnnotation: ScaleOverlayAnnotation = {\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: viewportCanvasCornersInWorld,\n          },\n          viewportId: viewport.id,\n        },\n      };\n\n      viewportsWithAnnotations.push(viewport.id);\n\n      addAnnotation(newAnnotation, viewport.element);\n      annotation = newAnnotation;\n    } else if (this.editData.annotation.data.viewportId == viewport.id) {\n      this.editData.annotation.data.handles.points =\n        viewportCanvasCornersInWorld;\n      this.editData.annotation.data.viewportId = viewport.id;\n    }\n\n    this.editData = {\n      viewport,\n      renderingEngine,\n      annotation,\n    };\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the viewport\n    // that the camera was modified on\n    this.configuration.viewportId = evt.detail.viewportId;\n    this._init();\n  };\n\n  /**\n   * Used to draw the scale annotation in each request animation\n   * frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   * @returns\n   */\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ) {\n    if (!this.editData.viewport) {\n      return;\n    }\n    const location = this.configuration.scaleLocation;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n    const annotation = annotations.filter(\n      (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n    )[0];\n    const canvas = enabledElement.viewport.canvas;\n\n    const renderStatus = false;\n\n    if (!viewport) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const canvasSize = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n\n    const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n    const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n\n    // hscaleBounds and vscaleBounds compute the max bound for scales on the image\n    const hscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    const vscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    // Computes which scale size to use, ex: 100mm, 50mm\n    const scaleSize = this.computeScaleSize(\n      worldWidthViewport,\n      worldHeightViewport,\n      location\n    );\n\n    // Applies the scale with the predetermined size to the image in\n    // world coordinates, then converts them to canvas coordinates\n    const canvasCoordinates = this.computeWorldScaleCoordinates(\n      scaleSize,\n      location,\n      pointSet1\n    ).map((world) => viewport.worldToCanvas(world));\n\n    // Uses the bounds and canvas size to center the scale\n    // based on the location\n    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(\n      canvasSize,\n      canvasCoordinates,\n      vscaleBounds,\n      hscaleBounds,\n      location\n    );\n\n    // Computes the end scale ticks coordinates\n    const scaleTicks = this.computeEndScaleTicks(\n      scaleCanvasCoordinates,\n      location\n    );\n\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const scaleId = `${annotationUID}-scaleline`;\n    const scaleLineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      scaleLineUID,\n      scaleCanvasCoordinates[0],\n      scaleCanvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      scaleId\n    );\n    const leftTickId = `${annotationUID}-left`;\n    const leftTickUID = '2';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      leftTickUID,\n      scaleTicks.endTick1[0] as Types.Point2,\n      scaleTicks.endTick1[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      leftTickId\n    );\n    const rightTickId = `${annotationUID}-right`;\n    const rightTickUID = '3';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rightTickUID,\n      scaleTicks.endTick2[0] as Types.Point2,\n      scaleTicks.endTick2[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      rightTickId\n    );\n\n    const locationTextOffest = {\n      bottom: [-10, -42],\n      top: [-12, -35],\n      left: [-40, -20],\n      right: [-50, -20],\n    };\n\n    const textCanvasCoordinates = [\n      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n    ];\n    const textBoxLines = this._getTextLines(scaleSize);\n\n    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(\n      scaleSize,\n      location,\n      annotationUID,\n      scaleTicks.endTick1,\n      scaleTicks.endTick2\n    );\n\n    // draws inner ticks for scale\n    for (let i = 0; i < tickUIDs.length; i++) {\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        tickUIDs[i],\n        tickCoordinates[i][0],\n        tickCoordinates[i][1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        tickIds[i]\n      );\n    }\n\n    const textUID = 'text0';\n    drawTextBoxSvg(\n      svgDrawingHelper,\n      annotationUID,\n      textUID,\n      textBoxLines,\n      [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n      {\n        fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        lineDash: '2,3',\n        lineWidth: '1',\n        shadow: true,\n        color: color,\n      }\n    );\n\n    return renderStatus;\n  }\n\n  _getTextLines(scaleSize: number): string[] | undefined {\n    let scaleSizeDisplayValue;\n    let scaleSizeUnits;\n    if (scaleSize >= 50) {\n      scaleSizeDisplayValue = scaleSize / 10; //convert to cm\n      scaleSizeUnits = ' cm';\n    } else {\n      scaleSizeDisplayValue = scaleSize; //convert to cm\n      scaleSizeUnits = ' mm';\n    }\n\n    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n\n    return textLines;\n  }\n\n  /**\n   *\n   * @param worldWidthViewport\n   * @returns currentScaleSize\n   */\n  computeScaleSize = (\n    worldWidthViewport: number,\n    worldHeightViewport: number,\n    location: any\n  ) => {\n    const scaleSizes = [\n      16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n    ];\n    let currentScaleSize;\n    if (location == 'top' || location == 'bottom') {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldWidthViewport * 0.6 &&\n          scaleSize > worldWidthViewport * 0.2\n      );\n    } else {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldHeightViewport * 0.6 &&\n          scaleSize > worldHeightViewport * 0.2\n      );\n    }\n\n    return currentScaleSize[0];\n  };\n\n  /**\n   *  calculates scale ticks for ends of the scale\n   * @param canvasCoordinates\n   * @returns leftTick, rightTick\n   */\n  computeEndScaleTicks = (canvasCoordinates, location) => {\n    const locationTickOffset = {\n      bottom: [\n        [0, -10],\n        [0, -10],\n      ],\n      top: [\n        [0, 10],\n        [0, 10],\n      ],\n      left: [\n        [0, 0],\n        [10, 0],\n      ],\n      right: [\n        [0, 0],\n        [-10, 0],\n      ],\n    };\n\n    const endTick1 = [\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n    const endTick2 = [\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n\n    return {\n      endTick1: endTick1,\n      endTick2: endTick2,\n    };\n  };\n\n  computeInnerScaleTicks = (\n    scaleSize: number,\n    location: string,\n    annotationUID: string,\n    leftTick: any[][],\n    rightTick: any[][]\n  ) => {\n    let canvasScaleSize;\n    if (location == 'bottom' || location == 'top') {\n      canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n    } else if (location == 'left' || location == 'right') {\n      canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n    }\n    const tickIds = [];\n    const tickUIDs = [];\n    const tickCoordinates = [];\n    let numberSmallTicks = scaleSize;\n\n    if (scaleSize >= 50) {\n      numberSmallTicks = scaleSize / 10;\n    }\n\n    const tickSpacing = canvasScaleSize / numberSmallTicks;\n\n    for (let i = 0; i < numberSmallTicks - 1; i++) {\n      const locationOffset = {\n        bottom: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), 5],\n        ],\n        top: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), -5],\n        ],\n        left: [\n          [0, tickSpacing * (i + 1)],\n          [-5, tickSpacing * (i + 1)],\n        ],\n        right: [\n          [0, tickSpacing * (i + 1)],\n          [5, tickSpacing * (i + 1)],\n        ],\n      };\n      tickIds.push(`${annotationUID}-tick${i}`);\n      tickUIDs.push(`tick${i}`);\n      if ((i + 1) % 5 == 0) {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][0][0],\n            leftTick[1][1] + locationOffset[location][0][1],\n          ],\n        ]);\n      } else {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][1][0],\n            leftTick[1][1] + locationOffset[location][1][1],\n          ],\n        ]);\n      }\n    }\n\n    return { tickIds, tickUIDs, tickCoordinates };\n  };\n\n  computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n    let worldCoordinates;\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const midpointLocation = {\n      bottom: [pointSet[1], pointSet[2]],\n      top: [pointSet[0], pointSet[3]],\n      right: [pointSet[2], pointSet[3]],\n      left: [pointSet[0], pointSet[1]],\n    };\n\n    const midpoint = vec3\n      .add(\n        vec3.create(),\n        midpointLocation[location][0],\n        midpointLocation[location][0]\n      )\n      .map((i) => i / 2) as Types.Point3;\n\n    const offset =\n      scaleSize /\n      2 /\n      Math.sqrt(\n        Math.pow(topBottomVec[0], 2) +\n          Math.pow(topBottomVec[1], 2) +\n          Math.pow(topBottomVec[2], 2)\n      );\n\n    if (location == 'top' || location == 'bottom') {\n      worldCoordinates = [\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    } else if (location == 'left' || location == 'right') {\n      worldCoordinates = [\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    }\n\n    return worldCoordinates;\n  };\n\n  /**\n   * Computes the centered canvas coordinates for scale\n   * @param canvasSize\n   * @param canvasCoordinates\n   * @param vscaleBounds\n   * @returns scaleCanvasCoordinates\n   */\n  computeCanvasScaleCoordinates = (\n    canvasSize,\n    canvasCoordinates,\n    vscaleBounds,\n    hscaleBounds,\n    location\n  ) => {\n    let scaleCanvasCoordinates;\n    if (location == 'top' || location == 'bottom') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][0] - canvasCoordinates[1][0];\n      scaleCanvasCoordinates = [\n        [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n        [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n      ];\n    } else if (location == 'left' || location == 'right') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][1] - canvasCoordinates[1][1];\n      scaleCanvasCoordinates = [\n        [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n        [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n      ];\n    }\n\n    return scaleCanvasCoordinates;\n  };\n\n  /**\n   * Computes the max bound for scales on the image\n   * @param  {{width: number, height: number}} canvasSize\n   * @param  {number} horizontalReduction\n   * @param  {number} verticalReduction\n   * @returns {Object.<string, { x:number, y:number }>}\n   */\n  computeScaleBounds = (\n    canvasSize,\n    horizontalReduction,\n    verticalReduction,\n    location\n  ) => {\n    const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n    const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n    const locationBounds = {\n      bottom: [-vReduction, -hReduction],\n      top: [vReduction, hReduction],\n      left: [vReduction, hReduction],\n      right: [-vReduction, -hReduction],\n    };\n    const canvasBounds = {\n      bottom: [canvasSize.height, canvasSize.width],\n      top: [0, canvasSize.width],\n      left: [canvasSize.height, 0],\n      right: [canvasSize.height, canvasSize.width],\n    };\n\n    return {\n      height: canvasBounds[location][0] + locationBounds[location][0],\n      width: canvasBounds[location][1] + locationBounds[location][1],\n    };\n  };\n}\n\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Determine the coordinates that will place the textbox to the right of the\n * annotation.\n *\n * @param annotationCanvasPoints - The canvas points of the annotation's handles.\n * @returns - The coordinates for default placement of the textbox.\n */\nexport default function getTextBoxCoordsCanvas(\n  annotationCanvasPoints: Array<Types.Point2>\n): Types.Point2 {\n  const corners = _determineCorners(annotationCanvasPoints);\n  const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n  const textBoxCanvas = <Types.Point2>[corners.right[0], centerY];\n\n  return textBoxCanvas;\n}\n\n/**\n * Determine the handles that have the min/max x and y values.\n *\n * @param canvasPoints - The canvas points of the annotation's handles.\n * @returns - The top, left, bottom, and right handles.\n */\nfunction _determineCorners(canvasPoints: Array<Types.Point2>) {\n  const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n  const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n  const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n  const top = handlesTopToBottom[0];\n  const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n\n  return {\n    top,\n    bottom,\n    right,\n  };\n\n  function _compareX(a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }\n  function _compareY(a, b) {\n    return a[1] < b[1] ? -1 : 1;\n  }\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawLine as drawLineSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BidirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * BidirectionalTool let you draw annotations that measures the length and\n * width at the same time in `mm` unit. It is consisted of two perpendicular lines and\n * a text box. You can use the BidirectionalTool in all planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(BidirectionalTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(BidirectionalTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(BidirectionalTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass BidirectionalTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n  preventHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Bidirectional Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): BidirectionalAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: BidirectionalAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [\n            // long\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            // short\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: BidirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Check long axis\n    let canvasPoint1 = viewport.worldToCanvas(points[0]);\n    let canvasPoint2 = viewport.worldToCanvas(points[1]);\n\n    let line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    let distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    // Check short axis\n    canvasPoint1 = viewport.worldToCanvas(points[2]);\n    canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Handles the toolSelected callback for bidirectional tool\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Executes the callback for when mouse has selected a handle (anchor point) of\n   * the bidirectional tool or when the text box has been selected.\n   *\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param handle - Handle index or selected textBox information\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const data = annotation.data;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    hideElementCursor(element);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles the mouse up action for the bidirectional tool. It can be at the end\n   * of the annotation drawing (MouseUpEventType) or when the user clicks and release\n   * the mouse button instantly which let to the annotation to draw without holding\n   * the mouse button (MouseClickEventType).\n   *\n   * @param evt - mouse up or mouse click event types\n   */\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (this.editData.handleIndex !== undefined) {\n      const { points } = data.handles;\n      const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n      const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n\n      if (secondLineSegmentLength > firstLineSegmentLength) {\n        // Switch points so [0,1] is the long axis and [2,3] is the short axis.\n\n        const longAxis = [[...points[2]], [...points[3]]];\n\n        const shortAxisPoint0 = [...points[0]];\n        const shortAxisPoint1 = [...points[1]];\n\n        // shortAxis[0->1] should be perpendicular (counter-clockwise) to longAxis[0->1]\n        const longAxisVector = vec2.create();\n\n        vec2.set(\n          longAxisVector,\n          longAxis[1][0] - longAxis[0][0],\n          longAxis[1][1] - longAxis[1][0]\n        );\n\n        const counterClockWisePerpendicularToLongAxis = vec2.create();\n\n        vec2.set(\n          counterClockWisePerpendicularToLongAxis,\n          -longAxisVector[1],\n          longAxisVector[0]\n        );\n\n        const currentShortAxisVector = vec2.create();\n\n        vec2.set(\n          currentShortAxisVector,\n          shortAxisPoint1[0] - shortAxisPoint0[0],\n          shortAxisPoint1[1] - shortAxisPoint0[0]\n        );\n\n        let shortAxis;\n\n        if (\n          vec2.dot(\n            currentShortAxisVector,\n            counterClockWisePerpendicularToLongAxis\n          ) > 0\n        ) {\n          shortAxis = [shortAxisPoint0, shortAxisPoint1];\n        } else {\n          shortAxis = [shortAxisPoint1, shortAxisPoint0];\n        }\n\n        data.handles.points = [\n          longAxis[0],\n          longAxis[1],\n          shortAxis[0],\n          shortAxis[1],\n        ];\n      }\n    }\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * @param evt - mouse move event type or mouse drag\n   */\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    const worldPos = currentPoints.world;\n\n    // Update first move handle\n    data.handles.points[handleIndex] = [...worldPos];\n\n    const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n\n    const canvasCoords = {\n      longLineSegment: {\n        start: {\n          x: canvasCoordPoints[0][0],\n          y: canvasCoordPoints[0][1],\n        },\n        end: {\n          x: canvasCoordPoints[1][0],\n          y: canvasCoordPoints[1][1],\n        },\n      },\n      shortLineSegment: {\n        start: {\n          x: canvasCoordPoints[2][0],\n          y: canvasCoordPoints[2][1],\n        },\n        end: {\n          x: canvasCoordPoints[3][0],\n          y: canvasCoordPoints[3][1],\n        },\n      },\n    };\n\n    // ~~ calculate worldPos of our short axis handles\n    // short axis is perpendicular to long axis, and we set its length to be 2/3 of long axis\n    // (meaning each)\n    const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n\n    const shortAxisDistFromCenter = dist / 3;\n    // Calculate long line's incline\n    const dx =\n      canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n    const dy =\n      canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const vectorX = dx / length;\n    const vectorY = dy / length;\n    // middle point between long line segment's points\n    const xMid =\n      (canvasCoords.longLineSegment.start.x +\n        canvasCoords.longLineSegment.end.x) /\n      2;\n    const yMid =\n      (canvasCoords.longLineSegment.start.y +\n        canvasCoords.longLineSegment.end.y) /\n      2;\n    // short points 1/3 distance from center of long points\n    const startX = xMid + shortAxisDistFromCenter * vectorY;\n    const startY = yMid - shortAxisDistFromCenter * vectorX;\n    const endX = xMid - shortAxisDistFromCenter * vectorY;\n    const endY = yMid + shortAxisDistFromCenter * vectorX;\n\n    // Update perpendicular line segment's points\n    data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n    data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData.hasMoved = true;\n  };\n\n  /**\n   * Mouse drag to edit annotation callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragModifyHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  /**\n   * Mouse dragging a handle callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { annotation, handleIndex: movingHandleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle\n    const worldPos = currentPoints.world;\n    const canvasCoordHandlesCurrent = [\n      viewport.worldToCanvas(data.handles.points[0]),\n      viewport.worldToCanvas(data.handles.points[1]),\n      viewport.worldToCanvas(data.handles.points[2]),\n      viewport.worldToCanvas(data.handles.points[3]),\n    ];\n\n    const firstLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[0][0],\n        y: canvasCoordHandlesCurrent[0][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[1][0],\n        y: canvasCoordHandlesCurrent[1][1],\n      },\n    };\n    const secondLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[2][0],\n        y: canvasCoordHandlesCurrent[2][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[3][0],\n        y: canvasCoordHandlesCurrent[3][1],\n      },\n    };\n\n    // Handle we've selected's proposed point\n    const proposedPoint = <Types.Point3>[...worldPos];\n    const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n\n    if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n      const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n\n      const fixedHandleCanvasCoord =\n        canvasCoordHandlesCurrent[fixedHandleIndex];\n\n      const fixedHandleToProposedCoordVec = vec2.set(\n        vec2.create(),\n        proposedCanvasCoord[0] - fixedHandleCanvasCoord[0],\n        proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]\n      );\n\n      const fixedHandleToOldCoordVec = vec2.set(\n        vec2.create(),\n        canvasCoordHandlesCurrent[movingHandleIndex][0] -\n          fixedHandleCanvasCoord[0],\n        canvasCoordHandlesCurrent[movingHandleIndex][1] -\n          fixedHandleCanvasCoord[1]\n      );\n\n      // normalize vector\n      vec2.normalize(\n        fixedHandleToProposedCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n      vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n\n      // Check whether this\n      const proposedFirstLineSegment = {\n        start: {\n          x: fixedHandleCanvasCoord[0],\n          y: fixedHandleCanvasCoord[1],\n        },\n        end: {\n          x: proposedCanvasCoord[0],\n          y: proposedCanvasCoord[1],\n        },\n      };\n\n      // Note: this is the case when we are modifying the long axis line segment\n      // and we make it shorter and shorter until its second half size becomes zero\n      // which basically means that any more modification would make the long axis\n      // second half disappear. In this case, we just bail out and do not update\n      // since we don't want to disrupt the bidirectional shape.\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          proposedFirstLineSegment,\n          secondLineSegment\n        )\n      ) {\n        return;\n      }\n\n      const centerOfRotation = fixedHandleCanvasCoord;\n\n      const angle = this._getSignedAngle(\n        fixedHandleToOldCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n\n      // rotate handles around the center of rotation, first translate to origin,\n      // then rotate, then translate back\n      let firstPointX = canvasCoordHandlesCurrent[2][0];\n      let firstPointY = canvasCoordHandlesCurrent[2][1];\n\n      let secondPointX = canvasCoordHandlesCurrent[3][0];\n      let secondPointY = canvasCoordHandlesCurrent[3][1];\n\n      // translate to origin\n      firstPointX -= centerOfRotation[0];\n      firstPointY -= centerOfRotation[1];\n\n      secondPointX -= centerOfRotation[0];\n      secondPointY -= centerOfRotation[1];\n\n      // rotate\n      const rotatedFirstPoint =\n        firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n      const rotatedFirstPointY =\n        firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n\n      const rotatedSecondPoint =\n        secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n      const rotatedSecondPointY =\n        secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n\n      // translate back\n      firstPointX = rotatedFirstPoint + centerOfRotation[0];\n      firstPointY = rotatedFirstPointY + centerOfRotation[1];\n\n      secondPointX = rotatedSecondPoint + centerOfRotation[0];\n      secondPointY = rotatedSecondPointY + centerOfRotation[1];\n\n      // update handles\n      const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n      const newSecondPoint = viewport.canvasToWorld([\n        secondPointX,\n        secondPointY,\n      ]);\n\n      // the fixed handle is the one that is not being moved so we\n      // don't need to update it\n      data.handles.points[movingHandleIndex] = proposedPoint;\n      data.handles.points[2] = newFirstPoint;\n      data.handles.points[3] = newSecondPoint;\n    } else {\n      // Translation manipulator\n      const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n\n      const canvasCoordsCurrent = {\n        longLineSegment: {\n          start: firstLineSegment.start,\n          end: firstLineSegment.end,\n        },\n        shortLineSegment: {\n          start: secondLineSegment.start,\n          end: secondLineSegment.end,\n        },\n      };\n\n      const longLineSegmentVec = vec2.subtract(\n        vec2.create(),\n        [\n          canvasCoordsCurrent.longLineSegment.end.x,\n          canvasCoordsCurrent.longLineSegment.end.y,\n        ],\n        [\n          canvasCoordsCurrent.longLineSegment.start.x,\n          canvasCoordsCurrent.longLineSegment.start.y,\n        ]\n      );\n\n      const longLineSegmentVecNormalized = vec2.normalize(\n        vec2.create(),\n        longLineSegmentVec\n      );\n\n      const proposedToCurrentVec = vec2.subtract(\n        vec2.create(),\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [\n          canvasCoordHandlesCurrent[movingHandleIndex][0],\n          canvasCoordHandlesCurrent[movingHandleIndex][1],\n        ]\n      );\n\n      const movementLength = vec2.length(proposedToCurrentVec);\n\n      const angle = this._getSignedAngle(\n        longLineSegmentVecNormalized,\n        proposedToCurrentVec\n      );\n\n      const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n\n      const newTranslatedPoint = vec2.scaleAndAdd(\n        vec2.create(),\n        [\n          canvasCoordHandlesCurrent[translateHandleIndex][0],\n          canvasCoordHandlesCurrent[translateHandleIndex][1],\n        ],\n        longLineSegmentVecNormalized,\n        movementAlongLineSegmentLength\n      );\n\n      // don't update if it passes through the other line segment\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          {\n            start: {\n              x: proposedCanvasCoord[0],\n              y: proposedCanvasCoord[1],\n            },\n            end: {\n              x: newTranslatedPoint[0],\n              y: newTranslatedPoint[1],\n            },\n          },\n          {\n            start: {\n              x: canvasCoordsCurrent.longLineSegment.start.x,\n              y: canvasCoordsCurrent.longLineSegment.start.y,\n            },\n            end: {\n              x: canvasCoordsCurrent.longLineSegment.end.x,\n              y: canvasCoordsCurrent.longLineSegment.end.y,\n            },\n          }\n        )\n      ) {\n        return;\n      }\n\n      const intersectionPoint = lineSegment.intersectLine(\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [newTranslatedPoint[0], newTranslatedPoint[1]],\n        [firstLineSegment.start.x, firstLineSegment.start.y],\n        [firstLineSegment.end.x, firstLineSegment.end.y]\n      );\n\n      // don't update if it doesn't intersect\n      if (!intersectionPoint) {\n        return;\n      }\n\n      data.handles.points[translateHandleIndex] = viewport.canvasToWorld(\n        newTranslatedPoint as Types.Point2\n      );\n      data.handles.points[movingHandleIndex] = proposedPoint;\n    }\n  };\n\n  /**\n   * Cancels an ongoing drawing of a bidirectional annotation\n   * @param element - HTML Element\n   */\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the bidirectional annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = true;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as BidirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          width: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId1 = `${annotationUID}-line-1`;\n      const dataId2 = `${annotationUID}-line-2`;\n\n      const lineUID = '0';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId1\n      );\n\n      const secondLineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        secondLineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId2\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _movingLongAxisWouldPutItThroughShortAxis = (\n    firstLineSegment,\n    secondLineSegment\n  ) => {\n    const vectorInSecondLineDirection = vec2.create();\n\n    vec2.set(\n      vectorInSecondLineDirection,\n      secondLineSegment.end.x - secondLineSegment.start.x,\n      secondLineSegment.end.y - secondLineSegment.start.y\n    );\n\n    vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n\n    const extendedSecondLineSegment = {\n      start: {\n        x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n      },\n      end: {\n        x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n      },\n    };\n\n    // Add some buffer in the secondLineSegment when finding the proposedIntersectionPoint\n    // Of points to stop us getting stack when rotating quickly.\n\n    const proposedIntersectionPoint = lineSegment.intersectLine(\n      [extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y],\n      [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y],\n      [firstLineSegment.start.x, firstLineSegment.start.y],\n      [firstLineSegment.end.x, firstLineSegment.end.y]\n    );\n\n    const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n\n    return wouldPutThroughShortAxis;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n    const worldPos4 = data.handles.points[3];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n      const dist1 = this._calculateLength(worldPos1, worldPos2) / scale;\n      const dist2 = this._calculateLength(worldPos3, worldPos4) / scale;\n      const length = dist1 > dist2 ? dist1 : dist2;\n      const width = dist1 > dist2 ? dist2 : dist1;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const index3 = transformWorldToIndex(imageData, worldPos3);\n      const index4 = transformWorldToIndex(imageData, worldPos4);\n\n      this._isInsideVolume(index1, index2, index3, index4, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      cachedStats[targetId] = {\n        length,\n        width,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, index3, index4, dimensions): boolean => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions) &&\n      csUtils.indexWithinDimensions(index3, dimensions) &&\n      csUtils.indexWithinDimensions(index4, dimensions)\n    );\n  };\n\n  _getSignedAngle = (vector1, vector2) => {\n    return Math.atan2(\n      vector1[0] * vector2[1] - vector1[1] * vector2[0],\n      vector1[0] * vector2[0] + vector1[1] * vector2[1]\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const { cachedStats } = data;\n  const { length, width, unit } = cachedStats[targetId];\n\n  if (length === undefined) {\n    return;\n  }\n\n  // spaceBetweenSlices & pixelSpacing &\n  // magnitude in each direction? Otherwise, this is \"px\"?\n  const textLines = [\n    `L: ${roundNumber(length)} ${unit}`,\n    `W: ${roundNumber(width)} ${unit}`,\n  ];\n\n  return textLines;\n}\n\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { LengthAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * LengthTool let you draw annotations that measures the length of two drawing\n * points on a slice. You can use the LengthTool in all imaging planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(LengthTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(LengthTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(LengthTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n\n */\n\nclass LengthTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LengthAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LengthAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LengthAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      // Todo: move these into annotationTool class\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      // Need to update to sync with annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    // TODO clean up, this doesn't need a length per volume, it has no stats derived from volumes.\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const handles = [index1, index2];\n      const { scale, units } = getCalibratedLengthUnitsAndScale(image, handles);\n\n      const length = this._calculateLength(worldPos1, worldPos2) / scale;\n\n      this._isInsideVolume(index1, index2, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      // TODO -> Do we instead want to clip to the bounds of the volume and only include that portion?\n      // Seems like a lot of work for an unrealistic case. At the moment bail out of stat calculation if either\n      // corner is off the canvas.\n\n      // todo: add insideVolume calculation, for removing tool if outside\n      cachedStats[targetId] = {\n        length,\n        unit: units,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { length, unit } = cachedVolumeStats;\n\n  // Can be null on load\n  if (length === undefined || length === null || isNaN(length)) {\n    return;\n  }\n\n  const textLines = [`${roundNumber(length)} ${unit}`];\n\n  return textLines;\n}\n\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import { metaData } from '@cornerstonejs/core';\n\ntype ModalityUnitOptions = {\n  isPreScaled: boolean;\n  isSuvScaled: boolean;\n};\n\nfunction getModalityUnit(\n  modality: string,\n  imageId: string,\n  options: ModalityUnitOptions\n): string {\n  if (modality === 'CT') {\n    return 'HU';\n  } else if (modality === 'PT') {\n    return _handlePTModality(imageId, options);\n  } else {\n    return '';\n  }\n}\n\nfunction _handlePTModality(imageId: string, options: ModalityUnitOptions) {\n  if (!options.isPreScaled) {\n    return 'raw';\n  }\n\n  if (options.isSuvScaled) {\n    return 'SUV';\n  }\n\n  const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n\n  // it might be possible that the referenceImageId is not the one\n  // that is being displayed. So we need to get the modality from imageId again\n  if (generalSeriesModule?.modality === 'PT') {\n    const petSeriesModule = metaData.get('petSeriesModule', imageId);\n    return petSeriesModule?.units || 'unitless';\n  }\n}\n\nexport { getModalityUnit, ModalityUnitOptions };\n","import {\n  cache,\n  StackViewport,\n  Types,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nfunction isViewportPreScaled(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  targetId: string\n): boolean {\n  if (viewport instanceof BaseVolumeViewport) {\n    const targetIdTokens = targetId.split('volumeId:');\n    const volumeId =\n      targetIdTokens.length > 1 ? targetIdTokens[1] : targetIdTokens[0];\n    const volume = cache.getVolume(volumeId);\n    return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n  } else if (viewport instanceof StackViewport) {\n    const { preScale } = viewport.getImageData() || {};\n    return !!preScale?.scaled;\n  } else {\n    return false;\n  }\n}\n\nexport { isViewportPreScaled };\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport roundNumber from '../../utilities/roundNumber';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * ProbeTool let you get the underlying voxel value by putting a probe in that\n * location. It will give index of the location and value of the voxel.\n * You can use ProbeTool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Probe tool's text box are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * To use the ProbeTool, you first need to add it to cornerstoneTools, then create\n * a toolGroup and add the ProbeTool to it. Finally, setToolActive on the toolGroup\n *\n * ```js\n * cornerstoneTools.addTool(ProbeTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(ProbeTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(ProbeTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n *\n */\n\nclass ProbeTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  // Not necessary for this tool but needs to be defined since it's an abstract\n  // method from the parent class.\n  isPointNearTool(): boolean {\n    return false;\n  }\n\n  toolSelectedCallback() {}\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Probe Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It checks if the mouse click is near ProveTool, it overwrites the baseAnnotationTool\n   * getHandleNearImagePoint method.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: ProbeAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const point = data.handles.points[0];\n    const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n    const near =\n      vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n    if (near === true) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ProbeAnnotation\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      //handle, // This would be useful for other tools with more than one handle\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { viewportId } = enabledElement;\n    this.eventDispatchDetail = {\n      viewportId,\n      renderingEngineId: renderingEngine.id,\n    };\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points[0] = [...worldPos];\n    annotation.invalidated = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the probe annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ProbeAnnotation;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const point = data.handles.points[0];\n      const canvasCoordinates = viewport.worldToCanvas(point);\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].value == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          index: null,\n          value: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        [canvasCoordinates],\n        { color }\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (textLines) {\n        const textCanvasCoordinates = [\n          canvasCoordinates[0] + 6,\n          canvasCoordinates[1] - 6,\n        ];\n\n        const textUID = '0';\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          textUID,\n          textLines,\n          [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n          options\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const worldPos = data.handles.points[0];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const modality = metadata.Modality;\n      const index = transformWorldToIndex(imageData, worldPos);\n\n      index[0] = Math.round(index[0]);\n      index[1] = Math.round(index[1]);\n      index[2] = Math.round(index[2]);\n\n      const samplesPerPixel =\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n\n      if (csUtils.indexWithinDimensions(index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const yMultiple = dimensions[0] * samplesPerPixel;\n        const zMultiple = dimensions[0] * dimensions[1] * samplesPerPixel;\n\n        const baseIndex =\n          index[2] * zMultiple +\n          index[1] * yMultiple +\n          index[0] * samplesPerPixel;\n        let value =\n          samplesPerPixel > 2\n            ? [\n                scalarData[baseIndex],\n                scalarData[baseIndex + 1],\n                scalarData[baseIndex + 2],\n              ]\n            : scalarData[baseIndex];\n\n        // Index[2] for stackViewport is always 0, but for visualization\n        // we reset it to be imageId index\n        if (targetId.startsWith('imageId:')) {\n          const imageId = targetId.split('imageId:')[1];\n          const imageURI = csUtils.imageIdToURI(imageId);\n          const viewports = csUtils.getViewportsWithImageURI(\n            imageURI,\n            renderingEngineId\n          );\n\n          const viewport = viewports[0];\n\n          index[2] = viewport.getCurrentImageIdIndex();\n        }\n\n        let modalityUnit;\n\n        if (modality === 'US') {\n          const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n            index,\n          ]);\n\n          const hasEnhancedRegionValues = calibratedResults.values.every(\n            (value) => value !== null\n          );\n\n          value = hasEnhancedRegionValues ? calibratedResults.values : value;\n          modalityUnit = hasEnhancedRegionValues\n            ? calibratedResults.units\n            : 'raw';\n        } else {\n          modalityUnit = getModalityUnit(\n            modality,\n            annotation.metadata.referencedImageId,\n            modalityUnitOptions\n          );\n        }\n\n        cachedStats[targetId] = {\n          index,\n          value,\n          Modality: modality,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          index,\n          Modality: modality,\n        };\n      }\n\n      annotation.invalidated = false;\n\n      // Dispatching annotation modified\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  if (value instanceof Array && modalityUnit instanceof Array) {\n    for (let i = 0; i < value.length; i++) {\n      textLines.push(`${roundNumber(value[i])} ${modalityUnit[i]}`);\n    }\n  } else {\n    textLines.push(`${roundNumber(value)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  PublicToolProps,\n  SVGDrawingHelper,\n  ToolProps,\n} from '../../types';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nclass DragProbeTool extends ProbeTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  postMouseDownCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation: ProbeAnnotation = {\n      invalidated: true,\n      highlighted: true,\n      isVisible: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  postTouchStartCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    return this.postMouseDownCallback(evt);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const annotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      [this.editData.annotation]\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const annotation = this.editData.annotation;\n    const annotationUID = annotation.annotationUID;\n    const data = annotation.data;\n    const point = data.handles.points[0];\n    const canvasCoordinates = viewport.worldToCanvas(point);\n\n    styleSpecifier.annotationUID = annotationUID;\n\n    const color = this.getStyle('color', styleSpecifier, annotation);\n\n    const modalityUnitOptions = {\n      isPreScaled: isViewportPreScaled(viewport, targetId),\n\n      isSuvScaled: this.isSuvScaled(\n        viewport,\n        targetId,\n        annotation.metadata.referencedImageId\n      ),\n    };\n\n    if (\n      !data.cachedStats[targetId] ||\n      data.cachedStats[targetId].value == null\n    ) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        index: null,\n        value: null,\n      };\n\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    } else if (annotation.invalidated) {\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    }\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const handleGroupUID = '0';\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      [canvasCoordinates],\n      { color }\n    );\n\n    renderStatus = true;\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (textLines) {\n      const textCanvasCoordinates = [\n        canvasCoordinates[0] + 6,\n        canvasCoordinates[1] - 6,\n      ];\n\n      const textUID = '0';\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textUID,\n        textLines,\n        [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n    }\n\n    return renderStatus;\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  ToolProps,\n  PublicToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * RectangleROIAnnotation let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of a Rectangular region of interest.\n * You can use RectangleROIAnnotation in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. RectangleROI tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(RectangleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(RectangleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(RectangleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass RectangleROITool extends AnnotationTool {\n  static toolName;\n\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a RectangleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): RectangleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: RectangleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]];\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point as Types.Point2\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - Move the text boxes world position\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-rect`;\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param viewPlaneNormal - The normal vector of the camera.\n   * @param viewUp - The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const scale = getCalibratedScale(image);\n\n        const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          () => true,\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          stdDev: stats[2]?.value,\n          max: stats[0]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\n/**\n * _getTextLines - Returns the Area, mean and std deviation of the area of the\n * target volume enclosed by the rectangle.\n *\n * @param data - The annotation tool-specific data.\n * @param targetId - The volumeId of the volume to display the stats for.\n */\nfunction defaultGetTextLines(data, targetId: string): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n\n  if (mean === undefined) {\n    return;\n  }\n\n  const textLines: string[] = [];\n\n  textLines.push(`Area: ${roundNumber(area)} ${areaUnit}`);\n  textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined by\n * a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates of the rectangle\n * defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param worldPos1 - The first world position.\n * @param worldPos2 - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromTwoPoints(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  worldPos1: Types.Point3,\n  worldPos2: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...worldPos1);\n  const pos2 = vec3.fromValues(...worldPos2);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawEllipseByCoordinates as drawEllipseSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  pointInEllipse,\n  getCanvasEllipseCorners,\n} from '../../utilities/math/ellipse';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { EllipticalROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * EllipticalROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use EllipticalROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Elliptical tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(EllipticalROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(EllipticalROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(EllipticalROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(EllipticalROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass EllipticalROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    centerWorld?: Array<number>;\n    canvasWidth?: number;\n    canvasHeight?: number;\n    originalHandleCanvas?: Array<number>;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the ellipse.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a EllipticalROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): EllipticalROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n          ] as [Types.Point3, Types.Point3, Types.Point3, Types.Point3],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        initialRotation: viewport.getRotation(),\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      centerWorld: worldPos,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: EllipticalROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n    const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n\n    const [canvasPoint1, canvasPoint2] = canvasCorners;\n\n    const minorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n    };\n\n    const majorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n    };\n\n    const pointInMinorEllipse = this._pointInEllipseCanvas(\n      minorEllipse,\n      canvasCoords\n    );\n    const pointInMajorEllipse = this._pointInEllipseCanvas(\n      majorEllipse,\n      canvasCoords\n    );\n\n    if (pointInMajorEllipse && !pointInMinorEllipse) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    let centerCanvas;\n    let centerWorld;\n    let canvasWidth;\n    let canvasHeight;\n    let originalHandleCanvas;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n      const { viewport } = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = viewport;\n\n      handleIndex = points.findIndex((p) => p === handle);\n\n      const pointsCanvas = points.map(worldToCanvas);\n\n      originalHandleCanvas = pointsCanvas[handleIndex];\n\n      canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n      canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n\n      centerCanvas = [\n        (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n        (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n      ];\n\n      centerWorld = canvasToWorld(centerCanvas);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      canvasWidth,\n      canvasHeight,\n      centerWorld,\n      originalHandleCanvas,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Elliptical ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the ellipse,\n    // and they are by definition not in the ellipse on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerWorld } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n\n    // Todo: why bottom is -dY, it should be +dY\n    const bottomCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] - dY];\n    const topCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] + dY];\n    const leftCanvas = <Types.Point2>[centerCanvas[0] - dX, centerCanvas[1]];\n    const rightCanvas = <Types.Point2>[centerCanvas[0] + dX, centerCanvas[1]];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { viewport } = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = viewport;\n\n    const {\n      annotation,\n      canvasWidth,\n      canvasHeight,\n      handleIndex,\n      centerWorld,\n      originalHandleCanvas,\n    } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0 || handleIndex === 1) {\n      // Dragging top or bottom point\n      const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - dYCanvas,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n\n      const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n      const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n    } else {\n      // Dragging left or right point\n      const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - dXCanvas,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + dXCanvas,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n\n      const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n      const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - newHalfCanvasHeight,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + newHalfCanvasHeight,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the ellipticalROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as EllipticalROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2, Types.Point2, Types.Point2];\n\n      const rotation = Math.abs(\n        viewport.getRotation() - (data.initialRotation || 0)\n      );\n      const canvasCorners = <Array<Types.Point2>>(\n        getCanvasEllipseCorners(canvasCoordinates) // bottom, top, left, right, keep as is\n      );\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-ellipse`;\n      const ellipseUID = '0';\n      drawEllipseSvg(\n        svgDrawingHelper,\n        annotationUID,\n        ellipseUID,\n        canvasCoordinates,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        const minRadius = Math.min(\n          Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, // horizontal radius\n          Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2 // vertical radius\n        );\n        if (minRadius > 3 * centerPointRadius) {\n          const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${ellipseUID}-center`,\n            centerPoint,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasEllipseCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const area =\n          Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n          scale /\n          scale;\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          max: stats[0]?.value,\n          stdDev: stats[2]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  /**\n   * This is a temporary function to use the old ellipse's canvas-based\n   * calculation for isPointNearTool, we should move the the world-based\n   * calculation to the tool's isPointNearTool function.\n   *\n   * @param ellipse - The ellipse object\n   * @param location - The location to check\n   * @returns True if the point is inside the ellipse\n   */\n  _pointInEllipseCanvas(ellipse, location: Types.Point2): boolean {\n    const xRadius = ellipse.width / 2;\n    const yRadius = ellipse.height / 2;\n\n    if (xRadius <= 0.0 || yRadius <= 0.0) {\n      return false;\n    }\n\n    const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n    const normalized = [location[0] - center[0], location[1] - center[1]];\n\n    const inEllipse =\n      (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n        (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n      1.0;\n\n    return inEllipse;\n  }\n\n  /**\n   * It takes the canvas coordinates of the ellipse corners and returns the center point of it\n   *\n   * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n   * @returns center point.\n   */\n  _getCanvasEllipseCenter(ellipseCanvasPoints: Types.Point2[]): Types.Point2 {\n    const [bottom, top, left, right] = ellipseCanvasPoints;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    return [\n      (topLeft[0] + bottomRight[0]) / 2,\n      (topLeft[1] + bottomRight[1]) / 2,\n    ] as Types.Point2;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n    cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * CircleROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use CircleROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Circle tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(CircleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(CircleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(CircleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(CircleROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass CircleROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the circle.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CircleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CircleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const radius = getCanvasCircleRadius(canvasCoordinates);\n    const radiusPoint = getCanvasCircleRadius([\n      canvasCoordinates[0],\n      canvasCoords,\n    ]);\n\n    if (Math.abs(radiusPoint - radius) < proximity / 2) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points = [\n      data.handles.points[0], // center stays\n      canvasToWorld(currentCanvasPoints), // end point moves (changing radius)\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n\n    const { annotation, handleIndex } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0) {\n      // Dragging center, move the circle ROI\n      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n\n      const canvasCenter = currentCanvasPoints as Types.Point2;\n      const canvasEnd = <Types.Point2>[\n        canvasCoordinates[1][0] + dXCanvas,\n        canvasCoordinates[1][1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasCenter);\n      points[1] = canvasToWorld(canvasEnd);\n    } else {\n      // Dragging end point, center stays\n      points[1] = canvasToWorld(currentCanvasPoints);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n          radius: null,\n          radiusUnit: null,\n          perimeter: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-circle`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasCircleCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(\n          Math.PI *\n            (worldWidth / scale / 2) *\n            (worldHeight / aspect / scale / 2)\n        );\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS) =>\n            pointInEllipse(ellipseObj, pointLPS, {\n              fast: true,\n            }),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          max: stats[0]?.value,\n          stdDev: stats[2]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          radius: worldWidth / 2 / scale,\n          radiusUnit: getCalibratedLengthUnits(null, image),\n          perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const {\n    radius,\n    radiusUnit,\n    area,\n    mean,\n    stdDev,\n    max,\n    isEmptyArea,\n    Modality,\n    areaUnit,\n    modalityUnit,\n  } = cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (radius) {\n    const radiusLine = isEmptyArea\n      ? `Radius: Oblique not supported`\n      : `Radius: ${roundNumber(radius)} ${radiusUnit}`;\n    textLines.push(radiusLine);\n  }\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { Types } from '@cornerstonejs/core';\nimport * as math from '../../../utilities/math';\nimport type {\n  ISpline,\n  SplineProps,\n  SplineLineSegment,\n  ClosestControlPoint,\n  ClosestSplinePoint,\n  ClosestPoint,\n  ControlPointInfo,\n  SplineCurveSegment,\n} from '../../../types';\n\ntype CurveSegmentDistanceSquared = {\n  curveSegmentIndex: number;\n  curveSegment: SplineCurveSegment;\n  distanceSquared: number;\n};\n\n/**\n * Spline curve representation\n *\n * You can find more about splines in this video\n * https://www.youtube.com/watch?v=jvPPXbo87ds&t=11m20s\n */\nabstract class Spline implements ISpline {\n  private _controlPoints: Types.Point2[] = [];\n  private _resolution: number;\n  private _closed: boolean;\n  private _invalidated = false;\n  private _curveSegments: SplineCurveSegment[];\n  private _aabb: Types.AABB2;\n  private _length = 0;\n\n  constructor(props?: SplineProps) {\n    this._controlPoints = [];\n    this._resolution = props?.resolution ?? 20;\n    this._closed = props?.closed ?? false;\n    this._invalidated = true;\n  }\n\n  /**\n   * Return the control points array\n   *\n   * Any external access should be done through getControlPoints because it\n   * clones the points to make sure the data will not get changed by the caller\n   */\n  protected get controlPoints(): Types.Point2[] {\n    return this._controlPoints;\n  }\n\n  /** Number of control points */\n  public get numControlPoints(): number {\n    return this._controlPoints.length;\n  }\n\n  /** Resolution of the spline curve (greater than or equal to 0) */\n  public get resolution(): number {\n    return this._resolution;\n  }\n\n  /** Set the resolution of the spline curve */\n  public set resolution(resolution: number) {\n    if (this._resolution === resolution) {\n      return;\n    }\n\n    this._resolution = resolution;\n    this.invalidated = true;\n  }\n\n  /** Flag that is set to true when the curve is already closed */\n  public get closed(): boolean {\n    return this._closed;\n  }\n\n  /** Set the curve as closed which connects the last to the first point */\n  public set closed(closed: boolean) {\n    if (this._closed === closed) {\n      return;\n    }\n\n    this._closed = closed;\n    this.invalidated = true;\n  }\n\n  /** Axis-aligned bounding box (minX, minY, maxX, maxY) */\n  public get aabb(): Types.AABB2 {\n    this._update();\n    return this._aabb;\n  }\n\n  /** Length of the spline curve in pixels */\n  public get length(): number {\n    this._update();\n    return this._length;\n  }\n\n  /**\n   * Flag that is set to true when the spline needs to be updated. The update\n   * runs automaticaly when needed (eg: getPolylinePoints).\n   */\n  public get invalidated(): boolean {\n    return this._invalidated;\n  }\n\n  /**\n   * Sets the spline as invalid when curve segments need to be recalculated\n   * or as valid after recomputing the curves\n   */\n  protected set invalidated(invalidated: boolean) {\n    this._invalidated = invalidated;\n  }\n\n  /**\n   * Bézier curves have tangent points connected to control points\n   * @returns True if the spline has tangent point or false otherwise\n   */\n  public hasTangentPoints() {\n    return false;\n  }\n\n  /**\n   * Add a control point to the end of the array\n   * @param point - Control point (2D)\n   */\n  public addControlPoint(point: Types.Point2): void {\n    this._controlPoints.push([point[0], point[1]]);\n    this.invalidated = true;\n  }\n\n  /**\n   * Add a list of control poits to the end of the array\n   * @param points - Control points to be added\n   */\n  public addControlPoints(points: Types.Point2[]): void {\n    points.forEach((point) => this.addControlPoint(point));\n  }\n\n  /**\n   * Add a control point specifying its `u` value in Parameter Space which is a number from 0 to N\n   * where N is the number of curve segments. The integer part is the curve segment index and the\n   * decimal part is the `t` value on that curve segment.\n   * @param u - `u` value in Parameter Space\n   */\n  public addControlPointAtU(u: number): ControlPointInfo {\n    const lineSegment = this._getLineSegmentAt(u);\n    const { start: startPoint, end: endPoint } = lineSegment.points;\n    const curveSegmentIndex = Math.floor(u);\n    const curveSegment = this._curveSegments[curveSegmentIndex];\n    const t = u - Math.floor(curveSegmentIndex);\n    const controlPointPos: Types.Point2 = [\n      startPoint[0] + t * (endPoint[0] - startPoint[0]),\n      startPoint[1] + t * (endPoint[1] - startPoint[1]),\n    ];\n\n    const insertIndex =\n      this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n\n    this._controlPoints.splice(insertIndex, 0, controlPointPos);\n    this.invalidated = true;\n\n    return {\n      index: insertIndex,\n      point: controlPointPos,\n    };\n  }\n\n  /**\n   * Delete a control point given its index\n   * @param index - Control point index to be removed\n   * @returns True if the control point is removed or false otherwise\n   */\n  public deleteControlPointByIndex(index: number): boolean {\n    const minControlPoints = this._closed ? 3 : 1;\n    const canDelete =\n      index >= 0 &&\n      index < this._controlPoints.length &&\n      this._controlPoints.length > minControlPoints;\n\n    if (!canDelete) {\n      return false;\n    }\n\n    this._controlPoints.splice(index, 1);\n    this.invalidated = true;\n\n    return true;\n  }\n\n  /**\n   * Remove all control points\n   */\n  public clearControlPoints(): void {\n    this._controlPoints = [];\n    this.invalidated = true;\n  }\n\n  /**\n   * Replace all control points by some new ones\n   * @param points - Control points to be added to the array\n   */\n  public setControlPoints(points: Types.Point2[]): void {\n    this.clearControlPoints();\n    this.addControlPoints(points);\n  }\n\n  /**\n   * Update the coordinate of a control point given its index\n   * @param index - Control point index\n   * @param newControlPoint - New control point\n   */\n  public updateControlPoint(\n    index: number,\n    newControlPoint: Types.Point2\n  ): void {\n    if (index < 0 || index >= this._controlPoints.length) {\n      throw new Error('Index out of bounds');\n    }\n\n    this._controlPoints[index] = [...newControlPoint];\n    this.invalidated = true;\n  }\n\n  /**\n   * Get a list with all control points. The control points are cloned to prevent\n   * any caller from changing them resulting in unexpected behaviors\n   * @returns - List of all control points\n   */\n  public getControlPoints(): Types.Point2[] {\n    return this._controlPoints.map((controlPoint) => [\n      controlPoint[0],\n      controlPoint[1],\n    ]);\n  }\n\n  /**\n   * Finds the closest control point given a 2D point\n   * @param point - Reference point\n   * @returns Closest control point\n   */\n  public getClosestControlPoint(point: Types.Point2): ClosestControlPoint {\n    const controlPoints = this._controlPoints;\n    let minSquaredDist = Infinity;\n    let closestPointIndex = -1;\n\n    for (let i = 0, len = controlPoints.length; i < len; i++) {\n      const controlPoint = controlPoints[i];\n      const dx = point[0] - controlPoint[0];\n      const dy = point[1] - controlPoint[1];\n      const squaredDist = dx * dx + dy * dy;\n\n      if (squaredDist < minSquaredDist) {\n        minSquaredDist = squaredDist;\n        closestPointIndex = i;\n      }\n    }\n\n    return {\n      index: closestPointIndex,\n      point:\n        closestPointIndex === -1\n          ? undefined\n          : [...controlPoints[closestPointIndex]],\n      distance: Math.sqrt(minSquaredDist),\n    };\n  }\n\n  /**\n   * Finds the closest control point given a 2D point and a maximum distance\n   * @param point - Reference 2D point\n   * @param maxDist - Maximum distance\n   * @returns Closest control point that is within the given range or undefined otherwise\n   */\n  public getClosestControlPointWithinDistance(\n    point: Types.Point2,\n    maxDist: number\n  ): ClosestControlPoint {\n    const closestControlPoint = this.getClosestControlPoint(point);\n\n    return closestControlPoint.distance <= maxDist\n      ? closestControlPoint\n      : undefined;\n  }\n\n  /**\n   * Finds the closest point on the spline curve given 2D point\n   * @param point - Reference 2D point\n   * @returns Closest point on the spline curve\n   */\n  public getClosestPoint(point: Types.Point2): ClosestSplinePoint {\n    this._update();\n\n    const curveSegmentsDistInfo =\n      this._getCurveSegmmentsDistanceSquaredInfo(point);\n\n    if (!curveSegmentsDistInfo.length) {\n      return;\n    }\n\n    // Sort the curves by distance because in most cases the closest point may be in the first\n    // curve segment and there is no need to check all next line segments if theirs curve segments'\n    // AABB is not closest compared to the minDist found saving a lot of cpu time.\n    curveSegmentsDistInfo.sort(\n      (csA, csB) => csA.distanceSquared - csB.distanceSquared\n    );\n\n    let closestPoint: Types.Point2;\n    let closestPointCurveSegmentIndex = -1;\n    let minDistSquared = Infinity;\n    let minDistCurveSegment: SplineCurveSegment;\n    let minDistLineSegment: SplineLineSegment;\n\n    for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n      const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n\n      // If the distance to curve segments' AABB is greater than the minDist\n      // it does not need to waste time verifying each line segment\n      if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n        continue;\n      }\n\n      const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n      const { lineSegments } = curveSegment;\n\n      for (let j = 0; j < lineSegments.length; j++) {\n        const lineSegment = lineSegments[j];\n        const { point: lineSegPoint, distanceSquared: lineSegDistSquared } =\n          math.lineSegment.distanceToPointSquaredInfo(\n            lineSegment.points.start,\n            lineSegment.points.end,\n            point\n          );\n\n        if (lineSegDistSquared < minDistSquared) {\n          minDistLineSegment = lineSegment;\n          closestPointCurveSegmentIndex = curveSegmentIndex;\n          minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n          closestPoint = lineSegPoint;\n          minDistSquared = lineSegDistSquared;\n        }\n      }\n    }\n\n    const curveSegmentLengthToPoint =\n      minDistLineSegment.previousLineSegmentsLength +\n      math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n\n    const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n    const u = closestPointCurveSegmentIndex + t;\n\n    return {\n      point: closestPoint,\n      uValue: u,\n      distance: Math.sqrt(minDistSquared),\n    };\n  }\n\n  /**\n   * Finds the closest point on the straight line that connects all control points given a 2D point\n   * @param point - Reference point\n   * @returns Closest point on the straight line that connects all control points\n   */\n  public getClosestPointOnControlPointLines(point: Types.Point2): ClosestPoint {\n    const linePoints = [...this._controlPoints];\n\n    if (this._closed) {\n      linePoints.push(this._controlPoints[0]);\n    }\n\n    if (!linePoints.length) {\n      return;\n    }\n\n    let closestPoint: Types.Point2;\n    let minDistSquared = Infinity;\n    let startPoint = linePoints[0];\n\n    for (let i = 1, len = linePoints.length; i < len; i++) {\n      const endPoint = linePoints[i];\n      const { point: lineSegPoint, distanceSquared: lineSegDistSquared } =\n        math.lineSegment.distanceToPointSquaredInfo(\n          startPoint,\n          endPoint,\n          point\n        );\n\n      if (lineSegDistSquared < minDistSquared) {\n        closestPoint = lineSegPoint;\n        minDistSquared = lineSegDistSquared;\n      }\n\n      startPoint = endPoint;\n    }\n\n    return {\n      point: closestPoint,\n      distance: Math.sqrt(minDistSquared),\n    };\n  }\n\n  /**\n   * Get all points necessary to draw a spline curve\n   * @returns Array with all points necessary to draw a spline curve\n   */\n  public getPolylinePoints(): Types.Point2[] {\n    this._update();\n\n    return this._convertCurveSegmentsToPolyline(this._curveSegments);\n  }\n\n  /**\n   * Get all points necessary to draw the preview of the changes that shall be\n   * made to the spline if a new control point is added to it\n   * @param controlPointPreview - New control point preview\n   * @param closeDistance - Distance to the first control point to consider it a closed spline\n   * @returns Array with all points necessary to draw a spline curve preview\n   */\n  public getPreviewPolylinePoints(\n    controlPointPreview: Types.Point2,\n    closeDistance: number\n  ): Types.Point2[] {\n    if (this._closed) {\n      return [];\n    }\n\n    this._update();\n\n    // Check if the new control point would be close to the first one\n    // in order to create a preview of a closed spline\n    const closestControlPoint = this.getClosestControlPointWithinDistance(\n      controlPointPreview,\n      closeDistance\n    );\n\n    const closeSpline = closestControlPoint?.index === 0;\n    const previewCurveSegments = this.getPreviewCurveSegments(\n      controlPointPreview,\n      closeSpline\n    );\n\n    return previewCurveSegments?.length\n      ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n      : [];\n  }\n\n  /**\n   * Checks if a point is near to the spline curve\n   * @param point - Reference point\n   * @param maxDist - Maximum allowed distance\n   * @returns True if the point is close to the spline curve or false otherwise\n   */\n  public isPointNearCurve(point: Types.Point2, maxDist: number): boolean {\n    this._update();\n\n    const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n    const maxDistSquared = maxDist * maxDist;\n\n    // Check if the point is close to the spline and doest waste time checking each curve/line\n    for (let i = 0; i < curveSegments.length; i++) {\n      const { lineSegments } = curveSegments[i];\n\n      for (let j = 0; j < lineSegments.length; j++) {\n        const lineSegment = lineSegments[j];\n        const lineDistSquared = math.lineSegment.distanceToPointSquared(\n          lineSegment.points.start,\n          lineSegment.points.end,\n          point\n        );\n\n        if (lineDistSquared <= maxDistSquared) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks if a 2D point is inside the spline curve.\n   *\n   * A point is inside a curve/polygon if the number of intersections between the horizontal\n   * ray emanating from the given point and to the right and the line segments is odd.\n   * https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html\n   *\n   * @param point - 2D Point\n   * @returns True is the point is inside the spline curve or false otherwise\n   */\n  public containsPoint(point: Types.Point2): boolean {\n    this._update();\n\n    const controlPoints = this._controlPoints;\n\n    if (controlPoints.length < 3) {\n      return false;\n    }\n\n    const curveSegments = [...this._curveSegments];\n    const closingCurveSegment =\n      this._getClosingCurveSegmentWithStraightLineSegment();\n\n    if (closingCurveSegment) {\n      curveSegments.push(closingCurveSegment);\n    }\n\n    let numIntersections = 0;\n\n    for (let i = 0; i < curveSegments.length; i++) {\n      const curveSegment = curveSegments[i];\n      const { aabb: curveSegAABB } = curveSegment;\n      const mayIntersectCurveSegment =\n        point[0] <= curveSegAABB.maxX &&\n        point[1] >= curveSegAABB.minY &&\n        point[1] < curveSegAABB.maxY;\n\n      // Skip all line segments if it is not possible to intersect the curve segment\n      if (!mayIntersectCurveSegment) {\n        continue;\n      }\n\n      const { lineSegments } = curveSegment;\n\n      for (let i = 0; i < lineSegments.length; i++) {\n        const lineSegment = lineSegments[i];\n        const { aabb: lineSegmentAABB } = lineSegment;\n        const mayIntersectLineSegment =\n          point[0] <= lineSegmentAABB.maxX &&\n          point[1] >= lineSegmentAABB.minY &&\n          point[1] < lineSegmentAABB.maxY;\n\n        if (mayIntersectLineSegment) {\n          const { start: p1, end: p2 } = lineSegment.points;\n          const isVerticalLine = p1[0] === p2[0];\n          const xIntersection =\n            ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n\n          numIntersections +=\n            isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n        }\n      }\n    }\n\n    return numIntersections % 2 === 1;\n  }\n\n  protected abstract getTransformMatrix(): number[];\n\n  protected abstract getSplineCurves(): SplineCurveSegment[];\n\n  protected abstract getPreviewCurveSegments(\n    controlPointPreview: Types.Point2,\n    closeSpline: boolean\n  ): SplineCurveSegment[];\n\n  private _update() {\n    if (!this._invalidated) {\n      return;\n    }\n\n    const curveSegments = this.getSplineCurves();\n    let length = 0;\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0, len = curveSegments.length; i < len; i++) {\n      const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n\n      minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n      minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n      maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n      maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n      length += curveSegLength;\n    }\n\n    this._curveSegments = curveSegments;\n    this._aabb = { minX, minY, maxX, maxY };\n    this._length = length;\n    this._invalidated = false;\n  }\n\n  private _convertCurveSegmentsToPolyline(\n    curveSegments: SplineCurveSegment[]\n  ): Types.Point2[] {\n    this._update();\n\n    const polylinePoints: Types.Point2[] = [];\n\n    curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n      lineSegments.forEach((lineSegment, lineSegIndex) => {\n        // Add the start point before adding all end points\n        if (curveSegIndex === 0 && lineSegIndex === 0) {\n          polylinePoints.push([...lineSegment.points.start]);\n        }\n\n        // Always add 1 because the first segment stored its start point at the first position\n        polylinePoints.push([...lineSegment.points.end]);\n      });\n    });\n\n    return polylinePoints;\n  }\n\n  /**\n   * Returns all curve segments and theirs respective squared distance to a given point\n   * @param point - Reference point\n   * @returns Curve segments and theirs respective squared distance to a given point\n   */\n  private _getCurveSegmmentsDistanceSquaredInfo(\n    point: Types.Point2\n  ): CurveSegmentDistanceSquared[] {\n    this._update();\n\n    const curveSegmentsDistanceSquared: CurveSegmentDistanceSquared[] = [];\n    const { _curveSegments: curveSegments } = this;\n\n    for (let i = 0; i < curveSegments.length; i++) {\n      const curveSegment = curveSegments[i];\n      const distanceSquared = math.aabb.distanceToPointSquared(\n        curveSegment.aabb,\n        point\n      );\n\n      curveSegmentsDistanceSquared.push({\n        curveSegmentIndex: i,\n        curveSegment,\n        distanceSquared,\n      });\n    }\n\n    return curveSegmentsDistanceSquared;\n  }\n\n  private _getCurveSegmmentsWithinDistance(\n    point: Types.Point2,\n    maxDist: number\n  ): SplineCurveSegment[] {\n    this._update();\n\n    const maxDistSquared = maxDist * maxDist;\n\n    // Does not waste time checking each curve segment if the point is not event\n    // close to the spline's AABB\n    if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n      return [];\n    }\n\n    const curveSegmentsDistance =\n      this._getCurveSegmmentsDistanceSquaredInfo(point);\n    const curveSegmentsWithinRange: SplineCurveSegment[] = [];\n\n    for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n      const { curveSegment, distanceSquared: curveSegmentDistSquared } =\n        curveSegmentsDistance[i];\n\n      if (curveSegmentDistSquared <= maxDistSquared) {\n        curveSegmentsWithinRange.push(curveSegment);\n      }\n    }\n\n    return curveSegmentsWithinRange;\n  }\n\n  private _getLineSegmentAt(u: number): SplineLineSegment {\n    this._update();\n\n    const curveSegmentIndex = Math.floor(u);\n    const t = u - curveSegmentIndex;\n    const curveSegment = this._curveSegments[curveSegmentIndex];\n    const { lineSegments } = curveSegment;\n    const pointLength = curveSegment.length * t;\n\n    for (let i = 0; i < lineSegments.length; i++) {\n      const lineSegment = lineSegments[i];\n      const lengthEnd =\n        lineSegment.previousLineSegmentsLength + lineSegment.length;\n\n      if (\n        pointLength >= lineSegment.previousLineSegmentsLength &&\n        pointLength <= lengthEnd\n      ) {\n        return lineSegment;\n      }\n    }\n  }\n\n  /**\n   * Creates a curve segment with a single line segment connecting the start and end control points\n   * @returns A curve segment that closes the spline\n   */\n  private _getClosingCurveSegmentWithStraightLineSegment(): SplineCurveSegment {\n    if (this.closed) {\n      return;\n    }\n\n    const controlPoints = this._controlPoints;\n    const startControlPoint = controlPoints[0];\n    const endControlPoint = controlPoints[controlPoints.length - 1];\n\n    // The only properties needed are `points` and `aabb`. All the other ones may undefined\n    const closingLineSegment: SplineLineSegment = {\n      points: {\n        start: [...startControlPoint],\n        end: [...endControlPoint],\n      },\n      aabb: {\n        minX: Math.min(startControlPoint[0], endControlPoint[0]),\n        minY: Math.min(startControlPoint[1], endControlPoint[1]),\n        maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n        maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n      },\n    } as SplineLineSegment;\n\n    // The only properties needed are `lineSegments` and `aabb`. All the other ones may undefined\n    return {\n      aabb: {\n        minX: closingLineSegment.aabb.minX,\n        minY: closingLineSegment.aabb.minY,\n        maxX: closingLineSegment.aabb.maxX,\n        maxY: closingLineSegment.aabb.maxY,\n      },\n      lineSegments: [closingLineSegment],\n    } as SplineCurveSegment;\n  }\n}\n\nexport { Spline as default, Spline };\n","import { vec4, mat4 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nimport type { SplineCurveSegment, SplineLineSegment } from '../../../types';\n\n// The `u` in Parameter Space used when spliting a curve segment into line segments must\n// be greater than or equal to `curveSegmentIndex` and smaller than `curveSegmentIndex + 1`.\n// In this case we are using `curveSegmentIndex + 1 - MAX_U_ERROR`\nconst MAX_U_ERROR = 1e-8;\n\n/**\n * Base class for all cubic splines\n */\nabstract class CubicSpline extends Spline {\n  protected getPreviewCurveSegments(\n    controlPointPreview: Types.Point2,\n    closeSpline: boolean\n  ): SplineCurveSegment[] {\n    const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n    const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n    const endCurveSegIndex = closeSpline\n      ? previewNumCurveSegments\n      : previewNumCurveSegments - 1;\n    const transformMatrix = this.getTransformMatrix();\n    const controlPoints = [...this.controlPoints];\n    const curveSegments: SplineCurveSegment[] = [];\n\n    if (!closeSpline) {\n      controlPoints.push(controlPointPreview);\n    }\n\n    for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n      const curveSegment = this._getCurveSegment(\n        i,\n        transformMatrix,\n        controlPoints,\n        closeSpline\n      );\n\n      curveSegments.push(curveSegment);\n    }\n\n    return curveSegments;\n  }\n\n  protected getSplineCurves(): SplineCurveSegment[] {\n    const numCurveSegments = this._getNumCurveSegments();\n    const curveSegments: SplineCurveSegment[] = new Array(numCurveSegments);\n\n    if (numCurveSegments <= 0) {\n      return [];\n    }\n\n    const transformMatrix = this.getTransformMatrix();\n    let previousCurveSegmentsLength = 0;\n\n    for (let i = 0; i < numCurveSegments; i++) {\n      const curveSegment = this._getCurveSegment(i, transformMatrix);\n\n      curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n      curveSegments[i] = curveSegment;\n\n      previousCurveSegmentsLength += curveSegment.length;\n    }\n\n    return curveSegments;\n  }\n\n  private _getNumCurveSegments(\n    controlPoints: Types.Point2[] = this.controlPoints,\n    closed: boolean = this.closed\n  ): number {\n    return closed\n      ? controlPoints.length\n      : Math.max(0, controlPoints.length - 1);\n  }\n\n  /**\n   * Get a point on a spline curve given `u` value\n   *\n   * @param u - `u` value in Parameter Space that must be between 0 and N where N is the number of\n   *   curve segments for opened splines or any negative/positive number for closed splines\n   * @returns - Point (x, y) on the spline. It may return `undefined` when `u` is smaller than 0\n   *   or greater than N for opened splines\n   */\n  private _getPoint(\n    u: number,\n    transformMatrix: number[],\n    controlPoints: Types.Point2[] = this.controlPoints,\n    closed: boolean = this.closed\n  ): Types.Point2 {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const uInt = Math.floor(u);\n    let curveSegmentIndex = uInt % numCurveSegments;\n\n    // `t` must be between 0 and 1\n    const t = u - uInt;\n\n    const curveSegmentIndexOutOfBounds =\n      curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n\n    if (curveSegmentIndexOutOfBounds) {\n      if (this.closed) {\n        // Wraps around when the index is negative or greater than or equal to `numSegments`\n        curveSegmentIndex =\n          (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n      } else {\n        // Point is not on the spline curve\n        return;\n      }\n    }\n\n    const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(\n      curveSegmentIndex,\n      controlPoints,\n      closed\n    );\n\n    // Formula to find any point on a cubic spline curve given a `t` value\n    //\n    // P(t) = [1  t  t2  t3] | m00 m01 m02 m03 |  | P0 |\n    //                       | m10 m11 m12 m13 |  | P1 |\n    //                       | m20 m21 m22 m23 |  | P2 |\n    //                       | m30 m31 m32 m33 |  | P3 |\n\n    const tt = t * t;\n    const ttt = tt * t;\n    const tValues = vec4.fromValues(1, t, tt, ttt);\n\n    // Influential field values which tell us how much P0, P1, P2 and P3 influence\n    // each point of the curve\n    const qValues = vec4.transformMat4(\n      vec4.create(),\n      tValues,\n      transformMatrix as mat4\n    );\n\n    return [\n      vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n      vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n    ] as Types.Point2;\n  }\n\n  private _getCurveSegmentPoints(\n    curveSegmentIndex: number,\n    controlPoints: Types.Point2[] = this.controlPoints,\n    closed: boolean = this.closed\n  ) {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const p1Index = curveSegmentIndex;\n    const p0Index = p1Index - 1;\n    const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n    const p3Index = p2Index + 1;\n    const p1 = controlPoints[p1Index];\n    const p2 = controlPoints[p2Index];\n    let p0;\n    let p3;\n\n    // P0 shall be negative when P1/P2 are the start/end points of the first curve segment\n    if (p0Index >= 0) {\n      p0 = controlPoints[p0Index];\n    } else {\n      p0 = closed\n        ? controlPoints[controlPoints.length - 1]\n        : math.point.mirror(p2, p1);\n    }\n\n    // P3 shall be negative when P1/P2 are the start/end points of the last curve segment\n    if (p3Index < controlPoints.length) {\n      p3 = controlPoints[p3Index];\n    } else {\n      p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n    }\n\n    return { p0, p1, p2, p3 };\n  }\n\n  private _getLineSegments(\n    curveSegmentIndex: number,\n    transformMatrix: number[],\n    controlPoints: Types.Point2[] = this.controlPoints,\n    closed: boolean = this.closed\n  ): SplineLineSegment[] {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const numLineSegments = this.resolution + 1;\n    const inc = 1 / numLineSegments;\n    const minU = curveSegmentIndex;\n    let maxU = minU + 1;\n\n    // 'u' must be greater than or equal to 0 and smaller than N where N is the number of segments\n    // otherwise it does not find the spline segment when it is not a closed curve because it is\n    // 0-based indexed. In this case `u` needs to get very close to the end point but never touch it\n    if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n      maxU -= MAX_U_ERROR;\n    }\n\n    const lineSegments: SplineLineSegment[] = [];\n    let startPoint: Types.Point2;\n    let endPoint: Types.Point2;\n    let previousLineSegmentsLength = 0;\n\n    for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n      // `u` may be greater than maxU in the last FOR loop due to number precision issue\n      u = u > maxU ? maxU : u;\n\n      const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n\n      if (!i) {\n        startPoint = point;\n        continue;\n      }\n\n      endPoint = point;\n\n      const dx = endPoint[0] - startPoint[0];\n      const dy = endPoint[1] - startPoint[1];\n      const length = Math.sqrt(dx ** 2 + dy ** 2);\n      const aabb: Types.AABB2 = {\n        minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n        maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n        minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n        maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n      };\n\n      lineSegments.push({\n        points: {\n          start: startPoint,\n          end: endPoint,\n        },\n        aabb,\n        length,\n        previousLineSegmentsLength,\n      });\n\n      startPoint = endPoint;\n      previousLineSegmentsLength += length;\n    }\n\n    return lineSegments;\n  }\n\n  private _getCurveSegment(\n    curveSegmentIndex: number,\n    transformMatrix: number[] = this.getTransformMatrix(),\n    controlPoints: Types.Point2[] = this.controlPoints,\n    closed: boolean = this.closed\n  ): SplineCurveSegment {\n    // Cubic spline curves are mainly controlled by P1 and P2 points but\n    // they are also influenced by previous (P0) and next (P3) poins. For\n    // Cardinal, Linear and Catmull-Rom splines P1 and P2 are also known as\n    // knots because they are the connection between two curve segments.\n    const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(\n      curveSegmentIndex,\n      controlPoints,\n      closed\n    );\n    const lineSegments = this._getLineSegments(\n      curveSegmentIndex,\n      transformMatrix,\n      controlPoints,\n      closed\n    );\n    let curveSegmentLength = 0;\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n      minX = Math.min(minX, lineSegAABB.minX);\n      minY = Math.min(minY, lineSegAABB.minY);\n      maxX = Math.max(maxX, lineSegAABB.maxX);\n      maxY = Math.max(maxY, lineSegAABB.maxY);\n      curveSegmentLength += lineSegLength;\n    });\n\n    return {\n      controlPoints: { p0, p1, p2, p3 },\n      aabb: { minX, minY, maxX, maxY },\n      length: curveSegmentLength,\n      previousCurveSegmentsLength: 0,\n      lineSegments,\n    };\n  }\n}\n\nexport { CubicSpline as default, CubicSpline };\n","import { CubicSpline } from './CubicSpline';\nimport { CardinalSplineProps } from '../../../types';\n\nclass CardinalSpline extends CubicSpline {\n  private _scale: number;\n  private _fixedScale: boolean;\n\n  constructor(props?: CardinalSplineProps) {\n    super(props);\n    this._scale = props?.scale ?? 0.5;\n    this._fixedScale = props?.fixedScale ?? false;\n  }\n\n  public get scale() {\n    return this._scale;\n  }\n\n  public set scale(scale: number) {\n    if (this._fixedScale || this._scale === scale) {\n      return;\n    }\n\n    this._scale = scale;\n    this.invalidated = true;\n  }\n\n  public get fixedScale() {\n    return this._fixedScale;\n  }\n\n  protected getTransformMatrix(): number[] {\n    const { scale: s } = this;\n    const s2 = 2 * s;\n\n    // prettier-ignore\n    return [\n       0,      1,       0,   0,\n      -s,      0,       s,   0,\n      s2,  s - 3,  3 - s2,  -s,\n      -s,  2 - s,   s - 2,   s\n    ];\n  }\n}\n\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\n\n// TODO: LinearSpline should inherit from Spline\n\n/**\n * Linear spline matrix is the same one from Cardinal spline with scale equal\n * to 0. Then it can inherit from Spline using the matrix below or inherit from\n * CardinalSpline fixing the scale to 0\n *\n * Transformation Matrix:\n *      1,   0,\n *     -1,  -1,\n */\nclass LinearSpline extends CardinalSpline {\n  constructor() {\n    super({ scale: 0, fixedScale: true });\n  }\n}\n\nexport { LinearSpline as default, LinearSpline };\n","import { CardinalSpline } from './CardinalSpline';\n\n// Catmull-Rom spline matrix is a Cardinal spline with scale equal to 1/2. Then\n// it can inherit from CubicSpline using the matrix below or inherit from\n// CardinalSpline using a fixed scale equal to 0.5.\n//\n// Transformation Matrix:\n//      0,  2,  0,  0,\n//     -1,  0,  1,  0,\n//      2, -5,  4, -1,\n//     -1,  3, -3,  1\n\nclass CatmullRomSpline extends CardinalSpline {\n  constructor() {\n    super({ scale: 0.5, fixedScale: true });\n  }\n}\n\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\n\n// prettier-ignore\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(\n  mat4.create(),\n  mat4.fromValues(\n     1,  4,  1,  0,\n    -3,  0,  3,  0,\n     3, -6,  3,  0,\n    -1,  3, -3,  1,\n  ),\n  1 / 6\n) as number[];\n\nclass BSpline extends CubicSpline {\n  protected getTransformMatrix(): number[] {\n    return TRANSFORM_MATRIX;\n  }\n}\n\nexport { BSpline as default, BSpline };\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  eventTarget,\n  triggerEvent,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events, MouseBindings, KeyboardBindings } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport {\n  math,\n  throttle,\n  roundNumber,\n  triggerAnnotationRenderForViewportIds,\n  getCalibratedScale,\n  getCalibratedAreaUnits,\n} from '../../utilities';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\n\nimport { SplineROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { ISpline } from '../../types/ISpline';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\n\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\n\nconst DEFAULT_SPLINE_CONFIG = {\n  resolution: 20,\n  controlPointAdditionDistance: 6,\n  controlPointDeletionDistance: 6,\n  showControlPointsConnectors: false,\n  controlPointAdditionEnabled: true,\n  controlPointDeletionEnabled: true,\n};\n\nenum SplineTypesEnum {\n  Cardinal = 'CARDINAL',\n  Linear = 'LINEAR',\n  CatmullRom = 'CATMULLROM',\n  BSpline = 'BSPLINE',\n}\n\nenum SplineToolActions {\n  AddControlPoint = 'addControlPoint',\n  DeleteControlPoint = 'deleteControlPoint',\n}\n\nclass SplineROITool extends AnnotationTool {\n  static toolName;\n  static SplineTypes = SplineTypesEnum;\n  static Actions = SplineToolActions;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: SplineROIAnnotation;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    lastCanvasPoint?: Types.Point2;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        calculateStats: true,\n        getTextLines: defaultGetTextLines,\n        spline: {\n          configuration: {\n            [SplineTypesEnum.Cardinal]: {\n              Class: CardinalSpline,\n              scale: 0.5,\n            },\n            [SplineTypesEnum.CatmullRom]: {\n              Class: CatmullRomSpline,\n            },\n            [SplineTypesEnum.Linear]: {\n              Class: LinearSpline,\n            },\n            [SplineTypesEnum.BSpline]: {\n              Class: BSpline,\n              controlPointAdditionEnabled: false,\n              controlPointDeletionEnabled: false,\n              showControlPointsConnectors: true,\n            },\n          },\n          type: SplineTypesEnum.CatmullRom,\n          drawPreviewEnabled: true,\n          lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n        },\n        actions: {\n          [SplineToolActions.AddControlPoint]: {\n            method: 'addControlPointCallback',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Primary,\n                modifierKey: KeyboardBindings.Shift,\n              },\n            ],\n          },\n          [SplineToolActions.DeleteControlPoint]: {\n            method: 'deleteControlPointCallback',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Primary,\n                modifierKey: KeyboardBindings.Ctrl,\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): SplineROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const { world: worldPos, canvas: canvasPos } = currentPoints;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const { type: splineType } = this.configuration.spline;\n    const splineConfig = this._getSplineConfig(splineType);\n    const spline = new splineConfig.Class();\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: SplineROIAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos]],\n          activeHandleIndex: null,\n        },\n        spline: {\n          type: splineConfig.type,\n          instance: spline,\n          resolution: splineConfig.resolution,\n          closed: false,\n          polyline: [],\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      lastCanvasPoint: canvasPos,\n    };\n\n    this._activateDraw(element);\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const { instance: spline } = annotation.data.spline;\n\n    return spline.isPointNearCurve(canvasCoords, proximity);\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._activateModify(element);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  private _keyDownCallback = (evt: EventTypes.KeyDownEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const key = eventDetail.key ?? '';\n    const { lastControlPointDeletionKeys } = this.configuration.spline;\n    const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n\n    if (!deleteLastPoint) {\n      return;\n    }\n\n    const { annotation } = this.editData;\n    const { data } = annotation;\n\n    if (data.handles.points.length === SPLINE_MIN_POINTS) {\n      this.cancel(element);\n      return;\n    } else {\n      const controlPointIndex = data.handles.points.length - 1;\n      this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    const { drawPreviewEnabled } = this.configuration.spline;\n\n    // Does not force a re-render if preview is not enabled\n    if (!drawPreviewEnabled) {\n      return;\n    }\n\n    const { element } = evt.detail;\n    const { renderingEngine } = getEnabledElement(element);\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  private _mouseDownCallback = (evt: EventTypes.InteractionEventType): void => {\n    const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    if (data.spline.closed) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    let closeSpline = data.handles.points.length >= 2 && doubleClick;\n    let addNewPoint = true;\n\n    // Check if user clicked on the first point to close the curve\n    if (data.handles.points.length >= 3) {\n      const { instance: spline } = data.spline;\n      const closestControlPoint = spline.getClosestControlPointWithinDistance(\n        canvasPoint,\n        SPLINE_CLICK_CLOSE_CURVE_DIST\n      );\n\n      if (closestControlPoint?.index === 0) {\n        addNewPoint = false;\n        closeSpline = true;\n      }\n    }\n\n    if (addNewPoint) {\n      data.handles.points.push(worldPoint);\n    }\n\n    data.spline.closed = data.spline.closed || closeSpline;\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (data.spline.closed) {\n      this._endCallback(evt);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is not in mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    if (newAnnotation) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData = null;\n    return annotation.annotationUID;\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: SplineROIAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  private _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.addEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  private _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.removeEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { element } = viewport;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const newAnnotation = this.editData?.newAnnotation;\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as SplineROIAnnotation;\n      const { annotationUID, data, highlighted } = annotation;\n      const { handles } = data;\n      const { points: controlPoints, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle(\n        'lineWidth',\n        styleSpecifier,\n        annotation\n      ) as number;\n      const lineDash = this.getStyle(\n        'lineDash',\n        styleSpecifier,\n        annotation\n      ) as string;\n      const color = this.getStyle(\n        'color',\n        styleSpecifier,\n        annotation\n      ) as string;\n\n      const canvasCoordinates = controlPoints.map((p) =>\n        worldToCanvas(p)\n      ) as Types.Point2[];\n\n      const { drawPreviewEnabled } = this.configuration.spline;\n      const splineType = annotation.data.spline.type;\n      const splineConfig = this._getSplineConfig(splineType);\n      const spline = this._updateSplineInstance(element, annotation);\n      const splinePolylineCanvas = spline.getPolylinePoints();\n      const splinePolylineWorld = [];\n\n      for (let i = 0, len = splinePolylineCanvas.length; i < len; i++) {\n        splinePolylineWorld.push(\n          viewport.canvasToWorld(splinePolylineCanvas[i])\n        );\n      }\n\n      data.spline.polyline = splinePolylineWorld;\n\n      // If cachedStats does not exist, or the areaUnit is missing (as part of\n      // import/hydration etc.), force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(annotation, element);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, element);\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n            handleRadius: '3',\n          }\n        );\n      }\n\n      if (\n        drawPreviewEnabled &&\n        spline.numControlPoints > 1 &&\n        this.editData?.lastCanvasPoint &&\n        !spline.closed\n      ) {\n        const { lastCanvasPoint } = this.editData;\n        const previewPolylinePoints = spline.getPreviewPolylinePoints(\n          lastCanvasPoint,\n          SPLINE_CLICK_CLOSE_CURVE_DIST\n        );\n\n        drawPolylineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          'previewSplineChange',\n          previewPolylinePoints,\n          {\n            color: '#9EA0CA',\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      if (splineConfig.showControlPointsConnectors) {\n        const controlPointsConnectors = [...canvasCoordinates];\n\n        // Connect the last point to the first one when the spline is closed\n        if (spline.closed) {\n          controlPointsConnectors.push(canvasCoordinates[0]);\n        }\n\n        drawPolylineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          'controlPointsConnectors',\n          controlPointsConnectors,\n          {\n            color: 'rgba(255, 255, 255, 0.5)',\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        'lineSegments',\n        splinePolylineCanvas,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n\n      renderStatus = true;\n      annotation.invalidated = false;\n    }\n\n    return renderStatus;\n  };\n\n  _renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    if (!data.spline.closed) {\n      return;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n    if (!options.visibility) {\n      return;\n    }\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) {\n      return;\n    }\n\n    const canvasCoordinates = data.handles.points.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const textBoxUID = 'textBox';\n    const boundingBox = drawLinkedTextBoxSvg(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      options\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n\n  addControlPointCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ) => {\n    const { data } = annotation;\n    const splineType = data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n    const maxDist = splineConfig.controlPointAdditionDistance;\n\n    if (splineConfig.controlPointAdditionEnabled === false) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    const { instance: spline } = data.spline;\n    const canvasPos = evt.detail.currentPoints.canvas;\n    const closestPointInfo = spline.getClosestPoint(canvasPos);\n\n    if (closestPointInfo.distance > maxDist) {\n      return;\n    }\n\n    // Add a point at the `u` position from Parameter Space\n    const { index, point: canvasPoint } = spline.addControlPointAtU(\n      closestPointInfo.uValue\n    );\n\n    data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  private _deleteControlPointByIndex(\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation,\n    controlPointIndex: number\n  ) {\n    const enabledElement = getEnabledElement(element);\n    const { points: controlPoints } = annotation.data.handles;\n\n    // There is no curve with only 2 points\n    if (controlPoints.length === 3) {\n      removeAnnotation(annotation.annotationUID);\n    } else {\n      controlPoints.splice(controlPointIndex, 1);\n    }\n\n    const { renderingEngine } = enabledElement;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    annotation.invalidated = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  deleteControlPointCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ) => {\n    const splineType = annotation.data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n    const maxDist = splineConfig.controlPointDeletionDistance;\n\n    if (splineConfig.controlPointDeletionEnabled === false) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const { canvas: canvasPos } = currentPoints;\n    const { instance: spline } = annotation.data.spline;\n    const closestControlPoint = spline.getClosestControlPointWithinDistance(\n      canvasPos,\n      maxDist\n    );\n\n    if (!closestControlPoint) {\n      return;\n    }\n\n    this._deleteControlPointByIndex(\n      element,\n      annotation,\n      closestControlPoint.index\n    );\n  };\n\n  /**\n   * Get a spline config merged with the default settings.\n   * @param type - Spline type (CARDINAL, CATMULLROM, LINEAR or BSPLINE)\n   * @returns Spline configuration\n   */\n  private _getSplineConfig(type: string) {\n    const { configuration: config } = this;\n    const splineConfigs = config.spline.configuration;\n\n    return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n  }\n\n  private _updateSplineScale(spline: ISpline, annotation: SplineROIAnnotation) {\n    const splineType = annotation.data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n\n    if (\n      !(spline instanceof CardinalSpline) ||\n      spline.fixedScale ||\n      splineConfig.scale === undefined ||\n      spline.scale === splineConfig.scale\n    ) {\n      return;\n    }\n\n    spline.scale = splineConfig.scale;\n    annotation.invalidated = true;\n  }\n\n  private _updateSplineInstance(\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation\n  ): ISpline {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { data } = annotation;\n    const { type: splineType, instance: spline } = annotation.data.spline;\n    const splineConfig = this._getSplineConfig(splineType);\n    const worldPoints = data.handles.points;\n    const canvasPoints = worldPoints.map(worldToCanvas);\n\n    spline.setControlPoints(canvasPoints);\n    spline.closed = !!data.spline?.closed;\n\n    // Update spline resolution in case it has changed\n    if (spline.resolution !== splineConfig.resolution) {\n      spline.resolution = parseInt(splineConfig.resolution);\n      annotation.invalidated = true;\n    }\n\n    // Update Cardinal spline scale in case it has changed\n    if (\n      spline instanceof CardinalSpline &&\n      !spline.fixedScale &&\n      splineConfig.scale !== undefined &&\n      spline.scale !== splineConfig.scale\n    ) {\n      spline.scale = splineConfig.scale;\n      annotation.invalidated = true;\n    }\n\n    return spline;\n  }\n\n  private _calculateCachedStats = (\n    annotation: SplineROIAnnotation,\n    element: HTMLDivElement\n  ) => {\n    if (!this.configuration.calculateStats) {\n      return;\n    }\n    const data = annotation.data;\n\n    if (!data.spline.closed) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const { cachedStats } = data;\n    const { polyline: points } = data.spline;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // Using an arbitrary start point (canvasPoint), calculate the\n      // mm spacing for the canvas in the X and Y directions.\n      const canvasPoint = canvasCoordinates[0];\n      const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n      const deltaXPoint = viewport.canvasToWorld([\n        canvasPoint[0] + 1,\n        canvasPoint[1],\n      ]);\n      const deltaYPoint = viewport.canvasToWorld([\n        canvasPoint[0],\n        canvasPoint[1] + 1,\n      ]);\n\n      const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n      const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n\n      const scale = getCalibratedScale(image);\n      let area =\n        math.polyline.calculateAreaOfPoints(canvasCoordinates) / scale / scale;\n\n      // Convert from canvas_pixels ^2 to mm^2\n      area *= deltaInX * deltaInY;\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        areaUnit: getCalibratedAreaUnits(null, image),\n      };\n    }\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n\n    return cachedStats;\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n\n    textLines.push(areaLine);\n  }\n\n  return textLines;\n}\n\nSplineROITool.toolName = 'SplineROI';\nexport default SplineROITool;\n","import { Types } from '@cornerstonejs/core';\nimport { interpolatePoints } from './algorithms/bspline';\n\n/**\n * Returns a list of uniform distributed values. This list contains the max amount of values which has at least a minimum distance between two consecutive values.\n * minDistributionDistance means the min distance between two consecutive distributed values.\n * Closed interval contains the min/max values.\n *\n * Formula for reference\n * For given {x ∈ R | x ≥ 0} and {minDis ∈ R | minDis ≥ 0}, ∃ D(x) where D(x) ≥ a and D(x) ≤ b  =>\n *         |\n * D(x)  = |                  (b - a)\n *         |  round( ------------------------ * x  )   + a\n *         |                (b - a + 1)\n *         |        round( -----------  )\n *         |                 minDis\n */\nfunction getContinuousUniformDistributionValues(\n  minDistributionDistance: number,\n  closedInterval: [number, number]\n): number[] {\n  const result = [];\n  const [intervalIni, intervalEnd] = closedInterval;\n\n  const intervalSize = intervalEnd - intervalIni + 1;\n  const intensity = Math.floor(intervalSize / minDistributionDistance);\n\n  let x = 0;\n  let continuosDistributionValue =\n    Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n\n  while (continuosDistributionValue <= intervalEnd) {\n    result.push(continuosDistributionValue);\n    x++;\n    continuosDistributionValue =\n      Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n  }\n\n  return result;\n}\n\n/**\n * Interpolates a segment of points from iniIndex until endIndex.\n * The process of interpolation considers the param knotsRatioPercentage as being the percentage of points from Segment that are likely to be considered.\n * By default it uses b-spline algorithm.\n * The result total of points is equal to original points.\n */\nexport default function interpolateSegmentPoints(\n  points: (Types.Point2 | Types.Point3)[],\n  iniIndex: number,\n  endIndex: number,\n  knotsRatioPercentage: number\n): (Types.Point2 | Types.Point3)[] {\n  const segmentSize = endIndex - iniIndex + 1;\n\n  const amountOfKnots =\n    Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n\n  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n    return points;\n  }\n\n  // segment should be at least the double of desired minKnot distance. This will ensure at there will enough knots to interpolate.\n  if (segmentSize / minKnotDistance < 2) {\n    return points;\n  }\n\n  const interpolationIniIndex = Math.max(0, iniIndex);\n  const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n\n  const segmentPointsUnchangedEnd = points.slice(\n    interpolationEndIndex + 1,\n    points.length\n  );\n\n  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n    interpolationIniIndex,\n    interpolationEndIndex,\n  ]);\n\n  const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n\n  return [\n    ...segmentPointsUnchangedBeg,\n    ...interpolatedPoints,\n    ...segmentPointsUnchangedEnd,\n  ];\n}\n","import {\n  interpolateBasis as d3InterpolateBasis,\n  quantize as d3Quantize,\n} from 'd3-interpolate';\nimport { zip as d3Zip } from 'd3-array';\nimport { Types } from '@cornerstonejs/core';\n\nfunction isPoints3D(\n  points: (Types.Point2 | Types.Point3)[]\n): points is Types.Point3[] {\n  return (points as Types.Point3[])[0]?.length === 3;\n}\n\n/**\n * Returns an array of the originalPoints length containing the interpolated data.\n * It interpolates a set of points indexed by knotsIndexes.\n * That is, it DISCARDS all points except those in knotsIndexes. Then, a new set of points is created by using a b-spline on the remaining points, in order to re-create a new set of points.\n */\nexport function interpolatePoints(\n  originalPoints: (Types.Point2 | Types.Point3)[],\n  knotsIndexes: number[]\n): (Types.Point2 | Types.Point3)[] {\n  if (\n    !knotsIndexes ||\n    knotsIndexes.length === 0 ||\n    knotsIndexes.length === originalPoints.length\n  ) {\n    return originalPoints;\n  }\n\n  const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;\n  const xInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][0])\n  );\n  const yInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][1])\n  );\n\n  if (isPoints3D(originalPoints)) {\n    const zInterpolator = d3InterpolateBasis(\n      knotsIndexes.map((k) => originalPoints[k][2])\n    );\n    return <Types.Point3[]>(\n      d3Zip(\n        d3Quantize(xInterpolator, n),\n        d3Quantize(yInterpolator, n),\n        d3Quantize(zInterpolator, n)\n      )\n    );\n  } else {\n    return <Types.Point2[]>(\n      d3Zip(d3Quantize(xInterpolator, n), d3Quantize(yInterpolator, n))\n    );\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport { point } from '../math';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nexport function shouldInterpolate(configuration: Record<any, any>): boolean {\n  return (\n    configuration?.interpolation?.interpolateOnAdd === true ||\n    configuration?.interpolation?.interpolateOnEdit === true\n  );\n}\n\n/**\n * Tells whether two points are equal by proximity or not as far as interpolation goes.\n */\nfunction isEqualByProximity(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) < 0.001;\n}\n\n/**\n * Tells whether two points are strictly equal or not as far as interpolation goes.\n */\nfunction isEqual(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) === 0;\n}\n\n/**\n * Finds the indexes of points list and otherPoints list that points are identical.\n */\nfunction findMatchIndexes(\n  points: Types.Point2[],\n  otherPoints: Types.Point2[]\n): [number, number] | undefined {\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < otherPoints.length; j++) {\n      if (isEqual(points[i], otherPoints[j])) {\n        return [i, j];\n      }\n    }\n  }\n}\n/**\n * Returns the following index value (on circular basis) of index param on the given direction.\n */\nfunction followingIndex(\n  index: number,\n  size: number,\n  direction: number\n): number {\n  return (index + size + direction) % size;\n}\n/**\n * Array of params to be used on circular find next index.\n * The values respresent start index, indexDelimiter, list of points\n */\ntype ListParamsType = [number, number, Types.Point2[]];\n\n/**\n * Circular finding that returns the next index for two list where the criteria is met.\n *\n * It can compare two lists out of sync considering it does a circular iteration over them.\n *\n * @example\n *\n * ```\n * const pointsA = [[0, 1], [1, 3], [1, 5], [1,2]];\n * const pointsB = [[1, 2], [1, 5], [1, 3], [0,0]];\n * let firstParam = [0, 0, pointsA]\n * let secondParam = [1, 1, pointsB]\n * const criteria = (pointA, pointB) => areSamePosition(pointA, pointB)\n * const direction = 1;\n * let result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * console.log(result);\n * // prints [1, 2]\n * // use this result and find again\n * firstParam = [result[0]+1, result[0], pointsA]\n * secondParam = [result[1]+1, result[1], pointsB]\n * result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * * // prints [3, 0]\n *\n */\nfunction circularFindNextIndexBy(\n  listParams: ListParamsType,\n  otherListParams: ListParamsType,\n  criteria: (pointA: Types.Point2, pointB: Types.Point2) => boolean,\n  direction: number\n): [number | undefined, number | undefined] {\n  const [, indexDelimiter, points] = listParams;\n  const [, otherIndexDelimiter, otherPoints] = otherListParams;\n\n  const pointsLength = points.length;\n  const otherPointsLength = otherPoints.length;\n\n  let startIndex = listParams[0];\n  let otherStartIndex = otherListParams[0];\n\n  if (\n    !points[startIndex] ||\n    !otherPoints[otherStartIndex] ||\n    !points[indexDelimiter] ||\n    !otherPoints[otherIndexDelimiter]\n  ) {\n    return [undefined, undefined];\n  }\n\n  while (\n    startIndex !== indexDelimiter &&\n    otherStartIndex !== otherIndexDelimiter\n  ) {\n    if (criteria(otherPoints[otherStartIndex], points[startIndex])) {\n      return [startIndex, otherStartIndex];\n    }\n\n    startIndex = followingIndex(startIndex, pointsLength, direction);\n    otherStartIndex = followingIndex(\n      otherStartIndex,\n      otherPointsLength,\n      direction\n    );\n  }\n\n  return [undefined, undefined];\n}\n\n/**\n * Given two list it will find the first and last index of segment from points that diverges from previousPoints\n */\nfunction findChangedSegment(\n  points: Types.Point2[],\n  previousPoints: Types.Point2[]\n): [number, number] {\n  const [firstMatchIndex, previousFirstMatchIndex] =\n    findMatchIndexes(points, previousPoints) || [];\n\n  const toBeNotEqualCriteria = (pointA, pointB) =>\n    isEqualByProximity(pointA, pointB) === false;\n\n  const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy(\n    [\n      followingIndex(firstMatchIndex, points.length, 1),\n      firstMatchIndex,\n      points,\n    ],\n    [\n      followingIndex(previousFirstMatchIndex, previousPoints.length, 1),\n      previousFirstMatchIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    1\n  );\n\n  const [highIndex] = circularFindNextIndexBy(\n    [followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points],\n    [\n      followingIndex(lowOtherDiffIndex, previousPoints.length, -1),\n      lowOtherDiffIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    -1\n  );\n\n  return [lowDiffIndex, highIndex];\n}\n\n/**\n * Interpolates the given list of points. In case there is a pointsOfReference the interpolation will occur only on segment disjoint of two list. I.e list of points from param points that are not on list of points from param pointsOfReference.\n */\nexport function getInterpolatedPoints(\n  configuration: Record<any, any>,\n  points: Types.Point2[],\n  pointsOfReference?: Types.Point2[]\n): Types.Point2[] {\n  const { interpolation } = configuration;\n\n  const result = points;\n\n  if (interpolation) {\n    const {\n      knotsRatioPercentageOnAdd,\n      knotsRatioPercentageOnEdit,\n      interpolateOnAdd = false,\n      interpolateOnEdit = false,\n    } = interpolation;\n\n    const knotsRatioPercentage = pointsOfReference\n      ? knotsRatioPercentageOnEdit\n      : knotsRatioPercentageOnAdd;\n    const isEnabled = pointsOfReference ? interpolateOnEdit : interpolateOnAdd;\n\n    if (isEnabled) {\n      // partial or total interpolation\n      const [changedIniIndex, changedEndIndex] = pointsOfReference\n        ? findChangedSegment(points, pointsOfReference)\n        : [0, points.length - 1];\n\n      // do not interpolate if there is no valid segment\n      if (!points[changedIniIndex] || !points[changedEndIndex]) {\n        return points;\n      }\n\n      return <Types.Point2[]>(\n        interpolateSegmentPoints(\n          points,\n          changedIniIndex,\n          changedEndIndex,\n          knotsRatioPercentage\n        )\n      );\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Finds the length of the longest line from the midpoint of the line\n * that joins the start and end of the open contour, to the surface of the\n * open contour.\n */\nexport default function findOpenUShapedContourVectorToPeak(\n  canvasPoints: Types.Point2[],\n  viewport: Types.IStackViewport | Types.IVolumeViewport\n): Types.Point3[] {\n  // Find chord from first to last point.\n  const first = canvasPoints[0];\n  const last = canvasPoints[canvasPoints.length - 1];\n\n  const firstToLastUnitVector = vec2.create();\n\n  vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);\n  vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);\n\n  // Get the two possible normal vector to this vector\n  // Note: Use the identity that the perpendicular line must have a gradient of\n  // 1 / gradient of the line.\n\n  const normalVector1 = vec2.create();\n  const normalVector2 = vec2.create();\n\n  vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);\n  vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);\n\n  // Find the center of the chord.\n  const centerOfFirstToLast: Types.Point2 = [\n    (first[0] + last[0]) / 2,\n    (first[1] + last[1]) / 2,\n  ];\n\n  // Get furthest point.\n\n  const furthest = {\n    dist: 0,\n    index: null,\n  };\n\n  for (let i = 0; i < canvasPoints.length; i++) {\n    const canvasPoint = canvasPoints[i];\n\n    const distance = vec2.dist(canvasPoint, <vec2>centerOfFirstToLast);\n\n    if (distance > furthest.dist) {\n      furthest.dist = distance;\n      furthest.index = i;\n    }\n  }\n\n  const toFurthest: [Types.Point2, Types.Point2] = [\n    canvasPoints[furthest.index],\n    centerOfFirstToLast,\n  ];\n  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);\n\n  return toFurthestWorld;\n}\n\nexport function findOpenUShapedContourVectorToPeakOnRender(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): Types.Point3[] {\n  const { viewport } = enabledElement;\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { Events } from '../../../enums';\nimport { EventTypes } from '../../../types';\nimport { state } from '../../../store';\nimport { vec3 } from 'gl-matrix';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\nimport { polyline } from '../../../utilities/math';\nimport { removeAnnotation } from '../../../stateManagement/annotation/annotationState';\n\nconst {\n  addCanvasPointsToArray,\n  pointsAreWithinCloseContourProximity,\n  getFirstIntersectionWithPolyline,\n  getSubPixelSpacingAndXYDirections,\n} = polyline;\n\n/**\n * Activates the contour drawing event loop.\n */\nfunction activateDraw(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.drawData = {\n    canvasPoints: [canvasPos],\n    polylineIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n/**\n * Dectivates and cleans up the contour drawing event loop.\n */\nfunction deactivateDraw(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to a set of preview canvas points of the contour being created.\n * Checks if crossing of lines means early completion and editing needs to be started.\n */\nfunction mouseDragDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const {\n    annotation,\n    viewportIdsToRender,\n    xDir,\n    yDir,\n    spacing,\n    movingTextBox,\n  } = this.commonData;\n  const { polylineIndex, canvasPoints } = this.drawData;\n\n  const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (movingTextBox) {\n    this.isDrawing = false;\n\n    // Drag mode - Move the text boxes world position\n    const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n    const worldPosDelta = deltaPoints.world;\n\n    const { textBox } = annotation.data.handles;\n    const { worldPosition } = textBox;\n\n    worldPosition[0] += worldPosDelta[0];\n    worldPosition[1] += worldPosDelta[1];\n    worldPosition[2] += worldPosDelta[2];\n\n    textBox.hasMoved = true;\n  } else {\n    const crossingIndex = this.findCrossingIndexDuringCreate(evt);\n\n    if (crossingIndex !== undefined) {\n      // If we have crossed our drawing line, create a closed contour and then\n      // start an edit.\n      this.applyCreateOnCross(evt, crossingIndex);\n    } else {\n      const numPointsAdded = addCanvasPointsToArray(\n        element,\n        canvasPoints,\n        canvasPos,\n        this.commonData\n      );\n\n      this.drawData.polylineIndex = polylineIndex + numPointsAdded;\n    }\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the contour on mouse up. If the `allowOpenContours` configuration\n * option is `true`, checks if we should create an open or closed contour.\n * If the `allowOpenContours` configuration option is `false`, always creates a\n * closed contour.\n */\nfunction mouseUpDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating a closed contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawClosedContour(element: HTMLDivElement): boolean {\n  this.removeCrossedLinesOnCompleteDraw();\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  // Convert annotation to world coordinates\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[0],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n  const { textBox } = annotation.data.handles;\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * If lines are crossed during the draw loop, remove the points drawn over the\n * crossing.\n */\nfunction removeCrossedLinesOnCompleteDraw(): void {\n  const { canvasPoints } = this.drawData;\n  const numPoints = canvasPoints.length;\n\n  const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];\n  const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    canvasPointsMinusEnds,\n    endToStart[0],\n    endToStart[1],\n    false\n  );\n\n  if (lineSegment) {\n    const indexToRemoveUpTo = lineSegment[1];\n\n    this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating an open contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawOpenContour(element: HTMLDivElement): boolean {\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  const { textBox } = annotation.data.handles;\n\n  // Add the first and last points to the list of handles. These means they\n  // will render handles on mouse hover.\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  // If the annotation is an open U-shaped annotation, find the annotation vector.\n  if (annotation.data.isOpenUShapeContour) {\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n  }\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * Searches for a crossing of the contour during create. If found, returns the\n * index of the point just before the lines cross.\n */\nfunction findCrossingIndexDuringCreate(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  // Note as we super sample the added points, we need to check the whole last mouse move, not the points\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { canvasPoints } = this.drawData;\n  const pointsLessLastOne = canvasPoints.slice(0, -1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    pointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (lineSegment === undefined) {\n    return;\n  }\n\n  const crossingIndex = lineSegment[0];\n\n  return crossingIndex;\n}\n\n/**\n * On crossing of the draw line, create a closed contour, and then start an edit\n * since this occurs during a mouse drag.\n */\nfunction applyCreateOnCross(\n  evt: EventTypes.InteractionEventType,\n  crossingIndex: number\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const { canvasPoints } = this.drawData;\n  const { annotation, viewportIdsToRender } = this.commonData;\n\n  // Add points between the end point and crossing point\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[crossingIndex],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  // Remove points up to just before the crossing index\n  for (let i = 0; i < crossingIndex; i++) {\n    canvasPoints.shift();\n  }\n\n  if (this.completeDrawClosedContour(element)) {\n    // pos complete operation\n    this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n  }\n}\n\n/**\n * Completes the contour on a cancel method call during the draw loop.\n */\nfunction cancelDrawing(element: HTMLElement) {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Tell whether a drawing should be halted or not. It will be true when canvas points is less than the minimum required.\n */\nfunction shouldHaltDrawing(\n  canvasPoints: any,\n  subPixelResolution: number\n): boolean {\n  const minPoints = Math.max(\n    /**\n     * The number of points to span 3 voxels in length, this is a realistically\n     * smallest open contour one could reasonably define (2 voxels should probably be a line).\n     */\n    subPixelResolution * 3,\n    /**\n     * Minimum 3 points, there are other annotations for one point (probe)\n     * or 2 points (line), so this comes only from a mistake in practice.\n     */\n    3\n  );\n  return canvasPoints.length < minPoints;\n}\n\n/**\n * Check and halt a drawing for a given event. It returns true in case drawing is halted, otherswise false.\n */\nfunction haltDrawing(element: HTMLDivElement, canvasPoints: any): boolean {\n  const { subPixelResolution } = this.configuration;\n\n  if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {\n    // Remove annotation instead of completing it.\n    const { annotation, viewportIdsToRender } = this.commonData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    removeAnnotation(annotation.annotationUID);\n\n    this.isDrawing = false;\n    this.drawData = undefined;\n    this.commonData = undefined;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.deactivateDraw(element);\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerDrawLoop(toolInstance): void {\n  toolInstance.activateDraw = activateDraw.bind(toolInstance);\n  toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);\n\n  toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);\n  toolInstance.findCrossingIndexDuringCreate =\n    findCrossingIndexDuringCreate.bind(toolInstance);\n  toolInstance.completeDrawOpenContour =\n    completeDrawOpenContour.bind(toolInstance);\n  toolInstance.removeCrossedLinesOnCompleteDraw =\n    removeCrossedLinesOnCompleteDraw.bind(toolInstance);\n  toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);\n  toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);\n  toolInstance.completeDrawClosedContour =\n    completeDrawClosedContour.bind(toolInstance);\n  toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);\n  toolInstance.haltDrawing = haltDrawing.bind(toolInstance);\n}\n\nexport default registerDrawLoop;\n","import { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport { EventTypes } from '../../../types';\n\nconst { addCanvasPointsToArray, getFirstIntersectionWithPolyline } = polyline;\n\n/**\n * Check if the `editCanvasPoints` have crossed the `prevCanvasPoints` during\n * an edit.\n *\n * @privateRemarks The following tricks are required to make the UX smooth and\n * the editing not very picky on exactly where you click:\n * - If we don't cross after 2 points, but projecting the line backwards the\n * proximity distance means we cross, extend the line back.\n * - If we travel the full proximity in canvas points but don't cross a line, we\n * are likely drawing along the line, which is intuitive to the user. At this point\n * snap the start of the edit to the closest place on the `prevCanvasPoints`,\n * so that the edit can be executed in-line.\n */\nfunction checkForFirstCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): void {\n  const eventDetail = evt.detail;\n  const { element, currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (crossedLineSegment) {\n    this.editData.startCrossingIndex = crossedLineSegment[0];\n\n    // On the first crossing, remove the first lines prior to the crossing\n    this.removePointsUpUntilFirstCrossing(isClosedContour);\n    // prevent continue if there are not the minimum of points for this op.\n  } else if (prevCanvasPoints.length >= 2) {\n    if (\n      editCanvasPoints.length >\n      this.configuration.checkCanvasEditFallbackProximity\n    ) {\n      // At this point, likely we are drawing along the line, we are past the proximity for grabbing.\n      // Search for nearest line segment to the start of the edit.\n      // Set the crossing index to the lower index of the segment.\n\n      const firstEditCanvasPoint = editCanvasPoints[0];\n\n      const distanceIndexPairs = [];\n\n      for (let i = 0; i < prevCanvasPoints.length; i++) {\n        const prevCanvasPoint = prevCanvasPoints[i];\n        const distance = vec2.distance(prevCanvasPoint, firstEditCanvasPoint);\n\n        distanceIndexPairs.push({ distance, index: i });\n      }\n\n      distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n      const twoClosestDistanceIndexPairs = [\n        distanceIndexPairs[0],\n        distanceIndexPairs[1],\n      ];\n\n      const lowestIndex = Math.min(\n        twoClosestDistanceIndexPairs[0].index,\n        twoClosestDistanceIndexPairs[1].index\n      );\n\n      this.editData.startCrossingIndex = lowestIndex;\n    } else {\n      // Check if extending a line back 6 (Proximity) canvas pixels would cross a line.\n\n      // Extend point back 6 canvas pixels from first point.\n      const dir = vec2.create();\n\n      vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);\n      vec2.normalize(dir, dir);\n\n      const proximity = 6;\n\n      const extendedPoint: Types.Point2 = [\n        editCanvasPoints[0][0] - dir[0] * proximity,\n        editCanvasPoints[0][1] - dir[1] * proximity,\n      ];\n\n      const crossedLineSegmentFromExtendedPoint =\n        getFirstIntersectionWithPolyline(\n          prevCanvasPoints,\n          extendedPoint,\n          editCanvasPoints[0],\n          isClosedContour\n        );\n\n      if (crossedLineSegmentFromExtendedPoint) {\n        // Add points.\n        const pointsToPrepend = [extendedPoint];\n\n        addCanvasPointsToArray(\n          element,\n          pointsToPrepend,\n          editCanvasPoints[0],\n          this.commonData\n        );\n\n        editCanvasPoints.unshift(...pointsToPrepend);\n\n        this.removePointsUpUntilFirstCrossing(isClosedContour);\n\n        this.editData.editIndex = editCanvasPoints.length - 1;\n        this.editData.startCrossingIndex =\n          crossedLineSegmentFromExtendedPoint[0];\n      }\n    }\n  }\n}\n\n/**\n * Removes the points from the `editCanvasPoints` up until the first crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsUpUntilFirstCrossing(isClosedContour: boolean): void {\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n  let numPointsToRemove = 0;\n\n  for (let i = 0; i < editCanvasPoints.length - 1; i++) {\n    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      firstLine[0],\n      firstLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    numPointsToRemove++;\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n\n  // Remove the points\n  editCanvasPoints.splice(0, numPointsToRemove);\n\n  this.editData.editIndex = editCanvasPoints.length - 1;\n}\n\n/**\n * Returns `true` if the `editCanvasPoints` crosses the `prevCanvasPoints` a\n * second time.\n */\nfunction checkForSecondCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { prevCanvasPoints } = this.editData;\n\n  // Note this method is looking for the first corssing found of\n  // *the lines given* to it. The parameters given to it are specified to search\n  // for the second crossing of the prevCanvasPoints, by checking if the last\n  // mouse drag crossed these. This class method is only called if the edit loop\n  // has already has a crossing earlier in the edit.\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (!crossedLineSegment) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Removes the points from the `editCanvasPoints` after the second crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsAfterSecondCrossing(isClosedContour: boolean): void {\n  const { prevCanvasPoints, editCanvasPoints } = this.editData;\n\n  // Remove points after the crossing\n  for (let i = editCanvasPoints.length - 1; i > 0; i--) {\n    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      lastLine[0],\n      lastLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    editCanvasPoints.pop();\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n}\n\n/**\n * During an edit, finds the index on the `prevCanvasPoints` that the\n * `editCanvasPoints` should snap to to create one continuous contour.\n *\n * Returns the index, but returns -1 if there is no index on the\n * `prevCanvasPoints` that can be snapped to with causing a crossing of the\n * `editCanvasPoints`.\n */\nfunction findSnapIndex(): number {\n  const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  if (\n    startCrossingIndex === undefined // Haven't crossed line yet\n  ) {\n    return;\n  }\n\n  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n  const distanceIndexPairs = [];\n\n  for (let i = 0; i < prevCanvasPoints.length; i++) {\n    const prevCanvasPoint = prevCanvasPoints[i];\n    const distance = vec2.distance(prevCanvasPoint, lastEditCanvasPoint);\n\n    distanceIndexPairs.push({ distance, index: i });\n  }\n\n  distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n  // Search through from shortest distance and check which snap line doesn't\n  // Cross the edit line, in most cases the snap index will just be the first one.\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);\n\n  for (let i = 0; i < distanceIndexPairs.length; i++) {\n    const { index } = distanceIndexPairs[i];\n    const snapCanvasPosition = prevCanvasPoints[index];\n    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n    const crossedLineSegment = getFirstIntersectionWithPolyline(\n      editCanvasPointsLessLastOne,\n      snapCanvasPosition,\n      lastEditCanvasPoint,\n      false // The edit line is not a closed contour\n    );\n\n    if (!crossedLineSegment) {\n      return index;\n    }\n  }\n\n  // If all of the lines caused a crossing, this means we should start a new edit.\n  // Use -1 to signify this.\n  return -1;\n}\n\n/**\n * Checks if the `editCanvasPoints` cross themselves. If they do, remove the\n * region after the cross index, these removes isolated \"island\" loops that the\n * user can draw which make closed contours no longer simple polygons, or open\n * contours twisted.\n */\nfunction checkAndRemoveCrossesOnEditLine(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { editCanvasPoints } = this.editData;\n\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    editCanvasPointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (!crossedLineSegment) {\n    return;\n  }\n\n  // We have found a crossing, remove points after the crossing, cutting off\n  // the \"island\" loop drawn.\n\n  const editIndexCrossed = crossedLineSegment[0];\n  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;\n\n  for (let i = 0; i < numPointsToRemove; i++) {\n    editCanvasPoints.pop();\n  }\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerEditLoopCommon(toolInstance) {\n  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);\n  toolInstance.removePointsUpUntilFirstCrossing =\n    removePointsUpUntilFirstCrossing.bind(toolInstance);\n  toolInstance.checkForSecondCrossing =\n    checkForSecondCrossing.bind(toolInstance);\n  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);\n  toolInstance.removePointsAfterSecondCrossing =\n    removePointsAfterSecondCrossing.bind(toolInstance);\n  toolInstance.checkAndRemoveCrossesOnEditLine =\n    checkAndRemoveCrossesOnEditLine.bind(toolInstance);\n}\n\nexport default registerEditLoopCommon;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { EventTypes } from '../../../types';\nimport { polyline } from '../../../utilities/math';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport {\n  getInterpolatedPoints,\n  shouldInterpolate,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\n\nconst {\n  getSubPixelSpacingAndXYDirections,\n  addCanvasPointsToArray,\n  calculateAreaOfPoints,\n} = polyline;\n\n/**\n * Activates the closed contour edit event loop.\n */\nfunction activateClosedContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingClosed = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  hideElementCursor(element);\n}\n\n/**\n * Dectivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateClosedContourEdit(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by editing in\n * a way that requires a new edit to keep the contour a simple polygon.\n */\nfunction mouseDragClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    // If we haven't found the index of the first crossing yet,\n    // see if we can find it.\n    this.checkForFirstCrossing(evt, true);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  if (this.editData.snapIndex === -1) {\n    // No point on the prevCanvasPoints for the editCanvasPoints line to\n    // snap to. Apply edit, and start a new edit as we've gone back on ourselves.\n    this.finishEditAndStartNewEdit(evt);\n    return;\n  }\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, true)\n  ) {\n    // Crossed a second time, apply edit, and start a new edit from the crossing.\n    this.removePointsAfterSecondCrossing(true);\n    this.finishEditAndStartNewEdit(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Finish the current edit, and start a new one.\n */\nfunction finishEditAndStartNewEdit(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n    snapIndex: undefined,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we combine a few tricks to find the optimal\n * contour:\n * - As the contour is closed, our edit might stradle the boundary between the\n * last and 0th point of the contour, e.g. a small edit might go from e.g. index\n * 960 to index 4. We therefore calculate two possible contours, and find the\n * one with the biggest area, which will define the actual edit the user desired.\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithClosedContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  // Generate two possible contours that could be intepreted from the edit:\n  //\n  // pointSet1 => 0 -> low -> edit -> high - max.\n  // pointSet2 => low -> high -> edit\n  //\n  // Depending on the placement of the edit and the origin, either of these could be the intended edit.\n  // We'll choose the one with the largest area, as edits are considered to be changes to the original area with\n  // A relative change of much less than unity.\n\n  // Point Set 1\n  const pointSet1 = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  let inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  let reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the orignal contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Point Set 2\n  const pointSet2 = [];\n\n  for (let i = lowIndex; i < highIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  inPlaceDistance =\n    distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;\n\n  reverseDistance =\n    distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const areaPointSet1 = calculateAreaOfPoints(pointSet1);\n  const areaPointSet2 = calculateAreaOfPoints(pointSet2);\n\n  const pointsToRender: Types.Point2[] =\n    areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;\n\n  return pointsToRender;\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction mouseUpClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction completeClosedContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = false;\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingClosed = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateClosedContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the closed\n * contour edit loop.\n */\nfunction cancelClosedContourEdit(element: HTMLDivElement) {\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Registers the closed contour edit loop to the tool instance.\n */\nfunction registerClosedContourEditLoop(toolInstance): void {\n  toolInstance.activateClosedContourEdit =\n    activateClosedContourEdit.bind(toolInstance);\n  toolInstance.deactivateClosedContourEdit =\n    deactivateClosedContourEdit.bind(toolInstance);\n  toolInstance.mouseDragClosedContourEditCallback =\n    mouseDragClosedContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpClosedContourEditCallback =\n    mouseUpClosedContourEditCallback.bind(toolInstance);\n  toolInstance.finishEditAndStartNewEdit =\n    finishEditAndStartNewEdit.bind(toolInstance);\n  toolInstance.fuseEditPointsWithClosedContour =\n    fuseEditPointsWithClosedContour.bind(toolInstance);\n  toolInstance.cancelClosedContourEdit =\n    cancelClosedContourEdit.bind(toolInstance);\n  toolInstance.completeClosedContourEdit =\n    completeClosedContourEdit.bind(toolInstance);\n}\n\nexport default registerClosedContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport type { EventTypes, Annotation } from '../../../types';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\n\nconst { addCanvasPointsToArray, getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour edit event loop.\n */\nfunction activateOpenContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingOpen = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  hideElementCursor(element);\n}\n\n/**\n * Deactivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateOpenContourEdit(element: HTMLDivElement) {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by dragging\n * the edit line past the end of the open contour.\n */\nfunction mouseDragOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Get pixel spacing in the direction.\n  // Check that we have moved at least one voxel in each direction.\n\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    this.checkForFirstCrossing(evt, false);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, false)\n  ) {\n    this.removePointsAfterSecondCrossing(false);\n    this.finishEditOpenOnSecondCrossing(evt);\n  } else if (this.checkIfShouldOverwriteAnEnd(evt)) {\n    this.openContourEditOverwriteEnd(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Overwrite the end of the contour with the edit, and then switch to the\n * open contour end edit loop.\n */\nfunction openContourEditOverwriteEnd(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  // Note: Contours generate from fusedCanvasPoints will be in the direction\n  // with the last point being the current mouse position\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n  annotation.data.handles.activeHandleIndex = 1;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  // Jump to a normal line edit now.\n  this.deactivateOpenContourEdit(element);\n  this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);\n}\n\n/**\n * Checks if we are moving the `editCanvasPoints` past the end of one of the\n * open contour's `prevCanvasPoint`s.\n */\nfunction checkIfShouldOverwriteAnEnd(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPos = lastPoints.canvas;\n\n  const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    // Edit not started\n    return false;\n  }\n\n  // No snap index can be found, so contour is being edited away from line.\n  if (snapIndex === -1) {\n    return true;\n  }\n\n  if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {\n    // Not snapping to final index\n    return false;\n  }\n\n  // Work out the angle between the last mouse move and\n  // And the current point to the snapped point.\n  const p1 = canvasPos;\n  const p2 = lastCanvasPos;\n  const p3 = prevCanvasPoints[snapIndex];\n\n  const a = vec2.create();\n  const b = vec2.create();\n\n  vec2.set(a, p1[0] - p2[0], p1[1] - p2[1]);\n  vec2.set(b, p1[0] - p3[0], p1[1] - p3[1]);\n\n  const aDotb = vec2.dot(a, b);\n  const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);\n\n  const theta = Math.acos(aDotb / (magA * magB));\n\n  if (theta < Math.PI / 2) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a single contour ready for\n * end editing.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsForOpenContourEndEdit(): Types.Point2[] {\n  const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  const newCanvasPoints = [];\n\n  // Note: Generated contours will both be in the direction with the\n  // last point being the current mouse position\n\n  if (snapIndex === 0) {\n    // end -> crossingpoint -> edit\n    // Add points from the end of the previous contour, to the crossing point.\n    for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // start -> crossingpoint -> edit\n    // Add points from the orignal contour origin up to the low index.\n    for (let i = 0; i < startCrossingIndex; i++) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const distanceBetweenCrossingIndexAndFirstPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[0]\n  );\n\n  const distanceBetweenCrossingIndexAndLastPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[editCanvasPoints.length - 1]\n  );\n\n  if (\n    distanceBetweenCrossingIndexAndFirstPoint <\n    distanceBetweenCrossingIndexAndLastPoint\n  ) {\n    // In order\n    for (let i = 0; i < editCanvasPoints.length; i++) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // reverse\n    for (let i = editCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  return newCanvasPoints;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithOpenContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return undefined;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const pointsToRender = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  const inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  const reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the original contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  return pointsToRender;\n}\n\n/**\n * On a second crossing, apply edit, and start a new edit from the crossing.\n */\nfunction finishEditOpenOnSecondCrossing(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the edit of the open contour when the mouse button is released.\n */\nfunction mouseUpOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Completes the edit of the open contour.\n */\nfunction completeOpenContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = true;\n    annotation.data.handles.points = [\n      worldPoints[0],\n      worldPoints[worldPoints.length - 1],\n    ];\n\n    // If the annotation is an open U-shaped annotation, find the annotation vector.\n    if (annotation.data.isOpenUShapeContour) {\n      annotation.data.openUShapeContourVectorToPeak =\n        findOpenUShapedContourVectorToPeak(fusedCanvasPoints, viewport);\n    }\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateOpenContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the open\n * contour edit loop.\n */\nfunction cancelOpenContourEdit(element: HTMLDivElement) {\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Registers the open contour edit loop to the tool instance.\n */\nfunction registerOpenContourEditLoop(toolInstance) {\n  toolInstance.activateOpenContourEdit =\n    activateOpenContourEdit.bind(toolInstance);\n  toolInstance.deactivateOpenContourEdit =\n    deactivateOpenContourEdit.bind(toolInstance);\n  toolInstance.mouseDragOpenContourEditCallback =\n    mouseDragOpenContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpOpenContourEditCallback =\n    mouseUpOpenContourEditCallback.bind(toolInstance);\n  toolInstance.fuseEditPointsWithOpenContour =\n    fuseEditPointsWithOpenContour.bind(toolInstance);\n  toolInstance.finishEditOpenOnSecondCrossing =\n    finishEditOpenOnSecondCrossing.bind(toolInstance);\n  toolInstance.checkIfShouldOverwriteAnEnd =\n    checkIfShouldOverwriteAnEnd.bind(toolInstance);\n  toolInstance.fuseEditPointsForOpenContourEndEdit =\n    fuseEditPointsForOpenContourEndEdit.bind(toolInstance);\n  toolInstance.openContourEditOverwriteEnd =\n    openContourEditOverwriteEnd.bind(toolInstance);\n  toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);\n  toolInstance.completeOpenContourEdit =\n    completeOpenContourEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport { hideElementCursor } from '../../../cursors/elementCursor';\nimport type {\n  EventTypes,\n  Annotation,\n  ToolHandle,\n  TextBoxHandle,\n} from '../../../types';\nimport { polyline } from '../../../utilities/math';\n\nconst { getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour end edit. This actually just sets up the state so\n * that the tool thinks we are mid draw, and then jumps into the drawing loop.\n */\nfunction activateOpenContourEndEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[],\n  handle: ToolHandle | null\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;\n\n  // If 0, invert point direction, if 1, keep point direction the same.\n  // This is so we can just jump as into the state as if the annotation was just being drawn.\n  if (handleIndexGrabbed === 0) {\n    canvasPoints.reverse();\n  }\n\n  let movingTextBox = false;\n  if ((handle as TextBoxHandle).worldPosition) {\n    movingTextBox = true;\n  }\n\n  this.drawData = {\n    canvasPoints: canvasPoints,\n    polylineIndex: canvasPoints.length - 1,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox,\n  };\n\n  state.isInteractingWithTool = true;\n\n  // Jump into drawing loop.\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n\n/**\n * Registers the open contour end edit loop to the tool instance.\n */\nfunction registerOpenContourEndEditLoop(toolInstance): void {\n  toolInstance.activateOpenContourEndEdit =\n    activateOpenContourEndEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEndEditLoop;\n","import type { Types } from '@cornerstonejs/core';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n} from '../../../drawingSvg';\nimport { polyline } from '../../../utilities/math';\nimport { findOpenUShapedContourVectorToPeakOnRender } from './findOpenUShapedContourVectorToPeak';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { SVGDrawingHelper } from '../../../types';\n\nconst { pointsAreWithinCloseContourProximity } = polyline;\n\ntype PlanarFreehandROIRenderOptions = {\n  color?: string;\n  width?: number;\n  connectFirstToLast?: boolean;\n};\n\nfunction _getRenderingOptions(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): PlanarFreehandROIRenderOptions {\n  const styleSpecifier: StyleSpecifier = {\n    toolGroupId: this.toolGroupId,\n    toolName: this.getToolName(),\n    viewportId: enabledElement.viewport.id,\n    annotationUID: annotation.annotationUID,\n  };\n\n  const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n  const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n  const color = this.getStyle('color', styleSpecifier, annotation);\n\n  const isOpenContour = annotation.data.isOpenContour;\n\n  const options = {\n    color: color === undefined ? undefined : <string>color,\n    width: lineWidth === undefined ? undefined : <number>lineWidth,\n    lineDash: lineDash === undefined ? undefined : <number[]>lineDash,\n    connectLastToFirst: !isOpenContour,\n  };\n\n  return options;\n}\n\n/**\n * Renders a `PlanarFreehandROIAnnotation` that is not currently being drawn or edited.\n */\nfunction renderContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  // prevent drawing or further calculation in case viewport data is not ready yet\n  if (!enabledElement?.viewport?.getImageData()) {\n    return;\n  }\n  // Check if the contour is an open contour\n  if (annotation.data.isOpenContour) {\n    // If its an open contour, check i its a U-shaped contour\n    if (annotation.data.isOpenUShapeContour) {\n      calculateUShapeContourVectorToPeakIfNotPresent(\n        enabledElement,\n        annotation\n      );\n\n      this.renderOpenUShapedContour(\n        enabledElement,\n        svgDrawingHelper,\n        annotation\n      );\n    } else {\n      // If not a U-shaped contour, render standard open contour.\n      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    }\n  } else {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n  }\n}\n\n/**\n * If the open U-shaped contour does not have a peak.\n */\nfunction calculateUShapeContourVectorToPeakIfNotPresent(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  if (!annotation.data.openUShapeContourVectorToPeak) {\n    // Annotation just been set to be an open U-shaped contour.\n    // calculate its peak vector here.\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);\n  }\n}\n\n/**\n * Renders an closed `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderClosedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Its unfortunate that we have to do this for each annotation,\n  // Even if its unchanged. In the future we could cache the canvas points per\n  // element on the tool? That feels very weird also as we'd need to manage\n  // it/clean them up. Its a pre-optimisation for now and we can tackle it if it\n  // becomes a problem.\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderOpenContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n\n  const activeHandleIndex = annotation.data.handles.activeHandleIndex;\n\n  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {\n    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;\n\n    // Draw highlighted points\n    const handleGroupUID = '0';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const handlePoints = [\n      canvasPoints[0],\n      canvasPoints[canvasPoints.length - 1],\n    ];\n\n    // Don't render a hovered handle, as this will be rendered larger in\n    // the next block.\n    if (activeHandleIndex === 0) {\n      handlePoints.shift();\n    } else if (activeHandleIndex === 1) {\n      handlePoints.pop();\n    }\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      handlePoints,\n      {\n        color: options.color,\n        handleRadius: radius,\n      }\n    );\n  }\n\n  if (activeHandleIndex !== null) {\n    // Draw highlighted points\n    const handleGroupUID = '1';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const indexOfCanvasPoints =\n      activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;\n\n    const handlePoint = canvasPoints[indexOfCanvasPoints];\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      [handlePoint],\n      { color: options.color }\n    );\n  }\n}\n\nfunction renderOpenUShapedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const { polyline, openUShapeContourVectorToPeak } = annotation.data;\n\n  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n  // prevent rendering u shape in case openUShapeContourVectorToPeak is not set yet\n  if (!openUShapeContourVectorToPeak) {\n    return;\n  }\n\n  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);\n  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);\n\n  const openUShapeContourVectorToPeakCanvas = [\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[1]),\n  ];\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Join first and last points\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'first-to-last',\n    [firstCanvasPoint, lastCanvasPoint],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n\n  // Render midpoint to open contour surface line\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'midpoint-to-open-contour',\n    [\n      openUShapeContourVectorToPeakCanvas[0],\n      openUShapeContourVectorToPeakCanvas[1],\n    ],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n}\n\n/**\n * Renders a new `PlanarFreehandROIAnnotation` annotation during\n * creation/drawing.\n */\nfunction renderContourBeingDrawn(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n\n  // Override rendering whilst drawing the contour, we don't know if its open\n  // or closed yet\n  options.connectLastToFirst = false;\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    '1',\n    canvasPoints,\n    options\n  );\n\n  if (allowOpenContours) {\n    const firstPoint = canvasPoints[0];\n    const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n    // Check if start and end are within close proximity\n    if (\n      pointsAreWithinCloseContourProximity(\n        firstPoint,\n        lastPoint,\n        this.configuration.closeContourProximity\n      )\n    ) {\n      // Preview join last points\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        '2',\n        [lastPoint, firstPoint],\n        options\n      );\n    } else {\n      // Draw start point\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        handleGroupUID,\n        [firstPoint],\n        { color: options.color, handleRadius: 2 }\n      );\n    }\n  }\n}\n\n/**\n * Renders a closed `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderClosedContourBeingEdited(\n  enabledElement,\n  svgDrawingHelper,\n  annotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderOpenContourBeingEdited(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Registers the render methods of various contour states to the tool instance.\n */\nfunction registerRenderMethods(toolInstance) {\n  toolInstance.renderContour = renderContour.bind(toolInstance);\n  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);\n  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);\n  toolInstance.renderOpenUShapedContour =\n    renderOpenUShapedContour.bind(toolInstance);\n\n  toolInstance.renderContourBeingDrawn =\n    renderContourBeingDrawn.bind(toolInstance);\n\n  toolInstance.renderClosedContourBeingEdited =\n    renderClosedContourBeingEdited.bind(toolInstance);\n  toolInstance.renderOpenContourBeingEdited =\n    renderOpenContourBeingEdited.bind(toolInstance);\n  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);\n}\n\nexport default registerRenderMethods;\n","import {\n  CONSTANTS,\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { Events } from '../../enums';\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../../stateManagement/annotation/annotationState';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport {\n  EventTypes,\n  ToolHandle,\n  Annotation,\n  Annotations,\n  AnnotationStyle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { PlanarFreehandROICommonData } from '../../utilities/math/polyline/planarFreehandROIInternalTypes';\n\nimport { getIntersectionCoordinatesWithPolyline } from '../../utilities/math/polyline/getIntersectionWithPolyline';\nimport pointInShapeCallback from '../../utilities/pointInShapeCallback';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n/**\n * PlanarFreehandROITool lets you draw annotations that define an arbitrarily drawn region.\n * You can use the PlanarFreehandROITool in all perpendicular views (axial, sagittal, coronal),\n * support for oblique views is possible, but not yet supported, due to the implementation of\n * `getSubPixelSpacingAndXYDirections`.\n *\n * The resulting annotation's data and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * PlanarFreehandROITool annotation can be smoothed on drawing completion. This is a configured based approach.\n * The interpolation process uses b-spline algorithm and consider 4 configurations properties:\n * - interpolation.interpolateOnAdd: to tell whether it should be interpolated or not (for editing it is considered the property interpolateOnEdit) (default: false)\n * - interpolation.interpolateOnEdit: to tell whether it should be interpolated or not when editing (default: false)\n * - interpolation.knotsRatioPercentageOnAdd: percentage of points from Segment that are likely to be considered knots during interpolation (for editing it is considered the property knotsRatioPercentageOnEdit) ( default: 40)\n * - interpolation.knotsRatioPercentageOnEdit: same as knotsRatioPercentageOnAdd but applicable only when editing the tool (default: 40)\n *\n * So, with that said the interpolation might occur when:\n * - drawing is done (i.e mouse is released) and interpolation.interpolateOnAdd is true. Interpolation algorithm uses knotsRatioPercentageOnAdd\n * - edit drawing is done (i.e mouse is released) and interpolation.interpolateOnEdit is true. Interpolation algorithm uses knotsRatioPercentageOnEdit and its only applied to changed segment\n * Interpolation does not occur when:\n * - interpolation.interpolateOnAdd is false and drawing is completed\n * - interpolation.interpolateOnEdit is false and edit is completed\n * - drawing still happening (editing or not)\n *\n * The result of interpolation will be a smoother set of segments.\n * Changing tool configuration (see below) you can fine-tune the interpolation process by changing knotsRatioPercentageOnAdd and knotsRatioPercentageOnEdit value, which smaller values produces a more agressive interpolation.\n * A smaller value of knotsRatioPercentageOnAdd/knotsRatioPercentageOnEdit produces a more agressive interpolation.\n *\n * ```js\n * cornerstoneTools.addTool(PlanarFreehandROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(PlanarFreehandROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(PlanarFreehandROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // set interpolation agressiveness while adding new annotation (ps: this does not change if interpolation is ON or OFF)\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { knotsRatioPercentageOnAdd: 30 },\n * });\n *\n * // set interpolation to be ON while editing only\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { interpolateOnAdd: false, interpolateOnEdit: true  },\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass PlanarFreehandROITool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  private commonData?: PlanarFreehandROICommonData;\n  isDrawing = false;\n  isEditingClosed = false;\n  isEditingOpen = false;\n\n  private activateDraw: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateClosedContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEndEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[],\n    handle: ToolHandle | null\n  ) => void;\n  private cancelDrawing: (element: HTMLDivElement) => void;\n  private cancelClosedContourEdit: (element: HTMLDivElement) => void;\n  private cancelOpenContourEdit: (element: HTMLDivElement) => void;\n\n  private renderContour: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderContourBeingDrawn: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderClosedContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderOpenContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        alwaysRenderOpenContourHandles: {\n          // When true, always render end points when you have an open contour, rather\n          // than just rendering a line.\n          enabled: false,\n          // When enabled, use this radius to draw the endpoints whilst not hovering.\n          radius: 2,\n        },\n        allowOpenContours: true,\n        // Proximity in canvas coordinates used to join contours.\n        closeContourProximity: 10,\n        // The proximity at which we fallback to the simplest grabbing logic for\n        // determining what index of the contour to start editing.\n        checkCanvasEditFallbackProximity: 6,\n        // The relative distance that points should be dropped along the polyline\n        // in units of the image pixel spacing. A value of 1 means that nodes must\n        // be placed no closed than the image spacing apart. A value of 4 means that 4\n        // nodes should be placed within the space of one image pixel size. A higher\n        // value gives more finese to the tool/smoother lines, but the value cannot\n        // be infinite as the lines become very computationally expensive to draw.\n        subPixelResolution: 4,\n        interpolation: {\n          interpolateOnAdd: false,\n          interpolateOnEdit: false, // used for edit only\n          knotsRatioPercentageOnAdd: 40,\n          knotsRatioPercentageOnEdit: 40,\n        },\n        calculateStats: false,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // Register event loops and rendering logic, which are stored in different\n    // Files due to their complexity/size.\n    registerDrawLoop(this);\n    registerEditLoopCommon(this);\n    registerClosedContourEditLoop(this);\n    registerOpenContourEditLoop(this);\n    registerOpenContourEndEditLoop(this);\n    registerRenderMethods(this);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current image, creates\n   * a `PlanarFreehandROIAnnotation` and stores it in the annotationManager.\n   *\n   * @param evt - `EventTypes.NormalizedMouseEventType`\n   * @returns The `PlanarFreehandROIAnnotation` object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): PlanarFreehandROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: PlanarFreehandROIAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          points: [], // Handle points for open contours\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        polyline: [<Types.Point3>[...worldPos]], // Polyline coordinates\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    this.activateDraw(evt, annotation, viewportIdsToRender);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * Begins an edit of an open contour, when the mouse has selected a handle\n   * (end) of the open contour.\n   *\n   * @param evt - `EventTypes.MouseDownEventType`\n   * @param annotation - `PlanarFreehandROIAnnotation` annotation.\n   * @param handle - The handle index, 0 for the start and 1 for the end.\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.activateOpenContourEndEdit(\n      evt,\n      annotation,\n      viewportIdsToRender,\n      handle\n    );\n  };\n\n  /**\n   * Edits the open or closed contour when the line is grabbed and dragged.\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    if (annotation.data.isOpenContour) {\n      this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n    } else {\n      this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n    }\n  };\n\n  /**\n   * Returns if the canvas point is near the line of the given annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - The `PlanarFreehandROIAnnotation`.\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: PlanarFreehandROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const points = annotation.data.polyline;\n\n    // NOTE: It is implemented this way so that we do not double calculate\n    // points when number crunching adjacent line segments.\n    let previousPoint = viewport.worldToCanvas(points[0]);\n\n    for (let i = 1; i < points.length; i++) {\n      const p1 = previousPoint;\n      const p2 = viewport.worldToCanvas(points[i]);\n\n      const distance = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n\n      if (distance === true) {\n        return true;\n      }\n\n      previousPoint = p2;\n    }\n\n    if (annotation.data.isOpenContour) {\n      // Contour is open, don't check last point to first point.\n      return false;\n    }\n\n    // check last point to first point\n    const pStart = viewport.worldToCanvas(points[0]);\n    const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n\n    const distance = pointCanProjectOnLine(\n      canvasCoords,\n      pStart,\n      pEnd,\n      proximity\n    );\n\n    if (distance === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  cancel = (element: HTMLDivElement): void => {\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (isDrawing) {\n      this.cancelDrawing(element);\n    } else if (isEditingOpen) {\n      this.cancelOpenContourEdit(element);\n    } else if (isEditingClosed) {\n      this.cancelClosedContourEdit(element);\n    }\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: PlanarFreehandROIAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation completed event.\n   */\n  triggerAnnotationCompleted = (\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventType = Events.ANNOTATION_COMPLETED;\n\n    const eventDetail: AnnotationCompletedEventDetail = {\n      annotation,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * @override We need to override this method as the tool doesn't always have\n   * `handles`, which means `filterAnnotationsForDisplay` fails inside\n   * `filterAnnotationsWithinSlice`.\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let annotationsToDisplay;\n\n    if (viewport instanceof VolumeViewport) {\n      const camera = viewport.getCamera();\n\n      const { spacingInNormalDirection } =\n        csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n      // Get data with same normal and within the same slice\n      annotationsToDisplay = this.filterAnnotationsWithinSlice(\n        annotations,\n        camera,\n        spacingInNormalDirection\n      );\n    } else {\n      // Use the default `filterAnnotationsForDisplay` utility, as the stack\n      // path doesn't require handles.\n      annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n    }\n\n    return annotationsToDisplay;\n  }\n\n  /**\n   * Altered version of the `utilities.planar.filterAnnotationsWithinSlice`,\n   * which uses the polyline position rather than the handle. As the polyline is\n   * always present.\n   */\n  private filterAnnotationsWithinSlice(\n    annotations: Annotations,\n    camera: Types.ICamera,\n    spacingInNormalDirection: number\n  ): Annotations {\n    const { viewPlaneNormal } = camera;\n\n    const annotationsWithParallelNormals = annotations.filter(\n      (td: Annotation) => {\n        const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n        const isParallel =\n          Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n          PARALLEL_THRESHOLD;\n\n        return annotationViewPlaneNormal && isParallel;\n      }\n    );\n\n    // No in plane annotations.\n    if (!annotationsWithParallelNormals.length) {\n      return [];\n    }\n\n    // Annotation should be within the slice, which means that it should be between\n    // camera's focalPoint +/- spacingInNormalDirection.\n\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    const { focalPoint } = camera;\n\n    const annotationsWithinSlice = [];\n\n    for (const annotation of annotationsWithParallelNormals) {\n      const data = annotation.data;\n      const point = data.polyline[0];\n\n      if (!annotation.isVisible) {\n        continue;\n      }\n\n      // A = point\n      // B = focal point\n      // P = normal\n\n      // B-A dot P  => Distance in the view direction.\n      // this should be less than half the slice distance.\n\n      const dir = vec3.create();\n\n      vec3.sub(dir, focalPoint, point);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        annotationsWithinSlice.push(annotation);\n      }\n    }\n\n    return annotationsWithinSlice;\n  }\n\n  /**\n   * Draws the `PlanarFreehandROIAnnotation`s at each request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n\n    const targetId = this.getTargetId(viewport);\n\n    let annotations = <PlanarFreehandROIAnnotation[]>(\n      getAnnotations(this.getToolName(), element)\n    );\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as PlanarFreehandROIAnnotation[];\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n      // No annotations are currently being modified, so we can just use the\n      // render contour method to render all of them\n      annotations.forEach((annotation) => {\n        this.renderContour(enabledElement, svgDrawingHelper, annotation);\n      });\n    } else {\n      // One of the annotations will need special rendering treatment, render all\n      // other annotations not being interacted with using the standard renderContour\n      // rendering path.\n      const activeAnnotationUID = this.commonData.annotation.annotationUID;\n\n      annotations.forEach((annotation) => {\n        if (annotation.annotationUID === activeAnnotationUID) {\n          if (isDrawing) {\n            this.renderContourBeingDrawn(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingClosed) {\n            this.renderClosedContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingOpen) {\n            this.renderOpenContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else {\n            throw new Error(\n              `Unknown ${this.getToolName()} annotation rendering state`\n            );\n          }\n        } else {\n          this.renderContour(enabledElement, svgDrawingHelper, annotation);\n        }\n      });\n\n      // Todo: return boolean flag for each rendering route in the planar tool.\n      renderStatus = true;\n    }\n\n    if (!this.configuration.calculateStats) {\n      return;\n    }\n\n    annotations.forEach((annotation) => {\n      const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n      if (\n        annotation.annotationUID === activeAnnotationUID &&\n        !this.commonData?.movingTextBox\n      ) {\n        return;\n      }\n\n      if (!this.commonData?.movingTextBox) {\n        const { data } = annotation;\n        if (\n          !data.cachedStats[targetId] ||\n          data.cachedStats[targetId].areaUnit == null\n        ) {\n          data.cachedStats[targetId] = {\n            Modality: null,\n            area: null,\n            max: null,\n            mean: null,\n            stdDev: null,\n            areaUnit: null,\n          };\n\n          this._calculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement\n          );\n        } else if (annotation.invalidated) {\n          this._throttledCalculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement\n          );\n        }\n      }\n\n      this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n    });\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { cachedStats, polyline: points } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // Using an arbitrary start point (canvasPoint), calculate the\n      // mm spacing for the canvas in the X and Y directions.\n      const canvasPoint = canvasCoordinates[0];\n      const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n      const deltaXPoint = viewport.canvasToWorld([\n        canvasPoint[0] + 1,\n        canvasPoint[1],\n      ]);\n      const deltaYPoint = viewport.canvasToWorld([\n        canvasPoint[0],\n        canvasPoint[1] + 1,\n      ]);\n\n      const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n      const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n\n      const scale = getCalibratedScale(image);\n      let area =\n        polyline.calculateAreaOfPoints(canvasCoordinates) / scale / scale;\n      // Convert from canvas_pixels ^2 to mm^2\n      area *= deltaInX * deltaInY;\n\n      const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n      worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n      worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n      worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n\n      let iMin = worldPosIndex[0];\n      let iMax = worldPosIndex[0];\n\n      let jMin = worldPosIndex[1];\n      let jMax = worldPosIndex[1];\n\n      let kMin = worldPosIndex[2];\n      let kMax = worldPosIndex[2];\n\n      for (let j = 1; j < points.length; j++) {\n        const worldPosIndex = csUtils.transformWorldToIndex(\n          imageData,\n          points[j]\n        );\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        iMin = Math.min(iMin, worldPosIndex[0]);\n        iMax = Math.max(iMax, worldPosIndex[0]);\n\n        jMin = Math.min(jMin, worldPosIndex[1]);\n        jMax = Math.max(jMax, worldPosIndex[1]);\n\n        kMin = Math.min(kMin, worldPosIndex[2]);\n        kMax = Math.max(kMax, worldPosIndex[2]);\n      }\n\n      // Expand bounding box\n      const iDelta = 0.01 * (iMax - iMin);\n      const jDelta = 0.01 * (jMax - jMin);\n      const kDelta = 0.01 * (kMax - kMin);\n\n      iMin = Math.floor(iMin - iDelta);\n      iMax = Math.ceil(iMax + iDelta);\n      jMin = Math.floor(jMin - jDelta);\n      jMax = Math.ceil(jMax + jDelta);\n      kMin = Math.floor(kMin - kDelta);\n      kMax = Math.ceil(kMax + kDelta);\n\n      const boundsIJK = [\n        [iMin, iMax],\n        [jMin, jMax],\n        [kMin, kMax],\n      ] as [Types.Point2, Types.Point2, Types.Point2];\n\n      const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n      const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n\n      let curRow = 0;\n      let intersections = [];\n      let intersectionCounter = 0;\n      const pointsInShape = pointInShapeCallback(\n        imageData,\n        (pointLPS, pointIJK) => {\n          let result = true;\n          const point = viewport.worldToCanvas(pointLPS);\n          if (point[1] != curRow) {\n            intersectionCounter = 0;\n            curRow = point[1];\n            intersections = getIntersectionCoordinatesWithPolyline(\n              canvasCoordinates,\n              point,\n              [canvasPosEnd[0], point[1]]\n            );\n            intersections.sort(\n              (function (index) {\n                return function (a, b) {\n                  return a[index] === b[index]\n                    ? 0\n                    : a[index] < b[index]\n                    ? -1\n                    : 1;\n                };\n              })(0)\n            );\n          }\n          if (intersections.length && point[0] > intersections[0][0]) {\n            intersections.shift();\n            intersectionCounter++;\n          }\n          if (intersectionCounter % 2 === 0) {\n            result = false;\n          }\n          return result;\n        },\n        this.configuration.statsCalculator.statsCallback,\n        boundsIJK\n      );\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      const modalityUnit = getModalityUnit(\n        metadata.Modality,\n        annotation.metadata.referencedImageId,\n        modalityUnitOptions\n      );\n\n      const stats = this.configuration.statsCalculator.getStatistics();\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        mean: stats[1]?.value,\n        max: stats[0]?.value,\n        stdDev: stats[3]?.value,\n        statsArray: stats,\n        pointsInShape: pointsInShape,\n        areaUnit: getCalibratedAreaUnits(null, image),\n        modalityUnit,\n      };\n    }\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n\n    annotation.invalidated = false;\n\n    return cachedStats;\n  };\n\n  _renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    const styleSpecifier: AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n    if (!options.visibility) {\n      return;\n    }\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) {\n      return;\n    }\n\n    const canvasCoordinates = data.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const textBoxUID = '1';\n    const boundingBox = drawLinkedTextBox(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      options\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n    cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nPlanarFreehandROITool.toolName = 'PlanarFreehandROI';\nexport default PlanarFreehandROITool;\n","type BucketNode<T> = {\n  value: T;\n  next: BucketNode<T>;\n};\n\n/**\n * Circular Bucket Queue.\n *\n * Returns input'd points in sorted order. All operations run in roughly O(1)\n * time (for input with small cost values), but it has a strict requirement:\n *\n * If the most recent point had a cost of c, any points added should have a cost\n * c' in the range c <= c' <= c + (capacity - 1).\n */\nexport class BucketQueue<T> {\n  private _bucketCount: number;\n  private _mask: number;\n  private _size: number;\n  private _currentBucketIndex: number;\n  private _getPriority: (item: T) => number;\n  private _areEqual: (itemA: T, itemB: T) => boolean;\n  private _buckets: BucketNode<T>[];\n\n  /**\n   * @param bits - Number of bits.\n   * @param getPriority - A function that returns the priority of an item\n   */\n  constructor({\n    numBits,\n    getPriority,\n    areEqual,\n  }: {\n    numBits: number;\n    getPriority?: (item: T) => number;\n    areEqual?: (itemA: T, itemB: T) => boolean;\n  }) {\n    this._bucketCount = 1 << numBits; // # of buckets = 2^numBits\n    this._mask = this._bucketCount - 1; // 2^numBits - 1 = index mask\n    this._size = 0;\n    this._currentBucketIndex = 0;\n    this._buckets = this._buildArray(this._bucketCount);\n\n    this._getPriority =\n      typeof getPriority !== 'undefined'\n        ? getPriority\n        : (item) => item as unknown as number;\n\n    this._areEqual =\n      typeof areEqual === 'function'\n        ? areEqual\n        : (itemA, itemB) => itemA === itemB;\n  }\n\n  /**\n   * Prepend item to the list in the appropriate bucket\n   * @param item - Item to be added to the queue based on its priority\n   */\n  public push(item: T) {\n    const bucketIndex = this._getBucketIndex(item);\n    const oldHead = this._buckets[bucketIndex];\n    const newHead: BucketNode<T> = {\n      value: item,\n      next: oldHead,\n    };\n\n    this._buckets[bucketIndex] = newHead;\n    this._size++;\n  }\n\n  public pop(): T {\n    if (this._size === 0) {\n      throw new Error('Cannot pop because the queue is empty.');\n    }\n\n    // Find first empty bucket\n    while (this._buckets[this._currentBucketIndex] === null) {\n      this._currentBucketIndex =\n        (this._currentBucketIndex + 1) % this._bucketCount;\n    }\n\n    // All items in bucket have same cost, return the first one\n    const ret = this._buckets[this._currentBucketIndex];\n\n    this._buckets[this._currentBucketIndex] = ret.next;\n    this._size--;\n\n    return ret.value;\n  }\n\n  /**\n   * Tries to remove item from queue.\n   * @param item - Item to be removed from the queue\n   * @returns True if the item is found and removed or false otherwise\n   */\n  public remove(item: T): boolean {\n    if (!item) {\n      return false;\n    }\n\n    // To find node, go to bucket and search through unsorted list.\n    const bucketIndex = this._getBucketIndex(item);\n    const firstBucketNode = this._buckets[bucketIndex];\n    let node = firstBucketNode;\n    let prevNode: BucketNode<T>;\n\n    while (node !== null) {\n      if (this._areEqual(item, node.value)) {\n        break;\n      }\n\n      prevNode = node;\n      node = node.next;\n    }\n\n    // Item not found\n    if (node === null) {\n      return false;\n    }\n\n    // Item found and it needs to be removed from the list\n    if (node === firstBucketNode) {\n      this._buckets[bucketIndex] = node.next;\n    } else {\n      prevNode.next = node.next;\n    }\n\n    this._size--;\n    return true;\n  }\n\n  public isEmpty(): boolean {\n    return this._size === 0;\n  }\n\n  /**\n   * Return the bucket index\n   * @param item - Item for which the bucket shall be returned\n   * @returns Bucket index for the item provided\n   */\n  private _getBucketIndex(item): number {\n    return this._getPriority(item) & this._mask;\n  }\n\n  /**\n   * Create array and initialze pointers to null\n   * @param size - Size of the new array\n   * @returns An array with `N` buckets pointing to null\n   */\n  private _buildArray(size) {\n    const buckets = new Array(size);\n    buckets.fill(null);\n    return buckets;\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport { BucketQueue } from '../BucketQueue';\n\nconst MAX_UINT32 = 4294967295;\nconst TWO_THIRD_PI = 2 / (3 * Math.PI);\n\n/**\n * Scissors\n *\n * Ref: Eric N. Mortensen, William A. Barrett, Interactive Segmentation with\n *   Intelligent Scissors, Graphical Models and Image Processing, Volume 60,\n *   Issue 5, September 1998, Pages 349-384, ISSN 1077-3169,\n *   DOI: 10.1006/gmip.1998.0480.\n *\n * {@link http://www.sciencedirect.com/science/article/B6WG4-45JB8WN-9/2/6fe59d8089fd1892c2bfb82283065579}\n *\n * Implementation based on\n * {@link http://code.google.com/p/livewire-javascript/}\n */\nexport class LivewireScissors {\n  private searchGranularityBits: number;\n  private searchGranularity: number;\n\n  /** Width of the image */\n  public readonly width: number;\n\n  /** Height of the image */\n  public readonly height: number;\n\n  /** Grayscale image */\n  private grayscalePixelData: Float32Array;\n\n  // Laplace zero-crossings (either 0 or 1).\n  private laplace: Float32Array;\n\n  /** Gradient vector magnitude for each pixel */\n  private gradMagnitude: Float32Array;\n\n  /** Gradient of each pixel in the x-direction */\n  private gradXNew: Float32Array;\n\n  /** Gradient of each pixel in the y-direction */\n  private gradYNew: Float32Array;\n\n  /** Dijkstra - start point */\n  private startPoint: Types.Point2;\n\n  /** Dijkstra - store the state of a pixel (visited/unvisited) */\n  private visited: boolean[];\n\n  /** Dijkstra - map a point to its parent along the shortest path to root (start point) */\n  private parents: Uint32Array;\n\n  /** Dijkstra - store the cost to go from the start point to each node */\n  private costs: Float32Array;\n\n  /** Dijkstra - BucketQueue to sort items by priority */\n  private priorityQueueNew: BucketQueue<number>;\n\n  constructor(grayscalePixelData: Float32Array, width: number, height: number) {\n    const numPixels = grayscalePixelData.length;\n\n    this.searchGranularityBits = 8; // Bits of resolution for BucketQueue.\n    this.searchGranularity = 1 << this.searchGranularityBits; //bits.\n\n    this.width = width;\n    this.height = height;\n\n    this.grayscalePixelData = grayscalePixelData;\n    this.laplace = null;\n    this.gradXNew = null;\n    this.gradYNew = null;\n\n    this.laplace = this._computeLaplace();\n    this.gradMagnitude = this._computeGradient();\n    this.gradXNew = this._computeGradientX();\n    this.gradYNew = this._computeGradientY();\n\n    this.visited = new Array(numPixels);\n    this.parents = new Uint32Array(numPixels);\n    this.costs = new Float32Array(numPixels);\n  }\n\n  public startSearch(startPoint: Types.Point2): void {\n    const startPointIndex = this._getPointIndex(startPoint[1], startPoint[0]);\n\n    this.startPoint = null;\n    this.visited.fill(false);\n    this.parents.fill(MAX_UINT32);\n    this.costs.fill(Infinity);\n    this.priorityQueueNew = new BucketQueue<number>({\n      numBits: this.searchGranularityBits,\n      getPriority: this._getPointCost,\n    });\n\n    this.startPoint = startPoint;\n    this.costs[startPointIndex] = 0;\n    this.priorityQueueNew.push(startPointIndex);\n  }\n\n  /**\n   * Runs Dijsktra until it finds a path from the start point to the target\n   * point. Once it reaches the target point all the state is preserved in order\n   * to save processing time the next time the method is called for a new target\n   * point. The search is restarted whenever `startSearch` is called.\n   * @param targetPoint - Target point\n   * @returns An array with all points for the shortest path found that goes\n   * from startPoint to targetPoint.\n   */\n  public findPathToPoint(targetPoint: Types.Point2): Types.Point2[] {\n    if (!this.startPoint) {\n      throw new Error('There is no search in progress');\n    }\n\n    const {\n      startPoint,\n      _getPointIndex: index,\n      _getPointCoordinate: coord,\n    } = this;\n    const startPointIndex = index(startPoint[1], startPoint[0]);\n    const targetPointIndex = index(targetPoint[1], targetPoint[0]);\n    const {\n      visited: visited,\n      parents: parents,\n      costs: cost,\n      priorityQueueNew: priorityQueue,\n    } = this;\n\n    if (targetPointIndex === startPointIndex) {\n      return [];\n    }\n\n    // Stop searching until there are no more items in the queue or it has\n    // reached the target point. In case it reaches the target all the remaining\n    // items will stay in the queue then once the user moves the mouse to a new\n    // location the search can continue from where it left off.\n    while (\n      !priorityQueue.isEmpty() &&\n      parents[targetPointIndex] === MAX_UINT32\n    ) {\n      const pointIndex = priorityQueue.pop();\n\n      if (visited[pointIndex]) {\n        continue;\n      }\n\n      const point = coord(pointIndex);\n      const neighborsPoints = this._getNeighborPoints(point);\n\n      visited[pointIndex] = true;\n\n      // Update the cost of all neighbors that have higher costs\n      for (let i = 0, len = neighborsPoints.length; i < len; i++) {\n        const neighborPoint = neighborsPoints[i];\n        const neighbordPointIndex = index(neighborPoint[1], neighborPoint[0]);\n        const dist = this._getWeightedDistance(point, neighborPoint);\n        const neighborCost = cost[pointIndex] + dist;\n\n        if (neighborCost < cost[neighbordPointIndex]) {\n          if (cost[neighbordPointIndex] !== Infinity) {\n            // The item needs to be removed from the priority queue and\n            // re-added in order to be moved to the right bucket.\n            priorityQueue.remove(neighbordPointIndex);\n          }\n\n          cost[neighbordPointIndex] = neighborCost;\n          parents[neighbordPointIndex] = pointIndex;\n          priorityQueue.push(neighbordPointIndex);\n        }\n      }\n    }\n\n    const pathPoints = [];\n    let pathPointIndex = targetPointIndex;\n\n    while (pathPointIndex !== MAX_UINT32) {\n      pathPoints.push(coord(pathPointIndex));\n      pathPointIndex = parents[pathPointIndex];\n    }\n\n    return pathPoints.reverse();\n  }\n\n  /**\n   * Convert a point coordinate (x,y) into a point index\n   * @param index - Point index\n   * @returns Point coordinate (x,y)\n   */\n  private _getPointIndex = (row: number, col: number) => {\n    const { width } = this;\n    return row * width + col;\n  };\n\n  /**\n   * Convert a point index into a point coordinate (x,y)\n   * @param index - Point index\n   * @returns Point coordinate (x,y)\n   */\n  private _getPointCoordinate = (index: number): Types.Point2 => {\n    const x = index % this.width;\n    const y = Math.floor(index / this.width);\n\n    return [x, y];\n  };\n\n  /**\n   * Calculate the delta X between a given point and its neighbor at the right\n   * @param x - Point x-coordinate\n   * @param y - Point y-coordinate\n   * @returns Delta Y between the given point and its neighbor at the right\n   */\n  private _getDeltaX(x: number, y: number) {\n    const { grayscalePixelData: data, width } = this;\n    let index = this._getPointIndex(y, x);\n\n    // If it is at the end, back up one\n    if (x + 1 === width) {\n      index--;\n    }\n\n    return data[index + 1] - data[index];\n  }\n\n  /**\n   * Calculate the delta Y between a given point and its neighbor at the bottom\n   * @param x - Point x-coordinate\n   * @param y - Point y-coordinate\n   * @returns Delta Y between the given point and its neighbor at the bottom\n   */\n  private _getDeltaY(x: number, y: number) {\n    const { grayscalePixelData: data, width, height } = this;\n    let index = this._getPointIndex(y, x);\n\n    // If it is at the end, back up one\n    if (y + 1 === height) {\n      index -= height;\n    }\n\n    return data[index] - data[index + width];\n  }\n\n  private _getGradientMagnitude(x: number, y: number): number {\n    const dx = this._getDeltaX(x, y);\n    const dy = this._getDeltaY(x, y);\n\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   *  Calculate the Laplacian of Gaussian (LoG) value for a given pixel\n   *\n   *     Kernel Indexes           Laplacian of Gaussian Kernel\n   *   __  __  02  __  __              0   0   1   0   0\n   *   __  11  12  13  __              0   1   2   1   0\n   *   20  21  22  23  24              1   2 -16   2   1\n   *   __  31  32  33  __              0   1   2   1   0\n   *   __  __  42  __  __              0   0   1   0   0\n   */\n  private _getLaplace(x: number, y: number): number {\n    const { grayscalePixelData: data, _getPointIndex: index } = this;\n\n    // Points related to the kernel indexes\n    const p02 = data[index(y - 2, x)];\n    const p11 = data[index(y - 1, x - 1)];\n    const p12 = data[index(y - 1, x)];\n    const p13 = data[index(y - 1, x + 1)];\n    const p20 = data[index(y, x - 2)];\n    const p21 = data[index(y, x - 1)];\n    const p22 = data[index(y, x)];\n    const p23 = data[index(y, x + 1)];\n    const p24 = data[index(y, x + 2)];\n    const p31 = data[index(y + 1, x - 1)];\n    const p32 = data[index(y + 1, x)];\n    const p33 = data[index(y + 1, x + 1)];\n    const p42 = data[index(y + 2, x)];\n\n    // Laplacian of Gaussian\n    let lap = p02;\n    lap += p11 + 2 * p12 + p13;\n    lap += p20 + 2 * p21 - 16 * p22 + 2 * p23 + p24;\n    lap += p31 + 2 * p32 + p33;\n    lap += p42;\n\n    return lap;\n  }\n\n  /**\n   * Returns a 2D array of gradient magnitude values for grayscale. The values\n   * are scaled between 0 and 1, and then flipped, so that it works as a cost\n   * function.\n   * @returns A gradient object\n   */\n  private _computeGradient(): Float32Array {\n    const { width, height } = this;\n    const gradient = new Float32Array(width * height);\n\n    let pixelIndex = 0;\n    let max = 0;\n    let x = 0;\n    let y = 0;\n\n    for (y = 0; y < height - 1; y++) {\n      for (x = 0; x < width - 1; x++) {\n        gradient[pixelIndex] = this._getGradientMagnitude(x, y);\n        max = Math.max(gradient[pixelIndex], max);\n        pixelIndex++;\n      }\n\n      // Make the last column the same as the previous one because there is\n      // no way to calculate `dx` since x+1 gets out of bounds\n      gradient[pixelIndex] = gradient[pixelIndex - 1];\n      pixelIndex++;\n    }\n\n    // Make the last row the same as the previous one because there is\n    // no way to calculate `dy` since y+1 gets out of bounds\n    for (let len = gradient.length; pixelIndex < len; pixelIndex++) {\n      gradient[pixelIndex] = gradient[pixelIndex - width];\n    }\n\n    // Flip and scale\n    for (let i = 0, len = gradient.length; i < len; i++) {\n      gradient[i] = 1 - gradient[i] / max;\n    }\n\n    return gradient;\n  }\n\n  /**\n   * Returns a 2D array of Laplacian of Gaussian values\n   *\n   * @param grayscale - The input grayscale\n   * @returns A laplace object\n   */\n  private _computeLaplace(): Float32Array {\n    const { width, height, _getPointIndex: index } = this;\n    const laplace = new Float32Array(width * height);\n\n    // Make the first two rows low cost\n    laplace.fill(1, 0, index(2, 0));\n\n    for (let y = 2; y < height - 2; y++) {\n      // Make the first two columns low cost\n      laplace[index(y, 0)] = 1;\n      laplace[index(y, 1)] = 1;\n\n      for (let x = 2; x < width - 2; x++) {\n        // Threshold needed to get rid of clutter.\n        laplace[index(y, x)] = this._getLaplace(x, y) > 0.33 ? 0 : 1;\n      }\n\n      // Make the last two columns low cost\n      laplace[index(y, width - 2)] = 1;\n      laplace[index(y, width - 1)] = 1;\n    }\n\n    // Make the last two rows low cost\n    laplace.fill(1, index(height - 2, 0));\n\n    return laplace;\n  }\n\n  /**\n   * Returns 2D array of x-gradient values for grayscale\n   *\n   * @param grayscale - Grayscale pixel data\n   * @returns 2D x-gradient array\n   */\n  private _computeGradientX(): Float32Array {\n    const { width, height } = this;\n    const gradX = new Float32Array(width * height);\n    let pixelIndex = 0;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width - 1; x++) {\n        gradX[pixelIndex++] = this._getDeltaX(x, y);\n      }\n\n      // Make the last column the same as the previous one because there is\n      // no way to calculate `dx` since x+1 gets out of bounds\n      gradX[pixelIndex] = gradX[pixelIndex - 1];\n      pixelIndex++;\n    }\n\n    return gradX;\n  }\n\n  /**\n   * Compute the Y gradient.\n   *\n   * @param grayscale - Grayscale pixel data\n   * @returns 2D array of y-gradient values for grayscale\n   */\n  private _computeGradientY(): Float32Array {\n    const { width, height } = this;\n    const gradY = new Float32Array(width * height);\n    let pixelIndex = 0;\n\n    for (let y = 0; y < height - 1; y++) {\n      for (let x = 0; x < width; x++) {\n        gradY[pixelIndex++] = this._getDeltaY(x, y);\n      }\n    }\n\n    // Make the last row the same as the previous one because there is\n    // no way to calculate `dy` since y+1 gets out of bounds\n    for (let len = gradY.length; pixelIndex < len; pixelIndex++) {\n      gradY[pixelIndex] = gradY[pixelIndex - width];\n    }\n\n    return gradY;\n  }\n\n  /**\n   * Compute the gradient unit vector.\n   * @param px - Point x-coordinate\n   * @param py - Point y-coordinate\n   * @returns Gradient vector at (px, py), scaled to a magnitude of 1\n   */\n  private _getGradientUnitVector(px: number, py: number) {\n    const { gradXNew, gradYNew, _getPointIndex: index } = this;\n\n    const pointGradX = gradXNew[index(py, px)];\n    const pointGradY = gradYNew[index(py, px)];\n    let gradVecLen = Math.sqrt(\n      pointGradX * pointGradX + pointGradY * pointGradY\n    );\n\n    // To avoid possible divide-by-0 errors\n    gradVecLen = Math.max(gradVecLen, 1e-100);\n\n    return [pointGradX / gradVecLen, pointGradY / gradVecLen];\n  }\n\n  /**\n   * Compute the gradiant direction, in radians, between to points\n   *\n   * @param px - Point `p` x-coordinate of point p.\n   * @param py - Point `p` y-coordinate of point p.\n   * @param qx - Point `q` x-coordinate of point q.\n   * @param qy - Point `q` y-coordinate of point q.\n   * @returns Gradient direction\n   */\n  private _getGradientDirection(\n    px: number,\n    py: number,\n    qx: number,\n    qy: number\n  ): number {\n    const dgpUnitVec = this._getGradientUnitVector(px, py);\n    const gdqUnitVec = this._getGradientUnitVector(qx, qy);\n\n    let dp = dgpUnitVec[1] * (qx - px) - dgpUnitVec[0] * (qy - py);\n    let dq = gdqUnitVec[1] * (qx - px) - gdqUnitVec[0] * (qy - py);\n\n    // Make sure dp is positive, to keep things consistent\n    if (dp < 0) {\n      dp = -dp;\n      dq = -dq;\n    }\n\n    if (px !== qx && py !== qy) {\n      // It's going diagonally between pixels\n      dp *= Math.SQRT1_2;\n      dq *= Math.SQRT1_2;\n    }\n\n    return TWO_THIRD_PI * (Math.acos(dp) + Math.acos(dq));\n  }\n\n  /**\n   * Return a weighted distance between two points\n   */\n  private _getWeightedDistance(pointA: Types.Point2, pointB: Types.Point2) {\n    const { _getPointIndex: index } = this;\n    const [aX, aY] = pointA;\n    const [bX, bY] = pointB;\n    const bIndex = index(bY, bX);\n\n    // Weighted distance function\n    let gradient = this.gradMagnitude[bIndex];\n\n    if (aX === bX || aY === bY) {\n      // The distance is Euclidean-ish; non-diagonal edges should be shorter\n      gradient *= Math.SQRT1_2;\n    }\n\n    const laplace = this.laplace[bIndex];\n    const direction = this._getGradientDirection(aX, aY, bX, bY);\n\n    return 0.43 * gradient + 0.43 * laplace + 0.11 * direction;\n  }\n\n  /**\n   * Get up to 8 neighbors points\n   * @param point - Reference point\n   * @returns Up to eight neighbor points\n   */\n  private _getNeighborPoints(point: Types.Point2): Types.Point2[] {\n    const { width, height } = this;\n    const list: Types.Point2[] = [];\n\n    const sx = Math.max(point[0] - 1, 0);\n    const sy = Math.max(point[1] - 1, 0);\n    const ex = Math.min(point[0] + 1, width - 1);\n    const ey = Math.min(point[1] + 1, height - 1);\n\n    for (let y = sy; y <= ey; y++) {\n      for (let x = sx; x <= ex; x++) {\n        if (x !== point[0] || y !== point[1]) {\n          list.push([x, y]);\n        }\n      }\n    }\n\n    return list;\n  }\n\n  private _getPointCost = (pointIndex: number): number => {\n    return Math.round(this.searchGranularity * this.costs[pointIndex]);\n  };\n\n  /**\n   * Create a livewire scissor instance from RAW pixel data\n   * @param pixelData - Raw pixel data\n   * @param width - Width of the image\n   * @param height - Height of the image\n   * @param voiRange - VOI Range\n   * @returns A LivewireScissors instance\n   */\n  public static createInstanceFromRawPixelData(\n    pixelData: Float32Array,\n    width: number,\n    height: number,\n    voiRange: Types.VOIRange\n  ) {\n    const numPixels = pixelData.length;\n    const grayscalePixelData = new Float32Array(numPixels);\n    const { lower: minPixelValue, upper: maxPixelValue } = voiRange;\n    const pixelRange = maxPixelValue - minPixelValue;\n\n    for (let i = 0, len = pixelData.length; i < len; i++) {\n      // Grayscale values must be between 0 and 1\n      grayscalePixelData[i] = Math.max(\n        0,\n        Math.min(1, (pixelData[i] - minPixelValue) / pixelRange)\n      );\n    }\n\n    return new LivewireScissors(grayscalePixelData, width, height);\n  }\n\n  /**\n   * Create a livewire scissor instance from a RGBA image\n   * @param rgbaPixelData - RGBA pixel data\n   * @param width - Width of the image\n   * @param height - Height of the image\n   * @returns A LivewireScissors instance\n   */\n  public static createInstanceFromRGBAPixelData(\n    rgbaPixelData: Uint8ClampedArray,\n    width: number,\n    height: number\n  ): LivewireScissors {\n    const numPixels = rgbaPixelData.length / 4;\n    const grayscalePixelData = new Float32Array(numPixels);\n\n    // Multiplier to average an RGB sum and convert it to 0-1 range.\n    // 1/x because multiplication is faster than division.\n    const avgMultiplier = 1 / (3 * 255);\n\n    for (let i = 0, offset = 0; i < numPixels; i++, offset += 4) {\n      const red = rgbaPixelData[offset];\n      const green = rgbaPixelData[offset];\n      const blue = rgbaPixelData[offset];\n\n      grayscalePixelData[i] = (red + green + blue) * avgMultiplier;\n    }\n\n    return new LivewireScissors(grayscalePixelData, width, height);\n  }\n}\n","import { Types } from '@cornerstonejs/core';\n/**\n * Path that contains points and control points to draw a path\n * used by the livewire tool\n */\nexport class LivewirePath {\n  /**\n   * List of points.\n   */\n  public pointArray: Types.Point2[];\n\n  /**\n   * List of control points indexes\n   */\n  private _controlPointIndexes: number[];\n\n  /**\n   * @param inputPointArray - The list of Point2D that make the path (optional).\n   * @param inputControlPointIndexArray - The list of control point of path, as indexes (optional).\n   *   Note: first and last point do not need to be equal.\n   */\n  constructor(\n    inputPointArray?: Types.Point2[],\n    inputControlPointIndexArray?: number[]\n  ) {\n    this.pointArray = inputPointArray ? inputPointArray.slice() : [];\n    this._controlPointIndexes = inputControlPointIndexArray\n      ? inputControlPointIndexArray.slice()\n      : [];\n  }\n\n  /**\n   * Get a point of the list.\n   *\n   * @param index - The index of the point to get\n   * @returns The Point2D at the given index.\n   */\n  public getPoint(index: number): Types.Point2 {\n    return this.pointArray[index];\n  }\n\n  /**\n   * Get the last point of the list.\n   *\n   * @returns The last point of the list.\n   */\n  public getLastPoint(): Types.Point2 {\n    return this.pointArray[this.pointArray.length - 1];\n  }\n\n  /**\n   * Is the given point a control point.\n   *\n   * @param point - The 2D point to check.\n   * @returns True if a control point, false otherwise.\n   */\n  public isControlPoint(point: Types.Point2): boolean {\n    const index = this.pointArray.indexOf(point);\n    if (index !== -1) {\n      return this._controlPointIndexes.indexOf(index) !== -1;\n    } else {\n      throw new Error('Error: isControlPoint called with not in list point.');\n    }\n  }\n\n  /**\n   * Add a point to the path.\n   *\n   * @param point - The 2D point to add.\n   */\n  public addPoint(point: Types.Point2) {\n    this.pointArray.push(point);\n  }\n\n  /**\n   * Add a control point to the path.\n   *\n   * @param point - The 2D point to make a control point.\n   */\n  public addControlPoint(point: Types.Point2) {\n    const index = this.pointArray.indexOf(point);\n\n    if (index !== -1) {\n      this._controlPointIndexes.push(index);\n    } else {\n      throw new Error('Cannot mark a non registered point as control point.');\n    }\n  }\n\n  public getControlPoints() {\n    return this._controlPointIndexes.map((i) => this.pointArray[i]);\n  }\n\n  public getNumControlPoints(): number {\n    return this._controlPointIndexes.length;\n  }\n\n  public removeLastControlPoint(): void {\n    if (this._controlPointIndexes.length) {\n      this._controlPointIndexes.pop();\n    }\n  }\n\n  /**\n   * Add points to the path.\n   *\n   * @param newPointArray - The list of 2D points to add.\n   */\n  public addPoints(newPointArray: Types.Point2[]) {\n    this.pointArray = this.pointArray.concat(newPointArray);\n  }\n\n  /**\n   * Prepend a path to this one.\n   *\n   * @param other - The path to append.\n   */\n  public prependPath(other: LivewirePath): void {\n    const otherSize = other.pointArray.length;\n    const shiftedIndexArray: number[] = [];\n\n    this.pointArray = other.pointArray.concat(this.pointArray);\n\n    for (let i = 0; i < this._controlPointIndexes.length; ++i) {\n      shiftedIndexArray[i] = this._controlPointIndexes[i] + otherSize;\n    }\n\n    this._controlPointIndexes =\n      other._controlPointIndexes.concat(shiftedIndexArray);\n  }\n}\n","import { vec3 } from 'gl-matrix';\nimport { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n  StackViewport,\n  VolumeViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { math, triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { LivewireContourAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2; // px\n\nclass LivewireContourTool extends AnnotationTool {\n  public static toolName: string;\n  private scissors: LivewireScissors;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: LivewireContourAnnotation;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    lastCanvasPoint?: Types.Point2;\n    confirmedPath?: LivewirePath;\n    currentPath?: LivewirePath;\n    closed?: boolean;\n    worldToSlice?: (point: Types.Point3) => Types.Point2;\n    sliceToWorld?: (point: Types.Point2) => Types.Point3;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LivewireContourAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const { world: worldPos, canvas: canvasPos } = currentPoints;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    const defaultActor = viewport.getDefaultActor();\n\n    if (!defaultActor || !csUtils.isImageActor(defaultActor)) {\n      throw new Error('Default actor must be an image actor');\n    }\n\n    const viewportImageData = viewport.getImageData();\n    const { imageData: vtkImageData } = viewportImageData;\n    let worldToSlice: (point: Types.Point3) => Types.Point2;\n    let sliceToWorld: (point: Types.Point2) => Types.Point3;\n    let scalarData;\n    let width;\n    let height;\n\n    if (viewport instanceof StackViewport) {\n      scalarData = viewportImageData.scalarData;\n      width = viewportImageData.dimensions[0];\n      height = viewportImageData.dimensions[1];\n\n      // Method only to simplify the code making stack and volume viewports code\n      // similar and avoiding `if(stack)/else` whenever a coordinate needs to be\n      // transformed because `worldToSlice` in this case returns the same IJK\n      // coordinate from index space.\n      worldToSlice = (point: Types.Point3) => {\n        const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n        return [ijkPoint[0], ijkPoint[1]];\n      };\n\n      // Method only to simplify the code making stack and volume viewports code\n      // similar and avoiding `if(stack)/else` whenever a coordinate needs to be\n      // transformed because `sliceToWorld` in this case receives the same IJK\n      // coordinate from index space.\n      sliceToWorld = (point: Types.Point2) =>\n        csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n    } else if (viewport instanceof VolumeViewport) {\n      const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n      const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n\n      worldToSlice = (point: Types.Point3) => {\n        const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n        const slicePoint = vec3.transformMat4(\n          [0, 0, 0],\n          ijkPoint,\n          indexToSliceMatrix\n        );\n\n        return [slicePoint[0], slicePoint[1]];\n      };\n\n      sliceToWorld = (point: Types.Point2) => {\n        const ijkPoint = vec3.transformMat4(\n          [0, 0, 0],\n          [point[0], point[1], 0],\n          sliceToIndexMatrix\n        ) as Types.Point3;\n\n        return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n      };\n\n      scalarData = sliceImageData.scalarData;\n      width = sliceImageData.width;\n      height = sliceImageData.height;\n    } else {\n      throw new Error('Viewport not supported');\n    }\n\n    const { voiRange } = viewport.getProperties();\n    const startPos = worldToSlice(worldPos);\n\n    this.scissors = LivewireScissors.createInstanceFromRawPixelData(\n      scalarData,\n      width,\n      height,\n      voiRange\n    );\n\n    this.scissors.startSearch(startPos);\n\n    const confirmedPath = new LivewirePath();\n    const currentPath = new LivewirePath();\n\n    confirmedPath.addPoint(startPos);\n    confirmedPath.addControlPoint(startPos);\n\n    const annotation: LivewireContourAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        polyline: [],\n        handles: {\n          points: [[...worldPos]],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n      lastCanvasPoint: canvasPos,\n      confirmedPath: confirmedPath,\n      currentPath: currentPath,\n      closed: false,\n      worldToSlice,\n      sliceToWorld,\n    };\n\n    this._activateDraw(element);\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LivewireContourAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const proximitySquared = proximity * proximity;\n    const canvasPoints = annotation.data.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n\n    let startPoint = canvasPoints[canvasPoints.length - 1];\n\n    for (let i = 0; i < canvasPoints.length; i++) {\n      const endPoint = canvasPoints[i];\n      const distanceToPointSquared = math.lineSegment.distanceToPointSquared(\n        startPoint,\n        endPoint,\n        canvasCoords\n      );\n\n      if (distanceToPointSquared <= proximitySquared) {\n        return true;\n      }\n\n      startPoint = endPoint;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LivewireContourAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n    };\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._activateModify(element);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LivewireContourAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const { points } = data.handles;\n    const handleIndex = points.findIndex((p) => p === handle);\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.scissors = null;\n    this.isDrawing = false;\n  };\n\n  private _mouseDownCallback = (evt: EventTypes.InteractionEventType): void => {\n    const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n    const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld } =\n      this.editData;\n\n    if (this.editData.closed) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const controlPoints = this.editData.currentPath.getControlPoints();\n    let closePath = controlPoints.length >= 2 && doubleClick;\n\n    // Check if user clicked on the first point to close the curve\n    if (controlPoints.length >= 2) {\n      const closestHandlePoint = {\n        index: -1,\n        distSquared: Infinity,\n      };\n\n      // Check if there is a control point close to the cursor\n      for (let i = 0, len = controlPoints.length; i < len; i++) {\n        const controlPoint = controlPoints[i];\n        const worldControlPoint = sliceToWorld(controlPoint);\n        const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n\n        const distSquared = math.point.distanceToPointSquared(\n          canvasPos,\n          canvasControlPoint\n        );\n\n        if (\n          distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n          distSquared < closestHandlePoint.distSquared\n        ) {\n          closestHandlePoint.distSquared = distSquared;\n          closestHandlePoint.index = i;\n        }\n      }\n\n      if (closestHandlePoint.index === 0) {\n        closePath = true;\n      }\n    }\n\n    this.editData.closed = this.editData.closed || closePath;\n    this.editData.confirmedPath = this.editData.currentPath;\n\n    // Add the current cursor position as a new control point after clicking\n    this.editData.confirmedPath.addControlPoint(\n      this.editData.currentPath.getLastPoint()\n    );\n\n    // Start a new search starting at the last control point\n    this.scissors.startSearch(worldToSlice(worldPos));\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (this.editData.closed) {\n      // Update the annotation because `editData` will be set to null\n      this._updateAnnotation(element, this.editData.confirmedPath);\n      this._endCallback(evt);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    const { element, currentPoints } = evt.detail;\n    const { world: worldPos, canvas: canvasPos } = currentPoints;\n    const { renderingEngine } = getEnabledElement(element);\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData.lastCanvasPoint = canvasPos;\n\n    const { width: imgWidth, height: imgHeight } = this.scissors;\n    const { worldToSlice } = this.editData;\n    const slicePoint: Types.Point2 = worldToSlice(worldPos);\n\n    // Check if the point is inside the bounding box\n    if (\n      slicePoint[0] < 0 ||\n      slicePoint[1] < 0 ||\n      slicePoint[0] >= imgWidth ||\n      slicePoint[1] >= imgHeight\n    ) {\n      return;\n    }\n\n    const pathPoints = this.scissors.findPathToPoint(slicePoint);\n    const currentPath = new LivewirePath();\n\n    for (let i = 0, len = pathPoints.length; i < len; i++) {\n      currentPath.addPoint(pathPoints[i]);\n    }\n\n    // Merge the \"confirmed\" path that goes from the first control point to the\n    // last one with the current path that goes from the last control point to\n    // the cursor point\n    currentPath.prependPath(this.editData.confirmedPath);\n\n    // Store the new path\n    this.editData.currentPath = currentPath;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.polyline;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is not in mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    if (newAnnotation) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData = null;\n    this.scissors = null;\n    return annotation.annotationUID;\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: LivewireContourAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  private _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.addEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  private _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.removeEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { element } = viewport;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const newAnnotation = this.editData?.newAnnotation;\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Update the annotation that is in editData (being edited)\n    this._updateAnnotation(element, this.editData?.currentPath);\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LivewireContourAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle(\n        'lineWidth',\n        styleSpecifier,\n        annotation\n      ) as number;\n      const lineDash = this.getStyle(\n        'lineDash',\n        styleSpecifier,\n        annotation\n      ) as string;\n      const color = this.getStyle(\n        'color',\n        styleSpecifier,\n        annotation\n      ) as string;\n\n      const canvasCoordinates = points.map((p) =>\n        worldToCanvas(p)\n      ) as Types.Point2[];\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      // Render the first control point only when the annotaion is drawn for the\n      // first time to make it easier to know where the user needs to click to\n      // to close the ROI.\n      if (\n        newAnnotation &&\n        annotation.annotationUID === this.editData?.annotation?.annotationUID\n      ) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          [canvasCoordinates[0]],\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const canvasPolyline = data.polyline.map((worldPoint) =>\n        viewport.worldToCanvas(worldPoint)\n      );\n\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        'polyline',\n        canvasPolyline,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n      annotation.invalidated = false;\n    }\n\n    return renderStatus;\n  };\n\n  private _updateAnnotation(\n    element: HTMLDivElement,\n    livewirePath: LivewirePath\n  ) {\n    if (!this.editData || !livewirePath) {\n      return;\n    }\n\n    const { pointArray: imagePoints } = livewirePath;\n    const worldPolylinePoints: Types.Point3[] = [];\n    const { sliceToWorld } = this.editData;\n\n    for (let i = 0, len = imagePoints.length; i < len; i++) {\n      const imagePoint = imagePoints[i];\n      const worldPoint = sliceToWorld(imagePoint);\n      worldPolylinePoints.push(worldPoint);\n    }\n\n    if (worldPolylinePoints.length > 1) {\n      worldPolylinePoints.push([...worldPolylinePoints[0]]);\n    }\n\n    this.editData.annotation.data.polyline = worldPolylinePoints;\n  }\n}\n\nLivewireContourTool.toolName = 'LivewireContour';\nexport default LivewireContourTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawArrow as drawArrowSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ArrowAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass ArrowAnnotateTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        getTextCallback,\n        changeTextCallback,\n        preventHandleOutsideImage: false,\n        arrowFirst: true,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ArrowAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const { arrowFirst } = this.configuration;\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          arrowFirst,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: ArrowAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId, renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    if (newAnnotation) {\n      this.configuration.getTextCallback((text) => {\n        if (!text) {\n          removeAnnotation(annotation.annotationUID);\n          triggerAnnotationRenderForViewportIds(\n            renderingEngine,\n            viewportIdsToRender\n          );\n          this.editData = null;\n          this.isDrawing = false;\n          return;\n        }\n        annotation.data.text = text;\n\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n      });\n    } else {\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  touchTapCallback = (evt: EventTypes.TouchTapEventType) => {\n    if (evt.detail.taps == 2) {\n      this.doubleClickCallback(evt);\n    }\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as ArrowAnnotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as ArrowAnnotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ArrowAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles, text } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      const arrowUID = '1';\n      if (this.configuration.arrowFirst) {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[1],\n          canvasCoordinates[0],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      } else {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!text) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      // Need to update to sync w/ annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the point that doesn't have the arrowhead by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        [text],\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport roundNumber from '../../utilities/roundNumber';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass AngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n    if (!point3) {\n      return false;\n    }\n\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n\n    const line2 = {\n      start: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n      end: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n    };\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 2;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 3 anchor points (actually 4 because of the center point)\n      if (canvasCoordinates.length !== 3) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[1],\n        canvasCoordinates[2],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all three anchors bail out\n    if (data.handles.points.length !== 3) {\n      return;\n    }\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(\n        [worldPos1, worldPos2],\n        [worldPos2, worldPos3]\n      );\n\n      cachedStats[targetId] = {\n        angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  const textLines = [`${roundNumber(angle)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Return the midpoint (think average) of all the provided points.\n */\nconst midPoint = (\n  ...args: (Types.Point2 | Types.Point3)[]\n): Types.Point2 | Types.Point3 => {\n  const ret =\n    args[0].length === 2 ? <Types.Point2>[0, 0] : <Types.Point3>[0, 0, 0];\n  const len = args.length;\n  for (const arg of args) {\n    ret[0] += arg[0] / len;\n    ret[1] += arg[1] / len;\n    if (ret.length === 3) {\n      ret[2] += arg[2] / len;\n    }\n  }\n  return ret;\n};\n\nconst midPoint2 = midPoint as (...args: Types.Point2[]) => Types.Point2;\n\nexport default midPoint;\n\nexport { midPoint2 };\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CobbAngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass CobbAngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    isNearFirstLine?: boolean;\n    isNearSecondLine?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      25,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): CobbAngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CobbAngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n      viewport,\n      points: data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    interactionType: InteractionTypes,\n    canvasCoords: Types.Point2,\n    proximity = 6\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n      viewport,\n      points: annotation.data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    handle: ToolHandle,\n    interactionType = 'mouse'\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _mouseUpCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n      resetElementCursor(element);\n\n      // adds the first point of the second line\n      this.editData.handleIndex = data.handles.points.length;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * Handles the mouse down for all points that follow the very first mouse down.\n   * The very first mouse down is handled by addAnnotation.\n   * This method ensures that the state of the tool is correct for the drawing of the second line segment.\n   * In particular it ensures that the second segment can be created via a mouse down and drag.\n   */\n  _mouseDownCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const { annotation, handleIndex } = this.editData;\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const worldPos = currentPoints.world;\n    const { data } = annotation;\n\n    if (handleIndex === 1) {\n      // This is the mouse down for the second point of the first segment.\n      // The mouse up takes care of adding the first point of the second segment.\n      data.handles.points[1] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[1][0] !== data.handles.points[0][0] ||\n        data.handles.points[1][1] !== data.handles.points[0][0];\n      return;\n    }\n\n    if (handleIndex === 3) {\n      // This is the mouse down for the second point of the second segment (i.e. the last point)\n      data.handles.points[3] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[3][0] !== data.handles.points[2][0] ||\n        data.handles.points[3][1] !== data.handles.points[2][0];\n\n      this.angleStartedNotYetCompleted = false;\n      return;\n    }\n\n    // This is the first mouse down of the first point of the second line segment.\n    // It is as if we have not moved yet because Cobb Angle has two, disjoint sections, each with its own move.\n    this.editData.hasMoved = false;\n    hideElementCursor(element);\n\n    // Add the last segment points for the subsequent drag/mouse move.\n    data.handles.points[2] = data.handles.points[3] = worldPos;\n    this.editData.handleIndex = data.handles.points.length - 1;\n  };\n\n  _mouseDragCallback = (\n    evt: EventTypes.MouseDragEventType | EventTypes.MouseMoveEventType\n  ) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n      isNearFirstLine,\n      isNearSecondLine,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (\n      handleIndex === undefined &&\n      (isNearFirstLine || isNearSecondLine)\n    ) {\n      // select tool mode - moving annotation\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      // separate the logic for moving handles to move them separately\n      if (isNearFirstLine) {\n        const firstLinePoints = [points[0], points[1]];\n        firstLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      } else if (isNearSecondLine) {\n        const secondLinePoints = [points[2], points[3]];\n        secondLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      }\n\n      annotation.invalidated = true;\n    } else {\n      // Drag handle mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    if (data.handles.points.length < 4) {\n      // If it is mid-draw\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.angleStartedNotYetCompleted = false;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CobbAngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n          arc1Angle: null,\n          arc2Angle: null,\n          points: {\n            world: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n            canvas: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n          },\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const firstLine = [canvasCoordinates[0], canvasCoordinates[1]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n      const secondLine = [canvasCoordinates[2], canvasCoordinates[3]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n\n      let lineUID = 'line1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        firstLine[0],\n        firstLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add the stats until annotation has 4 anchor points\n      if (canvasCoordinates.length < 4) {\n        return renderStatus;\n      }\n\n      lineUID = 'line2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        secondLine[0],\n        secondLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      lineUID = 'linkLine';\n      const mid1 = midPoint2(firstLine[0], firstLine[1]);\n      const mid2 = midPoint2(secondLine[0], secondLine[1]);\n      drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n        color,\n        lineWidth: '1',\n        lineDash: '1,4',\n      });\n\n      // Calculating the arcs\n\n      const { arc1Start, arc1End, arc2End, arc2Start } =\n        data.cachedStats[targetId].points.canvas;\n      const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n\n      lineUID = 'arc1';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        arc1Start as Types.Point2,\n        arc1End as Types.Point2,\n        {\n          color,\n          lineWidth: '1',\n        }\n      );\n\n      lineUID = 'arc2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        arc2Start as Types.Point2,\n        arc2End as Types.Point2,\n        {\n          color,\n          lineWidth: '1',\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = 'cobbAngleText';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n\n      const arc1TextBoxUID = 'arcAngle1';\n\n      const arc1TextLine = [\n        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n      ];\n\n      const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        arc1TextBoxUID,\n        arc1TextLine,\n        arch1TextPosCanvas,\n        {\n          ...options,\n          padding: 3,\n        }\n      );\n\n      const arc2TextBoxUID = 'arcAngle2';\n\n      const arc2TextLine = [\n        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n      ];\n\n      const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        arc2TextBoxUID,\n        arc2TextLine,\n        arch2TextPosCanvas,\n        {\n          ...options,\n          padding: 3,\n        }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all four anchors bail out\n    if (data.handles.points.length !== 4) {\n      return;\n    }\n\n    const seg1: [Types.Point3, Types.Point3] = [null, null];\n    const seg2: [Types.Point3, Types.Point3] = [null, null];\n    let minDist = Number.MAX_VALUE;\n\n    // Order the endpoints of each line segment such that seg1[1] and seg2[0]\n    // are the closest (Euclidean distance-wise) to each other. Thus\n    // the angle formed between the vectors seg1[1]->seg1[0] and seg2[0]->seg[1]\n    // is calculated.\n    // The assumption here is that the Cobb angle line segments are drawn\n    // such that the segments intersect nearest the segment endpoints\n    // that are closest AND those closest endpoints are the tails of the\n    // vectors used to calculate the angle between the vectors/line segments.\n    for (let i = 0; i < 2; i += 1) {\n      for (let j = 2; j < 4; j += 1) {\n        const dist = vec3.distance(\n          data.handles.points[i],\n          data.handles.points[j]\n        );\n        if (dist < minDist) {\n          minDist = dist;\n          seg1[1] = data.handles.points[i];\n          seg1[0] = data.handles.points[(i + 1) % 2];\n          seg2[0] = data.handles.points[j];\n          seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n        }\n      }\n    }\n    const { viewport } = enabledElement;\n\n    const canvasPoints = data.handles.points.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n\n    const firstLine = [canvasPoints[0], canvasPoints[1]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n    const secondLine = [canvasPoints[2], canvasPoints[3]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const mid1 = midPoint2(firstLine[0], firstLine[1]);\n    const mid2 = midPoint2(secondLine[0], secondLine[1]);\n\n    const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } =\n      this.getArcsStartEndPoints({\n        firstLine,\n        secondLine,\n        mid1,\n        mid2,\n      });\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      cachedStats[targetId] = {\n        angle: angleBetweenLines(seg1, seg2),\n        arc1Angle,\n        arc2Angle,\n        points: {\n          canvas: {\n            arc1Start,\n            arc1End,\n            arc2End,\n            arc2Start,\n          },\n          world: {\n            arc1Start: viewport.canvasToWorld(arc1Start),\n            arc1End: viewport.canvasToWorld(arc1End),\n            arc2End: viewport.canvasToWorld(arc2End),\n            arc2Start: viewport.canvasToWorld(arc2Start),\n          },\n        },\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n    const [point1, point2, point3, point4] = points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n    const canvasPoint4 = viewport.worldToCanvas(point4);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const line2 = {\n      start: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n      end: {\n        x: canvasPoint4[0],\n        y: canvasPoint4[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    let isNearFirstLine = false;\n    let isNearSecondLine = false;\n\n    if (distanceToPoint <= proximity) {\n      isNearFirstLine = true;\n    } else if (distanceToPoint2 <= proximity) {\n      isNearSecondLine = true;\n    }\n    return {\n      distanceToPoint,\n      distanceToPoint2,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n  };\n\n  getArcsStartEndPoints = ({\n    firstLine,\n    secondLine,\n    mid1,\n    mid2,\n  }): {\n    arc1Start: Types.Point2;\n    arc1End: Types.Point2;\n    arc2Start: Types.Point2;\n    arc2End: Types.Point2;\n    arc1Angle: number;\n    arc2Angle: number;\n  } => {\n    const linkLine = [mid1, mid2] as [Types.Point2, Types.Point2];\n\n    const arc1Angle = angleBetweenLines(firstLine, linkLine);\n    const arc2Angle = angleBetweenLines(secondLine, linkLine);\n\n    const arc1Side = arc1Angle > 90 ? 1 : 0;\n    const arc2Side = arc2Angle > 90 ? 0 : 1;\n\n    const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n\n    const linkLineLength = Math.sqrt(\n      (linkLine[1][0] - linkLine[0][0]) ** 2 +\n        (linkLine[1][1] - linkLine[0][1]) ** 2\n    );\n    const ratio = 0.1; // 10% of the line length\n\n    const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n    const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n\n    // For arc1Start\n    const directionVectorStartArc1 = [\n      firstLine[arc1Side][0] - midFirstLine[0],\n      firstLine[arc1Side][1] - midFirstLine[1],\n    ];\n    const magnitudeStartArc1 = Math.sqrt(\n      directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2\n    );\n    const normalizedDirectionStartArc1 = [\n      directionVectorStartArc1[0] / magnitudeStartArc1,\n      directionVectorStartArc1[1] / magnitudeStartArc1,\n    ];\n    const arc1Start = [\n      midFirstLine[0] +\n        normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n      midFirstLine[1] +\n        normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Existing logic for arc1End\n    const directionVectorEndArc1 = [\n      midLinkLine[0] - mid1[0],\n      midLinkLine[1] - mid1[1],\n    ];\n    const magnitudeEndArc1 = Math.sqrt(\n      directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2\n    );\n    const normalizedDirectionEndArc1 = [\n      directionVectorEndArc1[0] / magnitudeEndArc1,\n      directionVectorEndArc1[1] / magnitudeEndArc1,\n    ];\n    const arc1End = [\n      mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n      mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2Start\n    const directionVectorStartArc2 = [\n      secondLine[arc2Side][0] - midSecondLine[0],\n      secondLine[arc2Side][1] - midSecondLine[1],\n    ];\n    const magnitudeStartArc2 = Math.sqrt(\n      directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2\n    );\n    const normalizedDirectionStartArc2 = [\n      directionVectorStartArc2[0] / magnitudeStartArc2,\n      directionVectorStartArc2[1] / magnitudeStartArc2,\n    ];\n    const arc2Start = [\n      midSecondLine[0] +\n        normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n      midSecondLine[1] +\n        normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2End\n    const directionVectorEndArc2 = [\n      midLinkLine[0] - mid2[0],\n      midLinkLine[1] - mid2[1],\n    ];\n    const magnitudeEndArc2 = Math.sqrt(\n      directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2\n    );\n    const normalizedDirectionEndArc2 = [\n      directionVectorEndArc2[0] / magnitudeEndArc2,\n      directionVectorEndArc2[1] / magnitudeEndArc2,\n    ];\n    const arc2End = [\n      mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n      mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    return {\n      arc1Start,\n      arc1End,\n      arc2Start,\n      arc2End,\n      arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n      arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n    };\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  StackViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { UltrasoundDirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  drawHandle as drawHandleSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { roundNumber } from '../../utilities';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  InteractionTypes,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * The `UltrasoundDirectionalTool` class is a tool for creating directional ultrasound annotations.\n * It allows users to draw lines and measure distances between two points in the image.\n * It automatically calculates the distance based on the relevant unit of measurement.\n */\nclass UltrasoundDirectionalTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  startedDrawing: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        /**\n         * Determines whether both horizontal and vertical distances should be displayed\n         * in the text lines when generating annotations' measurement information.\n         */\n        displayBothAxesDistances: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Ultrasound Directional Tool and store it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): UltrasoundDirectionalAnnotation => {\n    if (this.startedDrawing) {\n      return;\n    }\n\n    this.startedDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error(\n        'UltrasoundDirectionalTool can only be used on a StackViewport'\n      );\n    }\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: UltrasoundDirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    return false;\n  };\n\n  toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes,\n    canvasCoords?: Types.Point2\n  ): void {\n    return;\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: UltrasoundDirectionalAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    let movingTextBox = false;\n    let handleIndex;\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      handleIndex,\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.startedDrawing && data.handles.points.length === 1) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 1;\n      return;\n    }\n\n    this.startedDrawing = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.startedDrawing = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as UltrasoundDirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].xValues == null\n      ) {\n        data.cachedStats[targetId] = {\n          xValues: [0, 0],\n          yValues: [0, 0],\n          isHorizontal: false,\n          units: [''],\n          isUnitless: false,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // draw first point\n      let handleGroupUID = '0';\n      drawHandleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasCoordinates[0],\n        {\n          color,\n        },\n        0\n      );\n\n      renderStatus = true;\n\n      if (canvasCoordinates.length !== 2) {\n        return renderStatus;\n      }\n\n      handleGroupUID = '1';\n      drawHandleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasCoordinates[1],\n        {\n          color,\n        },\n        1\n      );\n\n      const isUnitless = data.cachedStats[targetId].isUnitless;\n\n      if (!isUnitless) {\n        const canvasPoint1 = canvasCoordinates[0];\n        const canvasPoint2 = canvasCoordinates[1];\n\n        const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n        const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n\n        const isHorizontal = data.cachedStats[targetId].isHorizontal;\n\n        // then for the third point we need to go from first point towards\n        // the second point (it can be left or right in the horizontal orientation)\n        // or up or down in the vertical orientation, and only add\n        // the delta y to the x or y coordinate of the first point\n        let projectedPointCanvas = [0, 0] as Types.Point2;\n        if (isHorizontal) {\n          projectedPointCanvas = [\n            canvasPoint1[0] + canvasDeltaX,\n            canvasPoint1[1],\n          ];\n        } else {\n          projectedPointCanvas = [\n            canvasPoint1[0],\n            canvasPoint1[1] + canvasDeltaY,\n          ];\n        }\n\n        // create a line from the first point to the third point\n        let dataId = `${annotationUID}-line-1`;\n        let lineUID = '1';\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          projectedPointCanvas,\n          {\n            color,\n            width: 1,\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n\n        // draw another line from first point to the projected one\n        dataId = `${annotationUID}-line-2`;\n        lineUID = '2';\n\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[1],\n          projectedPointCanvas,\n          {\n            color,\n            width: 1,\n            lineDash: [1, 1],\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n      } else {\n        // draw straight line between the two points\n        const dataId = `${annotationUID}-line-1`;\n        const lineUID = '1';\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: 1,\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n      }\n\n      // draw another line from first point to the\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(\n        data,\n        targetId,\n        this.configuration\n      );\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all two anchors bail out\n    if (data.handles.points.length !== 2) {\n      return;\n    }\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData } = image;\n\n      const worldPos1 = data.handles.points[0];\n      const worldPos2 = data.handles.points[1];\n\n      const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n      const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n\n      const { values: values1, units: units1 } =\n        getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n      const { values: values2, units: units2 } =\n        getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n\n      let xValues, yValues, units, isHorizontal;\n      let isUnitless = false;\n      if (\n        units1[0] !== units2[0] ||\n        units1[1] !== units2[1] ||\n        (units1[0] === 'raw' && units2[0] === 'raw')\n      ) {\n        // if units are not the same, we cannot calculate the diff\n        // so we just report the px distance\n        const value = distanceToPoint(worldPos1, worldPos2);\n\n        xValues = [value, 0];\n        yValues = [value, 0];\n        units = ['px'];\n        isUnitless = true;\n      } else {\n        const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n        const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n\n        const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n        const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n\n        isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n        xValues = [values1[0], values2[0]];\n        yValues = [values1[1], values2[1]];\n\n        units = [units1[0], units1[1]];\n      }\n\n      cachedStats[targetId] = {\n        xValues,\n        yValues,\n        isHorizontal,\n        units,\n        isUnitless,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId, configuration): string[] {\n  const cachedStats = data.cachedStats[targetId];\n  const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n\n  if (isUnitless) {\n    return [`${roundNumber(xValues[0])} px`];\n  }\n\n  if (configuration.displayBothAxesDistances) {\n    const dist1 = Math.abs(xValues[1] - xValues[0]);\n    const dist2 = Math.abs(yValues[1] - yValues[0]);\n    return [\n      `${roundNumber(dist1)} ${units[0]}`,\n      `${roundNumber(dist2)} ${units[1]}`,\n    ];\n  }\n\n  if (isHorizontal) {\n    const dist = Math.abs(xValues[1] - xValues[0]);\n    return [`${roundNumber(dist)} ${units[0]}`];\n  } else {\n    const dist = Math.abs(yValues[1] - yValues[0]);\n    return [`${roundNumber(dist)} ${units[1]}`];\n  }\n}\n\nUltrasoundDirectionalTool.toolName = 'UltrasoundDirectionalTool';\nexport default UltrasoundDirectionalTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\n\nimport { drawArrow as drawArrowSvg } from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { AnnotationCompletedEventDetail } from '../../types/EventTypes';\n\nimport { resetElementCursor } from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { Annotation } from '../../types';\n\ntype Point2 = Types.Point2;\n\nclass KeyImageTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        getTextCallback,\n        changeTextCallback,\n        canvasPosition: [10, 10],\n        canvasSize: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      annotationUID: null as string,\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: new Array<Types.Point3>(),\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.configuration.getTextCallback((text) => {\n      if (!text) {\n        removeAnnotation(annotation.annotationUID);\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n        this.isDrawing = false;\n        return;\n      }\n      annotation.data.text = text;\n\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n    });\n\n    return annotation;\n  };\n\n  public cancel() {\n    // No op - the annotation can't be in a partial state\n  }\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { canvasPosition, canvasSize } = this.configuration;\n    if (!canvasPosition?.length) {\n      return false;\n    }\n    if (\n      Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n        canvasSize / 2 &&\n      Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n        canvasSize / 2\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    annotation.highlighted = true;\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle\n  ): void {\n    // Nothing special to do here.\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this._deactivateModify(element);\n    resetElementCursor(element);\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as Annotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as Annotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { canvasPosition, canvasSize } = this.configuration;\n      if (canvasPosition?.length) {\n        const arrowUID = '1';\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasPosition.map((it) => it + canvasSize) as Point2,\n          canvasPosition as Point2,\n          {\n            color,\n            width: 1,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nKeyImageTool.toolName = 'KeyImage';\n\nexport default KeyImageTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { pointInShapeCallback } from '../../../utilities';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { LabelmapToolOperationData } from '../../../types';\nimport { getStrategyData } from './utils/getStrategyData';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = LabelmapToolOperationData & {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n};\n\n/**\n * For each point in the bounding box around the rectangle, if the point is inside\n * the rectangle, set the scalar value to the segmentIndex\n * @param toolGroupId - string\n * @param operationData - OperationData\n * @param inside - boolean\n */\n// Todo: why we have another constraintFn? in addition to the one in the operationData?\nfunction fillRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  inside = true\n): void {\n  const { points, segmentsLocked, segmentIndex, segmentationId } =\n    operationData;\n\n  const strategyData = getStrategyData({\n    operationData,\n    viewport: enabledElement.viewport,\n  });\n\n  if (!strategyData) {\n    console.warn('No data found for fillRectangle');\n    return;\n  }\n\n  const { segmentationImageData, segmentationScalarData } = strategyData;\n\n  let rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(segmentationImageData, world);\n  });\n\n  // math round\n  rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n    return point.map((coord) => {\n      return Math.round(coord);\n    });\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(\n    rectangleCornersIJK,\n    segmentationImageData.getDimensions()\n  );\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInRectangle = () => true;\n\n  const callback = ({ value, index }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n\n    segmentationScalarData[index] = segmentIndex;\n  };\n\n  pointInShapeCallback(\n    segmentationImageData,\n    pointInRectangle,\n    callback,\n    boundsIJK\n  );\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Fill the inside of a rectangle\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n */\nexport function fillInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Fill the area outside of a rectangle for the toolGroupId and segmentationRepresentationUID.\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n */\nexport function fillOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, false);\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { LabelmapToolOperationData } from '../../../types';\nimport { fillInsideRectangle } from './fillRectangle';\n\ntype OperationData = LabelmapToolOperationData & {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n};\n\nfunction eraseRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  inside = true\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillRectangle functionality.\n  const eraseOperationData = Object.assign({}, operationData, {\n    segmentIndex: 0,\n  });\n\n  fillInsideRectangle(enabledElement, eraseOperationData);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels inside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - OperationData\n */\nexport function eraseInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  eraseRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels outside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - OperationData\n */\nexport function eraseOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  eraseRectangle(enabledElement, operationData, false);\n}\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * Tool for manipulating segmentation data by drawing a rectangle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass RectangleScissorsTool extends BaseTool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    //\n    imageIdReferenceMap: Map<string, string>;\n    volumeId: string;\n    referencedVolumeId: string;\n    //\n    annotation: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideRectangle,\n          ERASE_INSIDE: eraseInsideRectangle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n    const labelmapData = representationData[\n      SegmentationRepresentations.Labelmap\n    ] as LabelmapSegmentationData;\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    this.editData = {\n      annotation,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      segmentationRepresentationUID,\n    } as any;\n\n    if (isVolumeSegmentation(labelmapData as LabelmapSegmentationData)) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle.\n    const { currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n    const worldPos = currentPoints.world;\n\n    const { points } = data.handles;\n\n    // Move this handle.\n    points[handleIndex] = [...worldPos];\n\n    let bottomLeftCanvas;\n    let bottomRightCanvas;\n    let topLeftCanvas;\n    let topRightCanvas;\n\n    let bottomLeftWorld;\n    let bottomRightWorld;\n    let topLeftWorld;\n    let topRightWorld;\n\n    switch (handleIndex) {\n      case 0:\n      case 3:\n        // Moving bottomLeft or topRight\n\n        bottomLeftCanvas = worldToCanvas(points[0]);\n        topRightCanvas = worldToCanvas(points[3]);\n\n        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n        topLeftWorld = canvasToWorld(topLeftCanvas);\n\n        points[1] = bottomRightWorld;\n        points[2] = topLeftWorld;\n\n        break;\n      case 1:\n      case 2:\n        // Moving bottomRight or topLeft\n        bottomRightCanvas = worldToCanvas(points[1]);\n        topLeftCanvas = worldToCanvas(points[2]);\n\n        bottomLeftCanvas = <Types.Point2>[\n          topLeftCanvas[0],\n          bottomRightCanvas[1],\n        ];\n        topRightCanvas = <Types.Point2>[bottomRightCanvas[0], topLeftCanvas[1]];\n\n        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n        topRightWorld = canvasToWorld(topRightCanvas);\n\n        points[0] = bottomLeftWorld;\n        points[3] = topRightWorld;\n\n        break;\n    }\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, newAnnotation, hasMoved } = this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const rectangleUID = '0';\n    drawRectSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rectangleUID,\n      canvasCoordinates[0],\n      canvasCoordinates[3],\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n  config as segmentationConfig,\n} from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * Tool for manipulating segmentation data by drawing a circle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass CircleScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentIndex: number;\n    //\n    volumeId: string;\n    referencedVolumeId: string;\n    imageIdReferenceMap: Map<string, string>;\n    //\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n    segmentationRepresentationUID?: string;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideCircle,\n          ERASE_INSIDE: eraseInsideCircle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const labelmapData = representationData[type];\n\n    if (!labelmapData) {\n      throw new Error(\n        'No labelmap data found for the active segmentation, create one before using scissors tool'\n      );\n    }\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        isDrawing: true,\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      segmentationRepresentationUID,\n    } as any;\n\n    if (isVolumeSegmentation(labelmapData as LabelmapSegmentationData)) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    // Center of circle in canvas Coordinates\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, newAnnotation, hasMoved } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n      viewPlaneNormal,\n      viewUp,\n      strategySpecificConfiguration: {},\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataVolume,\n  LabelmapSegmentationDataStack,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n/**\n * Tool for manipulating segmentation data by drawing a sphere in 3d space. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex. Todo: sphere scissor has some memory problem which\n * lead to ui blocking behavior that needs to be fixed.\n */\nclass SphereScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentationRepresentationUID: string;\n    //\n    volumeId: string;\n    referencedVolumeId: string;\n    imageIdReferenceMap: Map<string, string>;\n    //\n    toolGroupId: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideSphere,\n          ERASE_INSIDE: eraseInsideSphere,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): true => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    this.isDrawing = true;\n\n    // Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        highlighted: true,\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      centerCanvas: canvasPos,\n      segmentationRepresentationUID,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      toolGroupId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    } as any;\n\n    const { representationData } = getSegmentation(segmentationId);\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    if (isVolumeSegmentation(labelmapData as LabelmapSegmentationData)) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentIndex,\n      segmentationRepresentationUID,\n      segmentsLocked,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n      segmentIndex,\n      segmentationRepresentationUID,\n      segmentsLocked,\n      viewPlaneNormal,\n      viewUp,\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the sphereScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { Events } from '../../enums';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * This tool is exactly the RectangleROITool but only draws a rectangle on the image,\n * and by using utility functions such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. This tool, however, does not calculate the statistics\n * as RectangleROITool does.\n */\nclass RectangleROIThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const targetId = this.getTargetId(viewport);\n    let referencedImageId, volumeId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    // Todo: how not to store enabledElement on the annotation, segmentationModule needs the element to\n    // decide on the active segmentIndex, active segmentationIndex etc.\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n      },\n      data: {\n        label: '',\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        segmentationId: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * it is used to draw the RectangleROI Threshold annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngineId } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // Todo: This is not correct way to add the event trigger,\n      // this will trigger on all mouse hover too. Problem is that we don't\n      // have a cached stats mechanism for this tool yet?\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId: viewport.id,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n}\n\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  metaData,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * This tool is similar to the RectangleROIThresholdTool which\n * only draws a rectangle on the image, and by using utility functions\n * such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. The only difference is that it only acts on the\n * acquisition plane and not the 3D volume, and accepts a start and end\n * slice, and renders a dashed rectangle on the image between the start and end\n * but a solid rectangle on start and end slice. Utility functions should be used\n * to modify the start and end slice.\n * // Todo: right now only the first slice has grabbable handles, need to make\n * // it so that the handles are grabbable on all slices.\n */\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        numSlicesToPropagate: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = targetId.split('volumeId:')[1];\n      imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    if (!referencedImageId) {\n      throw new Error('This tool does not work on non-acquisition planes');\n    }\n\n    const startIndex = viewport.getCurrentImageIdIndex();\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    // We cannot simply add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n        spacingInNormal,\n      },\n      data: {\n        label: '',\n        startSlice: startIndex,\n        endSlice: endIndex,\n        cachedStats: {\n          projectionPoints: [],\n          projectionPointsImageIds: [referencedImageId],\n        },\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        labelmapUID: null,\n      },\n    };\n\n    // update the projection points in 3D space, since we are projecting\n    // the points to the slice plane, we need to make sure the points are\n    // computed for later export\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: RectangleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n\n    // Find the imageIds for the projection points\n    const projectionPointsImageIds = [];\n    for (const RectanglePoints of newProjectionPoints) {\n      const imageId = csUtils.getClosestImageId(\n        imageVolume,\n        RectanglePoints[0],\n        viewPlaneNormal\n      );\n      projectionPointsImageIds.push(imageId);\n    }\n\n    data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const volumeId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(volumeId.split('volumeId:')[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  /**\n   * it is used to draw the rectangleROIStartEnd annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[\n        i\n      ] as RectangleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n      let firstOrLastSlice = false;\n      if (sliceIndex === startSlice || sliceIndex === endSlice) {\n        firstOrLastSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        firstOrLastSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineDashToUse = lineDash;\n\n      if (!firstOrLastSlice) {\n        lineDashToUse = 2;\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash: lineDashToUse,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagate * spacingInNormal\n    );\n\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, endPos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import {\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport { PublicToolProps, ToolProps, EventTypes } from '../../types';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n} from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { FloodFillResult, FloodFillGetter } from '../../types';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\nconst { transformWorldToIndex, isEqual } = csUtils;\n\ntype PaintFillToolHelpers = {\n  getScalarDataPositionFromPlane: (x: number, y: number) => number;\n  getLabelValue: (x: number, y: number, z: number) => number;\n  floodFillGetter: FloodFillGetter;\n  inPlaneSeedPoint: Types.Point2;\n  fixedDimensionValue: number;\n};\n\n/**\n * Tool for manipulating segmentation data by filling in regions. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will fill a given labelled\n * or empty region with the the activeSegmentIndex label. You can use the\n * SegmentationModule to set the active segmentation and segmentIndex.\n */\nclass PaintFillTool extends BaseTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked: number[] =\n      segmentLocking.getLockedSegments(segmentationId);\n    const { representationData } = getSegmentation(segmentationId);\n\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    let dimensions: Types.Point3;\n    let direction: Types.Mat3;\n    let scalarData: Types.PixelDataTypedArray;\n    let index: Types.Point3;\n\n    if (isVolumeSegmentation(labelmapData)) {\n      const { volumeId } = representationData[\n        type\n      ] as LabelmapSegmentationDataVolume;\n\n      const segmentation = cache.getVolume(volumeId);\n      ({ dimensions, direction } = segmentation);\n      scalarData = segmentation.getScalarData();\n\n      index = transformWorldToIndex(segmentation.imageData, worldPos);\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      const currentImageId = enabledElement.viewport.getCurrentImageId();\n      const currentSegmentationImageId =\n        imageIdReferenceMap.get(currentImageId);\n\n      if (!currentSegmentationImageId) {\n        throw new Error(\n          'No active segmentation imageId detected, create one before using scissors tool'\n        );\n      }\n\n      const segmentationImage = cache.getImage(currentSegmentationImageId);\n      scalarData = segmentationImage.getPixelData();\n      const { imageData } = viewport.getImageData();\n      dimensions = imageData.getDimensions();\n      direction = imageData.getDirection();\n      index = transformWorldToIndex(imageData, worldPos);\n    }\n\n    const fixedDimension = this.getFixedDimension(\n      viewPlaneNormal,\n      direction as number[]\n    );\n\n    if (fixedDimension === undefined) {\n      console.warn('Oblique paint fill not yet supported');\n      return;\n    }\n\n    const {\n      floodFillGetter,\n      getLabelValue,\n      getScalarDataPositionFromPlane,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n\n    // Check if within volume\n    if (\n      index[0] < 0 ||\n      index[0] >= dimensions[0] ||\n      index[1] < 0 ||\n      index[1] >= dimensions[1] ||\n      index[2] < 0 ||\n      index[2] >= dimensions[2]\n    ) {\n      // Clicked outside segmentation volume, no good way to fill.\n      return;\n    }\n    //@ts-ignore // todo type\n    const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n\n    if (segmentsLocked.includes(clickedLabelValue)) {\n      // Label is locked, cannot fill.\n      return;\n    }\n\n    const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n\n    const { flooded } = floodFillResult;\n\n    flooded.forEach((index) => {\n      const scalarDataPosition = getScalarDataPositionFromPlane(\n        index[0],\n        index[1]\n      );\n\n      scalarData[scalarDataPosition] = segmentIndex;\n    });\n\n    const framesModified = this.getFramesModified(\n      fixedDimension,\n      fixedDimensionValue,\n      floodFillResult\n    );\n\n    triggerSegmentationDataModified(segmentationId, framesModified);\n\n    return true;\n  };\n\n  private getFramesModified = (\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    floodFillResult: FloodFillResult\n  ): number[] => {\n    const { boundaries } = floodFillResult;\n\n    if (fixedDimension === 2) {\n      return [fixedDimensionValue];\n    }\n\n    // For both the fixedDimensions being 0 and 1, the Z (stack) direction is j,\n    // so we don't need to find min/max i.\n\n    let minJ = Infinity;\n    let maxJ = -Infinity;\n\n    for (let b = 0; b < boundaries.length; b++) {\n      const j = boundaries[b][1];\n\n      if (j < minJ) {\n        minJ = j;\n      }\n      if (j > maxJ) {\n        maxJ = j;\n      }\n    }\n\n    const framesModified = [];\n\n    for (let frame = minJ; frame <= maxJ; frame++) {\n      framesModified.push(frame);\n    }\n\n    return framesModified;\n  };\n\n  private generateHelpers = (\n    scalarData: Types.PixelDataTypedArray,\n    dimensions: Types.Point3,\n    seedIndex3D: Types.Point3,\n    fixedDimension = 2\n  ): PaintFillToolHelpers => {\n    let fixedDimensionValue: number;\n    let inPlaneSeedPoint: Types.Point2;\n\n    switch (fixedDimension) {\n      case 0:\n        fixedDimensionValue = seedIndex3D[0]; // X\n        inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]]; // Y,Z\n        break;\n      case 1:\n        fixedDimensionValue = seedIndex3D[1]; // Y\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]]; // X,Z\n        break;\n      case 2:\n        fixedDimensionValue = seedIndex3D[2]; // Z\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]]; // X, Y\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    const getScalarDataPosition = (x: number, y: number, z: number): number => {\n      return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n    };\n\n    const getLabelValue = (x: number, y: number, z: number): number => {\n      return scalarData[getScalarDataPosition(x, y, z)];\n    };\n\n    const floodFillGetter = this.generateFloodFillGetter(\n      dimensions,\n      fixedDimension,\n      fixedDimensionValue,\n      getLabelValue\n    );\n\n    const getScalarDataPositionFromPlane =\n      this.generateGetScalarDataPositionFromPlane(\n        getScalarDataPosition,\n        fixedDimension,\n        fixedDimensionValue\n      );\n\n    return {\n      getScalarDataPositionFromPlane,\n      getLabelValue,\n      floodFillGetter,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    };\n  };\n\n  private getFixedDimension(\n    viewPlaneNormal: Types.Point3,\n    direction: number[]\n  ): number | undefined {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n\n    const absoluteOfViewPlaneNormal = [\n      Math.abs(viewPlaneNormal[0]),\n      Math.abs(viewPlaneNormal[1]),\n      Math.abs(viewPlaneNormal[2]),\n    ];\n\n    const absoluteOfXDirection = [\n      Math.abs(xDirection[0]),\n      Math.abs(xDirection[1]),\n      Math.abs(xDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n\n    const absoluteOfYDirection = [\n      Math.abs(yDirection[0]),\n      Math.abs(yDirection[1]),\n      Math.abs(yDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n\n    const absoluteOfZDirection = [\n      Math.abs(zDirection[0]),\n      Math.abs(zDirection[1]),\n      Math.abs(zDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n\n  // Define a getter for the fill routine to access the working label map.\n  private generateFloodFillGetter = (\n    dimensions: Types.Point3,\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    getLabelValue: PaintFillToolHelpers['getLabelValue']\n  ): FloodFillGetter => {\n    let floodFillGetter;\n\n    // In each helper we first check if out of bounds, as the flood filler\n    // doesn't know about the dimensions of the data structure that sits on top\n    // of the scalarData. E.g. if cols is 10, (0,1) and (10, 0) would point to\n    // the same position in these getters.\n\n    switch (fixedDimension) {\n      case 0:\n        floodFillGetter = (y, z) => {\n          if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(fixedDimensionValue, y, z);\n        };\n        break;\n\n      case 1:\n        floodFillGetter = (x, z) => {\n          if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(x, fixedDimensionValue, z);\n        };\n        break;\n\n      case 2:\n        floodFillGetter = (x, y) => {\n          if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n            return;\n          }\n\n          return getLabelValue(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return floodFillGetter;\n  };\n\n  private generateGetScalarDataPositionFromPlane = (\n    getScalarDataPosition: (x: number, y: number, z: number) => number,\n    fixedDimension: number,\n    fixedDimensionValue: number\n  ): PaintFillToolHelpers['getScalarDataPositionFromPlane'] => {\n    let getScalarDataPositionFromPlane;\n\n    switch (fixedDimension) {\n      case 0:\n        getScalarDataPositionFromPlane = (y, z) => {\n          return getScalarDataPosition(fixedDimensionValue, y, z);\n        };\n        break;\n      case 1:\n        getScalarDataPositionFromPlane = (x, z) => {\n          return getScalarDataPosition(x, fixedDimensionValue, z);\n        };\n        break;\n      case 2:\n        getScalarDataPositionFromPlane = (x, y) => {\n          return getScalarDataPosition(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return getScalarDataPositionFromPlane;\n  };\n}\n\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\n\nimport { BaseTool } from './base';\nimport { getRenderingEngines } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\n\nconst OverlayMarkerType = {\n  ANNOTATED_CUBE: 1,\n  AXES: 2,\n  CUSTOM: 3,\n};\n\n/**\n * The OrientationMarker is a tool that includes an orientation marker in viewports\n * when activated\n */\nclass OrientationMarkerTool extends BaseTool {\n  static toolName;\n  static CUBE = 1;\n  static AXIS = 2;\n  static VTPFILE = 3;\n  orientationMarkers;\n  polyDataURL;\n\n  static OVERLAY_MARKER_TYPES = OverlayMarkerType;\n\n  configuration_invalidated = true;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {\n        orientationWidget: {\n          enabled: true,\n          viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n          viewportSize: 0.15,\n          minPixelSize: 100,\n          maxPixelSize: 300,\n        },\n        overlayMarkerType:\n          OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n        overlayConfiguration: {\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n            faceProperties: {\n              xPlus: { text: 'R', faceColor: '#ffff00', faceRotation: 90 },\n              xMinus: { text: 'L', faceColor: '#ffff00', faceRotation: 270 },\n              yPlus: {\n                text: 'P',\n                faceColor: '#00ffff',\n                fontColor: 'white',\n                faceRotation: 180,\n              },\n              yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n              zPlus: { text: 'S' },\n              zMinus: { text: 'I' },\n            },\n            defaultStyle: {\n              fontStyle: 'bold',\n              fontFamily: 'Arial',\n              fontColor: 'black',\n              fontSizeScale: (res) => res / 2,\n              faceColor: '#0000ff',\n              edgeThickness: 0.1,\n              edgeColor: 'black',\n              resolution: 400,\n            },\n          },\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n            polyDataURL:\n              'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.orientationMarkers = {};\n    this.configuration_invalidated = true;\n  }\n\n  onSetToolEnabled = (): void => {\n    this.initViewports();\n    this.configuration_invalidated = true;\n  };\n\n  onSetToolActive = (): void => {\n    this.initViewports();\n  };\n\n  onSetToolDisabled = (): void => {\n    this.cleanUpData();\n  };\n\n  private cleanUpData() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n    const viewports = renderingEngine.getViewports();\n\n    viewports.forEach((viewport) => {\n      const orientationMarker = this.orientationMarkers[viewport.id];\n      if (!orientationMarker) {\n        return;\n      }\n\n      const { actor, orientationWidget } = orientationMarker;\n      orientationWidget?.setEnabled(false);\n      orientationWidget?.delete();\n      actor?.delete();\n\n      const renderWindow = viewport\n        .getRenderingEngine()\n        .offscreenMultiRenderWindow.getRenderWindow();\n      renderWindow.render();\n      viewport.getRenderingEngine().render();\n\n      delete this.orientationMarkers[viewport.id];\n    });\n  }\n\n  private initViewports() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n    viewports.forEach((viewport) => this.addAxisActorInViewport(viewport));\n  }\n\n  async addAxisActorInViewport(viewport) {\n    const viewportId = viewport.id;\n    const type = this.configuration.overlayMarkerType;\n\n    const overlayConfiguration = this.configuration.overlayConfiguration[type];\n\n    if (this.orientationMarkers[viewportId]) {\n      const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n      // remove the previous one\n      viewport.getRenderer().removeActor(actor);\n      orientationWidget.setEnabled(false);\n    }\n\n    let actor;\n    if (type === 1) {\n      actor = this.createAnnotationCube(overlayConfiguration);\n    } else if (type === 2) {\n      actor = vtkAxesActor.newInstance();\n    } else if (type === 3) {\n      actor = await this.createCustomActor();\n    }\n\n    const renderer = viewport.getRenderer();\n    const renderWindow = viewport\n      .getRenderingEngine()\n      .offscreenMultiRenderWindow.getRenderWindow();\n\n    const {\n      enabled,\n      viewportCorner,\n      viewportSize,\n      minPixelSize,\n      maxPixelSize,\n    } = this.configuration.orientationWidget;\n\n    const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n      actor,\n      interactor: renderWindow.getInteractor(),\n      parentRenderer: renderer,\n    });\n\n    orientationWidget.setEnabled(enabled);\n    orientationWidget.setViewportCorner(viewportCorner);\n    orientationWidget.setViewportSize(viewportSize);\n    orientationWidget.setMinPixelSize(minPixelSize);\n    orientationWidget.setMaxPixelSize(maxPixelSize);\n\n    orientationWidget.updateMarkerOrientation();\n    this.orientationMarkers[viewportId] = {\n      orientationWidget,\n      actor,\n    };\n    renderWindow.render();\n    viewport.getRenderingEngine().render();\n\n    this.configuration_invalidated = false;\n  }\n\n  private async createCustomActor() {\n    const url =\n      this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n        .polyDataURL;\n\n    const response = await fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const vtpReader = vtkXMLPolyDataReader.newInstance();\n    vtpReader.parseAsArrayBuffer(arrayBuffer);\n    vtpReader.update();\n\n    const polyData = vtkPolyData.newInstance();\n    polyData.shallowCopy(vtpReader.getOutputData());\n    polyData.getPointData().setActiveScalars('Color');\n    const mapper = vtkMapper.newInstance();\n    mapper.setInputData(polyData);\n    mapper.setColorModeToDirectScalars();\n\n    const actor = vtkActor.newInstance();\n    actor.setMapper(mapper);\n    actor.rotateZ(180);\n    return actor;\n  }\n\n  private createAnnotationCube(overlayConfiguration: any) {\n    const actor = vtkAnnotatedCubeActor.newInstance();\n    actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n    actor.setXPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.xPlus,\n    });\n    actor.setXMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.xMinus,\n    });\n    actor.setYPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.yPlus,\n    });\n    actor.setYMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.yMinus,\n    });\n    actor.setZPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.zPlus,\n    });\n    actor.setZMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.zMinus,\n    });\n    return actor;\n  }\n\n  async createAnnotatedCubeActor() {\n    const axes = vtkAnnotatedCubeActor.newInstance();\n    const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n\n    axes.setDefaultStyle(defaultStyle);\n\n    Object.keys(faceProperties).forEach((key) => {\n      const methodName = `set${\n        key.charAt(0).toUpperCase() + key.slice(1)\n      }FaceProperty`;\n      axes[methodName](faceProperties[key]);\n    });\n\n    return axes;\n  }\n}\n\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\n\ntype Options = {\n  numSlicesToProject?: number;\n};\n\nfunction getBoundsIJKFromRectangleAnnotations(\n  annotations,\n  referenceVolume,\n  options = {} as Options\n) {\n  const AllBoundsIJK = [];\n  annotations.forEach((annotation) => {\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const { imageData, dimensions } = referenceVolume;\n\n    let pointsToUse = points;\n    // If the tool is a 2D tool but has projection points, use them\n    if (data.cachedStats?.projectionPoints) {\n      const { projectionPoints } = data.cachedStats;\n      pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n    }\n\n    const rectangleCornersIJK = pointsToUse.map(\n      (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n    );\n    let boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n    // If the tool is 2D but it is configured to project to X amount of slices\n    // Don't project the slices if projectionPoints have been used to define the extents\n    if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n      boundsIJK = extend2DBoundingBoxInViewAxis(\n        boundsIJK,\n        options.numSlicesToProject\n      );\n    }\n\n    AllBoundsIJK.push(boundsIJK);\n  });\n\n  if (AllBoundsIJK.length === 1) {\n    return AllBoundsIJK[0];\n  }\n\n  // Get the intersection of all the bounding boxes\n  // This is the bounding box that contains all the ROIs\n  const boundsIJK = AllBoundsIJK.reduce(\n    (accumulator, currentValue) => {\n      return {\n        iMin: Math.min(accumulator.iMin, currentValue.iMin),\n        jMin: Math.min(accumulator.jMin, currentValue.jMin),\n        kMin: Math.min(accumulator.kMin, currentValue.kMin),\n        iMax: Math.max(accumulator.iMax, currentValue.iMax),\n        jMax: Math.max(accumulator.jMax, currentValue.jMax),\n        kMax: Math.max(accumulator.kMax, currentValue.kMax),\n      };\n    },\n    {\n      iMin: Infinity,\n      jMin: Infinity,\n      kMin: Infinity,\n      iMax: -Infinity,\n      jMax: -Infinity,\n      kMax: -Infinity,\n    }\n  );\n\n  return boundsIJK;\n}\n\nexport default getBoundsIJKFromRectangleAnnotations;\n","import type { Types } from '@cornerstonejs/core';\nimport { state } from '../../stateManagement/annotation';\nimport {\n  RectangleROIStartEndThresholdTool,\n  RectangleROIThresholdTool,\n} from '../../tools';\n\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nimport { ThresholdInformation } from './utilities';\n\nexport type ThresholdOptions = {\n  numSlicesToProject?: number; // number of slices to project before and after current slice\n  overwrite: boolean;\n  overlapType?: number; // type of the voxel overlap\n};\n\nexport type AnnotationForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * It uses the provided rectangleROI annotations (either RectangleROIThreshold, or\n * RectangleROIStartEndThreshold) to compute an ROI that is the intersection of\n * all the annotations. Then it uses the rectangleROIThreshold utility to threshold\n * the volume.\n * @param annotationUIDs - rectangleROI annotationsUIDs to use for ROI\n * @param segmentationVolume - the segmentation volume\n * @param thresholdVolumeInformation - object array containing the volume data and range threshold values\n * @param options - options for thresholding\n * @returns\n */\nfunction rectangleROIThresholdVolumeByRange(\n  annotationUIDs: string[],\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdOptions\n): Types.IImageVolume {\n  const annotations = annotationUIDs.map((annotationUID) => {\n    return state.getAnnotation(annotationUID);\n  });\n\n  _validateAnnotations(annotations);\n\n  let boundsIJK;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    // make sure that the boundsIJK are generated by the correct volume\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {\n      boundsIJK = getBoundsIJKFromRectangleAnnotations(\n        annotations,\n        thresholdVolumeInformation[i].volume,\n        options\n      );\n    }\n  }\n\n  const outputSegmentationVolume = thresholdVolumeByRange(\n    segmentationVolume,\n    thresholdVolumeInformation,\n    { ...options, boundsIJK }\n  );\n\n  return outputSegmentationVolume;\n}\n\nfunction _validateAnnotations(annotations) {\n  const validToolNames = [\n    RectangleROIThresholdTool.toolName,\n    RectangleROIStartEndThresholdTool.toolName,\n  ];\n\n  for (const annotation of annotations) {\n    const name = annotation.metadata.toolName;\n    if (!validToolNames.includes(name)) {\n      throw new Error(\n        'rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations'\n      );\n    }\n  }\n}\n\nexport default rectangleROIThresholdVolumeByRange;\n","import { Types } from '@cornerstonejs/core';\nimport { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions), and\n * a segmentIndex it creates a new labelmap with the same dimensions as the input labelmaps,\n * but merges them into a single labelmap for the segmentIndex. It wipes out\n * all other segment Indices. This is useful for calculating statistics regarding\n * a specific segment when there are overlapping regions between labelmap (e.g. TMTV)\n *\n * @param labelmaps - Array of labelmaps\n * @param segmentIndex - The segment index to merge\n * @returns Merged labelmap\n */\nfunction createMergedLabelmapForIndex(\n  labelmaps: Array<Types.IImageVolume>,\n  segmentIndex = 1,\n  volumeId = 'mergedLabelmap'\n): Types.IImageVolume {\n  labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n    if (\n      !csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n      !csUtils.isEqual(direction, labelmaps[0].direction) ||\n      !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n      !csUtils.isEqual(origin, labelmaps[0].origin)\n    ) {\n      throw new Error('labelmaps must have the same size and shape');\n    }\n  });\n\n  const labelmap = labelmaps[0];\n\n  const arrayType = (labelmap.getScalarData() as any).constructor;\n  const outputData = new arrayType(labelmap.getScalarData().length);\n\n  labelmaps.forEach((labelmap) => {\n    const scalarData = labelmap.getScalarData();\n    for (let i = 0; i < scalarData.length; i++) {\n      if (scalarData[i] === segmentIndex) {\n        outputData[i] = segmentIndex;\n      }\n    }\n  });\n\n  const options = {\n    scalarData: outputData,\n    metadata: labelmap.metadata,\n    spacing: labelmap.spacing,\n    origin: labelmap.origin,\n    direction: labelmap.direction,\n    dimensions: labelmap.dimensions,\n  };\n\n  const preventCache = true;\n  // Todo: following should be async\n  const mergedVolume = volumeLoader.createLocalVolume(\n    options,\n    volumeId,\n    preventCache\n  );\n\n  return mergedVolume;\n}\n\nexport default createMergedLabelmapForIndex;\n","import { isValidLabelmapConfig } from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { RepresentationConfig } from '../../types/SegmentationStateTypes';\n\n/**\n * Given a representation type and a configuration, return true if the\n * configuration is valid for that representation type\n * @param representationType - The type of segmentation representation\n * @param config - RepresentationConfig\n * @returns A boolean value.\n */\nexport default function isValidRepresentationConfig(\n  representationType: string,\n  config: RepresentationConfig\n): boolean {\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return isValidLabelmapConfig(config);\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { Segmentation } from '../../types/SegmentationStateTypes';\n\n/**\n * It returns a configuration object for the given representation type.\n * @param representationType - The type of segmentation representation\n * @returns A representation configuration object.\n */\nexport default function getDefaultRepresentationConfig(\n  segmentation: Segmentation\n) {\n  const { type: representationType } = segmentation;\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return getDefaultLabelmapConfig();\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import { _cloneDeep } from 'lodash.clonedeep';\nimport {\n  getEnabledElementByIds,\n  volumeLoader,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Create a new 3D segmentation volume from the default imageData presented in\n * the first actor of the viewport. It looks at the metadata of the imageData\n * to determine the volume dimensions and spacing if particular options are not provided.\n *\n * @param viewportId - The Id of the viewport from which to derive the volume from.\n * @param renderingEngineId - The Id of the rendering engine the viewport belongs to.\n * @param [segmentationId] - The Id to name the generated segmentation. Autogenerated if not given.\n * @param [options] - LabelmapOptions\n * @returns A promise that resolves to the Id of the new labelmap volume.\n */\nexport default async function createLabelmapVolumeForViewport(input: {\n  viewportId: string;\n  renderingEngineId: string;\n  segmentationId?: string;\n  options?: {\n    volumeId?: string;\n    scalarData?: Float32Array | Uint8Array | Uint16Array | Int16Array;\n    targetBuffer?: {\n      type: 'Float32Array' | 'Uint8Array' | 'Uint16Array' | 'Int8Array';\n    };\n    metadata?: any;\n    dimensions?: Types.Point3;\n    spacing?: Types.Point3;\n    origin?: Types.Point3;\n    direction?: Float32Array;\n  };\n}): Promise<string> {\n  const { viewportId, renderingEngineId, options } = input;\n  let { segmentationId } = input;\n  const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n\n  if (!enabledElement) {\n    throw new Error('element disabled');\n  }\n\n  const { viewport } = enabledElement;\n  if (!(viewport instanceof VolumeViewport)) {\n    throw new Error('Segmentation only supports VolumeViewport');\n  }\n\n  const { uid } = viewport.getDefaultActor();\n\n  if (segmentationId === undefined) {\n    // Name the segmentation volume with the viewport Id\n    segmentationId = `${uid}-based-segmentation-${\n      options?.volumeId ?? csUtils.uuidv4().slice(0, 8)\n    }`;\n  }\n\n  if (options) {\n    // create a new labelmap with its own properties\n    // This allows creation of a higher resolution labelmap vs reference volume\n    const properties = _cloneDeep(options);\n    await volumeLoader.createLocalVolume(properties, segmentationId);\n  } else {\n    // create a labelmap from a reference volume\n    const { uid: volumeId } = viewport.getDefaultActor();\n    await volumeLoader.createAndCacheDerivedVolume(volumeId, {\n      volumeId: segmentationId,\n    });\n  }\n\n  return segmentationId;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\n/**\n * Sets the brush size for all brush-based tools in a given tool group.\n * @param toolGroupId - The ID of the tool group to set the brush size for.\n * @param brushSize - The new brush size to set.\n * @param toolName - The name of the specific tool to set the brush size for (optional)\n * If not provided, all brush-based tools in the tool group will be affected.\n */\nexport function setBrushSizeForToolGroup(\n  toolGroupId: string,\n  brushSize: number,\n  toolName?: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n\n  brushBasedToolInstances.forEach((tool: BrushTool) => {\n    tool.configuration.brushSize = brushSize;\n\n    // Invalidate the brush being rendered so it can update.\n    tool.invalidateBrushCursor();\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  const viewportsInfoArray = Object.keys(viewportsInfo).map(\n    (key) => viewportsInfo[key]\n  );\n\n  if (!viewportsInfoArray.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfoArray[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\n/**\n * Gets the brush size for the first brush-based tool instance in a given tool group.\n * @param toolGroupId - The ID of the tool group to get the brush size for.\n * @param toolName - The name of the specific tool to get the brush size for (Optional)\n * If not provided, the first brush-based tool instance in the tool group will be used.\n * @returns The brush size of the selected tool instance, or undefined if no brush-based tool instance is found.\n */\nexport function getBrushSizeForToolGroup(\n  toolGroupId: string,\n  toolName?: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n\n  // one is enough as they share the same brush size\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the brush sizes are the same and set via these helpers.\n  return brushToolInstance.configuration.brushSize;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushThresholdForToolGroup(\n  toolGroupId: string,\n  threshold: Types.Point2,\n  otherArgs: Record<string, unknown> = { isDynamic: false }\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n  const configuration = {\n    ...otherArgs,\n    ...(threshold !== undefined && { threshold }),\n  };\n\n  brushBasedToolInstances.forEach((tool) => {\n    tool.configuration.strategySpecificConfiguration.THRESHOLD = {\n      ...tool.configuration.strategySpecificConfiguration.THRESHOLD,\n      ...configuration,\n    };\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  if (!viewportsInfo.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfo[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushThresholdForToolGroup(toolGroupId: string) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the\n  return brushToolInstance.configuration.strategySpecificConfiguration.THRESHOLD\n    .threshold;\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param segmentationIndex - the index of the segmentation to modify\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param overlapType - indicates if the user requires all voxels pass\n * (overlapType = 1) or any voxel pass (overlapType = 0)\n * @returns\n */\nfunction thresholdSegmentationByRange(\n  segmentationVolume: Types.IImageVolume,\n  segmentationIndex: number,\n  thresholdVolumeInformation: ThresholdInformation[],\n  overlapType: number\n): Types.IImageVolume {\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  /**\n   * This function will test all overlaps between a voxel in base volume\n   * (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   * If the segmentation volume and the image volume are the same size,\n   * checks if the scalar data at each point is within the threshold values.\n   * If the segmentation volume and the image volume are different sizes,\n   * checks the voxel overlap\n   */\n  volumeInfoList.forEach((volumeInfo) => {\n    const { volumeSize } = volumeInfo;\n\n    if (volumeSize === scalarData.length) {\n      _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo);\n    } else {\n      _handleDifferentSizeVolume(\n        scalarData,\n        segmentationIndex,\n        volumeInfo,\n        volumeInfoList,\n        baseVolumeIdx,\n        overlapType\n      );\n    }\n  });\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nfunction _handleDifferentSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any,\n  volumeInfoList: any,\n  baseVolumeIdx: number,\n  overlapType: number\n) {\n  const { imageData, lower, upper, dimensions } = volumeInfo;\n\n  let total, overlaps, range;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const overlapBounds = getVoxelOverlap(\n        imageData,\n        dimensions,\n        volumeInfoList[baseVolumeIdx].spacing,\n        volumeInfoList[baseVolumeIdx].imageData.getPoint(i)\n      );\n\n      const callbackOverlap = ({ value }) => {\n        total = total + 1;\n        if (value >= range.lower && value <= range.upper) {\n          overlaps = overlaps + 1;\n        }\n      };\n\n      total = 0;\n      overlaps = 0;\n      range = { lower, upper };\n      let overlapTest = false;\n\n      // check all voxel overlaps\n      pointInShapeCallback(\n        imageData,\n        () => true,\n        callbackOverlap,\n        overlapBounds\n      );\n\n      overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n      scalarData[i] = overlapTest ? segmentationIndex : 0;\n    }\n  }\n  return { total, range, overlaps };\n}\n\nfunction _handleSameSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any\n) {\n  const { referenceValues, lower, upper } = volumeInfo;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const value = referenceValues[i];\n      scalarData[i] = value >= lower && value <= upper ? segmentationIndex : 0;\n    }\n  }\n}\n\nexport default thresholdSegmentationByRange;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the orientation of the vector in the patient coordinate system.\n * @public\n *\n * @param vector - Input array\n * @returns The orientation in the patient coordinate system.\n */\nexport default function getOrientationStringLPS(vector: Types.Point3): string {\n  // Thanks to David Clunie\n  // https://sites.google.com/site/dicomnotes/\n\n  let orientation = '';\n  const orientationX = vector[0] < 0 ? 'R' : 'L';\n  const orientationY = vector[1] < 0 ? 'A' : 'P';\n  const orientationZ = vector[2] < 0 ? 'F' : 'H';\n\n  // Should probably make this a function vector3.abs\n  const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n\n  const MIN = 0.0001;\n\n  for (let i = 0; i < 3; i++) {\n    if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n      orientation += orientationX;\n      abs[0] = 0;\n    } else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n      orientation += orientationY;\n      abs[1] = 0;\n    } else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n      orientation += orientationZ;\n      abs[2] = 0;\n    } else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n      orientation += orientationX + orientationY;\n      abs[0] = 0;\n      abs[1] = 0;\n    } else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n      orientation += orientationX + orientationZ;\n      abs[0] = 0;\n      abs[2] = 0;\n    } else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n      orientation += orientationY + orientationZ;\n      abs[1] = 0;\n      abs[2] = 0;\n    } else {\n      break;\n    }\n  }\n\n  return orientation;\n}\n","/**\n * Inverts an orientation string.\n * @public\n *\n * @param orientationString - The orientation.\n * @returns The inverted orientationString.\n */\nexport default function invertOrientationStringLPS(\n  orientationString: string\n): string {\n  let inverted = orientationString.replace('H', 'f');\n\n  inverted = inverted.replace('F', 'h');\n  inverted = inverted.replace('R', 'l');\n  inverted = inverted.replace('L', 'r');\n  inverted = inverted.replace('A', 'p');\n  inverted = inverted.replace('P', 'a');\n  inverted = inverted.toUpperCase();\n\n  return inverted;\n}\n","/**\n * CINE Tool Events\n */\nenum Events {\n  CLIP_STOPPED = 'CORNERSTONE_CINE_TOOL_STOPPED',\n  CLIP_STARTED = 'CORNERSTONE_CINE_TOOL_STARTED',\n}\n\nexport default Events;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { CINETypes } from '../../types';\n\nconst state: Record<string, CINETypes.ToolData> = {};\n\nfunction addToolState(element: HTMLDivElement, data: CINETypes.ToolData): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): CINETypes.ToolData | undefined {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport {\n  utilities as csUtils,\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  cache,\n  BaseVolumeViewport,\n  Enums,\n} from '@cornerstonejs/core';\n\nimport { Types } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState } from './state';\nimport { CINETypes } from '../../types';\nimport scroll from '../scroll';\n\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\n\nconst debounced = true;\nconst loop = true;\nconst dynamicVolumesPlayingMap = new Map();\n\n/**\n * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is\n * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.\n * The element must be a stack of images\n * @param element - HTML Element\n * @param framesPerSecond - Number of frames per second\n */\nfunction playClip(\n  element: HTMLDivElement,\n  playClipOptions: CINETypes.PlayClipOptions\n): void {\n  let playClipTimeouts;\n  let playClipIsTimeVarying;\n\n  if (element === undefined) {\n    throw new Error('playClip: element must not be undefined');\n  }\n\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'playClip: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  // 4D Cine is enabled by default\n  playClipOptions.dynamicCineEnabled =\n    playClipOptions.dynamicCineEnabled ?? true;\n\n  const { viewport } = enabledElement;\n  const volume = _getVolumeFromViewport(viewport);\n  const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n  let playClipData = getToolState(element);\n\n  const isDynamicCinePlaying =\n    playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume();\n\n  // If user is trying to play CINE for a 4D volume it first needs\n  // to stop CINE that has may be playing for any other viewport.\n  if (isDynamicCinePlaying) {\n    _stopDynamicVolumeCine(element);\n  }\n\n  if (!playClipData) {\n    playClipData = {\n      intervalId: undefined,\n      framesPerSecond: 30,\n      lastFrameTimeStamp: undefined,\n      ignoreFrameTimeVector: false,\n      usingFrameTimeVector: false,\n      frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n      speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n      reverse: playClipOptions.reverse ?? false,\n      loop: playClipOptions.loop ?? true,\n    };\n    addToolState(element, playClipData);\n  } else {\n    // Make sure the specified clip is not running before any property update.\n    // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n    // prevent stopping a 4D CINE in case it is playing on another viewport.\n    _stopClip(element, isDynamicCinePlaying);\n  }\n\n  playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n\n  // If a framesPerSecond is specified and is valid, update the playClipData now\n  if (\n    playClipOptions.framesPerSecond < 0 ||\n    playClipOptions.framesPerSecond > 0\n  ) {\n    playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n    playClipData.reverse = playClipData.framesPerSecond < 0;\n    // If framesPerSecond is given, frameTimeVector will be ignored...\n    playClipData.ignoreFrameTimeVector = true;\n  }\n\n  // Determine if frame time vector should be used instead of a fixed frame rate...\n  if (\n    playClipData.ignoreFrameTimeVector !== true &&\n    playClipData.frameTimeVector &&\n    playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n    playClipContext.frameTimeVectorEnabled\n  ) {\n    const { timeouts, isTimeVarying } = _getPlayClipTimeouts(\n      playClipData.frameTimeVector,\n      playClipData.speed\n    );\n\n    playClipTimeouts = timeouts;\n    playClipIsTimeVarying = isTimeVarying;\n  }\n\n  // This function encapsulates the frame rendering logic...\n  const playClipAction = () => {\n    const { numScrollSteps, currentStepIndex } = playClipContext;\n    let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n    const newStepIndexOutOfRange =\n      newStepIndex < 0 || newStepIndex >= numScrollSteps;\n\n    if (!loop && newStepIndexOutOfRange) {\n      // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n      // prevent stopping a 4D CINE in case it is playing on another viewport.\n      _stopClip(element, isDynamicCinePlaying);\n\n      const eventDetail = { element };\n\n      triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n      return;\n    }\n\n    // Loop around if newStepIndex is out of range\n    if (newStepIndex >= numScrollSteps) {\n      newStepIndex = 0;\n    } else if (newStepIndex < 0) {\n      newStepIndex = numScrollSteps - 1;\n    }\n\n    const delta = newStepIndex - currentStepIndex;\n\n    if (delta) {\n      playClipContext.scroll(delta);\n    }\n  };\n\n  if (isDynamicCinePlaying) {\n    dynamicVolumesPlayingMap.set(volume.volumeId, element);\n  }\n\n  // If playClipTimeouts array is available, not empty and its elements are NOT uniform ...\n  // ... (at least one timeout is different from the others), use alternate setTimeout implementation\n  if (\n    playClipTimeouts &&\n    playClipTimeouts.length > 0 &&\n    playClipIsTimeVarying\n  ) {\n    playClipData.usingFrameTimeVector = true;\n    playClipData.intervalId = window.setTimeout(\n      function playClipTimeoutHandler() {\n        playClipData.intervalId = window.setTimeout(\n          playClipTimeoutHandler,\n          playClipTimeouts[playClipContext.currentStepIndex]\n        );\n        playClipAction();\n      },\n      0\n    );\n  } else {\n    // ... otherwise user setInterval implementation which is much more efficient.\n    playClipData.usingFrameTimeVector = false;\n    playClipData.intervalId = window.setInterval(\n      playClipAction,\n      1000 / Math.abs(playClipData.framesPerSecond)\n    );\n  }\n\n  const eventDetail = {\n    element,\n  };\n\n  triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\n\n/**\n * Stops an already playing clip.\n * @param element - HTML Element\n */\nfunction stopClip(element: HTMLDivElement): void {\n  _stopClip(element, true);\n}\n\nfunction _stopClip(element: HTMLDivElement, stopDynamicCine: boolean): void {\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    return;\n  }\n  const { viewport } = enabledElement;\n  const cineToolData = getToolState(viewport.element);\n\n  if (cineToolData) {\n    _stopClipWithData(cineToolData);\n  }\n\n  if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n    _stopDynamicVolumeCine(element);\n  }\n}\n\n/**\n * [private] Stops any CINE playing for the dynamic volume loaded on this viewport\n * @param element - HTML Element\n */\nfunction _stopDynamicVolumeCine(element) {\n  const { viewport } = getEnabledElement(element);\n  const volume = _getVolumeFromViewport(viewport);\n\n  // If the current viewport has a 4D volume loaded it may be playing\n  // if it is also loaded on another viewport and user has started CINE\n  // for that one. This guarantees the other viewport will also be stopped.\n  if (volume?.isDynamicVolume()) {\n    const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n\n    dynamicVolumesPlayingMap.delete(volume.volumeId);\n\n    if (dynamicCineElement && dynamicCineElement !== element) {\n      stopClip(<HTMLDivElement>dynamicCineElement);\n    }\n  }\n}\n\n/**\n * [private] Turns a Frame Time Vector (0018,1065) array into a normalized array of timeouts. Each element\n * ... of the resulting array represents the amount of time each frame will remain on the screen.\n * @param vector - A Frame Time Vector (0018,1065) as specified in section C.7.6.5.1.2 of DICOM standard.\n * @param speed - A speed factor which will be applied to each element of the resulting array.\n * @returns An array with timeouts for each animation frame.\n */\nfunction _getPlayClipTimeouts(vector: number[], speed: number) {\n  let i;\n  let sample;\n  let delay;\n  let sum = 0;\n  const limit = vector.length;\n  const timeouts = [];\n\n  // Initialize time varying to false\n  let isTimeVarying = false;\n\n  if (typeof speed !== 'number' || speed <= 0) {\n    speed = 1;\n  }\n\n  // First element of a frame time vector must be discarded\n  for (i = 1; i < limit; i++) {\n    // eslint-disable-next-line no-bitwise\n    delay = (Number(vector[i]) / speed) | 0; // Integral part only\n    timeouts.push(delay);\n    if (i === 1) {\n      // Use first item as a sample for comparison\n      sample = delay;\n    } else if (delay !== sample) {\n      isTimeVarying = true;\n    }\n\n    sum += delay;\n  }\n\n  if (timeouts.length > 0) {\n    if (isTimeVarying) {\n      // If it's a time varying vector, make the last item an average...\n      // eslint-disable-next-line no-bitwise\n      delay = (sum / timeouts.length) | 0;\n    } else {\n      delay = timeouts[0];\n    }\n\n    timeouts.push(delay);\n  }\n\n  return { timeouts, isTimeVarying };\n}\n\n/**\n * [private] Performs the heavy lifting of stopping an ongoing animation.\n * @param element - HTML Element\n * @param playClipData - The data from playClip that needs to be stopped.\n */\nfunction _stopClipWithData(playClipData) {\n  const id = playClipData.intervalId;\n\n  if (typeof id !== 'undefined') {\n    playClipData.intervalId = undefined;\n    if (playClipData.usingFrameTimeVector) {\n      clearTimeout(id);\n    } else {\n      clearInterval(id);\n    }\n  }\n}\n\nfunction _getVolumesFromViewport(viewport): Types.IImageVolume[] {\n  return viewport\n    .getActors()\n    .map((actor) => cache.getVolume(actor.uid))\n    .filter((volume) => !!volume);\n}\n\nfunction _getVolumeFromViewport(viewport): Types.IImageVolume {\n  const volumes = _getVolumesFromViewport(viewport);\n  const dynamicVolume = volumes.find((volume) => volume.isDynamicVolume());\n\n  return dynamicVolume ?? volumes[0];\n}\n\nfunction _createStackViewportCinePlayContext(\n  viewport: StackViewport,\n  waitForRendered: number\n): CINETypes.CinePlayContext {\n  const imageIds = viewport.getImageIds();\n\n  return {\n    get numScrollSteps(): number {\n      return imageIds.length;\n    },\n    get currentStepIndex(): number {\n      return viewport.getTargetImageIdIndex();\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // It is always in acquired orientation\n      return true;\n    },\n    waitForRenderedCount: 0,\n    scroll(delta: number): void {\n      if (\n        this.waitForRenderedCount <= waitForRendered &&\n        viewport.viewportStatus !== ViewportStatus.RENDERED\n      ) {\n        this.waitForRenderedCount++;\n        return;\n      }\n      this.waitForRenderedCount = 0;\n      scroll(viewport, { delta, debounceLoading: debounced });\n    },\n  };\n}\n\nfunction _createVolumeViewportCinePlayContext(\n  viewport: VolumeViewport,\n  volume: Types.IImageVolume\n): CINETypes.CinePlayContext {\n  const { volumeId } = volume;\n  const cachedScrollInfo = {\n    viewPlaneNormal: vec3.create(),\n    scrollInfo: null,\n  };\n\n  const getScrollInfo = () => {\n    const camera = viewport.getCamera();\n    const updateCache =\n      !cachedScrollInfo.scrollInfo ||\n      !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n\n    // Number of steps would change only after rotating the volume so it\n    // caches the result and recomputes only when necessary. Until it is\n    // rotated the current frame is updated locally\n    if (updateCache) {\n      const scrollInfo = csUtils.getVolumeViewportScrollInfo(\n        viewport,\n        volumeId\n      );\n\n      cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n      cachedScrollInfo.scrollInfo = scrollInfo;\n    }\n\n    return cachedScrollInfo.scrollInfo;\n  };\n\n  return {\n    get numScrollSteps(): number {\n      return getScrollInfo().numScrollSteps;\n    },\n    get currentStepIndex(): number {\n      return getScrollInfo().currentStepIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      const camera = viewport.getCamera();\n      const volumeViewPlaneNormal = volume.direction\n        .slice(6, 9)\n        .map((x) => -x) as Types.Point3;\n      const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n\n      // Check if the volume is in acquired orientation\n      // it may be flipped or rotated in plane\n      return glMatrix.equals(dot, 1);\n    },\n    scroll(delta: number): void {\n      getScrollInfo().currentStepIndex += delta;\n      scroll(viewport, { delta });\n    },\n  };\n}\n\nfunction _createDynamicVolumeViewportCinePlayContext(\n  volume: Types.IDynamicImageVolume\n): CINETypes.CinePlayContext {\n  return {\n    get numScrollSteps(): number {\n      return volume.numTimePoints;\n    },\n    get currentStepIndex(): number {\n      return volume.timePointIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // Looping throught time does not uses frameTimeVector\n      return false;\n    },\n    scroll(delta: number): void {\n      // Updating this property (setter) makes it move to the desired time point\n      volume.timePointIndex += delta;\n    },\n  };\n}\n\nfunction _createCinePlayContext(\n  viewport,\n  playClipOptions: CINETypes.PlayClipOptions\n): CINETypes.CinePlayContext {\n  if (viewport instanceof StackViewport) {\n    return _createStackViewportCinePlayContext(\n      viewport,\n      playClipOptions.waitForRendered ?? 30\n    );\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    const volume = _getVolumeFromViewport(viewport);\n\n    if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n      return _createDynamicVolumeViewportCinePlayContext(\n        <Types.IDynamicImageVolume>volume\n      );\n    }\n\n    return _createVolumeViewportCinePlayContext(viewport, volume);\n  }\n\n  throw new Error('Unknown viewport type');\n}\n\nexport { playClip, stopClip };\n","import { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROITool } from '../../tools';\nimport { ToolGroupManager } from '../../store';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nfunction shouldPreventInterpolation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  if (!annotation?.data?.polyline || knotsRatioPercentage <= 0) {\n    return true;\n  }\n\n  if (!enabledElement.viewport) {\n    return true;\n  }\n\n  const { renderingEngineId, viewportId, FrameOfReferenceUID } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (annotation.metadata.FrameOfReferenceUID !== FrameOfReferenceUID) {\n    return true;\n  }\n\n  if (!toolGroup) {\n    return true;\n  }\n\n  const toolInstance = toolGroup.getToolInstance(annotation.metadata.toolName);\n\n  // strategy to prevent non PlanarFreehandTool\n  if (!(toolInstance instanceof PlanarFreehandROITool)) {\n    return true;\n  }\n\n  return (\n    toolInstance.isDrawing ||\n    toolInstance.isEditingOpen ||\n    toolInstance.isEditingClosed\n  );\n}\n/**\n * Interpolates a given annotation from a given enabledElement.\n * It mutates annotation param.\n * The param knotsRatioPercentage defines the percentage of points to be considered as knots on the interpolation process.\n * Interpolation will be skipped in case: annotation is not present in enabledElement (or there is no toolGroup associated with it), related tool is being modified.\n */\nexport default function interpolateAnnotation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  // prevent running while there is any tool annotation being modified\n  if (\n    shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage)\n  ) {\n    return false;\n  }\n\n  const { viewport } = enabledElement;\n  // use only 2 dimensions on interpolation (what visually matters),\n  // otherwise a 3d interpolation might have a totally different output as it consider one more dimension.\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const interpolatedCanvasPoints = <Types.Point2[]>(\n    interpolateSegmentPoints(\n      canvasPoints,\n      0,\n      canvasPoints.length,\n      knotsRatioPercentage\n    )\n  );\n\n  if (interpolatedCanvasPoints === canvasPoints) {\n    return false;\n  }\n\n  annotation.data.polyline = interpolatedCanvasPoints.map(\n    viewport.canvasToWorld\n  );\n\n  return true;\n}\n","import interpolateAnnotation from './interpolateAnnotation';\n\nexport default {\n  interpolateAnnotation,\n};\n\nexport { interpolateAnnotation };\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state: Record<number, any> = {};\n\nfunction addToolState(element: HTMLDivElement, data): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): any {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getToolState } from './state';\n\nexport const requestType = Enums.RequestType.Prefetch;\nexport const priority = 0;\n\nexport function range(lowEnd, highEnd) {\n  // Javascript version of Python's range function\n  // http://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-an-array-based-on-suppl\n  lowEnd = Math.round(lowEnd) || 0;\n  highEnd = Math.round(highEnd) || 0;\n\n  const arr = [];\n  let c = highEnd - lowEnd + 1;\n\n  if (c <= 0) {\n    return arr;\n  }\n\n  while (c--) {\n    arr[c] = highEnd--;\n  }\n\n  return arr;\n}\n\nexport function nearestIndex(arr, x) {\n  // Return index of nearest values in array\n  // http://stackoverflow.com/questions/25854212/return-index-of-nearest-values-in-an-array\n  let low = 0;\n  let high = arr.length - 1;\n\n  arr.forEach((v, idx) => {\n    if (v < x) {\n      low = Math.max(idx, low);\n    } else if (v > x) {\n      high = Math.min(idx, high);\n    }\n  });\n\n  return { low, high };\n}\n\nexport function getStackData(element) {\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    // Can be not valid if the data is changed part way through prefetch\n    return null;\n  }\n\n  const { viewport } = enabledElement;\n\n  if (!(viewport instanceof StackViewport)) {\n    throw new Error(\n      'stackPrefetch: element must be a StackViewport, VolumeViewport stackPrefetch not yet implemented'\n    );\n  }\n\n  return {\n    currentImageIdIndex: viewport.getCurrentImageIdIndex(),\n    imageIds: viewport.getImageIds(),\n  };\n}\n\nexport function getPromiseRemovedHandler(element) {\n  return function (e) {\n    const eventData = e.detail;\n\n    // When an imagePromise has been pushed out of the cache, re-add its index\n    // It to the indicesToRequest list so that it will be retrieved later if the\n    // CurrentImageIdIndex is changed to an image nearby\n    let stackData;\n\n    try {\n      // It will throw an exception in some cases (eg: thumbnails)\n      stackData = getStackData(element);\n    } catch (error) {\n      return;\n    }\n\n    if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {\n      return;\n    }\n\n    const stack = stackData;\n    const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);\n\n    // Make sure the image that was removed is actually in this stack\n    // Before adding it to the indicesToRequest array\n    if (imageIdIndex < 0) {\n      return;\n    }\n\n    const stackPrefetchData = getToolState(element);\n\n    if (\n      !stackPrefetchData ||\n      !stackPrefetchData.data ||\n      !stackPrefetchData.data.length\n    ) {\n      return;\n    }\n\n    stackPrefetchData.indicesToRequest.push(imageIdIndex);\n  };\n}\n\nexport const clearFromImageIds = (stack) => {\n  const imageIdSet = new Set<string>(stack.imageIds);\n  return (requestDetails) =>\n    requestDetails.type !== requestType ||\n    !imageIdSet.has(requestDetails.additionalDetails.imageId);\n};\n","import {\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport {\n  getStackData,\n  requestType,\n  priority,\n  getPromiseRemovedHandler,\n  nearestIndex,\n  range,\n} from './stackPrefetchUtils';\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  // Preserving the existing pool should be the default behaviour, as there might\n  // be a volume of the same series already being loaded in the pool, and we don't want\n  // to cancel it middle of the way when the other stack viewport mounts. Worst case scenario\n  // there will be a few extra images in the pool but by the time that their turn comes\n  // we will have already loaded the volume and it will get read from the CACHE,\n  // so who cares\n  preserveExistingPool: true,\n};\n\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\n\nfunction prefetch(element) {\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n  const stack = getStackData(element);\n\n  if (!stack?.imageIds?.length) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  const { currentImageIdIndex } = stack;\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  stackPrefetch.enabled &&= stackPrefetch.indicesToRequest?.length;\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array\n  stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n\n  indicesToRequestCopy.forEach(function (imageIdIndex) {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n    // For nearby objects, ensure the last accessed time is updated\n    // by using getImageLoadObject.\n    // For more distant objects, just check if available, but dont\n    // change the access time.\n    // This allows throwing data that hasn't been accessed and is not\n    // nearby.\n    const imageCached =\n      distance < 6\n        ? cache.getImageLoadObject(imageId)\n        : cache.isLoaded(imageId);\n\n    if (imageCached) {\n      // Already in cache\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n\n  // Identify the nearest imageIdIndex to the currentImageIdIndex\n  const nearest = nearestIndex(\n    stackPrefetch.indicesToRequest,\n    stack.currentImageIdIndex\n  );\n\n  let imageId;\n  let nextImageIdIndex;\n  const preventCache = false;\n\n  function doneCallback(image) {\n    console.log('prefetch done: %s', image.imageId);\n    const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n\n    removeFromList(imageIdIndex);\n  }\n\n  // Prefetch images around the current image (before and after)\n  let lowerIndex = nearest.low;\n  let higherIndex = nearest.high;\n  const imageIdsToPrefetch = [];\n\n  while (\n    lowerIndex >= 0 ||\n    higherIndex < stackPrefetch.indicesToRequest.length\n  ) {\n    const currentIndex = stack.currentImageIdIndex;\n    const shouldSkipLower =\n      currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n      configuration.maxImagesToPrefetch;\n    const shouldSkipHigher =\n      stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n      configuration.maxImagesToPrefetch;\n\n    const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n    const shouldLoadHigher =\n      !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n\n    if (!shouldLoadHigher && !shouldLoadLower) {\n      break;\n    }\n\n    if (shouldLoadLower) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n\n    if (shouldLoadHigher) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader.loadAndCacheImage(imageId, options);\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  imageIdsToPrefetch.forEach((imageId) => {\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\nfunction enable(element) {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = {\n    indicesToRequest: range(0, stack.imageIds.length - 1),\n    enabled: true,\n    direction: 1,\n  };\n\n  // Remove the currentImageIdIndex from the list to request\n  const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(\n    stack.currentImageIdIndex\n  );\n\n  stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n\n  addToolState(element, stackPrefetchData);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n}\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n    stackPrefetchData.enabled = false;\n\n    // Clear current prefetch requests from the requestPool\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\n\nexport default stackPrefetch;\n","import {\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport {\n  getStackData,\n  requestType,\n  priority,\n  clearFromImageIds,\n  getPromiseRemovedHandler,\n} from './stackPrefetchUtils';\nimport roundNumber from '../roundNumber';\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  // Fetch up to 2 image before and after\n  minBefore: 2,\n  maxAfter: 2,\n  // Increment the cache size by 10 images\n  directionExtraImages: 10,\n  preserveExistingPool: false,\n};\n\nlet resetPrefetchTimeout;\n// Starting the prefetch quickly isn't an issue as the main image is already being\n// loaded, so a 5 ms prefetch delay is fine\nconst resetPrefetchDelay = 5;\n\n/**\n * Call this to enable stack context sensitive prefetch.  Should be called\n * before stack data is set in order to start prefetch after load first image.\n * This will add a STACK_NEW_IMAGE to detect when a new image is displayed, and then\n * update the prefetch stack.  The context sensitive prefetch reacts to the\n * initial display, or significant moves, the already loaded images, the\n * cache size and the direction of navigation.  The behaviour is:\n *\n * 1. On navigating to a new image initially, or one that is at a different position:\n *  * Fetch the next/previous 2 images\n * 2. If the user is navigating forward/backward by less than 5 images, then\n *  * Prefetch additional images in the direction of navigation, up to 100\n * 3. If all the images in a given prefetch have completed, then:\n *  * Use the last prefetched image size as an image size for the stack\n *  * Fetch up to 1/4 of the cache size images near the current image\n *\n * This is designed to:\n *   * Get nearby images immediately so that they are available for navigation\n *     * Under the assumption that users might click and view an image, then\n *       navigate to next/previous image to see the exact image they want\n *   * Not interfere with loading other viewports if they are still loading\n *     * Load priority is prefetch, and minimal images are requested initially\n *   * Load an entire series if it will fit in memory\n *     * Allows navigating to other parts of the series and display images immediately\n *   * Have images available for CINE/navigation in one direction even when\n *     there is more image data than will fit in memory.\n *     * Up to 100 images in the direction of travel will be prefetched\n *\n * @param element - to prefetch on\n */\nconst enable = (element): void => {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  updateToolState(element);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n};\n\nfunction prefetch(element) {\n  const stack = getStackData(element);\n  if (!stack?.imageIds?.length) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  stackPrefetch.enabled &&= stackPrefetch.indicesToRequest?.length;\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array.\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n  const { currentImageIdIndex } = stack;\n\n  indicesToRequestCopy.forEach((imageIdIndex) => {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n    // For nearby objects, ensure the last accessed time is updated\n    // by using getImageLoadObject.\n    // For more distant objects, just check if available, but dont\n    // change the access time.\n    // This allows throwing data that hasn't been accessed and is not\n    // nearby.\n    const imageCached =\n      distance < 6\n        ? cache.getImageLoadObject(imageId)\n        : cache.isLoaded(imageId);\n\n    if (imageCached) {\n      // Already in cache\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n  }\n\n  function doneCallback(imageId) {\n    const imageIdIndex = stack.imageIds.indexOf(imageId);\n\n    removeFromList(imageIdIndex);\n    const image = cache.getCachedImageBasedOnImageURI(imageId);\n    const { stats } = stackPrefetch;\n    const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n    if (decodeTimeInMS) {\n      stats.imageIds.set(imageId, decodeTimeInMS);\n      stats.decodeTimeInMS += decodeTimeInMS;\n      const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n      stats.loadTimeInMS += loadTimeInMS;\n    }\n\n    if (!stackPrefetch.indicesToRequest.length) {\n      if (image?.sizeInBytes) {\n        const { sizeInBytes } = image;\n        const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n        if (!stackPrefetch.cacheFill) {\n          stats.initialTime = Date.now() - stats.start;\n          stats.initialSize = stats.imageIds.size;\n          updateToolState(element, usage);\n          prefetch(element);\n        } else if (stats.imageIds.size) {\n          stats.fillTime = Date.now() - stats.start;\n          const { size } = stats.imageIds;\n          stats.fillSize = size;\n          console.log(\n            'Done cache fill',\n            stats.fillTime,\n            'ms',\n            size,\n            'items',\n            'average total time',\n            roundNumber(stats.fillTime / size),\n            'ms',\n            'average load',\n            roundNumber(stats.loadTimeInMS / size),\n            'ms',\n            'average decode',\n            roundNumber(stats.decodeTimeInMS / size),\n            'ms'\n          );\n        }\n      }\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader\n      .loadAndCacheImage(imageId, options)\n      .then(() => doneCallback(imageId));\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  indicesToRequestCopy.forEach((imageIdIndex) => {\n    const imageId = stack.imageIds[imageIdIndex];\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      updateToolState(element);\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\n// Not a full signum, but good enough for direction.\nconst signum = (x) => (x < 0 ? -1 : 1);\n\nconst updateToolState = (element, usage?: number) => {\n  const stack = getStackData(element);\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  const { currentImageIdIndex } = stack;\n  let { maxAfter = 2, minBefore = 2 } = configuration;\n  const { directionExtraImages = 10 } = configuration;\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = getToolState(element) || {\n    indicesToRequest: [],\n    currentImageIdIndex,\n    stackCount: 0,\n    enabled: true,\n    direction: 1,\n    stats: {\n      start: Date.now(),\n      imageIds: new Map(),\n      decodeTimeInMS: 0,\n      loadTimeInMS: 0,\n      totalBytes: 0,\n    },\n  };\n  const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n  stackPrefetchData.direction = signum(delta);\n  stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n  stackPrefetchData.enabled = true;\n\n  if (stackPrefetchData.stackCount < 100) {\n    stackPrefetchData.stackCount += directionExtraImages;\n  }\n\n  if (Math.abs(delta) > maxAfter || !delta) {\n    // Not incrementing by 1, so stop increasing the data size\n    // TODO - consider reversing the CINE playback\n    stackPrefetchData.stackCount = 0;\n    if (usage) {\n      // The usage of the cache that this stack can use\n      const positionFraction = currentImageIdIndex / stack.imageIds.length;\n      minBefore = Math.ceil(usage * positionFraction);\n      maxAfter = Math.ceil(usage * (1 - positionFraction));\n      stackPrefetchData.cacheFill = true;\n    } else {\n      stackPrefetchData.cacheFill = false;\n    }\n  } else if (delta < 0) {\n    minBefore += stackPrefetchData.stackCount;\n    maxAfter = 0;\n  } else {\n    maxAfter += stackPrefetchData.stackCount;\n    minBefore = 0;\n  }\n\n  const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n\n  const maxIndex = Math.min(\n    stack.imageIds.length - 1,\n    currentImageIdIndex + maxAfter\n  );\n\n  // Order these correctly initially\n  const indicesToRequest = [];\n  for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n    indicesToRequest.push(i);\n  }\n  for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n    indicesToRequest.push(i);\n  }\n  stackPrefetchData.indicesToRequest = indicesToRequest;\n\n  addToolState(element, stackPrefetchData);\n};\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.data.length) {\n    stackPrefetchData.enabled = false;\n    // Don't worry about clearing the requests - there aren't that many too be bothersome\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nconst stackContextPrefetch = {\n  enable,\n  disable,\n  getConfiguration,\n  setConfiguration,\n};\n\nexport default stackContextPrefetch;\n","import { utilities, cache, Types } from '@cornerstonejs/core';\nimport { getVoxelOverlap } from '../segmentation/utilities';\nimport pointInShapeCallback from '../pointInShapeCallback';\n\n/**\n * Gets the scalar data for a series of time points for either a single\n * coordinate or a segmentation mask, it will return the an array of scalar\n * data for a single coordinate or an array of arrays for a segmentation.\n *\n * @param dynamicVolume - 4D volume to compute time point data from\n * @param options - frameNumbers: which frames to use as timepoints, if left\n * blank, gets data timepoints over all frames\n * maskVolumeId: segmentationId to get timepoint data of\n * imageCoordinate: world coordinate to get timepoint data of\n * @returns\n */\nfunction getDataInTime(\n  dynamicVolume: Types.IDynamicImageVolume,\n  options: {\n    frameNumbers?;\n    maskVolumeId?;\n    imageCoordinate?;\n  }\n): number[] | number[][] {\n  let dataInTime;\n\n  // if frameNumbers is not provided, all frames are selected\n  const frames = options.frameNumbers || [\n    ...Array(dynamicVolume.numTimePoints).keys(),\n  ];\n\n  // You only need to provide either maskVolumeId OR imageCoordinate.\n  // Throws error if neither maskVolumeId or imageCoordinate is given,\n  // throws error if BOTH maskVolumeId and imageCoordinate is given\n  if (!options.maskVolumeId && !options.imageCoordinate) {\n    throw new Error(\n      'You should provide either maskVolumeId or imageCoordinate'\n    );\n  }\n\n  if (options.maskVolumeId && options.imageCoordinate) {\n    throw new Error('You can only use one of maskVolumeId or imageCoordinate');\n  }\n\n  if (options.maskVolumeId) {\n    const segmentationVolume = cache.getVolume(options.maskVolumeId);\n\n    const [dataInTime, ijkCoords] = _getTimePointDataMask(\n      frames,\n      dynamicVolume,\n      segmentationVolume\n    );\n\n    return [dataInTime, ijkCoords];\n  }\n\n  if (options.imageCoordinate) {\n    const dataInTime = _getTimePointDataCoordinate(\n      frames,\n      options.imageCoordinate,\n      dynamicVolume\n    );\n\n    return dataInTime;\n  }\n\n  return dataInTime;\n}\n\nfunction _getTimePointDataCoordinate(frames, coordinate, volume) {\n  const { dimensions, imageData } = volume;\n  const index = imageData.worldToIndex(coordinate);\n\n  index[0] = Math.floor(index[0]);\n  index[1] = Math.floor(index[1]);\n  index[2] = Math.floor(index[2]);\n\n  if (!utilities.indexWithinDimensions(index, dimensions)) {\n    throw new Error('outside bounds');\n  }\n\n  // calculate offset for index\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  frames.forEach((frame) => {\n    const activeScalarData = allScalarData[frame];\n    const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n    value.push(activeScalarData[scalarIndex]);\n  });\n\n  return value;\n}\n\nfunction _getTimePointDataMask(frames, dynamicVolume, segmentationVolume) {\n  const { imageData: maskImageData } = segmentationVolume;\n  const segScalarData = segmentationVolume.getScalarData();\n\n  const len = segScalarData.length;\n\n  // Pre-allocate memory for array\n  const nonZeroVoxelIndices = [];\n  nonZeroVoxelIndices.length = len;\n  const ijkCoords = [];\n\n  const dimensions = segmentationVolume.dimensions;\n\n  // Get the index of every non-zero voxel in mask\n  let actualLen = 0;\n  for (let i = 0, len = segScalarData.length; i < len; i++) {\n    if (segScalarData[i] !== 0) {\n      ijkCoords.push([\n        i % dimensions[0],\n        Math.floor((i / dimensions[0]) % dimensions[1]),\n        Math.floor(i / (dimensions[0] * dimensions[1])),\n      ]);\n      nonZeroVoxelIndices[actualLen++] = i;\n    }\n  }\n\n  // Trim the array to actual size\n  nonZeroVoxelIndices.length = actualLen;\n\n  const dynamicVolumeScalarDataArray = dynamicVolume.getScalarDataArrays();\n  const values = [];\n  const isSameVolume =\n    dynamicVolumeScalarDataArray[0].length === len &&\n    JSON.stringify(dynamicVolume.spacing) ===\n      JSON.stringify(segmentationVolume.spacing);\n\n  // if the segmentation mask is the same size as the dynamic volume (one frame)\n  // means we can just return the scalar data for the non-zero voxels\n  if (isSameVolume) {\n    for (let i = 0; i < nonZeroVoxelIndices.length; i++) {\n      const indexValues = [];\n      frames.forEach((frame) => {\n        const activeScalarData = dynamicVolumeScalarDataArray[frame];\n        indexValues.push(activeScalarData[nonZeroVoxelIndices[i]]);\n      });\n      values.push(indexValues);\n    }\n\n    return [values, ijkCoords];\n  }\n\n  // In case that the segmentation mask is not the same size as the dynamic volume (one frame)\n  // then we need to consider each voxel in the segmentation mask and check if it\n  // overlaps with the other volume, and if so we need to average the values of the\n  // overlapping voxels.\n  const callback = ({\n    pointLPS: segPointLPS,\n    value: segValue,\n    pointIJK: segPointIJK,\n  }) => {\n    // see if the value is non-zero\n    if (segValue === 0) {\n      // not interested\n      return;\n    }\n\n    // Then for each non-zero voxel in the segmentation mask, we should\n    // again perform the pointInShapeCallback to run the averaging callback\n    // function to get the average value of the overlapping voxels.\n    const overlapIJKMinMax = getVoxelOverlap(\n      dynamicVolume.imageData,\n      dynamicVolume.dimensions,\n      dynamicVolume.spacing,\n      segPointLPS\n    );\n\n    // count represents the number of voxels of the dynamic volume that represents\n    // one voxel of the segmentation mask\n    let count = 0;\n    const perFrameSum = new Map();\n\n    // Pre-initialize the Map\n    frames.forEach((frame) => perFrameSum.set(frame, 0));\n\n    const averageCallback = ({ index }) => {\n      for (let i = 0; i < frames.length; i++) {\n        const value = dynamicVolumeScalarDataArray[i][index];\n        const frame = frames[i];\n        perFrameSum.set(frame, perFrameSum.get(frame) + value);\n      }\n      count++;\n    };\n\n    pointInShapeCallback(\n      dynamicVolume.imageData,\n      () => true,\n      averageCallback,\n      overlapIJKMinMax\n    );\n\n    // average the values\n    const averageValues = [];\n    perFrameSum.forEach((sum) => {\n      averageValues.push(sum / count);\n    });\n\n    ijkCoords.push(segPointIJK);\n    values.push(averageValues);\n  };\n\n  // Since we have the non-zero voxel indices of the segmentation mask,\n  // we theoretically can use them, however, we kind of need to compute the\n  // pointLPS for each of the non-zero voxel indices, which is a bit of a pain.\n  // Todo: consider using the nonZeroVoxelIndices to compute the pointLPS\n  pointInShapeCallback(maskImageData, () => true, callback);\n\n  return [values, ijkCoords];\n}\n\nexport default getDataInTime;\n","import { Enums, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time frames from a 4D volume, returns an\n * array of scalar data after performing AVERAGE, SUM or SUBTRACT to be used to\n * create a 3D volume\n *\n * @param dynamicVolume4D - volume to compute time frame data from\n * @param operation - operation to perform on time frame data, operations include\n * SUM, AVERAGE, and SUBTRACT (can only be used with 2 time frames provided)\n * @param frameNumbers - an array of frame indices to perform the operation on, if\n * left empty, all frames will be used\n * @returns\n */\nfunction generateImageFromTimeData(\n  dynamicVolume: Types.IDynamicImageVolume,\n  operation: string,\n  frameNumbers?: number[]\n) {\n  // If no time frames provided, use all time frames\n  const frames = frameNumbers || [...Array(dynamicVolume.numTimePoints).keys()];\n  const numFrames = frames.length;\n\n  if (frames.length <= 1) {\n    throw new Error('Please provide two or more time points');\n  }\n\n  // Gets scalar data for all time frames\n  const typedArrays = dynamicVolume.getScalarDataArrays();\n\n  const arrayLength = typedArrays[0].length;\n  const finalArray = new Float32Array(arrayLength);\n\n  if (operation === Enums.DynamicOperatorType.SUM) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.SUBTRACT) {\n    if (frames.length > 2) {\n      throw new Error('Please provide only 2 time points for subtraction.');\n    }\n    for (let j = 0; j < arrayLength; j++) {\n      finalArray[j] += typedArrays[frames[0]][j] - typedArrays[frames[1]][j];\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.AVERAGE) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    for (let k = 0; k < arrayLength; k++) {\n      finalArray[k] = finalArray[k] / numFrames;\n    }\n    return finalArray;\n  }\n}\n\nexport default generateImageFromTimeData;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\n\n/**\n * Gets a point from an array of numbers given its index\n * @param points array of number, each point defined by three consecutive numbers\n * @param idx index of the point to retrieve\n * @returns\n */\nexport function getPoint(points, idx) {\n  if (idx < points.length / 3) {\n    return [points[idx * 3], points[idx * 3 + 1], points[idx * 3 + 2]];\n  }\n}\n\n/**\n * Extract contour point sets from the outline of a poly data actor\n * @param polyData - vtk polyData\n * @returns\n */\nexport function getPolyDataPointIndexes(polyData: vtkPolyData) {\n  const linesData = polyData.getLines().getData();\n  let idx = 0;\n  const lineSegments = new Map<number, number[]>();\n\n  // Populate lineSegments map\n  while (idx < linesData.length) {\n    const segmentSize = linesData[idx++];\n    const segment = [];\n    for (let i = 0; i < segmentSize; i++) {\n      segment.push(linesData[idx + i]);\n    }\n    lineSegments.set(segment[0], segment);\n    idx += segmentSize;\n  }\n\n  const contours = [];\n\n  // Function to find an available starting point\n  const findStartingPoint = (map) => {\n    for (const [key, value] of map.entries()) {\n      if (value !== undefined) {\n        return key;\n      }\n    }\n    return -1;\n  };\n\n  // Build contours\n  let startPoint = findStartingPoint(lineSegments);\n  while (startPoint !== -1) {\n    const contour = [startPoint];\n    while (lineSegments.has(startPoint)) {\n      const nextPoint = lineSegments.get(startPoint)[1];\n      if (lineSegments.has(nextPoint)) {\n        contour.push(nextPoint);\n      }\n      lineSegments.delete(startPoint);\n      startPoint = nextPoint;\n    }\n    contours.push(contour);\n    startPoint = findStartingPoint(lineSegments);\n  }\n\n  return contours.length ? contours : undefined;\n}\n\n/**\n * Extract contour points from a poly data object\n * @param polyData - vtk polyData\n * @returns\n */\nexport function getPolyDataPoints(polyData: vtkPolyData) {\n  const contoursIndexes = getPolyDataPointIndexes(polyData);\n  if (!contoursIndexes) {\n    return;\n  }\n\n  const rawPointsData = polyData.getPoints().getData();\n  return contoursIndexes.map((contourIndexes) =>\n    contourIndexes.map((index) => getPoint(rawPointsData, index))\n  );\n}\n","/**\n * Specify the position of the text/ticks.\n * Left/Right are the valid options for a vertical colorbars and Top/Bottom\n * for the horizontal ones.\n */\nexport enum ColorbarRangeTextPosition {\n  Top = 'top',\n  Left = 'left',\n  Bottom = 'bottom',\n  Right = 'right',\n}\n","import type { ColorbarImageRange } from '../types/ColorbarImageRange';\n\nconst isRangeValid = (range: ColorbarImageRange) => {\n  return range && range.upper > range.lower;\n};\n\nexport { isRangeValid as default, isRangeValid };\n","import type { ColorbarSize } from '../types/ColorbarSize';\n\nconst isColorbarSizeValid = (size: ColorbarSize) => {\n  return !!size && size.width > 0 && size.height > 0;\n};\n\nexport { isColorbarSizeValid as default, isColorbarSizeValid };\n","import type { ColorbarImageRange } from '../types/ColorbarImageRange';\n\nconst areColorbarRangesEqual = (\n  a: ColorbarImageRange,\n  b: ColorbarImageRange\n) => {\n  return !!a && !!b && a.lower === b.lower && a.upper === b.upper;\n};\n\nexport { areColorbarRangesEqual as default, areColorbarRangesEqual };\n","import type { ColorbarSize } from '../types/ColorbarSize';\n\nconst areColorbarSizesEqual = (a: ColorbarSize, b: ColorbarSize) => {\n  return !!a && !!b && a.width === b.width && a.height === b.height;\n};\n\nexport { areColorbarSizesEqual as default, areColorbarSizesEqual };\n","import { IColorMapPreset } from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { utilities } from '@cornerstonejs/core';\nimport interpolateVec3 from '../../math/vec3/interpolateVec3';\nimport { ColorbarCanvasProps } from './types/ColorbarCanvasProps';\nimport type { ColorbarImageRange, ColorbarVOIRange } from './types';\nimport type { ColorbarSize } from './types/ColorbarSize';\nimport {\n  isRangeValid,\n  areColorbarRangesEqual,\n  isColorbarSizeValid,\n  areColorbarSizesEqual,\n} from './common';\n\nconst { clamp } = utilities;\n\n/**\n * Canvas referenced by the color bar where the colormap is rendered. It may\n * show the full image range or only the VOI range.\n */\nclass ColorbarCanvas {\n  private _canvas: HTMLCanvasElement;\n  private _imageRange: ColorbarImageRange;\n  private _voiRange: ColorbarVOIRange;\n  private _colormap: IColorMapPreset;\n  private _showFullImageRange: boolean;\n\n  constructor(props: ColorbarCanvasProps) {\n    ColorbarCanvas.validateProps(props);\n\n    const {\n      colormap,\n      size = { width: 20, height: 100 },\n      imageRange = { lower: 0, upper: 1 },\n      voiRange = { lower: 0, upper: 1 },\n      container,\n      showFullPixelValueRange = false,\n    } = props;\n\n    this._colormap = colormap;\n    this._imageRange = imageRange;\n    this._voiRange = voiRange;\n    this._showFullImageRange = showFullPixelValueRange;\n    this._canvas = this._createRootElement(size);\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  public get colormap(): IColorMapPreset {\n    return this._colormap;\n  }\n\n  public set colormap(colormap: IColorMapPreset) {\n    this._colormap = colormap;\n    this.render();\n  }\n\n  public get size(): ColorbarSize {\n    const { width, height } = this._canvas;\n    return { width, height };\n  }\n\n  public set size(size: ColorbarSize) {\n    const { _canvas: canvas } = this;\n\n    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {\n      return;\n    }\n\n    this._setCanvasSize(canvas, size);\n    this.render();\n  }\n\n  public get imageRange(): ColorbarImageRange {\n    return { ...this._imageRange };\n  }\n\n  public set imageRange(imageRange: ColorbarImageRange) {\n    if (\n      !isRangeValid(imageRange) ||\n      areColorbarRangesEqual(imageRange, this._imageRange)\n    ) {\n      return;\n    }\n\n    this._imageRange = imageRange;\n    this.render();\n  }\n\n  public get voiRange(): ColorbarVOIRange {\n    return { ...this._voiRange };\n  }\n\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, this._voiRange)\n    ) {\n      return;\n    }\n\n    this._voiRange = voiRange;\n    this.render();\n  }\n\n  public get showFullImageRange(): boolean {\n    return this._showFullImageRange;\n  }\n\n  public set showFullImageRange(showFullImageRange: boolean) {\n    if (showFullImageRange === this._showFullImageRange) {\n      return;\n    }\n\n    this._showFullImageRange = showFullImageRange;\n    this.render();\n  }\n\n  public appendTo(container: HTMLElement) {\n    container.appendChild(this._canvas);\n    this.render();\n  }\n\n  public dispose() {\n    const { _canvas: canvas } = this;\n    const { parentElement } = canvas;\n\n    parentElement?.removeChild(canvas);\n  }\n\n  private static validateProps(props: ColorbarCanvasProps) {\n    const { size, imageRange, voiRange } = props;\n\n    if (size && !isColorbarSizeValid(size)) {\n      throw new Error('Invalid \"size\"');\n    }\n\n    if (imageRange && !isRangeValid(imageRange)) {\n      throw new Error('Invalid \"imageRange\"');\n    }\n\n    if (voiRange && !isRangeValid(voiRange)) {\n      throw new Error('Invalid \"voiRange\"');\n    }\n  }\n\n  private _setCanvasSize(canvas: HTMLCanvasElement, size: ColorbarSize) {\n    const { width, height } = size;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    Object.assign(canvas.style, {\n      width: `${width}px`,\n      height: `${height}px`,\n    });\n  }\n\n  private _createRootElement(size: ColorbarSize) {\n    const canvas = document.createElement('canvas');\n\n    Object.assign(canvas.style, {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      pointerEvents: 'none',\n      boxSizing: 'border-box',\n    });\n\n    this._setCanvasSize(canvas, size);\n\n    return canvas;\n  }\n\n  private render(): void {\n    if (!this._canvas.isConnected) {\n      return;\n    }\n\n    const { _colormap: colormap } = this;\n    const { RGBPoints: rgbPoints } = colormap;\n    const colorsCount = rgbPoints.length / 4;\n\n    // Returns a color point from rgbPoints. Each point has position, red,\n    // green and blue components which means each point has an offset equal\n    // to `4 * index`\n    const getColorPoint = (index) => {\n      const offset = 4 * index;\n\n      // It can get out of bounds when `voiRange.upper` is smaller than\n      // `imageRange.upper`. It's also checking if is smaller than zero\n      // for safety only because that should never happens.\n      if (index < 0 || index >= colorsCount) {\n        return;\n      }\n\n      return {\n        index,\n        position: rgbPoints[offset],\n        color: [\n          rgbPoints[offset + 1],\n          rgbPoints[offset + 2],\n          rgbPoints[offset + 3],\n        ],\n      };\n    };\n\n    const { width, height } = this._canvas;\n    const canvasContext = this._canvas.getContext('2d');\n    const isHorizontal = width > height;\n    const maxValue = isHorizontal ? width : height;\n    const { _voiRange: voiRange } = this;\n    const range = this._showFullImageRange ? this._imageRange : { ...voiRange };\n\n    const { windowWidth } = utilities.windowLevel.toWindowLevel(\n      voiRange.lower,\n      voiRange.upper\n    );\n\n    let previousColorPoint = undefined;\n    let currentColorPoint = getColorPoint(0);\n\n    // Starts from `range.lower` incrementing by incRawPixelValue on each iteration\n    const incRawPixelValue = (range.upper - range.lower) / (maxValue - 1);\n    let rawPixelValue = range.lower;\n\n    for (let i = 0; i < maxValue; i++) {\n      const tVoiRange = (rawPixelValue - voiRange.lower) / windowWidth;\n\n      // Find the color in a linear way (O(n) complexity).\n      // currentColorPoint shall move to the next color until tVoiRange is smaller\n      // than or equal to next color position.\n      if (currentColorPoint) {\n        for (let i = currentColorPoint.index; i < colorsCount; i++) {\n          if (tVoiRange <= currentColorPoint.position) {\n            break;\n          }\n\n          previousColorPoint = currentColorPoint;\n          currentColorPoint = getColorPoint(i + 1);\n        }\n      }\n\n      let normColor;\n\n      // For:\n      //   - firstColorPoint = getColorPoint(0)\n      //   - secondColorPoint = getColorPoint(1)\n      //   - lastColorPoint = getColorPoint(colorsCount - 1)\n      // Then\n      //   - previousColorPoint shall be undefined when tVoiRange < firstColorPoint.position\n      //   - currentColorPoint shall be undefined when tVoiRange > lastColorPoint.position\n      //   - previousColorPoint and currentColorPoint will be defined when\n      //     currentColorPoint.position is between secondColorPoint.position and\n      //     lastColorPoint.position.\n      if (!previousColorPoint) {\n        normColor = [...currentColorPoint.color];\n      } else if (!currentColorPoint) {\n        normColor = [...previousColorPoint.color];\n      } else {\n        const tColorRange =\n          (tVoiRange - previousColorPoint.position) /\n          (currentColorPoint.position - previousColorPoint.position);\n\n        normColor = interpolateVec3(\n          previousColorPoint.color,\n          currentColorPoint.color,\n          tColorRange\n        );\n      }\n\n      const color = normColor.map((color) =>\n        clamp(Math.round(color * 255), 0, 255)\n      );\n\n      canvasContext.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n\n      if (isHorizontal) {\n        canvasContext.fillRect(i, 0, 1, height);\n      } else {\n        canvasContext.fillRect(0, height - i - 1, width, 1);\n      }\n\n      rawPixelValue += incRawPixelValue;\n    }\n  }\n}\n\nexport { ColorbarCanvas as default, ColorbarCanvas };\n","/**\n * Linear interpolation between two vec3.\n * Can be used, for example, to interpolate between two RGB colors.\n * @param a - First vec3\n * @param b - Second vec3\n * @param t - Time \"t\".\n *   - Vector A is returned for values smaller than or equel to 0.\n *   - Vector B is returned for values greater than or equal to 1.\n *   - An interpolation between vectors A and B is returned otherwise.\n * @returns\n */\nconst interpolateVec3 = (a, b, t) => {\n  return [\n    a[0] * (1 - t) + b[0] * t,\n    a[1] * (1 - t) + b[1] * t,\n    a[2] * (1 - t) + b[2] * t,\n  ];\n};\n\nexport { interpolateVec3 as default, interpolateVec3 };\n","import type {\n  ColorbarImageRange,\n  ColorbarVOIRange,\n  ColorbarSize,\n  ColorbarTicksProps,\n} from './types';\nimport {\n  isColorbarSizeValid,\n  isRangeValid,\n  areColorbarRangesEqual,\n  areColorbarSizesEqual,\n} from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\n\nconst DEFAULTS = {\n  FONT: '10px Arial',\n  COLOR: 'white',\n  TICK_SIZE: 5,\n  TICK_WIDTH: 1,\n  TICK_LABEL_MARGIN: 3,\n  MAX_NUM_TICKS: 8,\n\n  // Must start with 1 and end with 10\n  TICKS_STEPS: [1, 2.5, 5, 10],\n};\n\nclass ColorbarTicks {\n  private _canvas: HTMLCanvasElement;\n  private _imageRange: ColorbarImageRange;\n  private _voiRange: ColorbarVOIRange;\n  private _color: string;\n  private _tickSize: number;\n  private _tickWidth: number;\n  private _labelMargin: number;\n  private _maxNumTicks: number;\n  private _rangeTextPosition: ColorbarRangeTextPosition;\n  private _showFullPixelValueRange: boolean;\n  private _font: string;\n\n  constructor(props: ColorbarTicksProps) {\n    ColorbarTicks.validateProps(props);\n\n    const {\n      top = 0,\n      left = 0,\n      size = { width: 20, height: 100 },\n      imageRange = { lower: 0, upper: 1 },\n      voiRange = { lower: 0, upper: 1 },\n      ticks: ticksProps,\n      container,\n      showFullPixelValueRange = false,\n    } = props;\n\n    const { style: ticksStyle, position: rangeTextPosition } = ticksProps ?? {};\n\n    this._imageRange = imageRange;\n    this._voiRange = voiRange;\n    this._font = ticksStyle?.font ?? DEFAULTS.FONT;\n    this._color = ticksStyle?.color ?? DEFAULTS.COLOR;\n    this._tickSize = ticksStyle?.tickSize ?? DEFAULTS.TICK_SIZE;\n    this._tickWidth = ticksStyle?.tickWidth ?? DEFAULTS.TICK_WIDTH;\n    this._labelMargin = ticksStyle?.labelMargin ?? DEFAULTS.TICK_LABEL_MARGIN;\n    this._maxNumTicks = ticksStyle?.maxNumTicks ?? DEFAULTS.MAX_NUM_TICKS;\n    this._rangeTextPosition =\n      rangeTextPosition ?? ColorbarRangeTextPosition.Right;\n    this._showFullPixelValueRange = showFullPixelValueRange;\n    this._canvas = this._createCanvasElement(size, top, left);\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  public get size(): ColorbarSize {\n    const { width, height } = this._canvas;\n    return { width, height };\n  }\n\n  public set size(size: ColorbarSize) {\n    const { _canvas: canvas } = this;\n\n    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {\n      return;\n    }\n\n    this._setCanvasSize(canvas, size);\n    this.render();\n  }\n\n  /**\n   * Canvas top position (pixels)\n   */\n  public get top(): number {\n    return Number.parseInt(this._canvas.style.top);\n  }\n\n  /**\n   * Change the canvas top position (pixels)\n   */\n  public set top(top: number) {\n    const { _canvas: canvas } = this;\n    const currentTop = this.top;\n\n    if (top === currentTop) {\n      return;\n    }\n\n    canvas.style.top = `${top}px`;\n    this.render();\n  }\n\n  /**\n   * Canvas left position (pixels)\n   */\n  public get left(): number {\n    return Number.parseInt(this._canvas.style.left);\n  }\n\n  /**\n   * Change the canvas left position (pixels)\n   */\n  public set left(left: number) {\n    const { _canvas: canvas } = this;\n    const currentLeft = this.left;\n\n    if (left === currentLeft) {\n      return;\n    }\n\n    canvas.style.left = `${left}px`;\n    this.render();\n  }\n\n  /**\n   * Image range\n   */\n  public get imageRange() {\n    return { ...this._imageRange };\n  }\n\n  /**\n   * Set the image range that should goes from minPixelValue to maxPixelValue\n   */\n  public set imageRange(imageRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(imageRange) ||\n      areColorbarRangesEqual(imageRange, this._imageRange)\n    ) {\n      return;\n    }\n\n    this._imageRange = imageRange;\n    this.render();\n  }\n\n  /**\n   * VOI range\n   * (lower: wc - ww / 2, upper: wc + ww / 2)\n   */\n  public get voiRange() {\n    return { ...this._voiRange };\n  }\n\n  /**\n   * Set the VOI Range\n   * (lower: wc - ww / 2, upper: wc + ww / 2)\n   */\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, this._voiRange)\n    ) {\n      return;\n    }\n\n    this._voiRange = voiRange;\n    this.render();\n  }\n\n  /**\n   * Tick size (pixels)\n   */\n  public get tickSize(): number {\n    return this._tickSize;\n  }\n\n  /**\n   * Set the tick size\n   */\n  public set tickSize(tickSize: number) {\n    if (tickSize === this._tickSize) {\n      return;\n    }\n\n    this._tickSize = tickSize;\n    this.render();\n  }\n\n  /**\n   * Tick width (pixels)\n   */\n  public get tickWidth(): number {\n    return this._tickWidth;\n  }\n\n  /**\n   * Set the tick width. This width is used as `lineWidth` by CanvasRenderingContext2D.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth\n   */\n  public set tickWidth(tickWidth: number) {\n    if (tickWidth === this._tickWidth) {\n      return;\n    }\n\n    this._tickWidth = tickWidth;\n    this.render();\n  }\n\n  /**\n   * Color used for ticks and labels.\n   */\n  public get color(): string {\n    return this._color;\n  }\n\n  /**\n   * Set the color used for ticks and labels. This color is used as `strokeStyle`\n   * and `fillStyle` by CanvasRenderingContext2D.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n   */\n  public set color(color: string) {\n    if (color === this._color) {\n      return;\n    }\n\n    this._color = color;\n    this.render();\n  }\n\n  /**\n   * Return `true` when the ticks displayed are in the range from `imageRange.lower`\n   * to `imageRange.upper` or `false` when they are in the range from `voiRange.lower`\n   * to `voiRange.upper`\n   */\n  public get showFullPixelValueRange(): boolean {\n    return this._showFullPixelValueRange;\n  }\n\n  /**\n   * Change which range should be used when rendering the ticks. Set it to `true`\n   * to show from `imageRange.lower` to `imageRange.upper` or `false` show from\n   * `voiRange.lower` to `voiRange.upper`.\n   */\n  public set showFullPixelValueRange(showFullRange: boolean) {\n    if (showFullRange === this._showFullPixelValueRange) {\n      return;\n    }\n\n    this._showFullPixelValueRange = showFullRange;\n    this.render();\n  }\n\n  /**\n   * Ticks visibility\n   */\n  public get visible() {\n    return this._canvas.style.display === 'block';\n  }\n\n  /**\n   * Show/Hide the ticks\n   */\n  public set visible(visible) {\n    if (visible === this.visible) {\n      return;\n    }\n\n    this._canvas.style.display = visible ? 'block' : 'none';\n\n    if (visible) {\n      this.render();\n    }\n  }\n\n  /**\n   * Append the canvas to its parent element\n   * @param container - HTML element where the canvas should be added to\n   */\n  public appendTo(container: HTMLElement) {\n    container.appendChild(this._canvas);\n    this.render();\n  }\n\n  private static validateProps(props: ColorbarTicksProps) {\n    const { size, imageRange, voiRange } = props;\n\n    if (size && !isColorbarSizeValid(size)) {\n      throw new Error('Invalid \"size\"');\n    }\n\n    if (imageRange && !isRangeValid(imageRange)) {\n      throw new Error('Invalid \"imageRange\"');\n    }\n\n    if (voiRange && !isRangeValid(voiRange)) {\n      throw new Error('Invalid \"voiRange\"');\n    }\n  }\n\n  private _setCanvasSize(canvas: HTMLCanvasElement, size: ColorbarSize) {\n    const { width, height } = size;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    Object.assign(canvas.style, {\n      width: `${width}px`,\n      height: `${height}px`,\n    });\n  }\n\n  private _createCanvasElement(\n    size: ColorbarSize,\n    top: number,\n    left: number\n  ): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n\n    Object.assign(canvas.style, {\n      display: 'none',\n      position: 'absolute',\n      boxSizing: 'border-box',\n      top: `${top}px`,\n      left: `${left}px`,\n    });\n\n    this._setCanvasSize(canvas, size);\n\n    return canvas;\n  }\n\n  /**\n   * Calculate how many ticks can be displayed on the screen based on the\n   * pre-defined steps (`TICKS_STEPS`) as follow:\n   *   1. Calculate what should be the step (`roughStep`) based on the range and\n   *   the number of desired steps (`maxNumTicks`).\n   *   2. Find a number power of 10 (eg: 0.1, 1, 10, 100, etc.) that can be used\n   *   to multiply `roughStep` and return a number between 1 and 10 which is\n   *   called `roughtStepNormalized`.\n   *   3. Find in the TICKS_STEPS array a number that is bigger than or equal to\n   *   the `roughtStepNormalized` value (`normalizedStep`).\n   *   4. Multiply the `normalizedStep` to move it to the real range.\n   *\n   * @param range - Range with \"lower\" and \"upper\" values\n   */\n  private _getTicks(range) {\n    const { lower, upper } = range;\n    const rangeValue = upper - lower;\n\n    // First approximation based on the max number of ticks\n    const roughStep = rangeValue / (this._maxNumTicks - 1);\n\n    // Normalize rough step to find the normalized one that fits best\n    const stepPower = Math.pow(\n      10,\n      -Math.floor(Math.log10(Math.abs(roughStep)))\n    );\n\n    // Get a number between 1 and 10\n    const roughtStepNormalized = roughStep * stepPower;\n\n    // Find a normalize step that is greater than or equal to `roughtStepNormalized`\n    const normalizedStep = DEFAULTS.TICKS_STEPS.find(\n      (n) => n >= roughtStepNormalized\n    );\n\n    // Move `normalizedStep` to the real range\n    const step = normalizedStep / stepPower;\n\n    // Determine the scale limits based on the chosen step.\n    const scaleMax = Math.ceil(upper / step) * step;\n    const scaleMin = Math.floor(lower / step) * step;\n\n    // Find a possible tick values for the `step` computed\n    const ticksCount = Math.round((scaleMax - scaleMin) / step) + 1;\n    const ticks = [];\n\n    for (let i = 0; i < ticksCount; i++) {\n      ticks.push(scaleMin + i * step);\n    }\n\n    return { scaleMin, scaleMax, step, ticks };\n  }\n\n  private _getLeftTickInfo({ position, labelMeasure }) {\n    const { width } = this._canvas;\n    const labelX =\n      width - this.tickSize - labelMeasure.width - this._labelMargin;\n    const labelPoint = [labelX, position];\n    const tickPoints = {\n      start: [width - this._tickSize, position],\n      end: [width, position],\n    };\n\n    return { labelPoint, tickPoints };\n  }\n\n  private _getRightTickInfo({ position }) {\n    const labelPoint = [this._tickSize + this._labelMargin, position];\n    const tickPoints = {\n      start: [0, position],\n      end: [this._tickSize, position],\n    };\n\n    return { labelPoint, tickPoints };\n  }\n\n  private _getTopTickInfo({ position, labelMeasure }) {\n    throw new Error('Not implemented');\n  }\n\n  private _getBottomTickInfo({ position, labelMeasure }) {\n    throw new Error('Not implemented');\n  }\n\n  private render() {\n    const { _canvas: canvas } = this;\n\n    if (!canvas.isConnected || !this.visible) {\n      return;\n    }\n\n    const { width, height } = canvas;\n    const isHorizontal = width >= height;\n    const maxCanvasPixelValue = isHorizontal ? width : height;\n    const canvasContext = canvas.getContext('2d');\n    const { _voiRange: voiRange } = this;\n    const range = this._showFullPixelValueRange\n      ? this._imageRange\n      : { ...voiRange };\n    const rangeWidth = range.upper - range.lower;\n    const { ticks } = this._getTicks(range);\n\n    canvasContext.clearRect(0, 0, width, height);\n    canvasContext.font = this._font;\n    canvasContext.textBaseline = 'middle';\n    canvasContext.fillStyle = this._color;\n    canvasContext.strokeStyle = this._color;\n    canvasContext.lineWidth = this.tickWidth;\n\n    ticks.forEach((tick) => {\n      let position = Math.round(\n        maxCanvasPixelValue * ((tick - range.lower) / rangeWidth)\n      );\n\n      // Zero at the bottom and max at the top on vertical colorbars\n      if (!isHorizontal) {\n        position = height - position;\n      }\n\n      if (position < 0 || position > maxCanvasPixelValue) {\n        return;\n      }\n\n      const label = tick.toString();\n      const labelMeasure = canvasContext.measureText(label);\n      let tickInfo;\n\n      if (isHorizontal) {\n        if (this._rangeTextPosition === ColorbarRangeTextPosition.Top) {\n          tickInfo = this._getTopTickInfo({ position, labelMeasure });\n        } else {\n          tickInfo = this._getBottomTickInfo({ position, labelMeasure });\n        }\n      } else {\n        if (this._rangeTextPosition === ColorbarRangeTextPosition.Left) {\n          tickInfo = this._getLeftTickInfo({ position, labelMeasure });\n        } else {\n          tickInfo = this._getRightTickInfo({ position });\n        }\n      }\n\n      const { labelPoint, tickPoints } = tickInfo;\n      const { start: tickStart, end: tickEnd } = tickPoints;\n\n      canvasContext.beginPath();\n      canvasContext.moveTo(tickStart[0], tickStart[1]);\n      canvasContext.lineTo(tickEnd[0], tickEnd[1]);\n      canvasContext.fillText(label, labelPoint[0], labelPoint[1]);\n      canvasContext.stroke();\n\n      return position;\n    });\n  }\n}\n\nexport { ColorbarTicks as default, ColorbarTicks };\n","import type { WidgetProps, WidgetSize } from './types';\n\n/**\n * Base class for any widget that can be added to cornerstone. Currently it is\n * responsible only for holding the `rootElement`, contains a method that allows\n * adding it to the DOM and it also listens to container's size changes when the\n * widget is already added to the DOM. `dispose` must be called to destroy the\n * widget because it removes the widget from the DOM and stop listening to\n * container changes.\n *\n * You can apply some styles to widgets using the widget id or the `widget` class.\n *\n * Example:\n *   type ColorPickerProps = WidgetProps & {\n *     selectedColor: string;\n *   }\n *\n *   class ColorPicker extends Widget {\n *     constructor(props: ColorPickerProps) {\n *       super(props);\n *       // [code]\n *     }\n *\n *     public show() {\n *       console.log('Show color picker');\n *     }\n *\n *     protected containerResized() {\n *       console.log('New container size: ', this.containerSize);\n *     }\n *   }\n *\n *   const colorPicker = new ColorPicker({\n *     container: document.body,\n *     selectedColor: '#000';\n *   });\n *\n *   // another way to add the color picker to the DOM\n *   colorPicker.appendTo(document.body)\n *\n *   // Show color picker\n *   colorPicker.show();\n */\nabstract class Widget {\n  private _id: string;\n  private _rootElement: HTMLElement;\n  private _containerSize: WidgetSize;\n  private _containerResizeObserver: ResizeObserver;\n\n  constructor({ id, container }: WidgetProps) {\n    this._id = id;\n    this._containerSize = { width: 0, height: 0 };\n    this._rootElement = this.createRootElement(id);\n    this._containerResizeObserver = new ResizeObserver(\n      this._containerResizeCallback\n    );\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  /**\n   * Widget id\n   */\n  public get id() {\n    return this._id;\n  }\n\n  /**\n   * Widget's root element\n   */\n  public get rootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /**\n   * Append the widget to a parent element\n   * @param container - HTML element where the widget should be added to\n   */\n  public appendTo(container: HTMLElement) {\n    const {\n      _rootElement: rootElement,\n      _containerResizeObserver: resizeObserver,\n    } = this;\n    const { parentElement: currentContainer } = rootElement;\n\n    if (!container || container === currentContainer) {\n      return;\n    }\n\n    if (currentContainer) {\n      resizeObserver.unobserve(currentContainer);\n    }\n\n    container.appendChild(rootElement);\n    resizeObserver.observe(container);\n  }\n\n  /**\n   * Removes the widget from the DOM and stop listening to DOM events\n   */\n  public destroy() {\n    const {\n      _rootElement: rootElement,\n      _containerResizeObserver: resizeObserver,\n    } = this;\n    const { parentElement } = rootElement;\n\n    parentElement?.removeChild(rootElement);\n    resizeObserver.disconnect();\n  }\n\n  protected get containerSize(): WidgetSize {\n    // Returns a copy to prevent any external change\n    return { ...this._containerSize };\n  }\n\n  /**\n   * Creates the root element which is a div by default\n   * @param id - Root element id\n   * @returns A new HTML element where all other elements should be added to\n   */\n  protected createRootElement(id: string): HTMLElement {\n    const rootElement = document.createElement('div');\n\n    rootElement.id = id;\n    rootElement.classList.add('widget');\n\n    Object.assign(rootElement.style, {\n      width: '100%',\n      height: '100%',\n    });\n\n    return rootElement;\n  }\n\n  /**\n   * Method called every time widget's container is resize giving the\n   * opportunity to children classes to act when that happens.\n   */\n  protected onContainerResize() {\n    // no-op\n  }\n\n  private _containerResizeCallback = (entries: ResizeObserverEntry[]): void => {\n    let width;\n    let height;\n\n    const { contentRect, contentBoxSize } = entries[0];\n\n    // `contentRect` is better supported than `borderBoxSize` or `contentBoxSize`,\n    // but it is left over from an earlier implementation of the Resize Observer API\n    // and may be deprecated in future versions.\n    // https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentRect\n    if (contentRect) {\n      width = contentRect.width;\n      height = contentRect.height;\n    } else if (contentBoxSize?.length) {\n      width = contentBoxSize[0].inlineSize;\n      height = contentBoxSize[0].blockSize;\n    }\n\n    this._containerSize = { width, height };\n    this.onContainerResize();\n  };\n}\n\nexport { Widget as default, Widget };\n","import { IColorMapPreset } from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { vec2 } from 'gl-matrix';\nimport { utilities as csUtils, Types } from '@cornerstonejs/core';\nimport type { ColorbarProps, ColorbarVOIRange } from './types';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\n\nconst DEFAULTS = {\n  MULTIPLIER: 1,\n  RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n  TICKS_BAR_SIZE: 50,\n};\n\ntype ColorbarPoints = {\n  page: Types.Point2;\n  client: Types.Point2;\n  local: Types.Point2;\n};\n\n/**\n * A base colorbar class that is not associated with any viewport. It is\n * possible to click and drag to change the VOI range, shows the ticks during\n * interaction and it can show full image range or VOI range.\n */\nclass Colorbar extends Widget {\n  private _colormaps: Map<string, IColorMapPreset>;\n  private _activeColormapName: string;\n  private _eventListenersManager: csUtils.eventListener.MultiTargetEventListenerManager;\n  private _canvas: ColorbarCanvas;\n  private _ticksBar: ColorbarTicks;\n  private _rangeTextPosition: ColorbarRangeTextPosition;\n\n  private _isMouseOver = false;\n  private _isInteracting = false;\n\n  constructor(props: ColorbarProps) {\n    super(props);\n\n    this._eventListenersManager =\n      new csUtils.eventListener.MultiTargetEventListenerManager();\n    this._colormaps = Colorbar.getColormapsMap(props);\n    this._activeColormapName = Colorbar.getInitialColormapName(props);\n    this._canvas = this._createCanvas(props);\n    this._ticksBar = this._createTicksBar(props);\n    this._rangeTextPosition =\n      props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n\n    this._canvas.appendTo(this.rootElement);\n    this._ticksBar.appendTo(this.rootElement);\n\n    this._addRootElementEventListeners();\n  }\n\n  /**\n   * Returns the active LUT name\n   */\n  public get activeColormapName() {\n    return this._activeColormapName;\n  }\n\n  /**\n   * Set the current active LUT name and re-renders the color bar\n   */\n  public set activeColormapName(colormapName: string) {\n    if (colormapName === this._activeColormapName) {\n      return;\n    }\n\n    const colormap = this._colormaps.get(colormapName);\n\n    if (!colormap) {\n      console.warn(`Invalid colormap name (${colormapName})`);\n      return;\n    }\n\n    this._activeColormapName = colormapName;\n    this._canvas.colormap = colormap;\n  }\n\n  public get imageRange() {\n    return this._canvas.imageRange;\n  }\n\n  public set imageRange(imageRange: ColorbarVOIRange) {\n    this._canvas.imageRange = imageRange;\n    this._ticksBar.imageRange = imageRange;\n  }\n\n  public get voiRange() {\n    return this._canvas.voiRange;\n  }\n\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    const { voiRange: currentVoiRange } = this._canvas;\n\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, currentVoiRange)\n    ) {\n      return;\n    }\n\n    this._canvas.voiRange = voiRange;\n    this._ticksBar.voiRange = voiRange;\n    this.onVoiChange(voiRange);\n  }\n\n  public get showFullImageRange() {\n    return this._canvas.showFullImageRange;\n  }\n\n  public set showFullImageRange(value: boolean) {\n    this._canvas.showFullImageRange = value;\n    this._ticksBar.showFullPixelValueRange = value;\n  }\n\n  public destroy() {\n    super.destroy();\n    this._eventListenersManager.reset();\n  }\n\n  protected createRootElement(): HTMLElement {\n    const rootElement = document.createElement('div');\n\n    Object.assign(rootElement.style, {\n      position: 'relative',\n      fontSize: '0',\n      width: '100%',\n      height: '100%',\n    });\n\n    return rootElement;\n  }\n\n  protected onContainerResize() {\n    super.onContainerResize();\n    this.updateTicksBar();\n    this._canvas.size = this.containerSize;\n  }\n\n  protected getVOIMultipliers(): [number, number] {\n    return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n  }\n\n  protected onVoiChange(voiRange: ColorbarVOIRange) {\n    // no-op\n  }\n\n  protected showTicks() {\n    this.updateTicksBar();\n    this._ticksBar.visible = true;\n  }\n\n  protected hideTicks() {\n    if (this._isInteracting || this._isMouseOver) {\n      return;\n    }\n\n    this._ticksBar.visible = false;\n  }\n\n  private static getColormapsMap(props: ColorbarProps) {\n    const { colormaps } = props;\n\n    return colormaps.reduce(\n      (items, item) => items.set(item.Name, item),\n      new Map<string, IColorMapPreset>()\n    );\n  }\n\n  private static getInitialColormapName(props: ColorbarProps) {\n    const { activeColormapName, colormaps } = props;\n    const colormapExists =\n      !!activeColormapName &&\n      colormaps.some((cm) => cm.Name === activeColormapName);\n\n    return colormapExists ? activeColormapName : colormaps[0].Name;\n  }\n\n  private _createCanvas(props: ColorbarProps) {\n    const { imageRange, voiRange, showFullPixelValueRange } = props;\n    const colormap = this._colormaps.get(this._activeColormapName);\n\n    return new ColorbarCanvas({\n      colormap,\n      imageRange,\n      voiRange: voiRange,\n      showFullPixelValueRange,\n    });\n  }\n\n  public _createTicksBar(props: ColorbarProps): ColorbarTicks {\n    const ticksProps = props.ticks;\n\n    return new ColorbarTicks({\n      imageRange: props.imageRange,\n      voiRange: props.voiRange,\n      ticks: ticksProps,\n      showFullPixelValueRange: props.showFullPixelValueRange,\n    });\n  }\n\n  private _getPointsFromMouseEvent(evt: MouseEvent): ColorbarPoints {\n    const { rootElement: element } = this;\n    const clientPoint: Types.Point2 = [evt.clientX, evt.clientY];\n    const pagePoint: Types.Point2 = [evt.pageX, evt.pageY];\n    const rect = element.getBoundingClientRect();\n    const localPoints: Types.Point2 = [\n      pagePoint[0] - rect.left - window.pageXOffset,\n      pagePoint[1] - rect.top - window.pageYOffset,\n    ];\n\n    return { client: clientPoint, page: pagePoint, local: localPoints };\n  }\n\n  private updateTicksBar() {\n    const { width: containerWidth, height: containerHeight } =\n      this.containerSize;\n\n    // ResizeObserver have not triggered any event when this happen\n    if (containerWidth === 0 && containerHeight === 0) {\n      return;\n    }\n\n    const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n    const isHorizontal = containerWidth >= containerHeight;\n    const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n    const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n\n    if (\n      !isRangeTextPositionValid(\n        containerWidth,\n        containerHeight,\n        rangeTextPosition\n      )\n    ) {\n      throw new Error(\n        'Invalid rangeTextPosition value for the current colobar orientation'\n      );\n    }\n\n    let ticksBarTop;\n    let ticksBarLeft;\n\n    ticksBar.size = { width, height };\n\n    if (isHorizontal) {\n      ticksBarLeft = 0;\n      ticksBarTop =\n        rangeTextPosition === ColorbarRangeTextPosition.Top\n          ? -height\n          : containerHeight;\n    } else {\n      ticksBarTop = 0;\n      ticksBarLeft =\n        rangeTextPosition === ColorbarRangeTextPosition.Left\n          ? -width\n          : containerWidth;\n    }\n\n    ticksBar.top = ticksBarTop;\n    ticksBar.left = ticksBarLeft;\n  }\n\n  private _mouseOverCallback = (evt) => {\n    this._isMouseOver = true;\n    this.showTicks();\n    evt.stopPropagation();\n  };\n\n  private _mouseOutCallback = (evt) => {\n    this._isMouseOver = false;\n    this.hideTicks();\n    evt.stopPropagation();\n  };\n\n  private _mouseDownCallback = (evt: MouseEvent) => {\n    this._isInteracting = true;\n    this.showTicks();\n    this._addVOIEventListeners(evt);\n    evt.stopPropagation();\n  };\n\n  private _mouseDragCallback = (evt, initialState) => {\n    const multipliers = this.getVOIMultipliers();\n    const currentPoints = this._getPointsFromMouseEvent(evt);\n    const { points: startPoints, voiRange: startVOIRange } = initialState;\n    const canvasDelta = vec2.sub(\n      vec2.create(),\n      currentPoints.local,\n      startPoints.local\n    );\n\n    const wwDelta = canvasDelta[0] * multipliers[0];\n    const wcDelta = canvasDelta[1] * multipliers[1];\n\n    if (!wwDelta && !wcDelta) {\n      return;\n    }\n\n    const { lower: voiLower, upper: voiUpper } = startVOIRange;\n    let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(\n      voiLower,\n      voiUpper\n    );\n\n    windowWidth = Math.max(windowWidth + wwDelta, 1);\n    windowCenter += wcDelta;\n\n    const newVoiRange = csUtils.windowLevel.toLowHighRange(\n      windowWidth,\n      windowCenter\n    );\n\n    this.voiRange = newVoiRange;\n    evt.stopPropagation();\n    evt.preventDefault();\n  };\n\n  private _mouseUpCallback = (evt) => {\n    this._isInteracting = false;\n    this.hideTicks();\n    this._removeVOIEventListeners();\n    evt.stopPropagation();\n  };\n\n  private _addRootElementEventListeners() {\n    const { _eventListenersManager: manager } = this;\n    const { rootElement: element } = this;\n\n    manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n    manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n    manager.addEventListener(\n      element,\n      'mousedown',\n      this._mouseDownCallback as EventListener\n    );\n  }\n\n  private _addVOIEventListeners(evt: MouseEvent) {\n    const { _eventListenersManager: manager } = this;\n    const points = this._getPointsFromMouseEvent(evt);\n    const voiRange = { ...this._canvas.voiRange };\n    const initialDragState = { points, voiRange };\n\n    this._removeVOIEventListeners();\n\n    manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n    manager.addEventListener(document, 'voi.mousemove', (evt) =>\n      this._mouseDragCallback(evt, initialDragState)\n    );\n  }\n\n  private _removeVOIEventListeners() {\n    const { _eventListenersManager: manager } = this;\n\n    manager.removeEventListener(document, 'voi.mouseup');\n    manager.removeEventListener(document, 'voi.mousemove');\n  }\n}\n\nexport { Colorbar as default, Colorbar };\n","import { ColorbarRangeTextPosition } from '../enums';\n\nfunction isRangeTextPositionValid(\n  colorbarWidth: number,\n  colorbarHeight: number,\n  rangeTextPosition: ColorbarRangeTextPosition\n) {\n  const isHorizontal = colorbarWidth >= colorbarHeight;\n  const validRangeTextPositions = isHorizontal\n    ? [ColorbarRangeTextPosition.Top, ColorbarRangeTextPosition.Bottom]\n    : [ColorbarRangeTextPosition.Left, ColorbarRangeTextPosition.Right];\n\n  return validRangeTextPositions.includes(rangeTextPosition);\n}\n\nexport { isRangeTextPositionValid as default, isRangeTextPositionValid };\n","import {\n  eventTarget,\n  VolumeViewport,\n  StackViewport,\n  Types,\n  Enums,\n  utilities,\n  getEnabledElement,\n} from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport type { ViewportColorbarProps, ColorbarVOIRange } from './types';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\n\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\n/**\n * A colorbar associated with a viewport that updates automatically when the\n * viewport VOI changes or when the stack/volume are updated..\n */\nclass ViewportColorbar extends Colorbar {\n  private _element: HTMLDivElement;\n  private _volumeId: string;\n\n  private _hideTicksTime: number;\n  private _hideTicksTimeoutId: number;\n\n  constructor(props: ViewportColorbarProps) {\n    const { element, volumeId } = props;\n    const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n    const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n\n    super({ ...props, imageRange, voiRange });\n\n    this._element = element;\n    this._volumeId = volumeId;\n\n    this._addCornerstoneEventListener();\n  }\n\n  public get element() {\n    return this._element;\n  }\n\n  public get enabledElement() {\n    return getEnabledElement(this._element);\n  }\n\n  protected getVOIMultipliers(): [number, number] {\n    const { viewport } = this.enabledElement;\n    return getVOIMultipliers(viewport, this._volumeId);\n  }\n\n  protected onVoiChange(voiRange: ColorbarVOIRange) {\n    super.onVoiChange(voiRange);\n\n    const { viewport } = this.enabledElement;\n\n    if (viewport instanceof StackViewport) {\n      viewport.setProperties({\n        voiRange: voiRange,\n      });\n      viewport.render();\n    } else if (viewport instanceof VolumeViewport) {\n      const { _volumeId: volumeId } = this;\n      const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        viewport.renderingEngineId\n      );\n\n      viewport.setProperties({ voiRange }, volumeId);\n      viewportsContainingVolumeUID.forEach((vp) => vp.render());\n    }\n  }\n\n  private static _getImageRange(element, volumeId?) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const actor = volumeId\n      ? viewport.getActor(volumeId)\n      : viewport.getDefaultActor();\n\n    if (!actor) {\n      return defaultImageRange;\n    }\n\n    const imageData = actor.actor.getMapper().getInputData();\n    const imageRange = imageData.getPointData().getScalars().getRange();\n\n    return imageRange[0] === 0 && imageRange[1] === 0\n      ? defaultImageRange\n      : { lower: imageRange[0], upper: imageRange[1] };\n  }\n\n  private static _getVOIRange(element, volumeId) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const volumeActor = volumeId\n      ? viewport.getActor(volumeId)\n      : viewport.getDefaultActor();\n\n    if (!volumeActor || !utilities.isImageActor(volumeActor)) {\n      return defaultImageRange;\n    }\n\n    const voiRange = (volumeActor.actor as Types.ImageActor)\n      .getProperty()\n      .getRGBTransferFunction(0)\n      .getRange();\n\n    return voiRange[0] === 0 && voiRange[1] === 0\n      ? defaultImageRange\n      : { lower: voiRange[0], upper: voiRange[1] };\n  }\n\n  private autoHideTicks = () => {\n    // Avoiding calling setTimeout multiple times when manipulating the VOI\n    // via WindowLevel tool for better performance\n    if (this._hideTicksTimeoutId) {\n      return;\n    }\n\n    const timeLeft = this._hideTicksTime - Date.now();\n\n    if (timeLeft <= 0) {\n      this.hideTicks();\n    } else {\n      this._hideTicksTimeoutId = window.setTimeout(() => {\n        // Recursive call until there is no more time left\n        this._hideTicksTimeoutId = 0;\n        this.autoHideTicks();\n      }, timeLeft);\n    }\n  };\n\n  private showAndAutoHideTicks(interval = 1000) {\n    this._hideTicksTime = Date.now() + interval;\n    this.showTicks();\n    this.autoHideTicks();\n  }\n\n  private _stackNewImageCallback = () => {\n    this.imageRange = ViewportColorbar._getImageRange(this._element);\n  };\n\n  private _imageVolumeModifiedCallback = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const { volumeId } = evt.detail.imageVolume;\n\n    if (volumeId !== this._volumeId) {\n      return;\n    }\n\n    const { _element: element } = this;\n    this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n  };\n\n  private _viewportVOIModifiedCallback = (\n    evt: Types.EventTypes.VoiModifiedEvent\n  ) => {\n    const { viewportId, volumeId, range: voiRange } = evt.detail;\n    const { viewport } = this.enabledElement;\n\n    if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n      return;\n    }\n\n    this.voiRange = voiRange;\n    this.showAndAutoHideTicks();\n  };\n\n  private _addCornerstoneEventListener() {\n    const { _element: element } = this;\n\n    eventTarget.addEventListener(\n      Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedCallback\n    );\n\n    element.addEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._stackNewImageCallback\n    );\n\n    element.addEventListener(\n      Events.VOI_MODIFIED,\n      this._viewportVOIModifiedCallback as EventListener\n    );\n  }\n}\n\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { Types, utilities as csUtils } from '@cornerstonejs/core';\nimport { isViewportPreScaled } from './viewport';\n\nconst DEFAULT_MULTIPLIER = 4;\n\nfunction getVOIMultipliers(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  volumeId?: string,\n  options?: {\n    fixedPTWindowWidth?: boolean;\n  }\n): [number, number] {\n  const modality = csUtils.getViewportModality(viewport, volumeId);\n\n  if (modality === 'PT') {\n    const { clientWidth, clientHeight } = viewport.element;\n    const ptMultiplier = 5 / Math.max(clientWidth, clientHeight);\n    const isPreScaled = isViewportPreScaled(viewport, volumeId);\n    const { fixedPTWindowWidth = true } = options ?? {};\n\n    // Set the \"X\" multiplier equal to zero in order to do not allow\n    // any change to the window width (0 * cursorDeltaX = 0)\n    const xMultiplier = fixedPTWindowWidth ? 0 : ptMultiplier;\n\n    return isPreScaled\n      ? [xMultiplier, ptMultiplier]\n      : [xMultiplier, DEFAULT_MULTIPLIER];\n  }\n\n  return [DEFAULT_MULTIPLIER, DEFAULT_MULTIPLIER];\n}\n\nexport { getVOIMultipliers as default, getVOIMultipliers };\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\n\n/**\n * When an annotation is deselected, trigger an annotation render for all viewports.\n * The reason for this is that, drawing an annotation in a different viewport\n * should deselect all other annotations in other viewports. In order to achieve\n * this, we need to trigger an annotation render for all viewports.\n * Todo: Although this is inefficient, but since annotations are only rendered if necessary,\n * it's probably not going to have a noticeable impact on performance.\n * @param evt - The event object.\n */\nfunction annotationSelectionListener(evt): void {\n  const deselectedAnnotation = evt.detail.removed;\n\n  if (!deselectedAnnotation.length) {\n    return;\n  }\n\n  const renderingEngines = getRenderingEngines();\n\n  renderingEngines.forEach((renderingEngine) => {\n    const viewports = renderingEngine.getViewports();\n    const viewportIds = viewports.map((vp) => vp.id);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  });\n}\n\nexport default annotationSelectionListener;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\n/**\n * This is a callback function that is called when an annotation is modified.\n * Since we are throttling the cachedStats calculation for annotation tools,\n * we need to trigger a final render for the annotation. so that the annotation\n * textBox is updated.\n * Todo: This will trigger all the annotation tools to re-render, although DOM\n * will update those that have changed, but more efficient would be to only\n * update the changed annotation.\n * Todo: A better way is to extract the textBox render logic from the renderAnnotation\n * of all tools and just trigger a render for that (instead of the entire annotation., even if\n * no svg update happens since the attributes for handles are the same)\n */\nfunction annotationModifiedListener(evt): void {\n  const { viewportId, renderingEngineId } = evt.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n}\n\nexport default annotationModifiedListener;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nconst onImageRendered = function (evt: Types.EventTypes.ImageRenderedEvent) {\n  // TODO: should we do this on camera modified instead of image rendered?\n  // e.g. no need to re-render annotations if only the VOI has changed\n  triggerAnnotationRender(evt.detail.element);\n};\n\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { state, ToolGroupManager } from '../../store';\nimport ToolModes from '../../enums/ToolModes';\n\nconst { Active } = ToolModes;\n\n/**\n * @function customCallbackHandler This is used as a generic event handler for tool events\n * on viewports. It:\n *\n * - Finds an \"active\" tool with:\n *    - A matching `handlerType`\n *    - A matching `customFunction` on its tool instance\n *\n * Then calls that custom function with raised event.\n *\n * @param handlerType - 'Mouse' | 'Touch' | 'MouseWheel'\n * @param customFunction - Function name that's expected to live on implementing\n *   (and event handling) active tool ex. 'doubleClickCallback'\n * @param evt\n */\nexport default function customCallbackHandler(\n  handlerType: string,\n  customFunction: string,\n  evt\n) {\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return false;\n  }\n\n  // TODO: Filter tools by interaction type?\n  /**\n   * Iterate tool group tools until we find a tool that is:\n   * - active\n   * - has the custom callback function\n   *\n   */\n  let activeTool;\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n    // TODO: Should be getter\n    const toolInstance = toolGroup.getToolInstance(toolName);\n\n    if (\n      // TODO: Should be enum?\n      tool.mode === Active &&\n      // TODO: Should be implements interface?\n      // Weird that we need concrete instance. Other options to filter / get callback?\n      typeof toolInstance[customFunction] === 'function'\n    ) {\n      activeTool = toolGroup.getToolInstance(toolName);\n      break;\n    }\n  }\n\n  if (!activeTool) {\n    return;\n  }\n\n  activeTool[customFunction](evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse click events. Uses `customCallbackHandler` to fire\n * the `mouseClickCallback` function on active tools.\n */\nconst mouseClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'mouseClickCallback'\n);\n\nexport default mouseClick;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * @function mouseDoubleClick - Event handler for mouse double click events. Uses `customCallbackHandler` to fire\n * the `doubleClickCallback` function on active tools.\n */\nconst mouseDoubleClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'doubleClickCallback'\n);\n\nexport default mouseDoubleClick;\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationsPair,\n  ToolsWithMoveableHandles,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools, returning only tools with moveable handles at the mouse location that are not locked\n *\n * @param element - The element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction (e.g. 'mouse' or 'touch')\n * @returns The filtered array.\n */\nexport default function filterToolsWithMoveableHandles(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolsWithMoveableHandles[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n  const toolsWithMoveableHandles = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const handle = tool.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        proximity\n      );\n\n      if (handle) {\n        toolsWithMoveableHandles.push({\n          tool,\n          annotation,\n          handle,\n        });\n        break;\n      }\n    }\n  });\n\n  return toolsWithMoveableHandles;\n}\n","import { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { ToolAnnotationsPair } from '../types/InternalToolTypes';\nimport type AnnotationTool from '../tools/base/AnnotationTool';\nimport BaseTool from '../tools/base/BaseTool';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\n/**\n * Filters an array of tools, returning only tools which have annotation.\n *\n * @param element - The cornerstone3D enabled element.\n * @param tools - The array of tools to check.\n *\n * @returns The array of tools with their found annotations.\n */\nexport default function filterToolsWithAnnotationsForElement(\n  element: HTMLDivElement,\n  tools: AnnotationTool[]\n): ToolAnnotationsPair[] {\n  const result = [];\n  for (let i = 0; i < tools.length; i++) {\n    const tool = tools[i];\n\n    if (!tool) {\n      console.warn('undefined tool in filterToolsWithAnnotationsForElement');\n      continue;\n    }\n\n    let annotations = getAnnotations(\n      (tool.constructor as typeof BaseTool).toolName,\n      element\n    );\n\n    if (!annotations?.length) {\n      continue;\n    }\n\n    if (typeof tool.filterInteractableAnnotationsForElement === 'function') {\n      // If the tool has a annotations filter (e.g. with in-plane-annotations-only filtering), use it.\n      annotations = tool.filterInteractableAnnotationsForElement(\n        element,\n        annotations\n      );\n    }\n\n    if (annotations.length > 0) {\n      result.push({ tool, annotations });\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationPair,\n  ToolAnnotationsPair,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools with annotations, returning the first annotation\n * for each tool that is moveable and at the mouse location. It results in\n * one annotation per tool.\n *\n *\n * @param element - The HTML element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction that is taking place.\n * @returns The filtered array containing ToolAndAnnotation\n */\nexport default function filterMoveableAnnotationTools(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolAnnotationPair[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n\n  // TODO - This could get pretty expensive pretty quickly. We don't want to fetch the camera\n  // And do world to canvas on each coord.\n\n  // We want to produce a matrix from canvas to world for the viewport and just do a matrix operation on each handle.\n  // This could still be expensive for ROIs, but we probably shouldn't have \"handles\" for them anyway.\n\n  const moveableAnnotationTools = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const near = tool.isPointNearTool(\n        element,\n        annotation,\n        canvasCoords,\n        proximity,\n        interactionType\n      );\n\n      if (near) {\n        moveableAnnotationTools.push({\n          tool,\n          annotation,\n        });\n        break;\n      }\n    }\n  });\n\n  return moveableAnnotationTools;\n}\n","import { KeyboardBindings as kb } from '../../enums';\n\n/**\n * Gets the mouse modifier key from a mouse event.\n * Supports Shift, Ctrl, Alt, in singly and in combinations of 2\n * Supports Meta singly.\n */\nconst getMouseModifierKey = (evt) => {\n  // The logic is a hard coded key mapping\n  if (evt.shiftKey) {\n    if (evt.ctrlKey) {\n      return kb.ShiftCtrl;\n    }\n    if (evt.altKey) {\n      return kb.ShiftAlt;\n    }\n    if (evt.metaKey) {\n      return kb.ShiftMeta;\n    }\n    return kb.Shift;\n  }\n  if (evt.ctrlKey) {\n    if (evt.altKey) {\n      return kb.CtrlAlt;\n    }\n    if (evt.metaKey) {\n      return kb.CtrlMeta;\n    }\n    return kb.Ctrl;\n  }\n  if (evt.altKey) {\n    return (evt.metaKey && kb.AltMeta) || kb.Alt;\n  }\n  if (evt.metaKey) {\n    return kb.Meta;\n  }\n  return undefined;\n};\n\nexport default getMouseModifierKey;\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our MouseEvent's `buttons`. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The event dispatcher mouse event.\n *\n * @returns tool\n */\nexport default function getActiveToolForMouseEvent(\n  evt: EventTypes.NormalizedMouseEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForMouseEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const mouseEvent = evt.detail.event;\n\n  // If any keyboard modifier key is also pressed - get the mouse version\n  // first since it handles combinations, while the key event handles non-modifier\n  // keys.\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some((binding) => {\n        return (\n          binding.mouseButton ===\n            (mouseEvent ? mouseEvent.buttons : defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n        );\n      });\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized mouse event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized mouseDown event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  modesFilter: ModesFilter,\n  evtButton?: any\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button - we match those with\n    // any modifier keys too since they can be passively interacted with\n    const correctBinding =\n      evtButton != null && // not null or undefined\n      tool.bindings.length &&\n      tool.bindings.some((binding) => binding.mouseButton === evtButton);\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      // Should not filter by event's button\n      // or should, and the tool binding includes the event's button\n      (!evtButton || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\n// Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getToolsWithActionsForMouseEvent from '../shared/getToolsWithActionsForMouseEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * Look for active or passive annotations with an action that could handle the\n * event based on the bindings and invoke the first one found.\n *\n * @param evt - The normalized mouseDown event.\n * @returns True if an action has executed or false otherwise\n */\nexport default function mouseDownAnnotationAction(\n  evt: EventTypes.MouseDownEventType\n): boolean {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { canvas: canvasCoords } = eventDetail.currentPoints;\n\n  if (!enabledElement) {\n    return false;\n  }\n\n  // Find all tools that might respond to this mouse down\n  const toolsWithActions = getToolsWithActionsForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const tools = Array.from(toolsWithActions.keys());\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    tools\n  );\n\n  // Only moveable annotations (unlocked, visible and close to the canvas coordinates) may trigger actions\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = moveableAnnotationTools[0];\n    const action = toolsWithActions.get(tool);\n    const method =\n      typeof action.method === 'string' ? tool[action.method] : action.method;\n\n    method.call(tool, evt, annotation);\n\n    return true;\n  }\n\n  return false;\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { ToolAction, EventTypes } from '../../types';\n\nimport { keyEventListener } from '../../eventListeners';\nimport getMouseModifier from './getMouseModifier';\n\n/**\n * Given the mouse event and a list of tool modes, find all tool instances\n * with actions that were added to the tool group associated with the viewport\n * that triggered the event.\n *\n * @param evt - mouseDown event triggered by a cornerstone viewport\n * @param toolModes - List of tool modes used to filter the tools registered\n *                    in the viewport's tool group\n */\nexport default function getToolsWithActionsForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  toolModes: ToolModes[]\n): Map<any, ToolAction> {\n  const toolsWithActions = new Map();\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return toolsWithActions;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n  const mouseEvent = evt.detail.event;\n  const mouseButton = mouseEvent?.buttons ?? defaultMousePrimary;\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.getToolInstance(toolName);\n    const actionsConfig = tool.configuration?.actions ?? {};\n    const actions = Object.values(actionsConfig);\n\n    if (!actions?.length || !toolModes.includes(tool.mode)) {\n      continue;\n    }\n\n    const action = actions.find(\n      (action: any) =>\n        action.bindings.length &&\n        action.bindings.some(\n          (binding) =>\n            binding.mouseButton === mouseButton &&\n            binding.modifierKey === modifierKey\n        )\n    );\n\n    if (action) {\n      toolsWithActions.set(tool, action);\n    }\n  }\n\n  return toolsWithActions;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport mouseDownAnnotationAction from './mouseDownAnnotationAction';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * When the mouse is depressed we check which entities can process these events in the following manner:\n *\n * - First we get the `activeTool` for the mouse button pressed.\n * - If the `activeTool` has a `preMouseDownCallback`, this is called. If the callback returns `true`,\n *   the event does not propagate further.\n * - Next we get all tools which are active or passive (`activeAndPassiveTools`), as annotation. for these tools could\n *   possibly catch and handle these events. We then filter the `activeAndPassiveTools` using `filterToolsWithAnnotationsForElement`, which filters tools with annotations\n *   for this frame of reference. Optionally a tool can employ a further filtering (via a\n *   `filterInteractableAnnotationsForElement` callback) for tools interactable within the current camera view\n *   (e.g. tools that only render when viewed from a certain direction).\n * - Next we check if any handles are interactable for each tool (`filterToolsWithMoveableHandles`). If interactable\n *   handles are found, the first tool/handle found consumes the event and the event does not propagate further.\n * - Next we check any tools are interactable (e.g. moving an entire length annotation rather than one of its handles:\n *   `filterMoveableAnnotationTools`). If interactable tools are found, the first tool found consumes the event and the\n *   event does not propagate further.\n * - If the `activeTool` has `postMouseDownCallback`, this is called.  If the callback returns `true`,\n *   the event does not propagate further.\n * - Finally, look for annotations actions that could handle the event such as showing a dropdown to allow the user\n *   change the magnifying glass zoom factor.\n *\n * If the event is not consumed the event will bubble to the `mouseDownActivate` handler.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDown(evt: EventTypes.MouseDownEventType) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  // Check for preMouseDownCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.preMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  // Find all tools that might respond to this mouse down\n  const isPrimaryClick = evt.detail.event.buttons === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForMouseEvent(\n    evt,\n    [Active],\n    evt.detail.event.buttons\n  );\n  const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick\n    ? getToolsWithModesForMouseEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryMouseButton || []),\n  ];\n\n  // Actions need to run before tool/handle selected callbacks otherwise actions\n  // like the one from SplineTool to remove/add control points would not work.\n  const actionExecuted = mouseDownAnnotationAction(evt);\n\n  if (actionExecuted) {\n    return;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this mouse down\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // Preserve existing selections when shift key is pressed\n  const isMultiSelect = !!evt.detail.event.shiftKey;\n\n  // If there are annotation tools whose handle is near the mouse, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Mouse');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the mouse, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Mouse', canvasCoords);\n\n    return;\n  }\n\n  // Run the postMouseDownCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.postMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that mouseDownActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\nimport { EventTypes } from '../../types';\n\n/**\n * If the `mouseDown` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * mouse button pressed.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDownActivate(\n  evt: EventTypes.MouseDownActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'mouse');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { state } from '../../store';\nimport { MouseDragEventType } from '../../types/EventTypes';\n\n/**\n * mouseDrag - Event handler for mouse drag events. Fires the `mouseDragCallback`\n * function on active tools.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDrag(evt: MouseDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  const noFoundToolOrDoesNotHaveMouseDragCallback =\n    !activeTool || typeof activeTool.mouseDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveMouseDragCallback) {\n    return;\n  }\n\n  activeTool.mouseDragCallback(evt);\n}\n","// // State\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\n\n// // Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport { MouseMoveEventType } from '../../types/EventTypes';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * mouseMove - On mouse move when not dragging, fire tools `mouseMoveCallback`s.\n * This is mostly used to update the [un]hover state\n * of a tool.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseMove(evt: MouseMoveEventType) {\n  // Tool interactions when mouse moved are handled inside each tool.\n  // This function is mostly used to update the [un]hover state\n  if (state.isInteractingWithTool || state.isMultiPartToolActive) {\n    return;\n  }\n\n  const activeAndPassiveTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Annotation tool specific\n  const toolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    activeAndPassiveTools\n  );\n\n  const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {\n    const doesNotHaveAnnotations = !toolsWithAnnotations.some(\n      (toolAndAnnotation) =>\n        toolAndAnnotation.tool.getToolName() === tool.getToolName()\n    );\n\n    return doesNotHaveAnnotations;\n  });\n\n  let annotationsNeedToBeRedrawn = false;\n\n  for (const { tool, annotations } of toolsWithAnnotations) {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      annotationsNeedToBeRedrawn =\n        tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;\n    }\n  }\n\n  // Run mouse move handlers for non-annotation tools\n  toolsWithoutAnnotations.forEach((tool) => {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      tool.mouseMoveCallback(evt);\n    }\n  });\n\n  // Annotation activation status changed, redraw the annotations\n  if (annotationsNeedToBeRedrawn === true) {\n    triggerAnnotationRender(element);\n  }\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse up events. Uses `customCallbackHandler` to fire\n * the `mouseUpCallback` function on active tools.\n */\nconst mouseUp = customCallbackHandler.bind(null, 'Mouse', 'mouseUpCallback');\n\nexport default mouseUp;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * Event handler for mouse wheel events. Uses `customCallbackHandler` to fire\n * the `mouseWheelCallback` function on active tools.\n */\nconst mouseWheel = customCallbackHandler.bind(\n  null,\n  'MouseWheel',\n  'mouseWheelCallback'\n);\n\nexport default mouseWheel;\n","import Events from '../enums/Events';\n\nimport {\n  mouseClick,\n  mouseDown,\n  mouseDownActivate,\n  mouseDoubleClick,\n  mouseDrag,\n  mouseMove,\n  mouseUp,\n  mouseWheel,\n} from './mouseEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.addEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.addEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.addEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.addEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.addEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.addEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.addEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.removeEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.removeEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.removeEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.removeEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.removeEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.removeEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\nconst mouseToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default mouseToolEventDispatcher;\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport { getMouseButton } from '../../eventListeners/mouse/mouseDownListener';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our Keyboard pressed keys. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The normalized keyboard event.\n *\n * @returns tool\n */\nexport default function getActiveToolForKeyboardEvent(\n  evt: EventTypes.KeyDownEventType\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  // Get the current mouse button clicked\n  const mouseButton = getMouseButton();\n\n  // If any keyboard modifier key is also pressed\n  // TODO - get the real modifier key\n  const modifierKey = keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    if (toolOptions.mode !== Active) {\n      continue;\n    }\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some(\n        (binding) =>\n          binding.mouseButton === (mouseButton ?? defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport getToolsWithActionsForKeyboardEvent from '../shared/getToolsWithActionsForKeyboardEvents';\nimport { KeyDownEventType } from '../../types/EventTypes';\nimport ToolModes from '../../enums/ToolModes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyDown(evt: KeyDownEventType): void {\n  // get the active tool given the key and mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (activeTool) {\n    const { renderingEngineId, viewportId } = evt.detail;\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewportId,\n      renderingEngineId\n    );\n\n    const toolName = activeTool.getToolName();\n    if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n      toolGroup.setViewportsCursorByToolName(toolName);\n    }\n  }\n\n  const activeToolsWithEventBinding = getToolsWithActionsForKeyboardEvent(evt, [\n    ToolModes.Active,\n  ]);\n\n  if (activeToolsWithEventBinding?.size) {\n    const { element } = evt.detail;\n    for (const [key, value] of [...activeToolsWithEventBinding.entries()]) {\n      key[value.method](element);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\n/**\n * Given the normalized mouse event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized mouseDown event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForKeyboardEvent(\n  evt: EventTypes.KeyDownEventType,\n  toolModes: ToolModes[]\n) {\n  const toolsWithActions = new Map();\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return toolsWithActions;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const key = evt.detail.key;\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.getToolInstance(toolName);\n    const actionsConfig = tool.configuration?.actions;\n    if (!actionsConfig) {\n      continue;\n    }\n    const actions = Object.values(actionsConfig);\n\n    if (!actions?.length || !toolModes.includes(tool.mode)) {\n      continue;\n    }\n\n    const action = actions.find((action: any) =>\n      action.bindings.some((binding) => binding.key === key)\n    );\n\n    if (action) {\n      toolsWithActions.set(tool, action);\n    }\n  }\n\n  return toolsWithActions;\n}\n","import { resetModifierKey } from '../../eventListeners/keyboard/keyDownListener';\nimport { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyUp(evt: KeyDownEventType): void {\n  // get the active tool for the primary mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  // Reset the modifier key\n  resetModifierKey();\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\n\n/**\n * Enable Key down and key up listeners\n *\n * @param element - The HTML element to attach the event listeners to.\n */\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.addEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\n/**\n * Disable Key down and key up listeners\n * @param element - The HTML element to attach the event listeners to.\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.removeEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\nconst keyboardToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default keyboardToolEventDispatcher;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When the camera is modified, check what tools need to react to this.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onCameraModified` method, we call it.\n *\n * @param evt - The normalized camera modified event.\n */\nconst onCameraModified = function (evt: Types.EventTypes.CameraModifiedEvent) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onCameraModified) {\n      tool.onCameraModified(evt);\n    }\n  });\n};\n\nconst enable = function (element) {\n  element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nconst disable = function (element) {\n  element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When image spacing is calibrated modify the annotations for all of its tools\n * to consider the new calibration info.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onImageSpacingCalibrated` method, we call it.\n *\n * @param evt - The normalized image calibration event.\n */\nconst onImageSpacingCalibrated = function (\n  evt: Types.EventTypes.ImageSpacingCalibratedEvent\n) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onImageSpacingCalibrated) {\n      tool.onImageSpacingCalibrated(evt);\n    }\n  });\n};\n\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\nimport { keyEventListener } from '../../eventListeners';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our TouchEvent's `buttons`. It's possible there will be no match\n * (no active tool for that touch button combination).\n *\n * @param evt - The event dispatcher touch event.\n *\n * @returns tool\n */\nexport default function getActiveToolForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForTouchEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const touchEvent = evt.detail.event;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  const numTouchPoints = Object.keys(touchEvent.touches).length;\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey =\n    getMouseModifier(touchEvent) || keyEventListener.getModifierKey();\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      toolOptions.bindings.length &&\n      /**\n       * TODO: setActiveTool treats MouseBindings.Primary in a special way\n       * which is analgous to numTouchPoints === 1 as the primary interaction\n       * for touch based applications. The ToolGroup set active and get active\n       * logic should be updated to account for numTouchPoints === 1\n       */\n      toolOptions.bindings.some(\n        (binding) =>\n          (binding.numTouchPoints === numTouchPoints ||\n            (numTouchPoints === 1 &&\n              binding.mouseButton === defaultMousePrimary)) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized touch event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized touchStart event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType,\n  modesFilter: ModesFilter,\n  numTouchPoints?: number\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      numTouchPoints != null &&\n      tool.bindings.length &&\n      tool.bindings.some(\n        (binding) => binding.numTouchPoints === numTouchPoints\n      );\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      (!numTouchPoints || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport getToolsWithModesForTouchEvent from '../shared/getToolsWithModesForTouchEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * touchStart - Event handler for touchStart events. Uses `customCallbackHandler` to fire\n * the `touchStartCallback` function on active tools.\n */\nexport default function touchStart(evt: EventTypes.TouchStartEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  // Check for preTouchStartCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.preTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForTouchEvent(\n    evt,\n    [Active],\n    Object.keys(evt.detail.event.touches).length\n  );\n  const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick\n    ? getToolsWithModesForTouchEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryTouchButton || []),\n    activeTool,\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this touch start\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  const isMultiSelect = false;\n\n  // If there are annotation tools whose handle is near the touch, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Touch');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the touch, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Touch');\n\n    return;\n  }\n\n  // Run the postTouchStartCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.postTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that touchStartActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport { EventTypes } from '../../types';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\n\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\n\n/**\n * If the `touchStart` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * touch button pressed.\n *\n * @param evt - The normalized touchStart event.\n */\nexport default function touchStartActivate(\n  evt: EventTypes.TouchStartActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'touch');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport { state } from '../../store';\nimport { TouchDragEventType } from '../../types/EventTypes';\n\n/**\n * touchDrag - Event handler for touchDrag events. Uses `customCallbackHandler` to fire\n * the `touchDragCallback` function on active tools.\n */\nexport default function touchDrag(evt: TouchDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  const noFoundToolOrDoesNotHaveTouchDragCallback =\n    !activeTool || typeof activeTool.touchDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveTouchDragCallback) {\n    return;\n  }\n\n  activeTool.touchDragCallback(evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchEnd - Event handler for touchEnd events. Uses `customCallbackHandler` to fire\n * the `touchEndCallback` function on active tools.\n */\nconst touchEnd = customCallbackHandler.bind(null, 'Touch', 'touchEndCallback');\n\nexport default touchEnd;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchTap - Event handler for touch tap events. Uses `customCallbackHandler` to fire\n * the `touchTapCallback` function on active tools.\n */\nconst touchTap = customCallbackHandler.bind(null, 'Touch', 'touchTapCallback');\n\nexport default touchTap;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchPress - Event handler for touch press events. Uses `customCallbackHandler` to fire\n * the `touchPressCallback` function on active tools.\n */\nconst touchPress = customCallbackHandler.bind(\n  null,\n  'Touch',\n  'touchPressCallback'\n);\n\nexport default touchPress;\n","import Events from '../enums/Events';\n\nimport {\n  touchStart,\n  touchStartActivate,\n  touchDrag,\n  touchEnd,\n  touchTap,\n  touchPress,\n} from './touchEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.addEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.addEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.addEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.addEventListener(Events.TOUCH_TAP, touchTap as EventListener);\n  element.addEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.removeEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.removeEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.removeEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.removeEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\nconst touchToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default touchToolEventDispatcher;\n","import { Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n  imageChangeEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  touchToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n} from '../eventDispatchers';\nimport { state } from './state';\n\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\n/**\n * When an element is \"enabled\", add event listeners and dispatchers to it\n * so we can use interactions to affect tool behaviors\n *\n * @param evt - The ELEMENT_ENABLED event\n */\nexport default function addEnabledElement(\n  evt: Types.EventTypes.ElementEnabledEvent\n): void {\n  const { element, viewportId } = evt.detail;\n  const svgLayer = _createSvgAnnotationLayer(viewportId);\n\n  // Reset/Create svgNodeCache for element\n  _setSvgNodeCache(element);\n  _appendChild(svgLayer, element);\n\n  // Add this element to the annotation rendering engine\n  annotationRenderingEngine.addViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.enable(element);\n  wheelEventListener.enable(element);\n  touchEventListeners.enable(element);\n  keyEventListener.enable(element);\n  imageChangeEventListener.enable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.enable(element);\n  cameraModifiedEventDispatcher.enable(element);\n  imageSpacingCalibratedEventDispatcher.enable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.enable(element);\n  keyboardToolEventDispatcher.enable(element);\n  touchToolEventDispatcher.enable(element);\n\n  // labelmap\n  // State\n  state.enabledElements.push(element);\n}\n\n/**\n *\n */\nfunction _createSvgAnnotationLayer(viewportId: string): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgLayer = document.createElementNS(svgns, 'svg');\n\n  const svgLayerId = `svg-layer-${viewportId}`;\n  svgLayer.classList.add('svg-layer');\n  svgLayer.setAttribute('id', svgLayerId);\n  svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svgLayer.style.width = '100%';\n  svgLayer.style.height = '100%';\n  svgLayer.style.pointerEvents = 'none';\n  svgLayer.style.position = 'absolute';\n  // TODO: we should test this on high-res monitors\n  //svgLayer.style.textRendering = 'optimizeSpeed'\n\n  // Single dropshadow config for now\n  const defs = document.createElementNS(svgns, 'defs');\n  const filter = document.createElementNS(svgns, 'filter');\n  const feOffset = document.createElementNS(svgns, 'feOffset');\n  const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n  const feBlend = document.createElementNS(svgns, 'feBlend');\n\n  //\n  filter.setAttribute('id', `shadow-${svgLayerId}`);\n  filter.setAttribute('filterUnits', 'userSpaceOnUse');\n\n  //\n  feOffset.setAttribute('result', 'offOut');\n  feOffset.setAttribute('in', 'SourceGraphic');\n  feOffset.setAttribute('dx', '0.5');\n  feOffset.setAttribute('dy', '0.5');\n\n  //\n  feColorMatrix.setAttribute('result', 'matrixOut');\n  feColorMatrix.setAttribute('in', 'offOut');\n  feColorMatrix.setAttribute('in2', 'matrix');\n  feColorMatrix.setAttribute(\n    'values',\n    '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0'\n  );\n\n  //\n  feBlend.setAttribute('in', 'SourceGraphic');\n  feBlend.setAttribute('in2', 'matrixOut');\n  feBlend.setAttribute('mode', 'normal');\n\n  filter.appendChild(feOffset);\n  filter.appendChild(feColorMatrix);\n  filter.appendChild(feBlend);\n  defs.appendChild(filter);\n  svgLayer.appendChild(defs);\n\n  return svgLayer;\n}\n\nfunction _setSvgNodeCache(element) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  // Create or reset\n  // TODO: If... Reset, we should blow out any nodes in DOM\n  state.svgNodeCache[elementHash] = {};\n}\n\n/**\n *\n * @param newNode\n * @param referenceNode\n */\nfunction _appendChild(\n  newNode: SVGElement,\n  referenceNode: HTMLDivElement\n): void {\n  referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * It returns all synchronizers that are not disabled and have a source viewport\n * with the given rendering engine Id and viewport Id\n * @param renderingEngineId - The Id of the rendering engine\n * @param viewportId - The Id of the viewport\n * @returns An array of synchronizers\n */\nfunction getSynchronizersForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): Array<Synchronizer> {\n  const synchronizersFilteredByIds = [];\n\n  if (!renderingEngineId && !viewportId) {\n    throw new Error(\n      'At least one of renderingEngineId or viewportId should be given'\n    );\n  }\n\n  for (let i = 0; i < state.synchronizers.length; i++) {\n    const synchronizer = state.synchronizers[i];\n    const notDisabled = !synchronizer.isDisabled();\n    const hasSourceViewport = synchronizer.hasSourceViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    const hasTargetViewport = synchronizer.hasTargetViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n      synchronizersFilteredByIds.push(synchronizer);\n    }\n  }\n\n  return synchronizersFilteredByIds;\n}\n\nexport default getSynchronizersForViewport;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a rendering engine Id and a viewport Id, return the tool group that\n * contains that rendering engine and viewport. Note: A viewport can only be\n * associated with a single tool group. You cannot have a viewport that belongs\n * to multiple tool groups. To achieve so, create a new viewport and a new toolGroup\n * for it. This will not impact memory usage much as the volume textures are\n * shared across all viewports rendering the same image.\n *\n * @param viewportId - The Id of the viewport that the tool is being\n * added to.\n * @param renderingEngineId - The Id of the rendering engine that the\n * tool group is associated with.\n * @returns A tool group.\n */\nfunction getToolGroupForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): IToolGroup | undefined {\n  const toolGroupFilteredByIds = state.toolGroups.filter((tg) =>\n    tg.viewportsInfo.some(\n      (vp) =>\n        vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)\n    )\n  );\n\n  if (!toolGroupFilteredByIds.length) {\n    return;\n  }\n\n  if (toolGroupFilteredByIds.length > 1) {\n    throw new Error(\n      `Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`\n    );\n  }\n\n  return toolGroupFilteredByIds[0];\n}\n\nexport default getToolGroupForViewport;\n","import { getEnabledElement, Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n  touchToolEventDispatcher,\n} from '../eventDispatchers';\n// ~~\n\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\nimport imageChangeEventListener from '../eventListeners/segmentation/imageChangeEventListener';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\nfunction removeEnabledElement(\n  elementDisabledEvt: Types.EventTypes.ElementDisabledEvent\n): void {\n  // Is DOM element\n  const { element, viewportId } = elementDisabledEvt.detail;\n\n  _resetSvgNodeCache(element);\n  _removeSvgNode(element);\n\n  // Remove this element from the annotation rendering engine\n  annotationRenderingEngine.removeViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.disable(element);\n  wheelEventListener.disable(element);\n  touchEventListeners.disable(element);\n  keyEventListener.disable(element);\n\n  // labelmap\n  imageChangeEventListener.disable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.disable(element);\n  cameraModifiedEventDispatcher.disable(element);\n  imageSpacingCalibratedEventDispatcher.disable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.disable(element);\n  keyboardToolEventDispatcher.disable(element);\n  touchToolEventDispatcher.disable(element);\n\n  // State\n  // @TODO: We used to \"disable\" the tool before removal. Should we preserve the hook that would call on tools?\n  _removeViewportFromSynchronizers(element);\n  _removeViewportFromToolGroup(element);\n\n  // _removeAllToolsForElement(canvas)\n  _removeEnabledElement(element);\n}\n\nconst _removeViewportFromSynchronizers = (element: HTMLDivElement) => {\n  const enabledElement = getEnabledElement(element);\n\n  const synchronizers = getSynchronizersForViewport(\n    enabledElement.viewportId,\n    enabledElement.renderingEngineId\n  );\n  synchronizers.forEach((sync) => {\n    sync.remove(enabledElement);\n  });\n};\n\nconst _removeViewportFromToolGroup = (element: HTMLDivElement) => {\n  const { renderingEngineId, viewportId } = getEnabledElement(element);\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (toolGroup) {\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n  }\n};\n\nconst _removeAllToolsForElement = function (element) {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  toolsWithData.forEach(({ annotations }) => {\n    annotations.forEach((annotation) => {\n      removeAnnotation(annotation.annotationUID);\n    });\n  });\n};\n\nfunction _resetSvgNodeCache(element: HTMLDivElement) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  delete state.svgNodeCache[elementHash];\n}\n\nfunction _removeSvgNode(element: HTMLDivElement) {\n  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n  const svgLayer = internalViewportNode.querySelector('svg');\n  if (svgLayer) {\n    internalViewportNode.removeChild(svgLayer);\n  }\n}\n\n/**\n * @private\n * @param enabledElement\n */\nconst _removeEnabledElement = function (element: HTMLDivElement) {\n  const foundElementIndex = state.enabledElements.findIndex(\n    (el) => el === element\n  );\n\n  if (foundElementIndex > -1) {\n    state.enabledElements.splice(foundElementIndex, 1);\n  }\n};\n\nexport default removeEnabledElement;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\n\n/**\n * Cancel the current active manipulation that is being performed on the provided\n * element. It filters all the active and passive tools for the enabledElement\n * and calls cancel() method for all of them, and returns the tool that has executed its\n * cancellation (returned its annotationUID), since tools that are not being manipulated will\n * short circuit early. Note: not all tools currently implement a cancel method.\n *\n * @param element - canvas element\n * @returns annotationUID that is cancelled\n */\nexport default function cancelActiveManipulations(\n  element: HTMLDivElement\n): string | undefined {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  for (const { tool } of toolsWithData) {\n    const annotationUID = tool.cancel(element);\n    if (annotationUID) {\n      return annotationUID;\n    }\n  }\n}\n","import {\n  getRenderingEngine,\n  getEnabledElement,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\n\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Synchronizer is a class that listens to a specific event on a specific source\n * targets and fires a specific event on a specific target elements. Use cases\n * include: synchronizing a camera between two viewports, synchronizing a\n * windowLevel between various viewports.\n */\nclass Synchronizer {\n  //\n  private _enabled: boolean;\n  private _eventName: string;\n  private _auxiliaryEventNames: string[];\n  private _eventHandler: ISynchronizerEventHandler;\n  private _ignoreFiredEvents: boolean;\n  private _sourceViewports: Array<Types.IViewportId>;\n  private _targetViewports: Array<Types.IViewportId>;\n  private _viewportOptions: Record<string, Record<string, unknown>> = {};\n  private _options: any;\n  public id: string;\n\n  constructor(\n    synchronizerId: string,\n    eventName: string,\n    eventHandler: ISynchronizerEventHandler,\n    options?: any\n  ) {\n    this._enabled = true;\n    this._eventName = eventName;\n    this._eventHandler = eventHandler;\n    this._ignoreFiredEvents = false;\n    this._sourceViewports = [];\n    this._targetViewports = [];\n    this._options = options || {};\n    this._auxiliaryEventNames = this._options.auxiliaryEventNames || [];\n\n    //\n    this.id = synchronizerId;\n  }\n\n  /**\n   * \"Returns true if the synchronizer is disabled.\"\n   * @returns A boolean value.\n   */\n  public isDisabled(): boolean {\n    return !this._enabled || !this._hasSourceElements();\n  }\n\n  /**\n   * Sets the options for the viewport id.  This can be used to\n   * provide configuration on a viewport basis for things like offsets\n   * to the general synchronization, or turn on/off synchronization of certain\n   * attributes.\n   */\n  public setOptions(\n    viewportId: string,\n    options: Record<string, unknown> = {}\n  ): void {\n    this._viewportOptions[viewportId] = options;\n  }\n\n  /** Gets the options for the given viewport id */\n  public getOptions(viewportId: string): Record<string, unknown> | undefined {\n    return this._viewportOptions[viewportId];\n  }\n\n  /**\n   * Add a viewport to the list of targets and sources both.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public add(viewportInfo: Types.IViewportId): void {\n    this.addTarget(viewportInfo);\n    this.addSource(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of sources (source ONLY)\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addSource(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._sourceViewports, viewportInfo)) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = viewportInfo;\n\n    const viewport =\n      getRenderingEngine(renderingEngineId).getViewport(viewportId);\n\n    if (!viewport) {\n      console.warn(\n        `Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`\n      );\n      return;\n    }\n\n    const element = viewport.element;\n\n    element.addEventListener(this._eventName, this._onEvent.bind(this));\n\n    if (this._auxiliaryEventNames.length) {\n      this._auxiliaryEventNames.forEach((eventName) => {\n        element.addEventListener(eventName, this._onEvent.bind(this));\n      });\n    }\n\n    this._updateDisableHandlers();\n\n    this._sourceViewports.push(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of viewports that will get the eventHandler\n   * executed when the event is fired on the source viewport.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addTarget(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._targetViewports, viewportInfo)) {\n      return;\n    }\n\n    this._targetViewports.push(viewportInfo);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Get the list of source viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getSourceViewports(): Array<Types.IViewportId> {\n    return this._sourceViewports;\n  }\n\n  /**\n   * Get the list of target viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getTargetViewports(): Array<Types.IViewportId> {\n    return this._targetViewports;\n  }\n\n  public destroy(): void {\n    this._sourceViewports.forEach((s) => this.removeSource(s));\n    this._targetViewports.forEach((t) => this.removeTarget(t));\n  }\n\n  /**\n   * Remove the viewport from the list of targets and sources\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public remove(viewportInfo: Types.IViewportId): void {\n    this.removeTarget(viewportInfo);\n    this.removeSource(viewportInfo);\n  }\n\n  /**\n   * Remove the viewport from the list of source viewports\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public removeSource(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    const element = _getViewportElement(viewportInfo);\n\n    this._sourceViewports.splice(index, 1);\n\n    //@ts-ignore\n    element.removeEventListener(this._eventName, this._eventHandler);\n\n    if (this._auxiliaryEventNames) {\n      this._auxiliaryEventNames.forEach((eventName) => {\n        //@ts-ignore\n        element.removeEventListener(eventName, this._eventHandler);\n      });\n    }\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Remove the viewport from the list of viewports that are currently targeted by\n   * this handler\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   *\n   */\n  public removeTarget(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._targetViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    this._targetViewports.splice(index, 1);\n    this._updateDisableHandlers();\n  }\n\n  public hasSourceViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._sourceViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  public hasTargetViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._targetViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  private fireEvent(sourceViewport: Types.IViewportId, sourceEvent: any): void {\n    if (this.isDisabled() || this._ignoreFiredEvents) {\n      return;\n    }\n\n    this._ignoreFiredEvents = true;\n    const promises = [];\n    try {\n      for (let i = 0; i < this._targetViewports.length; i++) {\n        const targetViewport = this._targetViewports[i];\n        const targetIsSource =\n          sourceViewport.viewportId === targetViewport.viewportId;\n\n        if (targetIsSource) {\n          continue;\n        }\n        const result = this._eventHandler(\n          this,\n          sourceViewport,\n          targetViewport,\n          sourceEvent,\n          this._options\n        );\n\n        // if the result is a promise, then add it to the list of promises\n        // to wait for before setting _ignoreFiredEvents to false\n        if (result instanceof Promise) {\n          promises.push(result);\n        }\n      }\n    } catch (ex) {\n      console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n    } finally {\n      if (promises.length) {\n        Promise.allSettled(promises).then(() => {\n          this._ignoreFiredEvents = false;\n        });\n      } else {\n        this._ignoreFiredEvents = false;\n      }\n    }\n  }\n\n  private _onEvent = (evt: any): void => {\n    if (this._ignoreFiredEvents === true) {\n      return;\n    }\n\n    // If no target viewports, then return immediately, this is useful\n    // when switching between layouts, when previous layout has disabled\n    // its viewports, and the new layout has not yet enabled them.\n    // Right now we don't \"delete\" the synchronizer if all source and targets\n    // are removed, but we may want to do that in the future.\n    if (!this._targetViewports.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(evt.currentTarget);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = enabledElement;\n\n    // If the viewport has been removed from the synchronizer before the event is\n    // fired, then return immediately.\n    if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n      return;\n    }\n\n    this.fireEvent(\n      {\n        renderingEngineId,\n        viewportId,\n      },\n      evt\n    );\n  };\n\n  private _hasSourceElements(): boolean {\n    return this._sourceViewports.length !== 0;\n  }\n\n  private _updateDisableHandlers(): void {\n    const viewports = _getUniqueViewports(\n      this._sourceViewports,\n      this._targetViewports\n    );\n    const _remove = this.remove;\n    const disableHandler = (elementDisabledEvent) => {\n      _remove(elementDisabledEvent.detail.element);\n    };\n\n    viewports.forEach(function (vUid) {\n      const renderingEngine = getRenderingEngine(\n        vUid.renderingEngineId\n      ).getViewport(vUid.viewportId);\n\n      if (!renderingEngine) {\n        return;\n      }\n\n      const { element } = renderingEngine;\n\n      element.removeEventListener(\n        Enums.Events.ELEMENT_DISABLED,\n        disableHandler\n      );\n      element.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n    });\n  }\n}\n\nfunction _getUniqueViewports(\n  vp1: Array<Types.IViewportId>,\n  vp2: Array<Types.IViewportId>\n): Array<Types.IViewportId> {\n  const unique = [];\n\n  const vps = vp1.concat(vp2);\n\n  for (let i = 0; i < vps.length; i++) {\n    const vp = vps[i];\n    if (\n      !unique.some(\n        (u) =>\n          vp.renderingEngineId === u.renderingEngineId &&\n          vp.viewportId === u.viewportId\n      )\n    ) {\n      unique.push(vp);\n    }\n  }\n\n  return unique;\n}\n\nfunction _getViewportIndex(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n): number {\n  return arr.findIndex(\n    (ar) =>\n      vp.renderingEngineId === ar.renderingEngineId &&\n      vp.viewportId === ar.viewportId\n  );\n}\n\nfunction _containsViewport(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n) {\n  return arr.some(\n    (ar) =>\n      ar.renderingEngineId === vp.renderingEngineId &&\n      ar.viewportId === vp.viewportId\n  );\n}\n\nfunction _getViewportElement(vp: Types.IViewportId): HTMLDivElement {\n  const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);\n  }\n\n  return renderingEngine.getViewport(vp.viewportId).element;\n}\n\nexport default Synchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Create a new synchronizer instance from Synchronizer class\n * @param synchronizerId - The id of the synchronizer.\n * @param eventName - The name of the event that will be emitted by the\n * synchronizer.\n * @param eventHandler - The event handler that will be\n * called when the event is emitted.\n * @param options - Options for the synchronizer.\n * @returns A reference to the synchronizer.\n */\nfunction createSynchronizer(\n  synchronizerId: string,\n  eventName: string,\n  eventHandler: ISynchronizerEventHandler,\n  options?: any\n): Synchronizer {\n  const synchronizerWithSameIdExists = state.synchronizers.some(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerWithSameIdExists) {\n    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n  }\n\n  // Create\n  const synchronizer = new Synchronizer(\n    synchronizerId,\n    eventName,\n    eventHandler,\n    options\n  );\n\n  // Update state\n  state.synchronizers.push(synchronizer);\n\n  // Return reference\n  return synchronizer;\n}\n\nexport default createSynchronizer;\n","import { state } from '../index';\n\n/**\n * \"Destroy all synchronizers.\"\n */\nfunction destroy(): void {\n  while (state.synchronizers.length > 0) {\n    const synchronizer = state.synchronizers.pop();\n\n    synchronizer.destroy();\n  }\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Get the synchronizer with the given id from the state.\n * @param synchronizerId - The id of the synchronizer to be retrieved.\n * @returns A synchronizer object.\n */\nfunction getSynchronizer(synchronizerId: string): Synchronizer | void {\n  return state.synchronizers.find((s) => s.id === synchronizerId);\n}\n\nexport default getSynchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Return the array of synchronizers\n * @returns An array of synchronizers.\n */\nfunction getAllSynchronizers(): Array<Synchronizer> {\n  return state.synchronizers;\n}\n\nexport default getAllSynchronizers;\n","import { state } from '../index';\n\n// Synchronizers are a bit more tenacious. We need to make sure we remove\n// any attached events\n// We should probably just have a destroySynchronizer call\n// then use getByX to allow versatility in how we can call destroy\n\n/**\n * Destroy a synchronizer by its ID.\n * @param synchronizerId - The id of the synchronizer to destroy.\n */\nfunction destroySynchronizer(synchronizerId: string): void {\n  const synchronizerIndex = state.synchronizers.findIndex(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerIndex > -1) {\n    const synchronizer = state.synchronizers[synchronizerIndex];\n\n    synchronizer.destroy();\n    state.synchronizers.splice(synchronizerIndex, 1);\n  }\n}\n\nexport default destroySynchronizer;\n","import { MouseBindings, ToolModes } from '../../enums';\nimport cloneDeep from 'lodash.clonedeep';\nimport get from 'lodash.get';\nimport {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  getRenderingEngines,\n  getEnabledElementByIds,\n  Settings,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport {\n  ToolActivatedEventDetail,\n  ToolModeChangedEventDetail,\n} from '../../types/EventTypes';\nimport { ToolGroupManager, state } from '../index';\nimport {\n  IToolBinding,\n  IToolClassReference,\n  IToolGroup,\n  SetToolBindingsType,\n  ToolOptionsType,\n  ToolConfiguration,\n} from '../../types';\n\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\n\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\n\n/**\n * ToolGroup class which is a container for tools and their modes and states.\n * In Cornerstone3DTools, you need to create a tool group in order to use the\n * tools. ToolGroup is a way to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports. Tools can set to be activated, enabled or disabled\n * in a toolGroup. You should not directly instantiate a ToolGroup. You need to use\n * ToolGroupManager helpers to create a new toolGroup or get a reference to an existing toolGroup.\n *\n * ```js\n * const toolGroup = csTools.ToolGroupManager.createToolGroup('toolGroupId')\n * ```\n */\nexport default class ToolGroup implements IToolGroup {\n  id: string;\n  viewportsInfo = [];\n  toolOptions = {};\n  /**\n   * Options used for restoring a tool\n   */\n  restoreToolOptions = {};\n  _toolInstances = {};\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Get the viewport IDs of all the viewports in the current viewport\n   * @returns An array of viewport IDs.\n   */\n  getViewportIds(): string[] {\n    return this.viewportsInfo.map(({ viewportId }) => viewportId);\n  }\n\n  /**\n   * Returns the toolGroup viewports info which is an array of {viewportId, renderingEngineId}\n   */\n  getViewportsInfo(): Array<Types.IViewportId> {\n    return this.viewportsInfo.slice();\n  }\n\n  /**\n   * Get the tool instance for a given tool name in the toolGroup\n   * @param toolName - The name of the tool.\n   * @returns A tool instance.\n   */\n  public getToolInstance(toolInstanceName: string) {\n    const toolInstance = this._toolInstances[toolInstanceName];\n    if (!toolInstance) {\n      console.warn(\n        `'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`\n      );\n      return;\n    }\n\n    return toolInstance;\n  }\n  /**\n   * Add a tool to the tool group with the given tool name and tool configuration.\n   * Note that adding a tool to a tool group will not automatically set the tool\n   * to be active. You must call setToolActive or setToolPassive and other methods\n   * to set the tool to be active or passive or in other states.\n   *\n   * @param toolName - string\n   * @param configuration - Tool configuration objects and a custom statistics calculator if needed\n   */\n  addTool(toolName: string, configuration: ToolConfiguration = {}): void {\n    const toolDefinition = state.tools[toolName];\n    const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n    const localToolInstance = this.toolOptions[toolName];\n\n    if (!hasToolName) {\n      console.warn(\n        'Tool with configuration did not produce a toolName: ',\n        configuration\n      );\n      return;\n    }\n\n    if (!toolDefinition) {\n      console.warn(\n        `'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`\n      );\n      return;\n    }\n\n    if (localToolInstance) {\n      console.warn(\n        `'${toolName}' is already registered for ToolGroup ${this.id}.`\n      );\n      return;\n    }\n\n    // Should these be renamed higher up, so we don't have to alias?\n    // Wrap in try-catch so 3rd party tools don't explode?\n    const { toolClass: ToolClass } = toolDefinition;\n\n    const toolProps = {\n      name: toolName,\n      toolGroupId: this.id,\n      configuration,\n    };\n\n    const instantiatedTool = new ToolClass(toolProps);\n\n    // API instead of directly exposing schema?\n    // Maybe not here, but feels like a \"must\" for any method outside of the ToolGroup itself\n    this._toolInstances[toolName] = instantiatedTool;\n  }\n\n  public addToolInstance(\n    toolName: string,\n    parentClassName: string,\n    configuration = {}\n  ): void {\n    let ToolClassToUse = state.tools[toolName]\n      ?.toolClass as IToolClassReference;\n\n    if (!ToolClassToUse) {\n      // get parent class constructor\n      const ParentClass = state.tools[parentClassName]\n        .toolClass as IToolClassReference;\n\n      // Todo: could not find a way to make this work with typescript\n      // @ts-ignore\n      class ToolInstance extends ParentClass {}\n      // @ts-ignore\n      ToolInstance.toolName = toolName;\n      // @ts-ignore\n      ToolClassToUse = ToolInstance;\n\n      state.tools[toolName] = {\n        toolClass: ToolInstance as IToolClassReference,\n      };\n    }\n\n    // add the tool to the toolGroup\n    // @ts-ignore\n    this.addTool(ToolClassToUse.toolName, configuration);\n  }\n\n  //   class InstanceTool extends parentClass;\n  // InstanceTool.constructor.toolName = name;\n  // addTool(InstanceTool,configuration)\n  /**\n   * Add a viewport to the ToolGroup. It accepts viewportId and optional\n   * renderingEngineId parameter. If renderingEngineId is not provided,\n   * it checks if cornerstone-core has more than one renderingEngine; If so,\n   * it will throw an error. If cornerstone-core has only one renderingEngine,\n   * it will use that renderingEngine.\n   *\n   * @param viewportId - The unique identifier for the viewport.\n   * @param renderingEngineId - The rendering engine to use.\n   */\n  public addViewport(viewportId: string, renderingEngineId?: string): void {\n    const renderingEngines = getRenderingEngines();\n\n    if (!renderingEngineId && renderingEngines.length > 1) {\n      throw new Error(\n        'You must specify a renderingEngineId when there are multiple rendering engines.'\n      );\n    }\n\n    const renderingEngineUIDToUse = renderingEngineId || renderingEngines[0].id;\n\n    // Don't overwrite if it already exists\n    if (\n      !this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)\n    ) {\n      this.viewportsInfo.push({\n        viewportId,\n        renderingEngineId: renderingEngineUIDToUse,\n      });\n    }\n\n    // Handle the newly added viewport's mouse cursor\n    const toolName = this.getActivePrimaryMouseButtonTool();\n\n    const runtimeSettings = Settings.getRuntimeSettings();\n    if (runtimeSettings.get('useCursors')) {\n      this.setViewportsCursorByToolName(toolName);\n    }\n  }\n\n  /**\n   * Removes viewport from the toolGroup. If only renderingEngineId is defined\n   * it removes all the viewports with the same renderingEngineId, if viewportId\n   * is also provided, it will remove that specific viewport from the ToolGroup.\n   *\n   * @param renderingEngineId - renderingEngine id\n   * @param viewportId - viewport id\n   */\n  public removeViewports(renderingEngineId: string, viewportId?: string): void {\n    const indices = [];\n\n    this.viewportsInfo.forEach((vpInfo, index) => {\n      let match = false;\n      if (vpInfo.renderingEngineId === renderingEngineId) {\n        match = true;\n\n        if (viewportId && vpInfo.viewportId !== viewportId) {\n          match = false;\n        }\n      }\n      if (match) {\n        indices.push(index);\n      }\n    });\n\n    if (indices.length) {\n      // Note: Traverse the array backwards, such that when we remove items we\n      // do not immediately mess up our loop indicies.\n      for (let i = indices.length - 1; i >= 0; i--) {\n        this.viewportsInfo.splice(indices[i], 1);\n      }\n    }\n  }\n\n  public setActiveStrategy(toolName: string, strategyName: string) {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool configuration.`\n      );\n\n      return;\n    }\n\n    toolInstance.setActiveStrategy(strategyName);\n  }\n\n  setToolMode(\n    toolName: string,\n    mode: ToolModes,\n    options = {} as SetToolBindingsType\n  ): void {\n    if (!toolName) {\n      console.warn('setToolMode: toolName must be defined');\n      return;\n    }\n\n    if (mode === ToolModes.Active) {\n      this.setToolActive(\n        toolName,\n        options || this.restoreToolOptions[toolName]\n      );\n      return;\n    }\n\n    if (mode === ToolModes.Passive) {\n      this.setToolPassive(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Enabled) {\n      this.setToolEnabled(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Disabled) {\n      this.setToolDisabled(toolName);\n      return;\n    }\n\n    console.warn('setToolMode: mode must be defined');\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Active. This means the tool\n   * can be actively used by the defined bindings (e.g., Mouse primary click)\n   *\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   * @param toolBindingsOptions - tool bindings\n   */\n  public setToolActive(\n    toolName: string,\n    toolBindingsOptions = {} as SetToolBindingsType\n  ): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    if (!toolInstance) {\n      console.warn(\n        `'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`\n      );\n      return;\n    }\n\n    const prevBindings: IToolBinding[] = this.toolOptions[toolName]\n      ? this.toolOptions[toolName].bindings\n      : [];\n\n    const newBindings = toolBindingsOptions.bindings\n      ? toolBindingsOptions.bindings\n      : [];\n\n    // combine the new bindings with the previous bindings to avoid duplicates\n    // it allows duplicated mouse buttons as long as they don't have same\n    // modifier keys.\n    const bindingsToUse = [...prevBindings, ...newBindings].reduce(\n      (unique, binding) => {\n        const TouchBinding = binding.numTouchPoints !== undefined;\n        const MouseBinding = binding.mouseButton !== undefined;\n\n        if (\n          !unique.some((obj) => hasSameBinding(obj, binding)) &&\n          (TouchBinding || MouseBinding)\n        ) {\n          unique.push(binding);\n        }\n        return unique;\n      },\n      []\n    );\n\n    // We should not override the bindings if they are already set\n    const toolOptions: ToolOptionsType = {\n      bindings: bindingsToUse,\n      mode: Active,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    this._toolInstances[toolName].mode = Active;\n\n    // reset the mouse cursor if tool has left click binding\n    const runtimeSettings = Settings.getRuntimeSettings();\n    const useCursor = runtimeSettings.get('useCursors');\n\n    if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {\n      this.setViewportsCursorByToolName(toolName);\n    } else {\n      // reset to default cursor only if there is no other tool with primary binding\n      const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n      if (!activeToolIdentifier && useCursor) {\n        const cursor = MouseCursor.getDefinedCursor('default');\n        this._setCursorForViewports(cursor);\n      }\n    }\n\n    if (typeof toolInstance.onSetToolActive === 'function') {\n      toolInstance.onSetToolActive();\n    }\n    this._renderViewports();\n\n    const eventDetail: ToolActivatedEventDetail = {\n      toolGroupId: this.id,\n      toolName,\n      toolBindingsOptions,\n    };\n\n    triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n    this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Passive.\n   *\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   */\n  public setToolPassive(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    // We should only remove the primary button bindings and keep\n    // the other ones (Zoom on right click)\n    const prevToolOptions = this.getToolOptions(toolName);\n    const toolOptions = Object.assign(\n      {\n        bindings: prevToolOptions ? prevToolOptions.bindings : [],\n      },\n      prevToolOptions,\n      {\n        mode: Passive,\n      }\n    );\n\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    // Remove the primary button bindings without modifiers, if they exist\n    toolOptions.bindings = toolOptions.bindings.filter(\n      (binding) =>\n        binding.mouseButton !== defaultMousePrimary || binding.modifierKey\n    );\n    // If there are other bindings, set the tool to be active\n    let mode = Passive;\n    if (toolOptions.bindings.length !== 0) {\n      mode = Active;\n      toolOptions.mode = mode;\n    }\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = mode;\n\n    if (typeof toolInstance.onSetToolPassive === 'function') {\n      toolInstance.onSetToolPassive();\n    }\n    this._renderViewports();\n\n    // It would make sense to use `toolInstance.mode` as mode when setting a tool\n    // as passive because it can still be actived in the end but `Passive` must\n    // be used when synchronizing ToolGroups so that other ToolGroups can take the\n    // same action (update tool bindings). Should the event have two different modes\n    // to handle this special case?\n    this._triggerToolModeChangedEvent(toolName, Passive);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Enabled.\n   *\n   * - Renders data if the tool has a `renderAnnotation` method..\n   *\n   * @param toolName - tool name\n   */\n  public setToolEnabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Enabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Enabled;\n\n    if (typeof toolInstance.onSetToolEnabled === 'function') {\n      toolInstance.onSetToolEnabled();\n    }\n\n    this._renderViewports();\n    this._triggerToolModeChangedEvent(toolName, Enabled);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Disabled.\n   *\n   * - Annotation does not render.\n   *\n   * @param toolName - tool name\n   */\n  public setToolDisabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Disabled,\n    };\n\n    this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Disabled;\n\n    if (typeof toolInstance.onSetToolDisabled === 'function') {\n      toolInstance.onSetToolDisabled();\n    }\n    this._renderViewports();\n    this._triggerToolModeChangedEvent(toolName, Disabled);\n  }\n\n  /**\n   * Get the options for a given tool\n   * @param toolName - The name of the tool.\n   * @returns the tool options\n   */\n  public getToolOptions(toolName: string): ToolOptionsType {\n    const toolOptionsForTool = this.toolOptions[toolName];\n\n    if (toolOptionsForTool === undefined) {\n      return;\n    }\n\n    return toolOptionsForTool;\n  }\n\n  /**\n   * Find the name of the tool that is Active and has a primary button binding\n   * (Mouse primary click)\n   *\n   * @returns The name of the tool\n   */\n  public getActivePrimaryMouseButtonTool(): string {\n    return Object.keys(this.toolOptions).find((toolName) => {\n      const toolOptions = this.toolOptions[toolName];\n      return (\n        toolOptions.mode === Active &&\n        this._hasMousePrimaryButtonBinding(toolOptions)\n      );\n    });\n  }\n\n  public setViewportsCursorByToolName(\n    toolName: string,\n    strategyName?: string\n  ): void {\n    const cursor = this._getCursor(toolName, strategyName);\n\n    this._setCursorForViewports(cursor);\n  }\n\n  private _getCursor(toolName: string, strategyName?: string): MouseCursor {\n    let cursorName;\n    let cursor;\n\n    if (strategyName) {\n      // Try combinations with strategyName first:\n      // Try with toolName and toolInstanceName first.\n      cursorName = `${toolName}.${strategyName}`;\n\n      cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    // Try with toolName and toolInstanceName first.\n    cursorName = `${toolName}`;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    // Try with just toolName.\n    cursorName = toolName;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    return MouseCursor.getDefinedCursor('default');\n  }\n\n  _setCursorForViewports(cursor: MouseCursor): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n      initElementCursor(viewport.element, cursor);\n    });\n  }\n\n  /**\n   * Set a configuration of a tool by the given toolName.\n   * Use overwrite as true in case you want to overwrite any existing configuration (be careful, depending on config change it might break the annotation flow).\n   */\n  public setToolConfiguration(\n    toolName: string,\n    configuration: ToolConfiguration,\n    overwrite?: boolean\n  ): boolean {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return false;\n    }\n\n    let _configuration;\n\n    if (overwrite) {\n      _configuration = configuration;\n    } else {\n      // We should not deep copy here, it is the job of the application to\n      // deep copy the configuration before passing it to the toolGroup, otherwise\n      // some strange appending behaviour happens for the arrays\n      _configuration = Object.assign(\n        this._toolInstances[toolName].configuration,\n        configuration\n      );\n    }\n\n    this._toolInstances[toolName].configuration = _configuration;\n\n    this._renderViewports();\n\n    return true;\n  }\n\n  /**\n   * Returns the default mouse primary button.\n   *\n   */\n  public getDefaultMousePrimary(): MouseBindings {\n    return MouseBindings.Primary;\n  }\n\n  /**\n   * Get the configuration of tool. It returns only the config for the given path (in case exists).\n   * ConfigurationPath is the the path of the property to get separated by '.'.\n   *\n   * @example\n   * getToolConfiguration('LengthTool', 'firstLevel.secondLevel')\n   * // get from LengthTool instance the configuration value as being LengthToolInstance[configuration][firstLevel][secondLevel]\n   */\n  getToolConfiguration(toolName: string, configurationPath?: string): any {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return;\n    }\n\n    const _configuration =\n      get(this._toolInstances[toolName].configuration, configurationPath) ||\n      this._toolInstances[toolName].configuration;\n\n    return cloneDeep(_configuration);\n  }\n\n  /**\n   *\n   * @param newToolGroupId - Id of the new (clone) tool group\n   * @param fnToolFilter - Function to filter which tools from this tool group\n   * should be added to the new (clone) one. Example: only annotations tools\n   * can be filtered and added to the new tool group.\n   * @returns A new tool group that is a clone of this one\n   */\n  public clone(\n    newToolGroupId,\n    fnToolFilter: (toolName: string) => void = null\n  ): IToolGroup {\n    let toolGroup = ToolGroupManager.getToolGroup(newToolGroupId);\n\n    if (toolGroup) {\n      console.warn(`ToolGroup ${newToolGroupId} already exists`);\n      return toolGroup;\n    }\n\n    toolGroup = ToolGroupManager.createToolGroup(newToolGroupId);\n    fnToolFilter = fnToolFilter ?? (() => true);\n\n    Object.keys(this._toolInstances)\n      .filter(fnToolFilter)\n      .forEach((toolName) => {\n        const sourceToolInstance = this._toolInstances[toolName];\n        const sourceToolOptions = this.toolOptions[toolName];\n        const sourceToolMode = sourceToolInstance.mode;\n\n        toolGroup.addTool(toolName);\n\n        (toolGroup as unknown as ToolGroup).setToolMode(\n          toolName,\n          sourceToolMode,\n          {\n            bindings: sourceToolOptions.bindings ?? [],\n          }\n        );\n      });\n\n    return toolGroup;\n  }\n\n  /**\n   * Check if the tool binding is set to be primary mouse button.\n   * @param toolOptions - The options for the tool mode.\n   * @returns A boolean value.\n   */\n  private _hasMousePrimaryButtonBinding(toolOptions) {\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    return toolOptions?.bindings?.some(\n      (binding) =>\n        binding.mouseButton === defaultMousePrimary &&\n        binding.modifierKey === undefined\n    );\n  }\n\n  /**\n   * It re-renders the viewports in the toolGroup\n   */\n  private _renderViewports(): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n    });\n  }\n\n  /**\n   * Trigger ToolModeChangedEvent when changing the tool mode\n   * @param toolName - Tool name\n   * @param mode - Tool mode\n   * @param toolBindingsOptions - Binding options used when a tool is activated\n   */\n  private _triggerToolModeChangedEvent(\n    toolName: string,\n    mode: ToolModes,\n    toolBindingsOptions?: SetToolBindingsType\n  ): void {\n    const eventDetail: ToolModeChangedEventDetail = {\n      toolGroupId: this.id,\n      toolName,\n      mode,\n      toolBindingsOptions,\n    };\n\n    triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n  }\n}\n\nfunction hasSameBinding(\n  binding1: IToolBinding,\n  binding2: IToolBinding\n): boolean {\n  if (binding1.mouseButton !== binding2.mouseButton) {\n    return false;\n  }\n\n  return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../index';\nimport ToolGroup from './ToolGroup';\nimport { IToolGroup } from '../../types';\n\n/**\n * Create a new tool group with the given name. ToolGroups are the new way\n * in Cornerstone3DTools to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports.\n *\n * @param toolGroupId - The unique ID of the tool group.\n * @returns A reference to the tool group that was created.\n */\nfunction createToolGroup(toolGroupId: string): IToolGroup | undefined {\n  // Exit early if ID conflict\n  const toolGroupWithIdExists = state.toolGroups.some(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupWithIdExists) {\n    console.warn(`'${toolGroupId}' already exists.`);\n    return;\n  }\n\n  const toolGroup = new ToolGroup(toolGroupId);\n\n  // Update state\n  state.toolGroups.push(toolGroup);\n\n  // Return reference\n  return toolGroup;\n}\n\nexport default createToolGroup;\n","import { state } from '../index';\nimport { removeSegmentationsFromToolGroup } from '../../stateManagement/segmentation';\nimport { segmentationRenderingEngine } from '../../utilities/segmentation/triggerSegmentationRender';\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it\n\n/**\n * Given a tool group Id, destroy the toolGroup. It will also cleanup all segmentations\n * associated with that tool group too\n *\n * @param toolGroupId - The Id of the tool group to be destroyed.\n */\nfunction destroyToolGroup(toolGroupId: string): void {\n  const toolGroupIndex = state.toolGroups.findIndex(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupIndex > -1) {\n    segmentationRenderingEngine.removeToolGroup(toolGroupId);\n    // Todo: this should not happen here)\n    removeSegmentationsFromToolGroup(toolGroupId);\n    state.toolGroups.splice(toolGroupIndex, 1);\n  }\n}\n\nexport default destroyToolGroup;\n","// `BaseManager` or IManager interface for duplicate API between ToolGroup/Synchronizer?\nimport { state as csToolsState } from '../index';\nimport destroyToolGroup from './destroyToolGroup';\n\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it. Calling\n// destroyToolGroup() to make sure the SegmentationDisplayTools\n// have been removed from the toolGroup Viewports. //Todo: this makes more sense\n// to be based on events, but we don't have any toolGroup created/removed events\n\n/**\n * Destroy all tool groups\n */\nfunction destroy(): void {\n  const toolGroups = [...csToolsState.toolGroups];\n\n  for (const toolGroup of toolGroups) {\n    destroyToolGroup(toolGroup.id);\n  }\n\n  csToolsState.toolGroups = [];\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a tool group Id, return the tool group\n * @param toolGroupId - The Id of the tool group to be retrieved.\n * @returns The tool group that has the same id as the tool group id that was\n * passed in.\n */\nfunction getToolGroup(toolGroupId: string): IToolGroup | undefined {\n  return state.toolGroups.find((s) => s.id === toolGroupId);\n}\n\nexport default getToolGroup;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Return the array of tool groups\n * @returns An array of tool groups.\n */\nfunction getAllToolGroups(): Array<IToolGroup> {\n  return state.toolGroups;\n}\n\nexport default getAllToolGroups;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\nimport { ToolModes } from '../../enums';\n\nconst MODES = [ToolModes.Active, ToolModes.Passive, ToolModes.Enabled];\n\n/**\n * Returns the toolGroups that has the given toolName as active, passive\n * or enabled.\n * @param toolName - The name of the tool\n * @returns An array of tool groups.\n */\nfunction getToolGroupsWithToolName(toolName: string): IToolGroup[] | [] {\n  return state.toolGroups.filter(({ toolOptions }) => {\n    const toolGroupToolNames = Object.keys(toolOptions);\n\n    for (let i = 0; i < toolGroupToolNames.length; i++) {\n      if (toolName !== toolGroupToolNames[i]) {\n        continue;\n      }\n\n      /* filter out tools that don't have options */\n      if (!toolOptions[toolName]) {\n        continue;\n      }\n\n      if (MODES.includes(toolOptions[toolName].mode)) {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n\nexport default getToolGroupsWithToolName;\n","import {\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { Annotations, Annotation } from '../../types/AnnotationTypes';\nimport { AnnotationRemovedEventDetail } from '../../types/EventTypes';\nimport { AnnotationGroupSelector } from '../../types';\nimport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n} from './helpers/state';\n\n// our default annotation manager\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n\n/**\n * It returns the default annotations manager.\n * @returns the singleton default annotations manager.\n */\nfunction getAnnotationManager() {\n  return defaultManager;\n}\n\n/**\n * Set the annotation manager to be used for rendering, adding, removing, etc.\n * @param annotationManager - The annotation manager to be used\n */\nfunction setAnnotationManager(annotationManager) {\n  defaultManager = annotationManager;\n}\n\n// set back to default frameOfReferenceSpecificAnnotationManager\nfunction resetAnnotationManager() {\n  defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\n\n/**\n * Returns the annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getAnnotations function will return the annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n * @returns The annotations corresponding to the Frame of Reference and the toolName.\n */\nfunction getAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): Annotations {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n  return manager.getAnnotations(groupKey, toolName) as Annotations;\n}\n\n/**\n * Add the annotation to the annotation manager along with the options that is\n * used to filter the annotation manager and the annotation group that\n * the annotation belongs to.\n *\n * As a result, our default implementation will add the annotation to the\n * default manager using the FrameOfReferenceUID as the group key.\n *\n * @param annotation - The annotation that is being added to the annotations manager.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n */\nfunction addAnnotation(\n  annotation: Annotation,\n  annotationGroupSelector: AnnotationGroupSelector\n): string {\n  if (!annotation.annotationUID) {\n    annotation.annotationUID = csUtils.uuidv4() as string;\n  }\n\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  manager.addAnnotation(annotation, groupKey);\n\n  // if the annotation manager selector is an element, trigger the\n  // annotation added event for that element.\n  if (annotationGroupSelector instanceof HTMLDivElement) {\n    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n  } else {\n    // if no element is provided, render all viewports that have the\n    // same frame of reference.\n    // Todo: we should do something else here for other types of annotation managers.\n    triggerAnnotationAddedForFOR(annotation);\n  }\n\n  return annotation.annotationUID;\n}\n\n/**\n * Get the number of annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getNumberOfAnnotations function will return the number of annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n *\n */\nfunction getNumberOfAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): number {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  return manager.getNumberOfAnnotations(groupKey, toolName);\n}\n\n/**\n * Remove the annotation by UID of the annotation.\n * @param annotationUID - The unique identifier for the annotation.\n */\nfunction removeAnnotation(annotationUID: string): void {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  // no need to continue in case there is no annotation.\n  if (!annotation) {\n    return;\n  }\n\n  manager.removeAnnotation(annotationUID);\n\n  // trigger annotation removed\n  const eventType = Events.ANNOTATION_REMOVED;\n\n  const eventDetail: AnnotationRemovedEventDetail = {\n    annotation,\n    annotationManagerUID: manager.uid,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Get the Annotation object by its UID\n * @param annotationUID - The unique identifier of the annotation.\n */\nfunction getAnnotation(annotationUID: string): Annotation {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  return annotation;\n}\n\n/**\n * It removes all annotations from the default annotation manager\n */\nfunction removeAllAnnotations(): void {\n  const manager = getAnnotationManager();\n  manager.removeAllAnnotations();\n}\n\nexport {\n  getAnnotations,\n  getNumberOfAnnotations,\n  addAnnotation,\n  getAnnotation,\n  removeAnnotation,\n  removeAllAnnotations,\n  // annotation manager\n  setAnnotationManager,\n  getAnnotationManager,\n  resetAnnotationManager,\n};\n","import {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { Annotation } from '../../../types/AnnotationTypes';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nimport { AnnotationAddedEventDetail } from '../../../types/EventTypes';\n\n/**\n * It triggers an event for the element when an annotation is added\n * @param annotation - Annotation - The annotation that was added.\n * @param element - The element that the annotation was added to.\n */\nfunction triggerAnnotationAddedForElement(\n  annotation: Annotation,\n  element: HTMLDivElement\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewportId } = enabledElement;\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  const eventDetail: AnnotationAddedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId: renderingEngine.id,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * If the annotation has a FrameOfReferenceUID, it triggers the ANNOTATION_ADDED\n * event for all the viewports that has the same FrameOfReferenceUID.\n * @param annotation -  Annotation - The annotation that was added\n */\nfunction triggerAnnotationAddedForFOR(annotation: Annotation) {\n  const { toolName } = annotation.metadata;\n\n  const toolGroups = getToolGroupsWithToolName(toolName);\n\n  if (!toolGroups.length) {\n    return;\n  }\n\n  // Find the viewports in the toolGroups who has the same FrameOfReferenceUID\n  const viewportsToRender = [];\n\n  toolGroups.forEach((toolGroup) => {\n    toolGroup.viewportsInfo.forEach((viewportInfo) => {\n      const { renderingEngineId, viewportId } = viewportInfo;\n      const { FrameOfReferenceUID } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n        viewportsToRender.push(viewportInfo);\n      }\n    });\n  });\n\n  if (!viewportsToRender.length) {\n    return;\n  }\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n    const eventDetail: AnnotationAddedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  });\n}\n\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR };\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { getDefaultSegmentationStateManager } from './stateManagement/segmentation/segmentationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport {\n  annotationSelectionListener,\n  segmentationDataModifiedEventListener,\n  segmentationRepresentationModifiedEventListener,\n  segmentationRepresentationRemovedEventListener,\n  segmentationModifiedListener,\n  annotationModifiedListener,\n} from './eventListeners';\n\nimport * as ToolGroupManager from './store/ToolGroupManager';\n\nlet csToolsInitialized = false;\n\n/**\n * Initialize the cornerstoneTools package. It will add event listeners for mouse\n * and keyboard events.\n * @param defaultConfiguration - A configuration object that will be used to\n * initialize the tool.\n */\nexport function init(defaultConfiguration = {}): void {\n  if (csToolsInitialized) {\n    return;\n  }\n\n  _addCornerstoneEventListeners();\n  _addCornerstoneToolsEventListeners();\n\n  csToolsInitialized = true;\n}\n\n/**\n * It destroys and cleanup state for cornerstone3DTools. It removes all the tools\n * that were added to the tool groups and restore states. It also removes all\n * event listeners.\n */\nexport function destroy(): void {\n  _removeCornerstoneEventListeners();\n  _removeCornerstoneToolsEventListeners();\n\n  // Important: destroy ToolGroups first, in order for cleanup to work correctly for the\n  // added tools.\n  ToolGroupManager.destroy();\n\n  // Remove all tools\n  resetCornerstoneToolsState();\n\n  // remove all annotation.\n  const annotationManager = getAnnotationManager();\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  annotationManager.restoreAnnotations({});\n  segmentationStateManager.resetState();\n  csToolsInitialized = false;\n}\n\n/**\n * Wires up event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n * @internal\n */\nfunction _addCornerstoneEventListeners(): void {\n  // Clear any listeners that may already be set\n  _removeCornerstoneEventListeners();\n\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * Removes event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n */\nfunction _removeCornerstoneEventListeners(): void {\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * It adds an event listener to the event target (the cornerstoneTools object) for\n * the annotation selected and annotation modified events.\n */\nfunction _addCornerstoneToolsEventListeners() {\n  // Clear any listeners that may already be set\n  _removeCornerstoneToolsEventListeners();\n\n  /**\n   * Annotation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\n/**\n * Remove the event listener for the the annotation selected and annotation modified events.\n */\nfunction _removeCornerstoneToolsEventListeners() {\n  /**\n   * Annotation\n   */\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\nexport default init;\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera by updating all camera\n * values.  See also zoomPanSyncCallback\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default function cameraSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  cameraModifiedEvent: CustomEvent\n): void {\n  const { camera } = cameraModifiedEvent.detail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n\n  tViewport.setCamera(camera);\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createCameraPositionSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const cameraPositionSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    cameraSyncCallback\n  );\n\n  return cameraPositionSynchronizer;\n}\n","import {\n  BaseVolumeViewport,\n  getRenderingEngine,\n  StackViewport,\n  Types,\n} from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the voi of volumeActors of identical volumes\n * in different viewports.\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport.\n * @param voiModifiedEvent - The VOI_MODIFIED event.\n * @param options - Options for the synchronizer.\n */\nexport default function voiSyncCallback(\n  synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  voiModifiedEvent: Types.EventTypes.VoiModifiedEvent,\n  options?: any\n): void {\n  const eventDetail = voiModifiedEvent.detail;\n  const { volumeId, range, invertStateChanged, invert } = eventDetail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `Rendering Engine does not exist: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const tProperties:\n    | Types.VolumeViewportProperties\n    | Types.StackViewportProperties = {\n    voiRange: range,\n  };\n\n  if (options?.syncInvertState && invertStateChanged) {\n    tProperties.invert = invert;\n  }\n\n  if (tViewport instanceof BaseVolumeViewport) {\n    tViewport.setProperties(tProperties, volumeId);\n  } else if (tViewport instanceof StackViewport) {\n    tViewport.setProperties(tProperties);\n  } else {\n    throw new Error('Viewport type not supported.');\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\ntype VOISynchronizerOptions = {\n  syncInvertState: boolean;\n};\n\n/**\n * A helper that creates a new `Synchronizer`\n * which listens to the `VOI_MODIFIED` rendering event and calls the `voiSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @param options - The options for the synchronizer. By default the voi\n * synchronizer will also sync the invert state of the volume, but this can be\n * disabled by setting `syncInvertState` to false.\n *\n * @returns A new `Synchronizer` instance.\n */\nexport default function createVOISynchronizer(\n  synchronizerName: string,\n  options = { syncInvertState: true } as VOISynchronizerOptions\n): Synchronizer {\n  const VOISynchronizer = createSynchronizer(\n    synchronizerName,\n    Enums.Events.VOI_MODIFIED,\n    voiSyncCallback,\n    options\n  );\n\n  return VOISynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function zoomPanSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  if (options?.syncZoom !== false) {\n    const srcZoom = sViewport.getZoom();\n    // Do the zoom first, as the pan is relative to the zoom level\n    tViewport.setZoom(srcZoom);\n  }\n  if (options?.syncPan !== false) {\n    const srcPan = sViewport.getPan();\n    tViewport.setPan(srcPan);\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createZoomPanSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const zoomPanSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    zoomPanSyncCallback\n  );\n\n  return zoomPanSynchronizer;\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport {\n  getRenderingEngine,\n  Types,\n  metaData,\n  utilities,\n  VolumeViewport,\n} from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\nimport { jumpToSlice } from '../../utilities';\nimport areViewportsCoplanar from './areViewportsCoplanar ';\n\nconst getSpatialRegistration = (targetId, sourceId) =>\n  utilities.spatialRegistrationMetadataProvider.get(\n    'spatialRegistrationModule',\n    targetId,\n    sourceId\n  );\n\n/**\n * Synchronizer callback to synchronize the source viewport image to the\n * target viewports closest image in its stack.\n *\n * This synchronizer does a setup (which can already be predefined as required)\n * to register the target and soruce viewports.  The registration will default\n * to the identity registration if the same FOR is present in both viewports,\n * unless the option `useInitialPosition` is set in the target viewport.\n *\n * The consuming apps using Cornerstone3D (OHIF, etc) MAY provide such data in\n * the registrationMetadataProvider to override the data here. This can be done\n * by various methods 1) Using spatialRegistrationModule inside dicom 2) assuming\n * the user has actually manually scrolled the target viewport to the correct\n * slice before initiating the synchronization 3) using some other method\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default async function imageSliceSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): Promise<void> {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId) as\n    | Types.IVolumeViewport\n    | Types.IStackViewport;\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  if (options?.disabled) {\n    return;\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId) as\n    | Types.IVolumeViewport\n    | Types.IStackViewport;\n\n  const imageId1 = sViewport.getCurrentImageId();\n  const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n\n  const targetImageIds = tViewport.getImageIds();\n\n  if (!areViewportsCoplanar(sViewport, tViewport)) {\n    return;\n  }\n\n  // if the frame of reference is different we need to use the registrationMetadataProvider\n  // and add that to the imagePositionPatient of the source viewport to get the\n  // imagePositionPatient of the target viewport's closest image in its stack\n  let registrationMatrixMat4 = getSpatialRegistration(\n    targetViewport.viewportId,\n    sourceViewport.viewportId\n  );\n\n  if (!registrationMatrixMat4) {\n    const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n    const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n    if (\n      frameOfReferenceUID1 === frameOfReferenceUID2 &&\n      options?.useInitialPosition !== false\n    ) {\n      registrationMatrixMat4 = mat4.identity(mat4.create());\n    } else {\n      utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n      registrationMatrixMat4 = getSpatialRegistration(\n        targetViewport.viewportId,\n        sourceViewport.viewportId\n      );\n    }\n    if (!registrationMatrixMat4) {\n      return;\n    }\n  }\n\n  // apply the registration matrix to the source viewport's imagePositionPatient\n  // to get the target viewport's imagePositionPatient\n  const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(\n    vec3.create(),\n    sourceImagePositionPatient,\n    registrationMatrixMat4\n  );\n\n  // find the closest image in the target viewport's stack to the\n  // targetImagePositionPatientWithRegistrationMatrix\n  const closestImageIdIndex2 = _getClosestImageIdIndex(\n    targetImagePositionPatientWithRegistrationMatrix,\n    targetImageIds\n  );\n\n  let imageIndexToSet = closestImageIdIndex2.index;\n  if (tViewport instanceof VolumeViewport) {\n    // since in case of volume viewport our stack is reversed, we should\n    // reverse the index as well\n    imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;\n  }\n\n  if (\n    closestImageIdIndex2.index !== -1 &&\n    tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index\n  ) {\n    await jumpToSlice(tViewport.element, {\n      imageIndex: imageIndexToSet,\n    });\n  }\n}\n\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n  // todo: this does not assume orientation yet, but that can be added later\n  // todo: handle multiframe images\n  return imageIds.reduce(\n    (closestImageIdIndex, imageId, index) => {\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n      const distance = vec3.distance(imagePositionPatient, targetPoint);\n\n      if (distance < closestImageIdIndex.distance) {\n        return {\n          distance,\n          index,\n        };\n      }\n      return closestImageIdIndex;\n    },\n    {\n      distance: Infinity,\n      index: -1,\n    }\n  );\n}\n","import { vec3 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\n\nexport default function areViewportsCoplanar(\n  viewport1: Types.IStackViewport | Types.IVolumeViewport,\n  viewport2: Types.IStackViewport | Types.IVolumeViewport\n): boolean {\n  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n  const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n  return Math.abs(dotProducts) > 0.9;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `STACK_NEW_IMAGE`\n * rendering event and calls the `ImageSliceSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createImageSliceSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    STACK_NEW_IMAGE,\n    imageSliceSyncCallback,\n    {\n      auxiliaryEventNames: [VOLUME_NEW_IMAGE],\n    }\n  );\n\n  return stackImageSynchronizer;\n}\n","import createCameraPositionSynchronizer from './synchronizers/createCameraPositionSynchronizer';\nimport createVOISynchronizer from './synchronizers/createVOISynchronizer';\nimport createZoomPanSynchronizer from './synchronizers/createZoomPanSynchronizer';\nimport createImageSliceSynchronizer from './synchronizers/createImageSliceSynchronizer';\n\n// for backward compatibility\nconst createStackImageSynchronizer = createImageSliceSynchronizer;\n\nexport {\n  createCameraPositionSynchronizer,\n  createVOISynchronizer,\n  createZoomPanSynchronizer,\n  createImageSliceSynchronizer,\n  createStackImageSynchronizer,\n};\n","import { vec3, vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  cache,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\n\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRedactionRect as drawRedactionRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { EventTypes, SVGDrawingHelper } from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { VideoRedactionAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nclass VideoRedactionTool extends AnnotationTool {\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportUIDsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  _configuration: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(toolConfiguration = {}) {\n    super(toolConfiguration, {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: { shadow: true, preventHandleOutsideImage: false },\n    });\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): VideoRedactionAnnotation => {\n    const eventData = evt.detail;\n    const { currentPoints, element } = eventData;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation = {\n      metadata: {\n        // We probably just want a different type of data here, hacking this\n        // together for now.\n        viewPlaneNormal: <Types.Point3>[0, 0, 1],\n        viewUp: <Types.Point3>[0, 1, 0],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        active: true,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    return annotation;\n  };\n\n  getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, <vec2>toolDataCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  };\n\n  isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]] as Types.Point2;\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n  };\n\n  toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { data } = annotation;\n\n    data.active = true;\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt,\n    annotation,\n    handle,\n    interactionType = 'mouse'\n  ) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { data } = annotation;\n\n    data.active = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if (handle.worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  _mouseUpCallback = (evt) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  _mouseDragCallback = (evt) => {\n    this.isDrawing = true;\n\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventData;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      data.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventData;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      data.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  cancel(element) {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportUIDsToRender } = this.editData;\n\n    const { data } = annotation;\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    this.editData = null;\n    return annotation.metadata.annotationUID;\n  }\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n      const toolMetadata = annotation.metadata;\n\n      const data = annotation.data;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        // !isToolDataLocked(toolData) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRedactionRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color: 'black',\n          lineDash,\n          lineWidth,\n        }\n      );\n    }\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n    let imageVolume, viewport;\n    if (targetUID.startsWith('stackTarget')) {\n      const coloneIndex = targetUID.indexOf(':');\n      const viewportUID = targetUID.substring(coloneIndex + 1);\n      const viewport = renderingEngine.getViewport(viewportUID);\n      imageVolume = viewport.getImageData();\n    } else {\n      imageVolume = cache.getVolume(targetUID);\n    }\n\n    return { imageVolume, viewport };\n  }\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param {object} data - The toolData tool-specific data.\n   * @param {Array<number>} viewPlaneNormal The normal vector of the camera.\n   * @param {Array<number>} viewUp The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetUIDs = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetUIDs.length; i++) {\n      const targetUID = targetUIDs[i];\n\n      const { imageVolume } = this._getImageVolumeFromTargetUID(\n        targetUID,\n        renderingEngine\n      );\n\n      const {\n        dimensions,\n        scalarData,\n        vtkImageData: imageData,\n        metadata,\n      } = imageVolume;\n      const worldPos1Index = vec3.fromValues(0, 0, 0);\n      const worldPos2Index = vec3.fromValues(0, 0, 0);\n\n      imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n\n        const area = worldWidth * worldHeight;\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        // This is a triple loop, but one of these 3 values will be constant\n        // In the planar view.\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              count++;\n              mean += value;\n            }\n          }\n        }\n\n        mean /= count;\n\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              const valueMinusMean = value - mean;\n\n              stdDev += valueMinusMean * valueMinusMean;\n            }\n          }\n        }\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          stdDev,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    data.invalidated = false;\n\n    // Dispatching measurement modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail = {\n      annotation,\n      viewportUID,\n      renderingEngineUID,\n      sceneUID: sceneUID,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  _getTargetStackUID(viewport) {\n    return `stackTarget:${viewport.uid}`;\n  }\n\n  _getTargetVolumeUID = (scene) => {\n    if (this.configuration.volumeUID) {\n      return this.configuration.volumeUID;\n    }\n\n    const volumeActors = scene.getVolumeActors();\n\n    if (!volumeActors && !volumeActors.length) {\n      // No stack to scroll through\n      return;\n    }\n\n    return volumeActors[0].uid;\n  };\n}\n\nVideoRedactionTool.toolName = 'VideoRedaction';\nexport default VideoRedactionTool;\n"],"names":["MouseBindings","KeyboardBindings","ToolModes","AnnotationStyleStates","Events","SegmentationRepresentations","Swipe","StrategyCallbacks","globalLockedAnnotationsSet","Set","setAnnotationLocked","annotation","locked","detail","makeEventDetail","lockedAnnotationsSet","has","add","added","push","lock","unlock","publish","unlockAllAnnotations","forEach","clearLockedAnnotationsSet","getAnnotationsLocked","Array","from","isAnnotationLocked","getAnnotationsLockedCount","size","checkAndDefineIsLockedProperty","isLocked","descriptor","Object","getOwnPropertyDescriptor","configurable","set","setIsLocked","get","getIsLocked","isExtensible","shouldDefineIsLockedProperty","defineProperty","enumerable","freeze","removed","delete","length","item","triggerEvent","eventTarget","ANNOTATION_LOCK_CHANGE","this","selectedAnnotationUIDs","setAnnotationSelected","annotationUID","selected","preserveSelected","clearSelectionSet","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","toolName","filter","getAnnotation","metadata","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","value","ANNOTATION_SELECTION_CHANGE","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","checkAndDefineIsVisibleProperty","isVisible","setIsVisible","getIsVisible","shouldDefineIsVisibleProperty","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","FrameOfReferenceSpecificAnnotationManager","constructor","uid","getGroupKey","annotationGroupSelector","element","enabledElement","getEnabledElement","Error","FrameOfReferenceUID","_imageVolumeModifiedHandler","evt","eventDetail","frameOfReferenceSpecificAnnotations","annotations","keys","undefined","invalidated","getFramesOfReference","getAnnotations","groupKey","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","saveAnnotations","cloneDeep","restoreAnnotations","state","getNumberOfAllAnnotations","count","removeAllAnnotations","utilities","addEventListener","Enums","IMAGE_VOLUME_MODIFIED","defaultFrameOfReferenceSpecificAnnotationManager","svgNodeCache","defaultState","isInteractingWithTool","isMultiPartToolActive","tools","toolGroups","synchronizers","enabledElements","handleRadius","resetCornerstoneToolsState","_cloneDeep","addTool","ToolClass","toolAlreadyAdded","name","toolClass","removeTool","getMouseEventPoints","elementToUse","currentTarget","viewport","clientPoint","clientX","clientY","_clientToPoint","pagePoint","pageX","pageY","_pageToPoint","canvasPoint","rect","getBoundingClientRect","left","window","pageXOffset","top","pageYOffset","_pagePointsToCanvasPoints","page","client","canvas","world","canvasToWorld","viewportId","renderingEngineId","startPoints","event","eventName","MOUSE_DOUBLE_CLICK","camera","lastPoints","currentPoints","deltaPoints","stopImmediatePropagation","preventDefault","MOUSE_MOVE","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_CLICK","MOUSE_UP","MOUSE_DRAG","DOUBLE_CLICK_DRAG_TOLERANCE","mouseButton","isClickEvent","clickDelay","preventClickTimeout","doubleClickState","doubleClickTimeout","mouseDownEvent","mouseUpEvent","ignoreDoubleClick","_onMouseDrag","_updateMouseEventsLastPoints","_getDeltaPoints","_isDragPastDoubleClickTolerance","_doStateMouseDownAndUp","_copyPoints","_onMouseUp","clearTimeout","_cleanUp","_onMouseMove","document","removeEventListener","mouseMoveListener","delta","Math","abs","_preventClickHandler","_clearDoubleClickTimeoutAndEvents","_doMouseDown","JSON","parse","stringify","points","_subtractPoints2D","point0","point1","mouseDoubleClickIgnoreListener","buttons","setTimeout","disable","mouseDoubleClickListener","mouseDownListener","capture","enable","pointerType","mouse","touch","lastInteractionType","lastInteractionTime","handleTap","type","e","now","Date","stopPropagation","handleTapMouse","bind","handleTapTouch","attachEvents","eventList","interactionType","tapHandler","passive","removeEvents","mouseEvents","touchEvents","getTouchEventPoints","touches","changedTouches","map","i","identifier","radiusX","radiusY","force","rotationAngle","getDeltaPoints","curr","getMeanPoints","last","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","currentDistance","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","reduce","prev","getMeanTouchPoints","pairedDistance","j","sqrt","pow","Settings","getRuntimeSettings","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_PRESS","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_SWIPE","zeroIPoint","zeroIDistance","startPointsList","lastPointsList","isTouchStart","startTime","pressTimeout","pressDelay","pressMaxDistance","accumulatedDistance","swipeDistanceThreshold","swiped","swipeToleranceMs","defaultTapState","taps","tapTimeout","tapMaxDistance","tapToleranceMs","tapState","triggerEventCallback","ele","_onTouchDrag","currentPointsList","_updateTouchEventsLastPoints","deltaDistance","totalDistance","currentTime","getTime","x","y","swipe","RIGHT","LEFT","DOWN","UP","_checkTouchSwipe","_onTouchEnd","distanceFromStart","_checkTouchTap","lp","_onTouchPress","_onTouchStart","preventGhostClick","touchStartListener","PIXEL_STEP","LINE_HEIGHT","PAGE_HEIGHT","deltaY","spinX","spinY","pixelX","pixelY","wheelDelta","wheelDeltaY","wheelDeltaX","deltaX","deltaMode","normalizeWheel","direction","MOUSE_WHEEL","wheel","wheelListener","key","keyCode","keyListener","KEY_DOWN","_onKeyUp","_onVisibilityChange","visibilityState","resetModifierKey","KEY_UP","keyDownListener","getModifierKey","defaultContourConfig","renderOutline","outlineWidthActive","outlineWidthInactive","outlineOpacity","outlineOpacityInactive","renderFill","fillAlpha","fillAlphaInactive","defaultLabelmapConfig","renderFillInactive","getDefaultLabelmapConfig","getDefaultContourConfig","initialDefaultState","colorLUT","segmentations","globalConfig","renderInactiveSegmentations","representations","Labelmap","Contour","defaultSegmentationStateManager","csUtils","getState","getToolGroups","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","getSegmentation","segmentationId","find","segmentation","addSegmentation","getSegmentationRepresentations","toolGroupId","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","getAllSegmentationRepresentations","toolGroupSegReps","entries","addSegmentationRepresentation","segmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","segmentationRepresentationUID","representation","removeSegmentation","removeSegmentationRepresentation","toolGroupSegmentationRepresentations","segData","console","warn","removedSegmentationRepresentation","setActiveSegmentationRepresentation","toolGroupSegmentations","segmentationData","active","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentIndex","segmentSpecificConfig","setSegmentSpecificConfig","setSegmentationRepresentationConfig","addColorLUT","structuredClone","removeColorLUT","colorLUTIndex","recentlyAddedOrRemovedSegmentationRepresentation","triggerSegmentationRemoved","SEGMENTATION_REMOVED","triggerSegmentationRepresentationRemoved","SEGMENTATION_REPRESENTATION_REMOVED","triggerSegmentationRepresentationModified","SEGMENTATION_REPRESENTATION_MODIFIED","triggerSegmentationModified","segmentationIds","getSegmentations","SEGMENTATION_MODIFIED","triggerSegmentationDataModified","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","segmentationInput","cachedStats","segmentLabels","label","segmentsLocked","activeSegmentIndex","representationData","data","getDefaultSegmentationStateManager","suppressEvents","segmentationStateManager","normalizeSegmentationInput","getToolGroupIdsWithSegmentation","toolGroupIds","foundToolGroupIds","setToolGroupSpecificConfig","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","isVolumeSegmentation","operationData","volumeId","async","labelMapData","renderingEngine","id","volumeInputs","actorUID","visibility","blendMode","MAXIMUM_INTENSITY_BLEND","addVolumesToViewports","stackInputs","imageId","imageIdReferenceMap","getCurrentImageId","addImageSlicesToViewports","removeFromCache","StackViewport","removeVolumeActors","MAX_NUMBER_COLORS","labelMapConfigCache","Map","getRepresentationRenderingConfig","cfun","vtkColorTransferFunction","ofun","vtkPiecewiseFunction","addPoint","_getLabelmapConfig","toolGroupLabelmapConfig","segmentationRepresentationLabelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","outlineWidth","_needsTransferFunctionUpdate","segmentColor","segmentsHidden","cacheUID","oldConfig","slice","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","_addLabelmapToViewport","labelmapData","addLabelmapToElement","render","toolGroupConfig","renderingConfig","SegmentationState","Representations","actorEntry","getActor","labelmapUID","cache","getVolume","referencedVolumeId","defaultActor","getDefaultActor","defaultActorUID","volume","referencedVolume","isSameFrameOfReference","numColors","min","segmentSpecificLabelmapConfig","addRGBPoint","segmentOpacity","removePoint","addPointLong","actor","getProperty","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","renderImmediate","toolGroup","getToolGroup","viewportsInfo","viewportInfo","getEnabledElementByIds","removeLabelmapFromElement","_removeLabelmapFromToolGroupViewports","getViewportsInfo","contourRepresentation","segmentId","CONTOUR","configCachePerSegmentationRepresentationUID","getConfigCache","setConfigCache","addContourSetsToElement","geometryIds","contourRepresentationConfig","contourActorUID","appendPolyData","vtkAppendPolyData","scalarToColorMap","segmentSpecificMap","geometryId","geometry","getGeometry","getSegmentIndex","validateGeometry","contourSet","polyData","pointArray","vtkPoints","lines","vtkCellArray","pointIndex","getContours","contour","pointList","getPoints","flatPoints","getFlatPointsArray","getType","pointIndexes","_","pointListIndex","CLOSED_PLANAR","linePoints","Float32Array","insertNextCell","setData","polygon","vtkPolyData","setPoints","setLines","getPolyData","color","getColor","getNumberOfPoints","scalars","vtkDataArray","numberOfComponents","dataType","setTuple","getPointData","setScalars","setInputData","addInputData","polyDataOutput","getOutputData","mapper","vtkMapper","vtkActor","setMapper","setLineWidth","assign","setForceOpaque","addActor","resetCamera","updateContourSets","newContourConfig","cachedConfig","contourSetsActor","newOutlineWithActive","getMapper","lut","getLookupTable","segmentsToSetToInvisible","segmentsToSetToVisible","mergedInvisibleSegments","includes","concat","contourSets","segmentSpecificConfigs","acc","affectedSegments","hasCustomSegmentSpecificConfig","values","some","polyDataModified","getInputData","appendScalarsData","getScalars","getData","offset","getTotalNumberOfPoints","segmentConfig","modified","setLookupTable","actorUIDsToRemove","getActors","Boolean","removeActors","representationConfig","contourData","addOrUpdateContourSets","removeContourFromElement","_removeContourFromToolGroupViewports","deleteConfigCache","segmentationRepresentationUIDs","immediate","toolGroupSegRepresentations","toolGroupSegRepresentationUIDs","segRepresentationUIDsToRemove","invalidSegRepresentationUIDs","segRepresentationUID","segmentationDataUID","labelmapDisplay","contourDisplay","_removeSegmentation","segmentationInputArray","validateLabelmap","validateSegmentationInput","segInput","addSegmentationToState","segmentationConfig","getGlobalRepresentationConfig","representationType","setGlobalRepresentationConfig","segmentationRepresentationConfig","getRepresentationSpecificConfig","representationInput","getLabelmapRenderingConfig","representationInputArray","toolGroupSpecificRepresentationConfig","promises","toolGroupSpecificConfig","options","colorLUTOrIndexInput","colorLUTOrIndex","colorLUTIndexToUse","nextIndex","isArray","CORNERSTONE_COLOR_LUT","toolGroupSpecificRepresentation","currentToolGroupConfig","SegmentationConfig","mergedConfig","addSegmentationRepresentationToState","Promise","all","getActiveSegmentationRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegments","unshift","setColorLUT","segRepresentation","getColorForSegmentIndex","colorValue","setColorForSegmentIndex","colorReference","setSegmentationVisibility","indices","findUniqueElements","array","keySets","LABELMAP","getScalarData","segImageId","image","getImage","getPixelData","k","parseInt","getSegmentationIndices","clear","getSegmentationVisibility","setSegmentsVisibility","segmentIndices","setSegmentVisibility","setActiveSegmentIndex","getActiveSegmentIndex","BaseTool","toolProps","defaultToolProps","initialProps","configuration","supportedInteractionTypes","strategies","defaultStrategy","activeStrategy","strategyOptions","mode","Disabled","getToolName","applyActiveStrategy","call","applyActiveStrategyCallback","callbackType","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","actorEntries","getClassName","getTargetIdImage","targetId","startsWith","split","imageURI","viewports","getImageData","getTargetId","BaseVolumeViewport","VideoViewport","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","domRef","appendNode","svgLayerElement","svgNode","touched","appendChild","setNodeTouched","clearUntouched","cacheEntry","removeChild","viewportElement","internalDivElement","querySelector","_getSvgLayer","svgNodeCacheForCanvas","fn","svgDrawingHelper","getSvgDrawingHelper","drawingElementType","nodeUID","attributes","currentValue","getAttribute","newValue","removeAttribute","setAttribute","circleUID","center","radius","dataId","fill","width","lineWidth","lineDash","fillOpacity","strokeOpacity","strokeWidth","svgNodeHash","_getHash","existingCircleElement","cx","cy","r","stroke","setAttributesIfNecessary","newCircleElement","createElementNS","setNewAttributesIfValid","ellipseUID","canvasCoordinates","existingEllipse","bottom","right","w","hypot","h","angle","atan2","PI","rx","ry","transform","svgEllipseElement","corner1","corner2","drawEllipseByCoordinates","handleGroupUID","handle","uniqueIndex","opacity","side","parseFloat","height","existingHandleElement","newHandleElement","handlePoints","drawHandle","drawLine","lineUID","start","end","isNaN","shadow","existingLine","dropShadowStyle","x1","y1","x2","y2","style","newLine","drawPolyline","polylineUID","fillColor","connectLastToFirst","existingPolyLine","pointsAttribute","point","firstPoint","newPolyLine","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","children","textSpan","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","findClosestPoint","sourcePoints","targetPoint","minPoint","minDistance","Number","MAX_SAFE_INTEGER","sourcePoint","distance","p1","p2","_distanceBetween","linkUID","annotationAnchorPoints","refPoint","boundingBox","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","textBoxUID","textBoxPosition","textBox","mergedOptions","centering","canvasBoundingBox","drawTextBox","drawLink","drawRect","rectangleUID","_width","existingRect","tlhc","svgRectElement","drawArrow","arrowUID","firstLine","cos","sin","secondLine","drawRedactionRect","_setAttributesIfNecessary","_setNewAttributesIfValid","getToolsWithModesForElement","modesFilter","ToolGroupManager","enabledTools","toolGroupToolNames","toolOptions","toolInstance","getToolInstance","Active","Passive","Enabled","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","elementsEnabled","indexOf","_render","requestAnimationFrame","getRenderingEngine","drawSvg","anyRendered","tool","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","EPSILON","CONSTANTS","PARALLEL_THRESHOLD","filterAnnotationsWithinSlice","spacingInNormalDirection","viewPlaneNormal","annotationsWithParallelNormals","td","annotationViewPlaneNormal","referencedImageId","imageOrientationPatient","metaData","rowCosineVec","vec3","colCosineVec","isParallel","halfSpacingInNormalDirection","focalPoint","annotationsWithinSlice","handles","dir","dot","AnnotationFrameRange","imageIdToFrames","match","frameRangeExtractor","range","it","framesToString","String","framesToImageId","newRangeString","replace","setFrameRange","eventBase","ANNOTATION_MODIFIED","getFrameRange","baseUrlExtractor","filterAnnotationsForDisplay","colonIndex","substring","getFrameOfReferenceUID","testURI","hasImageURI","annotationFrameRange","frameNumber","getFrameNumber","VolumeViewport","getCamera","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","getStyleProperty","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","alternatives","list","getHierarchalPropertyStyles","highlighted","Highlighted","Selected","Locked","Default","AnnotationDisplayTool","onImageSpacingCalibrated","annotationManager","getAnnotationManager","frameOfReference","triggerAnnotationRender","filterInteractableAnnotationsForElement","getReferencedImageId","worldPos","viewUp","imageVolume","getStyle","AnnotationTool","super","mouseMoveCallback","filteredAnnotations","canvasCoords","annotationsNeedToBeRedrawn","activateHandleIndex","activeHandleIndex","near","_imagePointNearToolOrHandle","nearToolAndNotMarkedActive","notNearToolAndMarkedActive","getTextLines","statsCalculator","getHandleNearImagePoint","proximity","worldBoundingBox","topLeft","worldToCanvas","topRight","bottomLeft","bottomRight","annotationCanvasCoordinate","vec2","getLinkedTextBoxStyle","isSuvScaled","scaling","PT","scalingModule","suvbw","isPointNearTool","pointToString","decimals","toFixed","polyDataCache","updateSurfacePlanes","vtkPlanes","clippingFilter","imageIndex","getCurrentImageIdIndex","cacheId","actorCache","setClippingPlanes","update","error","surface","polys","getPolys","triangles","setPolys","VolumeViewport3D","vtkClipClosedSurface","clippingPlanes","activePlaneId","passPointData","setGenerateOutline","setGenerateFaces","filteredData","setColor","CLIPPING_PLANES_UPDATED","SurfaceData","Surface","SURFACE","surfaceUID","addSurfaceToElement","_renderSurface","removeSurfaceFromElement","_removeSurfaceFromToolGroupViewports","SegmentationDisplayTool","renderSegmentation","toolGroupViewports","segmentationRenderList","_getMergedRepresentationsConfig","viewportsRenderList","display","surfaceDisplay","renderedViewport","allSettled","then","onSetToolEnabled","onSetToolDisabled","segmentationRenderingEngine","_renderFlaggedToolGroups","removeToolGroup","renderToolGroupSegmentations","_setToolGroupSegmentationToBeRenderedNextFrame","getViewport","segmentationDisplayToolInstance","onSegmentationRender","IMAGE_RENDERED","getToolGroupForViewport","csToolsEvents","SEGMENTATION_RENDERED","triggerSegmentationRender","segmentationVolume","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","currentImageId","segImageData","currentSegmentationImageId","segmentationImage","_imageChangeEventListener","eventData","representationList","segmentationActor","derivedImageId","segmentationImageData","scalarArray","Uint8Array","vtkImageData","derivedImage","origin","dimensions","spacing","getImageDataMetadata","setOrigin","addImages","callback","imageActor","setDimensions","setSpacing","setDirection","STACK_NEW_IMAGE","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","_toolInstances","found","findAnnotationNearPointByTool","currentId","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","useRAF","TypeError","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","isObject","max","cancel","cancelTimer","flush","pending","debounce","clip","val","low","high","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","scale","getStackViewports","getImageIds","calibrateSpacing","CalibrationTypes","PIXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","getCalibratedLengthUnits","calibration","hasPixelSpacing","units","sequenceOfUltrasoundRegions","UNCALIBRATED","SQUARE","getCalibratedAreaUnits","getCalibratedScale","getCalibratedLengthUnitsAndScale","imageIndex1","imageIndex2","areaUnits","calibrationType","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitXDirection","physicalUnitYDirection","physicalDeltaX","physicalDeltaY","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","aspect","viewportIdsToRender","scroll","viewportType","scrollSlabs","debounceLoading","loop","useSlabThickness","numScrollSteps","currentStepIndex","sliceRangeInfo","sliceRange","newFocalPoint","newPosition","setCamera","desiredStepIndex","VolumeScrollEventDetail","EVENTS","VOLUME_SCROLL_OUT_OF_BOUNDS","scrollVolume","currentImageIndex","numberOfSlices","getTargetImageIdIndex","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","pointInShapeCallback","pointInShapeFn","boundsIJK","iMin","iMax","jMin","jMax","kMin","kMax","scalarData","getDirection","rowCosines","columnCosines","scanAxisNormal","getSpacing","rowSpacing","columnSpacing","scanAxisSpacing","worldPosStart","indexToWorld","rowStep","columnStep","scanAxisStep","xMultiple","yMultiple","zMultiple","pointsInShape","currentPos","startPosJ","startPosI","pointIJK","pointLPS","pointInSphere","sphere","radius2","numSlicesToProject","sliceNormalIndex","xMin","Infinity","xMax","yMin","yMax","zMin","zMax","p","floor","depth","transformWorldToIndex","pointInSurroundingSphereCallback","circlePoints","centerWorld","radiusWorld","centerIJK","spacings","minSpacing","maxRadiusIJK","ceil","viewRight","topLeftWorld","bottomRightWorld","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","sphereObj","roundNumber","precision","v","join","fixedPrecision","pointInEllipse","ellipse","inverts","precalculated","precalculatePointInEllipse","xRadius","yRadius","zRadius","invXRadiusSq","invYRadiusSq","invZRadiusSq","centerL","centerP","centerS","dx","inside","dy","dz","getCanvasEllipseCorners","ellipseCanvasPoints","Initialize","strategySpecificConfiguration","centerSegmentIndex","OnInteractionStart","previewSegmentIndex","segmentationVoxelManager","imageVoxelManager","preview","useCenterSegmentIndex","hasSegmentIndex","hasPreviewIndex","isInObject","existingValue","getAtIJKPoint","THRESHOLD","isDynamic","threshold","oldThreshold","dynamicRadius","useDelta","nestedBounds","ijk","idx","defaultEquals","a","b","lpad","string","character","getter","seed","onFlood","onBoundary","equals","diagonals","startNode","permutations","perms","permutation","c","toString","permute","perm","countNonZeroes","prunedPermutations","stack","flooded","visits","bounds","currentArgs","flood","pop","boundaries","job","getArgs","prevArgs","previousArgs","markAsVisited","node","safely","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","f","OnInteractionEnd","previewVoxelManager","clickedPoints","getBoundsIJK","bound","floodedSet","toIndex","oldVal","getAtIndex","isIn","floodedCount","setAtIJK","clickedPoint","floodFill","clearedCount","previewCount","trackValue","setAtIJKPoint","islandMap","isInternal","internalSet","onFloodInternal","floodIndex","toIJK","setAtIndex","getArrayOfSlices","Preview","previewColors","onInteractionStart","isPreviewFromHover","onInteractionEnd","sourceVoxelManager","configColor","AcceptPreview","tracking","modifiedSlices","RejectPreview","Fill","brushStrategy","isWithinThreshold","createIsInThreshold","setValue","determineSegmentIndex","dynamicThreshold","erase","islandRemoval","regionFill","INTERNAL_setValue","oldValue","useSegmentIndex","CreateIsInThreshold","THRESHOLD_INSIDE_CIRCLE","voxelValue","VoxelManager","getStrategyData","segmentationScalarData","imageScalarData","columns","rows","createVolumeVoxelManager","BrushStrategy","initializers","_initialize","_fill","_onInteractionStart","initializedData","initialize","configurationName","compositions","initializer","childFunctions","strategyFunction","createHistoryVoxelManager","addListMethod","createInitialized","listName","addSingletonMethod","isInitialized","COMPOSITIONS","_class","nearOrZero","testValue","nearValue","initializeCircle","topLeftCanvas","bottomRightCanvas","ellipsoidCornersIJK","createPointInEllipse","worldInfo","CIRCLE_STRATEGY","CIRCLE_THRESHOLD_STRATEGY","fillInsideCircle","thresholdInsideCircle","sphereComposition","diameters","createEllipseInPoint","SPHERE_STRATEGY","fillInsideSphere","thresholdInsideSphere","eraseInsideSphere","eraseInsideCircle","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","MouseCursor","fallback","getName","addFallbackStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","setDefinedCursor","cursor","context","symbol","standardCursorNames","ImageMouseCursor","url","getUniqueInstanceName","prefix","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","create","registerCursor","svgCursorNames","STATE","MODE","SVGMouseCursor","pointer","urn","getCursorURN","getDefinedSVGCursorDescriptor","URL","createObjectURL","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","svgSize","cursorName","log","setElementCursor","CursorNames","ELEMENT_CURSORS_MAP","initElementCursor","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","WeakMap","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE","brushSize","enabled","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","centerRadius","actions","method","bindings","_previewData","timerStart","timer","startPoint","NaN","isDrag","onSetToolPassive","disableCursor","preMouseDownCallback","_editData","createEditData","_activateDraw","triggerAnnotationRenderForViewportUIDs","_hoverData","getOperationData","updateCursor","rejectPreview","previewCallback","_dragCallback","_endCallback","_deactivateDraw","acceptPreview","activeSegmentationRepresentation","activeSegmentation","segmentLocking","segmentationState","createHoverData","centerCanvas","segmentIndexController","brushCursor","_calculateCursor","editData","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","invalidateBrushCursor","toolMetadata","brushCursorUID","drawCircleSvg","getBrushToolInstances","toolInstances","equalsCheck","getVoxelOverlap","voxelSpacing","voxelCenter","voxelCornersWorld","voxelCornersIJK","processVolumes","thresholdVolumeInformation","segmentationSpacing","volumeInfoList","baseVolumeIdx","volumeSize","referenceValues","lower","upper","overwrite","overlapType","overlaps","testOverlapRange","volumeInfo","overlapBounds","overlapTest","callbackOverlap","testRange","computeOffsetIndex","insert","AnnotationGroup","annotationUIDs","_isVisible","visibleFilter","unboundVisibleFilter","setVisible","baseEvent","findNearby","uids","remove","PanTool","touchDragCallback","mouseDragCallback","deltaPointsWorld","updatedPosition","updatedFocalPoint","TrackballRotateTool","rotateIncrementDegrees","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","mat4","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","vtkMath","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","getProperties","voiRange","Modality","preScale","scaled","scalingParameters","getPTScaledNewRange","deltaPointsCanvas","getNewRange","setProperties","vp","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","windowWidth","windowCenter","imageDynamicRange","calculatedDynamicRange","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","round","getRange","voxel","StackScrollTool","invert","debounceIfNotLoaded","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","getNumberOfSlices","offsetHeight","angleBetweenLines","line1","line2","p3","p4","v1","v2","angleBetween3DLines","angleBetween2DLines","PlanarRotateTool","currentPointWorld","startPointWorld","cross","rotAngle","rotMat","rotatedViewUp","rotation","StackScrollMouseWheelTool","mouseWheelCallback","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","t","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","parallelProjection","_panCallback","DIRECTIONS","VolumeRotateMouseWheelTool","cz","ax","ay","az","getWorldWidthAndHeightFromCorners","pos1","pos2","diagonal","diagonalLength","worldWidth","worldHeight","cosTheta","getPointInLineOfSightWithCriteria","targetVolumeId","criteriaFunction","stepSize","cameraPosition","step","getBounds","vector","pickedPoint","pointT","_inBounds","pointToPick","getIntensityFromWorld","jumpToWorld","jumpWorld","normal","dotProd","projectedDelta","_applyShift","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","maxFn","intensity","getViewports","foundToolGroup","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","filterViewportsWithToolEnabled","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","EPS","vpCamera","getViewportIdsWithToolToRender","requireParallelNormals","filterViewportsWithParallelNormals","INSIDE","OUTSIDE","clipT","num","denom","tE","tL","box","da","db","distanceToPointSquared","aabb","aabbWidth","maxX","minX","aabbHeight","maxY","minY","aabbSize","aabbCenter","translatedPoint","dist","distanceToPoint","BasicStatsCalculator","Calculator","singleArrayAsNumber","z1","z2","mirror","mirrorPoint","staticPoint","getIntersectionCoordinatesWithPolyline","q1","closed","polylineIndexes","initialI","intersections","doesIntersect","getAllIntersectionsWithPolyline","intersection","getIntersection","getFirstIntersectionWithPolyline","getClosestIntersectionWithPolyline","q2","distances","intersectionPoints","midpoint","segment","orient","orientation","onSegment","q","orientationValue","denominator","numerator1","numerator2","sum","sumSquares","squaredDiffSum","statsCallback","newArray","getStatistics","mean","stdDev","stdDevWithSumSquare","currentMax","unit","getSubPixelSpacingAndXYDirections","subPixelResolution","xDir","yDir","volumeSpacing","iVector","jVector","kVector","absViewRightDotI","absViewRightDotJ","absViewRightDotK","xSpacing","absViewUpDotI","absViewUpDotJ","absViewUpDotK","ySpacing","pointsAreWithinCloseContourProximity","closeContourProximity","addCanvasPointsToArray","canvasPoints","newCanvasPoint","commonData","lastWorldPos","newWorldPos","worldPosDiff","xDist","yDist","numPointsToAdd","lastCanvasPoint","canvasDist","canvasDir","distPerPoint","pointCanProjectOnLine","p1p","p1p2","p1p2Mag","projectionVectorMag","p1p2UnitVector","projectionVector","projectionPoint","calculateAreaOfPoints","n","area","lineSegments","rectToLineSegments","lineStart","lineEnd","lineSegment","distanceToPointSquaredInfo","closestPoint","distanceSquared","math","dotProduct","intersectLine","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","r3","r4","a2","b2","c2","r1","r2","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","autoPan","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","mobile","toolCenter","initializeViewport","_getAnnotations","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","_getViewportsInfo","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","triggerAnnotationRenderForViewportIds","addNewAnnotation","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_activateModify","handleSelectedCallback","_pointNearTool","toolSelectedCallback","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","getViewportIds","_autoPanViewportIfNecessary","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","_areViewportIdArraysEqual","renderStatus","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","vtkMatrixBuilder","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","drawLineSvg","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandlesSvg","viewportIds","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","actors","otherViewportActors","sameScene","viewportsAnnotationsToUpdate","_applyDeltaShiftToSelectedViewportCameras","_deactivateModify","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolActive","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","VOLUME_VIEWPORT_NEW_VOLUME","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","slabThickness","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_getReferencedImageId","_createMagnificationViewport","viewportProperties","canvasPos","magnifyToolElement","magnifyElement","createElement","classList","viewportInput","STACK","enableElement","magnifyViewport","setStack","_dragEndCallback","disableElement","getCanvasCircleRadius","circleCanvasPoints","getCanvasCircleCorners","isSegmentation","referenceId","AdvancedMagnifyViewport","magnifyViewportId","sourceEnabledElement","zoomFactor","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","_resizeViewport","_syncViewports","dispose","_removeEventListeners","parentNode","magnifyToolGroup","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParalellScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceViewport","sourceActors","magnifyToolGroupId","sourceToolGroup","clone","AdvancedMagnifyTool","addViewport","_cloneStack","imageIds","_cloneVolumes","volumeInputArray","setVolumes","_cloneViewport","sourceViewportOptions","defaultOptions","_cancelMouseEventCallback","target","closest","canvasCurrent","magnifyRadius","canvasCenter","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","_addEventListeners","cstEvents","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","AdvancedMagnifyViewportManager","createViewport","sourceElement","_addSourceElementEventListener","_magnifyViewportsMap","_annotationRemovedCallback","_destroyViewport","_newStackImageCallback","sourceViewportId","_getMagnifyViewportsMapEntriesBySourceViewportId","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","len","getInstance","_singleton","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","ANNOTATION_REMOVED","VOLUME_NEW_IMAGE","AdvancedMagnifyToolActions","magnifyingGlass","zoomFactorList","showZoomFactorsList","Secondary","modifierKey","Shift","worldHandlesPoints","_getWorldHandlesPoints","magnifyViewportManager","annotationPoints","canvasTop","canvasBottom","canvasLeft","radiusPoint","handleIndex","newAnnotation","isDrawing","eventType","ANNOTATION_COMPLETED","_dragDrawCallback","worldPosDelta","hasMoved","_dragModifyCallback","_dragHandle","newRadius","newWorldHandlesPoints","activeHandleCanvasCoords","canvasCenterPos","canvasRadius","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","which","toLowerCase","option","title","defaultSelected","Actions","ReferenceLines","showFullDimension","_init","getRenderingEngines","sourceViewportCanvasCornersInWorld","targetViewport","sourceViewPlaneNormal","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","targetImage","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","OverlayGridTool","sourceImageIds","imagePlaneModule","pointSets","calculateImageIdPointSets","viewportData","imagePositionPatient","rowPixelSpacing","columnPixelSpacing","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","getCacheId","actorWorldPointMap","polyLineIdx","worldPointsSet","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","colorToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","worldPosition","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","centerSpace","lineLength","plane","currentMousePosition","closestIndex","normalizedViewPlane","scaledPlaneNormal","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBoxSvg","scaleSizeDisplayValue","scaleSizeUnits","getTextBoxCoordsCanvas","annotationCanvasPoints","corners","handlesLeftToRight","sort","_compareX","handlesTopToBottom","_compareY","_determineCorners","BidirectionalTool","defaultGetTextLines","canvasPoint1","canvasPoint2","movingTextBox","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","_throttledCalculateCachedStats","_calculateCachedStats","dataId1","dataId2","canvasTextBoxCoords","drawLinkedTextBoxSvg","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos1","worldPos2","worldPos3","worldPos4","targetIds","dist1","_calculateLength","dist2","index1","index2","index3","index4","_isInsideVolume","vector1","vector2","throttle","LengthTool","cachedVolumeStats","getModalityUnit","generalSeriesModule","petSeriesModule","_handlePTModality","isViewportPreScaled","targetIdTokens","ProbeTool","eventDispatchDetail","referencedImageURI","currentImageURI","modalityUnitOptions","samplesPerPixel","baseIndex","modalityUnit","calibratedResults","hasEnhancedRegionValues","every","DragProbeTool","postMouseDownCallback","postTouchStartCallback","RectangleROITool","_getRectangleImageCoordinates","rectangle","bottomLeftCanvas","topRightCanvas","bottomLeftWorld","topRightWorld","areaUnit","drawRectSvg","worldPos1Index","worldPos2Index","stats","statsArray","getWorldWidthAndHeightFromTwoPoints","EllipticalROITool","centerPointRadius","initialRotation","getRotation","canvasCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","currentCanvasPoints","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","drawEllipseSvg","centerPoint","_getCanvasEllipseCenter","ellipseObj","isEmptyArea","fast","normalized","areaLine","CircleROITool","canvasEnd","radiusUnit","perimeter","radiusLine","Spline","props","_controlPoints","_invalidated","_length","_resolution","resolution","_closed","controlPoints","numControlPoints","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","insertIndex","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","squaredDist","getClosestControlPointWithinDistance","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","csA","csB","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","uValue","previousLineSegmentsLength","getClosestPointOnControlPointLines","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p0","_getCurveSegmentPoints","tt","ttt","tValues","vec4","qValues","p0Index","p2Index","p3Index","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","CardinalSpline","_scale","_fixedScale","fixedScale","s","s2","LinearSpline","CatmullRomSpline","TRANSFORM_MATRIX","BSpline","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","calculateStats","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","splineType","splineConfig","_getSplineConfig","instance","polyline","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","_mouseDownCallback","doubleClick","worldPoint","addNewPoint","triggerAnnotationModified","_updateSplineInstance","splinePolylineCanvas","splinePolylineWorld","drawPolylineSvg","controlPointsConnectors","_renderStats","addControlPointCallback","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","splineConfigs","_updateSplineScale","SplineTypes","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","segmentSize","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","interpolatedPoints","originalPoints","knotsIndexes","xInterpolator","d3InterpolateBasis","yInterpolator","zInterpolator","d3Zip","d3Quantize","interpolatePoints","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","shouldInterpolate","interpolation","interpolateOnAdd","interpolateOnEdit","followingIndex","circularFindNextIndexBy","listParams","otherListParams","criteria","indexDelimiter","otherIndexDelimiter","otherPoints","pointsLength","otherPointsLength","startIndex","otherStartIndex","findChangedSegment","previousPoints","firstMatchIndex","previousFirstMatchIndex","pointA","pointB","findMatchIndexes","toBeNotEqualCriteria","isEqualByProximity","lowDiffIndex","lowOtherDiffIndex","highIndex","getInterpolatedPoints","pointsOfReference","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","changedIniIndex","changedEndIndex","findOpenUShapedContourVectorToPeak","first","firstToLastUnitVector","normalVector1","normalVector2","centerOfFirstToLast","furthest","activateDraw","drawData","polylineIndex","mouseUpDrawCallback","mouseDragDrawCallback","deactivateDraw","lastWorldPoint","crossingIndex","findCrossingIndexDuringCreate","applyCreateOnCross","numPointsAdded","allowOpenContours","lastPoint","completeDrawOpenContour","completeDrawClosedContour","removeCrossedLinesOnCompleteDraw","haltDrawing","worldPoints","isOpenContour","triggerAnnotationCompleted","numPoints","endToStart","canvasPointsMinusEnds","indexToRemoveUpTo","isOpenUShapeContour","openUShapeContourVectorToPeak","pointsLessLastOne","shift","activateClosedContourEdit","cancelDrawing","minPoints","shouldHaltDrawing","checkForFirstCrossing","isClosedContour","editCanvasPoints","prevCanvasPoints","crossedLineSegment","startCrossingIndex","removePointsUpUntilFirstCrossing","checkCanvasEditFallbackProximity","firstEditCanvasPoint","distanceIndexPairs","prevCanvasPoint","twoClosestDistanceIndexPairs","lowestIndex","extendedPoint","crossedLineSegmentFromExtendedPoint","pointsToPrepend","editIndex","numPointsToRemove","checkForSecondCrossing","removePointsAfterSecondCrossing","lastLine","didCrossLine","findSnapIndex","lastEditCanvasPoint","editCanvasPointsLessLastOne","snapCanvasPosition","checkAndRemoveCrossesOnEditLine","editIndexCrossed","isEditingClosed","mouseUpClosedContourEditCallback","mouseDragClosedContourEditCallback","deactivateClosedContourEdit","currentEditIndex","snapIndex","fusedCanvasPoints","fuseEditPointsWithClosedContour","finishEditAndStartNewEdit","augmentedEditCanvasPoints","lowIndex","distanceBetweenLowAndFirstPoint","distanceBetweenLowAndLastPoint","distanceBetweenHighAndFirstPoint","distanceBetweenHighAndLastPoint","inPlaceDistance","reverseDistance","completeClosedContourEdit","cancelClosedContourEdit","activateOpenContourEdit","isEditingOpen","mouseUpOpenContourEditCallback","mouseDragOpenContourEditCallback","deactivateOpenContourEdit","fuseEditPointsWithOpenContour","finishEditOpenOnSecondCrossing","checkIfShouldOverwriteAnEnd","openContourEditOverwriteEnd","fuseEditPointsForOpenContourEndEdit","activateOpenContourEndEdit","lastCanvasPos","aDotb","magA","magB","newCanvasPoints","pointsToRender","completeOpenContourEdit","cancelOpenContourEdit","reverse","_getRenderingOptions","renderContour","findOpenUShapedContourVectorToPeakOnRender","calculateUShapeContourVectorToPeakIfNotPresent","renderOpenUShapedContour","renderOpenContour","renderClosedContour","alwaysRenderOpenContourHandles","handlePoint","firstCanvasPoint","openUShapeContourVectorToPeakCanvas","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","PlanarFreehandROITool","previousPoint","pStart","pEnd","activeAnnotationUID","worldPosIndex","iDelta","jDelta","kDelta","worldPosEnd","canvasPosEnd","curRow","intersectionCounter","drawLinkedTextBox","registerDrawLoop","registerEditLoopCommon","registerClosedContourEditLoop","registerOpenContourEditLoop","registerOpenContourEndEditLoop","registerRenderMethods","annotationsToDisplay","BucketQueue","numBits","getPriority","areEqual","_bucketCount","_mask","_size","_currentBucketIndex","_buckets","_buildArray","_getPriority","_areEqual","itemA","itemB","bucketIndex","_getBucketIndex","newHead","next","ret","firstBucketNode","prevNode","isEmpty","buckets","MAX_UINT32","TWO_THIRD_PI","LivewireScissors","grayscalePixelData","_getPointIndex","row","col","_getPointCoordinate","_getPointCost","searchGranularity","costs","numPixels","searchGranularityBits","laplace","gradXNew","gradYNew","_computeLaplace","gradMagnitude","_computeGradient","_computeGradientX","_computeGradientY","visited","parents","Uint32Array","startSearch","startPointIndex","priorityQueueNew","findPathToPoint","coord","targetPointIndex","cost","priorityQueue","neighborsPoints","_getNeighborPoints","neighborPoint","neighbordPointIndex","_getWeightedDistance","neighborCost","pathPoints","pathPointIndex","_getDeltaX","_getDeltaY","_getGradientMagnitude","_getLaplace","lap","gradient","pixelIndex","gradX","gradY","_getGradientUnitVector","px","py","pointGradX","pointGradY","gradVecLen","_getGradientDirection","qx","qy","dgpUnitVec","gdqUnitVec","dp","dq","SQRT1_2","aX","aY","bX","bY","bIndex","sx","sy","ex","ey","createInstanceFromRawPixelData","pixelData","minPixelValue","maxPixelValue","pixelRange","createInstanceFromRGBAPixelData","rgbaPixelData","red","green","blue","LivewirePath","inputPointArray","inputControlPointIndexArray","_controlPointIndexes","getPoint","getLastPoint","isControlPoint","getNumControlPoints","removeLastControlPoint","addPoints","newPointArray","prependPath","other","otherSize","shiftedIndexArray","LivewireContourTool","viewportImageData","worldToSlice","sliceToWorld","ijkPoint","sliceImageData","sliceToIndexMatrix","indexToSliceMatrix","slicePoint","startPos","scissors","confirmedPath","currentPath","proximitySquared","closePath","closestHandlePoint","distSquared","worldControlPoint","_updateAnnotation","imgWidth","imgHeight","livewirePath","imagePoints","worldPolylinePoints","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","touchTapCallback","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","drawArrowSvg","updatedText","doneChangingTextCallback","prompt","AngleTool","angleStartedNotYetCompleted","canvasPoint3","fromCharCode","midPoint","arg","midPoint2","CobbAngleTool","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseUpCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","mid1","mid2","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandleSvg","canvasDeltaY","canvasDeltaX","projectedPointCanvas","values1","units1","values2","units2","KeyImageTool","canvasPosition","fillRectangle","strategyData","rectangleCornersIJK","pointInRectangle","fillInsideRectangle","eraseRectangle","eraseInsideRectangle","RectangleScissorsTool","FILL_INSIDE","ERASE_INSIDE","CircleScissorsTool","SphereScissorsTool","RectangleROIThresholdTool","RectangleROIStartEndThresholdTool","numSlicesToPropagate","spacingInNormal","_getEndSliceIndex","startSlice","endSlice","projectionPoints","projectionPointsImageIds","_computeProjectionPoints","sliceIndex","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","startWorld","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","RectanglePoints","endPos","imageIdIndex","isEqual","PaintFillTool","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","scalarDataPosition","getFramesModified","minJ","maxJ","framesModified","seedIndex3D","getScalarDataPosition","z","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","ANNOTATED_CUBE","AXES","CUSTOM","OrientationMarkerTool","orientationWidget","viewportCorner","vtkOrientationMarkerWidget","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","OVERLAY_MARKER_TYPES","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","polyDataURL","configuration_invalidated","initViewports","cleanUpData","orientationMarkers","orientationMarker","setEnabled","offscreenMultiRenderWindow","getRenderWindow","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","vtkAxesActor","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","response","fetch","arrayBuffer","vtpReader","vtkXMLPolyDataReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setColorModeToDirectScalars","rotateZ","vtkAnnotatedCubeActor","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","CUBE","AXIS","VTPFILE","referenceVolume","AllBoundsIJK","pointsToUse","extend2DBoundingBoxInViewAxis","accumulator","validToolNames","_validateAnnotations","getBoundsIJKFromRectangleAnnotations","thresholdVolumeByRange","labelmaps","labelmap","outputData","arrayType","volumeLoader","isValidRepresentationConfig","SegmentationRepresentation","isValidLabelmapConfig","getDefaultRepresentationConfig","createLabelmapVolumeForViewport","input","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","brushToolInstance","setBrushThresholdForToolGroup","otherArgs","brushBasedToolInstances","getBrushThresholdForToolGroup","segmentationIndex","_handleSameSizeVolume","_handleDifferentSizeVolume","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","addToolState","getToolState","ViewportStatus","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","_getVolumeFromViewport","playClipContext","waitForRendered","frameTimeVectorEnabled","waitForRenderedCount","viewportStatus","RENDERED","_createStackViewportCinePlayContext","isDynamicVolume","numTimePoints","timePointIndex","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","glMatrix","_createVolumeViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","timeouts","isTimeVarying","sample","delay","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CINE_EVENTS","CLIP_STOPPED","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","stopDynamicCine","cineToolData","clearInterval","_stopClipWithData","dynamicCineElement","volumes","_getVolumesFromViewport","interpolateAnnotation","shouldPreventInterpolation","interpolatedCanvasPoints","requestType","Prefetch","priority","lowEnd","highEnd","arr","getStackData","currentImageIdIndex","getPromiseRemovedHandler","stackData","stackPrefetchData","indicesToRequest","clearFromImageIds","imageIdSet","requestDetails","additionalDetails","resetPrefetchTimeout","maxImagesToPrefetch","preserveExistingPool","resetPrefetchDelay","prefetch","stackPrefetch","removeFromList","getImageLoadObject","isLoaded","imageLoadPoolManager","clearRequestStack","nearest","nearestIndex","nextImageIdIndex","lowerIndex","higherIndex","imageIdsToPrefetch","currentIndex","shouldLoadLower","shouldLoadHigher","requestFn","imageLoader","useNorm16Texture","getCoreConfiguration","rendering","targetBuffer","addRequest","onImageUpdated","indexOfCurrentImage","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","getConfiguration","minBefore","maxAfter","directionExtraImages","indicesToRequestCopy","filterRequests","getCachedImageBasedOnImageURI","decodeTimeInMS","loadTimeInMS","sizeInBytes","usage","getMaxCacheSize","cacheFill","fillTime","fillSize","initialTime","initialSize","updateToolState","doneCallback","stackCount","totalBytes","positionFraction","minIndex","maxIndex","dynamicVolume","frames","frameNumbers","maskVolumeId","imageCoordinate","dataInTime","ijkCoords","maskImageData","segScalarData","nonZeroVoxelIndices","actualLen","dynamicVolumeScalarDataArray","getScalarDataArrays","isSameVolume","indexValues","activeScalarData","segPointLPS","segValue","segPointIJK","overlapIJKMinMax","perFrameSum","averageCallback","averageValues","_getTimePointDataMask","coordinate","worldToIndex","allScalarData","scalarIndex","_getTimePointDataCoordinate","operation","numFrames","typedArrays","arrayLength","finalArray","SUM","currentArray","SUBTRACT","AVERAGE","getPolyDataPointIndexes","linesData","getLines","contours","findStartingPoint","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","contourIndexes","ColorbarRangeTextPosition","isRangeValid","isColorbarSizeValid","areColorbarRangesEqual","areColorbarSizesEqual","clamp","ColorbarCanvas","validateProps","colormap","imageRange","container","showFullPixelValueRange","_colormap","_imageRange","_voiRange","_showFullImageRange","_canvas","_createRootElement","appendTo","_setCanvasSize","showFullImageRange","pointerEvents","isConnected","RGBPoints","rgbPoints","colorsCount","getColorPoint","canvasContext","getContext","maxValue","previousColorPoint","currentColorPoint","incRawPixelValue","rawPixelValue","tVoiRange","normColor","tColorRange","fillStyle","fillRect","interpolateVec3","DEFAULTS","FONT","COLOR","TICK_SIZE","TICK_WIDTH","TICK_LABEL_MARGIN","MAX_NUM_TICKS","TICKS_STEPS","ColorbarTicks","ticks","ticksProps","ticksStyle","rangeTextPosition","_font","font","_color","_tickSize","tickSize","_tickWidth","tickWidth","_labelMargin","labelMargin","_maxNumTicks","maxNumTicks","_rangeTextPosition","Right","_showFullPixelValueRange","_createCanvasElement","showFullRange","_getTicks","roughStep","stepPower","log10","roughtStepNormalized","scaleMax","scaleMin","ticksCount","_getLeftTickInfo","labelMeasure","labelPoint","tickPoints","_getRightTickInfo","_getTopTickInfo","_getBottomTickInfo","maxCanvasPixelValue","rangeWidth","clearRect","textBaseline","strokeStyle","tick","measureText","tickInfo","Top","Left","tickStart","tickEnd","beginPath","moveTo","lineTo","fillText","Widget","_containerResizeCallback","contentRect","contentBoxSize","inlineSize","blockSize","_containerSize","onContainerResize","_id","_rootElement","createRootElement","_containerResizeObserver","ResizeObserver","rootElement","resizeObserver","currentContainer","unobserve","observe","destroy","disconnect","containerSize","MULTIPLIER","RANGE_TEXT_POSITION","TICKS_BAR_SIZE","Colorbar","_isMouseOver","_isInteracting","_mouseOverCallback","showTicks","_mouseOutCallback","hideTicks","_addVOIEventListeners","initialState","multipliers","getVOIMultipliers","_getPointsFromMouseEvent","startVOIRange","canvasDelta","local","voiLower","voiUpper","newVoiRange","_removeVOIEventListeners","_eventListenersManager","_colormaps","getColormapsMap","_activeColormapName","getInitialColormapName","_createCanvas","_ticksBar","_createTicksBar","_addRootElementEventListeners","activeColormapName","colormapName","currentVoiRange","onVoiChange","reset","updateTicksBar","colormaps","items","Name","cm","containerWidth","containerHeight","ticksBar","colorbarWidth","colorbarHeight","Bottom","isRangeTextPositionValid","ticksBarTop","ticksBarLeft","manager","initialDragState","defaultImageRange","ViewportColorbar","_getImageRange","_getVOIRange","autoHideTicks","_hideTicksTimeoutId","timeLeft","_hideTicksTime","_stackNewImageCallback","_element","_imageVolumeModifiedCallback","_volumeId","_viewportVOIModifiedCallback","showAndAutoHideTicks","_addCornerstoneEventListener","ptMultiplier","fixedPTWindowWidth","xMultiplier","volumeActor","getRGBTransferFunction","interval","VOI_MODIFIED","onImageRendered","customCallbackHandler","handlerType","customFunction","activeTool","filterToolsWithMoveableHandles","ToolAndAnnotations","toolsWithMoveableHandles","filterToolsWithAnnotationsForElement","filterMoveableAnnotationTools","moveableAnnotationTools","shiftKey","ctrlKey","kb","ShiftCtrl","altKey","ShiftAlt","metaKey","ShiftMeta","CtrlAlt","CtrlMeta","AltMeta","Alt","Meta","getActiveToolForMouseEvent","mouseEvent","getMouseModifier","keyEventListener","defaultMousePrimary","getDefaultMousePrimary","correctBinding","binding","getToolsWithModesForMouseEvent","evtButton","mouseDownAnnotationAction","toolsWithActions","toolModes","actionsConfig","action","getToolsWithActionsForMouseEvent","mouseDown","isPrimaryClick","applicableTools","annotationToolsWithAnnotations","annotationToolsWithMoveableHandles","isMultiSelect","getAnnotationForSelection","toggleAnnotationSelection","toolsWithMovableHandles","mouseDownActivate","mouseDrag","mouseMove","activeAndPassiveTools","toolsWithAnnotations","toolsWithoutAnnotations","toolAndAnnotation","mouseClick","mouseDoubleClick","mouseUp","mouseWheel","getActiveToolForKeyboardEvent","keyDown","setViewportsCursorByToolName","activeToolsWithEventBinding","getToolsWithActionsForKeyboardEvent","keyUp","CAMERA_MODIFIED","IMAGE_SPACING_CALIBRATED","getActiveToolForTouchEvent","touchEvent","numTouchPoints","getToolsWithModesForTouchEvent","touchStart","touchStartActivate","touchDrag","touchEnd","touchTap","touchPress","addEnabledElement","svgLayer","svgLayerId","defs","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","newNode","viewportUid","renderingEngineUid","dataset","elementHash","_setSvgNodeCache","mouseEventListeners","wheelEventListener","touchEventListeners","imageChangeEventListener","imageRenderedEventDispatcher","cameraModifiedEventDispatcher","imageSpacingCalibratedEventDispatcher","mouseToolEventDispatcher","keyboardToolEventDispatcher","touchToolEventDispatcher","synchronizersFilteredByIds","synchronizer","notDisabled","isDisabled","hasSourceViewport","hasTargetViewport","toolGroupFilteredByIds","tg","_removeViewportFromSynchronizers","getSynchronizersForViewport","sync","_removeViewportFromToolGroup","removeViewports","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","cancelActiveManipulations","toolsWithData","_getViewportIndex","ar","_containsViewport","synchronizerId","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_sourceViewports","fireEvent","_enabled","_eventName","_eventHandler","_options","_auxiliaryEventNames","auxiliaryEventNames","_hasSourceElements","setOptions","getOptions","addTarget","addSource","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","removeTarget","_getViewportElement","sourceEvent","vp1","vp2","unique","vps","_getUniqueViewports","_remove","disableHandler","elementDisabledEvent","vUid","ELEMENT_DISABLED","Synchronizer","synchronizerIndex","ToolGroup","restoreToolOptions","toolInstanceName","toolDefinition","hasToolName","localToolInstance","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","renderingEngines","renderingEngineUIDToUse","vpId","getActivePrimaryMouseButtonTool","vpInfo","setToolMode","TouchBinding","MouseBinding","obj","binding1","binding2","hasSameBinding","useCursor","_hasMousePrimaryButtonBinding","_setCursorForViewports","_renderViewports","TOOL_ACTIVATED","_triggerToolModeChangedEvent","prevToolOptions","getToolOptions","toolOptionsForTool","_getCursor","setToolConfiguration","_configuration","getToolConfiguration","configurationPath","newToolGroupId","fnToolFilter","sourceToolInstance","sourceToolOptions","sourceToolMode","toolGroupIndex","removeSegmentationsFromToolGroup","csToolsState","destroyToolGroup","MODES","defaultManager","setAnnotationManager","resetAnnotationManager","HTMLDivElement","ANNOTATION_ADDED","triggerAnnotationAddedForElement","getToolGroupsWithToolName","viewportsToRender","triggerAnnotationAddedForFOR","annotationManagerUID","csToolsInitialized","init","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","TOOLS_EVENTS","annotationModifiedListener","annotationSelectionListener","segmentationModifiedListener","segmentationDataModifiedEventListener","segmentationRepresentationModifiedEventListener","segmentationRepresentationRemovedEventListener","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","voiSyncCallback","voiModifiedEvent","invertStateChanged","tProperties","syncInvertState","createVOISynchronizer","zoomPanSyncCallback","sViewport","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createZoomPanSynchronizer","getSpatialRegistration","sourceId","imageSliceSyncCallback","disabled","imageId1","sourceImagePositionPatient","targetImageIds","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","areViewportsCoplanar","registrationMatrixMat4","useInitialPosition","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","closestImageIdIndex","imageIndexToSet","jumpToSlice","createImageSliceSynchronizer","createStackImageSynchronizer","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","drawRedactionRectSvg","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","volumeActors","getVolumeActors","coloneIndex","_getTargetStackUID"],"sourceRoot":""}