{"version":3,"file":"90.bundle.2978bf4b09049470de4f.js","mappings":"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","sources":["webpack:///../../../extensions/default/src/DicomWebDataSource/qido.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getWADORSImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoader.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderSync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderAsync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/retrieveStudyMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/StaticWadoClient.ts","webpack:///../../../extensions/default/src/utils/getDirectURL.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/fixBulkDataURI.ts","webpack:///../../../extensions/default/src/DicomWebDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebDataSource/dcm4cheeReject.js","webpack:///../../../extensions/default/src/DicomJSONDataSource/index.js","webpack:///../../../extensions/default/src/DicomLocalDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebProxyDataSource/index.js","webpack:///../../../extensions/default/src/getDataSourcesModule.js","webpack:///../../../extensions/default/src/Toolbar/Toolbar.tsx","webpack:///../../../extensions/default/src/ViewerLayout/ViewerHeader.tsx","webpack:///../../../extensions/default/src/ViewerLayout/index.tsx","webpack:///../../../extensions/default/src/Panels/PanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/getImageSrcFromImageId.js","webpack:///../../../extensions/default/src/Panels/getStudiesForPatientByMRN.js","webpack:///../../../extensions/default/src/Panels/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/default/src/Panels/WrappedPanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/ActionButtons.tsx","webpack:///../../../extensions/default/src/Panels/createReportDialogPrompt.tsx","webpack:///../../../extensions/default/src/Actions/createReportAsync.tsx","webpack:///../../../extensions/default/src/utils/getNextSRSeriesNumber.js","webpack:///../../../extensions/default/src/utils/findSRWithSameSeriesDescription.ts","webpack:///../../../extensions/default/src/Panels/PanelMeasurementTable.tsx","webpack:///../../../extensions/default/src/getPanelModule.tsx","webpack:///../../../extensions/default/src/id.js","webpack:///../../../extensions/default/src/utils/validations/areAllImagePositionsEqual.ts","webpack:///../../../extensions/default/src/utils/calculateScanAxisNormal.ts","webpack:///../../../extensions/default/src/utils/validations/checkSingleFrames.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageDimensionsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageComponentsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageOrientationsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageSpacingEqual.ts","webpack:///../../../extensions/default/src/getDisplaySetMessages.ts","webpack:///../../../extensions/default/src/utils/validations/checkMultiframe.ts","webpack:///../../../extensions/default/src/getDisplaySetsFromUnsupportedSeries.js","webpack:///../../../extensions/default/src/getSopClassHandlerModule.js","webpack:///../../../extensions/default/src/Toolbar/ToolbarDivider.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarLayoutSelector.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarSplitButton.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuItemsBuilder.ts","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuController.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/defaultContextMenu.ts","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagTable.tsx","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagBrowser.tsx","webpack:///../../../extensions/default/src/utils/reuseCachedLayouts.ts","webpack:///../../../extensions/default/src/findViewportsByPosition.ts","webpack:///../../../extensions/default/src/commandsModule.ts","webpack:///../../../extensions/default/src/hpMNGrid.ts","webpack:///../../../extensions/default/src/hpCompare.ts","webpack:///../../../extensions/default/src/getHangingProtocolModule.js","webpack:///../../../extensions/default/src/Panels/DataSourceSelector.tsx","webpack:///../../../extensions/default/src/Components/ItemListComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationModalComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationComponent.tsx","webpack:///../../../extensions/default/src/DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI.ts","webpack:///../../../extensions/default/src/getPTImageIdInstanceMetadata.ts","webpack:///../../../extensions/default/src/init.ts","webpack:///../../../extensions/default/src/index.ts","webpack:///../../../extensions/default/src/getLayoutTemplateModule.js","webpack:///../../../extensions/default/src/getToolbarModule.tsx","webpack:///../../../extensions/default/src/getCustomizationModule.tsx"],"sourcesContent":["/**\n * QIDO - Query based on ID for DICOM Objects\n * search for studies, series and instances by patient ID, and receive their\n * unique identifiers for further usage.\n *\n * Quick: https://www.dicomstandard.org/dicomweb/query-qido-rs/\n * Standard: http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6\n *\n * Routes:\n * ==========\n * /studies?\n * /studies/{studyInstanceUid}/series?\n * /studies/{studyInstanceUid}/series/{seriesInstanceUid}/instances?\n *\n * Query Parameters:\n * ================\n * | KEY              | VALUE              |\n * |------------------|--------------------|\n * | {attributeId}    | {value}            |\n * | includeField     | {attribute} or all |\n * | fuzzymatching    | true OR false      |\n * | limit            | {number}           |\n * | offset           | {number}           |\n */\nimport { DICOMWeb, utils } from '@ohif/core';\nimport { sortStudySeries } from '@ohif/core/src/utils/sortStudy';\n\nconst { getString, getName, getModalities } = DICOMWeb;\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param {Array} qidoStudies - An array of study objects. Each object contains a keys for DICOM tags.\n * @param {object} qidoStudies[0].qidoStudy - An object where each key is the DICOM Tag group+element\n * @param {object} qidoStudies[0].qidoStudy[dicomTag] - Optional object that represents DICOM Tag\n * @param {string} qidoStudies[0].qidoStudy[dicomTag].vr - Value Representation\n * @param {string[]} qidoStudies[0].qidoStudy[dicomTag].Value - Optional string array representation of the DICOM Tag's value\n * @returns {Array} An array of Study MetaData objects\n */\nfunction processResults(qidoStudies) {\n  if (!qidoStudies || !qidoStudies.length) {\n    return [];\n  }\n\n  const studies = [];\n\n  qidoStudies.forEach(qidoStudy =>\n    studies.push({\n      studyInstanceUid: getString(qidoStudy['0020000D']),\n      date: getString(qidoStudy['00080020']), // YYYYMMDD\n      time: getString(qidoStudy['00080030']), // HHmmss.SSS (24-hour, minutes, seconds, fractional seconds)\n      accession: getString(qidoStudy['00080050']) || '', // short string, probably a number?\n      mrn: getString(qidoStudy['00100020']) || '', // medicalRecordNumber\n      patientName: utils.formatPN(getName(qidoStudy['00100010'])) || '',\n      instances: Number(getString(qidoStudy['00201208'])) || 0, // number\n      description: getString(qidoStudy['00081030']) || '',\n      modalities: getString(getModalities(qidoStudy['00080060'], qidoStudy['00080061'])) || '',\n    })\n  );\n\n  return studies;\n}\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param {Array} qidoSeries - An array of study objects. Each object contains a keys for DICOM tags.\n * @param {object} qidoSeries[0].qidoSeries - An object where each key is the DICOM Tag group+element\n * @param {object} qidoSeries[0].qidoSeries[dicomTag] - Optional object that represents DICOM Tag\n * @param {string} qidoSeries[0].qidoSeries[dicomTag].vr - Value Representation\n * @param {string[]} qidoSeries[0].qidoSeries[dicomTag].Value - Optional string array representation of the DICOM Tag's value\n * @returns {Array} An array of Study MetaData objects\n */\nexport function processSeriesResults(qidoSeries) {\n  const series = [];\n\n  if (qidoSeries && qidoSeries.length) {\n    qidoSeries.forEach(qidoSeries =>\n      series.push({\n        studyInstanceUid: getString(qidoSeries['0020000D']),\n        seriesInstanceUid: getString(qidoSeries['0020000E']),\n        modality: getString(qidoSeries['00080060']),\n        seriesNumber: getString(qidoSeries['00200011']),\n        seriesDate: utils.formatDate(getString(qidoSeries['00080021'])),\n        numSeriesInstances: Number(getString(qidoSeries['00201209'])),\n        description: getString(qidoSeries['0008103E']),\n      })\n    );\n  }\n\n  sortStudySeries(series);\n\n  return series;\n}\n\n/**\n *\n * @param {object} dicomWebClient - Client similar to what's provided by `dicomweb-client` library\n * @param {function} dicomWebClient.searchForStudies -\n * @param {string} [studyInstanceUid]\n * @param {string} [seriesInstanceUid]\n * @param {string} [queryParamaters]\n * @returns {Promise<results>} - Promise that resolves results\n */\nasync function search(dicomWebClient, studyInstanceUid, seriesInstanceUid, queryParameters) {\n  let searchResult = await dicomWebClient.searchForStudies({\n    studyInstanceUid: undefined,\n    queryParams: queryParameters,\n  });\n\n  return searchResult;\n}\n\n/**\n *\n * @param {string} studyInstanceUID - ID of study to return a list of series for\n * @returns {Promise} - Resolves SeriesMetadata[] in study\n */\nexport function seriesInStudy(dicomWebClient, studyInstanceUID) {\n  // Series Description\n  // Already included?\n  const commaSeparatedFields = ['0008103E', '00080021'].join(',');\n  const queryParams = {\n    includefield: commaSeparatedFields,\n  };\n\n  return dicomWebClient.searchForSeries({ studyInstanceUID, queryParams });\n}\n\nexport default function searchStudies(server, filter) {\n  const queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\n  const options = {\n    queryParams,\n  };\n\n  return dicomWeb.searchForStudies(options).then(resultDataToStudies);\n}\n\n/**\n * Produces a QIDO URL given server details and a set of specified search filter\n * items\n *\n * @param filter\n * @param serverSupportsQIDOIncludeField\n * @returns {string} The URL with encoded filter query data\n */\nfunction mapParams(params, options = {}) {\n  if (!params) {\n    return;\n  }\n  const commaSeparatedFields = [\n    '00081030', // Study Description\n    '00080060', // Modality\n    // Add more fields here if you want them in the result\n  ].join(',');\n\n  const { supportsWildcard } = options;\n  const withWildcard = value => {\n    return supportsWildcard && value ? `*${value}*` : value;\n  };\n\n  const parameters = {\n    // Named\n    PatientName: withWildcard(params.patientName),\n    //PatientID: withWildcard(params.patientId),\n    '00100020': withWildcard(params.patientId), // Temporarily to make the tests pass with dicomweb-server.. Apparently it's broken?\n    AccessionNumber: withWildcard(params.accessionNumber),\n    StudyDescription: withWildcard(params.studyDescription),\n    ModalitiesInStudy: params.modalitiesInStudy,\n    // Other\n    limit: params.limit || 101,\n    offset: params.offset || 0,\n    fuzzymatching: options.supportsFuzzyMatching === true,\n    includefield: commaSeparatedFields, // serverSupportsQIDOIncludeField ? commaSeparatedFields : 'all',\n  };\n\n  // build the StudyDate range parameter\n  if (params.startDate && params.endDate) {\n    parameters.StudyDate = `${params.startDate}-${params.endDate}`;\n  } else if (params.startDate) {\n    const today = new Date();\n    const DD = String(today.getDate()).padStart(2, '0');\n    const MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const YYYY = today.getFullYear();\n    const todayStr = `${YYYY}${MM}${DD}`;\n\n    parameters.StudyDate = `${params.startDate}-${todayStr}`;\n  } else if (params.endDate) {\n    const oldDateStr = `19700102`;\n\n    parameters.StudyDate = `${oldDateStr}-${params.endDate}`;\n  }\n\n  // Build the StudyInstanceUID parameter\n  if (params.studyInstanceUid) {\n    let studyUids = params.studyInstanceUid;\n    studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\n    studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\n    parameters.StudyInstanceUID = studyUids;\n  }\n\n  // Clean query params of undefined values.\n  const final = {};\n  Object.keys(parameters).forEach(key => {\n    if (parameters[key] !== undefined && parameters[key] !== '') {\n      final[key] = parameters[key];\n    }\n  });\n\n  return final;\n}\n\nexport { mapParams, search, processResults };\n","import getWADORSImageId from './getWADORSImageId';\n\nfunction buildInstanceWadoUrl(config, instance) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  const params = [];\n\n  params.push('requestType=WADO');\n  params.push(`studyUID=${StudyInstanceUID}`);\n  params.push(`seriesUID=${SeriesInstanceUID}`);\n  params.push(`objectUID=${SOPInstanceUID}`);\n  params.push('contentType=application/dicom');\n  params.push('transferSyntax=*');\n\n  const paramString = params.join('&');\n\n  return `${config.wadoUriRoot}?${paramString}`;\n}\n\n/**\n * Obtain an imageId for Cornerstone from an image instance\n *\n * @param instance\n * @param frame\n * @param thumbnail\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getImageId({ instance, frame, config, thumbnail = false }) {\n  if (!instance) {\n    return;\n  }\n\n  if (instance.url) {\n    return instance.url;\n  }\n\n  const renderingAttr = thumbnail ? 'thumbnailRendering' : 'imageRendering';\n\n  if (!config[renderingAttr] || config[renderingAttr] === 'wadouri') {\n    const wadouri = buildInstanceWadoUrl(config, instance);\n\n    let imageId = 'dicomweb:' + wadouri;\n    if (frame !== undefined) {\n      imageId += '&frame=' + frame;\n    }\n\n    return imageId;\n  } else {\n    return getWADORSImageId(instance, config, frame); // WADO-RS Retrieve Frame\n  }\n}\n","function buildInstanceWadoRsUri(instance, config) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  return `${config.wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}`;\n}\n\nfunction buildInstanceFrameWadoRsUri(instance, config, frame) {\n  const baseWadoRsUri = buildInstanceWadoRsUri(instance, config);\n\n  frame = frame || 1;\n\n  return `${baseWadoRsUri}/frames/${frame}`;\n}\n\n// function getWADORSImageUrl(instance, frame) {\n//   const wadorsuri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n//   if (!wadorsuri) {\n//     return;\n//   }\n\n//   // Use null to obtain an imageId which represents the instance\n//   if (frame === null) {\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, '');\n//   } else {\n//     // We need to sum 1 because WADO-RS frame number is 1-based\n//     frame = frame ? parseInt(frame) + 1 : 1;\n\n//     // Replaces /frame/1 by /frame/{frame}\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, `frames/${frame}`);\n//   }\n\n//   return wadorsuri;\n// }\n\n/**\n * Obtain an imageId for Cornerstone based on the WADO-RS scheme\n *\n * @param {object} instanceMetada metadata object (InstanceMetadata)\n * @param {(string\\|number)} [frame] the frame number\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getWADORSImageId(instance, config, frame) {\n  //const uri = getWADORSImageUrl(instance, frame);\n  const uri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n  if (!uri) {\n    return;\n  }\n\n  return `wadors:${uri}`;\n}\n","/**\n * Class to define inheritance of load retrieve strategy.\n * The process can be async load (lazy) or sync load\n *\n * There are methods that must be implemented at consumer level\n * To retrieve study call execLoad\n */\nexport default class RetrieveMetadataLoader {\n  /**\n   * @constructor\n   * @param {Object} client The dicomweb-client.\n   * @param {Array} studyInstanceUID Study instance ui to be retrieved\n   * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   * @param {Function} [sortSeries] - Custom sort function for series\n   */\n  constructor(client, studyInstanceUID, filters = {}, sortCriteria, sortFunction) {\n    this.client = client;\n    this.studyInstanceUID = studyInstanceUID;\n    this.filters = filters;\n    this.sortCriteria = sortCriteria;\n    this.sortFunction = sortFunction;\n  }\n\n  async execLoad() {\n    const preLoadData = await this.preLoad();\n    const loadData = await this.load(preLoadData);\n    const postLoadData = await this.posLoad(loadData);\n\n    return postLoadData;\n  }\n\n  /**\n   * It iterates over given loaders running each one. Loaders parameters must be bind when getting it.\n   * @param {Array} loaders - array of loader to retrieve data.\n   */\n  async runLoaders(loaders) {\n    let result;\n    for (const loader of loaders) {\n      try {\n        result = await loader();\n        if (result && result.length) {\n          break; // closes iterator in case data is retrieved successfully\n        }\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    if (loaders.next().done && !result) {\n      throw new Error('RetrieveMetadataLoader failed');\n    }\n\n    return result;\n  }\n\n  // Methods to be overwrite\n  async configLoad() {}\n  async preLoad() {}\n  async load(preLoadData) {}\n  async posLoad(loadData) {}\n}\n","// import { api } from 'dicomweb-client';\n// import DICOMWeb from '../../../DICOMWeb/';\nimport { createStudyFromSOPInstanceList } from './studyInstanceHelpers';\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\n\n/**\n * Class for sync load of study metadata.\n * It inherits from RetrieveMetadataLoader\n *\n * A list of loaders (getLoaders) can be created so, it will be applied a fallback load strategy.\n * I.e Retrieve metadata using all loaders possibilities.\n */\nexport default class RetrieveMetadataLoaderSync extends RetrieveMetadataLoader {\n  getOptions() {\n    const { studyInstanceUID, filters } = this;\n\n    const options = {\n      studyInstanceUID,\n    };\n\n    const { seriesInstanceUID } = filters;\n    if (seriesInstanceUID) {\n      options['seriesInstanceUID'] = seriesInstanceUID;\n    }\n\n    return options;\n  }\n\n  /**\n   * @returns {Array} Array of loaders. To be consumed as queue\n   */\n  *getLoaders() {\n    const loaders = [];\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\n\n    if (seriesInstanceUID) {\n      loaders.push(\n        client.retrieveSeriesMetadata.bind(client, {\n          studyInstanceUID,\n          seriesInstanceUID,\n        })\n      );\n    }\n\n    loaders.push(client.retrieveStudyMetadata.bind(client, { studyInstanceUID }));\n\n    yield* loaders;\n  }\n\n  async load(preLoadData) {\n    const loaders = this.getLoaders();\n    const result = this.runLoaders(loaders);\n    return result;\n  }\n\n  async posLoad(loadData) {\n    return loadData;\n  }\n}\n","import dcmjs from 'dcmjs';\nimport { sortStudySeries, sortingCriteria } from '@ohif/core/src/utils/sortStudy';\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\n\n/**\n * Creates an immutable series loader object which loads each series sequentially using the iterator interface\n * @param {DICOMWebClient} dicomWebClient The DICOMWebClient instance to be used for series load\n * @param {string} studyInstanceUID The Study Instance UID from which series will be loaded\n * @param {Array} seriesInstanceUIDList A list of Series Instance UIDs\n * @returns {Object} Returns an object which supports loading of instances from each of given Series Instance UID\n */\nfunction makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDList) {\n  return Object.freeze({\n    hasNext() {\n      return seriesInstanceUIDList.length > 0;\n    },\n    async next() {\n      const seriesInstanceUID = seriesInstanceUIDList.shift();\n      return client.retrieveSeriesMetadata({\n        studyInstanceUID,\n        seriesInstanceUID,\n      });\n    },\n  });\n}\n\n/**\n * Class for async load of study metadata.\n * It inherits from RetrieveMetadataLoader\n *\n * It loads the one series and then append to seriesLoader the others to be consumed/loaded\n */\nexport default class RetrieveMetadataLoaderAsync extends RetrieveMetadataLoader {\n  /**\n   * @returns {Array} Array of preLoaders. To be consumed as queue\n   */\n  *getPreLoaders() {\n    const preLoaders = [];\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\n\n    if (seriesInstanceUID) {\n      const options = {\n        studyInstanceUID,\n        queryParams: { SeriesInstanceUID: seriesInstanceUID },\n      };\n      preLoaders.push(client.searchForSeries.bind(client, options));\n    }\n    // Fallback preloader\n    preLoaders.push(client.searchForSeries.bind(client, { studyInstanceUID }));\n\n    yield* preLoaders;\n  }\n\n  async preLoad() {\n    const preLoaders = this.getPreLoaders();\n    const result = await this.runLoaders(preLoaders);\n    const sortCriteria = this.sortCriteria;\n    const sortFunction = this.sortFunction;\n\n    const { naturalizeDataset } = dcmjs.data.DicomMetaDictionary;\n    const naturalized = result.map(naturalizeDataset);\n\n    return sortStudySeries(\n      naturalized,\n      sortCriteria || sortingCriteria.seriesSortCriteria.seriesInfoSortingCriteria,\n      sortFunction\n    );\n  }\n\n  async load(preLoadData) {\n    const { client, studyInstanceUID } = this;\n\n    const seriesInstanceUIDs = preLoadData.map(s => s.SeriesInstanceUID);\n\n    const seriesAsyncLoader = makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDs);\n\n    const promises = [];\n\n    while (seriesAsyncLoader.hasNext()) {\n      promises.push(seriesAsyncLoader.next());\n    }\n\n    return {\n      preLoadData,\n      promises,\n    };\n  }\n\n  async posLoad({ preLoadData, promises }) {\n    return {\n      preLoadData,\n      promises,\n    };\n  }\n}\n","import RetrieveMetadataLoaderSync from './retrieveMetadataLoaderSync';\nimport RetrieveMetadataLoaderAsync from './retrieveMetadataLoaderAsync';\n\n/**\n * Retrieve Study metadata from a DICOM server. If the server is configured to use lazy load, only the first series\n * will be loaded and the property \"studyLoader\" will be set to let consumer load remaining series as needed.\n *\n * @param {Object} dicomWebClient The dicomweb-client.\n * @param {string} studyInstanceUid The Study Instance UID of the study which needs to be loaded\n * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @returns {Object} A study descriptor object\n */\nasync function RetrieveMetadata(\n  dicomWebClient,\n  studyInstanceUid,\n  enableStudyLazyLoad,\n  filters = {},\n  sortCriteria,\n  sortFunction\n) {\n  const RetrieveMetadataLoader =\n    enableStudyLazyLoad !== false ? RetrieveMetadataLoaderAsync : RetrieveMetadataLoaderSync;\n\n  const retrieveMetadataLoader = new RetrieveMetadataLoader(\n    dicomWebClient,\n    studyInstanceUid,\n    filters,\n    sortCriteria,\n    sortFunction\n  );\n  const data = await retrieveMetadataLoader.execLoad();\n\n  return data;\n}\n\nexport default RetrieveMetadata;\n","import RetrieveMetadata from './wado/retrieveMetadata.js';\n\nconst moduleName = 'RetrieveStudyMetadata';\n// Cache for promises. Prevents unnecessary subsequent calls to the server\nconst StudyMetaDataPromises = new Map();\n\n/**\n * Retrieves study metadata\n *\n * @param {Object} server Object with server configuration parameters\n * @param {string} StudyInstanceUID The UID of the Study to be retrieved\n * @param {boolean} enabledStudyLazyLoad Whether the study metadata should be loaded asynchronously.\n * @param {function} storeInstancesCallback A callback used to store the retrieved instance metadata.\n * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @returns {Promise} that will be resolved with the metadata or rejected with the error\n */\nexport function retrieveStudyMetadata(\n  dicomWebClient,\n  StudyInstanceUID,\n  enableStudyLazyLoad,\n  filters,\n  sortCriteria,\n  sortFunction\n) {\n  // @TODO: Whenever a study metadata request has failed, its related promise will be rejected once and for all\n  // and further requests for that metadata will always fail. On failure, we probably need to remove the\n  // corresponding promise from the \"StudyMetaDataPromises\" map...\n\n  if (!dicomWebClient) {\n    throw new Error(`${moduleName}: Required 'dicomWebClient' parameter not provided.`);\n  }\n  if (!StudyInstanceUID) {\n    throw new Error(`${moduleName}: Required 'StudyInstanceUID' parameter not provided.`);\n  }\n\n  // Already waiting on result? Return cached promise\n  if (StudyMetaDataPromises.has(StudyInstanceUID)) {\n    return StudyMetaDataPromises.get(StudyInstanceUID);\n  }\n\n  // Create a promise to handle the data retrieval\n  const promise = new Promise((resolve, reject) => {\n    RetrieveMetadata(\n      dicomWebClient,\n      StudyInstanceUID,\n      enableStudyLazyLoad,\n      filters,\n      sortCriteria,\n      sortFunction\n    ).then(function (data) {\n      resolve(data);\n    }, reject);\n  });\n\n  // Store the promise in cache\n  StudyMetaDataPromises.set(StudyInstanceUID, promise);\n\n  return promise;\n}\n\n/**\n * Delete the cached study metadata retrieval promise to ensure that the browser will\n * re-retrieve the study metadata when it is next requested\n *\n * @param {String} StudyInstanceUID The UID of the Study to be removed from cache\n *\n */\nexport function deleteStudyMetadataPromise(StudyInstanceUID) {\n  if (StudyMetaDataPromises.has(StudyInstanceUID)) {\n    StudyMetaDataPromises.delete(StudyInstanceUID);\n  }\n}\n","import { api } from 'dicomweb-client';\n\n/**\n * An implementation of the static wado client, that fetches data from\n * a static response rather than actually doing real queries.  This allows\n * fast encoding of test data, but because it is static, anything actually\n * performing searches doesn't work.  This version fixes the query issue\n * by manually implementing a query option.\n */\nexport default class StaticWadoClient extends api.DICOMwebClient {\n  static studyFilterKeys = {\n    studyinstanceuid: '0020000D',\n    patientname: '00100010',\n    '00100020': 'mrn',\n    studydescription: '00081030',\n    studydate: '00080020',\n    modalitiesinstudy: '00080061',\n    accessionnumber: '00080050',\n  };\n\n  static seriesFilterKeys = {\n    seriesinstanceuid: '0020000E',\n    seriesnumber: '00200011',\n    modality: '00080060',\n  };\n\n  constructor(qidoConfig) {\n    super(qidoConfig);\n    this.staticWado = qidoConfig.staticWado;\n  }\n\n  /**\n   * Replace the search for studies remote query with a local version which\n   * retrieves a complete query list and then sub-selects from it locally.\n   * @param {*} options\n   * @returns\n   */\n  async searchForStudies(options) {\n    if (!this.staticWado) {\n      return super.searchForStudies(options);\n    }\n\n    const searchResult = await super.searchForStudies(options);\n    const { queryParams } = options;\n\n    if (!queryParams) {\n      return searchResult;\n    }\n\n    const lowerParams = this.toLowerParams(queryParams);\n    const filtered = searchResult.filter(study => {\n      for (const key of Object.keys(StaticWadoClient.studyFilterKeys)) {\n        if (!this.filterItem(key, lowerParams, study, StaticWadoClient.studyFilterKeys)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return filtered;\n  }\n\n  async searchForSeries(options) {\n    if (!this.staticWado) {\n      return super.searchForSeries(options);\n    }\n\n    const searchResult = await super.searchForSeries(options);\n    const { queryParams } = options;\n    if (!queryParams) {\n      return searchResult;\n    }\n    const lowerParams = this.toLowerParams(queryParams);\n\n    const filtered = searchResult.filter(series => {\n      for (const key of Object.keys(StaticWadoClient.seriesFilterKeys)) {\n        if (!this.filterItem(key, lowerParams, series, StaticWadoClient.seriesFilterKeys)) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Compares values, matching any instance of desired to any instance of\n   * actual by recursively go through the paired set of values.  That is,\n   * this is O(m*n) where m is how many items in desired and n is the length of actual\n   * Then, at the individual item node, compares the Alphabetic name if present,\n   * and does a sub-string matching on string values, and otherwise does an\n   * exact match comparison.\n   *\n   * @param {*} desired\n   * @param {*} actual\n   * @returns true if the values match\n   */\n  compareValues(desired, actual) {\n    if (Array.isArray(desired)) {\n      return desired.find(item => this.compareValues(item, actual));\n    }\n    if (Array.isArray(actual)) {\n      return actual.find(actualItem => this.compareValues(desired, actualItem));\n    }\n    if (actual?.Alphabetic) {\n      actual = actual.Alphabetic;\n    }\n    if (typeof actual == 'string') {\n      if (actual.length === 0) {\n        return true;\n      }\n      if (desired.length === 0 || desired === '*') {\n        return true;\n      }\n      if (desired[0] === '*' && desired[desired.length - 1] === '*') {\n        // console.log(`Comparing ${actual} to ${desired.substring(1, desired.length - 1)}`)\n        return actual.indexOf(desired.substring(1, desired.length - 1)) != -1;\n      } else if (desired[desired.length - 1] === '*') {\n        return actual.indexOf(desired.substring(0, desired.length - 1)) != -1;\n      } else if (desired[0] === '*') {\n        return actual.indexOf(desired.substring(1)) === actual.length - desired.length + 1;\n      }\n    }\n    return desired === actual;\n  }\n\n  /** Compares a pair of dates to see if the value is within the range */\n  compareDateRange(range, value) {\n    if (!value) {\n      return true;\n    }\n    const dash = range.indexOf('-');\n    if (dash === -1) {\n      return this.compareValues(range, value);\n    }\n    const start = range.substring(0, dash);\n    const end = range.substring(dash + 1);\n    return (!start || value >= start) && (!end || value <= end);\n  }\n\n  /**\n   * Filters the return list by the query parameters.\n   *\n   * @param anyCaseKey - a possible search key\n   * @param queryParams -\n   * @param {*} study\n   * @param {*} sourceFilterMap\n   * @returns\n   */\n  filterItem(key: string, queryParams, study, sourceFilterMap) {\n    const altKey = sourceFilterMap[key] || key;\n    if (!queryParams) {\n      return true;\n    }\n    const testValue = queryParams[key] || queryParams[altKey];\n    if (!testValue) {\n      return true;\n    }\n    const valueElem = study[key] || study[altKey];\n    if (!valueElem) {\n      return false;\n    }\n    if (valueElem.vr == 'DA') {\n      return this.compareDateRange(testValue, valueElem.Value[0]);\n    }\n    const value = valueElem.Value;\n    return this.compareValues(testValue, value);\n  }\n\n  /** Converts the query parameters to lower case query parameters */\n  toLowerParams(queryParams: Record<string, unknown>): Record<string, unknown> {\n    const lowerParams = {};\n    Object.entries(queryParams).forEach(([key, value]) => {\n      lowerParams[key.toLowerCase()] = value;\n    });\n    return lowerParams;\n  }\n}\n","import { utils } from '@ohif/core';\n\n/**\n * Generates a URL that can be used for direct retrieve of the bulkdata\n *\n * @param {object} params\n * @param {string} params.tag is the tag name of the URL to retrieve\n * @param {string} params.defaultPath path for the pixel data url\n * @param {object} params.instance is the instance object that the tag is in\n * @param {string} params.defaultType is the mime type of the response\n * @param {string} params.singlepart is the type of the part to retrieve\n * @param {string} params.fetchPart unknown?\n * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n */\nconst getDirectURL = (config, params) => {\n  const { wadoRoot, singlepart } = config;\n  const {\n    instance,\n    tag = 'PixelData',\n    defaultPath = '/pixeldata',\n    defaultType = 'video/mp4',\n    singlepart: fetchPart = 'video',\n  } = params;\n  const value = instance[tag];\n  if (!value) {\n    return undefined;\n  }\n\n  if (value.DirectRetrieveURL) {\n    return value.DirectRetrieveURL;\n  }\n  if (value.InlineBinary) {\n    const blob = utils.b64toBlob(value.InlineBinary, defaultType);\n    value.DirectRetrieveURL = URL.createObjectURL(blob);\n    return value.DirectRetrieveURL;\n  }\n  if (!singlepart || (singlepart !== true && singlepart.indexOf(fetchPart) === -1)) {\n    if (value.retrieveBulkData) {\n      return value.retrieveBulkData().then(arr => {\n        value.DirectRetrieveURL = URL.createObjectURL(new Blob([arr], { type: defaultType }));\n        return value.DirectRetrieveURL;\n      });\n    }\n    console.warn('Unable to retrieve', tag, 'from', instance);\n    return undefined;\n  }\n\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  const BulkDataURI =\n    (value && value.BulkDataURI) ||\n    `series/${SeriesInstanceUID}/instances/${SOPInstanceUID}${defaultPath}`;\n  const hasQuery = BulkDataURI.indexOf('?') !== -1;\n  const hasAccept = BulkDataURI.indexOf('accept=') !== -1;\n  const acceptUri =\n    BulkDataURI + (hasAccept ? '' : (hasQuery ? '&' : '?') + `accept=${defaultType}`);\n\n  if (tag === 'PixelData' || tag === 'EncapsulatedDocument') {\n    return `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}/rendered`;\n  }\n\n  // The DICOMweb standard states that the default is multipart related, and then\n  // separately states that the accept parameter is the URL parameter equivalent of the accept header.\n  return acceptUri;\n};\n\nexport default getDirectURL;\n","/**\n * Modifies a bulkDataURI to ensure it is absolute based on the DICOMWeb configuration and\n * instance data. The modification is in-place.\n *\n * If the bulkDataURI is relative to the series or study (according to the DICOM standard),\n * it is made absolute by prepending the relevant paths.\n *\n * In scenarios where the bulkDataURI is a server-relative path (starting with '/'), the function\n * handles two cases:\n *\n * 1. If the wado root is absolute (starts with 'http'), it prepends the wado root to the bulkDataURI.\n * 2. If the wado root is relative, no changes are needed as the bulkDataURI is already correctly relative to the server root.\n *\n * @param value - The object containing BulkDataURI to be fixed.\n * @param instance - The object (DICOM instance data) containing StudyInstanceUID and SeriesInstanceUID.\n * @param dicomWebConfig - The DICOMWeb configuration object, containing wadoRoot and potentially bulkDataURI.relativeResolution.\n * @returns The function modifies `value` in-place, it does not return a value.\n */\nfunction fixBulkDataURI(value, instance, dicomWebConfig) {\n  // in case of the relative path, make it absolute. The current DICOM standard says\n  // the bulkdataURI is relative to the series. However, there are situations where\n  // it can be relative to the study too\n  if (!value.BulkDataURI.startsWith('http') && !value.BulkDataURI.startsWith('/')) {\n    if (dicomWebConfig.bulkDataURI?.relativeResolution === 'studies') {\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/${value.BulkDataURI}`;\n    } else if (\n      dicomWebConfig.bulkDataURI?.relativeResolution === 'series' ||\n      !dicomWebConfig.bulkDataURI?.relativeResolution\n    ) {\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/series/${instance.SeriesInstanceUID}/${value.BulkDataURI}`;\n    }\n\n    return;\n  }\n\n  // in case it is relative path but starts at the server (e.g., /bulk/1e, note the missing http\n  // in the beginning and the first character is /) There are two scenarios, whether the wado root\n  // is absolute or relative. In case of absolute, we need to prepend the wado root to the bulkdata\n  // uri (e.g., bulkData: /bulk/1e, wado root: http://myserver.com/dicomweb, output: http://myserver.com/bulk/1e)\n  // and in case of relative wado root, we need to prepend the bulkdata uri to the wado root (e.g,. bulkData: /bulk/1e\n  // wado root: /dicomweb, output: /bulk/1e)\n  if (value.BulkDataURI[0] === '/') {\n    if (dicomWebConfig.wadoRoot.startsWith('http')) {\n      // Absolute wado root\n      const url = new URL(dicomWebConfig.wadoRoot);\n      value.BulkDataURI = `${url.origin}${value.BulkDataURI}`;\n    } else {\n      // Relative wado root, we don't need to do anything, bulkdata uri is already correct\n    }\n  }\n}\n\nexport { fixBulkDataURI };\n","import { api } from 'dicomweb-client';\nimport { DicomMetadataStore, IWebApiDataSource, utils, errorHandler, classes } from '@ohif/core';\n\nimport {\n  mapParams,\n  search as qidoSearch,\n  seriesInStudy,\n  processResults,\n  processSeriesResults,\n} from './qido.js';\nimport dcm4cheeReject from './dcm4cheeReject';\n\nimport getImageId from './utils/getImageId';\nimport dcmjs from 'dcmjs';\nimport { retrieveStudyMetadata, deleteStudyMetadataPromise } from './retrieveStudyMetadata.js';\nimport StaticWadoClient from './utils/StaticWadoClient';\nimport getDirectURL from '../utils/getDirectURL';\nimport { fixBulkDataURI } from './utils/fixBulkDataURI';\n\nconst { DicomMetaDictionary, DicomDict } = dcmjs.data;\n\nconst { naturalizeDataset, denaturalizeDataset } = DicomMetaDictionary;\n\nconst ImplementationClassUID = '2.25.270695996825855179949881587723571202391.2.0.0';\nconst ImplementationVersionName = 'OHIF-VIEWER-2.0.0';\nconst EXPLICIT_VR_LITTLE_ENDIAN = '1.2.840.10008.1.2.1';\n\nconst metadataProvider = classes.MetadataProvider;\n\n/**\n *\n * @param {string} name - Data source name\n * @param {string} wadoUriRoot - Legacy? (potentially unused/replaced)\n * @param {string} qidoRoot - Base URL to use for QIDO requests\n * @param {string} wadoRoot - Base URL to use for WADO requests\n * @param {boolean} qidoSupportsIncludeField - Whether QIDO supports the \"Include\" option to request additional fields in response\n * @param {string} imageRengering - wadors | ? (unsure of where/how this is used)\n * @param {string} thumbnailRendering - wadors | ? (unsure of where/how this is used)\n * @param {bool} supportsReject - Whether the server supports reject calls (i.e. DCM4CHEE)\n * @param {bool} lazyLoadStudy - \"enableStudyLazyLoad\"; Request series meta async instead of blocking\n * @param {string|bool} singlepart - indicates of the retrieves can fetch singlepart.  Options are bulkdata, video, image or boolean true\n */\nfunction createDicomWebApi(dicomWebConfig, userAuthenticationService) {\n  let dicomWebConfigCopy,\n    qidoConfig,\n    wadoConfig,\n    qidoDicomWebClient,\n    wadoDicomWebClient,\n    getAuthrorizationHeader,\n    generateWadoHeader;\n\n  const implementation = {\n    initialize: ({ params, query }) => {\n      if (dicomWebConfig.onConfiguration && typeof dicomWebConfig.onConfiguration === 'function') {\n        dicomWebConfig = dicomWebConfig.onConfiguration(dicomWebConfig, {\n          params,\n          query,\n        });\n      }\n\n      dicomWebConfigCopy = JSON.parse(JSON.stringify(dicomWebConfig));\n\n      getAuthrorizationHeader = () => {\n        const xhrRequestHeaders = {};\n        const authHeaders = userAuthenticationService.getAuthorizationHeader();\n        if (authHeaders && authHeaders.Authorization) {\n          xhrRequestHeaders.Authorization = authHeaders.Authorization;\n        }\n        return xhrRequestHeaders;\n      };\n\n      generateWadoHeader = () => {\n        let authorizationHeader = getAuthrorizationHeader();\n        //Generate accept header depending on config params\n        let formattedAcceptHeader = utils.generateAcceptHeader(\n          dicomWebConfig.acceptHeader,\n          dicomWebConfig.requestTransferSyntaxUID,\n          dicomWebConfig.omitQuotationForMultipartRequest\n        );\n\n        return {\n          ...authorizationHeader,\n          Accept: formattedAcceptHeader,\n        };\n      };\n\n      qidoConfig = {\n        url: dicomWebConfig.qidoRoot,\n        staticWado: dicomWebConfig.staticWado,\n        singlepart: dicomWebConfig.singlepart,\n        headers: userAuthenticationService.getAuthorizationHeader(),\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\n      };\n\n      wadoConfig = {\n        url: dicomWebConfig.wadoRoot,\n        staticWado: dicomWebConfig.staticWado,\n        singlepart: dicomWebConfig.singlepart,\n        headers: userAuthenticationService.getAuthorizationHeader(),\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\n      };\n\n      // TODO -> Two clients sucks, but its better than 1000.\n      // TODO -> We'll need to merge auth later.\n      qidoDicomWebClient = dicomWebConfig.staticWado\n        ? new StaticWadoClient(qidoConfig)\n        : new api.DICOMwebClient(qidoConfig);\n\n      wadoDicomWebClient = dicomWebConfig.staticWado\n        ? new StaticWadoClient(wadoConfig)\n        : new api.DICOMwebClient(wadoConfig);\n    },\n    query: {\n      studies: {\n        mapParams: mapParams.bind(),\n        search: async function (origParams) {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          const { studyInstanceUid, seriesInstanceUid, ...mappedParams } =\n            mapParams(origParams, {\n              supportsFuzzyMatching: dicomWebConfig.supportsFuzzyMatching,\n              supportsWildcard: dicomWebConfig.supportsWildcard,\n            }) || {};\n\n          const results = await qidoSearch(qidoDicomWebClient, undefined, undefined, mappedParams);\n\n          return processResults(results);\n        },\n        processResults: processResults.bind(),\n      },\n      series: {\n        // mapParams: mapParams.bind(),\n        search: async function (studyInstanceUid) {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          const results = await seriesInStudy(qidoDicomWebClient, studyInstanceUid);\n\n          return processSeriesResults(results);\n        },\n        // processResults: processResults.bind(),\n      },\n      instances: {\n        search: (studyInstanceUid, queryParameters) => {\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\n          qidoSearch.call(undefined, qidoDicomWebClient, studyInstanceUid, null, queryParameters);\n        },\n      },\n    },\n    retrieve: {\n      /**\n       * Generates a URL that can be used for direct retrieve of the bulkdata\n       *\n       * @param {object} params\n       * @param {string} params.tag is the tag name of the URL to retrieve\n       * @param {object} params.instance is the instance object that the tag is in\n       * @param {string} params.defaultType is the mime type of the response\n       * @param {string} params.singlepart is the type of the part to retrieve\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n       */\n      directURL: params => {\n        return getDirectURL(\n          {\n            wadoRoot: dicomWebConfig.wadoRoot,\n            singlepart: dicomWebConfig.singlepart,\n          },\n          params\n        );\n      },\n      bulkDataURI: async ({ StudyInstanceUID, BulkDataURI }) => {\n        qidoDicomWebClient.headers = getAuthrorizationHeader();\n        const options = {\n          multipart: false,\n          BulkDataURI,\n          StudyInstanceUID,\n        };\n        return qidoDicomWebClient.retrieveBulkData(options).then(val => {\n          const ret = (val && val[0]) || undefined;\n          return ret;\n        });\n      },\n      series: {\n        metadata: async ({\n          StudyInstanceUID,\n          filters,\n          sortCriteria,\n          sortFunction,\n          madeInClient = false,\n        } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          if (dicomWebConfig.enableStudyLazyLoad) {\n            return implementation._retrieveSeriesMetadataAsync(\n              StudyInstanceUID,\n              filters,\n              sortCriteria,\n              sortFunction,\n              madeInClient\n            );\n          }\n\n          return implementation._retrieveSeriesMetadataSync(\n            StudyInstanceUID,\n            filters,\n            sortCriteria,\n            sortFunction,\n            madeInClient\n          );\n        },\n      },\n    },\n\n    store: {\n      dicom: async (dataset, request) => {\n        wadoDicomWebClient.headers = getAuthrorizationHeader();\n        if (dataset instanceof ArrayBuffer) {\n          const options = {\n            datasets: [dataset],\n            request,\n          };\n          await wadoDicomWebClient.storeInstances(options);\n        } else {\n          const meta = {\n            FileMetaInformationVersion: dataset._meta.FileMetaInformationVersion.Value,\n            MediaStorageSOPClassUID: dataset.SOPClassUID,\n            MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,\n            TransferSyntaxUID: EXPLICIT_VR_LITTLE_ENDIAN,\n            ImplementationClassUID,\n            ImplementationVersionName,\n          };\n\n          const denaturalized = denaturalizeDataset(meta);\n          const dicomDict = new DicomDict(denaturalized);\n\n          dicomDict.dict = denaturalizeDataset(dataset);\n\n          const part10Buffer = dicomDict.write();\n\n          const options = {\n            datasets: [part10Buffer],\n            request,\n          };\n\n          await wadoDicomWebClient.storeInstances(options);\n        }\n      },\n    },\n\n    _retrieveSeriesMetadataSync: async (\n      StudyInstanceUID,\n      filters,\n      sortCriteria,\n      sortFunction,\n      madeInClient\n    ) => {\n      const enableStudyLazyLoad = false;\n      wadoDicomWebClient.headers = generateWadoHeader();\n      // data is all SOPInstanceUIDs\n      const data = await retrieveStudyMetadata(\n        wadoDicomWebClient,\n        StudyInstanceUID,\n        enableStudyLazyLoad,\n        filters,\n        sortCriteria,\n        sortFunction\n      );\n\n      // first naturalize the data\n      const naturalizedInstancesMetadata = data.map(naturalizeDataset);\n\n      const seriesSummaryMetadata = {};\n      const instancesPerSeries = {};\n\n      naturalizedInstancesMetadata.forEach(instance => {\n        if (!seriesSummaryMetadata[instance.SeriesInstanceUID]) {\n          seriesSummaryMetadata[instance.SeriesInstanceUID] = {\n            StudyInstanceUID: instance.StudyInstanceUID,\n            StudyDescription: instance.StudyDescription,\n            SeriesInstanceUID: instance.SeriesInstanceUID,\n            SeriesDescription: instance.SeriesDescription,\n            SeriesNumber: instance.SeriesNumber,\n            SeriesTime: instance.SeriesTime,\n            SOPClassUID: instance.SOPClassUID,\n            ProtocolName: instance.ProtocolName,\n            Modality: instance.Modality,\n          };\n        }\n\n        if (!instancesPerSeries[instance.SeriesInstanceUID]) {\n          instancesPerSeries[instance.SeriesInstanceUID] = [];\n        }\n\n        const imageId = implementation.getImageIdsForInstance({\n          instance,\n        });\n\n        instance.imageId = imageId;\n\n        metadataProvider.addImageIdToUIDs(imageId, {\n          StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          SOPInstanceUID: instance.SOPInstanceUID,\n        });\n\n        instancesPerSeries[instance.SeriesInstanceUID].push(instance);\n      });\n\n      // grab all the series metadata\n      const seriesMetadata = Object.values(seriesSummaryMetadata);\n      DicomMetadataStore.addSeriesMetadata(seriesMetadata, madeInClient);\n\n      Object.keys(instancesPerSeries).forEach(seriesInstanceUID =>\n        DicomMetadataStore.addInstances(instancesPerSeries[seriesInstanceUID], madeInClient)\n      );\n    },\n\n    _retrieveSeriesMetadataAsync: async (\n      StudyInstanceUID,\n      filters,\n      sortCriteria,\n      sortFunction,\n      madeInClient = false\n    ) => {\n      const enableStudyLazyLoad = true;\n      wadoDicomWebClient.headers = generateWadoHeader();\n      // Get Series\n      const { preLoadData: seriesSummaryMetadata, promises: seriesPromises } =\n        await retrieveStudyMetadata(\n          wadoDicomWebClient,\n          StudyInstanceUID,\n          enableStudyLazyLoad,\n          filters,\n          sortCriteria,\n          sortFunction\n        );\n\n      /**\n       * naturalizes the dataset, and adds a retrieve bulkdata method\n       * to any values containing BulkDataURI.\n       * @param {*} instance\n       * @returns naturalized dataset, with retrieveBulkData methods\n       */\n      const addRetrieveBulkData = instance => {\n        const naturalized = naturalizeDataset(instance);\n\n        // if we know the server doesn't use bulkDataURI, then don't\n        if (!dicomWebConfig.bulkDataURI?.enabled) {\n          return naturalized;\n        }\n\n        Object.keys(naturalized).forEach(key => {\n          const value = naturalized[key];\n\n          // The value.Value will be set with the bulkdata read value\n          // in which case it isn't necessary to re-read this.\n          if (value && value.BulkDataURI && !value.Value) {\n            // Provide a method to fetch bulkdata\n            value.retrieveBulkData = () => {\n              // handle the scenarios where bulkDataURI is relative path\n              fixBulkDataURI(value, naturalized, dicomWebConfig);\n\n              const options = {\n                // The bulkdata fetches work with either multipart or\n                // singlepart, so set multipart to false to let the server\n                // decide which type to respond with.\n                multipart: false,\n                BulkDataURI: value.BulkDataURI,\n                // The study instance UID is required if the bulkdata uri\n                // is relative - that isn't disallowed by DICOMweb, but\n                // isn't well specified in the standard, but is needed in\n                // any implementation that stores static copies of the metadata\n                StudyInstanceUID: naturalized.StudyInstanceUID,\n              };\n              // Todo: this needs to be from wado dicom web client\n              return qidoDicomWebClient.retrieveBulkData(options).then(val => {\n                // There are DICOM PDF cases where the first ArrayBuffer in the array is\n                // the bulk data and DICOM video cases where the second ArrayBuffer is\n                // the bulk data. Here we play it safe and do a find.\n                const ret =\n                  (val instanceof Array && val.find(arrayBuffer => arrayBuffer?.byteLength)) ||\n                  undefined;\n                value.Value = ret;\n                return ret;\n              });\n            };\n          }\n        });\n        return naturalized;\n      };\n\n      // Async load series, store as retrieved\n      function storeInstances(instances) {\n        const naturalizedInstances = instances.map(addRetrieveBulkData);\n\n        // Adding instanceMetadata to OHIF MetadataProvider\n        naturalizedInstances.forEach((instance, index) => {\n          instance.wadoRoot = dicomWebConfig.wadoRoot;\n          instance.wadoUri = dicomWebConfig.wadoUri;\n\n          const imageId = implementation.getImageIdsForInstance({\n            instance,\n          });\n\n          // Adding imageId to each instance\n          // Todo: This is not the best way I can think of to let external\n          // metadata handlers know about the imageId that is stored in the store\n          instance.imageId = imageId;\n\n          // Adding UIDs to metadataProvider\n          // Note: storing imageURI in metadataProvider since stack viewports\n          // will use the same imageURI\n          metadataProvider.addImageIdToUIDs(imageId, {\n            StudyInstanceUID,\n            SeriesInstanceUID: instance.SeriesInstanceUID,\n            SOPInstanceUID: instance.SOPInstanceUID,\n          });\n        });\n\n        DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\n      }\n\n      function setSuccessFlag() {\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n        study.isLoaded = true;\n      }\n\n      // Google Cloud Healthcare doesn't return StudyInstanceUID, so we need to add\n      // it manually here\n      seriesSummaryMetadata.forEach(aSeries => {\n        aSeries.StudyInstanceUID = StudyInstanceUID;\n      });\n\n      DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\n\n      const seriesDeliveredPromises = seriesPromises.map(promise =>\n        promise.then(instances => {\n          storeInstances(instances);\n        })\n      );\n      await Promise.all(seriesDeliveredPromises);\n      setSuccessFlag();\n    },\n    deleteStudyMetadataPromise,\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n\n        if (NumberOfFrames > 1) {\n          for (let frame = 1; frame <= NumberOfFrames; frame++) {\n            const imageId = this.getImageIdsForInstance({\n              instance,\n              frame,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = this.getImageIdsForInstance({ instance });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const imageIds = getImageId({\n        instance,\n        frame,\n        config: dicomWebConfig,\n      });\n      return imageIds;\n    },\n    getConfig() {\n      return dicomWebConfigCopy;\n    },\n    getStudyInstanceUIDs({ params, query }) {\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\n      const queryStudyInstanceUIDs = utils.splitComma(query.getAll('StudyInstanceUIDs'));\n\n      const StudyInstanceUIDs =\n        (queryStudyInstanceUIDs.length && queryStudyInstanceUIDs) || paramsStudyInstanceUIDs;\n      const StudyInstanceUIDsAsArray =\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\n          ? StudyInstanceUIDs\n          : [StudyInstanceUIDs];\n\n      return StudyInstanceUIDsAsArray;\n    },\n  };\n\n  if (dicomWebConfig.supportsReject) {\n    implementation.reject = dcm4cheeReject(dicomWebConfig.wadoRoot);\n  }\n\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomWebApi };\n","export default function (wadoRoot) {\n  return {\n    series: (StudyInstanceUID, SeriesInstanceUID) => {\n      return new Promise((resolve, reject) => {\n        // Reject because of Quality. (Seems the most sensible out of the options)\n        const CodeValueAndCodeSchemeDesignator = `113001%5EDCM`;\n\n        const url = `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/reject/${CodeValueAndCodeSchemeDesignator}`;\n\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', url, true);\n\n        //Send the proper header information along with the request\n        // TODO -> Auth when we re-add authorization.\n\n        console.log(xhr);\n\n        xhr.onreadystatechange = function () {\n          //Call a function when the state changes.\n          if (xhr.readyState == 4) {\n            switch (xhr.status) {\n              case 204:\n                resolve(xhr.responseText);\n\n                break;\n              case 404:\n                reject('Your dataSource does not support reject functionality');\n            }\n          }\n        };\n        xhr.send();\n      });\n    },\n  };\n}\n","import { DicomMetadataStore, IWebApiDataSource } from '@ohif/core';\nimport OHIF from '@ohif/core';\n\nimport getImageId from '../DicomWebDataSource/utils/getImageId';\nimport getDirectURL from '../utils/getDirectURL';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\n\nconst mappings = {\n  studyInstanceUid: 'StudyInstanceUID',\n  patientId: 'PatientID',\n};\n\nlet _store = {\n  urls: [],\n  studyInstanceUIDMap: new Map(), // map of urls to array of study instance UIDs\n  // {\n  //   url: url1\n  //   studies: [Study1, Study2], // if multiple studies\n  // }\n  // {\n  //   url: url2\n  //   studies: [Study1],\n  // }\n  // }\n};\n\nconst getMetaDataByURL = url => {\n  return _store.urls.find(metaData => metaData.url === url);\n};\n\nconst findStudies = (key, value) => {\n  let studies = [];\n  _store.urls.map(metaData => {\n    metaData.studies.map(aStudy => {\n      if (aStudy[key] === value) {\n        studies.push(aStudy);\n      }\n    });\n  });\n  return studies;\n};\n\nfunction createDicomJSONApi(dicomJsonConfig) {\n  const { wadoRoot } = dicomJsonConfig;\n\n  const implementation = {\n    initialize: async ({ query, url }) => {\n      if (!url) {\n        url = query.get('url');\n      }\n      let metaData = getMetaDataByURL(url);\n\n      // if we have already cached the data from this specific url\n      // We are only handling one StudyInstanceUID to run; however,\n      // all studies for patientID will be put in the correct tab\n      if (metaData) {\n        return metaData.studies.map(aStudy => {\n          return aStudy.StudyInstanceUID;\n        });\n      }\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      let StudyInstanceUID;\n      let SeriesInstanceUID;\n      data.studies.forEach(study => {\n        StudyInstanceUID = study.StudyInstanceUID;\n\n        study.series.forEach(series => {\n          SeriesInstanceUID = series.SeriesInstanceUID;\n\n          series.instances.forEach(instance => {\n            const { url: imageId, metadata: naturalizedDicom } = instance;\n\n            // Add imageId specific mapping to this data as the URL isn't necessarliy WADO-URI.\n            metadataProvider.addImageIdToUIDs(imageId, {\n              StudyInstanceUID,\n              SeriesInstanceUID,\n              SOPInstanceUID: naturalizedDicom.SOPInstanceUID,\n            });\n          });\n        });\n      });\n\n      _store.urls.push({\n        url,\n        studies: [...data.studies],\n      });\n      _store.studyInstanceUIDMap.set(\n        url,\n        data.studies.map(study => study.StudyInstanceUID)\n      );\n    },\n    query: {\n      studies: {\n        mapParams: () => {},\n        search: async param => {\n          const [key, value] = Object.entries(param)[0];\n          const mappedParam = mappings[key];\n\n          // todo: should fetch from dicomMetadataStore\n          const studies = findStudies(mappedParam, value);\n\n          return studies.map(aStudy => {\n            return {\n              accession: aStudy.AccessionNumber,\n              date: aStudy.StudyDate,\n              description: aStudy.StudyDescription,\n              instances: aStudy.NumInstances,\n              modalities: aStudy.Modalities,\n              mrn: aStudy.PatientID,\n              patientName: aStudy.PatientName,\n              studyInstanceUid: aStudy.StudyInstanceUID,\n              NumInstances: aStudy.NumInstances,\n              time: aStudy.StudyTime,\n            };\n          });\n        },\n        processResults: () => {\n          console.debug(' DICOMJson QUERY processResults');\n        },\n      },\n      series: {\n        // mapParams: mapParams.bind(),\n        search: () => {\n          console.debug(' DICOMJson QUERY SERIES SEARCH');\n        },\n      },\n      instances: {\n        search: () => {\n          console.debug(' DICOMJson QUERY instances SEARCH');\n        },\n      },\n    },\n    retrieve: {\n      /**\n       * Generates a URL that can be used for direct retrieve of the bulkdata\n       *\n       * @param {object} params\n       * @param {string} params.tag is the tag name of the URL to retrieve\n       * @param {string} params.defaultPath path for the pixel data url\n       * @param {object} params.instance is the instance object that the tag is in\n       * @param {string} params.defaultType is the mime type of the response\n       * @param {string} params.singlepart is the type of the part to retrieve\n       * @param {string} params.fetchPart unknown?\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\n       */\n      directURL: params => {\n        return getDirectURL(wadoRoot, params);\n      },\n      series: {\n        metadata: ({ StudyInstanceUID, madeInClient = false, customSort } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          const study = findStudies('StudyInstanceUID', StudyInstanceUID)[0];\n          let series;\n\n          if (customSort) {\n            series = customSort(study.series);\n          } else {\n            series = study.series;\n          }\n\n          const seriesSummaryMetadata = series.map(series => {\n            const seriesSummary = {\n              StudyInstanceUID: study.StudyInstanceUID,\n              ...series,\n            };\n            delete seriesSummary.instances;\n            return seriesSummary;\n          });\n\n          // Async load series, store as retrieved\n          function storeInstances(naturalizedInstances) {\n            DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\n          }\n\n          DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\n\n          function setSuccessFlag() {\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n            study.isLoaded = true;\n          }\n\n          const numberOfSeries = series.length;\n          series.forEach((series, index) => {\n            const instances = series.instances.map(instance => {\n              const obj = {\n                ...instance.metadata,\n                url: instance.url,\n                imageId: instance.url,\n                ...series,\n                ...study,\n              };\n              delete obj.instances;\n              delete obj.series;\n              return obj;\n            });\n            storeInstances(instances);\n            if (index === numberOfSeries - 1) {\n              setSuccessFlag();\n            }\n          });\n        },\n      },\n    },\n    store: {\n      dicom: () => {\n        console.debug(' DICOMJson store dicom');\n      },\n    },\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n\n        if (NumberOfFrames > 1) {\n          for (let i = 0; i < NumberOfFrames; i++) {\n            const imageId = getImageId({\n              instance,\n              frame: i,\n              config: dicomJsonConfig,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = getImageId({ instance, config: dicomJsonConfig });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const imageIds = getImageId({ instance, frame });\n      return imageIds;\n    },\n    getStudyInstanceUIDs: ({ params, query }) => {\n      const url = query.get('url');\n      return _store.studyInstanceUIDMap.get(url);\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomJSONApi };\n","import { DicomMetadataStore, IWebApiDataSource, utils } from '@ohif/core';\nimport OHIF from '@ohif/core';\nimport dcmjs from 'dcmjs';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\nconst { EVENTS } = DicomMetadataStore;\n\nconst END_MODALITIES = {\n  SR: true,\n  SEG: true,\n  DOC: true,\n};\n\nconst compareValue = (v1, v2, def = 0) => {\n  if (v1 === v2) {\n    return def;\n  }\n  if (v1 < v2) {\n    return -1;\n  }\n  return 1;\n};\n\n// Sorting SR modalities to be at the end of series list\nconst customSort = (seriesA, seriesB) => {\n  const instanceA = seriesA.instances[0];\n  const instanceB = seriesB.instances[0];\n  const modalityA = instanceA.Modality;\n  const modalityB = instanceB.Modality;\n\n  const isEndA = END_MODALITIES[modalityA];\n  const isEndB = END_MODALITIES[modalityB];\n\n  if (isEndA && isEndB) {\n    // Compare by series date\n    return compareValue(instanceA.SeriesNumber, instanceB.SeriesNumber);\n  }\n  if (!isEndA && !isEndB) {\n    return compareValue(instanceB.SeriesNumber, instanceA.SeriesNumber);\n  }\n  return isEndA ? -1 : 1;\n};\n\nfunction createDicomLocalApi(dicomLocalConfig) {\n  const { name } = dicomLocalConfig;\n\n  const implementation = {\n    initialize: ({ params, query }) => {},\n    query: {\n      studies: {\n        mapParams: () => {},\n        search: params => {\n          const studyUIDs = DicomMetadataStore.getStudyInstanceUIDs();\n\n          return studyUIDs.map(StudyInstanceUID => {\n            let numInstances = 0;\n            const modalities = new Set();\n\n            // Calculating the number of instances in the study and modalities\n            // present in the study\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n            study.series.forEach(aSeries => {\n              numInstances += aSeries.instances.length;\n              modalities.add(aSeries.instances[0].Modality);\n            });\n\n            // first instance in the first series\n            const firstInstance = study?.series[0]?.instances[0];\n\n            if (firstInstance) {\n              return {\n                accession: firstInstance.AccessionNumber,\n                date: firstInstance.StudyDate,\n                description: firstInstance.StudyDescription,\n                mrn: firstInstance.PatientID,\n                patientName: utils.formatPN(firstInstance.PatientName),\n                studyInstanceUid: firstInstance.StudyInstanceUID,\n                time: firstInstance.StudyTime,\n                //\n                instances: numInstances,\n                modalities: Array.from(modalities).join('/'),\n                NumInstances: numInstances,\n              };\n            }\n          });\n        },\n        processResults: () => {\n          console.debug(' DICOMLocal QUERY processResults');\n        },\n      },\n      series: {\n        search: studyInstanceUID => {\n          const study = DicomMetadataStore.getStudy(studyInstanceUID);\n          return study.series.map(aSeries => {\n            const firstInstance = aSeries?.instances[0];\n            return {\n              studyInstanceUid: studyInstanceUID,\n              seriesInstanceUid: firstInstance.SeriesInstanceUID,\n              modality: firstInstance.Modality,\n              seriesNumber: firstInstance.SeriesNumber,\n              seriesDate: firstInstance.SeriesDate,\n              numSeriesInstances: aSeries.instances.length,\n              description: firstInstance.SeriesDescription,\n            };\n          });\n        },\n      },\n      instances: {\n        search: () => {\n          console.debug(' DICOMLocal QUERY instances SEARCH');\n        },\n      },\n    },\n    retrieve: {\n      directURL: params => {\n        const { instance, tag, defaultType } = params;\n\n        const value = instance[tag];\n        if (value instanceof Array && value[0] instanceof ArrayBuffer) {\n          return URL.createObjectURL(\n            new Blob([value[0]], {\n              type: defaultType,\n            })\n          );\n        }\n      },\n      series: {\n        metadata: async ({ StudyInstanceUID, madeInClient = false } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\n          }\n\n          // Instances metadata already added via local upload\n          const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\n\n          // Series metadata already added via local upload\n          DicomMetadataStore._broadcastEvent(EVENTS.SERIES_ADDED, {\n            StudyInstanceUID,\n            madeInClient,\n          });\n\n          study.series.forEach(aSeries => {\n            const { SeriesInstanceUID } = aSeries;\n\n            const isMultiframe = aSeries.instances[0].NumberOfFrames > 1;\n\n            aSeries.instances.forEach((instance, index) => {\n              const {\n                url: imageId,\n                StudyInstanceUID,\n                SeriesInstanceUID,\n                SOPInstanceUID,\n              } = instance;\n\n              instance.imageId = imageId;\n\n              // Add imageId specific mapping to this data as the URL isn't necessarily WADO-URI.\n              metadataProvider.addImageIdToUIDs(imageId, {\n                StudyInstanceUID,\n                SeriesInstanceUID,\n                SOPInstanceUID,\n                frameIndex: isMultiframe ? index : 1,\n              });\n            });\n\n            DicomMetadataStore._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n              StudyInstanceUID,\n              SeriesInstanceUID,\n              madeInClient,\n            });\n          });\n        },\n      },\n    },\n    store: {\n      dicom: naturalizedReport => {\n        const reportBlob = dcmjs.data.datasetToBlob(naturalizedReport);\n\n        //Create a URL for the binary.\n        var objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      },\n    },\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n        if (NumberOfFrames > 1) {\n          // in multiframe we start at frame 1\n          for (let i = 1; i <= NumberOfFrames; i++) {\n            const imageId = this.getImageIdsForInstance({\n              instance,\n              frame: i,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = this.getImageIdsForInstance({ instance });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n      const storedInstance = DicomMetadataStore.getInstance(\n        StudyInstanceUID,\n        SeriesInstanceUID,\n        SOPInstanceUID\n      );\n\n      let imageId = storedInstance.url;\n\n      if (frame !== undefined) {\n        imageId += `&frame=${frame}`;\n      }\n\n      return imageId;\n    },\n    deleteStudyMetadataPromise() {\n      console.log('deleteStudyMetadataPromise not implemented');\n    },\n    getStudyInstanceUIDs: ({ params, query }) => {\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\n      const queryStudyInstanceUIDs = query.getAll('StudyInstanceUIDs');\n\n      const StudyInstanceUIDs = queryStudyInstanceUIDs || paramsStudyInstanceUIDs;\n      const StudyInstanceUIDsAsArray =\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\n          ? StudyInstanceUIDs\n          : [StudyInstanceUIDs];\n\n      // Put SRs at the end of series list to make sure images are loaded first\n      let isStudyInCache = false;\n      StudyInstanceUIDsAsArray.forEach(StudyInstanceUID => {\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n        if (study) {\n          study.series = study.series.sort(customSort);\n          isStudyInCache = true;\n        }\n      });\n\n      return isStudyInCache ? StudyInstanceUIDsAsArray : [];\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomLocalApi };\n","import { IWebApiDataSource } from '@ohif/core';\nimport { createDicomWebApi } from '../DicomWebDataSource/index';\n\n/**\n * This datasource is initialized with a url that returns a JSON object with a\n * dicomWeb datasource configuration array present in a \"servers\" object.\n *\n * Only the first array item is parsed, if there are multiple items in the\n * dicomWeb configuration array\n *\n */\nfunction createDicomWebProxyApi(dicomWebProxyConfig, UserAuthenticationService) {\n  const { name } = dicomWebProxyConfig;\n  let dicomWebDelegate = undefined;\n\n  const implementation = {\n    initialize: async ({ params, query }) => {\n      const url = query.get('url');\n\n      if (!url) {\n        throw new Error(`No url for '${name}'`);\n      } else {\n        const response = await fetch(url);\n        let data = await response.json();\n        if (!data.servers?.dicomWeb?.[0]) {\n          throw new Error('Invalid configuration returned by url');\n        }\n\n        dicomWebDelegate = createDicomWebApi(\n          data.servers.dicomWeb[0].configuration,\n          UserAuthenticationService\n        );\n        dicomWebDelegate.initialize({ params, query });\n      }\n    },\n    query: {\n      studies: {\n        search: params => dicomWebDelegate.query.studies.search(params),\n      },\n      series: {\n        search: (...args) => dicomWebDelegate.query.series.search(...args),\n      },\n      instances: {\n        search: (studyInstanceUid, queryParameters) =>\n          dicomWebDelegate.query.instances.search(studyInstanceUid, queryParameters),\n      },\n    },\n    retrieve: {\n      directURL: (...args) => dicomWebDelegate.retrieve.directURL(...args),\n      series: {\n        metadata: (...args) => dicomWebDelegate.retrieve.series.metadata(...args),\n      },\n    },\n    store: {\n      dicom: (...args) => dicomWebDelegate.store(...args),\n    },\n    deleteStudyMetadataPromise: (...args) => dicomWebDelegate.deleteStudyMetadataPromise(...args),\n    getImageIdsForDisplaySet: (...args) => dicomWebDelegate.getImageIdsForDisplaySet(...args),\n    getImageIdsForInstance: (...args) => dicomWebDelegate.getImageIdsForInstance(...args),\n    getStudyInstanceUIDs({ params, query }) {\n      let studyInstanceUIDs = [];\n\n      // there seem to be a couple of variations of the case for this parameter\n      const queryStudyInstanceUIDs =\n        query.get('studyInstanceUIDs') || query.get('studyInstanceUids');\n      if (!queryStudyInstanceUIDs) {\n        throw new Error(`No studyInstanceUids in request for '${name}'`);\n      }\n      studyInstanceUIDs = queryStudyInstanceUIDs.split(';');\n      return studyInstanceUIDs;\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomWebProxyApi };\n","// TODO: Pull in IWebClientApi from @ohif/core\n// TODO: Use constructor to create an instance of IWebClientApi\n// TODO: Use existing DICOMWeb configuration (previously, appConfig, to configure instance)\n\nimport { createDicomWebApi } from './DicomWebDataSource/index.js';\nimport { createDicomJSONApi } from './DicomJSONDataSource/index.js';\nimport { createDicomLocalApi } from './DicomLocalDataSource/index.js';\nimport { createDicomWebProxyApi } from './DicomWebProxyDataSource/index.js';\n\n/**\n *\n */\nfunction getDataSourcesModule() {\n  return [\n    {\n      name: 'dicomweb',\n      type: 'webApi',\n      createDataSource: createDicomWebApi,\n    },\n    {\n      name: 'dicomwebproxy',\n      type: 'webApi',\n      createDataSource: createDicomWebProxyApi,\n    },\n    {\n      name: 'dicomjson',\n      type: 'jsonApi',\n      createDataSource: createDicomJSONApi,\n    },\n    {\n      name: 'dicomlocal',\n      type: 'localApi',\n      createDataSource: createDicomLocalApi,\n    },\n  ];\n}\n\nexport default getDataSourcesModule;\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\n\nexport default function Toolbar({ servicesManager }) {\n  const { toolbarService } = servicesManager.services;\n  const [toolbarButtons, setToolbarButtons] = useState([]);\n  const [buttonState, setButtonState] = useState({\n    primaryToolId: '',\n    toggles: {},\n    groups: {},\n  });\n\n  // Could track buttons and state separately...?\n  useEffect(() => {\n    const { unsubscribe: unsub1 } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_MODIFIED,\n      () => setToolbarButtons(toolbarService.getButtonSection('primary'))\n    );\n    const { unsubscribe: unsub2 } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\n      () => setButtonState({ ...toolbarService.state })\n    );\n\n    return () => {\n      unsub1();\n      unsub2();\n    };\n  }, [toolbarService]);\n\n  return (\n    <>\n      {toolbarButtons.map(toolDef => {\n        const { id, Component, componentProps } = toolDef;\n        // TODO: ...\n\n        // isActive if:\n        // - id is primary?\n        // - id is in list of \"toggled on\"?\n        let isActive;\n        if (componentProps.type === 'toggle') {\n          isActive = buttonState.toggles[id];\n        }\n        // Also need... to filter list for splitButton, and set primary based on most recently clicked\n        // Also need to kill the radioGroup button's magic logic\n        // Everything should be reactive off these props, so commands can inform ToolbarService\n\n        // These can... Trigger toolbar events based on updates?\n        // Then sync using useEffect, or simply modify the state here?\n        return (\n          // The margin for separating the tools on the toolbar should go here and NOT in each individual component (button) item.\n          // This allows for the individual items to be included in other UI components where perhaps alternative margins are desired.\n          <div\n            key={id}\n            className={classnames('mr-1')}\n          >\n            <Component\n              id={id}\n              {...componentProps}\n              bState={buttonState}\n              isActive={isActive}\n              onInteraction={args => toolbarService.recordInteraction(args)}\n              servicesManager={servicesManager}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router';\n\nimport { ErrorBoundary, UserPreferences, AboutModal, Header, useModal } from '@ohif/ui';\nimport i18n from '@ohif/i18n';\nimport { hotkeys } from '@ohif/core';\nimport { useAppConfig } from '@state';\nimport Toolbar from '../Toolbar/Toolbar';\n\nconst { availableLanguages, defaultLanguage, currentLanguage } = i18n;\n\nfunction ViewerHeader({ hotkeysManager, extensionManager, servicesManager }) {\n  const [appConfig] = useAppConfig();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onClickReturnButton = () => {\n    const { pathname } = location;\n    const dataSourceIdx = pathname.indexOf('/', 1);\n    const query = new URLSearchParams(window.location.search);\n    const configUrl = query.get('configUrl');\n\n    const dataSourceName = pathname.substring(dataSourceIdx + 1);\n    const existingDataSource = extensionManager.getDataSources(dataSourceName);\n\n    const searchQuery = new URLSearchParams();\n    if (dataSourceIdx !== -1 && existingDataSource) {\n      searchQuery.append('datasources', pathname.substring(dataSourceIdx + 1));\n    }\n\n    if (configUrl) {\n      searchQuery.append('configUrl', configUrl);\n    }\n\n    navigate({\n      pathname: '/',\n      search: decodeURIComponent(searchQuery.toString()),\n    });\n  };\n\n  const { t } = useTranslation();\n  const { show, hide } = useModal();\n  const { hotkeyDefinitions, hotkeyDefaults } = hotkeysManager;\n  const versionNumber = process.env.VERSION_NUMBER;\n  const commitHash = process.env.COMMIT_HASH;\n\n  const menuOptions = [\n    {\n      title: t('Header:About'),\n      icon: 'info',\n      onClick: () =>\n        show({\n          content: AboutModal,\n          title: 'About Gradient OHIF Viewer',\n          contentProps: { versionNumber, commitHash },\n        }),\n    },\n    {\n      title: t('Header:Preferences'),\n      icon: 'settings',\n      onClick: () =>\n        show({\n          title: t('UserPreferencesModal:User Preferences'),\n          content: UserPreferences,\n          contentProps: {\n            hotkeyDefaults: hotkeysManager.getValidHotkeyDefinitions(hotkeyDefaults),\n            hotkeyDefinitions,\n            currentLanguage: currentLanguage(),\n            availableLanguages,\n            defaultLanguage,\n            onCancel: () => {\n              hotkeys.stopRecord();\n              hotkeys.unpause();\n              hide();\n            },\n            onSubmit: ({ hotkeyDefinitions, language }) => {\n              if (language.value !== currentLanguage().value) {\n                i18n.changeLanguage(language.value);\n              }\n              hotkeysManager.setHotkeys(hotkeyDefinitions);\n              hide();\n            },\n            onReset: () => hotkeysManager.restoreDefaultBindings(),\n            hotkeysModule: hotkeys,\n          },\n        }),\n    },\n  ];\n\n  if (appConfig.oidc) {\n    menuOptions.push({\n      title: t('Header:Logout'),\n      icon: 'power-off',\n      onClick: async () => {\n        navigate(`/logout?redirect_uri=${encodeURIComponent(window.location.href)}`);\n      },\n    });\n  }\n\n  return (\n    <Header\n      menuOptions={menuOptions}\n      isReturnEnabled={!!appConfig.showStudyList}\n      onClickReturnButton={onClickReturnButton}\n      WhiteLabeling={appConfig.whiteLabeling}\n    >\n      <ErrorBoundary context=\"Primary Toolbar\">\n        <div className=\"relative flex justify-center\">\n          <Toolbar servicesManager={servicesManager} />\n        </div>\n      </ErrorBoundary>\n    </Header>\n  );\n}\n\nexport default ViewerHeader;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SidePanel, ErrorBoundary, LoadingIndicatorProgress } from '@ohif/ui';\nimport { ServicesManager, HangingProtocolService, CommandsManager } from '@ohif/core';\nimport { useAppConfig } from '@state';\nimport ViewerHeader from './ViewerHeader';\n\nfunction ViewerLayout({\n  // From Extension Module Params\n  extensionManager,\n  servicesManager,\n  hotkeysManager,\n  commandsManager,\n  // From Modes\n  viewports,\n  ViewportGridComp,\n  leftPanels = [],\n  rightPanels = [],\n  leftPanelDefaultClosed = false,\n  rightPanelDefaultClosed = false,\n}): React.FunctionComponent {\n  const [appConfig] = useAppConfig();\n\n  const { hangingProtocolService } = servicesManager.services;\n  const [showLoadingIndicator, setShowLoadingIndicator] = useState(appConfig.showLoadingIndicator);\n\n  /**\n   * Set body classes (tailwindcss) that don't allow vertical\n   * or horizontal overflow (no scrolling). Also guarantee window\n   * is sized to our viewport.\n   */\n  useEffect(() => {\n    document.body.classList.add('bg-black');\n    document.body.classList.add('overflow-hidden');\n    return () => {\n      document.body.classList.remove('bg-black');\n      document.body.classList.remove('overflow-hidden');\n    };\n  }, []);\n\n  const getComponent = id => {\n    const entry = extensionManager.getModuleEntry(id);\n\n    if (!entry) {\n      throw new Error(\n        `${id} is not a valid entry for an extension module, please check your configuration or make sure the extension is registered.`\n      );\n    }\n\n    let content;\n    if (entry && entry.component) {\n      content = entry.component;\n    } else {\n      throw new Error(\n        `No component found from extension ${id}. Check the reference string to the extension in your Mode configuration`\n      );\n    }\n\n    return { entry, content };\n  };\n\n  const getPanelData = id => {\n    const { content, entry } = getComponent(id);\n\n    return {\n      id: entry.id,\n      iconName: entry.iconName,\n      iconLabel: entry.iconLabel,\n      label: entry.label,\n      name: entry.name,\n      content,\n    };\n  };\n\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      HangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n\n      // Todo: right now to set the loading indicator to false, we need to wait for the\n      // hangingProtocolService to finish applying the viewport matching to each viewport,\n      // however, this might not be the only approach to set the loading indicator to false. we need to explore this further.\n      () => {\n        setShowLoadingIndicator(false);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [hangingProtocolService]);\n\n  const getViewportComponentData = viewportComponent => {\n    const { entry } = getComponent(viewportComponent.namespace);\n\n    return {\n      component: entry.component,\n      displaySetsToDisplay: viewportComponent.displaySetsToDisplay,\n    };\n  };\n\n  const leftPanelComponents = leftPanels.map(getPanelData);\n  const rightPanelComponents = rightPanels.map(getPanelData);\n  const viewportComponents = viewports.map(getViewportComponentData);\n\n  return (\n    <div>\n      <ViewerHeader\n        hotkeysManager={hotkeysManager}\n        extensionManager={extensionManager}\n        servicesManager={servicesManager}\n      />\n      <div\n        className=\"relative flex w-full flex-row flex-nowrap items-stretch overflow-hidden bg-black\"\n        style={{ height: 'calc(100vh - 52px' }}\n      >\n        <React.Fragment>\n          {showLoadingIndicator && <LoadingIndicatorProgress className=\"h-full w-full bg-black\" />}\n          {/* LEFT SIDEPANELS */}\n          {leftPanelComponents.length ? (\n            <ErrorBoundary context=\"Left Panel\">\n              <SidePanel\n                side=\"left\"\n                activeTabIndex={leftPanelDefaultClosed ? null : 0}\n                tabs={leftPanelComponents}\n                servicesManager={servicesManager}\n              />\n            </ErrorBoundary>\n          ) : null}\n          {/* TOOLBAR + GRID */}\n          <div className=\"flex h-full flex-1 flex-col\">\n            <div className=\"relative flex h-full flex-1 items-center justify-center overflow-hidden bg-black\">\n              <ErrorBoundary context=\"Grid\">\n                <ViewportGridComp\n                  servicesManager={servicesManager}\n                  viewportComponents={viewportComponents}\n                  commandsManager={commandsManager}\n                />\n              </ErrorBoundary>\n            </div>\n          </div>\n          {rightPanelComponents.length ? (\n            <ErrorBoundary context=\"Right Panel\">\n              <SidePanel\n                side=\"right\"\n                activeTabIndex={rightPanelDefaultClosed ? null : 0}\n                tabs={rightPanelComponents}\n                servicesManager={servicesManager}\n              />\n            </ErrorBoundary>\n          ) : null}\n        </React.Fragment>\n      </div>\n    </div>\n  );\n}\n\nViewerLayout.propTypes = {\n  // From extension module params\n  extensionManager: PropTypes.shape({\n    getModuleEntry: PropTypes.func.isRequired,\n  }).isRequired,\n  commandsManager: PropTypes.instanceOf(CommandsManager),\n  servicesManager: PropTypes.instanceOf(ServicesManager),\n  // From modes\n  leftPanels: PropTypes.array,\n  rightPanels: PropTypes.array,\n  leftPanelDefaultClosed: PropTypes.bool.isRequired,\n  rightPanelDefaultClosed: PropTypes.bool.isRequired,\n  /** Responsible for rendering our grid of viewports; provided by consuming application */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  viewports: PropTypes.array,\n};\n\nexport default ViewerLayout;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { StudyBrowser, useImageViewer, useViewportGrid } from '@ohif/ui';\nimport { utils } from '@ohif/core';\nimport { useNavigate } from 'react-router-dom';\n\nconst { sortStudyInstances, formatDate } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowser({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}) {\n  const { hangingProtocolService, displaySetService, uiNotificationService } =\n    servicesManager.services;\n  const navigate = useNavigate();\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n  const isMounted = useRef(true);\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message: 'The selected display sets could not be added to the viewport.',\n        type: 'info',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\n\n  // // ~~ Initial Thumbnails\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (imageId && !displaySet?.unsupported) {\n        // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n        newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n        if (isMounted.current) {\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        }\n      }\n    });\n    return () => {\n      isMounted.current = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // ~~ displaySets\n  useEffect(() => {\n    // TODO: Are we sure `activeDisplaySets` will always be accurate?\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    const mappedDisplaySets = _mapDisplaySets(currentDisplaySets, thumbnailImageSrcMap);\n    sortStudyInstances(mappedDisplaySets);\n\n    setDisplaySets(mappedDisplaySets);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [thumbnailImageSrcMap]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        const { displaySetsAdded } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n          if (!displaySet?.unsupported) {\n            const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n            const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n            // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n            if (imageId) {\n              // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n              newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\n                imageId,\n                dSet.initialViewport\n              );\n              if (isMounted.current) {\n                setThumbnailImageSrcMap(prevState => {\n                  return { ...prevState, ...newImageSrcEntry };\n                });\n              }\n            }\n          }\n        });\n      }\n    );\n\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(changedDisplaySets, thumbnailImageSrcMap);\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          thumbnailImageSrcMap\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const tabs = _createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? // eslint-disable-next-line prettier/prettier\n        [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  const activeDisplaySetInstanceUIDs = viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      servicesManager={servicesManager}\n      activeTabName={activeTabName}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeDisplaySetInstanceUIDs}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n    />\n  );\n}\n\nPanelStudyBrowser.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowser;\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(displaySets, thumbnailImageSrcMap) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n\n      const array =\n        componentType === 'thumbnail' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n\n      array.push({\n        displaySetInstanceUID: ds.displaySetInstanceUID,\n        description: ds.SeriesDescription || '',\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: ds.SeriesDate,\n        seriesTime: ds.SeriesTime,\n        numInstances: ds.numImageFrames,\n        countIcon: ds.countIcon,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        messages: ds.messages,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID: ds.displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n      });\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    // TODO probably others.\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnail';\n}\n\n/**\n *\n * @param {string[]} primaryStudyInstanceUIDs\n * @param {object[]} studyDisplayList\n * @param {string} studyDisplayList.studyInstanceUid\n * @param {string} studyDisplayList.date\n * @param {string} studyDisplayList.description\n * @param {string} studyDisplayList.modalities\n * @param {number} studyDisplayList.numInstances\n * @param {object[]} displaySets\n * @returns tabs - The prop object expected by the StudyBrowser component\n */\nfunction _createStudyBrowserTabs(primaryStudyInstanceUIDs, studyDisplayList, displaySets) {\n  const primaryStudies = [];\n  const recentStudies = [];\n  const allStudies = [];\n\n  studyDisplayList.forEach(study => {\n    const displaySetsForStudy = displaySets.filter(\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\n    );\n    const tabStudy = Object.assign({}, study, {\n      displaySets: displaySetsForStudy,\n    });\n\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\n      primaryStudies.push(tabStudy);\n    } else {\n      // TODO: Filter allStudies to dates within one year of current date\n      recentStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    }\n  });\n\n  const tabs = [\n    {\n      name: 'primary',\n      label: 'Primary',\n      studies: primaryStudies,\n    },\n    {\n      name: 'recent',\n      label: 'Recent',\n      studies: recentStudies,\n    },\n    {\n      name: 'all',\n      label: 'All',\n      studies: allStudies,\n    },\n  ];\n\n  return tabs;\n}\n","/**\n * @param {*} cornerstone\n * @param {*} imageId\n */\nfunction getImageSrcFromImageId(cornerstone, imageId) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId })\n      .then(imageId => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\nexport default getImageSrcFromImageId;\n","async function getStudiesForPatientByMRN(dataSource, qidoForStudyUID) {\n  if (qidoForStudyUID && qidoForStudyUID.length && qidoForStudyUID[0].mrn) {\n    return dataSource.query.studies.search({\n      patientId: qidoForStudyUID[0].mrn,\n    });\n  }\n  console.log('No mrn found for', qidoForStudyUID);\n  return qidoForStudyUID;\n}\n\nexport default getStudiesForPatientByMRN;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  displaySetService,\n  StudyInstanceUID,\n  madeInClient\n) {\n  // TODO: is this already short-circuited by the map of Retrieve promises?\n  if (\n    displaySetService.activeDisplaySets.some(\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//\nimport PanelStudyBrowser from './PanelStudyBrowser';\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\nimport getStudiesForPatientByMRN from './getStudiesForPatientByMRN';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowser({ commandsManager, extensionManager, servicesManager }) {\n  // TODO: This should be made available a different way; route should have\n  // already determined our datasource\n  const dataSource = extensionManager.getDataSources()[0];\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\n  const _getImageSrcFromImageId = _createGetImageSrcFromImageIdFn(extensionManager);\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\n    null,\n    dataSource\n  );\n\n  return (\n    <PanelStudyBrowser\n      servicesManager={servicesManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\n/**\n * Grabs cornerstone library reference using a dependent command from\n * the @ohif/extension-cornerstone extension. Then creates a helper function\n * that can take an imageId and return an image src.\n *\n * @param {func} getCommand - CommandManager's getCommand method\n * @returns {func} getImageSrcFromImageId - A utility function powered by\n * cornerstone\n */\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nWrappedPanelStudyBrowser.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n\nimport { LegacyButton, ButtonGroup } from '@ohif/ui';\n\nfunction ActionButtons({ onExportClick, onCreateReportClick }) {\n  const { t } = useTranslation('MeasurementTable');\n\n  return (\n    <React.Fragment>\n      <ButtonGroup\n        color=\"black\"\n        size=\"inherit\"\n      >\n        {/* TODO Revisit design of ButtonGroup later - for now use LegacyButton for its children.*/}\n        <LegacyButton\n          className=\"px-2 py-2 text-base\"\n          onClick={onExportClick}\n        >\n          {t('Export CSV')}\n        </LegacyButton>\n        <LegacyButton\n          className=\"px-2 py-2 text-base\"\n          onClick={onCreateReportClick}\n        >\n          {t('Create Report')}\n        </LegacyButton>\n      </ButtonGroup>\n    </React.Fragment>\n  );\n}\n\nActionButtons.propTypes = {\n  onExportClick: PropTypes.func,\n  onCreateReportClick: PropTypes.func,\n};\n\nActionButtons.defaultProps = {\n  onExportClick: () => alert('Export'),\n  onCreateReportClick: () => alert('Create Report'),\n};\n\nexport default ActionButtons;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { ButtonEnums, Dialog, Input, Select } from '@ohif/ui';\n\nexport const CREATE_REPORT_DIALOG_RESPONSE = {\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n};\n\nexport default function createReportDialogPrompt(uiDialogService, { extensionManager }) {\n  return new Promise(function (resolve, reject) {\n    let dialogId = undefined;\n\n    const _handleClose = () => {\n      // Dismiss dialog\n      uiDialogService.dismiss({ id: dialogId });\n      // Notify of cancel action\n      resolve({\n        action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\n        value: undefined,\n        dataSourceName: undefined,\n      });\n    };\n\n    /**\n     *\n     * @param {string} param0.action - value of action performed\n     * @param {string} param0.value - value from input field\n     */\n    const _handleFormSubmit = ({ action, value }) => {\n      uiDialogService.dismiss({ id: dialogId });\n      switch (action.id) {\n        case 'save':\n          resolve({\n            action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\n            value: value.label,\n            dataSourceName: value.dataSourceName,\n          });\n          break;\n        case 'cancel':\n          resolve({\n            action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\n            value: undefined,\n            dataSourceName: undefined,\n          });\n          break;\n      }\n    };\n\n    const dataSourcesOpts = Object.keys(extensionManager.dataSourceMap)\n      .filter(ds => {\n        const configuration = extensionManager.dataSourceDefs[ds]?.configuration;\n        const supportsStow = configuration?.supportsStow ?? configuration?.wadoRoot;\n        return supportsStow;\n      })\n      .map(ds => {\n        return {\n          value: ds,\n          label: ds,\n          placeHolder: ds,\n        };\n      });\n\n    dialogId = uiDialogService.create({\n      centralize: true,\n      isDraggable: false,\n      content: Dialog,\n      useLastPosition: false,\n      showOverlay: true,\n      contentProps: {\n        title: 'Create Report',\n        value: {\n          label: '',\n          dataSourceName: extensionManager.activeDataSource,\n        },\n        noCloseButton: true,\n        onClose: _handleClose,\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        // TODO: Should be on button press...\n        onSubmit: _handleFormSubmit,\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              uiDialogService.dismiss({ id: dialogId });\n              resolve({\n                action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\n                value: value.label,\n              });\n            }\n          };\n          return (\n            <>\n              {dataSourcesOpts.length > 1 && (\n                <Select\n                  closeMenuOnSelect={true}\n                  className=\"border-primary-main mr-2 bg-black\"\n                  options={dataSourcesOpts}\n                  placeholder={\n                    dataSourcesOpts.find(option => option.value === value.dataSourceName)\n                      .placeHolder\n                  }\n                  value={value.dataSourceName}\n                  onChange={evt => {\n                    setValue(v => ({ ...v, dataSourceName: evt.value }));\n                  }}\n                  isClearable={false}\n                />\n              )}\n              <Input\n                autoFocus\n                label=\"Enter the report name\"\n                labelClassName=\"text-white text-[14px] leading-[1.2]\"\n                className=\"border-primary-main bg-black\"\n                type=\"text\"\n                value={value.label}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                required\n              />\n            </>\n          );\n        },\n      },\n    });\n  });\n}\n","import React from 'react';\nimport { DicomMetadataStore } from '@ohif/core';\n\n/**\n *\n * @param {*} servicesManager\n * @param {*} dataSource\n * @param {*} measurements\n * @param {*} options\n * @returns {string[]} displaySetInstanceUIDs\n */\nasync function createReportAsync(\n  servicesManager,\n  commandsManager,\n  dataSource,\n  measurements,\n  options\n) {\n  const { displaySetService, uiNotificationService, uiDialogService } = servicesManager.services;\n  const loadingDialogId = uiDialogService.create({\n    showOverlay: true,\n    isDraggable: false,\n    centralize: true,\n    // TODO: Create a loading indicator component + zeplin design?\n    content: Loading,\n  });\n\n  try {\n    const naturalizedReport = await commandsManager.runCommand(\n      'storeMeasurements',\n      {\n        measurementData: measurements,\n        dataSource,\n        additionalFindingTypes: ['ArrowAnnotate'],\n        options,\n      },\n      'CORNERSTONE_STRUCTURED_REPORT'\n    );\n\n    // The \"Mode\" route listens for DicomMetadataStore changes\n    // When a new instance is added, it listens and\n    // automatically calls makeDisplaySets\n    DicomMetadataStore.addInstances([naturalizedReport], true);\n\n    const displaySetInstanceUID = displaySetService.getMostRecentDisplaySet();\n\n    uiNotificationService.show({\n      title: 'Create Report',\n      message: 'Measurements saved successfully',\n      type: 'success',\n    });\n\n    return [displaySetInstanceUID];\n  } catch (error) {\n    uiNotificationService.show({\n      title: 'Create Report',\n      message: error.message || 'Failed to store measurements',\n      type: 'error',\n    });\n  } finally {\n    uiDialogService.dismiss({ id: loadingDialogId });\n  }\n}\n\nfunction Loading() {\n  return <div className=\"text-primary-active\">Loading...</div>;\n}\n\nexport default createReportAsync;\n","const MIN_SR_SERIES_NUMBER = 4700;\n\nexport default function getNextSRSeriesNumber(displaySetService) {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\n\n  return maxSeriesNumber + 1;\n}\n","import { DisplaySetService, Types } from '@ohif/core';\n\nimport getNextSRSeriesNumber from './getNextSRSeriesNumber';\n\n/**\n * Find an SR having the same series description.\n * This is used by the store service in order to store DICOM SR's having the\n * same Series Description into a single series under consecutive instance numbers\n * That way, they are all organized as a set and could have tools to view\n * \"prior\" SR instances.\n *\n * @param SeriesDescription - is the description to look for\n * @param displaySetService - the display sets to search for DICOM SR in\n * @returns SeriesMetadata from a DICOM SR having the same series description\n */\nexport default function findSRWithSameSeriesDescription(\n  SeriesDescription: string,\n  displaySetService: DisplaySetService\n): Types.SeriesMetadata {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const sameSeries = srDisplaySets.find(ds => ds.SeriesDescription === SeriesDescription);\n  if (sameSeries) {\n    console.log('Storing to same series', sameSeries);\n    const { instance } = sameSeries;\n    const { SeriesInstanceUID, SeriesDescription, SeriesDate, SeriesTime, SeriesNumber, Modality } =\n      instance;\n    return {\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesDate,\n      SeriesTime,\n      SeriesNumber,\n      Modality,\n      InstanceNumber: sameSeries.instances.length + 1,\n    };\n  }\n\n  const SeriesNumber = getNextSRSeriesNumber(displaySetService);\n  return { SeriesDescription, SeriesNumber };\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { utils, ServicesManager } from '@ohif/core';\nimport { MeasurementTable, Dialog, Input, useViewportGrid, ButtonEnums } from '@ohif/ui';\nimport ActionButtons from './ActionButtons';\nimport debounce from 'lodash.debounce';\n\nimport createReportDialogPrompt, {\n  CREATE_REPORT_DIALOG_RESPONSE,\n} from './createReportDialogPrompt';\nimport createReportAsync from '../Actions/createReportAsync';\nimport findSRWithSameSeriesDescription from '../utils/findSRWithSameSeriesDescription';\n\nconst { downloadCSVReport } = utils;\n\nexport default function PanelMeasurementTable({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}): React.FunctionComponent {\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const { activeViewportId, viewports } = viewportGrid;\n  const { measurementService, uiDialogService, uiNotificationService, displaySetService } = (\n    servicesManager as ServicesManager\n  ).services;\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n\n  useEffect(() => {\n    const debouncedSetDisplayMeasurements = debounce(setDisplayMeasurements, 100);\n    // ~~ Initial\n    setDisplayMeasurements(_getMappedMeasurements(measurementService));\n\n    // ~~ Subscription\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\n    const subscriptions = [];\n\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\n      subscriptions.push(\n        measurementService.subscribe(evt, () => {\n          debouncedSetDisplayMeasurements(_getMappedMeasurements(measurementService));\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n      debouncedSetDisplayMeasurements.cancel();\n    };\n  }, []);\n\n  async function exportReport() {\n    const measurements = measurementService.getMeasurements();\n\n    downloadCSVReport(measurements, measurementService);\n  }\n\n  async function clearMeasurements() {\n    measurementService.clearMeasurements();\n  }\n\n  async function createReport(): Promise<any> {\n    // filter measurements that are added to the active study\n    const activeViewport = viewports.get(activeViewportId);\n    const measurements = measurementService.getMeasurements();\n    const displaySet = displaySetService.getDisplaySetByUID(\n      activeViewport.displaySetInstanceUIDs[0]\n    );\n    const trackedMeasurements = measurements.filter(\n      m => displaySet.StudyInstanceUID === m.referenceStudyUID\n    );\n\n    if (trackedMeasurements.length <= 0) {\n      uiNotificationService.show({\n        title: 'No Measurements',\n        message: 'No Measurements are added to the current Study.',\n        type: 'info',\n        duration: 3000,\n      });\n      return;\n    }\n\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\n      extensionManager,\n    });\n\n    if (promptResult.action === CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT) {\n      const dataSources = extensionManager.getDataSources(promptResult.dataSourceName);\n      const dataSource = dataSources[0];\n\n      const SeriesDescription =\n        // isUndefinedOrEmpty\n        promptResult.value === undefined || promptResult.value === ''\n          ? 'Research Derived Series' // default\n          : promptResult.value; // provided value\n\n      // Reuse an existing series having the same series description to avoid\n      // creating too many series instances.\n      const options = findSRWithSameSeriesDescription(SeriesDescription, displaySetService);\n\n      return createReportAsync(\n        servicesManager,\n        commandsManager,\n        dataSource,\n        trackedMeasurements,\n        options\n      );\n    }\n  }\n\n  const jumpToImage = ({ uid, isActive }) => {\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\n\n    onMeasurementItemClickHandler({ uid, isActive });\n  };\n\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\n    const measurement = measurementService.getMeasurement(uid);\n    //Todo: why we are jumping to image?\n    // jumpToImage({ id, isActive });\n\n    const onSubmitHandler = ({ action, value }) => {\n      switch (action.id) {\n        case 'save': {\n          measurementService.update(\n            uid,\n            {\n              ...measurement,\n              ...value,\n            },\n            true\n          );\n        }\n      }\n      uiDialogService.dismiss({ id: 'enter-annotation' });\n    };\n\n    uiDialogService.create({\n      id: 'enter-annotation',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Annotation',\n        noCloseButton: true,\n        value: { label: measurement.label || '' },\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              onSubmitHandler({ value, action: { id: 'save' } });\n            }\n          };\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              id=\"annotation\"\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={onChangeHandler}\n              onKeyPress={onKeyPressHandler}\n            />\n          );\n        },\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n      },\n    });\n  };\n\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\n    if (!isActive) {\n      const measurements = [...displayMeasurements];\n      const measurement = measurements.find(m => m.uid === uid);\n\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\n      measurement.isActive = true;\n      setDisplayMeasurements(measurements);\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title=\"Measurements\"\n          servicesManager={servicesManager}\n          data={displayMeasurements}\n          onClick={jumpToImage}\n          onEdit={onMeasurementItemEditHandler}\n        />\n      </div>\n      <div className=\"flex justify-center p-4\">\n        <ActionButtons\n          onExportClick={exportReport}\n          onClearMeasurementsClick={clearMeasurements}\n          onCreateReportClick={createReport}\n        />\n      </div>\n    </>\n  );\n}\n\nPanelMeasurementTable.propTypes = {\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\n};\n\nfunction _getMappedMeasurements(measurementService) {\n  const measurements = measurementService.getMeasurements();\n\n  const mappedMeasurements = measurements.map((m, index) =>\n    _mapMeasurementToDisplay(m, index, measurementService.VALUE_TYPES)\n  );\n\n  return mappedMeasurements;\n}\n\n/**\n * Map the measurements to the display text.\n * Adds finding and site information to the displayText and/or label,\n * and provides as 'displayText' and 'label', while providing the original\n * values as baseDisplayText and baseLabel\n */\nfunction _mapMeasurementToDisplay(measurement, index, types) {\n  const {\n    displayText: baseDisplayText,\n    uid,\n    label: baseLabel,\n    type,\n    selected,\n    findingSites,\n    finding,\n  } = measurement;\n\n  const firstSite = findingSites?.[0];\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\n  let displayText = baseDisplayText || [];\n  if (findingSites) {\n    const siteText = [];\n    findingSites.forEach(site => {\n      if (site?.text !== label) {\n        siteText.push(site.text);\n      }\n    });\n    displayText = [...siteText, ...displayText];\n  }\n  if (finding && finding?.text !== label) {\n    displayText = [finding.text, ...displayText];\n  }\n\n  return {\n    uid,\n    label,\n    baseLabel,\n    measurementType: type,\n    displayText,\n    baseDisplayText,\n    isActive: selected,\n    finding,\n    findingSites,\n  };\n}\n","import React from 'react';\nimport { WrappedPanelStudyBrowser, PanelMeasurementTable } from './Panels';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const wrappedMeasurementPanel = () => {\n    return (\n      <PanelMeasurementTable\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'group-layers',\n      iconLabel: 'Studies',\n      label: 'Studies',\n      component: WrappedPanelStudyBrowser.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { vec3 } from 'gl-matrix';\nimport toNumber from '@ohif/core/src/utils/toNumber';\nimport { _getPerpendicularDistance } from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport calculateScanAxisNormal from '../calculateScanAxisNormal';\n\n/**\n * Checks if there is a position shift between consecutive frames\n * @param {*} previousPosition\n * @param {*} actualPosition\n * @param {*} scanAxisNormal\n * @param {*} averageSpacingBetweenFrames\n * @returns\n */\nfunction _checkSeriesPositionShift(\n  previousPosition,\n  actualPosition,\n  scanAxisNormal,\n  averageSpacingBetweenFrames\n) {\n  // predicted position should be the previous position added by the multiplication\n  // of the scanAxisNormal and the average spacing between frames\n  const predictedPosition = vec3.scaleAndAdd(\n    vec3.create(),\n    previousPosition,\n    scanAxisNormal,\n    averageSpacingBetweenFrames\n  );\n  return vec3.distance(actualPosition, predictedPosition) > averageSpacingBetweenFrames;\n}\n\n/**\n * Checks if a series has position shifts between consecutive frames\n * @param {*} instances\n * @returns\n */\nexport default function areAllImagePositionsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImageOrientationPatient = toNumber(instances[0].ImageOrientationPatient);\n  if (!firstImageOrientationPatient) {\n    return false;\n  }\n  const scanAxisNormal = calculateScanAxisNormal(firstImageOrientationPatient);\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\n\n  const averageSpacingBetweenFrames =\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\n\n  let previousImagePositionPatient = firstImagePositionPatient;\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\n\n    if (\n      _checkSeriesPositionShift(\n        previousImagePositionPatient,\n        imagePositionPatient,\n        scanAxisNormal,\n        averageSpacingBetweenFrames\n      )\n    ) {\n      return false;\n    }\n    previousImagePositionPatient = imagePositionPatient;\n  }\n  return true;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * Calculates the scanAxisNormal based on a image orientation vector extract from a frame\n * @param {*} imageOrientation\n * @returns\n */\nexport default function calculateScanAxisNormal(imageOrientation) {\n  const rowCosineVec = vec3.fromValues(\n    imageOrientation[0],\n    imageOrientation[1],\n    imageOrientation[2]\n  );\n  const colCosineVec = vec3.fromValues(\n    imageOrientation[3],\n    imageOrientation[4],\n    imageOrientation[5]\n  );\n  return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n}\n","import areAllImageDimensionsEqual from './areAllImageDimensionsEqual';\nimport areAllImageComponentsEqual from './areAllImageComponentsEqual';\nimport areAllImageOrientationsEqual from './areAllImageOrientationsEqual';\nimport areAllImagePositionsEqual from './areAllImagePositionsEqual';\nimport areAllImageSpacingEqual from './areAllImageSpacingEqual';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Runs various checks in a single frame series\n * @param {*} instances\n * @param {*} warnings\n */\nexport default function checkSingleFrames(\n  instances: Array<any>,\n  messages: DisplaySetMessageList\n): void {\n  if (instances.length > 2) {\n    if (!areAllImageDimensionsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_DIMENSIONS);\n    }\n\n    if (!areAllImageComponentsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_COMPONENTS);\n    }\n\n    if (!areAllImageOrientationsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_ORIENTATIONS);\n    }\n\n    if (!areAllImagePositionsEqual(instances)) {\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_POSITION_INFORMATION);\n    }\n    areAllImageSpacingEqual(instances, messages);\n  }\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\n\n/**\n * Check if the frames in a series has different dimensions\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageDimensionsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageRows = toNumber(firstImage.Rows);\n  const firstImageColumns = toNumber(firstImage.Columns);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const { Rows, Columns } = instance;\n\n    if (Rows !== firstImageRows || Columns !== firstImageColumns) {\n      return false;\n    }\n  }\n  return true;\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\n\n/**\n * Check if all voxels in series images has same number of components (samplesPerPixel)\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageComponentsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageSamplesPerPixel = toNumber(firstImage.SamplesPerPixel);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const { SamplesPerPixel } = instance;\n\n    if (SamplesPerPixel !== firstImageSamplesPerPixel) {\n      return false;\n    }\n  }\n  return true;\n}\n","import toNumber from '@ohif/core/src/utils/toNumber';\nimport { _isSameOrientation } from '@ohif/core/src/utils/isDisplaySetReconstructable';\n\n/**\n * Check is the series has frames with different orientations\n * @param {*} instances\n * @returns\n */\nexport default function areAllImageOrientationsEqual(instances: Array<any>): boolean {\n  if (!instances?.length) {\n    return false;\n  }\n  const firstImage = instances[0];\n  const firstImageOrientationPatient = toNumber(firstImage.ImageOrientationPatient);\n\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imageOrientationPatient = toNumber(instance.ImageOrientationPatient);\n\n    if (!_isSameOrientation(imageOrientationPatient, firstImageOrientationPatient)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import {\n  _getPerpendicularDistance,\n  _getSpacingIssue,\n  reconstructionIssues,\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage } from '@ohif/core';\nimport toNumber from '@ohif/core/src/utils/toNumber';\nimport { DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Checks if series has spacing issues\n * @param {*} instances\n * @param {*} warnings\n */\nexport default function areAllImageSpacingEqual(\n  instances: Array<any>,\n  messages: DisplaySetMessageList\n): void {\n  if (!instances?.length) {\n    return;\n  }\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\n  if (!firstImagePositionPatient) {\n    return;\n  }\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\n\n  const averageSpacingBetweenFrames =\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\n\n  let previousImagePositionPatient = firstImagePositionPatient;\n\n  const issuesFound = [];\n  for (let i = 1; i < instances.length; i++) {\n    const instance = instances[i];\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\n\n    const spacingBetweenFrames = _getPerpendicularDistance(\n      imagePositionPatient,\n      previousImagePositionPatient\n    );\n\n    const spacingIssue = _getSpacingIssue(spacingBetweenFrames, averageSpacingBetweenFrames);\n\n    if (spacingIssue) {\n      const issue = spacingIssue.issue;\n\n      // avoid multiple warning of the same thing\n      if (!issuesFound.includes(issue)) {\n        issuesFound.push(issue);\n        if (issue === reconstructionIssues.MISSING_FRAMES) {\n          messages.addMessage(DisplaySetMessage.CODES.MISSING_FRAMES);\n        } else if (issue === reconstructionIssues.IRREGULAR_SPACING) {\n          messages.addMessage(DisplaySetMessage.CODES.IRREGULAR_SPACING);\n        }\n      }\n      // we just want to find issues not how many\n      if (issuesFound.length > 1) {\n        break;\n      }\n    }\n    previousImagePositionPatient = imagePositionPatient;\n  }\n}\n","import sortInstancesByPosition from '@ohif/core/src/utils/sortInstancesByPosition';\nimport { constructableModalities } from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\nimport checkMultiFrame from './utils/validations/checkMultiframe';\nimport checkSingleFrames from './utils/validations/checkSingleFrames';\n/**\n * Checks if a series is reconstructable to a 3D volume.\n *\n * @param {Object[]} instances An array of `OHIFInstanceMetadata` objects.\n */\nexport default function getDisplaySetMessages(\n  instances: Array<any>,\n  isReconstructable: boolean\n): DisplaySetMessageList {\n  const messages = new DisplaySetMessageList();\n  if (!instances.length) {\n    messages.addMessage(DisplaySetMessage.CODES.NO_VALID_INSTANCES);\n  }\n\n  const firstInstance = instances[0];\n  // Due to current requirements, LOCALIZER series doesn't have any messages\n  if (firstInstance.ImageType.includes('LOCALIZER')) {\n    return messages;\n  }\n\n  const Modality = firstInstance.Modality;\n  if (!constructableModalities.includes(Modality)) {\n    return messages;\n  }\n\n  const isMultiframe = firstInstance.NumberOfFrames > 1;\n  // Can't reconstruct if all instances don't have the ImagePositionPatient.\n  if (!isMultiframe && !instances.every(instance => instance.ImagePositionPatient)) {\n    messages.addMessage(DisplaySetMessage.CODES.NO_POSITION_INFORMATION);\n  }\n\n  const sortedInstances = sortInstancesByPosition(instances);\n\n  isMultiframe\n    ? checkMultiFrame(sortedInstances[0], messages)\n    : checkSingleFrames(sortedInstances, messages);\n\n  if (!isReconstructable) {\n    messages.addMessage(DisplaySetMessage.CODES.NOT_RECONSTRUCTABLE);\n  }\n  return messages;\n}\n","import {\n  hasPixelMeasurements,\n  hasOrientation,\n  hasPosition,\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n\n/**\n * Check various multi frame issues. It calls OHIF core functions\n * @param {*} multiFrameInstance\n * @param {*} warnings\n */\nexport default function checkMultiFrame(multiFrameInstance, messages: DisplaySetMessageList): void {\n  if (!hasPixelMeasurements(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_PIXEL_MEASUREMENTS);\n  }\n\n  if (!hasOrientation(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_ORIENTATION);\n  }\n\n  if (!hasPosition(multiFrameInstance)) {\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_POSITION_INFORMATION);\n  }\n}\n","import ImageSet from '@ohif/core/src/classes/ImageSet';\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\n/**\n * Default handler for a instance list with an unsupported sopClassUID\n */\nexport default function getDisplaySetsFromUnsupportedSeries(instances) {\n  const imageSet = new ImageSet(instances);\n  const messages = new DisplaySetMessageList();\n  messages.addMessage(DisplaySetMessage.CODES.UNSUPPORTED_DISPLAYSET);\n  const instance = instances[0];\n\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    FrameRate: instance.FrameTime,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: instance.SeriesDescription || '',\n    Modality: instance.Modality,\n    numImageFrames: instances.length,\n    unsupported: true,\n    SOPClassHandlerId: 'unsupported',\n    isReconstructable: false,\n    messages,\n  });\n  return [imageSet];\n}\n","import { isImage } from '@ohif/core/src/utils/isImage';\nimport sopClassDictionary from '@ohif/core/src/utils/sopClassDictionary';\nimport ImageSet from '@ohif/core/src/classes/ImageSet';\nimport isDisplaySetReconstructable from '@ohif/core/src/utils/isDisplaySetReconstructable';\nimport { id } from './id';\nimport getDisplaySetMessages from './getDisplaySetMessages';\nimport getDisplaySetsFromUnsupportedSeries from './getDisplaySetsFromUnsupportedSeries';\n\nconst sopClassHandlerName = 'stack';\n\nconst isMultiFrame = instance => {\n  return instance.NumberOfFrames > 1;\n};\n\nconst makeDisplaySet = instances => {\n  const instance = instances[0];\n  const imageSet = new ImageSet(instances);\n\n  const { value: isReconstructable, averageSpacingBetweenFrames } =\n    isDisplaySetReconstructable(instances);\n  // set appropriate attributes to image set...\n  const messages = getDisplaySetMessages(instances, isReconstructable);\n\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    FrameRate: instance.FrameTime,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: instance.SeriesDescription || '',\n    Modality: instance.Modality,\n    isMultiFrame: isMultiFrame(instance),\n    countIcon: isReconstructable ? 'icon-mpr' : undefined,\n    numImageFrames: instances.length,\n    SOPClassHandlerId: `${id}.sopClassHandlerModule.${sopClassHandlerName}`,\n    isReconstructable,\n    messages,\n    averageSpacingBetweenFrames: averageSpacingBetweenFrames || null,\n  });\n\n  // Sort the images in this series if needed\n  const shallSort = true; //!OHIF.utils.ObjectPath.get(Meteor, 'settings.public.ui.sortSeriesByIncomingOrder');\n  if (shallSort) {\n    imageSet.sortBy((a, b) => {\n      // Sort by InstanceNumber (0020,0013)\n      return (parseInt(a.InstanceNumber) || 0) - (parseInt(b.InstanceNumber) || 0);\n    });\n  }\n\n  // Include the first image instance number (after sorted)\n  /*imageSet.setAttribute(\n    'instanceNumber',\n    imageSet.getImage(0).InstanceNumber\n  );*/\n\n  /*const isReconstructable = isDisplaySetReconstructable(series, instances);\n\n  imageSet.isReconstructable = isReconstructable.value;\n\n  if (isReconstructable.missingFrames) {\n    // TODO -> This is currently unused, but may be used for reconstructing\n    // Volumes with gaps later on.\n    imageSet.missingFrames = isReconstructable.missingFrames;\n  }*/\n\n  return imageSet;\n};\n\nconst isSingleImageModality = modality => {\n  return modality === 'CR' || modality === 'MG' || modality === 'DX';\n};\n\nfunction getSopClassUids(instances) {\n  const uniqueSopClassUidsInSeries = new Set();\n  instances.forEach(instance => {\n    uniqueSopClassUidsInSeries.add(instance.SOPClassUID);\n  });\n  const sopClassUids = Array.from(uniqueSopClassUidsInSeries);\n\n  return sopClassUids;\n}\n\n/**\n * Basic SOPClassHandler:\n * - For all Image types that are stackable, create\n *   a displaySet with a stack of images\n *\n * @param {Array} sopClassHandlerModules List of SOP Class Modules\n * @param {SeriesMetadata} series The series metadata object from which the display sets will be created\n * @returns {Array} The list of display sets created for the given series object\n */\nfunction getDisplaySetsFromSeries(instances) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const displaySets = [];\n  const sopClassUids = getSopClassUids(instances);\n\n  // Search through the instances (InstanceMetadata object) of this series\n  // Split Multi-frame instances and Single-image modalities\n  // into their own specific display sets. Place the rest of each\n  // series into another display set.\n  const stackableInstances = [];\n  instances.forEach(instance => {\n    // All imaging modalities must have a valid value for sopClassUid (x00080016) or rows (x00280010)\n    if (!isImage(instance.SOPClassUID) && !instance.Rows) {\n      return;\n    }\n\n    let displaySet;\n\n    if (isMultiFrame(instance)) {\n      displaySet = makeDisplaySet([instance]);\n\n      displaySet.setAttributes({\n        sopClassUids,\n        isClip: true,\n        numImageFrames: instance.NumberOfFrames,\n        instanceNumber: instance.InstanceNumber,\n        acquisitionDatetime: instance.AcquisitionDateTime,\n      });\n      displaySets.push(displaySet);\n    } else if (isSingleImageModality(instance.Modality)) {\n      displaySet = makeDisplaySet([instance]);\n      displaySet.setAttributes({\n        sopClassUids,\n        instanceNumber: instance.InstanceNumber,\n        acquisitionDatetime: instance.AcquisitionDateTime,\n      });\n      displaySets.push(displaySet);\n    } else {\n      stackableInstances.push(instance);\n    }\n  });\n\n  if (stackableInstances.length) {\n    const displaySet = makeDisplaySet(stackableInstances);\n    displaySet.setAttribute('studyInstanceUid', instances[0].StudyInstanceUID);\n    displaySet.setAttributes({\n      sopClassUids,\n    });\n    displaySets.push(displaySet);\n  }\n\n  return displaySets;\n}\n\nconst sopClassUids = [\n  sopClassDictionary.ComputedRadiographyImageStorage,\n  sopClassDictionary.DigitalXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalXRayImageStorageForProcessing,\n  sopClassDictionary.DigitalMammographyXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalMammographyXRayImageStorageForProcessing,\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForPresentation,\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForProcessing,\n  sopClassDictionary.CTImageStorage,\n  sopClassDictionary.EnhancedCTImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedCTImageStorage,\n  sopClassDictionary.UltrasoundMultiframeImageStorage,\n  sopClassDictionary.MRImageStorage,\n  sopClassDictionary.EnhancedMRImageStorage,\n  sopClassDictionary.EnhancedMRColorImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedMRImageStorage,\n  sopClassDictionary.UltrasoundImageStorage,\n  sopClassDictionary.UltrasoundImageStorageRET,\n  sopClassDictionary.SecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeSingleBitSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeGrayscaleByteSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeGrayscaleWordSecondaryCaptureImageStorage,\n  sopClassDictionary.MultiframeTrueColorSecondaryCaptureImageStorage,\n  sopClassDictionary.XRayAngiographicImageStorage,\n  sopClassDictionary.EnhancedXAImageStorage,\n  sopClassDictionary.XRayRadiofluoroscopicImageStorage,\n  sopClassDictionary.EnhancedXRFImageStorage,\n  sopClassDictionary.XRay3DAngiographicImageStorage,\n  sopClassDictionary.XRay3DCraniofacialImageStorage,\n  sopClassDictionary.BreastTomosynthesisImageStorage,\n  sopClassDictionary.BreastProjectionXRayImageStorageForPresentation,\n  sopClassDictionary.BreastProjectionXRayImageStorageForProcessing,\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForPresentation,\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForProcessing,\n  sopClassDictionary.NuclearMedicineImageStorage,\n  sopClassDictionary.VLEndoscopicImageStorage,\n  sopClassDictionary.VideoEndoscopicImageStorage,\n  sopClassDictionary.VLMicroscopicImageStorage,\n  sopClassDictionary.VideoMicroscopicImageStorage,\n  sopClassDictionary.VLSlideCoordinatesMicroscopicImageStorage,\n  sopClassDictionary.VLPhotographicImageStorage,\n  sopClassDictionary.VideoPhotographicImageStorage,\n  sopClassDictionary.OphthalmicPhotography8BitImageStorage,\n  sopClassDictionary.OphthalmicPhotography16BitImageStorage,\n  sopClassDictionary.OphthalmicTomographyImageStorage,\n  sopClassDictionary.VLWholeSlideMicroscopyImageStorage,\n  sopClassDictionary.PositronEmissionTomographyImageStorage,\n  sopClassDictionary.EnhancedPETImageStorage,\n  sopClassDictionary.LegacyConvertedEnhancedPETImageStorage,\n  sopClassDictionary.RTImageStorage,\n  sopClassDictionary.EnhancedUSVolumeStorage,\n];\n\nfunction getSopClassHandlerModule() {\n  return [\n    {\n      name: sopClassHandlerName,\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n    {\n      name: 'not-supported-display-sets-handler',\n      sopClassUids: [],\n      getDisplaySetsFromSeries: getDisplaySetsFromUnsupportedSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import React from 'react';\n\nexport default function ToolbarDivider() {\n  return <span className=\"border-common-dark mx-2 h-8 w-4 self-center border-l\" />;\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { LayoutSelector as OHIFLayoutSelector, ToolbarButton } from '@ohif/ui';\n\nimport { ServicesManager } from '@ohif/core';\n\nfunction LayoutSelector({ rows, columns, className, servicesManager, ...rest }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { hangingProtocolService, toolbarService } = (servicesManager as ServicesManager).services;\n\n  const closeOnOutsideClick = () => {\n    if (isOpen) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n      evt => {\n        const { protocol } = evt;\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [hangingProtocolService]);\n\n  useEffect(() => {\n    window.addEventListener('click', closeOnOutsideClick);\n    return () => {\n      window.removeEventListener('click', closeOnOutsideClick);\n    };\n  }, [isOpen]);\n\n  const onInteractionHandler = () => setIsOpen(!isOpen);\n  const DropdownContent = isOpen ? OHIFLayoutSelector : null;\n\n  const onSelectionHandler = props => {\n    toolbarService.recordInteraction({\n      interactionType: 'action',\n      commands: [\n        {\n          commandName: 'setViewportGridLayout',\n          commandOptions: { ...props },\n          context: 'DEFAULT',\n        },\n      ],\n    });\n  };\n\n  return (\n    <ToolbarButton\n      id=\"Layout\"\n      label=\"Grid Layout\"\n      icon=\"tool-layout\"\n      onInteraction={onInteractionHandler}\n      className={className}\n      rounded={rest.rounded}\n      dropdownContent={\n        DropdownContent !== null && (\n          <DropdownContent\n            rows={rows}\n            columns={columns}\n            onSelection={onSelectionHandler}\n          />\n        )\n      }\n      isActive={isOpen}\n      type=\"toggle\"\n    />\n  );\n}\n\nLayoutSelector.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  onLayoutChange: PropTypes.func,\n  servicesManager: PropTypes.instanceOf(ServicesManager),\n};\n\nLayoutSelector.defaultProps = {\n  rows: 3,\n  columns: 3,\n  onLayoutChange: () => {},\n};\n\nexport default LayoutSelector;\n","import { SplitButton } from '@ohif/ui';\n\nexport default SplitButton;\n","import { Types } from '@ohif/ui';\nimport { Menu, SelectorProps, MenuItem, ContextMenuProps } from './types';\n\ntype ContextMenuItem = Types.ContextMenuItem;\n\n/**\n * Finds menu by menu id\n *\n * @returns Menu having the menuId\n */\nexport function findMenuById(menus: Menu[], menuId?: string): Menu {\n  if (!menuId) {\n    return;\n  }\n\n  return menus.find(menu => menu.id === menuId);\n}\n\n/**\n * Default finding menu method.  This method will go through\n * the list of menus until it finds the first one which\n * has no selector, OR has the selector, when applied to the\n * check props, return true.\n * The selectorProps are a set of provided properties which can be\n * passed into the selector function to determine when to display a menu.\n * For example, a selector function of:\n * `({displayset}) => displaySet?.SeriesDescription?.indexOf?.('Left')!==-1\n * would match series descriptions containing 'Left'.\n *\n * @param {Object[]} menus List of menus\n * @param {*} subProps\n * @returns\n */\nexport function findMenuDefault(menus: Menu[], subProps: Record<string, unknown>): Menu {\n  if (!menus) {\n    return null;\n  }\n  return menus.find(menu => !menu.selector || menu.selector(subProps.selectorProps));\n}\n\n/**\n * Finds the menu to be used for different scenarios:\n * This will first look for a subMenu with the specified subMenuId\n * Next it will look for the first menu whose selector returns true.\n *\n * @param menus - List of menus\n * @param props - root props\n * @param menuIdFilter - menu id identifier (to be considered on selection)\n *      This is intended to support other types of filtering in the future.\n */\nexport function findMenu(menus: Menu[], props?: Types.IProps, menuIdFilter?: string) {\n  const { subMenu } = props;\n\n  function* findMenuIterator() {\n    yield findMenuById(menus, menuIdFilter || subMenu);\n    yield findMenuDefault(menus, props);\n  }\n\n  const findIt = findMenuIterator();\n\n  let current = findIt.next();\n  let menu = current.value;\n\n  while (!current.done) {\n    menu = current.value;\n\n    if (menu) {\n      findIt.return();\n    }\n    current = findIt.next();\n  }\n\n  console.log('Menu chosen', menu?.id || 'NONE');\n\n  return menu;\n}\n\n/**\n * Returns the menu from a list of possible menus, based on the actual state of component props and tool data nearby.\n * This uses the findMenu command above to first find the appropriate\n * menu, and then it chooses the actual contents of that menu.\n * A menu item can be optional by implementing the 'selector',\n * which will be called with the selectorProps, and if it does not return true,\n * then the item is excluded.\n *\n * Other menus can be delegated to by setting the delegating value to\n * a string id for another menu.  That menu's content will replace the\n * current menu item (only if the item would be included).\n *\n * This allows single id menus to be chosen by id, but have varying contents\n * based on the delegated menus.\n *\n * Finally, for each item, the adaptItem call is made.  This allows\n * items to modify themselves before being displayed, such as\n * incorporating additional information from translation sources.\n * See the `test-mode` examples for details.\n *\n * @param selectorProps\n * @param {*} event event that originates the context menu\n * @param {*} menus List of menus\n * @param {*} menuIdFilter\n * @returns\n */\nexport function getMenuItems(\n  selectorProps: SelectorProps,\n  event: Event,\n  menus: Menu[],\n  menuIdFilter?: string\n): MenuItem[] | void {\n  // Include both the check props and the ...check props as one is used\n  // by the child menu and the other used by the selector function\n  const subProps = { selectorProps, event };\n\n  const menu = findMenu(menus, subProps, menuIdFilter);\n\n  if (!menu) {\n    return undefined;\n  }\n\n  if (!menu.items) {\n    console.warn('Must define items in menu', menu);\n    return [];\n  }\n\n  let menuItems = [];\n  menu.items.forEach(item => {\n    const { delegating, selector, subMenu } = item;\n\n    if (!selector || selector(selectorProps)) {\n      if (delegating) {\n        menuItems = [...menuItems, ...getMenuItems(selectorProps, event, menus, subMenu)];\n      } else {\n        const toAdd = adaptItem(item, subProps);\n        menuItems.push(toAdd);\n      }\n    }\n  });\n\n  return menuItems;\n}\n\n/**\n * Returns item adapted to be consumed by ContextMenu component\n * and then goes through the item to add action behaviour for clicking the item,\n * making it compatible with the default ContextMenu display.\n *\n * @param {Object} item\n * @param {Object} subProps\n * @returns a MenuItem that is compatible with the base ContextMenu\n *    This requires having a label and set of actions to be called.\n */\nexport function adaptItem(item: MenuItem, subProps: ContextMenuProps): ContextMenuItem {\n  const newItem: ContextMenuItem = {\n    ...item,\n    value: subProps.selectorProps?.value,\n  };\n\n  if (item.actionType === 'ShowSubMenu' && !newItem.iconRight) {\n    newItem.iconRight = 'chevron-menu';\n  }\n  if (!item.action) {\n    newItem.action = (itemRef, componentProps) => {\n      const { event = {} } = componentProps;\n      const { detail = {} } = event;\n      newItem.element = detail.element;\n\n      componentProps.onClose();\n      const action = componentProps[`on${itemRef.actionType || 'Default'}`];\n      if (action) {\n        action.call(componentProps, newItem, itemRef, subProps);\n      } else {\n        console.warn('No action defined for', itemRef);\n      }\n    };\n  }\n\n  return newItem;\n}\n","import * as ContextMenuItemsBuilder from './ContextMenuItemsBuilder';\nimport ContextMenu from '../../../../platform/ui/src/components/ContextMenu/ContextMenu';\nimport { CommandsManager, ServicesManager, Types } from '@ohif/core';\nimport { Menu, MenuItem, Point, ContextMenuProps } from './types';\n\n/**\n * The context menu controller is a helper class that knows how\n * to manage context menus based on the UI Customization Service.\n * There are a few parts to this:\n *    1. Basic controls to manage displaying and hiding context menus\n *    2. Menu selection services, which use the UI customization service\n *       to choose which menu to display\n *    3. Menu item adapter services to convert menu items into displayable and actionable items.\n *\n * The format for a menu is defined in the exported type MenuItem\n */\nexport default class ContextMenuController {\n  commandsManager: CommandsManager;\n  services: Types.Services;\n  menuItems: Menu[] | MenuItem[];\n\n  constructor(servicesManager: ServicesManager, commandsManager: CommandsManager) {\n    this.services = servicesManager.services as Obj;\n    this.commandsManager = commandsManager;\n  }\n\n  closeContextMenu() {\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\n  }\n\n  /**\n   * Figures out which context menu is appropriate to display and shows it.\n   *\n   * @param contextMenuProps - the context menu properties, see ./types.ts\n   * @param viewportElement - the DOM element this context menu is related to\n   * @param defaultPointsPosition - a default position to show the context menu\n   */\n  showContextMenu(\n    contextMenuProps: ContextMenuProps,\n    viewportElement,\n    defaultPointsPosition\n  ): void {\n    if (!this.services.uiDialogService) {\n      console.warn('Unable to show dialog; no UI Dialog Service available.');\n      return;\n    }\n\n    const { event, subMenu, menuId, menus, selectorProps } = contextMenuProps;\n\n    console.log('Getting items from', menus);\n    const items = ContextMenuItemsBuilder.getMenuItems(\n      selectorProps || contextMenuProps,\n      event,\n      menus,\n      menuId\n    );\n\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\n    this.services.uiDialogService.create({\n      id: 'context-menu',\n      isDraggable: false,\n      preservePosition: false,\n      preventCutOf: true,\n      defaultPosition: ContextMenuController._getDefaultPosition(\n        defaultPointsPosition,\n        event?.detail,\n        viewportElement\n      ),\n      event,\n      content: ContextMenu,\n\n      // This naming is part of the uiDialogService convention\n      // Clicking outside simply closes the dialog box.\n      onClickOutside: () => this.services.uiDialogService.dismiss({ id: 'context-menu' }),\n\n      contentProps: {\n        items,\n        selectorProps,\n        menus,\n        event,\n        subMenu,\n        eventData: event?.detail,\n\n        onClose: () => {\n          this.services.uiDialogService.dismiss({ id: 'context-menu' });\n        },\n\n        /**\n         * Displays a sub-menu, removing this menu\n         * @param {*} item\n         * @param {*} itemRef\n         * @param {*} subProps\n         */\n        onShowSubMenu: (item, itemRef, subProps) => {\n          if (!itemRef.subMenu) {\n            console.warn('No submenu defined for', item, itemRef, subProps);\n            return;\n          }\n          this.showContextMenu(\n            {\n              ...contextMenuProps,\n              menuId: itemRef.subMenu,\n            },\n            viewportElement,\n            defaultPointsPosition\n          );\n        },\n\n        // Default is to run the specified commands.\n        onDefault: (item, itemRef, subProps) => {\n          this.commandsManager.run(item, {\n            ...selectorProps,\n            ...itemRef,\n            subProps,\n          });\n        },\n      },\n    });\n  }\n\n  static getDefaultPosition = (): Point => {\n    return {\n      x: 0,\n      y: 0,\n    };\n  };\n\n  static _getEventDefaultPosition = eventDetail => ({\n    x: eventDetail && eventDetail.currentPoints.client[0],\n    y: eventDetail && eventDetail.currentPoints.client[1],\n  });\n\n  static _getElementDefaultPosition = element => {\n    if (element) {\n      const boundingClientRect = element.getBoundingClientRect();\n      return {\n        x: boundingClientRect.x,\n        y: boundingClientRect.y,\n      };\n    }\n\n    return {\n      x: undefined,\n      y: undefined,\n    };\n  };\n\n  static _getCanvasPointsPosition = (points = [], element) => {\n    const viewerPos = ContextMenuController._getElementDefaultPosition(element);\n\n    for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\n      const point = {\n        x: points[pointIndex][0] || points[pointIndex]['x'],\n        y: points[pointIndex][1] || points[pointIndex]['y'],\n      };\n      if (\n        ContextMenuController._isValidPosition(point) &&\n        ContextMenuController._isValidPosition(viewerPos)\n      ) {\n        return {\n          x: point.x + viewerPos.x,\n          y: point.y + viewerPos.y,\n        };\n      }\n    }\n  };\n\n  static _isValidPosition = (source): boolean => {\n    return source && typeof source.x === 'number' && typeof source.y === 'number';\n  };\n\n  /**\n   * Returns the context menu default position. It look for the positions of: canvasPoints (got from selected), event that triggers it, current viewport element\n   */\n  static _getDefaultPosition = (canvasPoints, eventDetail, viewerElement) => {\n    function* getPositionIterator() {\n      yield ContextMenuController._getCanvasPointsPosition(canvasPoints, viewerElement);\n      yield ContextMenuController._getEventDefaultPosition(eventDetail);\n      yield ContextMenuController._getElementDefaultPosition(viewerElement);\n      yield ContextMenuController.getDefaultPosition();\n    }\n\n    const positionIterator = getPositionIterator();\n\n    let current = positionIterator.next();\n    let position = current.value;\n\n    while (!current.done) {\n      position = current.value;\n\n      if (ContextMenuController._isValidPosition(position)) {\n        positionIterator.return();\n      }\n      current = positionIterator.next();\n    }\n\n    return position;\n  };\n}\n","const defaultContextMenu = {\n  id: 'measurementsContextMenu',\n  customizationType: 'ohif.contextMenu',\n  menus: [\n    // Get the items from the UI Customization for the menu name (and have a custom name)\n    {\n      id: 'forExistingMeasurement',\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          label: 'Delete measurement',\n          commands: [\n            {\n              commandName: 'deleteMeasurement',\n            },\n          ],\n        },\n        {\n          label: 'Add Label',\n          commands: [\n            {\n              commandName: 'setMeasurementLabel',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport default defaultContextMenu;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { VariableSizeList as List } from 'react-window';\nimport classNames from 'classnames';\nimport debounce from 'lodash.debounce';\n\nconst lineHeightPx = 20;\nconst lineHeightClassName = `leading-[${lineHeightPx}px]`;\nconst rowVerticalPaddingPx = 10;\nconst rowBottomBorderPx = 1;\nconst rowVerticalPaddingStyle = { padding: `${rowVerticalPaddingPx}px 0` };\nconst rowStyle = {\n  borderBottomWidth: `${rowBottomBorderPx}px`,\n  ...rowVerticalPaddingStyle,\n};\n\nfunction ColumnHeaders({ tagRef, vrRef, keywordRef, valueRef }) {\n  return (\n    <div\n      className={classNames(\n        'bg-secondary-dark ohif-scrollbar flex w-full flex-row overflow-y-scroll'\n      )}\n      style={rowVerticalPaddingStyle}\n    >\n      <div className=\"w-4/24 px-3\">\n        <label\n          ref={tagRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Tag</span>\n        </label>\n      </div>\n      <div className=\"w-2/24 px-3\">\n        <label\n          ref={vrRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">VR</span>\n        </label>\n      </div>\n      <div className=\"w-6/24 px-3\">\n        <label\n          ref={keywordRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Keyword</span>\n        </label>\n      </div>\n      <div className=\"w-5/24 grow px-3\">\n        <label\n          ref={valueRef}\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\n        >\n          <span className=\"flex flex-row items-center focus:outline-none\">Value</span>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction DicomTagTable({ rows }) {\n  const listRef = useRef();\n  const canvasRef = useRef();\n\n  const [tagHeaderElem, setTagHeaderElem] = useState(null);\n  const [vrHeaderElem, setVrHeaderElem] = useState(null);\n  const [keywordHeaderElem, setKeywordHeaderElem] = useState(null);\n  const [valueHeaderElem, setValueHeaderElem] = useState(null);\n\n  // Here the refs are inturn stored in state to trigger a render of the table.\n  // This virtualized table does NOT render until the header is rendered because the header column widths are used to determine the row heights in the table.\n  // Therefore whenever the refs change (in particular the first time the refs are set), we want to trigger a render of the table.\n  const tagRef = elem => {\n    if (elem) {\n      setTagHeaderElem(elem);\n    }\n  };\n  const vrRef = elem => {\n    if (elem) {\n      setVrHeaderElem(elem);\n    }\n  };\n  const keywordRef = elem => {\n    if (elem) {\n      setKeywordHeaderElem(elem);\n    }\n  };\n  const valueRef = elem => {\n    if (elem) {\n      setValueHeaderElem(elem);\n    }\n  };\n\n  /**\n   * When new rows are set, scroll to the top and reset the virtualization.\n   */\n  useEffect(() => {\n    if (!listRef?.current) {\n      return;\n    }\n\n    listRef.current.scrollTo(0);\n    listRef.current.resetAfterIndex(0);\n  }, [rows]);\n\n  /**\n   * When the browser window resizes, update the row virtualization (i.e. row heights)\n   */\n  useEffect(() => {\n    const debouncedResize = debounce(() => listRef.current.resetAfterIndex(0), 100);\n\n    window.addEventListener('resize', debouncedResize);\n\n    return () => {\n      debouncedResize.cancel();\n      window.removeEventListener('resize', debouncedResize);\n    };\n  }, []);\n\n  const Row = useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n\n      return (\n        <div\n          style={{ ...style, ...rowStyle }}\n          className={classNames(\n            'hover:bg-secondary-main border-secondary-light flex w-full flex-row items-center break-all bg-black text-base transition duration-300',\n            lineHeightClassName\n          )}\n          key={`DICOMTagRow-${index}`}\n        >\n          <div className=\"w-4/24 px-3\">{row[0]}</div>\n          <div className=\"w-2/24 px-3\">{row[1]}</div>\n          <div className=\"w-6/24 px-3\">{row[2]}</div>\n          <div className=\"w-5/24 grow px-3\">{row[3]}</div>\n        </div>\n      );\n    },\n    [rows]\n  );\n\n  /**\n   * Whenever any one of the column headers is set, then the header is rendered.\n   * Here we chose the tag header.\n   */\n  const isHeaderRendered = useCallback(() => tagHeaderElem !== null, [tagHeaderElem]);\n\n  /**\n   * Get the item/row size. We use the header column widths to calculate the various row heights.\n   * @param index the row index\n   * @returns the row height\n   */\n  const getItemSize = useCallback(\n    index => {\n      const headerWidths = [\n        tagHeaderElem.offsetWidth,\n        vrHeaderElem.offsetWidth,\n        keywordHeaderElem.offsetWidth,\n        valueHeaderElem.offsetWidth,\n      ];\n\n      const context = canvasRef.current.getContext('2d');\n      context.font = getComputedStyle(canvasRef.current).font;\n\n      return rows[index]\n        .map((colText, index) => {\n          const colOneLineWidth = context.measureText(colText).width;\n          const numLines = Math.ceil(colOneLineWidth / headerWidths[index]);\n          return numLines * lineHeightPx + 2 * rowVerticalPaddingPx + rowBottomBorderPx;\n        })\n        .reduce((maxHeight, colHeight) => Math.max(maxHeight, colHeight));\n    },\n    [rows, keywordHeaderElem, tagHeaderElem, valueHeaderElem, vrHeaderElem]\n  );\n\n  return (\n    <div>\n      <canvas\n        style={{ visibility: 'hidden', position: 'absolute' }}\n        className=\"text-base\"\n        ref={canvasRef}\n      />\n      <ColumnHeaders\n        tagRef={tagRef}\n        vrRef={vrRef}\n        keywordRef={keywordRef}\n        valueRef={valueRef}\n      />\n      <div\n        className=\"relative m-auto border-2 border-black bg-black\"\n        style={{ height: '32rem' }}\n      >\n        {isHeaderRendered() && (\n          <List\n            ref={listRef}\n            height={500}\n            itemCount={rows.length}\n            itemSize={getItemSize}\n            width={'100%'}\n            className=\"ohif-scrollbar\"\n          >\n            {Row}\n          </List>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default DicomTagTable;\n","import dcmjs from 'dcmjs';\nimport moment from 'moment';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { classes } from '@ohif/core';\nimport { InputRange, Select, Typography, InputFilterText } from '@ohif/ui';\nimport debounce from 'lodash.debounce';\n\nimport DicomTagTable from './DicomTagTable';\nimport './DicomTagBrowser.css';\n\nconst { ImageSet } = classes;\nconst { DicomMetaDictionary } = dcmjs.data;\nconst { nameMap } = DicomMetaDictionary;\n\nconst DicomTagBrowser = ({ displaySets, displaySetInstanceUID }) => {\n  // The column indices that are to be excluded during a filter of the table.\n  // At present the column indices are:\n  // 0: DICOM tag\n  // 1: VR\n  // 2: Keyword\n  // 3: Value\n  const excludedColumnIndicesForFilter: Set<number> = new Set([1]);\n\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] =\n    useState(displaySetInstanceUID);\n  const [instanceNumber, setInstanceNumber] = useState(1);\n  const [filterValue, setFilterValue] = useState('');\n\n  const onSelectChange = value => {\n    setSelectedDisplaySetInstanceUID(value.value);\n    setInstanceNumber(1);\n  };\n\n  const activeDisplaySet = displaySets.find(\n    ds => ds.displaySetInstanceUID === selectedDisplaySetInstanceUID\n  );\n\n  const isImageStack = _isImageStack(activeDisplaySet);\n  const showInstanceList = isImageStack && activeDisplaySet.images.length > 1;\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => a.SeriesNumber - b.SeriesNumber);\n    return displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDate,\n        SeriesTime,\n        SeriesNumber,\n        SeriesDescription,\n        Modality,\n      } = displaySet;\n\n      /* Map to display representation */\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0];\n      const date = moment(dateStr, 'YYYYMMDD:HHmmss');\n      const displayDate = date.format('ddd, MMM Do YYYY');\n\n      return {\n        value: displaySetInstanceUID,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate,\n      };\n    });\n  }, [displaySets]);\n\n  const rows = useMemo(() => {\n    let metadata;\n    if (isImageStack) {\n      metadata = activeDisplaySet.images[instanceNumber - 1];\n    } else {\n      metadata = activeDisplaySet.instance || activeDisplaySet;\n    }\n    const tags = getSortedTags(metadata);\n    return getFormattedRowsFromTags(tags, metadata);\n  }, [instanceNumber, selectedDisplaySetInstanceUID]);\n\n  const filteredRows = useMemo(() => {\n    if (!filterValue) {\n      return rows;\n    }\n\n    const filterValueLowerCase = filterValue.toLowerCase();\n    return rows.filter(row => {\n      return row.reduce((keepRow, col, colIndex) => {\n        if (keepRow) {\n          // We are already keeping the row, why do more work so return now.\n          return keepRow;\n        }\n\n        if (excludedColumnIndicesForFilter.has(colIndex)) {\n          return keepRow;\n        }\n\n        return keepRow || col.toLowerCase().includes(filterValueLowerCase);\n      }, false);\n    });\n  }, [rows, filterValue]);\n\n  const debouncedSetFilterValue = useMemo(() => {\n    return debounce(setFilterValue, 200);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      debouncedSetFilterValue?.cancel();\n    };\n  }, []);\n\n  return (\n    <div className=\"dicom-tag-browser-content\">\n      <div className=\"mb-6 flex flex-row items-center pl-1\">\n        <div className=\"flex w-1/2 flex-row items-center\">\n          <Typography\n            variant=\"subtitle\"\n            className=\"mr-4\"\n          >\n            Series\n          </Typography>\n          <div className=\"mr-8 grow\">\n            <Select\n              id=\"display-set-selector\"\n              isClearable={false}\n              onChange={onSelectChange}\n              options={displaySetList}\n              value={displaySetList.find(ds => ds.value === selectedDisplaySetInstanceUID)}\n              className=\"text-white\"\n            />\n          </div>\n        </div>\n        <div className=\"flex w-1/2 flex-row items-center\">\n          {showInstanceList && (\n            <Typography\n              variant=\"subtitle\"\n              className=\"mr-4\"\n            >\n              Instance Number\n            </Typography>\n          )}\n          {showInstanceList && (\n            <div className=\"grow\">\n              <InputRange\n                value={instanceNumber}\n                key={selectedDisplaySetInstanceUID}\n                onChange={value => {\n                  setInstanceNumber(parseInt(value));\n                }}\n                minValue={1}\n                maxValue={activeDisplaySet.images.length}\n                step={1}\n                inputClassName=\"w-full\"\n                labelPosition=\"left\"\n                trackColor={'#3a3f99'}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"h-1 w-full bg-black\"></div>\n      <div className=\"my-3 flex w-1/2 flex-row\">\n        <InputFilterText\n          className=\"mr-8 block w-full\"\n          placeholder=\"Search metadata...\"\n          onDebounceChange={setFilterValue}\n        ></InputFilterText>\n      </div>\n      <DicomTagTable rows={filteredRows} />\n    </div>\n  );\n};\n\nfunction getFormattedRowsFromTags(tags, metadata) {\n  const rows = [];\n\n  tags.forEach(tagInfo => {\n    if (tagInfo.vr === 'SQ') {\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, '']);\n\n      const { values } = tagInfo;\n\n      values.forEach((item, index) => {\n        const formatedRowsFromTags = getFormattedRowsFromTags(item, metadata);\n\n        rows.push([`${item[0].tagIndent}(FFFE,E000)`, '', `Item #${index}`, '']);\n\n        rows.push(...formatedRowsFromTags);\n      });\n    } else {\n      if (tagInfo.vr === 'xs') {\n        try {\n          const tag = dcmjs.data.Tag.fromPString(tagInfo.tag).toCleanString();\n          const originalTagInfo = metadata[tag];\n          tagInfo.vr = originalTagInfo.vr;\n        } catch (error) {\n          console.error(`Failed to parse value representation for tag '${tagInfo.keyword}'`);\n        }\n      }\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, tagInfo.value]);\n    }\n  });\n\n  return rows;\n}\n\nfunction getSortedTags(metadata) {\n  const tagList = getRows(metadata);\n\n  // Sort top level tags, sequence groups are sorted when created.\n  _sortTagList(tagList);\n\n  return tagList;\n}\n\nfunction getRows(metadata, depth = 0) {\n  // Tag, Type, Value, Keyword\n\n  const keywords = Object.keys(metadata);\n\n  let tagIndent = '';\n\n  for (let i = 0; i < depth; i++) {\n    tagIndent += '>';\n  }\n\n  if (depth > 0) {\n    tagIndent += ' '; // If indented, add a space after the indents.\n  }\n\n  const rows = [];\n  for (let i = 0; i < keywords.length; i++) {\n    let keyword = keywords[i];\n\n    if (keyword === '_vrMap') {\n      continue;\n    }\n\n    const tagInfo = nameMap[keyword];\n\n    let value = metadata[keyword];\n\n    if (tagInfo && tagInfo.vr === 'SQ') {\n      const sequenceAsArray = toArray(value);\n\n      // Push line defining the sequence\n\n      const sequence = {\n        tag: tagInfo.tag,\n        tagIndent,\n        vr: tagInfo.vr,\n        keyword,\n        values: [],\n      };\n\n      rows.push(sequence);\n\n      if (value === null) {\n        // Type 2 Sequence\n        continue;\n      }\n\n      sequenceAsArray.forEach(item => {\n        const sequenceRows = getRows(item, depth + 1);\n\n        if (sequenceRows.length) {\n          // Sort the sequence group.\n          _sortTagList(sequenceRows);\n          sequence.values.push(sequenceRows);\n        }\n      });\n\n      continue;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length > 0 && typeof value[0] != 'object') {\n        value = value.join('\\\\');\n      }\n    }\n\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n\n    if (typeof value !== 'string') {\n      if (value === null) {\n        value = ' ';\n      } else {\n        if (typeof value === 'object') {\n          if (value.InlineBinary) {\n            value = 'Inline Binary';\n          } else if (value.BulkDataURI) {\n            value = `Bulk Data URI`; //: ${value.BulkDataURI}`;\n          } else if (value.Alphabetic) {\n            value = value.Alphabetic;\n          } else {\n            console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\n            console.warn(value);\n            value = ' ';\n          }\n        } else {\n          console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\n          value = ' ';\n        }\n      }\n    }\n\n    // tag / vr/ keyword/ value\n\n    // Remove retired tags\n    keyword = keyword.replace('RETIRED_', '');\n    if (tagInfo) {\n      rows.push({\n        tag: tagInfo.tag,\n        tagIndent,\n        vr: tagInfo.vr,\n        keyword,\n        value,\n      });\n    } else {\n      // skip properties without hex tag numbers\n      const regex = /[0-9A-Fa-f]{6}/g;\n      if (keyword.match(regex)) {\n        const tag = `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`;\n        rows.push({\n          tag,\n          tagIndent,\n          vr: '',\n          keyword: 'Private Tag',\n          value,\n        });\n      }\n    }\n  }\n\n  return rows;\n}\n\nfunction _isImageStack(displaySet) {\n  return displaySet instanceof ImageSet;\n}\n\nfunction toArray(objectOrArray) {\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nfunction _sortTagList(tagList) {\n  tagList.sort((a, b) => {\n    if (a.tag < b.tag) {\n      return -1;\n    }\n\n    return 1;\n  });\n}\n\nexport default DicomTagBrowser;\n","import { HangingProtocolService, StateSyncService, Types } from '@ohif/core';\n\nexport type ReturnType = {\n  hangingProtocolStageIndexMap: Record<string, Types.HangingProtocol.HPInfo>;\n  viewportGridStore: Record<string, unknown>;\n  displaySetSelectorMap: Record<string, string>;\n};\n\n/**\n * Calculates a set of state information for hanging protocols and viewport grid\n * which defines the currently applied hanging protocol state.\n * @param state is the viewport grid state\n * @param syncService is the state sync service to use for getting existing state\n * @returns Set of states that can be applied to the state sync to remember\n *   the current view state.\n */\nconst reuseCachedLayout = (\n  state,\n  hangingProtocolService: HangingProtocolService,\n  syncService: StateSyncService\n): ReturnType => {\n  const { activeViewportId } = state;\n  const { protocol } = hangingProtocolService.getActiveProtocol();\n  const hpInfo = hangingProtocolService.getState();\n  const { protocolId, stageIndex, activeStudyUID } = hpInfo;\n\n  const syncState = syncService.getState();\n  const viewportGridStore = { ...syncState.viewportGridStore };\n  const displaySetSelectorMap = { ...syncState.displaySetSelectorMap };\n\n  const stage = protocol.stages[stageIndex];\n  const storeId = `${activeStudyUID}:${protocolId}:${stageIndex}`;\n  const cacheId = `${activeStudyUID}:${protocolId}`;\n  const hangingProtocolStageIndexMap = {\n    ...syncState.hangingProtocolStageIndexMap,\n  };\n  const { rows, columns } = stage.viewportStructure.properties;\n  const custom =\n    stage.viewports.length !== state.viewports.size ||\n    state.layout.numRows !== rows ||\n    state.layout.numCols !== columns;\n\n  hangingProtocolStageIndexMap[cacheId] = hpInfo;\n\n  if (storeId && custom) {\n    viewportGridStore[storeId] = { ...state };\n  }\n\n  state.viewports.forEach((viewport, viewportId) => {\n    const { displaySetOptions, displaySetInstanceUIDs } = viewport;\n    if (!displaySetOptions) {\n      return;\n    }\n    for (let i = 0; i < displaySetOptions.length; i++) {\n      const displaySetUID = displaySetInstanceUIDs[i];\n      if (!displaySetUID) {\n        continue;\n      }\n      if (viewportId === activeViewportId && i === 0) {\n        displaySetSelectorMap[`${activeStudyUID}:activeDisplaySet:0`] = displaySetUID;\n      }\n      if (displaySetOptions[i]?.id) {\n        displaySetSelectorMap[\n          `${activeStudyUID}:${displaySetOptions[i].id}:${\n            displaySetOptions[i].matchedDisplaySetsIndex || 0\n          }`\n        ] = displaySetUID;\n      }\n    }\n  });\n\n  return {\n    hangingProtocolStageIndexMap,\n    viewportGridStore,\n    displaySetSelectorMap,\n  };\n};\n\nexport default reuseCachedLayout;\n","import { StateSyncService } from '@ohif/core';\n\n/**\n * This find or create viewport is paired with the reduce results from\n * below, and the action of this viewport is to look for previously filled\n * viewports, and to reuse by position id.  If there is no filled viewport,\n * then one can be re-used from the display set if it isn't going to be displayed.\n * @param hangingProtocolService - bound parameter supplied before using this\n * @param viewportsByPosition - bound parameter supplied before using this\n * @param position - the position in the grid to retrieve\n * @param positionId - the current position on screen to retrieve\n * @param options - the set of options used, so that subsequent calls can\n *                  store state that is reset by the setLayout.\n *                  This class uses the options to store the already viewed\n *                  display sets, filling it initially with the pre-existing viewports.\n */\nexport const findOrCreateViewport = (\n  hangingProtocolService,\n  viewportsByPosition,\n  position: number,\n  positionId: string,\n  options: Record<string, unknown>\n) => {\n  const byPositionViewport = viewportsByPosition?.[positionId];\n  if (byPositionViewport) {\n    return { ...byPositionViewport };\n  }\n  const { protocolId, stageIndex } = hangingProtocolService.getState();\n\n  // Setup the initial in display correctly for initial view/select\n  if (!options.inDisplay) {\n    options.inDisplay = [...viewportsByPosition.initialInDisplay];\n  }\n  // See if there is a default viewport for new views.\n  const missing = hangingProtocolService.getMissingViewport(protocolId, stageIndex, options);\n  if (missing) {\n    const displaySetInstanceUIDs = missing.displaySetsInfo.map(it => it.displaySetInstanceUID);\n    options.inDisplay.push(...displaySetInstanceUIDs);\n    return {\n      displaySetInstanceUIDs,\n      displaySetOptions: missing.displaySetsInfo.map(it => it.displaySetOptions),\n      viewportOptions: {\n        ...missing.viewportOptions,\n      },\n    };\n  }\n  return {};\n};\n\n/**\n * Records the information on what viewports are displayed in which position.\n * Also records what instances from the existing positions are going to be in\n * view initially.\n * @param state is the viewport grid state\n * @param syncService is the state sync service to use for getting existing state\n * @returns Set of states that can be applied to the state sync to remember\n *   the current view state.\n */\nconst findViewportsByPosition = (\n  state,\n  { numRows, numCols },\n  syncService: StateSyncService\n): Record<string, Record<string, unknown>> => {\n  const { viewports } = state;\n  const syncState = syncService.getState();\n  const viewportsByPosition = { ...syncState.viewportsByPosition };\n  const initialInDisplay = [];\n\n  viewports.forEach(viewport => {\n    if (viewport.positionId) {\n      const storedViewport = {\n        ...viewport,\n        viewportOptions: { ...viewport.viewportOptions },\n      };\n      viewportsByPosition[viewport.positionId] = storedViewport;\n    }\n  });\n\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      const positionId = `${col}-${row}`;\n      const viewport = viewportsByPosition[positionId];\n      if (viewport?.displaySetInstanceUIDs) {\n        initialInDisplay.push(...viewport.displaySetInstanceUIDs);\n      }\n    }\n  }\n\n  // Store the initially displayed elements\n  viewportsByPosition.initialInDisplay = initialInDisplay;\n\n  return { viewportsByPosition };\n};\n\nexport default findViewportsByPosition;\n","import { ServicesManager, utils, Types } from '@ohif/core';\n\nimport { ContextMenuController, defaultContextMenu } from './CustomizableContextMenu';\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser';\nimport reuseCachedLayouts from './utils/reuseCachedLayouts';\nimport findViewportsByPosition, {\n  findOrCreateViewport as layoutFindOrCreate,\n} from './findViewportsByPosition';\n\nimport { ContextMenuProps } from './CustomizableContextMenu/types';\nimport { NavigateHistory } from './types/commandModuleTypes';\nimport { history } from '@ohif/app';\n\nconst { subscribeToNextViewportGridChange } = utils;\n\nexport type HangingProtocolParams = {\n  protocolId?: string;\n  stageIndex?: number;\n  activeStudyUID?: string;\n  stageId?: string;\n};\n\nexport type UpdateViewportDisplaySetParams = {\n  direction: number;\n  excludeNonImageModalities?: boolean;\n};\n\n/**\n * Determine if a command is a hanging protocol one.\n * For now, just use the two hanging protocol commands that are in this\n * commands module, but if others get added elsewhere this may need enhancing.\n */\nconst isHangingProtocolCommand = command =>\n  command &&\n  (command.commandName === 'setHangingProtocol' || command.commandName === 'toggleHangingProtocol');\n\nconst commandsModule = ({\n  servicesManager,\n  commandsManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    customizationService,\n    measurementService,\n    hangingProtocolService,\n    uiNotificationService,\n    viewportGridService,\n    displaySetService,\n    stateSyncService,\n    toolbarService,\n  } = (servicesManager as ServicesManager).services;\n\n  // Define a context menu controller for use with any context menus\n  const contextMenuController = new ContextMenuController(servicesManager, commandsManager);\n\n  const actions = {\n    /**\n     * Show the context menu.\n     * @param options.menuId defines the menu name to lookup, from customizationService\n     * @param options.defaultMenu contains the default menu set to use\n     * @param options.element is the element to show the menu within\n     * @param options.event is the event that caused the context menu\n     * @param options.selectorProps is the set of selection properties to use\n     */\n    showContextMenu: (options: ContextMenuProps) => {\n      const {\n        menuCustomizationId,\n        element,\n        event,\n        selectorProps,\n        defaultPointsPosition = [],\n      } = options;\n\n      const optionsToUse = { ...options };\n\n      if (menuCustomizationId) {\n        Object.assign(\n          optionsToUse,\n          customizationService.get(menuCustomizationId, defaultContextMenu)\n        );\n      }\n\n      // TODO - make the selectorProps richer by including the study metadata and display set.\n      const { protocol, stage } = hangingProtocolService.getActiveProtocol();\n      optionsToUse.selectorProps = {\n        event,\n        protocol,\n        stage,\n        ...selectorProps,\n      };\n\n      contextMenuController.showContextMenu(optionsToUse, element, defaultPointsPosition);\n    },\n\n    /** Close a context menu currently displayed */\n    closeContextMenu: () => {\n      contextMenuController.closeContextMenu();\n    },\n\n    displayNotification: ({ text, title, type }) => {\n      uiNotificationService.show({\n        title: title,\n        message: text,\n        type: type,\n      });\n    },\n    clearMeasurements: () => {\n      measurementService.clear();\n    },\n\n    /**\n     * Toggles off all tools which contain a commandName of setHangingProtocol\n     * or toggleHangingProtocol, and which match/don't match the protocol id/stage\n     */\n    toggleHpTools: () => {\n      const {\n        protocol,\n        stageIndex: toggleStageIndex,\n        stage,\n      } = hangingProtocolService.getActiveProtocol();\n      const enableListener = button => {\n        if (!button.id) {\n          return;\n        }\n        const { commands, items } = button.props || button;\n        if (items) {\n          items.forEach(enableListener);\n        }\n        const hpCommand = commands?.find?.(isHangingProtocolCommand);\n        if (!hpCommand) {\n          return;\n        }\n        const { protocolId, stageIndex, stageId } = hpCommand.commandOptions;\n        const isActive =\n          (!protocolId || protocolId === protocol.id) &&\n          (stageIndex === undefined || stageIndex === toggleStageIndex) &&\n          (!stageId || stageId === stage.id);\n        toolbarService.setActive(button.id, isActive);\n      };\n      Object.values(toolbarService.getButtons()).forEach(enableListener);\n    },\n\n    /**\n     *  Sets the specified protocol\n     *    1. Records any existing state using the viewport grid service\n     *    2. Finds the destination state - this can be one of:\n     *       a. The specified protocol stage\n     *       b. An alternate (toggled or restored) protocol stage\n     *       c. A restored custom layout\n     *    3. Finds the parameters for the specified state\n     *       a. Gets the displaySetSelectorMap\n     *       b. Gets the map by position\n     *       c. Gets any toggle mapping to map position to/from current view\n     *    4. If restore, then sets layout\n     *       a. Maps viewport position by currently displayed viewport map id\n     *       b. Uses toggle information to map display set id\n     *    5. Else applies the hanging protocol\n     *       a. HP Service is provided displaySetSelectorMap\n     *       b. HP Service will throw an exception if it isn't applicable\n     * @param options - contains information on the HP to apply\n     * @param options.activeStudyUID - the updated study to apply the HP to\n     * @param options.protocolId - the protocol ID to change to\n     * @param options.stageId - the stageId to apply\n     * @param options.stageIndex - the index of the stage to go to.\n     * @param options.reset - flag to indicate if the HP should be reset to its original and not restored to a previous state\n     */\n    setHangingProtocol: ({\n      activeStudyUID = '',\n      protocolId,\n      stageId,\n      stageIndex,\n      reset = false,\n    }: HangingProtocolParams): boolean => {\n      try {\n        // Stores in the state the display set selector id to displaySetUID mapping\n        // Pass in viewportId for the active viewport.  This item will get set as\n        // the activeViewportId\n        const state = viewportGridService.getState();\n        const hpInfo = hangingProtocolService.getState();\n        const { protocol: oldProtocol } = hangingProtocolService.getActiveProtocol();\n        const stateSyncReduce = reuseCachedLayouts(state, hangingProtocolService, stateSyncService);\n        const { hangingProtocolStageIndexMap, viewportGridStore, displaySetSelectorMap } =\n          stateSyncReduce;\n\n        if (!protocolId) {\n          // Reuse the previous protocol id, and optionally stage\n          protocolId = hpInfo.protocolId;\n          if (stageId === undefined && stageIndex === undefined) {\n            stageIndex = hpInfo.stageIndex;\n          }\n        } else if (stageIndex === undefined && stageId === undefined) {\n          // Re-set the same stage as was previously used\n          const hangingId = `${activeStudyUID || hpInfo.activeStudyUID}:${protocolId}`;\n          stageIndex = hangingProtocolStageIndexMap[hangingId]?.stageIndex;\n        }\n\n        const useStageIdx =\n          stageIndex ??\n          hangingProtocolService.getStageIndex(protocolId, {\n            stageId,\n            stageIndex,\n          });\n\n        if (activeStudyUID) {\n          hangingProtocolService.setActiveStudyUID(activeStudyUID);\n        }\n\n        const storedHanging = `${hangingProtocolService.getState().activeStudyUID}:${protocolId}:${\n          useStageIdx || 0\n        }`;\n\n        const restoreProtocol = !reset && viewportGridStore[storedHanging];\n\n        if (\n          protocolId === hpInfo.protocolId &&\n          useStageIdx === hpInfo.stageIndex &&\n          !activeStudyUID\n        ) {\n          // Clear the HP setting to reset them\n          hangingProtocolService.setProtocol(protocolId, {\n            stageId,\n            stageIndex: useStageIdx,\n          });\n        } else {\n          hangingProtocolService.setProtocol(protocolId, {\n            displaySetSelectorMap,\n            stageId,\n            stageIndex: useStageIdx,\n            restoreProtocol,\n          });\n          if (restoreProtocol) {\n            viewportGridService.set(viewportGridStore[storedHanging]);\n          }\n        }\n        // Do this after successfully applying the update\n        // Note, don't store the active display set - it is only needed while\n        // changing display sets.  This causes jump to measurement to fail on\n        // multi-study display.\n        delete displaySetSelectorMap[\n          `${activeStudyUID || hpInfo.activeStudyUID}:activeDisplaySet:0`\n        ];\n        stateSyncService.store(stateSyncReduce);\n        // This is a default action applied\n        const { protocol } = hangingProtocolService.getActiveProtocol();\n        actions.toggleHpTools(protocol);\n        // Send the notification about updating the state\n        if (protocolId !== hpInfo.protocolId) {\n          // The old protocol callbacks are used for turning off things\n          // like crosshairs when moving to the new HP\n          commandsManager.run(oldProtocol.callbacks?.onProtocolExit);\n          // The new protocol callback is used for things like\n          // activating modes etc.\n        }\n        commandsManager.run(protocol.callbacks?.onProtocolEnter);\n        return true;\n      } catch (e) {\n        actions.toggleHpTools(hangingProtocolService.getActiveProtocol());\n        uiNotificationService.show({\n          title: 'Apply Hanging Protocol',\n          message: 'The hanging protocol could not be applied.',\n          type: 'error',\n          duration: 3000,\n        });\n        return false;\n      }\n    },\n\n    toggleHangingProtocol: ({ protocolId, stageIndex }: HangingProtocolParams): boolean => {\n      const {\n        protocol,\n        stageIndex: desiredStageIndex,\n        activeStudy,\n      } = hangingProtocolService.getActiveProtocol();\n      const { toggleHangingProtocol } = stateSyncService.getState();\n      const storedHanging = `${activeStudy.StudyInstanceUID}:${protocolId}:${stageIndex | 0}`;\n      if (\n        protocol.id === protocolId &&\n        (stageIndex === undefined || stageIndex === desiredStageIndex)\n      ) {\n        // Toggling off - restore to previous state\n        const previousState = toggleHangingProtocol[storedHanging] || {\n          protocolId: 'default',\n        };\n        return actions.setHangingProtocol(previousState);\n      } else {\n        stateSyncService.store({\n          toggleHangingProtocol: {\n            ...toggleHangingProtocol,\n            [storedHanging]: {\n              protocolId: protocol.id,\n              stageIndex: desiredStageIndex,\n            },\n          },\n        });\n        return actions.setHangingProtocol({\n          protocolId,\n          stageIndex,\n          reset: true,\n        });\n      }\n    },\n\n    deltaStage: ({ direction }) => {\n      const { protocolId, stageIndex: oldStageIndex } = hangingProtocolService.getState();\n      const { protocol } = hangingProtocolService.getActiveProtocol();\n      for (\n        let stageIndex = oldStageIndex + direction;\n        stageIndex >= 0 && stageIndex < protocol.stages.length;\n        stageIndex += direction\n      ) {\n        if (protocol.stages[stageIndex].status !== 'disabled') {\n          return actions.setHangingProtocol({\n            protocolId,\n            stageIndex,\n          });\n        }\n      }\n      uiNotificationService.show({\n        title: 'Change Stage',\n        message: 'The hanging protocol has no more applicable stages',\n        type: 'info',\n        duration: 3000,\n      });\n    },\n\n    /**\n     * Changes the viewport grid layout in terms of the MxN layout.\n     */\n    setViewportGridLayout: ({ numRows, numCols }) => {\n      const { protocol } = hangingProtocolService.getActiveProtocol();\n      const onLayoutChange = protocol.callbacks?.onLayoutChange;\n      if (commandsManager.run(onLayoutChange, { numRows, numCols }) === false) {\n        console.log('setViewportGridLayout running', onLayoutChange, numRows, numCols);\n        // Don't apply the layout if the run command returns false\n        return;\n      }\n\n      const completeLayout = () => {\n        const state = viewportGridService.getState();\n        const stateReduce = findViewportsByPosition(state, { numRows, numCols }, stateSyncService);\n        const findOrCreateViewport = layoutFindOrCreate.bind(\n          null,\n          hangingProtocolService,\n          stateReduce.viewportsByPosition\n        );\n\n        viewportGridService.setLayout({\n          numRows,\n          numCols,\n          findOrCreateViewport,\n        });\n        stateSyncService.store(stateReduce);\n      };\n      // Need to finish any work in the callback\n      window.setTimeout(completeLayout, 0);\n    },\n\n    toggleOneUp() {\n      const viewportGridState = viewportGridService.getState();\n      const { activeViewportId, viewports, layout } = viewportGridState;\n      const { displaySetInstanceUIDs, displaySetOptions, viewportOptions } =\n        viewports.get(activeViewportId);\n\n      if (layout.numCols === 1 && layout.numRows === 1) {\n        // The viewer is in one-up. Check if there is a state to restore/toggle back to.\n        const { toggleOneUpViewportGridStore } = stateSyncService.getState();\n\n        if (!toggleOneUpViewportGridStore.layout) {\n          return;\n        }\n        // There is a state to toggle back to. The viewport that was\n        // originally toggled to one up was the former active viewport.\n        const viewportIdToUpdate = toggleOneUpViewportGridStore.activeViewportId;\n\n        const updatedViewportsViaHP =\n          displaySetInstanceUIDs.length > 1\n            ? []\n            : displaySetInstanceUIDs\n                .map(displaySetInstanceUID =>\n                  hangingProtocolService.getViewportsRequireUpdate(\n                    viewportIdToUpdate,\n                    displaySetInstanceUID\n                  )\n                )\n                .flat();\n\n        // This findOrCreateViewport returns either one of the updatedViewports\n        // returned from the HP service OR if there is not one from the HP service then\n        // simply returns what was in the previous state.\n        const findOrCreateViewport = (position: number) => {\n          // get the viewportId in the current state (since we are in the one-up layout)\n          const currentOneUpViewport = Array.from(viewports.values())[0];\n\n          // we should restore the previous layout but take into the account the fact that\n          // the current one up viewport might have a new displaySet dragged and dropped on it\n          // so we should prioritize the current one in the old grid store layout viewports\n\n          const newViewports = Array.from(toggleOneUpViewportGridStore.viewports.values()).map(\n            viewport => {\n              if (viewport.viewportId === currentOneUpViewport.viewportId) {\n                return {\n                  ...currentOneUpViewport,\n                };\n              }\n\n              return viewport;\n            }\n          );\n\n          // However, we also need to take into account that the current one up viewport\n          // might have been part of a bigger hanging protocol layout, so going back\n          // from one up we should apply those viewports as well.\n          return updatedViewportsViaHP.length > 1 && updatedViewportsViaHP[position]\n            ? {\n                viewportOptions,\n                displaySetOptions,\n                ...updatedViewportsViaHP[position],\n              }\n            : newViewports[position];\n        };\n\n        const layoutOptions = viewportGridService.getLayoutOptionsFromState(\n          toggleOneUpViewportGridStore\n        );\n\n        // Restore the previous layout including the active viewport.\n        viewportGridService.setLayout({\n          numRows: toggleOneUpViewportGridStore.layout.numRows,\n          numCols: toggleOneUpViewportGridStore.layout.numCols,\n          activeViewportId: viewportIdToUpdate,\n          layoutOptions,\n          findOrCreateViewport,\n        });\n      } else {\n        // We are not in one-up, so toggle to one up.\n\n        // Store the current viewport grid state so we can toggle it back later.\n        stateSyncService.store({\n          toggleOneUpViewportGridStore: viewportGridState,\n        });\n\n        // This findOrCreateViewport only return one viewport - the active\n        // one being toggled to one up.\n        const findOrCreateViewport = () => {\n          return {\n            displaySetInstanceUIDs,\n            displaySetOptions,\n            viewportOptions,\n          };\n        };\n\n        // Set the layout to be 1x1/one-up.\n        viewportGridService.setLayout({\n          numRows: 1,\n          numCols: 1,\n          findOrCreateViewport,\n        });\n\n        // Subscribe to ANY (i.e. manual and hanging protocol) layout changes so that\n        // any grid layout state to toggle to from one up is cleared. This is performed on\n        // a timeout to avoid clearing the state for the actual to one up change.\n        // Whenever the next layout change event is fired, the subscriptions are unsubscribed.\n        const clearToggleOneUpViewportGridStore = () => {\n          const toggleOneUpViewportGridStore = {};\n          stateSyncService.store({\n            toggleOneUpViewportGridStore,\n          });\n        };\n\n        subscribeToNextViewportGridChange(viewportGridService, clearToggleOneUpViewportGridStore);\n      }\n    },\n\n    /**\n     * Exposes the browser history navigation used by OHIF. This command can be used to either replace or\n     * push a new entry into the browser history. For example, the following will replace the current\n     * browser history entry with the specified relative URL which changes the study displayed to the\n     * study with study instance UID 1.2.3. Note that as a result of using `options.replace = true`, the\n     * page prior to invoking this command cannot be returned to via the browser back button.\n     *\n     * navigateHistory({\n     *   to: 'viewer?StudyInstanceUIDs=1.2.3',\n     *   options: { replace: true },\n     * });\n     *\n     * @param historyArgs - arguments for the history function;\n     *                      the `to` property is the URL;\n     *                      the `options.replace` is a boolean indicating if the current browser history entry\n     *                      should be replaced or a new entry pushed onto the history (stack); the default value\n     *                      for `replace` is false\n     */\n    navigateHistory(historyArgs: NavigateHistory) {\n      history.navigate(historyArgs.to, historyArgs.options);\n    },\n\n    openDICOMTagViewer() {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n      const activeViewportSpecificData = viewports.get(activeViewportId);\n      const { displaySetInstanceUIDs } = activeViewportSpecificData;\n\n      const displaySets = displaySetService.activeDisplaySets;\n      const { UIModalService } = servicesManager.services;\n\n      const displaySetInstanceUID = displaySetInstanceUIDs[0];\n      UIModalService.show({\n        content: DicomTagBrowser,\n        contentProps: {\n          displaySets,\n          displaySetInstanceUID,\n          onClose: UIModalService.hide,\n        },\n        title: 'DICOM Tag Browser',\n      });\n    },\n\n    /**\n     * Toggle viewport overlay (the information panel shown on the four corners\n     * of the viewport)\n     * @see ViewportOverlay and CustomizableViewportOverlay components\n     */\n    toggleOverlays: () => {\n      const overlays = document.getElementsByClassName('viewport-overlay');\n      for (let i = 0; i < overlays.length; i++) {\n        overlays.item(i).classList.toggle('hidden');\n      }\n    },\n\n    scrollActiveThumbnailIntoView: () => {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n\n      const activeViewport = viewports.get(activeViewportId);\n      const activeDisplaySetInstanceUID = activeViewport.displaySetInstanceUIDs[0];\n\n      const thumbnailList = document.querySelector('#ohif-thumbnail-list');\n\n      if (!thumbnailList) {\n        return;\n      }\n\n      const thumbnailListBounds = thumbnailList.getBoundingClientRect();\n\n      const thumbnail = document.querySelector(`#thumbnail-${activeDisplaySetInstanceUID}`);\n\n      if (!thumbnail) {\n        return;\n      }\n\n      const thumbnailBounds = thumbnail.getBoundingClientRect();\n\n      // This only handles a vertical thumbnail list.\n      if (\n        thumbnailBounds.top >= thumbnailListBounds.top &&\n        thumbnailBounds.top <= thumbnailListBounds.bottom\n      ) {\n        return;\n      }\n\n      thumbnail.scrollIntoView({ behavior: 'smooth' });\n    },\n\n    updateViewportDisplaySet: ({\n      direction,\n      excludeNonImageModalities,\n    }: UpdateViewportDisplaySetParams) => {\n      const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\n      // Sort the display sets as per the hanging protocol service viewport/display set scoring system.\n      // The thumbnail list uses the same sorting.\n      const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\n      const currentDisplaySets = [...displaySetService.activeDisplaySets];\n\n      currentDisplaySets.sort(dsSortFn);\n\n      const { activeViewportId, viewports } = viewportGridService.getState();\n\n      const { displaySetInstanceUIDs } = viewports.get(activeViewportId);\n\n      const activeDisplaySetIndex = currentDisplaySets.findIndex(displaySet =>\n        displaySetInstanceUIDs.includes(displaySet.displaySetInstanceUID)\n      );\n\n      let displaySetIndexToShow: number;\n\n      for (\n        displaySetIndexToShow = activeDisplaySetIndex + direction;\n        displaySetIndexToShow > -1 && displaySetIndexToShow < currentDisplaySets.length;\n        displaySetIndexToShow += direction\n      ) {\n        if (\n          !excludeNonImageModalities ||\n          !nonImageModalities.includes(currentDisplaySets[displaySetIndexToShow].Modality)\n        ) {\n          break;\n        }\n      }\n\n      if (displaySetIndexToShow < 0 || displaySetIndexToShow >= currentDisplaySets.length) {\n        return;\n      }\n\n      const { displaySetInstanceUID } = currentDisplaySets[displaySetIndexToShow];\n\n      let updatedViewports = [];\n\n      try {\n        updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n          activeViewportId,\n          displaySetInstanceUID\n        );\n      } catch (error) {\n        console.warn(error);\n        uiNotificationService.show({\n          title: 'Navigate Viewport Display Set',\n          message:\n            'The requested display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\n          type: 'info',\n          duration: 3000,\n        });\n      }\n\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n      setTimeout(() => actions.scrollActiveThumbnailIntoView(), 0);\n    },\n  };\n\n  const definitions = {\n    showContextMenu: {\n      commandFn: actions.showContextMenu,\n    },\n    closeContextMenu: {\n      commandFn: actions.closeContextMenu,\n    },\n    clearMeasurements: {\n      commandFn: actions.clearMeasurements,\n      storeContexts: [],\n      options: {},\n    },\n    displayNotification: {\n      commandFn: actions.displayNotification,\n      storeContexts: [],\n      options: {},\n    },\n    setHangingProtocol: {\n      commandFn: actions.setHangingProtocol,\n      storeContexts: [],\n      options: {},\n    },\n    toggleHangingProtocol: {\n      commandFn: actions.toggleHangingProtocol,\n      storeContexts: [],\n      options: {},\n    },\n    navigateHistory: {\n      commandFn: actions.navigateHistory,\n      storeContexts: [],\n      options: {},\n    },\n    nextStage: {\n      commandFn: actions.deltaStage,\n      storeContexts: [],\n      options: { direction: 1 },\n    },\n    previousStage: {\n      commandFn: actions.deltaStage,\n      storeContexts: [],\n      options: { direction: -1 },\n    },\n    setViewportGridLayout: {\n      commandFn: actions.setViewportGridLayout,\n      storeContexts: [],\n      options: {},\n    },\n    toggleOneUp: {\n      commandFn: actions.toggleOneUp,\n      storeContexts: [],\n      options: {},\n    },\n    openDICOMTagViewer: {\n      commandFn: actions.openDICOMTagViewer,\n    },\n    updateViewportDisplaySet: {\n      commandFn: actions.updateViewportDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'DEFAULT',\n  };\n};\n\nexport default commandsModule;\n","import { Types } from '@ohif/core';\n\n/**\n * This hanging protocol can be activated on the primary mode by directly\n * referencing it in a URL or by directly including it within a mode, e.g.:\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\n * It is not included in the viewer mode by default.\n */\nconst hpMN: Types.HangingProtocol.Protocol = {\n  id: '@ohif/mnGrid',\n  description: 'Has various hanging protocol grid layouts',\n  name: '2x2',\n  protocolMatchingRules: [\n    {\n      id: 'OneOrMoreSeries',\n      weight: 25,\n      attribute: 'numberOfDisplaySetsWithImages',\n      constraint: {\n        greaterThan: 0,\n      },\n    },\n  ],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n        },\n        // This display set will select the specified items by preference\n        // It has no affect if nothing is specified in the URL.\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 10,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n    },\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  stages: [\n    {\n      id: '2x2',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 4,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 1,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 2,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 3,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n\n    // 3x1 stage\n    {\n      id: '3x1',\n      // Obsolete settings:\n      requiredViewports: 1,\n      preferredViewports: 3,\n      // New equivalent:\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 3,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n              matchedDisplaySetsIndex: 1,\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n              matchedDisplaySetsIndex: 2,\n            },\n          ],\n        },\n      ],\n    },\n\n    // A 2x1 stage\n    {\n      id: '2x1',\n      requiredViewports: 1,\n      preferredViewports: 2,\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 2,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              matchedDisplaySetsIndex: 1,\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n\n    // A 1x1 stage - should be automatically activated if there is only 1 viewable instance\n    {\n      id: '1x1',\n      requiredViewports: 1,\n      preferredViewports: 1,\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 1,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  numberOfPriorsReferenced: -1,\n};\n\nexport default hpMN;\n","import { Types } from '@ohif/core';\n\nconst defaultDisplaySetSelector = {\n  studyMatchingRules: [\n    {\n      // The priorInstance is a study counter that indicates what position this study is in\n      // and the value comes from the options parameter.\n      attribute: 'studyInstanceUIDsIndex',\n      from: 'options',\n      required: true,\n      constraint: {\n        equals: { value: 0 },\n      },\n    },\n  ],\n  seriesMatchingRules: [\n    {\n      attribute: 'numImageFrames',\n      constraint: {\n        greaterThan: { value: 0 },\n      },\n    },\n    // This display set will select the specified items by preference\n    // It has no affect if nothing is specified in the URL.\n    {\n      attribute: 'isDisplaySetFromUrl',\n      weight: 10,\n      constraint: {\n        equals: true,\n      },\n    },\n  ],\n};\n\nconst priorDisplaySetSelector = {\n  studyMatchingRules: [\n    {\n      // The priorInstance is a study counter that indicates what position this study is in\n      // and the value comes from the options parameter.\n      attribute: 'studyInstanceUIDsIndex',\n      from: 'options',\n      required: true,\n      constraint: {\n        equals: { value: 1 },\n      },\n    },\n  ],\n  seriesMatchingRules: [\n    {\n      attribute: 'numImageFrames',\n      constraint: {\n        greaterThan: { value: 0 },\n      },\n    },\n    // This display set will select the specified items by preference\n    // It has no affect if nothing is specified in the URL.\n    {\n      attribute: 'isDisplaySetFromUrl',\n      weight: 10,\n      constraint: {\n        equals: true,\n      },\n    },\n  ],\n};\n\nconst currentDisplaySet = {\n  id: 'defaultDisplaySetId',\n};\n\nconst priorDisplaySet = {\n  id: 'priorDisplaySetId',\n};\n\nconst currentViewport0 = {\n  viewportOptions: {\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [currentDisplaySet],\n};\n\nconst currentViewport1 = {\n  ...currentViewport0,\n  displaySets: [\n    {\n      ...currentDisplaySet,\n      matchedDisplaySetsIndex: 1,\n    },\n  ],\n};\n\nconst priorViewport0 = {\n  ...currentViewport0,\n  displaySets: [priorDisplaySet],\n};\n\nconst priorViewport1 = {\n  ...priorViewport0,\n  displaySets: [\n    {\n      ...priorDisplaySet,\n      matchedDisplaySetsIndex: 1,\n    },\n  ],\n};\n\n/**\n * This hanging protocol can be activated on the primary mode by directly\n * referencing it in a URL or by directly including it within a mode, e.g.:\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\n * It is not included in the viewer mode by default.\n */\nconst hpMNCompare: Types.HangingProtocol.Protocol = {\n  id: '@ohif/hpCompare',\n  description: 'Compare two studies in various layouts',\n  name: 'Compare Two Studies',\n  numberOfPriorsReferenced: 1,\n  protocolMatchingRules: [\n    {\n      id: 'Two Studies',\n      weight: 1000,\n      attribute: 'StudyInstanceUID',\n      // The 'from' attribute says where to get the 'attribute' value from.  In this case\n      // prior means the second study in the study list.\n      from: 'prior',\n      required: true,\n      constraint: {\n        notNull: true,\n      },\n    },\n  ],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    defaultDisplaySetId: defaultDisplaySetSelector,\n    priorDisplaySetId: priorDisplaySetSelector,\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  stages: [\n    {\n      name: '2x2',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 4,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [currentViewport0, priorViewport0, currentViewport1, priorViewport1],\n    },\n\n    {\n      name: '2x1',\n      stageActivation: {\n        enabled: {\n          minViewportsMatched: 2,\n        },\n      },\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 2,\n        },\n      },\n      viewports: [currentViewport0, priorViewport0],\n    },\n  ],\n};\n\nexport default hpMNCompare;\n","import hpMNGrid from './hpMNGrid';\nimport hpMNCompare from './hpCompare';\n\nconst defaultProtocol = {\n  id: 'default',\n  locked: true,\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2023-04-01',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        // Try to match series with images by default, to prevent weird display\n        // on SEG/SR containing studies\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n        },\n        // This display set will select the specified items by preference\n        // It has no affect if nothing is specified in the URL.\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 10,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n      // Can be used to select matching studies\n      // studyMatchingRules: [],\n    },\n  },\n  stages: [\n    {\n      name: 'default',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            viewportType: 'stack',\n            viewportId: 'default',\n            toolGroupId: 'default',\n            // This will specify the initial image options index if it matches in the URL\n            // and will otherwise not specify anything.\n            initialImageOptions: {\n              custom: 'sopInstanceLocation',\n            },\n            // Other options for initialImageOptions, which can be included in the default\n            // custom attribute, or can be provided directly.\n            //   index: 180,\n            //   preset: 'middle', // 'first', 'last', 'middle'\n            // },\n          },\n          displaySets: [\n            {\n              id: 'defaultDisplaySetId',\n            },\n          ],\n        },\n      ],\n      createdDate: '2021-02-23T18:32:42.850Z',\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: defaultProtocol.id,\n      protocol: defaultProtocol,\n    },\n    // Create a MxN hanging protocol available by default\n    {\n      name: hpMNGrid.id,\n      protocol: hpMNGrid,\n    },\n    // Create a MxN comparison hanging protocol available by default\n    {\n      name: hpMNCompare.id,\n      protocol: hpMNCompare,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppConfig } from '@state';\n\nimport { Button, ButtonEnums } from '@ohif/ui';\n\nfunction DataSourceSelector() {\n  const [appConfig] = useAppConfig();\n  const navigate = useNavigate();\n\n  // This is frowned upon, but the raw config is needed here to provide\n  // the selector\n  const dsConfigs = appConfig.dataSources;\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <div className=\"flex h-screen w-screen items-center justify-center \">\n        <div className=\"bg-secondary-dark mx-auto space-y-2 rounded-lg py-8 px-8 drop-shadow-md\">\n          <img\n            className=\"mx-auto block h-14\"\n            src=\"./ohif-logo.svg\"\n            alt=\"OHIF\"\n          />\n          <div className=\"space-y-2 pt-4 text-center\">\n            {dsConfigs\n              .filter(it => it.sourceName !== 'dicomjson' && it.sourceName !== 'dicomlocal')\n              .map(ds => (\n                <div key={ds.sourceName}>\n                  <h1 className=\"text-white\">\n                    {ds.configuration?.friendlyName || ds.friendlyName}\n                  </h1>\n                  <Button\n                    type={ButtonEnums.type.primary}\n                    className={classnames('ml-2')}\n                    onClick={() => {\n                      navigate({\n                        pathname: '/',\n                        search: `datasources=${ds.sourceName}`,\n                      });\n                    }}\n                  >\n                    {ds.sourceName}\n                  </Button>\n                  <br />\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DataSourceSelector;\n","import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Icon, InputFilterText, LoadingIndicatorProgress } from '@ohif/ui';\nimport { Types } from '@ohif/core';\n\ntype ItemListComponentProps = {\n  itemLabel: string;\n  itemList: Array<Types.BaseDataSourceConfigurationAPIItem>;\n  onItemClicked: (item: Types.BaseDataSourceConfigurationAPIItem) => void;\n};\n\nfunction ItemListComponent({\n  itemLabel,\n  itemList,\n  onItemClicked,\n}: ItemListComponentProps): ReactElement {\n  const { t } = useTranslation('DataSourceConfiguration');\n  const [filterValue, setFilterValue] = useState('');\n\n  useEffect(() => {\n    setFilterValue('');\n  }, [itemList]);\n\n  return (\n    <div className=\"flex min-h-[1px] grow flex-col gap-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-primary-light text-[20px]\">{t(`Select ${itemLabel}`)}</div>\n        <InputFilterText\n          className=\"max-w-[40%] grow\"\n          value={filterValue}\n          onDebounceChange={setFilterValue}\n          placeholder={t(`Search ${itemLabel} list`)}\n        ></InputFilterText>\n      </div>\n      <div className=\"relative flex min-h-[1px] grow flex-col bg-black text-[14px]\">\n        {itemList == null ? (\n          <LoadingIndicatorProgress className={'h-full w-full'} />\n        ) : itemList.length === 0 ? (\n          <div className=\"text-primary-light flex h-full flex-col items-center justify-center px-6 py-4\">\n            <Icon\n              name=\"magnifier\"\n              className=\"mb-4\"\n            />\n            <span>{t(`No ${itemLabel} available`)}</span>\n          </div>\n        ) : (\n          <>\n            <div className=\"bg-secondary-dark px-3 py-1.5 text-white\">{t(itemLabel)}</div>\n            <div className=\"ohif-scrollbar overflow-auto\">\n              {itemList\n                .filter(\n                  item =>\n                    !filterValue || item.name.toLowerCase().includes(filterValue.toLowerCase())\n                )\n                .map(item => {\n                  const border =\n                    'rounded border-transparent border-b-secondary-light border-[1px] hover:border-primary-light';\n                  return (\n                    <div\n                      className={classNames(\n                        'hover:text-primary-light hover:bg-primary-dark group mx-2 flex items-center justify-between px-6 py-2',\n                        border\n                      )}\n                      key={item.id}\n                    >\n                      <div>{item.name}</div>\n                      <Button\n                        onClick={() => onItemClicked(item)}\n                        className=\"invisible group-hover:visible\"\n                        endIcon={<Icon name=\"arrow-left\" />}\n                      >\n                        {t('Select')}\n                      </Button>\n                    </div>\n                  );\n                })}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ItemListComponent;\n","import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\nimport { Types } from '@ohif/core';\nimport ItemListComponent from './ItemListComponent';\n\nconst NO_WRAP_ELLIPSIS_CLASS_NAMES = 'text-ellipsis whitespace-nowrap overflow-hidden';\n\ntype DataSourceConfigurationModalComponentProps = {\n  configurationAPI: Types.BaseDataSourceConfigurationAPI;\n  configuredItems: Array<Types.BaseDataSourceConfigurationAPIItem>;\n  onHide: () => void;\n};\n\nfunction DataSourceConfigurationModalComponent({\n  configurationAPI,\n  configuredItems,\n  onHide,\n}: DataSourceConfigurationModalComponentProps) {\n  const { t } = useTranslation('DataSourceConfiguration');\n\n  const [itemList, setItemList] = useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\n\n  const [selectedItems, setSelectedItems] = useState(configuredItems);\n\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const [itemLabels] = useState(configurationAPI.getItemLabels());\n\n  // Determines whether to show the full/existing configuration for the data source.\n  // A full or complete configuration is one where the data source (path) has the\n  // maximum/required number of path items. Anything less is considered not complete and\n  // the configuration starts from scratch (i.e. as if no items are configured at all).\n  // TODO: consider configuration starting from a partial (i.e. non-empty) configuration\n  const [showFullConfig, setShowFullConfig] = useState(\n    itemLabels.length === configuredItems.length\n  );\n\n  /**\n   * The index of the selected item that is considered current and for which\n   * its sub-items should be displayed in the items list component. When the\n   * full/existing configuration for a data source is to be shown, the current\n   * selected item is the second to last in the `selectedItems` list.\n   */\n  const currentSelectedItemIndex = showFullConfig\n    ? selectedItems.length - 2\n    : selectedItems.length - 1;\n\n  useEffect(() => {\n    let shouldUpdate = true;\n\n    setErrorMessage(null);\n\n    // Clear out the former/old list while we fetch the next sub item list.\n    setItemList(null);\n\n    if (selectedItems.length === 0) {\n      configurationAPI\n        .initialize()\n        .then(items => {\n          if (shouldUpdate) {\n            setItemList(items);\n          }\n        })\n        .catch(error => setErrorMessage(error.message));\n    } else if (!showFullConfig && selectedItems.length === itemLabels.length) {\n      // The last item to configure the data source (path) has been selected.\n      configurationAPI.setCurrentItem(selectedItems[selectedItems.length - 1]);\n      // We can hide the modal dialog now.\n      onHide();\n    } else {\n      configurationAPI\n        .setCurrentItem(selectedItems[currentSelectedItemIndex])\n        .then(items => {\n          if (shouldUpdate) {\n            setItemList(items);\n          }\n        })\n        .catch(error => setErrorMessage(error.message));\n    }\n\n    return () => {\n      shouldUpdate = false;\n    };\n  }, [\n    selectedItems,\n    configurationAPI,\n    onHide,\n    itemLabels,\n    showFullConfig,\n    currentSelectedItemIndex,\n  ]);\n\n  const getSelectedItemCursorClasses = itemIndex =>\n    itemIndex !== itemLabels.length - 1 && itemIndex < selectedItems.length\n      ? 'cursor-pointer'\n      : 'cursor-auto';\n\n  const getSelectedItemBackgroundClasses = itemIndex =>\n    itemIndex < selectedItems.length\n      ? classNames(\n          'bg-black/[.4]',\n          itemIndex !== itemLabels.length - 1 ? 'hover:bg-transparent active:bg-secondary-dark' : ''\n        )\n      : 'bg-transparent';\n\n  const getSelectedItemBorderClasses = itemIndex =>\n    itemIndex === currentSelectedItemIndex + 1\n      ? classNames('border-2', 'border-solid', 'border-primary-light')\n      : itemIndex < selectedItems.length\n      ? 'border border-solid border-primary-active hover:border-primary-light active:border-white'\n      : 'border border-dashed border-secondary-light';\n\n  const getSelectedItemTextClasses = itemIndex =>\n    itemIndex <= selectedItems.length ? 'text-primary-light' : 'text-primary-active';\n\n  const getErrorComponent = (): ReactElement => {\n    return (\n      <div className=\"flex min-h-[1px] grow flex-col gap-4\">\n        <div className=\"text-primary-light text-[20px]\">\n          {t(`Error fetching ${itemLabels[selectedItems.length]} list`)}\n        </div>\n        <div className=\"grow bg-black p-4 text-[14px]\">{errorMessage}</div>\n      </div>\n    );\n  };\n\n  const getSelectedItemsComponent = (): ReactElement => {\n    return (\n      <div className=\"flex gap-4\">\n        {itemLabels.map((itemLabel, itemLabelIndex) => {\n          return (\n            <div\n              key={itemLabel}\n              className={classNames(\n                'flex min-w-[1px] shrink basis-[200px] flex-col gap-1 rounded-md p-3.5',\n                getSelectedItemCursorClasses(itemLabelIndex),\n                getSelectedItemBackgroundClasses(itemLabelIndex),\n                getSelectedItemBorderClasses(itemLabelIndex),\n                getSelectedItemTextClasses(itemLabelIndex)\n              )}\n              onClick={\n                (showFullConfig && itemLabelIndex < currentSelectedItemIndex) ||\n                itemLabelIndex <= currentSelectedItemIndex\n                  ? () => {\n                      setShowFullConfig(false);\n                      setSelectedItems(theList => theList.slice(0, itemLabelIndex));\n                    }\n                  : undefined\n              }\n            >\n              <div className=\"text- flex items-center gap-2\">\n                {itemLabelIndex < selectedItems.length ? (\n                  <Icon name=\"status-tracked\" />\n                ) : (\n                  <Icon name=\"status-untracked\" />\n                )}\n                <div className={classNames(NO_WRAP_ELLIPSIS_CLASS_NAMES)}>{t(itemLabel)}</div>\n              </div>\n              {itemLabelIndex < selectedItems.length ? (\n                <div className={classNames('text-[14px] text-white', NO_WRAP_ELLIPSIS_CLASS_NAMES)}>\n                  {selectedItems[itemLabelIndex].name}\n                </div>\n              ) : (\n                <br></br>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex h-[calc(100vh-300px)] select-none flex-col gap-4 pt-0.5\">\n      {getSelectedItemsComponent()}\n      <div className=\"h-0.5 w-full shrink-0 bg-black\"></div>\n      {errorMessage ? (\n        getErrorComponent()\n      ) : (\n        <ItemListComponent\n          itemLabel={itemLabels[currentSelectedItemIndex + 1]}\n          itemList={itemList}\n          onItemClicked={item => {\n            setShowFullConfig(false);\n            setSelectedItems(theList => [...theList.slice(0, currentSelectedItemIndex + 1), item]);\n          }}\n        ></ItemListComponent>\n      )}\n    </div>\n  );\n}\n\nexport default DataSourceConfigurationModalComponent;\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, useModal } from '@ohif/ui';\nimport { ExtensionManager, ServicesManager, Types } from '@ohif/core';\nimport DataSourceConfigurationModalComponent from './DataSourceConfigurationModalComponent';\n\ntype DataSourceConfigurationComponentProps = {\n  servicesManager: ServicesManager;\n  extensionManager: ExtensionManager;\n};\n\nfunction DataSourceConfigurationComponent({\n  servicesManager,\n  extensionManager,\n}: DataSourceConfigurationComponentProps): ReactElement {\n  const { t } = useTranslation('DataSourceConfiguration');\n  const { show, hide } = useModal();\n\n  const { customizationService } = servicesManager.services;\n\n  const [configurationAPI, setConfigurationAPI] = useState<Types.BaseDataSourceConfigurationAPI>();\n\n  const [configuredItems, setConfiguredItems] =\n    useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\n\n  useEffect(() => {\n    let shouldUpdate = true;\n\n    const dataSourceChangedCallback = async () => {\n      const activeDataSourceDef = extensionManager.getActiveDataSourceDefinition();\n\n      if (!activeDataSourceDef.configuration.configurationAPI) {\n        return;\n      }\n\n      const { factory: configurationAPIFactory } =\n        customizationService.get(activeDataSourceDef.configuration.configurationAPI) ?? {};\n\n      if (!configurationAPIFactory) {\n        return;\n      }\n\n      const configAPI = configurationAPIFactory(activeDataSourceDef.sourceName);\n      setConfigurationAPI(configAPI);\n\n      // New configuration API means that the existing configured items must be cleared.\n      setConfiguredItems(null);\n\n      configAPI.getConfiguredItems().then(list => {\n        if (shouldUpdate) {\n          setConfiguredItems(list);\n        }\n      });\n    };\n\n    const sub = extensionManager.subscribe(\n      extensionManager.EVENTS.ACTIVE_DATA_SOURCE_CHANGED,\n      dataSourceChangedCallback\n    );\n\n    dataSourceChangedCallback();\n\n    return () => {\n      shouldUpdate = false;\n      sub.unsubscribe();\n    };\n  }, []);\n\n  const showConfigurationModal = useCallback(() => {\n    show({\n      content: DataSourceConfigurationModalComponent,\n      title: t('Configure Data Source'),\n      contentProps: {\n        configurationAPI,\n        configuredItems,\n        onHide: hide,\n      },\n    });\n  }, [configurationAPI, configuredItems]);\n\n  useEffect(() => {\n    if (!configurationAPI || !configuredItems) {\n      return;\n    }\n\n    if (configuredItems.length !== configurationAPI.getItemLabels().length) {\n      // Not the correct number of configured items, so show the modal to configure the data source.\n      showConfigurationModal();\n    }\n  }, [configurationAPI, configuredItems, showConfigurationModal]);\n\n  return configuredItems ? (\n    <div className=\"text-aqua-pale flex items-center overflow-hidden\">\n      <Icon\n        name=\"settings\"\n        className=\"mr-2.5 h-3.5 w-3.5 shrink-0 cursor-pointer\"\n        onClick={showConfigurationModal}\n      ></Icon>\n      {configuredItems.map((item, itemIndex) => {\n        return (\n          <div\n            key={itemIndex}\n            className=\"flex overflow-hidden\"\n          >\n            <div\n              key={itemIndex}\n              className=\"overflow-hidden text-ellipsis whitespace-nowrap\"\n            >\n              {item.name}\n            </div>\n            {itemIndex !== configuredItems.length - 1 && <div className=\"px-2.5\">|</div>}\n          </div>\n        );\n      })}\n    </div>\n  ) : (\n    <></>\n  );\n}\n\nexport default DataSourceConfigurationComponent;\n","import { ExtensionManager, Types } from '@ohif/core';\n\n/**\n * This file contains the implementations of BaseDataSourceConfigurationAPIItem\n * and BaseDataSourceConfigurationAPI for the Google cloud healthcare API. To\n * better understand this implementation and/or to implement custom implementations,\n * see the platform\\core\\src\\types\\DataSourceConfigurationAPI.ts and its JS doc\n * comments as a guide.\n */\n\n/**\n * The various Google Cloud Healthcare path item types.\n */\nenum ItemType {\n  projects = 0,\n  locations = 1,\n  datasets = 2,\n  dicomStores = 3,\n}\n\ninterface NamedItem {\n  name: string;\n}\ninterface Project extends NamedItem {\n  projectId: string;\n}\n\nconst initialUrl = 'https://cloudresourcemanager.googleapis.com/v1';\nconst baseHealthcareUrl = 'https://healthcare.googleapis.com/v1';\n\nclass GoogleCloudDataSourceConfigurationAPIItem\n  implements Types.BaseDataSourceConfigurationAPIItem\n{\n  id: string;\n  name: string;\n  url: string;\n  itemType: ItemType;\n}\n\nclass GoogleCloudDataSourceConfigurationAPI implements Types.BaseDataSourceConfigurationAPI {\n  private _extensionManager: ExtensionManager;\n  private _fetchOptions: { method: string; headers: unknown };\n  private _dataSourceName: string;\n\n  constructor(dataSourceName, servicesManager, extensionManager) {\n    this._dataSourceName = dataSourceName;\n    this._extensionManager = extensionManager;\n    const userAuthenticationService = servicesManager.services.userAuthenticationService;\n    this._fetchOptions = {\n      method: 'GET',\n      headers: userAuthenticationService.getAuthorizationHeader(),\n    };\n  }\n\n  getItemLabels = () => ['Project', 'Location', 'Data set', 'DICOM store'];\n\n  async initialize(): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\n    const url = `${initialUrl}/projects`;\n\n    const projects = (await GoogleCloudDataSourceConfigurationAPI._doFetch(\n      url,\n      ItemType.projects,\n      this._fetchOptions\n    )) as Array<Project>;\n\n    if (!projects?.length) {\n      return [];\n    }\n\n    const projectItems = projects.map(project => {\n      return {\n        id: project.projectId,\n        name: project.name,\n        itemType: ItemType.projects,\n        url: `${baseHealthcareUrl}/projects/${project.projectId}`,\n      };\n    });\n\n    return projectItems;\n  }\n\n  async setCurrentItem(\n    anItem: Types.BaseDataSourceConfigurationAPIItem\n  ): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\n    const googleCloudItem = anItem as GoogleCloudDataSourceConfigurationAPIItem;\n\n    if (googleCloudItem.itemType === ItemType.dicomStores) {\n      // Last configurable item, so update the data source configuration.\n      const url = `${googleCloudItem.url}/dicomWeb`;\n      const dataSourceDefCopy = JSON.parse(\n        JSON.stringify(this._extensionManager.getDataSourceDefinition(this._dataSourceName))\n      );\n      dataSourceDefCopy.configuration = {\n        ...dataSourceDefCopy.configuration,\n        wadoUriRoot: url,\n        qidoRoot: url,\n        wadoRoot: url,\n      };\n\n      this._extensionManager.updateDataSourceConfiguration(\n        dataSourceDefCopy.sourceName,\n        dataSourceDefCopy.configuration\n      );\n\n      return [];\n    }\n\n    const subItemType = googleCloudItem.itemType + 1;\n    const subItemField = `${ItemType[subItemType]}`;\n\n    const url = `${googleCloudItem.url}/${subItemField}`;\n\n    const fetchedSubItems = await GoogleCloudDataSourceConfigurationAPI._doFetch(\n      url,\n      subItemType,\n      this._fetchOptions\n    );\n\n    if (!fetchedSubItems?.length) {\n      return [];\n    }\n\n    const subItems = fetchedSubItems.map(subItem => {\n      const nameSplit = subItem.name.split('/');\n      return {\n        id: subItem.name,\n        name: nameSplit[nameSplit.length - 1],\n        itemType: subItemType,\n        url: `${baseHealthcareUrl}/${subItem.name}`,\n      };\n    });\n\n    return subItems;\n  }\n\n  async getConfiguredItems(): Promise<Array<GoogleCloudDataSourceConfigurationAPIItem>> {\n    const dataSourceDefinition = this._extensionManager.getDataSourceDefinition(\n      this._dataSourceName\n    );\n\n    const url = dataSourceDefinition.configuration.wadoUriRoot;\n    const projectsIndex = url.indexOf('projects');\n    // Split the configured URL into (essentially) pairs (i.e. item type followed by item)\n    // Explicitly: ['projects','aProject','locations','aLocation','datasets','aDataSet','dicomStores','aDicomStore']\n    // Note that a partial configuration will have a subset of the above.\n    const urlSplit = url.substring(projectsIndex).split('/');\n\n    const configuredItems = [];\n\n    for (\n      let itemType = 0;\n      // the number of configured items is either the max (4) or the number extracted from the url split\n      itemType < 4 && (itemType + 1) * 2 < urlSplit.length;\n      itemType += 1\n    ) {\n      if (itemType === ItemType.projects) {\n        const projectId = urlSplit[1];\n        const projectUrl = `${initialUrl}/projects/${projectId}`;\n        const data = await GoogleCloudDataSourceConfigurationAPI._doFetch(\n          projectUrl,\n          ItemType.projects,\n          this._fetchOptions\n        );\n        const project = data[0] as Project;\n        configuredItems.push({\n          id: project.projectId,\n          name: project.name,\n          itemType: itemType,\n          url: `${baseHealthcareUrl}/projects/${project.projectId}`,\n        });\n      } else {\n        const relativePath = urlSplit.slice(0, itemType * 2 + 2).join('/');\n        configuredItems.push({\n          id: relativePath,\n          name: urlSplit[itemType * 2 + 1],\n          itemType: itemType,\n          url: `${baseHealthcareUrl}/${relativePath}`,\n        });\n      }\n    }\n\n    return configuredItems;\n  }\n\n  /**\n   * Fetches an array of items the specified item type.\n   * @param urlStr the fetch url\n   * @param fetchItemType the type to fetch\n   * @param fetchOptions the header options for the fetch (e.g. authorization header)\n   * @param fetchSearchParams any search query params; currently only used for paging results\n   * @returns an array of items of the specified type\n   */\n  private static async _doFetch(\n    urlStr: string,\n    fetchItemType: ItemType,\n    fetchOptions = {},\n    fetchSearchParams: Record<string, string> = {}\n  ): Promise<Array<Project> | Array<NamedItem>> {\n    try {\n      const url = new URL(urlStr);\n      url.search = new URLSearchParams(fetchSearchParams).toString();\n\n      const response = await fetch(url, fetchOptions);\n      const data = await response.json();\n      if (response.status >= 200 && response.status < 300 && data != null) {\n        if (data.nextPageToken != null) {\n          fetchSearchParams.pageToken = data.nextPageToken;\n          const subPageData = await this._doFetch(\n            urlStr,\n            fetchItemType,\n            fetchOptions,\n            fetchSearchParams\n          );\n          data[ItemType[fetchItemType]] = data[ItemType[fetchItemType]].concat(subPageData);\n        }\n        if (data[ItemType[fetchItemType]]) {\n          return data[ItemType[fetchItemType]];\n        } else if (data.name) {\n          return [data];\n        } else {\n          return [];\n        }\n      } else {\n        const message =\n          data?.error?.message ||\n          `Error returned from Google Cloud Healthcare: ${response.status} - ${response.statusText}`;\n        throw new Error(message);\n      }\n    } catch (err) {\n      const message = err?.message || 'Error occurred during fetch request.';\n      throw new Error(message);\n    }\n  }\n}\n\nexport { GoogleCloudDataSourceConfigurationAPI };\n","import OHIF from '@ohif/core';\n\nimport { InstanceMetadata, PhilipsPETPrivateGroup } from '@cornerstonejs/calculate-suv/src/types';\n\nconst metadataProvider = OHIF.classes.MetadataProvider;\n\nexport default function getPTImageIdInstanceMetadata(imageId: string): InstanceMetadata {\n  const dicomMetaData = metadataProvider.get('instance', imageId);\n\n  if (!dicomMetaData) {\n    throw new Error('dicom metadata are required');\n  }\n\n  if (\n    dicomMetaData.SeriesDate === undefined ||\n    dicomMetaData.SeriesTime === undefined ||\n    dicomMetaData.CorrectedImage === undefined ||\n    dicomMetaData.Units === undefined ||\n    !dicomMetaData.RadiopharmaceuticalInformationSequence ||\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife === undefined ||\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose === undefined ||\n    dicomMetaData.DecayCorrection === undefined ||\n    dicomMetaData.AcquisitionDate === undefined ||\n    dicomMetaData.AcquisitionTime === undefined ||\n    (dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime ===\n      undefined &&\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime ===\n        undefined)\n  ) {\n    throw new Error('required metadata are missing');\n  }\n\n  if (dicomMetaData.PatientWeight === undefined) {\n    console.warn('PatientWeight missing from PT instance metadata');\n  }\n\n  const instanceMetadata: InstanceMetadata = {\n    CorrectedImage: dicomMetaData.CorrectedImage,\n    Units: dicomMetaData.Units,\n    RadionuclideHalfLife:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\n    RadionuclideTotalDose:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\n    RadiopharmaceuticalStartDateTime:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime:\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\n    DecayCorrection: dicomMetaData.DecayCorrection,\n    PatientWeight: dicomMetaData.PatientWeight,\n    SeriesDate: dicomMetaData.SeriesDate,\n    SeriesTime: dicomMetaData.SeriesTime,\n    AcquisitionDate: dicomMetaData.AcquisitionDate,\n    AcquisitionTime: dicomMetaData.AcquisitionTime,\n  };\n\n  if (\n    dicomMetaData['70531000'] ||\n    dicomMetaData['70531000'] !== undefined ||\n    dicomMetaData['70531009'] ||\n    dicomMetaData['70531009'] !== undefined\n  ) {\n    const philipsPETPrivateGroup: PhilipsPETPrivateGroup = {\n      SUVScaleFactor: dicomMetaData['70531000'],\n      ActivityConcentrationScaleFactor: dicomMetaData['70531009'],\n    };\n    instanceMetadata.PhilipsPETPrivateGroup = philipsPETPrivateGroup;\n  }\n\n  if (dicomMetaData['0009100d'] && dicomMetaData['0009100d'] !== undefined) {\n    instanceMetadata.GEPrivatePostInjectionDateTime = dicomMetaData['0009100d'];\n  }\n\n  if (dicomMetaData.FrameReferenceTime && dicomMetaData.FrameReferenceTime !== undefined) {\n    instanceMetadata.FrameReferenceTime = dicomMetaData.FrameReferenceTime;\n  }\n\n  if (dicomMetaData.ActualFrameDuration && dicomMetaData.ActualFrameDuration !== undefined) {\n    instanceMetadata.ActualFrameDuration = dicomMetaData.ActualFrameDuration;\n  }\n\n  if (dicomMetaData.PatientSex && dicomMetaData.PatientSex !== undefined) {\n    instanceMetadata.PatientSex = dicomMetaData.PatientSex;\n  }\n\n  if (dicomMetaData.PatientSize && dicomMetaData.PatientSize !== undefined) {\n    instanceMetadata.PatientSize = dicomMetaData.PatientSize;\n  }\n\n  return instanceMetadata;\n}\n\nfunction convertInterfaceTimeToString(time): string {\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\n\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(6, '0');\n\n  const timeString = `${hours}${minutes}${seconds}.${fractionalSeconds}`;\n  return timeString;\n}\n\nfunction convertInterfaceDateToString(date): string {\n  const month = `${date.month}`.padStart(2, '0');\n  const day = `${date.day}`.padStart(2, '0');\n  const dateString = `${date.year}${month}${day}`;\n  return dateString;\n}\n\nexport { getPTImageIdInstanceMetadata };\n","import { DicomMetadataStore, classes } from '@ohif/core';\nimport { calculateSUVScalingFactors } from '@cornerstonejs/calculate-suv';\n\nimport getPTImageIdInstanceMetadata from './getPTImageIdInstanceMetadata';\n\nconst metadataProvider = classes.MetadataProvider;\n\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n */\nexport default function init({ servicesManager, configuration = {} }): void {\n  const { stateSyncService } = servicesManager.services;\n  // Add\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handlePETImageMetadata);\n\n  // If the metadata for PET has changed by the user (e.g. manually changing the PatientWeight)\n  // we need to recalculate the SUV Scaling Factors\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_UPDATED, handlePETImageMetadata);\n\n  // viewportGridStore is a sync state which stores the entire\n  // ViewportGridService getState, by the keys `<activeStudyUID>:<protocolId>:<stageIndex>`\n  // Used to recover manual changes to the layout of a stage.\n  stateSyncService.register('viewportGridStore', { clearOnModeExit: true });\n\n  // displaySetSelectorMap stores a map from\n  // `<activeStudyUID>:<displaySetSelectorId>:<matchOffset>` to\n  // a displaySetInstanceUID, used to display named display sets in\n  // specific spots within a hanging protocol and be able to remember what the\n  // user did with those named spots between stages and protocols.\n  stateSyncService.register('displaySetSelectorMap', { clearOnModeExit: true });\n\n  // Stores a map from `<activeStudyUID>:${protocolId}` to the getHPInfo results\n  // in order to recover the correct stage when returning to a Hanging Protocol.\n  stateSyncService.register('hangingProtocolStageIndexMap', {\n    clearOnModeExit: true,\n  });\n\n  // Stores a map from the to be applied hanging protocols `<activeStudyUID>:<protocolId>`\n  // to the previously applied hanging protolStageIndexMap key, in order to toggle\n  // off the applied protocol and remember the old state.\n  stateSyncService.register('toggleHangingProtocol', { clearOnModeExit: true });\n\n  // Stores the viewports by `rows-cols` position so that when the layout\n  // changes numRows and numCols, the viewports can be remembers and then replaced\n  // afterwards.\n  stateSyncService.register('viewportsByPosition', { clearOnModeExit: true });\n}\n\nconst handlePETImageMetadata = ({ SeriesInstanceUID, StudyInstanceUID }) => {\n  const { instances } = DicomMetadataStore.getSeries(StudyInstanceUID, SeriesInstanceUID);\n\n  const modality = instances[0].Modality;\n  if (modality !== 'PT') {\n    return;\n  }\n  const imageIds = instances.map(instance => instance.imageId);\n  const instanceMetadataArray = [];\n  imageIds.forEach(imageId => {\n    const instanceMetadata = getPTImageIdInstanceMetadata(imageId);\n    if (instanceMetadata) {\n      instanceMetadataArray.push(instanceMetadata);\n    }\n  });\n\n  if (!instanceMetadataArray.length) {\n    return;\n  }\n\n  // try except block to prevent errors when the metadata is not correct\n  let suvScalingFactors;\n  try {\n    suvScalingFactors = calculateSUVScalingFactors(instanceMetadataArray);\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (!suvScalingFactors) {\n    return;\n  }\n\n  instanceMetadataArray.forEach((instanceMetadata, index) => {\n    metadataProvider.addCustomMetadata(imageIds[index], 'scalingModule', suvScalingFactors[index]);\n  });\n};\n","import { Types } from '@ohif/core';\n\nimport getDataSourcesModule from './getDataSourcesModule.js';\nimport getLayoutTemplateModule from './getLayoutTemplateModule.js';\nimport getPanelModule from './getPanelModule';\nimport getSopClassHandlerModule from './getSopClassHandlerModule.js';\nimport getToolbarModule from './getToolbarModule';\nimport getCommandsModule from './commandsModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getStudiesForPatientByMRN from './Panels/getStudiesForPatientByMRN';\nimport getCustomizationModule from './getCustomizationModule';\nimport { id } from './id.js';\nimport preRegistration from './init';\nimport { ContextMenuController, CustomizableContextMenuTypes } from './CustomizableContextMenu';\nimport * as dicomWebUtils from './DicomWebDataSource/utils';\n\nconst defaultExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration,\n  getDataSourcesModule,\n  getLayoutTemplateModule,\n  getPanelModule,\n  getHangingProtocolModule,\n  getSopClassHandlerModule,\n  getToolbarModule,\n  getCommandsModule,\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'common',\n        exports: {\n          getStudiesForPatientByMRN,\n        },\n      },\n    ];\n  },\n\n  getCustomizationModule,\n};\n\nexport default defaultExtension;\n\nexport {\n  ContextMenuController,\n  CustomizableContextMenuTypes,\n  getStudiesForPatientByMRN,\n  dicomWebUtils,\n};\n","import ViewerLayout from './ViewerLayout';\n/*\n- Define layout for the viewer in mode configuration.\n- Pass in the viewport types that can populate the viewer.\n- Init layout based on the displaySets and the objects.\n*/\n\nexport default function ({ servicesManager, extensionManager, commandsManager, hotkeysManager }) {\n  function ViewerLayoutWithServices(props) {\n    return ViewerLayout({\n      servicesManager,\n      extensionManager,\n      commandsManager,\n      hotkeysManager,\n      ...props,\n    });\n  }\n\n  return [\n    // Layout Template Definition\n    // TODO: this is weird naming\n    {\n      name: 'viewerLayout',\n      id: 'viewerLayout',\n      component: ViewerLayoutWithServices,\n    },\n  ];\n}\n","import { ToolbarButton } from '@ohif/ui';\nimport ToolbarDivider from './Toolbar/ToolbarDivider.tsx';\nimport ToolbarLayoutSelector from './Toolbar/ToolbarLayoutSelector.tsx';\nimport ToolbarSplitButton from './Toolbar/ToolbarSplitButton.tsx';\n\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\n  return [\n    {\n      name: 'ohif.divider',\n      defaultComponent: ToolbarDivider,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.action',\n      defaultComponent: ToolbarButton,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.radioGroup',\n      defaultComponent: ToolbarButton,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.splitButton',\n      defaultComponent: ToolbarSplitButton,\n      clickHandler: () => {},\n    },\n    {\n      name: 'ohif.layoutSelector',\n      defaultComponent: ToolbarLayoutSelector,\n      clickHandler: (evt, clickedBtn, btnSectionName) => {},\n    },\n    {\n      name: 'ohif.toggle',\n      defaultComponent: ToolbarButton,\n      clickHandler: () => {},\n    },\n  ];\n}\n","import { CustomizationService } from '@ohif/core';\nimport React from 'react';\nimport DataSourceSelector from './Panels/DataSourceSelector';\nimport DataSourceConfigurationComponent from './Components/DataSourceConfigurationComponent';\nimport { GoogleCloudDataSourceConfigurationAPI } from './DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI';\n\n/**\n *\n * Note: this is an example of how the customization module can be used\n * using the customization module. Below, we are adding a new custom route\n * to the application at the path /custom and rendering a custom component\n * Real world use cases of the having a custom route would be to add a\n * custom page for the user to view their profile, or to add a custom\n * page for login etc.\n */\nexport default function getCustomizationModule({ servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'helloPage',\n      value: {\n        id: 'customRoutes',\n        routes: [\n          {\n            path: '/custom',\n            children: () => <h1 style={{ color: 'white' }}>Hello Custom Route</h1>,\n          },\n        ],\n      },\n    },\n\n    // Example customization to list a set of datasources\n    {\n      name: 'datasources',\n      value: {\n        id: 'customRoutes',\n        routes: [\n          {\n            path: '/datasources',\n            children: DataSourceSelector,\n          },\n        ],\n      },\n    },\n\n    {\n      name: 'default',\n      value: [\n        /**\n         * Customization Component Type definition for overlay items.\n         * Overlay items are texts (or other components) that will be displayed\n         * on a Viewport Overlay, which contains the information panels on the\n         * four corners of a viewport.\n         *\n         * @definition of a overlay item using this type\n         * The value to be displayed is defined by\n         *  - setting DICOM image instance's property to this field,\n         *  - or defining contentF()\n         *\n         * {\n         *   id: string - unique id for the overlay item\n         *   customizationType: string - indicates customization type definition to this\n         *   label: string - Label, to be displayed for the item\n         *   title: string - Tooltip, for the item\n         *   color: string - Color of the text\n         *   condition: ({ instance }) => boolean - decides whether to display the overlay item or not\n         *   attribute: string - property name of the DICOM image instance\n         *   contentF: ({ instance, formatters }) => string | component,\n         * }\n         *\n         * @example\n         *  {\n         *    id: 'PatientNameOverlay',\n         *    customizationType: 'ohif.overlayItem',\n         *    label: 'PN:',\n         *    title: 'Patient Name',\n         *    color: 'yellow',\n         *    condition: ({ instance }) => instance && instance.PatientName && instance.PatientName.Alphabetic,\n         *    attribute: 'PatientName',\n         *    contentF: ({ instance, formatters: { formatPN } }) => `${formatPN(instance.PatientName.Alphabetic)} ${(instance.PatientSex ? '(' + instance.PatientSex + ')' : '')}`,\n         *  },\n         *\n         * @see CustomizableViewportOverlay\n         */\n        {\n          id: 'ohif.overlayItem',\n          content: function (props) {\n            if (this.condition && !this.condition(props)) {\n              return null;\n            }\n\n            const { instance } = props;\n            const value =\n              instance && this.attribute\n                ? instance[this.attribute]\n                : this.contentF && typeof this.contentF === 'function'\n                ? this.contentF(props)\n                : null;\n            if (!value) {\n              return null;\n            }\n\n            return (\n              <span\n                className=\"overlay-item flex flex-row\"\n                style={{ color: this.color || undefined }}\n                title={this.title || ''}\n              >\n                {this.label && <span className=\"mr-1 shrink-0\">{this.label}</span>}\n                <span className=\"font-light\">{value}</span>\n              </span>\n            );\n          },\n        },\n\n        {\n          id: 'ohif.contextMenu',\n\n          /** Applies the customizationType to all the menu items.\n           * This function clones the object and child objects to prevent\n           * changes to the original customization object.\n           */\n          transform: function (customizationService: CustomizationService) {\n            // Don't modify the children, as those are copied by reference\n            const clonedObject = { ...this };\n            clonedObject.menus = this.menus.map(menu => ({ ...menu }));\n\n            for (const menu of clonedObject.menus) {\n              const { items: originalItems } = menu;\n              menu.items = [];\n              for (const item of originalItems) {\n                menu.items.push(customizationService.transform(item));\n              }\n            }\n            return clonedObject;\n          },\n        },\n\n        {\n          // the generic GUI component to configure a data source using an instance of a BaseDataSourceConfigurationAPI\n          id: 'ohif.dataSourceConfigurationComponent',\n          component: DataSourceConfigurationComponent.bind(null, {\n            servicesManager,\n            extensionManager,\n          }),\n        },\n\n        {\n          // The factory for creating an instance of a BaseDataSourceConfigurationAPI for Google Cloud Healthcare\n          id: 'ohif.dataSourceConfigurationAPI.google',\n          factory: (dataSourceName: string) =>\n            new GoogleCloudDataSourceConfigurationAPI(\n              dataSourceName,\n              servicesManager,\n              extensionManager\n            ),\n        },\n      ],\n    },\n  ];\n}\n"],"names":["getString","getName","getModalities","DICOMWeb","processResults","qidoStudies","length","studies","forEach","qidoStudy","push","studyInstanceUid","date","time","accession","mrn","patientName","utils","formatPN","instances","Number","description","modalities","async","search","dicomWebClient","seriesInstanceUid","queryParameters","searchForStudies","undefined","queryParams","mapParams","params","options","arguments","commaSeparatedFields","join","supportsWildcard","withWildcard","value","parameters","PatientName","patientId","AccessionNumber","accessionNumber","StudyDescription","studyDescription","ModalitiesInStudy","modalitiesInStudy","limit","offset","fuzzymatching","supportsFuzzyMatching","includefield","startDate","endDate","StudyDate","today","Date","DD","String","getDate","padStart","MM","getMonth","todayStr","getFullYear","oldDateStr","studyUids","Array","isArray","replace","StudyInstanceUID","final","Object","keys","key","getImageId","_ref","instance","frame","config","thumbnail","url","renderingAttr","uri","baseWadoRsUri","SeriesInstanceUID","SOPInstanceUID","wadoRoot","buildInstanceWadoRsUri","buildInstanceFrameWadoRsUri","getWADORSImageId","wadouri","paramString","wadoUriRoot","buildInstanceWadoUrl","imageId","RetrieveMetadataLoader","constructor","client","studyInstanceUID","filters","sortCriteria","sortFunction","this","execLoad","preLoadData","preLoad","loadData","load","posLoad","runLoaders","loaders","result","loader","e","next","done","Error","configLoad","RetrieveMetadataLoaderSync","getOptions","seriesInstanceUID","getLoaders","retrieveSeriesMetadata","bind","retrieveStudyMetadata","RetrieveMetadataLoaderAsync","getPreLoaders","preLoaders","searchForSeries","naturalizeDataset","dcmjs","DicomMetaDictionary","naturalized","map","sortStudySeries","sortingCriteria","seriesSortCriteria","seriesInfoSortingCriteria","seriesAsyncLoader","seriesInstanceUIDList","freeze","hasNext","shift","makeSeriesAsyncLoader","s","promises","enableStudyLazyLoad","retrieveMetadataLoader","moduleName","StudyMetaDataPromises","Map","has","get","promise","Promise","resolve","reject","RetrieveMetadata","then","data","set","deleteStudyMetadataPromise","delete","StaticWadoClient","api","DICOMwebClient","qidoConfig","super","staticWado","searchResult","lowerParams","toLowerParams","filter","study","studyFilterKeys","filterItem","series","seriesFilterKeys","compareValues","desired","actual","find","item","actualItem","Alphabetic","indexOf","substring","compareDateRange","range","dash","start","end","sourceFilterMap","altKey","testValue","valueElem","vr","Value","entries","toLowerCase","studyinstanceuid","patientname","studydescription","studydate","modalitiesinstudy","accessionnumber","seriesinstanceuid","seriesnumber","modality","getDirectURL","singlepart","tag","defaultPath","defaultType","fetchPart","DirectRetrieveURL","InlineBinary","blob","b64toBlob","URL","createObjectURL","retrieveBulkData","arr","Blob","type","console","warn","BulkDataURI","hasQuery","hasAccept","fixBulkDataURI","dicomWebConfig","startsWith","origin","bulkDataURI","relativeResolution","DicomDict","denaturalizeDataset","ImplementationClassUID","ImplementationVersionName","EXPLICIT_VR_LITTLE_ENDIAN","metadataProvider","classes","MetadataProvider","createDicomWebApi","userAuthenticationService","dicomWebConfigCopy","wadoConfig","qidoDicomWebClient","wadoDicomWebClient","getAuthrorizationHeader","generateWadoHeader","implementation","initialize","query","onConfiguration","JSON","parse","stringify","xhrRequestHeaders","authHeaders","getAuthorizationHeader","Authorization","Accept","generateAcceptHeader","acceptHeader","requestTransferSyntaxUID","omitQuotationForMultipartRequest","qidoRoot","headers","errorInterceptor","errorHandler","getHTTPErrorHandler","origParams","mappedParams","qidoSearch","qidoSeries","seriesNumber","seriesDate","formatDate","numSeriesInstances","processSeriesResults","seriesInStudy","call","retrieve","directURL","_ref2","multipart","val","metadata","madeInClient","_retrieveSeriesMetadataAsync","_retrieveSeriesMetadataSync","store","dicom","dataset","request","ArrayBuffer","datasets","storeInstances","meta","FileMetaInformationVersion","_meta","MediaStorageSOPClassUID","SOPClassUID","MediaStorageSOPInstanceUID","TransferSyntaxUID","denaturalized","dicomDict","dict","write","naturalizedInstancesMetadata","seriesSummaryMetadata","instancesPerSeries","SeriesDescription","SeriesNumber","SeriesTime","ProtocolName","Modality","getImageIdsForInstance","addImageIdToUIDs","seriesMetadata","values","DicomMetadataStore","addSeriesMetadata","addInstances","seriesPromises","addRetrieveBulkData","enabled","ret","arrayBuffer","byteLength","aSeries","seriesDeliveredPromises","naturalizedInstances","index","wadoUri","all","getStudy","isLoaded","getImageIdsForDisplaySet","displaySet","images","imageIds","NumberOfFrames","_ref3","getConfig","getStudyInstanceUIDs","_ref4","StudyInstanceUIDs","paramsStudyInstanceUIDs","queryStudyInstanceUIDs","splitComma","getAll","supportsReject","xhr","XMLHttpRequest","open","log","onreadystatechange","readyState","status","responseText","send","IWebApiDataSource","create","OHIF","mappings","_store","urls","studyInstanceUIDMap","getMetaDataByURL","metaData","findStudies","aStudy","createDicomJSONApi","dicomJsonConfig","response","fetch","json","naturalizedDicom","param","mappedParam","NumInstances","Modalities","PatientID","StudyTime","debug","customSort","seriesSummary","numberOfSeries","obj","i","EVENTS","END_MODALITIES","SR","SEG","DOC","compareValue","v1","v2","seriesA","seriesB","instanceA","instanceB","modalityA","modalityB","isEndA","isEndB","createDicomLocalApi","dicomLocalConfig","name","numInstances","Set","add","firstInstance","from","SeriesDate","_broadcastEvent","SERIES_ADDED","isMultiframe","frameIndex","INSTANCES_ADDED","naturalizedReport","reportBlob","datasetToBlob","objectUrl","window","location","assign","getInstance","StudyInstanceUIDsAsArray","isStudyInCache","sort","createDicomWebProxyApi","dicomWebProxyConfig","UserAuthenticationService","dicomWebDelegate","servers","dicomWeb","configuration","studyInstanceUIDs","split","createDataSource","Toolbar","servicesManager","toolbarService","services","toolbarButtons","setToolbarButtons","useState","buttonState","setButtonState","primaryToolId","toggles","groups","useEffect","unsubscribe","unsub1","subscribe","TOOL_BAR_MODIFIED","getButtonSection","unsub2","TOOL_BAR_STATE_MODIFIED","state","React","toolDef","id","Component","componentProps","isActive","className","classnames","_extends","bState","onInteraction","args","recordInteraction","availableLanguages","defaultLanguage","currentLanguage","i18n","hotkeysManager","extensionManager","appConfig","useAppConfig","navigate","useNavigate","useLocation","t","useTranslation","show","hide","useModal","hotkeyDefinitions","hotkeyDefaults","menuOptions","title","icon","onClick","content","AboutModal","contentProps","versionNumber","process","commitHash","UserPreferences","getValidHotkeyDefinitions","onCancel","hotkeys","stopRecord","unpause","onSubmit","language","changeLanguage","setHotkeys","onReset","restoreDefaultBindings","hotkeysModule","oidc","encodeURIComponent","href","Header","isReturnEnabled","showStudyList","onClickReturnButton","pathname","dataSourceIdx","configUrl","URLSearchParams","dataSourceName","existingDataSource","getDataSources","searchQuery","append","decodeURIComponent","toString","WhiteLabeling","whiteLabeling","ErrorBoundary","context","ViewerLayout","commandsManager","viewports","ViewportGridComp","leftPanels","rightPanels","leftPanelDefaultClosed","rightPanelDefaultClosed","hangingProtocolService","showLoadingIndicator","setShowLoadingIndicator","document","body","classList","remove","getComponent","entry","getModuleEntry","component","getPanelData","iconName","iconLabel","label","HangingProtocolService","PROTOCOL_CHANGED","leftPanelComponents","rightPanelComponents","viewportComponents","viewportComponent","namespace","displaySetsToDisplay","ViewerHeader","style","height","LoadingIndicatorProgress","SidePanel","side","activeTabIndex","tabs","propTypes","PropTypes","isRequired","CommandsManager","ServicesManager","children","sortStudyInstances","PanelStudyBrowser","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","displaySetService","uiNotificationService","useImageViewer","activeViewportId","viewportGridService","useViewportGrid","activeTabName","setActiveTabName","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","isMounted","useRef","sid","qidoForStudyUID","qidoStudiesForPatient","error","actuallyMappedStudies","prevArray","it","fetchStudiesForPatient","activeDisplaySets","newImageSrcEntry","getDisplaySetByUID","dSet","displaySetInstanceUID","Math","floor","unsupported","current","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","initialViewport","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","ds","tabStudy","includes","_createStudyBrowserTabs","activeDisplaySetInstanceUIDs","displaySetInstanceUIDs","StudyBrowser","onDoubleClickThumbnail","updatedViewports","viewportId","getViewportsRequireUpdate","message","duration","setDisplaySetsForViewports","onClickStudy","shouldCollapseStudy","updatedExpandedStudyInstanceUIDs","stdyUid","onClickTab","clickedTabName","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","seriesTime","numImageFrames","countIcon","messages","dragData","isHydratedForDerivedDisplaySet","isHydrated","cornerstone","canvas","createElement","utilities","loadImageToCanvas","toDataURL","catch","some","WrappedPanelStudyBrowser","_getStudiesForPatientByMRN","_getImageSrcFromImageId","exports","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","ButtonGroup","color","size","LegacyButton","defaultProps","alert","CREATE_REPORT_DIALOG_RESPONSE","CANCEL","CREATE_REPORT","Loading","measurements","uiDialogService","loadingDialogId","showOverlay","isDraggable","centralize","runCommand","measurementData","additionalFindingTypes","getMostRecentDisplaySet","dismiss","MIN_SR_SERIES_NUMBER","findSRWithSameSeriesDescription","sameSeries","InstanceNumber","srSeriesNumbers","max","getNextSRSeriesNumber","downloadCSVReport","PanelMeasurementTable","viewportGrid","measurementService","displayMeasurements","setDisplayMeasurements","debouncedSetDisplayMeasurements","debounce","_getMappedMeasurements","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","evt","unsub","cancel","onMeasurementItemClickHandler","_ref6","uid","measurement","m","MeasurementTable","jumpToMeasurement","onEdit","getMeasurement","onSubmitHandler","action","update","Dialog","noCloseButton","_ref5","setValue","Input","labelClassName","autoFocus","onChange","event","persist","target","onKeyPress","actions","text","ButtonEnums","secondary","primary","getMeasurements","onClearMeasurementsClick","clearMeasurements","activeViewport","trackedMeasurements","referenceStudyUID","promptResult","dialogId","dataSourcesOpts","dataSourceMap","dataSourceDefs","supportsStow","placeHolder","useLastPosition","activeDataSource","onClose","_handleClose","Select","closeMenuOnSelect","placeholder","option","v","isClearable","required","createReportDialogPrompt","createReportAsync","types","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","_mapMeasurementToDisplay","VALUE_TYPES","secondaryLabel","wrappedMeasurementPanel","packageJson","_checkSeriesPositionShift","previousPosition","actualPosition","scanAxisNormal","averageSpacingBetweenFrames","predictedPosition","vec3","areAllImagePositionsEqual","firstImageOrientationPatient","toNumber","ImageOrientationPatient","imageOrientation","rowCosineVec","colCosineVec","calculateScanAxisNormal","firstImagePositionPatient","ImagePositionPatient","lastIpp","_getPerpendicularDistance","previousImagePositionPatient","imagePositionPatient","checkSingleFrames","firstImage","firstImageRows","Rows","firstImageColumns","Columns","areAllImageDimensionsEqual","addMessage","DisplaySetMessage","CODES","INCONSISTENT_DIMENSIONS","firstImageSamplesPerPixel","SamplesPerPixel","areAllImageComponentsEqual","INCONSISTENT_COMPONENTS","imageOrientationPatient","_isSameOrientation","areAllImageOrientationsEqual","INCONSISTENT_ORIENTATIONS","INCONSISTENT_POSITION_INFORMATION","issuesFound","spacingBetweenFrames","spacingIssue","_getSpacingIssue","issue","reconstructionIssues","MISSING_FRAMES","IRREGULAR_SPACING","areAllImageSpacingEqual","getDisplaySetMessages","isReconstructable","DisplaySetMessageList","NO_VALID_INSTANCES","ImageType","constructableModalities","every","NO_POSITION_INFORMATION","sortedInstances","sortInstancesByPosition","multiFrameInstance","hasPixelMeasurements","MULTIFRAME_NO_PIXEL_MEASUREMENTS","hasOrientation","MULTIFRAME_NO_ORIENTATION","hasPosition","MULTIFRAME_NO_POSITION_INFORMATION","checkMultiFrame","NOT_RECONSTRUCTABLE","getDisplaySetsFromUnsupportedSeries","imageSet","ImageSet","UNSUPPORTED_DISPLAYSET","setAttributes","FrameRate","FrameTime","SOPClassHandlerId","sopClassHandlerName","isMultiFrame","makeDisplaySet","isDisplaySetReconstructable","sortBy","a","b","parseInt","isSingleImageModality","getDisplaySetsFromSeries","sopClassUids","uniqueSopClassUidsInSeries","getSopClassUids","stackableInstances","isImage","isClip","instanceNumber","acquisitionDatetime","AcquisitionDateTime","setAttribute","sopClassDictionary","ComputedRadiographyImageStorage","DigitalXRayImageStorageForPresentation","DigitalXRayImageStorageForProcessing","DigitalMammographyXRayImageStorageForPresentation","DigitalMammographyXRayImageStorageForProcessing","DigitalIntraOralXRayImageStorageForPresentation","DigitalIntraOralXRayImageStorageForProcessing","CTImageStorage","EnhancedCTImageStorage","LegacyConvertedEnhancedCTImageStorage","UltrasoundMultiframeImageStorage","MRImageStorage","EnhancedMRImageStorage","EnhancedMRColorImageStorage","LegacyConvertedEnhancedMRImageStorage","UltrasoundImageStorage","UltrasoundImageStorageRET","SecondaryCaptureImageStorage","MultiframeSingleBitSecondaryCaptureImageStorage","MultiframeGrayscaleByteSecondaryCaptureImageStorage","MultiframeGrayscaleWordSecondaryCaptureImageStorage","MultiframeTrueColorSecondaryCaptureImageStorage","XRayAngiographicImageStorage","EnhancedXAImageStorage","XRayRadiofluoroscopicImageStorage","EnhancedXRFImageStorage","XRay3DAngiographicImageStorage","XRay3DCraniofacialImageStorage","BreastTomosynthesisImageStorage","BreastProjectionXRayImageStorageForPresentation","BreastProjectionXRayImageStorageForProcessing","IntravascularOpticalCoherenceTomographyImageStorageForPresentation","IntravascularOpticalCoherenceTomographyImageStorageForProcessing","NuclearMedicineImageStorage","VLEndoscopicImageStorage","VideoEndoscopicImageStorage","VLMicroscopicImageStorage","VideoMicroscopicImageStorage","VLSlideCoordinatesMicroscopicImageStorage","VLPhotographicImageStorage","VideoPhotographicImageStorage","OphthalmicPhotography8BitImageStorage","OphthalmicPhotography16BitImageStorage","OphthalmicTomographyImageStorage","VLWholeSlideMicroscopyImageStorage","PositronEmissionTomographyImageStorage","EnhancedPETImageStorage","LegacyConvertedEnhancedPETImageStorage","RTImageStorage","EnhancedUSVolumeStorage","ToolbarDivider","LayoutSelector","rows","columns","rest","isOpen","setIsOpen","closeOnOutsideClick","protocol","addEventListener","removeEventListener","DropdownContent","OHIFLayoutSelector","ToolbarButton","onInteractionHandler","rounded","dropdownContent","onSelection","props","interactionType","commands","commandName","commandOptions","onLayoutChange","SplitButton","getMenuItems","selectorProps","menus","menuIdFilter","subProps","menu","subMenu","findIt","menuId","findMenuById","selector","findMenuDefault","findMenuIterator","return","findMenu","items","menuItems","delegating","toAdd","newItem","actionType","iconRight","itemRef","detail","element","adaptItem","ContextMenuController","closeContextMenu","showContextMenu","contextMenuProps","viewportElement","defaultPointsPosition","ContextMenuItemsBuilder","preservePosition","preventCutOf","defaultPosition","_getDefaultPosition","ContextMenu","onClickOutside","eventData","onShowSubMenu","onDefault","run","getDefaultPosition","x","y","_getEventDefaultPosition","eventDetail","currentPoints","_getElementDefaultPosition","boundingClientRect","getBoundingClientRect","_getCanvasPointsPosition","points","viewerPos","pointIndex","point","_isValidPosition","source","canvasPoints","viewerElement","positionIterator","getPositionIterator","position","customizationType","nearbyToolData","rowVerticalPaddingStyle","padding","rowStyle","borderBottomWidth","ColumnHeaders","tagRef","vrRef","keywordRef","valueRef","classNames","ref","listRef","canvasRef","tagHeaderElem","setTagHeaderElem","vrHeaderElem","setVrHeaderElem","keywordHeaderElem","setKeywordHeaderElem","valueHeaderElem","setValueHeaderElem","scrollTo","resetAfterIndex","debouncedResize","Row","useCallback","row","isHeaderRendered","getItemSize","headerWidths","offsetWidth","getContext","font","getComputedStyle","colText","colOneLineWidth","measureText","width","ceil","reduce","maxHeight","colHeight","visibility","elem","List","itemCount","itemSize","nameMap","getFormattedRowsFromTags","tags","tagInfo","tagIndent","keyword","formatedRowsFromTags","Tag","fromPString","toCleanString","originalTagInfo","getRows","depth","keywords","sequenceAsArray","objectOrArray","sequence","sequenceRows","_sortTagList","regex","match","tagList","excludedColumnIndicesForFilter","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","activeDisplaySet","isImageStack","showInstanceList","displaySetList","useMemo","dateStr","moment","format","getSortedTags","filteredRows","filterValueLowerCase","keepRow","col","colIndex","debouncedSetFilterValue","Typography","variant","InputRange","minValue","maxValue","step","inputClassName","labelPosition","trackColor","InputFilterText","onDebounceChange","DicomTagTable","reuseCachedLayout","syncService","getActiveProtocol","hpInfo","getState","protocolId","stageIndex","activeStudyUID","syncState","viewportGridStore","displaySetSelectorMap","stage","stages","storeId","cacheId","hangingProtocolStageIndexMap","viewportStructure","properties","custom","layout","numRows","numCols","viewport","displaySetOptions","displaySetUID","matchedDisplaySetsIndex","findOrCreateViewport","viewportsByPosition","positionId","byPositionViewport","inDisplay","initialInDisplay","missing","getMissingViewport","displaySetsInfo","viewportOptions","findViewportsByPosition","storedViewport","subscribeToNextViewportGridChange","isHangingProtocolCommand","command","customizationService","stateSyncService","contextMenuController","menuCustomizationId","optionsToUse","defaultContextMenu","displayNotification","clear","toggleHpTools","toggleStageIndex","enableListener","button","hpCommand","stageId","setActive","getButtons","setHangingProtocol","reset","oldProtocol","stateSyncReduce","reuseCachedLayouts","hangingId","useStageIdx","getStageIndex","setActiveStudyUID","storedHanging","restoreProtocol","setProtocol","callbacks","onProtocolExit","onProtocolEnter","toggleHangingProtocol","desiredStageIndex","activeStudy","previousState","deltaStage","direction","oldStageIndex","setViewportGridLayout","setTimeout","completeLayout","stateReduce","layoutFindOrCreate","setLayout","toggleOneUp","viewportGridState","toggleOneUpViewportGridStore","viewportIdToUpdate","updatedViewportsViaHP","flat","currentOneUpViewport","newViewports","layoutOptions","getLayoutOptionsFromState","clearToggleOneUpViewportGridStore","navigateHistory","historyArgs","history","to","openDICOMTagViewer","activeViewportSpecificData","UIModalService","DicomTagBrowser","toggleOverlays","overlays","getElementsByClassName","toggle","scrollActiveThumbnailIntoView","activeDisplaySetInstanceUID","thumbnailList","querySelector","thumbnailListBounds","thumbnailBounds","top","bottom","scrollIntoView","behavior","updateViewportDisplaySet","_ref7","excludeNonImageModalities","nonImageModalities","dsSortFn","getDisplaySetSortFunction","currentDisplaySets","displaySetIndexToShow","findIndex","definitions","commandFn","storeContexts","nextStage","previousStage","defaultContext","protocolMatchingRules","weight","attribute","constraint","greaterThan","toolGroupIds","displaySetSelectors","defaultDisplaySetId","seriesMatchingRules","equals","defaultViewport","viewportType","toolGroupId","allowUnmatchedView","stageActivation","minViewportsMatched","layoutType","requiredViewports","preferredViewports","numberOfPriorsReferenced","currentDisplaySet","priorDisplaySet","currentViewport0","currentViewport1","priorViewport0","notNull","studyMatchingRules","priorDisplaySetId","defaultProtocol","locked","createdDate","modifiedDate","availableTo","editableBy","initialImageOptions","hpMNGrid","hpMNCompare","dsConfigs","dataSources","src","alt","sourceName","friendlyName","Button","itemLabel","itemList","onItemClicked","Icon","endIcon","NO_WRAP_ELLIPSIS_CLASS_NAMES","configurationAPI","configuredItems","onHide","setItemList","selectedItems","setSelectedItems","errorMessage","setErrorMessage","itemLabels","getItemLabels","showFullConfig","setShowFullConfig","currentSelectedItemIndex","shouldUpdate","setCurrentItem","getSelectedItemBackgroundClasses","itemIndex","getSelectedItemBorderClasses","getSelectedItemTextClasses","itemLabelIndex","theList","slice","ItemListComponent","setConfigurationAPI","setConfiguredItems","dataSourceChangedCallback","activeDataSourceDef","getActiveDataSourceDefinition","factory","configurationAPIFactory","configAPI","getConfiguredItems","list","sub","ACTIVE_DATA_SOURCE_CHANGED","showConfigurationModal","DataSourceConfigurationModalComponent","ItemType","initialUrl","baseHealthcareUrl","GoogleCloudDataSourceConfigurationAPI","_extensionManager","_fetchOptions","_dataSourceName","method","projects","_doFetch","project","projectId","itemType","anItem","googleCloudItem","dicomStores","dataSourceDefCopy","getDataSourceDefinition","updateDataSourceConfiguration","subItemType","subItemField","fetchedSubItems","subItem","nameSplit","projectsIndex","urlSplit","projectUrl","relativePath","urlStr","fetchItemType","fetchOptions","fetchSearchParams","nextPageToken","pageToken","subPageData","concat","statusText","err","handlePETImageMetadata","getSeries","instanceMetadataArray","instanceMetadata","dicomMetaData","CorrectedImage","Units","RadiopharmaceuticalInformationSequence","RadionuclideHalfLife","RadionuclideTotalDose","DecayCorrection","AcquisitionDate","AcquisitionTime","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","PatientWeight","philipsPETPrivateGroup","SUVScaleFactor","ActivityConcentrationScaleFactor","PhilipsPETPrivateGroup","GEPrivatePostInjectionDateTime","FrameReferenceTime","ActualFrameDuration","PatientSex","PatientSize","getPTImageIdInstanceMetadata","suvScalingFactors","calculateSUVScalingFactors","addCustomMetadata","preRegistration","SERIES_UPDATED","register","clearOnModeExit","getDataSourcesModule","getLayoutTemplateModule","getPanelModule","getHangingProtocolModule","getSopClassHandlerModule","getToolbarModule","defaultComponent","clickHandler","ToolbarSplitButton","ToolbarLayoutSelector","clickedBtn","btnSectionName","getCommandsModule","getUtilityModule","getCustomizationModule","routes","path","DataSourceSelector","condition","contentF","transform","clonedObject","originalItems","DataSourceConfigurationComponent"],"sourceRoot":""}