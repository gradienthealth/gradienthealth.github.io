{"version":3,"file":"515.bundle.b8a29f79473a3f12682e.js","mappings":"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","sources":["webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/viewports/GradientCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport JSZip from 'jszip';\nimport _ from 'lodash';\n\nimport {\n  Notification,\n  ViewportActionBar,\n  useViewportDialog,\n  Icon,\n} from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\nimport { display } from '@mui/system';\n\nconst { formatDate } = utils;\n\nfunction GradientCornerstoneViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportId,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n    commandsManager,\n    viewportOptions,\n  } = props;\n\n  const { t } = useTranslation('GradientCornerstoneViewport');\n\n  const {\n    measurementService,\n    cornerstoneViewportService,\n    userAuthenticationService,\n    UINotificationService,\n  } = servicesManager.services;\n\n  // Todo: handling more than one displaySet on the same viewport\n  const displaySet = displaySets[0];\n\n  const [viewportDialogState] = useViewportDialog();\n\n  const {\n    Modality,\n    SeriesDate,\n    SeriesDescription,\n    SeriesInstanceUID,\n    SeriesNumber,\n  } = displaySet;\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    SpacingBetweenSlices,\n    ManufacturerModelName,\n  } = displaySet.images[0];\n\n  const getCornerstoneViewport = () => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    return <Component {...props} />;\n  };\n\n  const downloadStudy = () => {\n    UINotificationService.show({\n      title: 'Download',\n      message: `Downloading ${displaySet['SeriesInstanceUID']}...`,\n      type: 'warn',\n    });\n\n    const urls = _.uniq(\n      displaySet.instances.map((ele) => ele.url.split('dicomweb:')[1])\n    );\n    async function downloadFilesAndCreateZip(fileUrls) {\n      try {\n        // Download all files in parallel\n        const files = await Promise.all(\n          fileUrls.map(async (url) => {\n            const response = await fetch(url, {\n              headers: userAuthenticationService.getAuthorizationHeader(),\n            });\n            if (response.ok) {\n              const blob = await response.blob();\n              return {\n                filename:\n                  displaySet['SeriesInstanceUID'] +\n                  url.split(`${displaySet['SeriesInstanceUID']}`).slice(-1),\n                blob,\n              };\n            } else {\n              throw new Error(`Error downloading file: ${url}`);\n            }\n          })\n        );\n\n        // Create a zip object\n        const zip = new JSZip();\n        files.forEach((file) => zip.file(file.filename, file.blob));\n\n        // Generate the zip file and trigger a download in the browser\n        const zipBlob = await zip.generateAsync({ type: 'blob' });\n        const zipUrl = URL.createObjectURL(zipBlob);\n        const link = document.createElement('a');\n        link.href = zipUrl;\n        link.download = `${displaySet['SeriesInstanceUID']}.zip`;\n        link.click();\n        URL.revokeObjectURL(zipUrl);\n      } catch (error) {\n        console.error('Error downloading files:', error);\n      }\n    }\n\n    downloadFilesAndCreateZip(urls)\n      .then(() => {\n        UINotificationService.show({\n          title: 'Download',\n          message: `Downloaded ${displaySet['SeriesInstanceUID']}`,\n          type: 'success',\n        });\n      })\n      .catch((err) => {\n        UINotificationService.show({\n          title: 'Download',\n          message: `Could not downlad ${displaySet['SeriesInstanceUID']}`,\n          type: 'error',\n        });\n      });\n  };\n\n  const copySeriesInstanceUIDToClipBoard = () => {\n    navigator.clipboard\n      .writeText(displaySet['SeriesInstanceUID'])\n      .then(() => {\n        UINotificationService.show({\n          title: 'Copy to Clipboard',\n          message: 'Copied SeriesInstanceUID to Clipboard',\n          type: 'success',\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        UINotificationService.show({\n          title: 'Copy to Clipboard',\n          message: 'Could not copy SeriesInstanceUID to Clipboard',\n          type: 'error',\n        });\n      });\n  };\n  const arrowClasses =\n    'cursor-pointer shrink-0 mr-2 text-white hover:text-primary-light';\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={(evt) => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={(direction) => {\n          if (direction === 'down') {\n            downloadStudy();\n          }\n        }}\n        getStatusComponent={() => console.log('status')}\n        studyData={{\n          label: viewportLabel,\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\n          seriesDescription: SeriesDescription,\n          patientInformation: {\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName) : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\n              : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      >\n        <Icon\n          className={`${arrowClasses}`}\n          name=\"arrow-down\"\n          onClick={downloadStudy}\n        />\n        <Icon\n          className={`${arrowClasses}`}\n          style={{\n            height: '16px',\n          }}\n          name=\"clipboard\"\n          onClick={copySeriesInstanceUIDToClipBoard}\n        />\n      </ViewportActionBar>\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportId === viewportId && (\n            <Notification\n              id={viewportDialogState.id}\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nGradientCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  viewportId: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nGradientCornerstoneViewport.defaultProps = {\n  customProps: {},\n};\n\nexport default GradientCornerstoneViewport;\n"],"names":["formatDate","utils","GradientCornerstoneViewport","props","children","displaySets","viewportId","viewportLabel","servicesManager","extensionManager","commandsManager","viewportOptions","t","useTranslation","measurementService","cornerstoneViewportService","userAuthenticationService","UINotificationService","services","displaySet","viewportDialogState","useViewportDialog","Modality","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","images","downloadStudy","show","title","message","type","async","fileUrls","files","Promise","all","map","response","fetch","url","headers","getAuthorizationHeader","ok","blob","filename","split","slice","Error","zip","JSZip","forEach","file","zipBlob","generateAsync","zipUrl","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","error","console","downloadFilesAndCreateZip","_","instances","ele","then","catch","err","arrowClasses","React","ViewportActionBar","onDoubleClick","evt","stopPropagation","preventDefault","onArrowsClick","direction","getStatusComponent","log","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","Icon","className","name","onClick","style","height","copySeriesInstanceUIDToClipBoard","navigator","clipboard","writeText","getCornerstoneViewport","component","Component","getModuleEntry","Notification","id","actions","onSubmit","onOutsideClick","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}