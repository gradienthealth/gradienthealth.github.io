{"version":3,"file":"130.bundle.71000c53828b5ba61641.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/getSegmentLabel.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/SegmentationToolbox.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/generateLabelmaps2DFromImageIdMap.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/init.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({ extensionManager, servicesManager, segDisplaySet, headers }) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService, displaySetService } =\n    servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n    segDisplaySet.referencedDisplaySetInstanceUID\n  );\n  let imageIds;\n\n  if (referencedDisplaySet.isReconstructable) {\n    const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n    imageIds = cachedReferencedVolume.imageIds || cachedReferencedVolume._imageIds;\n  } else {\n    imageIds = referencedDisplaySet.instances.map(instance => instance.imageId);\n  }\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  /* Skip the warning message as it is annoying on auto segmentations loading.\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }*/\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","const getSegmentLabel = (segmentation): string => {\n  const segmentationName = segmentation.label.includes('Vessel') ? 'Vessel' : 'Segment';\n  const segmentCount = segmentation.segments.filter(segment => segment).length;\n\n  return segmentationName + ' ' + (segmentCount + 1);\n};\n\nexport default getSegmentLabel;\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationGroupTable, LegacyButtonGroup, LegacyButton } from '@ohif/ui';\n\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport { useTranslation } from 'react-i18next';\nimport getSegmentLabel from '../utils/getSegmentLabel';\n\nconst savedStatusReducer = (state, action) => {\n  return {\n    ...state,\n    ...action.payload,\n  };\n};\n\nconst SAVED_STATUS_ICON = {\n  SAVED: 'notifications-success',\n  MODIFIED: 'notifications-warning',\n  ERROR: 'notifications-error',\n};\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}) {\n  const {\n    segmentationService,\n    viewportGridService,\n    uiDialogService,\n    displaySetService,\n    userAuthenticationService,\n    CropDisplayAreaService,\n  } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n  const [savedStatusStates, dispatch] = useReducer(savedStatusReducer, {});\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    let changedSegmentations: any[] = [],\n      timerId;\n    const timoutInSeconds = 5;\n\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\n      ({ segmentation }) => {\n        clearTimeout(timerId);\n        dispatch({ payload: { [segmentation.id]: SAVED_STATUS_ICON.MODIFIED } });\n\n        if (\n          !changedSegmentations.find(\n            changedSegmentation => changedSegmentation.id === segmentation.id\n          )\n        ) {\n          changedSegmentations.push(segmentation);\n        }\n\n        timerId = setTimeout(() => {\n          const datasources = extensionManager.getActiveDataSource();\n\n          const promises = changedSegmentations.map(segmentation =>\n            createReportAsync({\n              servicesManager: servicesManager,\n              getReport: () =>\n                commandsManager.runCommand('storeSegmentation', {\n                  segmentationId: segmentation.id,\n                  dataSource: datasources[0],\n                }),\n              reportType: 'Segmentation',\n              showLoadingModal: false,\n              throwErrors: true,\n            })\n          );\n\n          Promise.allSettled(promises).then(results => {\n            const payload = results.reduce((acc, result, index) => {\n              if (result.value) {\n                changedSegmentations[index].displaySetInstanceUID = result.value[0];\n                displaySetService.getDisplaySetByUID(result.value[0])?.getReferenceDisplaySet();\n              }\n\n              return {\n                ...acc,\n                [changedSegmentations[index].id]:\n                  result.status === 'fulfilled' ? SAVED_STATUS_ICON.SAVED : SAVED_STATUS_ICON.ERROR,\n              };\n            }, {});\n\n            dispatch({ payload });\n\n            const savedSegmentations = Object.keys(payload).filter(\n              id => payload[id] === SAVED_STATUS_ICON.SAVED\n            );\n            changedSegmentations = changedSegmentations.filter(\n              cs => !savedSegmentations.includes(cs.id)\n            );\n          });\n        }, timoutInSeconds * 1000);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const setSegmentationActive = segmentationId => {\n    setReferencedDisplaySet(segmentationId);\n\n    const isSegmentationActive = segmentations.find(seg => seg.id === segmentationId)?.isActive;\n\n    if (isSegmentationActive) {\n      return;\n    }\n\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  // Set referenced displaySet of the segmentation to the viewport\n  // if it is not displayed in any of the viewports.\n  const setReferencedDisplaySet = segmentationId => {\n    const segDisplayset = displaySetService.getDisplaySetByUID(segmentationId);\n    if (!segDisplayset) {\n      return;\n    }\n\n    const referencedDisplaySetInstanceUID = segDisplayset.referencedDisplaySetInstanceUID;\n    const { viewports, activeViewportId } = viewportGridService.getState();\n    let referencedImageLoaded = false;\n    viewports.forEach(viewport => {\n      if (viewport.displaySetInstanceUIDs.includes(referencedDisplaySetInstanceUID)) {\n        referencedImageLoaded = true;\n      }\n    });\n\n    if (!referencedImageLoaded) {\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetInstanceUID],\n      });\n    }\n  };\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport');\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    setReferencedDisplaySet(segmentationId);\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    setSegmentationActive(segmentationId);\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentAdd = segmentationId => {\n    setSegmentationActive(segmentationId);\n    const label = getSegmentLabel(segmentations.find(seg => seg.id === segmentationId));\n    segmentationService.addSegment(segmentationId, { properties: { label } });\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    setReferencedDisplaySet(segmentationId);\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    setSegmentationActive(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentationEdit = segmentationId => {\n    setSegmentationActive(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    setSegmentationActive(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    setSegmentationActive(segmentationId);\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    setSegmentationActive(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    setSegmentationActive(segmentationId);\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    setSegmentationActive(segmentationId);\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  const onSegmentationDownload = segmentationId => {\n    setSegmentationActive(segmentationId);\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    setSegmentationActive(segmentationId);\n    const datasources = extensionManager.getActiveDataSource();\n    let displaySetInstanceUIDs;\n\n    try {\n      displaySetInstanceUIDs = await createReportAsync({\n        servicesManager,\n        getReport: () =>\n          commandsManager.runCommand('storeSegmentation', {\n            segmentationId,\n            dataSource: datasources[0],\n          }),\n        reportType: 'Segmentation',\n        throwErrors: true,\n      });\n\n      dispatch({ payload: { [segmentationId]: SAVED_STATUS_ICON.SAVED } });\n    } catch (error) {\n      console.warn(error.message);\n      dispatch({ payload: { [segmentationId]: SAVED_STATUS_ICON.ERROR } });\n    }\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    setSegmentationActive(segmentationId);\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  return (\n    <>\n      <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\n        <SegmentationGroupTable\n          title={t('Segmentations')}\n          segmentations={segmentations}\n          savedStatusStates={savedStatusStates}\n          disableEditing={configuration.disableEditing}\n          activeSegmentationId={selectedSegmentationId || ''}\n          onSegmentationAdd={onSegmentationAdd}\n          onSegmentationClick={onSegmentationClick}\n          onSegmentationDelete={onSegmentationDelete}\n          onSegmentationDownload={onSegmentationDownload}\n          onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n          storeSegmentation={storeSegmentation}\n          onSegmentationEdit={onSegmentationEdit}\n          onSegmentClick={onSegmentClick}\n          onSegmentEdit={onSegmentEdit}\n          onSegmentAdd={onSegmentAdd}\n          onSegmentColorClick={onSegmentColorClick}\n          onSegmentDelete={onSegmentDelete}\n          onToggleSegmentVisibility={onToggleSegmentVisibility}\n          onToggleSegmentLock={onToggleSegmentLock}\n          onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n          showDeleteSegment={true}\n          segmentationConfig={{ initialConfig: segmentationConfiguration }}\n          setRenderOutline={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n          }\n          setOutlineOpacityActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n          }\n          setRenderFill={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n          }\n          setRenderInactiveSegmentations={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderInactiveSegmentations',\n              value\n            )\n          }\n          setOutlineWidthActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n          }\n          setFillAlpha={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n          }\n          setFillAlphaInactive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n          }\n          CropDisplayAreaService={CropDisplayAreaService}\n        />\n      </div>\n    </>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React, { useCallback, useEffect, useState, useReducer } from 'react';\nimport { AdvancedToolbox, InputDoubleRange, useViewportGrid } from '@ohif/ui';\nimport { Types } from '@ohif/extension-cornerstone';\nimport { utilities } from '@cornerstonejs/tools';\nimport { EVENTS, eventTarget } from '@cornerstonejs/core';\n\nconst { segmentation: segmentationUtils } = utilities;\n\nconst TOOL_TYPES = {\n  CIRCULAR_BRUSH: 'CircularBrush',\n  SPHERE_BRUSH: 'SphereBrush',\n  CIRCULAR_ERASER: 'CircularEraser',\n  SPHERE_ERASER: 'SphereEraser',\n  CIRCLE_SHAPE: 'CircleScissor',\n  RECTANGLE_SHAPE: 'RectangleScissor',\n  SPHERE_SHAPE: 'SphereScissor',\n  THRESHOLD_CIRCULAR_BRUSH: 'ThresholdCircularBrush',\n  THRESHOLD_SPHERE_BRUSH: 'ThresholdSphereBrush',\n};\n\nconst ACTIONS = {\n  SET_TOOL_CONFIG: 'SET_TOOL_CONFIG',\n  SET_ACTIVE_TOOL: 'SET_ACTIVE_TOOL',\n};\n\nconst initialState = {\n  Brush: {\n    brushSize: 15,\n    mode: 'CircularBrush', // Can be 'CircularBrush' or 'SphereBrush'\n  },\n  Eraser: {\n    brushSize: 15,\n    mode: 'CircularEraser', // Can be 'CircularEraser' or 'SphereEraser'\n  },\n  Shapes: {\n    brushSize: 15,\n    mode: 'CircleScissor', // E.g., 'CircleScissor', 'RectangleScissor', or 'SphereScissor'\n  },\n  ThresholdBrush: {\n    brushSize: 15,\n    thresholdRange: [-500, 500],\n  },\n  activeTool: null,\n};\n\nfunction toolboxReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.SET_TOOL_CONFIG:\n      const { tool, config } = action.payload;\n      return {\n        ...state,\n        [tool]: {\n          ...state[tool],\n          ...config,\n        },\n      };\n    case ACTIONS.SET_ACTIVE_TOOL:\n      return { ...state, activeTool: action.payload };\n    default:\n      return state;\n  }\n}\n\nfunction SegmentationToolbox({ servicesManager, extensionManager }) {\n  const { toolbarService, segmentationService, toolGroupService } =\n    servicesManager.services as Types.CornerstoneServices;\n\n  const [viewportGrid] = useViewportGrid();\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const [toolsEnabled, setToolsEnabled] = useState(false);\n  const [state, dispatch] = useReducer(toolboxReducer, initialState);\n\n  const updateActiveTool = useCallback(() => {\n    if (!viewports?.size || activeViewportId === undefined) {\n      return;\n    }\n    const viewport = viewports.get(activeViewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    dispatch({\n      type: ACTIONS.SET_ACTIVE_TOOL,\n      payload: toolGroupService.getActiveToolForViewport(viewport.viewportId),\n    });\n  }, [activeViewportId, viewports, toolGroupService, dispatch]);\n\n  const setToolActive = useCallback(\n    toolName => {\n      toolbarService.recordInteraction({\n        interactionType: 'tool',\n        commands: [\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName,\n            },\n          },\n        ],\n      });\n\n      dispatch({ type: ACTIONS.SET_ACTIVE_TOOL, payload: toolName });\n    },\n    [toolbarService, dispatch]\n  );\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const defaultBrushSize = params.get('defaultBrushSize');\n    const toolCategories = ['Brush', 'Eraser'];\n\n    const elementEnabledHandler = evt => {\n      const setDefaultBrushSize = () => {\n        toolCategories.forEach(toolCategory => {\n          onBrushSizeChange(defaultBrushSize, toolCategory);\n        });\n\n        evt.detail.element.removeEventListener(\n          EVENTS.VOLUME_VIEWPORT_NEW_VOLUME,\n          setDefaultBrushSize\n        );\n        eventTarget.removeEventListener(EVENTS.STACK_VIEWPORT_NEW_STACK, setDefaultBrushSize);\n      };\n\n      evt.detail.element.addEventListener(EVENTS.VOLUME_VIEWPORT_NEW_VOLUME, setDefaultBrushSize);\n      eventTarget.addEventListener(EVENTS.STACK_VIEWPORT_NEW_STACK, setDefaultBrushSize);\n      eventTarget.removeEventListener(EVENTS.ELEMENT_ENABLED, setDefaultBrushSize);\n    };\n\n    eventTarget.addEventListener(EVENTS.ELEMENT_ENABLED, elementEnabledHandler);\n  }, []);\n\n  /**\n   * sets the tools enabled IF there are segmentations\n   */\n  useEffect(() => {\n    const events = [\n      segmentationService.EVENTS.SEGMENTATION_ADDED,\n      segmentationService.EVENTS.SEGMENTATION_UPDATED,\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\n    ];\n\n    const unsubscriptions = [];\n\n    events.forEach(event => {\n      const { unsubscribe } = segmentationService.subscribe(event, () => {\n        const segmentations = segmentationService.getSegmentations();\n\n        const activeSegmentation = segmentations?.find(seg => seg.isActive);\n\n        setToolsEnabled(activeSegmentation?.segmentCount > 0);\n      });\n\n      unsubscriptions.push(unsubscribe);\n    });\n\n    updateActiveTool();\n\n    return () => {\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\n    };\n  }, [activeViewportId, viewports, segmentationService, updateActiveTool]);\n\n  /**\n   * Update the active tool when the toolbar state changes\n   */\n  useEffect(() => {\n    const { unsubscribe } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\n      () => {\n        updateActiveTool();\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [toolbarService, updateActiveTool]);\n\n  useEffect(() => {\n    // if the active tool is not a brush tool then do nothing\n    if (!Object.values(TOOL_TYPES).includes(state.activeTool)) {\n      return;\n    }\n\n    // if the tool is Segmentation and it is enabled then do nothing\n    if (toolsEnabled) {\n      return;\n    }\n\n    // if the tool is Segmentation and it is disabled, then switch\n    // back to the window level tool to not confuse the user when no\n    // segmentation is active or when there is no segment in the segmentation\n    setToolActive('WindowLevel');\n  }, [toolsEnabled, state.activeTool, setToolActive]);\n\n  const updateBrushSize = useCallback(\n    (toolName, brushSize) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n      });\n    },\n    [toolGroupService]\n  );\n\n  const onBrushSizeChange = useCallback(\n    (valueAsStringOrNumber, toolCategory) => {\n      const value = Number(valueAsStringOrNumber);\n\n      _getToolNamesFromCategory(toolCategory).forEach(toolName => {\n        const convertedValue =\n          toolCategory === 'Brush' || toolCategory === 'Eraser'\n            ? convertPixelToMM(value, servicesManager)\n            : value;\n        updateBrushSize(toolName, convertedValue);\n      });\n\n      dispatch({\n        type: ACTIONS.SET_TOOL_CONFIG,\n        payload: {\n          tool: toolCategory,\n          config: { brushSize: value },\n        },\n      });\n    },\n    [toolGroupService, dispatch]\n  );\n\n  const handleRangeChange = useCallback(\n    newRange => {\n      if (\n        newRange[0] === state.ThresholdBrush.thresholdRange[0] &&\n        newRange[1] === state.ThresholdBrush.thresholdRange[1]\n      ) {\n        return;\n      }\n\n      const toolNames = _getToolNamesFromCategory('ThresholdBrush');\n\n      toolNames.forEach(toolName => {\n        toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n          const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD_INSIDE_CIRCLE: {\n                threshold: newRange,\n              },\n            },\n          });\n        });\n      });\n\n      dispatch({\n        type: ACTIONS.SET_TOOL_CONFIG,\n        payload: {\n          tool: 'ThresholdBrush',\n          config: { thresholdRange: newRange },\n        },\n      });\n    },\n    [toolGroupService, dispatch, state.ThresholdBrush.thresholdRange]\n  );\n\n  return (\n    <AdvancedToolbox\n      title=\"Segmentation Tools\"\n      items={[\n        {\n          name: 'Brush',\n          icon: 'icon-tool-brush',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCULAR_BRUSH ||\n            state.activeTool === TOOL_TYPES.SPHERE_BRUSH,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCULAR_BRUSH),\n          options: [\n            {\n              name: 'Radius (px)',\n              id: 'brush-radius',\n              type: 'range',\n              min: 0.5,\n              max: 10000,\n              value: state.Brush.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'Brush'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'brush-mode',\n              value: state.Brush.mode,\n              values: [\n                { value: TOOL_TYPES.CIRCULAR_BRUSH, label: 'Circle' },\n                { value: TOOL_TYPES.SPHERE_BRUSH, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Eraser',\n          icon: 'icon-tool-eraser',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCULAR_ERASER ||\n            state.activeTool === TOOL_TYPES.SPHERE_ERASER,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCULAR_ERASER),\n          options: [\n            {\n              name: 'Radius (px)',\n              type: 'range',\n              id: 'eraser-radius',\n              min: 0.5,\n              max: 10000,\n              value: state.Eraser.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'Eraser'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'eraser-mode',\n              value: state.Eraser.mode,\n              values: [\n                { value: TOOL_TYPES.CIRCULAR_ERASER, label: 'Circle' },\n                { value: TOOL_TYPES.SPHERE_ERASER, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Shapes',\n          icon: 'icon-tool-shape',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCLE_SHAPE ||\n            state.activeTool === TOOL_TYPES.RECTANGLE_SHAPE ||\n            state.activeTool === TOOL_TYPES.SPHERE_SHAPE,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCLE_SHAPE),\n          options: [\n            {\n              name: 'Mode',\n              type: 'radio',\n              value: state.Shapes.mode,\n              id: 'shape-mode',\n              values: [\n                { value: TOOL_TYPES.CIRCLE_SHAPE, label: 'Circle' },\n                { value: TOOL_TYPES.RECTANGLE_SHAPE, label: 'Rectangle' },\n                { value: TOOL_TYPES.SPHERE_SHAPE, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Threshold Tool',\n          icon: 'icon-tool-threshold',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH ||\n            state.activeTool === TOOL_TYPES.THRESHOLD_SPHERE_BRUSH,\n          onClick: () => setToolActive(TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH),\n          options: [\n            {\n              name: 'Radius (mm)',\n              id: 'threshold-radius',\n              type: 'range',\n              min: 0.5,\n              max: 99.5,\n              value: state.ThresholdBrush.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'ThresholdBrush'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'threshold-mode',\n              value: state.activeTool,\n              values: [\n                { value: TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH, label: 'Circle' },\n                { value: TOOL_TYPES.THRESHOLD_SPHERE_BRUSH, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n            {\n              type: 'custom',\n              id: 'segmentation-threshold-range',\n              children: () => {\n                return (\n                  <div>\n                    <div className=\"bg-secondary-light h-[1px]\"></div>\n                    <div className=\"mt-1 text-[13px] text-white\">Threshold</div>\n                    <InputDoubleRange\n                      values={state.ThresholdBrush.thresholdRange}\n                      onChange={handleRangeChange}\n                      minValue={-1000}\n                      maxValue={1000}\n                      step={1}\n                      showLabel={true}\n                      allowNumberEdit={true}\n                      showAdjustmentArrows={false}\n                    />\n                  </div>\n                );\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  );\n}\n\nfunction _getToolNamesFromCategory(category) {\n  let toolNames = [];\n  switch (category) {\n    case 'Brush':\n      toolNames = ['CircularBrush', 'SphereBrush'];\n      break;\n    case 'Eraser':\n      toolNames = ['CircularEraser', 'SphereEraser'];\n      break;\n    case 'ThresholdBrush':\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'];\n      break;\n    default:\n      break;\n  }\n\n  return toolNames;\n}\n\nfunction convertPixelToMM(value, servicesManager) {\n  const { viewportGridService, cornerstoneViewportService } = servicesManager.services;\n  const { activeViewportId } = viewportGridService.getState();\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n  const { spacing } = viewport.getImageData();\n\n  return Math.min(value * spacing[0], value * spacing[1], value * spacing[2]);\n}\n\nexport default SegmentationToolbox;\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport SegmentationToolbox from './panels/SegmentationToolbox';\n\nconst getPanelModule = ({ commandsManager, servicesManager, extensionManager, configuration }) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    const disableEditingForMode = customizationService.get('segmentation.disableEditing');\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing || disableEditingForMode?.value,\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n    return (\n      <>\n        <SegmentationToolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache, eventTarget } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: any;\n  referencedDisplaySetInstanceUID?: string;\n}) {\n  const {\n    cornerstoneViewportService,\n    segmentationService,\n    viewportGridService,\n    displaySetService,\n  } = servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  referencedDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    servicesManager,\n    viewportId,\n    referencedDisplaySetInstanceUID,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentation = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n    referencedDisplaySetInstanceUID\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: referencedDisplaySet.isReconstructable ? 'volume' : 'stack',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentation for the targetViewportId when volume cache is available\n    // since the rest will get handled by cornerstoneViewportService\n    if (volumeExists && viewportId === targetViewportId) {\n      await createSegmentation();\n      return;\n    }\n    // TODO: Read from _imageCache and create segmentation when applicable\n\n    const newViewportEvent = referencedDisplaySet.isReconstructable\n      ? Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME\n      : Enums.Events.STACK_VIEWPORT_NEW_STACK;\n\n    const eventTriggerer = referencedDisplaySet.isReconstructable\n      ? csViewport.element\n      : eventTarget;\n\n    const createNewSegmentationOnNewViewport = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      eventTriggerer.removeEventListener(newViewportEvent, createNewSegmentationOnNewViewport);\n\n      if (referencedDisplaySet.isReconstructable && !isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentation();\n      }\n    };\n\n    eventTriggerer.addEventListener(newViewportEvent, createNewSegmentationOnNewViewport);\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: viewport.viewportType,\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n  return updatedViewports;\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import { cache } from '@cornerstonejs/core';\n\nconst generateLabelmaps2DFromImageIdMap = imageIdReferenceMap => {\n  const labelmaps2D = [],\n    referencedImages = [],\n    segmentsOnLabelmap3D = new Set();\n  Array.from(imageIdReferenceMap.entries()).forEach((entry, index) => {\n    referencedImages.push(cache.getImage(entry[0]));\n\n    const segmentationImage = cache.getImage(entry[1]);\n    const { rows, columns } = segmentationImage;\n    const pixelData = segmentationImage.getPixelData();\n    const segmentsOnLabelmap = [];\n\n    for (let i = 0; i < pixelData.length; i++) {\n      const segment = pixelData[i];\n      if (!segmentsOnLabelmap.includes(segment) && segment !== 0) {\n        segmentsOnLabelmap.push(segment);\n      }\n    }\n\n    if (segmentsOnLabelmap.length) {\n      labelmaps2D[index] = {\n        segmentsOnLabelmap,\n        pixelData,\n        rows,\n        columns,\n      };\n\n      segmentsOnLabelmap.forEach(segmentIndex => {\n        segmentsOnLabelmap3D.add(segmentIndex);\n      });\n    }\n  });\n\n  const labelmapObj = {\n    segmentsOnLabelmap: Array.from(segmentsOnLabelmap3D),\n    labelmaps2D,\n  };\n\n  return { referencedImages, labelmapObj };\n};\n\nexport default generateLabelmaps2DFromImageIdMap;\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { ServicesManager, Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\nimport generateLabelmaps2DFromImageIdMap from './utils/generateLabelmaps2DFromImageIdMap';\nimport getSegmentLabel from './utils/getSegmentLabel';\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n  } = (servicesManager as ServicesManager).services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: getSegmentLabel(segmentationService.getSegmentation(segmentationId)),\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        referencedDisplaySetInstanceUID: displaySet.referencedDisplaySetInstanceUID,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n      const segmentationLabelmapData = segmentation.representationData.LABELMAP;\n\n      let referencedImages, labelmapObj;\n      if (segmentation.representationData.LABELMAP.referencedVolumeId) {\n        const { referencedVolumeId } = segmentationLabelmapData;\n\n        const segmentationVolume = cache.getVolume(segmentationId);\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        referencedImages = referencedVolume.getCornerstoneImages();\n\n        labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n      } else {\n        const { imageIdReferenceMap } = segmentationLabelmapData;\n\n        ({ referencedImages, labelmapObj } =\n          generateLabelmaps2DFromImageIdMap(imageIdReferenceMap));\n      }\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      labelmapObj.segmentsOnLabelmap.forEach(segmentIndex => {\n        // segmentation service already has a color for each segment\n        const segment = segmentationInOHIF?.segments[segmentIndex];\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: 'MANUAL',\n          SegmentAlgorithmName: 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n      const { label, displaySetInstanceUID } = segmentation;\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      const shouldOverWrite = displaySet && displaySet.Modality === 'SEG';\n\n      let promptResult: { action?: number; value?: string } = {};\n\n      if (!shouldOverWrite) {\n        promptResult = await createReportDialogPrompt(uiDialogService, {\n          extensionManager,\n        });\n\n        if (promptResult.action !== 1 && !promptResult.value) {\n          return;\n        }\n      }\n\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n      segmentation.label = SeriesDescription;\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n          // Use Series and SOP instancesUIDs if displaySet of the segmentation already exists.\n          ...(shouldOverWrite && {\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\n            SOPInstanceUID: displaySet.instances[0].SOPInstanceUID,\n          }),\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport preRegistration from './init';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  preRegistration,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","import { addTool, BrushTool } from '@cornerstonejs/tools';\n\nexport default function init({ configuration = {} }): void {\n  addTool(BrushTool);\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","getDisplaySetByUID","imageIds","cachedReferencedVolume","cache","getVolume","_imageIds","map","imageId","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","x","Math","round","CONSTANTS","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","text","type","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","segmentation","includes","filter","segment","savedStatusReducer","state","payload","SAVED_STATUS_ICON","PanelSegmentation","commandsManager","configuration","viewportGridService","userAuthenticationService","CropDisplayAreaService","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","savedStatusStates","dispatch","useReducer","useEffect","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","timerId","changedSegmentations","SEGMENTATION_DATA_MODIFIED","clearTimeout","find","changedSegmentation","setTimeout","datasources","getActiveDataSource","promises","createReportAsync","getReport","runCommand","segmentationId","dataSource","reportType","showLoadingModal","throwErrors","allSettled","reduce","acc","result","index","status","savedSegmentations","cs","timoutInSeconds","setSegmentationActive","setReferencedDisplaySet","isSegmentationActive","seg","isActive","setActiveSegmentationForToolGroup","segDisplayset","activeViewportId","getState","referencedImageLoaded","viewport","displaySetInstanceUIDs","setDisplaySetsForViewport","viewportId","getToolGroupIds","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","useCallback","setConfiguration","SegmentationGroupTable","disableEditing","activeSegmentationId","onSegmentationAdd","onSegmentationClick","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","warn","message","getActiveViewportId","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","setSegmentLabel","onSegmentAdd","getSegmentLabel","addSegment","onSegmentColorClick","opacity","r","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","removeSegment","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","isRequired","segmentationUtils","utilities","TOOL_TYPES","CIRCULAR_BRUSH","SPHERE_BRUSH","CIRCULAR_ERASER","SPHERE_ERASER","CIRCLE_SHAPE","RECTANGLE_SHAPE","SPHERE_SHAPE","THRESHOLD_CIRCULAR_BRUSH","THRESHOLD_SPHERE_BRUSH","ACTIONS","SET_TOOL_CONFIG","SET_ACTIVE_TOOL","initialState","Brush","brushSize","mode","Eraser","Shapes","ThresholdBrush","thresholdRange","activeTool","toolboxReducer","tool","config","_getToolNamesFromCategory","category","toolNames","toolbarService","toolGroupService","viewportGrid","useViewportGrid","toolsEnabled","setToolsEnabled","updateActiveTool","size","undefined","get","getActiveToolForViewport","setToolActive","toolName","recordInteraction","interactionType","commands","commandName","commandOptions","defaultBrushSize","URLSearchParams","window","location","search","toolCategories","ELEMENT_ENABLED","setDefaultBrushSize","toolCategory","onBrushSizeChange","element","removeEventListener","VOLUME_VIEWPORT_NEW_VOLUME","STACK_VIEWPORT_NEW_STACK","events","unsubscriptions","activeSegmentation","segmentCount","TOOL_BAR_STATE_MODIFIED","values","updateBrushSize","setBrushSizeForToolGroup","valueAsStringOrNumber","Number","convertedValue","cornerstoneViewportService","getCornerstoneViewport","spacing","getImageData","min","convertPixelToMM","handleRangeChange","newRange","getToolGroup","setToolConfiguration","strategySpecificConfiguration","THRESHOLD_INSIDE_CIRCLE","threshold","AdvancedToolbox","items","icon","disabled","active","onClick","options","max","step","children","InputDoubleRange","minValue","maxValue","showLabel","allowNumberEdit","showAdjustmentArrows","getPanelModule","customizationService","iconName","iconLabel","component","appConfig","useAppConfig","disableEditingForMode","SegmentationToolbox","updateViewportsForSegmentationRendering","loadFn","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentation","hydrateSegmentation","volumeExists","Array","from","_volumeCache","some","volumeId","needsRerendering","csViewport","prevCamera","getCamera","newViewportEvent","eventTriggerer","createNewSegmentationOnNewViewport","isTheActiveViewportVolumeMounted","volumeActors","ac","uid","setCamera","setDisplaySetsForViewports","hangingProtocolService","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","v","shouldRenderSegmentation","imageIdReferenceMap","labelmaps2D","segmentsOnLabelmap3D","Set","entries","entry","getImage","segmentationImage","pixelData","getPixelData","segmentsOnLabelmap","add","labelmapObj","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","createEmptySegmentationForViewport","currentSegmentations","createSegmentationForDisplaySet","addSegmentationRepresentationToToolGroup","loadSegmentationsForViewport","scalarData","getLabelmapVolume","set","isLocked","visibility","activeSegmentIndex","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","serviceFunction","boundFn","bind","cornerstoneToolsSegmentation","segmentationLabelmapData","representationData","LABELMAP","segmentationVolume","getCornerstoneImages","generateLabelmaps2DFromImageIdMap","metadata","segmentationInOHIF","rgb2DICOMLAB","slice","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","SegmentAlgorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","generatedSegmentation","dataset","shouldOverWrite","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","DicomMetadataStore","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","e","definitions","commandFn","Component","OHIFCornerstoneSEGViewport","props","fallback","preRegistration","addTool","BrushTool","getCommandsModule","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}