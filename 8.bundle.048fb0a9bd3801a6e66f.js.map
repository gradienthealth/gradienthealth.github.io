{"version":3,"file":"8.bundle.048fb0a9bd3801a6e66f.js","mappings":"sUAWA,MAAM,WAAEA,GAAeC,EAAAA,MAMvB,SAASC,GAA0B,mBACjCC,EAAkB,kBAClBC,EAAiB,gBACjBC,EAAe,sBACfC,EAAqB,YACrBC,EAAW,0BACXC,EAAyB,kCACzBC,EAAiC,WACjCC,IAKA,MAAM,kBAAEC,IAAsBC,EAAAA,EAAAA,QAE5B,iBAAEC,EAAgB,UAAEC,EAAS,QAAEC,EAAO,QAAEC,GACxCC,IACEC,EAAAA,EAAAA,MACEC,GAASC,EAAAA,EAAAA,OAERC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,YAC5CC,EAA2BC,IAAgCF,EAAAA,EAAAA,UAAS,IACtEZ,KAEEe,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAsBC,IAA2BR,EAAAA,EAAAA,UAAS,CAAC,IAC3DS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,MASnDW,EACJpB,EAAUqB,IAAItB,IAAmBuB,uBAE7BC,EAA+B,IAAZtB,GAA6B,IAAZC,GAE1CsB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQpC,EAAmBqC,OAAOC,kBAClCC,EAAWvC,EAAmBqC,OAAOG,sBACrCC,EAAgB,GAatB,MAXA,CAACL,EAAOG,GAAUG,SAASC,IACzBF,EAAcG,KACZ5C,EAAmB6C,UAAUF,GAAK,EAAGG,SAAQC,kBAC3C,MACEC,mBAAoBC,EACpBC,kBAAmBC,GACjBJ,CAAW,IACdK,YACJ,IAGI,KACLX,EAAcC,SAASW,IACrBA,GAAO,GACP,CACH,GACA,CAACrD,EAAoBU,KAGxByB,EAAAA,EAAAA,YAAU,KA6CR3B,EAAkBkC,SAAQY,GA3C1BC,eAAsCJ,GAEpC,MAAMK,QAAwBjD,EAAWkD,MAAMC,QAAQC,OAAO,CAC5DC,iBAAkBT,IAGpB,IAAKK,GAAiBK,OAEpB,MADA7C,EAAS,iBAAkB,SACrB,IAAI8C,MAAM,qBAGlB,IAAIC,EAAwBP,EAI5B,IACEO,QAA8B1D,EAA0BmD,EAC1D,CAAE,MAAOQ,GACPC,QAAQC,KAAKF,EACf,CAGA,MAAMG,EADsCJ,EAsQjCK,KAAIC,IAEV,CACLC,gBAAiBD,EAAME,UACvBC,UAAWH,EAAMI,KACjBC,iBAAkBL,EAAMM,YACxBC,aAAcP,EAAMQ,UACpBC,kBAAmBT,EAAMU,WACzBC,UAAWX,EAAMY,IACjBC,YAAab,EAAMc,YACnBhC,iBAAkBkB,EAAMT,iBACxBwB,UAAWf,EAAMgB,SAhR2BjB,KAAIkB,IACvC,CACL1B,iBAAkB0B,EAAUnC,iBAC5BsB,KAAM5E,EAAWyF,EAAUd,WAC3BG,YAAaW,EAAUZ,iBACvBK,WAAYO,EAAUR,kBACtBS,aAAcD,EAAUV,iBAI5BpD,GAAoBgE,IAClB,MAAMC,EAAM,IAAID,GAChB,IAAK,MAAMnB,KAASF,EACbqB,EAAUE,MAAKC,GAAMA,EAAG/B,mBAAqBS,EAAMT,oBACtD6B,EAAI7C,KAAKyB,GAGb,OAAOoB,CAAG,GAEd,CAEiCG,CAAuBtC,IAAK,GAC5D,CAAC9C,EAAmBD,EAAYF,EAA2BW,KAG9DmB,EAAAA,EAAAA,YAAU,KACmBlC,EAAkB4F,kBAC1BnD,SAAQa,UACzB,MAAMuC,EAAmB,CAAC,EACpBC,EAAa9F,EAAkB+F,mBACnCC,EAAKC,uBAEDC,EAAW5F,EAAW6F,yBAAyBL,GAC/CM,EAAUF,EAASG,KAAKC,MAAMJ,EAAStC,OAAS,IAGlDwC,IAEFP,EAAiBG,EAAKC,6BAA+B9F,EACnDiG,GAEFzE,GAAwB4E,IACf,IAAKA,KAAcV,MAE9B,GACA,GAED,CAAC7F,EAAmBM,EAAYH,KAGnC+B,EAAAA,EAAAA,YAAU,KAER,MACMsE,EAAoBC,EADCzG,EAAkB4F,kBAG3ClE,EACAhB,EACAuB,EACA3B,EACAN,EACAC,EACAC,GAGFuB,EAAe+E,EAAkB,GAEhC,CACDxG,EAAkB4F,kBAClBlE,EACAhB,EACAJ,KAIF4B,EAAAA,EAAAA,YAAU,KAER,MAAMwE,EAA+B1G,EAAkB4C,UACrD5C,EAAkBoC,OAAOuE,oBACzBC,IACE,MAAM,iBAAEC,EAAgB,QAAEC,GAAYF,EACtCC,EAAiBpE,SAAQa,UACvB,MAAM2C,EAAwBD,EAAKC,sBAE7BJ,EAAmB,CAAC,EACpBC,EAAa9F,EAAkB+F,mBACnCE,GAGEa,EAAQC,cACVlF,EAAoBoE,GAGtB,MAAMC,EAAW5F,EAAW6F,yBAAyBL,GAC/CM,EAAUF,EAASG,KAAKC,MAAMJ,EAAStC,OAAS,IAGlDwC,IAEFP,EAAiBI,SAA+B9F,EAC9CiG,GAEFzE,GAAwB4E,IACf,IAAKA,KAAcV,MAE9B,GACA,IAMAmB,EAAiChH,EAAkB4C,UACvD5C,EAAkBoC,OAAO6E,sBACzBC,IACE,MAAMV,EAAoBC,EACxBS,EACAxF,EACAhB,EACAuB,EACA3B,EACAN,EACAC,EACAC,GAGFuB,EAAe+E,EAAkB,IAIrC,MAAO,KACLE,EAA6BvD,cAC7B6D,EAA+B7D,aAAa,CAC7C,GAEA,CACDnD,EACAM,EACAH,EACAuB,EACAhB,IAGF,MAAMyG,EAsSR,SACEC,EACA9F,EACAE,GAEA,MAAM6F,EAAiB,GACjBC,EAAgB,GAChBC,EAAa,GAGnBjG,EAAiBmB,SAAQ2B,IAEvB,MAAMoD,EAAsBhG,EAAYiG,QACtCC,GAAMA,EAAGxE,mBAAqBkB,EAAMT,mBAsBhCgE,GAlB4B9H,EAAAA,MAAM+H,iBACtCJ,GAiBeK,OAAOC,OAAO,CAAC,EAAG1D,EAAO,CACxC5C,YAAagG,KAIXJ,EAAyBW,SAAS3D,EAAMT,mBAC1C0D,EAAe1E,KAAKgF,GACpBJ,EAAW5E,KAAKgF,KAGhBL,EAAc3E,KAAKgF,GACnBJ,EAAW5E,KAAKgF,GAClB,IAIF,MAAMK,EAAUA,CAACC,EAAGC,KAClB,MAAMC,EAAQC,KAAKC,MAAMJ,GAGzB,OAFcG,KAAKC,MAAMH,GAEVC,CAAK,EAGhBhB,EAAO,CACX,CACEmB,KAAM,UACNC,MAAO,UACP9E,QAAS4D,EAAemB,MAAK,CAACC,EAAQC,IACpCV,EAAQS,EAAOjE,KAAMkE,EAAOlE,SAGhC,CACE8D,KAAM,SACNC,MAAO,SACP9E,QAAS6D,EAAckB,MAAK,CAACC,EAAQC,IACnCV,EAAQS,EAAOjE,KAAMkE,EAAOlE,SAGhC,CACE8D,KAAM,MACNC,MAAO,MACP9E,QAAS8D,EAAWiB,MAAK,CAACC,EAAQC,IAChCV,EAAQS,EAAOjE,KAAMkE,EAAOlE,UAKlC,OAAO2C,CACT,CAzXewB,CACXpI,EACAe,EACAE,GAyEF,OA7CAU,EAAAA,EAAAA,YAAU,KACR,GAAIN,EAAkB,CAEpB,MAAMqE,EAAwBrE,EACxBgH,EAAUC,SAASC,eACtB,aAAY7C,KAGX2C,GAA6C,mBAA3BA,EAAQG,iBAE5BH,EAAQG,eAAe,CAAEC,SAAU,WAEnCnH,EAAoB,MAExB,IACC,CAACD,EAAkBR,EAA2BH,KAEjDiB,EAAAA,EAAAA,YAAU,KACR,IAAKN,EACH,OAGF,MAEMqH,EAoUV,SAAsChD,EAAuBkB,GAC3D,IAAK,IAAI+B,EAAI,EAAGA,EAAI/B,EAAKvD,OAAQsF,IAAK,CACpC,MAAM,QAAEzF,GAAY0D,EAAK+B,GAEzB,IAAK,IAAIC,EAAI,EAAGA,EAAI1F,EAAQG,OAAQuF,IAAK,CACvC,MAAM,YAAE3H,GAAgBiC,EAAQ0F,GAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAI5H,EAAYoC,OAAQwF,IAAK,CAG3C,GAFmB5H,EAAY4H,GAEhBnD,wBAA0BA,EACvC,MAAO,CACLoD,QAASlC,EAAK+B,GAAGZ,KACjBpF,iBAAkBO,EAAQ0F,GAAGxF,iBAGnC,CACF,CACF,CACF,CAvV8B2F,CAFI1H,EAI5BuF,GAEF,IAAK8B,EAGH,YAFAjF,QAAQC,KAAK,oDAIf,MAAM,QAAEoF,EAAO,iBAAEnG,GAAqB+F,EACtC/H,EAAiBmI,GAEjB,IADsBjI,EAA0B2G,SAAS7E,GACrC,CAClB,MAAMqG,EAAmC,IACpCnI,EACH8B,GAEF7B,EAA6BkI,EAC/B,IACC,CAACnI,EAA2BQ,EAAkBuF,IAG/CqC,EAAAA,cAACC,EAAAA,GAAY,CACXtC,KAAMA,EACNlG,cAAeA,EACfG,0BAA2BA,EAC3BsI,aA1EJ,SAA2BxG,GACzB,MAAMyG,EAAsBvI,EAA0B2G,SACpD7E,GAEIqG,EAAmCI,EACrC,IACKvI,EAA0BqG,QAC3BmC,GAAWA,IAAY1G,KAG3B,IAAI9B,EAA2B8B,GAInC,GAFA7B,EAA6BkI,IAExBI,EAAqB,CAExBtJ,EACEL,EACAkD,GAHmB,EAMvB,CACF,EAqDI2G,WAAYC,IACV5I,EAAiB4I,EAAe,EAElCC,iBAAkBA,OAClBC,uBAhSmC/D,IACrCpF,EAAoBoJ,0BAA0B,CAC5CC,WAAYzJ,EACZuB,uBAAwB,CAACiE,IACzB,EA6RAkE,6BAA8BrI,GAGpC,CAEAhC,EAA0BsK,UAAY,CACpCrK,mBAAoBsK,IAAAA,MAAgB,CAClCzH,UAAWyH,IAAAA,KAAeC,WAC1BlI,OAAQiI,IAAAA,OAAiBC,aACxBA,WACHtK,kBAAmBqK,IAAAA,MAAgB,CACjCjI,OAAQiI,IAAAA,OAAiBC,WACzB1E,kBAAmByE,IAAAA,QAAkBA,IAAAA,QAAkBC,WACvDvE,mBAAoBsE,IAAAA,KAAeC,WACnC1H,UAAWyH,IAAAA,KAAeC,aACzBA,WACHhK,WAAY+J,IAAAA,MAAgB,CAC1BlE,yBAA0BkE,IAAAA,KAAeC,aACxCA,WACHnK,YAAakK,IAAAA,KAAeC,WAC5BlK,0BAA2BiK,IAAAA,KAAeC,WAC1CjK,kCAAmCgK,IAAAA,KAAeC,YAGpD,UAwBA,SAAS7D,EACPjF,EACAE,EACAhB,EACAuB,EACA3B,EACAN,EACAC,EACAC,GAEA,MAAMqK,EAAuB,GACvBC,EAA8B,GAmHpC,OAlHAhJ,EAAYiB,SAAQiF,IAClB,MAAM+C,EAAW/I,EAAqBgG,EAAGzB,uBACnCyE,EA2HV,SAA2BC,GACzB,GAAIC,EAA2B7C,SAAS4C,GACtC,MAAO,mBAGT,MAAO,kBACT,CAjI0BE,CAAkBnD,EAAGiD,UACrCG,EAAwB7I,EAC1B,GACA4F,OAAOkD,OAAOrK,GAAWsK,QAAO,CAACC,EAAKC,EAAcC,KAEhDD,GAAclJ,wBAAwB+F,SACpCL,EAAGzB,wBAGLgF,EAAItI,KAAKuI,EAAaE,eAEjBH,IACN,IAEDI,EACc,qBAAlBX,EACIH,EACAC,GAEA,sBAAEvE,GAA0ByB,EAE5B4D,EAAiB,CACrBrF,wBACAvB,YAAagD,EAAG6D,kBAChBC,aAAcC,OAAO/D,EAAGgE,cACxBC,SAAUjE,EAAGiD,SACbiB,WAAYhM,EAAW8H,EAAGmE,YAC1BvG,aAAcoC,EAAGoE,eACjB5I,iBAAkBwE,EAAGxE,iBACrBwH,gBACAD,WACAsB,SAAU,CACRC,KAAM,aACN/F,yBAGF6E,yBAGoB,qBAAlBJ,IACEpK,EAAW2L,QAAU3L,EAAW2L,OAAOC,QACzCZ,EAAea,WAAY,EAC3Bb,EAAec,SAAW,KACxBnM,EAAgBoM,OAAO,CACrBC,GAAI,eACJC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZC,MAAO,gBACPC,KAAMA,IACJtD,EAAAA,cAAA,OAAKuD,UAAU,kCACbvD,EAAAA,cAAA,SAAG,gDACHA,EAAAA,cAAA,SAAG,kCAGPwD,QAAS,CACP,CAAEV,GAAI,SAAUW,KAAM,SAAUjB,KAAM,aACtC,CACEM,GAAI,MACJW,KAAM,MACNjB,KAAM,UACNkB,QAAS,CAAC,uBAGdC,QAASA,IAAMlN,EAAgBmN,QAAQ,CAAEd,GAAI,iBAC7Ce,OAAQA,KACYxE,SAASyE,cAAc,sBAE/BC,OAAO,EAEnBC,SAAUlK,OAASmK,aACjB,OAAQA,EAAOnB,IACb,IAAK,MACH,UACQhM,EAAW2L,OAAOC,OACtBxE,EAAGxE,iBACHwE,EAAG1E,mBAELhD,EAAkB0N,iBAAiBzH,GACnChG,EAAgBmN,QAAQ,CAAEd,GAAI,iBAC9BpM,EAAsByN,KAAK,CACzBd,MAAO,gBACPe,QAAS,8BACT5B,KAAM,WAEV,CAAE,MAAOjI,GACP9D,EAAgBmN,QAAQ,CAAEd,GAAI,iBAC9BpM,EAAsByN,KAAK,CACzBd,MAAO,gBACPe,QAAS,0BACT5B,KAAM,SAEV,CACA,MACF,IAAK,SACH/L,EAAgBmN,QAAQ,CAAEd,GAAI,iBAElC,IAGJ,GAGJhB,EAAea,WAAY,GAI/Bd,EAAM1I,KAAK2I,EAAe,IAGrB,IAAIf,KAAyBC,EACtC,CAEA,MAAMI,EAA6B,CACjC,KACA,MACA,WACA,SACA,UCzfF,QAZA,SAAgCiD,EAAazH,GAC3C,OAAO,IAAI0H,SAAQ,CAACC,EAAS9B,KAC3B,MAAM+B,EAASnF,SAASoF,cAAc,UACtCJ,EAAYK,UACTC,kBAAkB,CAAEH,SAAQ5H,YAC5BgI,MAAK,KACJL,EAAQC,EAAOK,YAAY,IAE5BC,MAAMrC,EAAO,GAEpB,ECOA,QAjBA,SACE3L,EACAN,EACAkD,EACA6D,GAGE/G,EAAkB4F,kBAAkB2I,MACjCzI,GAAeA,EAAW5C,mBAAqBA,KAMpD5C,EAAWkO,SAAStC,OAAOuC,SAAS,CAAEvL,mBAAkB6D,gBAC1D,ECZO,SAAS2H,EAA+BC,GAC7C,MAAMT,EAAYS,EAAiBC,eACjC,oDAGF,IACE,MAAM,YAAEf,GAAgBK,EAAUW,QAAQC,0BAC1C,OAAOC,EAAuBC,KAAK,KAAMnB,EAC3C,CAAE,MAAOoB,GACP,MAAM,IAAIpL,MAAM,6BAClB,CACF,CAEO,SAASqL,EAA0BP,EAAkBQ,GAC1D,MAAMC,EAAgBT,EAAiBC,eACrC,iDAGI,0BAAExO,GAA8BgP,EAAcP,QACpD,OAAOzO,EAA0B4O,KAAK,KAAMG,EAC9C,CAEO,SAASE,EAAkCF,GAChD,OAAO9O,EAAkC2O,KAAK,KAAMG,EACtD,CCrBA,MACET,+BAA8B,EAC9BW,kCAAiC,EACjCH,0BAAyBA,GACvBI,EASJ,SAASC,GAAiC,gBACxCC,EAAe,iBACfb,EAAgB,gBAChBc,IAEA,MAAMnP,EAAaqO,EAAiBe,sBAAsB,GAEpDC,EAA6BT,EACjCP,EACArO,GAEIsP,EACJlB,EAA+BC,GAC3BkB,EACJR,EAAkC/O,GAEpC,OACEkJ,EAAAA,cAAC1J,EAAyB,CACxBC,mBAAoB0P,EAAgBK,SAAS/P,mBAC7CC,kBAAmByP,EAAgBK,SAAS9P,kBAC5CC,gBAAiBwP,EAAgBK,SAAS7P,gBAC1CC,sBAAuBuP,EAAgBK,SAAS5P,sBAChDI,WAAYA,EACZH,YAAayP,EACbxP,0BAA2BuP,EAC3BtP,kCAAmCwP,GAGzC,CAEAN,EAAiCnF,UAAY,CAC3CoF,gBAAiBnF,IAAAA,OAAiBC,WAClCqE,iBAAkBtE,IAAAA,OAAiBC,WACnCmF,gBAAiBpF,IAAAA,OAAiBC,YAGpC,UCvBA,MAAM,kBAAEyF,GAAsBlQ,EAAAA,OACtBD,WAAUA,GAAKC,EAAAA,MAEjBmQ,EAAsC,CAC1CC,SAAKC,EACL1L,UAAM0L,EACNvE,cAAUuE,EACVxL,iBAAawL,GAGf,SAASC,GAA8B,gBAAEV,EAAe,iBAAEd,IACxD,MAAOyB,EAAcvP,IAAuBC,EAAAA,EAAAA,OACrCuP,EAA4BC,IAA0BnP,EAAAA,EAAAA,UAC3DiH,KAAKmI,MAAMC,YAEPC,EApCR,SAAqBC,EAAOC,GAE1B,MAAOC,EAAgBC,IAAqB1P,EAAAA,EAAAA,UAASuP,GAgBrD,OAfAxO,EAAAA,EAAAA,YACE,KAEE,MAAM4O,EAAUC,YAAW,KACzBF,EAAkBH,EAAM,GACvBC,GAIH,MAAO,KACLK,aAAaF,EAAQ,CACtB,GAEH,CAACJ,EAAOC,IAEHC,CACT,CAiB8CK,CAC1CZ,EACA,MAEI,mBACJtQ,EAAkB,gBAClBE,EAAe,kBACfD,GACEyP,EAAgBK,UAEboB,EAAqBC,IAA0BhQ,EAAAA,EAAAA,UACpD6O,IAEKoB,EAAqBC,IAA0BlQ,EAAAA,EAAAA,UAAS,KAE/De,EAAAA,EAAAA,YAAU,KACR,MAEMoP,EAFevR,EAAmBwR,kBAEApN,KAAIqN,GAmMhD,SAAkC1O,EAAa2O,EAAOzR,GACpD,MAAM,kBAAEiD,EAAiB,mBAAEF,EAAkB,eAAE2O,GAAmB5O,EAW5DtB,GANWmQ,EAAAA,mBAAmBC,YAClC3O,EACAF,EACA2O,GAGkB1R,EAAkB6R,wBACpC9O,IAGF,IAAKvB,EAAY,KAAOA,EAAY,GAAGsQ,OACrC,MAAM,IAAIjO,MACR,+EAIJ,MAAM,YAAEkO,GAAgBjP,EACxB,MAAO,CACLkP,IAAKlP,EAAYkP,IACjBzJ,MAAOzF,EAAYyF,OAAS,UAC5B0J,gBAAiBnP,EAAYkJ,KAC7B+F,YAAaA,GAAe,GAC5BG,UAAU,EAEd,CAhOMC,CACEX,EACAzR,EAAmBqS,YACnBpS,KAGJqR,EAAuBC,EAAmB,GAEzC,CACDvR,EACA0Q,KAKFvO,EAAAA,EAAAA,YAAU,KACRiP,EAAuBnB,EAAoC,GAC1D,CACDkB,EAAoBjB,OAQtB/N,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQpC,EAAmBqC,OAAOC,kBAClCC,EAAWvC,EAAmBqC,OAAOG,sBACrC8P,EAAUtS,EAAmBqC,OAAOkQ,oBACpCC,EAAUxS,EAAmBqC,OAAOoQ,oBACpCC,EAAU1S,EAAmBqC,OAAOsQ,qBACpClQ,EAAgB,GAUtB,MARA,CAACL,EAAOG,EAAU+P,EAASE,EAASE,GAAShQ,SAAQC,IACnDF,EAAcG,KACZ5C,EAAmB6C,UAAUF,GAAK,KAChC4N,EAAuBlI,KAAKmI,MAAMC,WAAW,IAC5CrN,YACJ,IAGI,KACLX,EAAcC,SAAQW,IACpBA,GAAO,GACP,CACH,GACA,CAACrD,IAOJ,MAAM4S,EAAcA,EAAGX,MAAKE,eAC1BnS,EAAmB6S,kBAAkBxC,EAAa3P,iBAAkBuR,GAEpEa,EAA8B,CAAEb,MAAKE,YAAW,EAoE5CW,EAAgCA,EAAGb,MAAKE,eAC5C,IAAKA,EAAU,CACb,MAAMY,EAAe,IAAI1B,GACnBtO,EAAcgQ,EAAarN,MAAK+L,GAAKA,EAAEQ,MAAQA,IAErDc,EAAarQ,SAAQ+O,GAAMA,EAAEU,SAAWV,EAAEQ,MAAQA,IAClDlP,EAAYoP,UAAW,EACvBb,EAAuByB,EACzB,GAGIC,EAA6BA,EAAGf,UACpCjS,EAAmBiT,OAAOhB,EAAI,EAG1BiB,EAAqC7B,EAAoB3J,QAC7DyL,GAAMA,EAAGjB,kBAAoBlS,EAAmBqS,YAAYe,QAExDC,EAAqBhC,EAAoB3J,QAC7CyL,GAAMA,EAAGjB,kBAAoBlS,EAAmBqS,YAAYe,QAG9D,OACE3J,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACEuD,UAAU,wDACV,UAAS,6BAERmE,EAAoBjB,KACnBzG,EAAAA,cAAC6J,EAAAA,GAAY,CACX7O,KAAM5E,EAAWsR,EAAoB1M,MACrCmH,SAAUuF,EAAoBvF,SAC9BjH,YAAawM,EAAoBxM,cAGrC8E,EAAAA,cAAC8J,EAAAA,GAAgB,CACfzG,MAAM,eACN0G,OAAQN,EAAmCrP,OAC3CgD,KAAMqM,EACNO,QAASb,EACTc,OAzG6BC,EAAG1B,MAAKE,eAC3C,MAAMpP,EAAc/C,EAAmB4T,eAAe3B,GACtDW,EAAY,CAAEX,MAAKE,aAEnB,MAAM0B,EAAkBA,EAAGnG,SAAQiD,YACjC,GACO,SADCjD,EAAOnB,GAEXvM,EAAmB8T,OACjB7B,EACA,IACKlP,KACA4N,IAEL,GAINzQ,EAAgBmN,QAAQ,CAAEd,GAAI,oBAAqB,EAGrDrM,EAAgBoM,OAAO,CACrBC,GAAI,mBACJC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZC,MAAO,wBACPiH,eAAe,EACfpD,MAAO,CAAEnI,MAAOzF,EAAYyF,OAAS,IACrCuE,KAAMA,EAAG4D,QAAOqD,cAYZvK,EAAAA,cAAA,OAAKuD,UAAU,uBACbvD,EAAAA,cAACwK,EAAAA,GAAK,CACJC,WAAS,EACTlH,UAAU,oCACVf,KAAK,OACLkI,mBAAmB,OACnBxD,MAAOA,EAAMnI,MACb4L,SAlBkBC,IACtBA,EAAMC,UACNN,GAASrD,IAAS,IAAMA,EAAOnI,MAAO6L,EAAME,OAAO5D,SAAS,EAiBxD6D,WAdoBH,IACN,UAAdA,EAAMnE,KACR2D,EAAgB,CAAElD,QAAOjD,OAAQ,CAAEnB,GAAI,SACzC,KAgBJU,QAAS,CAEP,CAAEV,GAAI,SAAUW,KAAM,SAAUjB,KAAM,WACtC,CAAEM,GAAI,OAAQW,KAAM,OAAQjB,KAAM,cAEpCwB,SAAUoG,IAEZ,EA4CIY,SAAUzB,IAEmB,IAA9BK,EAAmBxP,QAClB4F,EAAAA,cAAC8J,EAAAA,GAAgB,CACfzG,MAAM,sBACN0G,OAAQH,EAAmBxP,OAC3BgD,KAAMwM,EACNI,QAASb,EACT6B,SAAUzB,KAMtB,CAEA5C,EAA8B/F,UAAY,CACxCqF,gBAAiBpF,IAAAA,MAAgB,CAC/ByF,SAAUzF,IAAAA,MAAgB,CACxBtK,mBAAoBsK,IAAAA,MAAgB,CAClCkH,gBAAiBlH,IAAAA,KAAeC,WAChC8H,YAAa/H,IAAAA,OAAiBC,aAC7BA,aACFA,aACFA,YAoCL,U,gDC9Re,SAASmK,GAAe,UAAEC,EAAS,KAAEpM,EAAI,MAAEoI,EAAK,aAAEiE,EAAY,QAAE7N,EAAO,SAAEqN,IACtF,MAAM,OAAES,EAAM,UAAEC,EAAS,IAAEC,GAAQhO,EAE7BiO,EAAmBC,IACvB,GAAQ,MAALA,EAAW,OAAO,KAErB,MAAMC,EAAMpN,OAAOqN,KAAKN,GAAQzQ,KAAI,CAAC8L,EAAKkF,KACjC,CAAClF,IAAKA,EAAKS,MAAOkE,EAAO3E,GAAKS,UACpCjL,MAAM2P,GACAA,EAAI1E,OAASsE,IAGtB,OAAGC,EAAYI,OAAOJ,EAAIhF,KACnB,IAAI,GAGNqF,EAAKC,GAAU/L,EAAAA,SAAgCuL,EAAP,OAAVrE,EAAiCA,EAAwBiE,KACvFa,EAAOC,GAAYjM,EAAAA,UAAgB,GAE1C,OACEA,EAAAA,cAACkM,EAAAA,GAAK,CAAC3I,UAAU,OACfvD,EAAAA,cAAA,WACEA,EAAAA,cAACmM,EAAAA,GAAU,CAACC,GAAI,CAAEC,SAAU,IAAMC,MAAM,iBAAiBC,cAAY,GACjEzN,GAEJkB,EAAAA,cAACmM,EAAAA,GAAU,CAACK,QAAQ,KAAKC,UAAU,OACtB,OAARX,IAA2B,IAAXE,EAAgBZ,GAAkB,IAAXY,EAAeA,EAAQF,GAAK5E,MAAQ,KAEhFlH,EAAAA,cAACmM,EAAAA,GAAU,CAACK,QAAQ,SACP,OAARV,IAA2B,IAAXE,EAAgBZ,GAAkB,IAAXY,EAAeA,EAAQF,GAAK5Q,YAAc,kBAGxF8E,EAAAA,cAAC0M,EAAAA,GAAM,CACL5N,KAAK,iBACLoI,MAAO4E,EACPT,UAAWA,EACXC,IAAKA,EACLX,SAAUA,CAACC,EAAO+B,KAChBhC,EAAS,CAAEO,UAAWA,EAAWhE,MAAOyF,EAAWvB,EAAOuB,GAAUzF,MAAQyF,IAC5EZ,EAAOY,EAAS,EAElBC,eAAgBA,CAAChC,EAAOiC,KACtBZ,EAASY,EAAS,EAEpBC,UAAW9M,EAAAA,cAAC+M,EAAAA,EAAQ,CAACC,MAAO,CAAEC,QAAS,KAAQZ,SAAS,cAIhE,C,qCC/Ce,SAASa,GAAa,UAAEhC,EAAS,KAAEpM,EAAI,MAAEoI,EAAK,aAAEiE,EAAY,QAAE7N,EAAO,SAAEqN,IACpF,MAAM,OAAES,EAAM,KAAE+B,GAAS7P,GAClBwO,EAAKC,GAAU/L,EAAAA,SAAyB,OAAVkH,EAAiBA,EAAQiE,GAK9D,OAJAnL,EAAAA,WAAgB,KACd+L,EAAiB,OAAV7E,EAAiBA,EAAQiE,EAAa,GAC5C,CAACjE,IAGFlH,EAAAA,cAACkM,EAAAA,GAAK,CAAC3I,UAAU,OACfvD,EAAAA,cAAA,WACEA,EAAAA,cAACmM,EAAAA,GAAU,CAACC,GAAI,CAAEC,SAAU,IAAMC,MAAM,iBAAiBC,cAAY,GACjEzN,GAEJkB,EAAAA,cAACmM,EAAAA,GAAU,CAACK,QAAQ,QAAQC,UAAU,OAClCW,QAAQhC,EAAOnP,MAAK2P,GAAMA,EAAI1E,OAAO4E,KAAUV,EAAOnP,MAAK2P,GAAMA,EAAI1E,OAAO4E,IAAM5Q,YAAc,MAIpGkQ,EAAO5J,QAAO,CAAC6L,EAAIC,EAAIC,KACpB,MAAMC,EAAK3Q,KAAKC,MAAMyQ,GAAGJ,GAAQ,IAEjC,OADAE,EAAIG,GAAM,GAAGC,OAAQJ,EAAIG,IAAK,GAAIF,GAC3BD,CAAG,GACV,IAAI1S,KAAI,CAAC+S,EAAO/B,IACV3L,EAAAA,cAAC2N,EAAAA,EAAU,CAChBC,KAAG,EACHnH,IAAKkF,EACL7M,KAAK,kBACLoI,MAAO4E,EACPnB,SAAUA,CAACC,EAAO+B,KAChBhC,EAAS,CAAEO,UAAWA,EAAWhE,MAAOyF,IACxCZ,EAAOY,EAAS,GAIhBe,EAAM/S,KAAI,CAACoE,EAAO4M,IACT3L,EAAAA,cAAC6N,EAAAA,GAAgB,CAACpH,IAAKkF,EAAKzE,MAAOnI,EAAMmI,MAAO4G,QAAS9N,EAAAA,cAAC+N,EAAAA,GAAK,MAAKhP,MAAOA,EAAMmI,aAQxG,C,0BC3Ce,SAAS8G,GAAe,UAAC9C,EAAS,KAAEpM,EAAI,MAAEoI,EAAK,aAAEiE,EAAY,QAAE7N,EAAO,SAAEqN,IAErF,IAAIsD,EAQJ,OAPa,OAAV/G,EACD+G,EAAUb,QAAQlG,IAElB+G,EAAUb,QAAQjC,GAClBR,EAAS,CAAEO,UAAWA,EAAWhE,MAAO+G,KAIxCjO,EAAAA,cAACkM,EAAAA,GAAK,CAAC3I,UAAU,OACbvD,EAAAA,cAACkO,EAAAA,GAAS,KACNlO,EAAAA,cAAC6N,EAAAA,GAAgB,CACfC,QACE9N,EAAAA,cAACmO,EAAAA,GAAQ,CACLF,QAAYA,EACZtD,SAAYzR,GAAOyR,EAAS,CAAEO,UAAWA,EAAWhE,MAAOhO,EAAI4R,OAAOmD,YAG5ElP,MACEiB,EAAAA,cAACmM,EAAAA,GAAU,CAACK,QAAQ,QAAQF,MAAM,iBAAiBxN,MAKnE,C,kCC5Be,SAASsP,GAAS,UAAClD,EAAS,KAAEpM,EAAI,MAAEoI,EAAK,aAAEiE,EAAY,QAAE7N,EAAO,SAAEqN,IAC/E,MAAOmB,EAAKC,IAAUpU,EAAAA,EAAAA,UAASuP,GAASiE,GAAgB,KAClD,KAAEkD,GAAS/Q,EACXgR,GAAoBC,EAAAA,EAAAA,UACxB,IAAMC,KAAS,CAACtD,EAAWhE,KACvByD,EAAS,CAACO,YAAWhE,SAAO,GAC3B,MAAM,CAACyD,KAGdjS,EAAAA,EAAAA,YAAU,KACRqT,EAAO7E,GAASiE,GAAgB,GAAG,GAClC,CAACjE,EAAOiE,IAOX,OACEnL,EAAAA,cAACkM,EAAAA,GAAK,CAAC3I,UAAU,OACfvD,EAAAA,cAACyO,EAAAA,GAAS,CACR3L,GAAG,8BACH4L,WAAY,CAAC1B,MAAO,CAACX,SAAU,WAC/BtN,MAAOD,EACP6P,WAAS,EACTN,KAAOA,EACPnH,MAAO4E,EACP8C,WAAW,EACXC,OAAQ,QACRC,KAAM,QACNnE,SAjBgBC,IACpBmB,EAAOnB,EAAME,OAAO5D,OACpBoH,EAAkBpD,EAAWN,EAAME,OAAO5D,MAAM,IAmBpD,CCnCe,SAAS6H,GAAa,UAAC7D,EAAS,KAAEpM,EAAI,MAAEoI,EAAK,aAAEiE,EAAY,QAAE7N,IAC1E,OACE0C,EAAAA,cAACkM,EAAAA,GAAK,CAACE,GAAI,CAAE4C,QAAS,QAAUzL,UAAU,OACtCvD,EAAAA,cAACmM,EAAAA,GAAU,CAACC,GAAI,CAAEC,SAAU,GAAI4C,YAAa,GAAK3C,MAAM,iBAAiBC,cAAY,GACjFzN,EAAM,KAEVkB,EAAAA,cAACmM,EAAAA,GAAU,CAACK,QAAQ,QAAQjJ,UAAU,qCACxB,OAAV2D,EAAiBA,EAAMF,WAA8B,OAAjBmE,EAAwBA,EAAanE,WAAa,IAIlG,C,0BCOe,SAASkI,GAAY,MAAChI,IACjC,MAAMiI,EAAeC,IACjB,MAAOC,EAAMC,EAAOC,IAnBf7P,EAmB8Bd,KAAKmI,MAAQqI,EAlBhDI,EAAK,MACLhC,EAAK,KACL5N,EAAI/C,KAAKC,MAAM4C,EAAI8P,GACnBC,EAAI5S,KAAKC,OAAQ4C,EAAIE,EAAI4P,GAAMhC,GAE3B,MADJxF,EAAInL,KAAK6S,OAAQhQ,EAAIE,EAAI4P,EAAKC,EAAIjC,GAAM,QAE5CiC,IACAzH,EAAI,GAEI,KAANyH,IACF7P,IACA6P,EAAI,GAEC,CAAC7P,EAAG6P,EAAGzH,IAdhB,IAAatI,EACL8P,EACAhC,EACA5N,EACA6P,EACAzH,EAgBA,OAAGqH,EAAO,EACE,IAAIzQ,KAAKwQ,GAAcO,mBAAmB,QAAS,CAAEC,KAAK,UAAWC,MAAM,QAASC,IAAI,YAEjGT,EAAO,EACE,GAAEA,aAEXC,EAAQ,EACC,GAAEA,cAEXC,EAAU,EACD,GAAEA,aAEN,UAAS,EAGrB,IACIrI,EAAQ6I,KAAKlR,MAAMqI,EACvB,CAAE,MAAO8I,GACLxV,QAAQD,MAAMyV,EAAG9I,GACjBA,EAAQ,IACZ,CAEA,OAAGA,EAEKlH,EAAAA,cAACkM,EAAAA,GAAK,KACFlM,EAAAA,cAACiQ,EAAAA,GAAU,CACP7D,GAAI,CACA,2BAA4B,CACxB8D,SAAU,WAGlBC,OACInQ,EAAAA,cAACoQ,EAAAA,GAAM,CACHC,SAAU,CACNC,YAAa,YACbC,eAAgB,eAEpBC,IAAMtJ,EAAMuJ,UAEpBpN,MAAQ6D,EAAMwJ,MACdC,UAAa,WAAUxB,EAAYjI,EAAMkI,kBAMrDpP,EAAAA,cAACkM,EAAAA,GAAK,KACFlM,EAAAA,cAACiQ,EAAAA,GAAU,CACP7D,GAAI,CACA,2BAA4B,CACxB8D,SAAU,WAGlBC,OACInQ,EAAAA,cAACoQ,EAAAA,GAAM,MAEX/M,MAAQ,OACRsN,UAAa,mBAI7B,CCrBA,QA1DA,UAAgC,aAAEC,EAAY,UAAEC,EAAS,aAAEC,IACzD,MAAMC,EAAkBA,EAAE7F,YAAWhE,YACnC,MAAM8J,EAAe,IAAIH,GACzBG,EAAa9F,GAAahE,EAC1B4J,EAAa,IAAIE,GAAc,EAGjC,GAAGJ,EAAa,CAEd,MAAMK,EAASL,EAAajW,KAAI,CAACiR,EAAKD,KACpC,OAAOC,EAAIpJ,MACT,IAAK,WACH,OACExC,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAACmO,EAAQ,CAACjD,UAAWS,EAAK7M,KAAM8M,EAAI9M,KAAMxB,QAASsO,EAAIsF,SAAU/F,aAAcS,EAAIT,aAAcjE,MAAO2J,EAAUlF,GAAMhB,SAAUoG,KAGxI,IAAK,SACH,OACE/Q,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAACiL,EAAc,CAACC,UAAWS,EAAK7M,KAAM8M,EAAI9M,KAAMxB,QAASsO,EAAIsF,SAAU/F,aAAcS,EAAIT,aAAcjE,MAAO2J,EAAUlF,GAAMhB,SAAUoG,KAG9I,IAAK,OACH,OACE/Q,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAACkN,EAAY,CAAChC,UAAWS,EAAK7M,KAAM8M,EAAI9M,KAAMxB,QAASsO,EAAIsF,SAAU/F,aAAcS,EAAIT,aAAcjE,MAAO2J,EAAUlF,GAAMhB,SAAUoG,KAG5I,IAAK,WACH,OACE/Q,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAACoO,EAAQ,CAAClD,UAAWS,EAAK7M,KAAM8M,EAAI9M,KAAMxB,QAASsO,EAAIsF,SAAU/F,aAAcS,EAAIT,aAAcjE,MAAO2J,EAAUlF,GAAMhB,SAAUoG,KAGxI,IAAK,eACH,OACE/Q,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAACkP,EAAW,CAAChI,MAAO2J,EAAUlF,MAGpC,QACE,OACE3L,EAAAA,cAAA,OAAKyG,IAAKkF,EAAKpI,UAAU,uBACvBvD,EAAAA,cAAC+O,EAAY,CAAC7D,UAAWS,EAAK7M,KAAM8M,EAAI9M,KAAMxB,QAASsO,EAAIsF,SAAU/F,aAAcS,EAAIT,aAAcjE,MAAO2J,EAAUlF,MAG9H,IAGF,OAAQ3L,EAAAA,cAAA,WACLiR,EAEL,CAEA,OAAO,IACT,E,4DC5CA,SAASE,IAAU,gBAAElL,EAAe,iBAAEd,IACpC,MAAM,oBAAEiM,GAAwBnL,EAAgBK,UACzCsK,EAAcS,IAAmB1Z,EAAAA,EAAAA,UAASyZ,EAAoBE,oBAC9DT,EAAWC,IAAgBnZ,EAAAA,EAAAA,UAASyZ,EAAoBG,iBACxDhX,EAAOiX,IAAY7Z,EAAAA,EAAAA,WAAS,IAC5B8Z,EAAWC,IAAgB/Z,EAAAA,EAAAA,WAAS,IACpCga,EAAaC,IAAkBja,EAAAA,EAAAA,WAAUyV,QAAQyD,GAAaD,KAC9DiB,EAASC,IAAcna,EAAAA,EAAAA,WAAS,GACjCoa,EAASA,IAAKX,EAAoBY,OAAO,GACzCC,EAAaA,IAAKb,EAAoBY,QAAQ,GAC9CE,GAAkB3D,EAAAA,EAAAA,UAAQ,IAAMC,IAASuD,EAAQ,MAAM,IACvDI,GAAsB5D,EAAAA,EAAAA,UAAQ,IAAMC,IAASyD,EAAY,MAAM,IA+BrE,OA7BAvZ,EAAAA,EAAAA,YAAU,KACR,MAAMM,EAAgB,GAetB,OAdAA,EAAcG,KACZiY,EAAoBhY,UAAUgY,EAAoBxY,OAAOwZ,sBAAsB,KAC7EV,GAAa,GACbZ,EAAaM,EAAoBG,gBACjCF,EAAgBD,EAAoBE,mBACpCM,GAAe,EAAM,IACpBjY,aAGLX,EAAcG,KACZiY,EAAoBhY,UAAUgY,EAAoBxY,OAAOyZ,qBAAqB,KAC5Eb,GAAS,EAAK,IACb7X,aAEE,KAAQX,EAAcC,SAAQW,GAAOA,KAAQ,CAAE,GACrD,CAACwX,KAEJ1Y,EAAAA,EAAAA,YAAU,KACJ+Y,IACFK,GAAW,GACXV,EAAoBkB,UAAUzB,GAAWjM,MAAMrD,IAC7CuQ,GAAW,EAAM,KAGrBJ,GAAa,EAAM,GAClB,CAACb,IAEDtW,EAECyF,EAAAA,cAACkM,EAAAA,GAAK,CAACE,GAAI,CAAE4C,QAAS,QAAUzL,UAAU,OACtCvD,EAAAA,cAACmM,EAAAA,GAAU,CAACC,GAAI,CAAEC,SAAU,GAAI4C,YAAa,GAAK3C,MAAM,iBAAiBC,cAAY,GACjF,oDAMRoF,EAwCG3R,EAAAA,cAACuS,EAAAA,GAAc,MAtClBvS,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKgN,MAAO,CAACV,MAAM,QAAS4D,SAAU,SAChC2B,EAAU7R,EAAAA,cAACuS,EAAAA,GAAc,MAAKvS,EAAAA,cAAA,OAAKgN,MAAO,CAACwF,OAAQ,SACrDxS,EAAAA,cAACyS,EAAsB,CACnB7B,aAAcA,EACdC,UAAWA,EACXC,aAAcA,KAEtB9Q,EAAAA,cAAA,OAAKuD,UAAU,2BACbvD,EAAAA,cAACkM,EAAAA,GAAK,KACJlM,EAAAA,cAAC0S,GAAAA,GAAW,CAAClG,QAAQ,YAAY,aAAW,iCAC1CxM,EAAAA,cAAC2S,EAAAA,GAAa,CACZd,QAASA,EACTe,gBAAgB,QAChBC,UAAW7S,EAAAA,cAAC8S,GAAAA,EAAS,MACrBtG,QAAQ,YACRF,MAAM,UACNtC,QAASmI,GACV,QAGDnS,EAAAA,cAAC2S,EAAAA,GAAa,CACZd,QAASA,EACTe,gBAAgB,MAChBG,QAAS/S,EAAAA,cAACgT,EAAAA,EAAY,MACtBxG,QAAQ,YACRF,MAAM,UACNtC,QAASkI,GACV,WAWf,CAEAf,GAAUvQ,UAAY,CACpBqF,gBAAiBpF,IAAAA,MAAgB,CAC/ByF,SAAUzF,IAAAA,MAAgB,CAC1B,GAAGC,aACFA,YAGL,Y,gBCpHA,SAASmS,IAA6B,gBAAEhN,EAAe,iBAAEd,IACrD,OACEnF,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAA,OAAKgN,MAAO,CAACwF,OAAQ,QAASU,UAAW,SACvClT,EAAAA,cAAC2G,EAA6B,CAACV,gBAAiBA,EAAiBd,iBAAkBA,KAErFnF,EAAAA,cAAA,OAAKuD,UAAU,OACbvD,EAAAA,cAACmT,GAAAA,GAAO,CAACnG,MAAO,CAACoG,WAAY,YAE/BpT,EAAAA,cAACmR,GAAS,CAAClL,gBAAiBA,EAAiBd,iBAAkBA,IAGzE,CAEA8N,GAA6BrS,UAAY,CACvCqF,gBAAiBpF,IAAAA,MAAgB,CAC/ByF,SAAUzF,IAAAA,MAAgB,CAC1B,GAAGC,aACFA,YAGL,aCrBM,mBAAEuS,GAAoBjd,WAAUA,IAAKC,EAAAA,MAM3C,SAASid,IAAkB,gBACzBrN,EAAe,YACftP,EAAW,0BACXC,EAAyB,kCACzBC,EAAiC,WACjCC,IAEA,MAAM,uBAAEyc,EAAsB,kBAAEC,EAAiB,sBAAEC,EAAqB,oBAAErC,GACxEnL,EAAgBK,SACZ/O,GAAWC,EAAAA,EAAAA,OAKX,kBAAET,IAAsBC,EAAAA,EAAAA,OACvB0c,EAAmBC,IAAwBhc,EAAAA,EAAAA,UAAS,IAAIZ,MACxD,iBAAEE,EAAgB,UAAEC,GAAaG,IAAuBC,EAAAA,EAAAA,OACxDG,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,YAC5CC,EAA2BC,IAAgCF,EAAAA,EAAAA,UAAS,IACtE+b,KAEE5b,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAsBC,IAA2BR,EAAAA,EAAAA,UAAS,CAAC,IAuBlEe,EAAAA,EAAAA,YAAU,KACRib,EAAqB,IAAI5c,IACzBc,EAA6B,IAAId,GAAmB,GACnD,CAACA,KAGJ2B,EAAAA,EAAAA,YAAU,KA6CRgb,EAAkBza,SAAQY,GA3C1BC,eAAsCJ,GAEpC,MAAMK,QAAwBjD,EAAWkD,MAAMC,QAAQC,OAAO,CAC5DC,iBAAkBT,IAGpB,IAAKK,GAAiBK,OAEpB,MADA7C,EAAS,iBAAkB,SACrB,IAAI8C,MAAM,qBAGlB,IAAIC,EAAwBP,EAI5B,IACEO,QAA8B1D,EAA0BmD,EAC1D,CAAE,MAAOQ,GACPC,QAAQC,KAAKF,EACf,CAGA,MAAMG,EADsCJ,EAuMjCK,KAAIC,IAEV,CACLC,gBAAiBD,EAAME,UACvBC,UAAWH,EAAMI,KACjBC,iBAAkBL,EAAMM,YACxBC,aAAcP,EAAMQ,UACpBC,kBAAmBT,EAAMU,WACzBC,UAAWX,EAAMY,IACjBC,YAAab,EAAMc,YACnBhC,iBAAkBkB,EAAMT,iBACxBwB,UAAWf,EAAMgB,SAjN2BjB,KAAIkB,IACvC,CACL1B,iBAAkB0B,EAAUnC,iBAC5BsB,KAAM5E,GAAWyF,EAAUd,WAC3BG,YAAaW,EAAUZ,iBACvBK,WAAYO,EAAUR,kBACtBS,aAAcD,EAAUV,iBAI5BpD,GAAoBgE,IAClB,MAAMC,EAAM,IAAID,GAChB,IAAK,MAAMnB,KAASF,EACbqB,EAAUE,MAAKC,GAAMA,EAAG/B,mBAAqBS,EAAMT,oBACtD6B,EAAI7C,KAAKyB,GAGb,OAAOoB,CAAG,GAEd,CAEiCG,CAAuBtC,IAAK,GAC5D,CAAC6Z,EAAmB5c,EAAYF,EAA2BW,KAG9DmB,EAAAA,EAAAA,YAAU,KACmB8a,EAAkBpX,kBAC1BnD,SAAQa,UACzB,MAAMuC,EAAmB,CAAC,EACpBC,EAAakX,EAAkBjX,mBAAmBC,EAAKC,uBACvDC,EAAW5F,EAAW6F,yBAAyBL,GAC/CM,EAAUF,EAASG,KAAKC,MAAMJ,EAAStC,OAAS,IAGjDwC,IAAWN,GAAYsX,cAI5BvX,EAAiBG,EAAKC,6BAA+B9F,EAAYiG,GAEjEzE,GAAwB4E,IACf,IAAKA,KAAcV,MAC1B,GACF,GACD,CAACqX,EAAmB5c,EAAY0c,EAAmB7c,KAGtD+B,EAAAA,EAAAA,YAAU,KAER,MACMsE,EAAoBC,GADCuW,EAAkBpX,kBACiBlE,GAC9Dmb,GAAmBrW,GAEnB/E,EAAe+E,EAAkB,GAChC,CAAC0W,EAAmBxb,EAAsBsb,KAG7C9a,EAAAA,EAAAA,YAAU,KAER,MAAMwE,EAA+BsW,EAAkBpa,UACrDoa,EAAkB5a,OAAOuE,oBACzBC,IACE,MAAM,iBAAEC,EAAgB,QAAEC,GAAYF,EACtCC,EAAiBpE,SAAQa,UACvB,MAAMuC,EAAmB,CAAC,EACpBC,EAAakX,EAAkBjX,mBAAmBC,EAAKC,uBAC7D,GAAIH,GAAYsX,YACd,OAGF,MAAMlX,EAAW5F,EAAW6F,yBAAyBL,GAC/CM,EAAUF,EAASG,KAAKC,MAAMJ,EAAStC,OAAS,IAGjDwC,IAILP,EAAiBG,EAAKC,6BAA+B9F,EACnDiG,EACAJ,EAAKqX,iBAGP1b,GAAwB4E,IACf,IAAKA,KAAcV,MAC1B,GACF,IAIN,MAAO,KACLa,EAA6BvD,aAAa,CAC3C,GACA,CAAChD,EAAaG,EAAY0c,KAE7B9a,EAAAA,EAAAA,YAAU,KAGR,MAAM8E,EAAiCgW,EAAkBpa,UACvDoa,EAAkB5a,OAAO6E,sBACzBC,IACE,MAAMV,EAAoBC,GAAgBS,EAAoBxF,GAC9DD,EAAe+E,EAAkB,IAI/B8W,EAA4CN,EAAkBpa,UAClEoa,EAAkB5a,OAAOmb,yCACzB,KACE,MAAM/W,EAAoBC,GACxBuW,EAAkBQ,uBAClB9b,GAGFD,EAAe+E,EAAkB,IAIrC,MAAO,KACLQ,EAA+B7D,cAC/Bma,EAA0Cna,aAAa,CACxD,GACA,CAAC+Z,EAAmBxb,EAAsBsb,KAE7C9a,EAAAA,EAAAA,YAAU,KACR,MAAM,YAAEiB,GAAgByX,EAAoBhY,UAC1CgY,EAAoBxY,OAAOwZ,sBAC3B,KACE,MAAM6B,EAAsB5V,OAAO6V,QAAQ9C,EAAoB+C,iBAAiBlW,QAC9E,EAAEwI,EAAKqF,KAASA,IAAQsF,EAAoBzP,QAC5C,GAAG,GAEA+R,EAAkBnV,SAAS0V,KAC9BN,EAAqB,CAACM,IACtBpc,EAA6B,CAACoc,IAChC,IAIJ,MAAO,KACLta,GAAa,CACd,IAGH,MAAMgE,EAuJR,SAAiCC,EAA0B9F,EAAkBE,GAC3E,MAAM6F,EAAiB,GACjBC,EAAgB,GAChBC,EAAa,GAEnBjG,EAAiBmB,SAAQ2B,IACvB,MAAMoD,EAAsBhG,EAAYiG,QACtCC,GAAMA,EAAGxE,mBAAqBkB,EAAMT,mBAEhCgE,EAAWE,OAAOC,OAAO,CAAC,EAAG1D,EAAO,CACxC5C,YAAagG,IAGXJ,EAAyBW,SAAS3D,EAAMT,kBAC1C0D,EAAe1E,KAAKgF,IAGpBL,EAAc3E,KAAKgF,GACnBJ,EAAW5E,KAAKgF,GAClB,IAGF,MAAMR,EAAO,CACX,CACEmB,KAAM,UACNC,MAAO,UACP9E,QAAS4D,GAEX,CACEiB,KAAM,SACNC,MAAO,SACP9E,QAAS6D,GAEX,CACEgB,KAAM,MACNC,MAAO,MACP9E,QAAS8D,IAIb,OAAOJ,CACT,CAhMewB,CAAwBuU,EAAmB5b,EAAkBE,GAkB1E,MAAM2I,EAA+BzJ,EAAUqB,IAAItB,IAAmBuB,uBAEtE,OACEwH,EAAAA,cAACC,EAAAA,GAAY,CACXtC,KAAMA,EACNsI,gBAAiBA,EACjBxO,cAAeA,EACf+I,uBA5NkC/D,IACpC,IAAI2X,EAAmB,GACvB,MAAM1T,EAAazJ,EACnB,IACEmd,EAAmBb,EAAuBc,0BACxC3T,EACAjE,EAEJ,CAAE,MAAOlC,GACPC,QAAQC,KAAKF,GACbkZ,EAAsBtP,KAAK,CACzBd,MAAO,yBACPe,QAAS,gEACT5B,KAAM,OACN8R,SAAU,KAEd,CAEAjd,EAAoBkd,2BAA2BH,EAAiB,EA2M9DzT,6BAA8BA,EAC9B/I,0BAA2BA,EAC3BsI,aAzBJ,SAA2BxG,GACzB,MAAMyG,EAAsBvI,EAA0B2G,SAAS7E,GACzDqG,EAAmCI,EAErC,IAAIvI,EAA0BqG,QAAOmC,GAAWA,IAAY1G,KAC5D,IAAI9B,EAA2B8B,GAInC,GAFA7B,EAA6BkI,IAExBI,EAAqB,CAExBtJ,EAAkC2c,EAAmB9Z,GADhC,EAEvB,CACF,EAaI2G,WAAYC,IACV5I,EAAiB4I,EAAe,GAIxC,CAEAgT,GAAkB1S,UAAY,CAC5BqF,gBAAiBpF,IAAAA,OAAiBC,WAClChK,WAAY+J,IAAAA,MAAgB,CAC1BlE,yBAA0BkE,IAAAA,KAAeC,aACxCA,WACHnK,YAAakK,IAAAA,KAAeC,WAC5BlK,0BAA2BiK,IAAAA,KAAeC,WAC1CjK,kCAAmCgK,IAAAA,KAAeC,YAGpD,YAwBA,SAAS7D,GAAgBjF,EAAaE,GACpC,MAAM6I,EAA8B,GAC9BC,EAAqC,GAqD3C,OAnDAhJ,EACGiG,QAAOC,IAAOA,EAAGsW,8BACjBvb,SAAQiF,IACP,MAAM+C,EAAW/I,EAAqBgG,EAAGzB,uBACnCyE,EAoDZ,SAA2BhD,GACzB,GAAIkD,GAA2B7C,SAASL,EAAGiD,WAAajD,GAAI0V,YAE1D,MAAO,mBAGT,MAAO,WACT,CA3D4BvS,CAAkBnD,GAElC2D,EACc,cAAlBX,EAAgCH,EAAuBC,EACzD,IAAIyT,EAAoBvW,EAAG6D,mBAAqB,GAChD,GAAoB,QAAhB7D,EAAGiD,SAAoB,CACzB,MAAMuT,EAAuB1c,EAAYiE,MACtCK,GACCA,EAAWG,wBACXyB,EAAGyW,kCAGP,GAAID,EAAsB,CACxB,MAAM,aAAEE,EAAY,gBAAEC,GACpBH,EAAqBI,SAEnBD,GAAmBD,IACrBH,EAAoBA,EAAkBM,QACpC,eACC,GAAEF,KAAmBD,cAG5B,CACF,CAEA/S,EAAM1I,KAAK,CACTsD,sBAAuByB,EAAGzB,sBAC1BvB,YAAYuZ,EACZzS,aAAc9D,EAAGgE,aACjBC,SAAUjE,EAAGiD,SACbiB,WAAYlE,EAAGmE,WACf2S,WAAY9W,EAAG+W,WACfnZ,aAAcoC,EAAGoE,eACjB4S,UAAWhX,EAAGgX,UACdxb,iBAAkBwE,EAAGxE,iBACrByb,SAAUjX,EAAGiX,SACbjU,gBACAD,WACAsB,SAAU,CACRC,KAAM,aACN/F,sBAAuByB,EAAGzB,uBAG5B2Y,+BAAgClX,EAAGmX,YACnC,IAGC,IAAItU,KAAyBC,EACtC,CAEA,MAAMI,GAA6B,CAAC,KAAM,MAAO,KAAM,WAAY,SAAU,UClW7E,MACE8D,+BAA8B,GAC9BW,kCAAiC,GACjCH,0BAAyBA,IACvBI,EASJ,SAASwP,IAAyB,gBAChCtP,EAAe,iBACfb,EAAgB,gBAChBc,IAIA,MAAMnP,EAAaqO,EAAiBoQ,iBAAiB,GAC/CpP,EAA6BT,GACjCP,EACArO,GAEIsP,GAA0BoP,EAAAA,EAAAA,aAC9BtQ,GAA+BC,GAC/B,IAEIkB,EACJR,GAAkC/O,GAEpC,OACEkJ,EAAAA,cAACsT,GAAiB,CAChBrN,gBAAiBA,EACjBnP,WAAYA,EACZH,YAAayP,EACbxP,0BAA2BuP,EAC3BtP,kCAAmCwP,GAGzC,CAEAiP,GAAyB1U,UAAY,CACnCoF,gBAAiBnF,IAAAA,OAAiBC,WAClCqE,iBAAkBtE,IAAAA,OAAiBC,WACnCmF,gBAAiBpF,IAAAA,OAAiBC,YAGpC,YCqBA,SAhEA,UAAwB,gBACtBkF,EAAe,iBACfb,EAAgB,gBAChBc,IAEA,MAAO,CACL,CACEnH,KAAM,aACN2W,SAAU,eACVC,UAAW,UACX3W,MAAO,UACP0N,UAAWnW,EAA0BkP,KAAK,KAAM,CAC9CQ,kBACAb,mBACAc,qBAGJ,CACEnH,KAAM,eACN2W,SAAU,eACVC,UAAW,UACX3W,MAAO,eACP0N,UAAW9F,EAA8BnB,KAAK,KAAM,CAClDQ,kBACAb,mBACAc,qBAGJ,CACEnH,KAAM,OACN2W,SAAU,eACVC,UAAW,OACX3W,MAAO,OACP0N,UAAW0E,GAAU3L,KAAK,KAAM,CAC9BQ,kBACAb,mBACAc,qBAGJ,CACEnH,KAAM,wBACN2W,SAAU,eACVC,UAAW,OACX3W,MAAO,OACP0N,UAAWwG,GAA6BzN,KAAK,KAAM,CACjDQ,kBACAb,mBACAc,qBAGJ,CACEnH,KAAM,8BACN2W,SAAU,eACVC,UAAW,UACX3W,MAAO,UACP0N,UAAW6G,GAAkB9N,KAAK,KAAM,CACtCQ,kBACAb,mBACAc,qBAIR,E,uOCxEA,MAAM0P,GAAY3V,EAAAA,MAAW,IACpB,yDAKH4V,GAA0BC,GAE5B7V,EAAAA,cAACA,EAAAA,SAAc,CAAC8V,SAAU9V,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAAC2V,GAAcE,IA8BrB,SAzBA,UAA2B,gBACzB5P,EAAe,gBACfD,EAAe,iBACfb,IAcA,MAAO,CACL,CACErG,KAAM,uBACN2N,UAf4CoJ,GAE5C7V,EAAAA,cAAC4V,GAAuBG,GAAA,CACtB9P,gBAAiBA,EACjBD,gBAAiBA,EACjBb,iBAAkBA,EAClB6Q,mCAAmC,GAC/BH,KAWZ,ECvCMI,GAAiB,CACnBnT,GAAI,SACJoT,QAAQ,EACRC,6BAA6B,EAC7BrX,KAAM,SACNsX,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbC,sBAAuB,GACvBC,oBAAqB,CACnBC,KAAM,CACJC,oBAAqB,CAAC,CACpB,OAAU,EACV,UAAa,kBACb,WAAc,CACZ,SAAY,CACV,MAAS,MAGb,UAAY,GACX,CACD,OAAU,EACV,UAAa,mBACb,WAAc,CACZ,SAAY,CACV,MAAS,YAGb,UAAY,KAGhBC,IAAK,CACHD,oBAAqB,CAAC,CACpB,OAAU,EACV,UAAa,kBACb,WAAc,CACZ,SAAY,CACV,MAAS,MAGb,UAAY,GACX,CACD,OAAU,EACV,UAAa,mBACb,WAAc,CACZ,SAAY,CACV,MAAS,YAGb,UAAY,KAGhBE,KAAM,CACJF,oBAAqB,CAAC,CACpB,OAAU,EACV,UAAa,kBACb,WAAc,CACZ,SAAY,CACV,MAAS,MAGb,UAAY,GACX,CACD,OAAU,EACV,UAAa,mBACb,WAAc,CACZ,SAAY,CACV,MAAS,YAGb,UAAY,KAGhBG,IAAK,CACHH,oBAAqB,CAAC,CACpB,OAAU,EACV,UAAa,kBACb,WAAc,CACZ,SAAY,CACV,MAAS,MAGb,UAAY,GACX,CACD,OAAU,EACV,UAAa,mBACb,WAAc,CACZ,SAAY,CACV,MAAS,YAGb,UAAY,MAIlBI,aAAc,CAAC,WACfC,OAAQ,CACN,CACElU,GAAI,iBACJhE,KAAM,iBACNmY,kBAAmB,CACjBzU,KAAM,OACN0U,WAAY,CACV7I,KAAM,EACN8I,QAAS,IAGbjgB,UAAW,CACT,CACEkgB,gBAAiB,CACfC,YAAa,WAEfrf,YAAa,CAAC,CAAE8K,GAAI,UAEtB,CACEsU,gBAAiB,CACfC,YAAa,WAEfrf,YAAa,CAAC,CAAE8K,GAAI,UAEtB,CACEsU,gBAAiB,CACfC,YAAa,WAEfrf,YAAa,CAAC,CAAE8K,GAAI,SAEtB,CACEsU,gBAAiB,CACfC,YAAa,WAEfrf,YAAa,CAAC,CAAE8K,GAAI,UAGxBsT,YAAa,6BAGjBkB,0BAA2B,GAY/B,SATA,WACE,MAAO,CACL,CACExY,KAAMmX,GAAenT,GACrByU,SAAUtB,IAGhB,E,4BCzHe,SAASuB,IAAW,SACjC1C,EAAQ,MACR2C,EAAK,OACLC,EAAM,UACNC,GAAY,IAEZ,IAAK7C,EACH,OAGF,GAAIA,EAAS8C,IACX,OAAO9C,EAAS8C,IAGlB,MAAMC,EAAgBF,EAAY,qBAAuB,iBAEzD,GAAKD,EAAOG,IAA4C,YAA1BH,EAAOG,GAUnC,OCXW,SAA0B/C,EAAU4C,EAAQD,GAEzD,MAAMK,EAtCR,SAAqChD,EAAU4C,EAAQD,GACrD,MAAMM,EANR,SAAgCjD,EAAU4C,GACxC,MAAM,iBAAEhe,EAAgB,kBAAEF,EAAiB,eAAE0O,GAAmB4M,EAChE,MAAQ,GAAE4C,EAAOM,oBAAoBte,YAA2BF,eAA+B0O,GACjG,CAGwB+P,CAAuBnD,EAAU4C,GAIvD,MAAQ,GAAEK,YAFVN,EAAQA,GAAS,GAGnB,CAgCcS,CAA4BpD,EAAU4C,EAAQD,GAE1D,GAAKK,EAIL,MAAQ,UAASA,GACnB,CDEWK,CAAiBrD,EAAU4C,EAAQD,GAVuB,CACjE,MAAMW,EAzCV,SAA8BV,EAAQ5C,GACpC,MAAM,iBAAEpb,EAAgB,kBAAEF,EAAiB,eAAE0O,GAAmB4M,EAC1DuD,EAAS,GAEfA,EAAOlf,KAAK,oBACZkf,EAAOlf,KAAM,YAAWO,KACxB2e,EAAOlf,KAAM,aAAYK,KACzB6e,EAAOlf,KAAM,aAAY+O,KACzBmQ,EAAOlf,KAAK,iCACZkf,EAAOlf,KAAK,oBAEZ,MAAMmf,EAAcD,EAAOE,KAAK,KAEhC,MAAQ,GAAEb,EAAOc,eAAeF,GAClC,CA2BoBG,CAAqBf,EAAQ5C,GAE7C,IAAIlY,EAAU,YAAcwb,EAK5B,YAJc1R,IAAV+Q,IACF7a,GAAW,UAAY6a,GAGlB7a,CACT,CAGF,C,2BEzCA,MAAM8b,GAAmBhV,EAAAA,QAAQiV,kBAC3B,cAAEC,IAAkBC,GAAAA,QAAAA,KAEpBC,GAAW,CACf3e,iBAAkB,mBAClB4e,UAAW,aAGb,IAAIC,GAAS,CACXC,KAAM,GACNC,oBAAqB,IAAIC,KAY3B,MAAMC,GAAmBxB,GAChBoB,GAAOC,KAAKhd,MAAKod,GAAYA,EAASzB,MAAQA,IAGjD0B,GAAiBA,CAAC1B,EAAK2B,KAC3B,IAAIC,EAAcD,EACd3B,EAAI7C,QACJ,iCACC,kCAAiCwE,KAElC3B,EAOJ,OAJA4B,EAAcA,EAAYjb,SAAS,UAC/Bib,EAAYzE,QAFM,aAEiB,aACnCyE,EAEGA,CAAW,EAGdC,GAAsBA,CAACpL,EAAMkL,EAAQG,KAEzC,IAAIC,EAAetL,EAAK1T,KAAIiT,IAC1BA,EAAIxS,UAAYwe,KAAAA,OAAShM,EAAIxS,WAAYye,GAAIA,EAAEjC,MACxChK,KAGLgM,KAAAA,QAAUF,KACZC,EAAeA,EAAa1b,QAAO2P,GAC1B8L,EAAenb,SAASqP,EAAIpU,sBAIvC,MASMS,EATcoE,OAAOkD,OACzBoY,EAAanY,QAAO,CAACsY,EAAalM,KAChC,MAAMmM,EAAWnM,EAAsB,iBAGvC,OAFKkM,EAAYC,KAAWD,EAAYC,GAAY,IACpDD,EAAYC,GAAU5gB,KAAKyU,GACpBkM,CAAW,GACjB,CAAC,IAGsBnf,KAAI0T,IAC9B,MAAM2L,EAAoB3L,EAAK7M,QAAO,CAACC,EAAKmM,IACnCnM,GAAOwY,SAASrM,EAAkB,eAAM,IAC9C,GAEGlL,EAAS2L,EAAK1T,KAAIiT,IACf,CACLpU,kBAAmBoU,EAAuB,kBAC1CzM,SAAUyM,EAAc,SACxB7L,kBAAmB6L,EAAuB,mBAAK,iBAC/ClU,iBAAkBkU,EAAsB,iBACxC1L,aAAc0L,EAAkB,aAChCqH,WAAYrH,EAAgB,WAC5BzS,aAAc+e,MAAMD,SAASrM,EAAkB,eAC3C,EACAqM,SAASrM,EAAkB,cAC/BxS,UAAWwS,EAAe,UAAEjT,KAAIma,IACvB,CACL7P,SAAU6P,EAAS7P,SACnB2S,IAAK0B,GAAexE,EAAS8C,IAAK2B,WAM1C,MAAO,CACL7f,iBAAkB2U,EAAK,GAAqB,iBAC5C5S,YAAa4S,EAAK,GAAgB,YAClC8L,WAAY9L,EAAK,GAAe,WAChCxT,gBAAiBwT,EAAK,GAAoB,gBAC1CtT,UAAWsT,EAAK,GAAc,UAC9B9S,UAAW8S,EAAK,GAAc,UAC9B+L,cAAe/L,EAAK,GAAkB,cACtCgM,WAAYhM,EAAK,GAAe,WAChCpT,iBAAkBoT,EAAK,GAAqB,kBAAK,iBACjD1S,UAAW0S,EAAK,GAAc,UAC9BlT,aAAc6e,EACdM,WAAa,KAAIjM,EAAK,GAAa,aACnC3L,OAAQA,EACT,IAEH,MAAO,CACLzI,QAASA,EACV,EA2DGsgB,GAA4BzgB,OAAQ0gB,aAAYjB,SAAQkB,YAAWC,cACvE,MAAMC,EAAgBF,EAAU9f,KAAIb,UAClC,MAEM8gB,EAAU,+CAA8CJ,cAF1C,GAAEjB,aAAkBQ,0BAGlCc,QAAiBC,MAAMF,EAAQ,CAAEF,YACjCK,QAAYF,EAASG,OAGrBtY,GAFQqY,EAAIE,OACFF,EAAIG,UAAY,IACTvgB,KAAIb,UACzB,MACM8gB,EAAU,+CAA8CJ,OAAgBW,mBAD1D,GAAEC,yBAGtB,aADuBN,MAAMF,EAAQ,CAAEF,aACvBM,MAAM,KAExB,OAAO1W,QAAQ+I,IAAI3K,EAAO,IAE5B,aAAa4B,QAAQ+I,IAAIsN,EAAc,EAGnCU,GAAcA,CAAC5U,EAAKS,KACxB,IAAIjN,EAAU,GAQd,OAPA+e,GAAOC,KAAKte,KAAI0e,IACdA,EAASpf,QAAQU,KAAI2gB,IACfA,EAAO7U,KAASS,GAClBjN,EAAQd,KAAKmiB,EACf,GACA,IAEGrhB,CAAO,EA0BVshB,GAAgBzhB,MAAO0hB,EAAmBd,EAASlH,KACvD,MAAM,iBACJ9Z,EAAgB,kBAChBF,EAAiB,eACjB0O,EAAc,kBACdnG,GACEyZ,EAEEnD,EAAS,IAAIoD,gBAAgBC,OAAOC,SAASzhB,QAC7C0hB,EAAUvD,EAAOwD,OAAO,UACxBC,EACJF,EAAQ,IAAMA,EAAQ,IAAM,sCACxBrC,EAASlB,EAAO9f,IAAI,kBAAoB,WAC9C,IAAIwjB,EAAY1D,EAAO9f,IAAI,eAAiBujB,EAC5C,MAAME,EAAY3D,EAAO9f,IAAI,eAAiBghB,EACxC0C,EAAsBla,EAAkBgT,QAAQ,OAAQ,IAE9D,IAAImH,EAAY,GAAEF,aAAqBtiB,YAA2BF,eAA+B0O,KAAkBiT,mBACjHc,SAGF,MAAME,EAAgB3I,EAAkB4I,kBACrCle,GACCA,EAAG1E,oBAAsBA,GACzB0E,EAAG4W,SAAS5M,iBAAmBA,IACjC,GACF,GAAIiU,EAAe,CACjB,MAAMvE,EAAMuE,EAAcrH,SAAS8C,IACnCmE,EAAYnE,EAAIyE,MAAM,mCAAmC,GAAGA,MAAM,KAAK,GACvEH,EAAWtE,EAAIyE,MAAO,kCAAiCN,MAAc,EACvE,CAEA,MAAMO,EAAgB,sDAAqDP,6BAAqCG,yBAC1GK,EAAO3D,GAAc4C,GACrBgB,EAAiBC,GAAAA,GAAAA,WAAgBF,EAAKG,qBAEtC5B,MAAMwB,EAAc,CACxBK,OAAQ,OACRjC,QAAS,IACJA,EACH,eAAgB,qBAElBpX,KAAMkZ,IAEL5X,MAAMiW,GAAaA,EAASG,SAC5BpW,MAAMxH,IACL,GAAIA,EAAK7C,MACP,MAAM,IAAIF,MACP,GAAE+C,EAAK7C,MAAMqiB,SAASxf,EAAK7C,MAAM6J,WAItC,MAAMyY,EAAU,2CAA0Cd,KAAa3e,EAAK0B,OAE5E0c,EAAkB5D,IAAMiF,EACxB,MAAMC,EA7EH,CACL3b,UAF6B4b,EA8EevB,GA5E1Bra,SAClB3H,kBAAmBujB,EAAQvjB,kBAC3BuI,kBAAmBgb,EAAQhb,kBAC3BG,aAAc2J,OAAOkR,EAAQ7a,cAC7BG,WAAY0a,EAAQ1a,WACpB3I,iBAAkBqjB,EAAQrjB,iBAC1B0B,UAAW,CACT,CACE6J,SAAU,CACR+X,oBAAqBD,EAAQC,oBAC7B9U,eAAgB6U,EAAQ7U,eACxB+U,YAAaF,EAAQE,YACrBC,yBAA0BH,EAAQG,yBAClCC,+BAAgCJ,EAAQI,gCAE1CvF,IAAKmF,EAAQnF,OAjBYmF,MA+E3B,MAAMP,EAAiBC,GAAAA,GAAAA,KAAU1M,KAAKqN,UAAUN,IAEhD,OAAOhC,MACJ,sDAAqDiB,6BAAqCC,aAAqBtiB,YAA2BF,kCAC3I,CACEmjB,OAAQ,OACRjC,QAAS,IACJA,EACH,eAAgB,oBAElBpX,KAAMkZ,IAGP5X,MAAMiW,GAAaA,EAASG,SAC5BpW,MAAMxH,IACL,GAAIA,EAAK7C,MACP,MAAM,IAAIF,MACP,GAAE+C,EAAK7C,MAAMqiB,SAASxf,EAAK7C,MAAM6J,UAEtC,IAEDU,OAAOvK,IACN,MAAM,IAAIF,MAAME,EAAM6J,SAAW,oCAAoC,GACrE,IAELU,OAAOvK,IACN,MAAM,IAAIF,MAAME,EAAM6J,SAAW,gCAAgC,GACjE,EAGN,IAAIiZ,GAAmB,KAEvB,SAASC,GAAmBC,EAAiBtX,GAC3C,IAAI,KAAEnH,EAAI,SAAEkZ,GAAauF,EACzB,MAAMC,EAAO9F,IACX2F,GAAmB3F,EACZ2F,GAAiBve,KACbue,GAAiBrF,QAAQ,EAGtCwF,EAAKD,GAEL,MAAME,EAAiB,CACrBC,aAAeC,IACbH,EAAKG,EAAe,EAEtBC,WAAY9jB,OAASue,SAAQre,QAAO4d,UAC7BA,IAAKA,EAAM5d,EAAMzB,IAAI,QACrBqf,IACHA,EAAM5d,EAAMgN,WACZhN,EAAM6jB,IAAI,MAAOjG,IAEnB,IAAIyB,EAAWD,GAAiBxB,GAKhC,GAAIyB,EACF,OAAOA,EAASpf,QAAQU,KAAI2gB,GACnBA,EAAO5hB,mBAIlB,MAAMkiB,EAAU5hB,EAAM6hB,OAAO,UACN,IAAnBD,EAAQxhB,QACVwhB,EAAQziB,KAAK,uCAEf,MAAM,0BAAE2kB,GAA8B7X,EAAgBK,SAEhDqU,EAAgB,GACtB,IAAK,IAAIpN,EAAI,EAAGA,EAAIqO,EAAQxhB,OAAQmT,IAAK,CACvC,MAAMwQ,QAA0BxD,GAA0B,CACxDC,WAAYoB,EAAQrO,GACpBgM,OAAQvf,EAAMzB,IAAI,kBAAoB,WACtCkiB,UAAWzgB,EAAM6hB,OAAO,oBACxBnB,QAASoD,EAA0BE,2BAGrCrD,EAAcxhB,QAAQ4kB,EACxB,CAEA,MAAM3gB,EAAOqc,GACXG,KAAAA,QAAUe,GACV3gB,EAAMzB,IAAI,UACVyB,EAAM6hB,OAAO,sBAGf,IAAIniB,EACAF,EACJ4D,EAAKnD,QAAQhB,SAAQ2B,IACnBlB,EAAmBkB,EAAMlB,iBAEzBkB,EAAM8H,OAAOzJ,SAAQyJ,IACnBlJ,EAAoBkJ,EAAOlJ,kBAE3BkJ,EAAOtH,UAAUnC,SAAQ6b,IACvB,MAAQ8C,IAAKhb,EAASqI,SAAUgZ,GAAqBnJ,EAGrD4D,GAAiBwF,iBAAiBthB,EAAS,CACzClD,mBACAF,oBACA0O,eAAgB+V,EAAiB/V,gBACjC,GACF,GACF,IAGJ8Q,GAAOC,KAAK9f,KAAK,CACfye,MACA3d,QAAS,IAAImD,EAAKnD,WAGpB+e,GAAOE,oBAAoB2E,IACzBjG,EACAxa,EAAKnD,QAAQU,KAAIC,GAASA,EAAMlB,mBACjC,EAEHM,MAAO,CACLC,QAAS,CACPkkB,UAAWA,OACXjkB,OAAQJ,UACN,MAAO2M,EAAKS,GAAS7I,OAAO6V,QAAQkK,GAAO,GACrCC,EAAcvF,GAASrS,GAK7B,OAFgB4U,GAAYgD,EAAanX,GAE1BvM,KAAI2gB,IACV,CACLxgB,UAAWwgB,EAAOzgB,gBAClBG,KAAMsgB,EAAOvgB,UACbG,YAAaogB,EAAOrgB,iBACpBG,UAAWkgB,EAAOngB,aAClBG,WAAYggB,EAAOhB,WACnB9e,IAAK8f,EAAO/f,UACZG,YAAa4f,EAAO7f,YACpBtB,iBAAkBmhB,EAAO5hB,iBACzByB,aAAcmgB,EAAOngB,aACrBS,KAAM0f,EAAO3f,aAEf,EAEJ2iB,eAAgBA,KACd9jB,QAAQ+jB,MAAM,kCAAkC,GAGpD7b,OAAQ,CAENxI,OAAQA,KACNM,QAAQ+jB,MAAM,iCAAiC,GAGnDnjB,UAAW,CACTlB,OAAQA,KACNM,QAAQ+jB,MAAM,oCAAoC,IAIxDvZ,SAAU,CACRwZ,UAAWnG,IACT7d,QAAQ+jB,MAAM,kBAAmBlG,EAAO,EAE1C3V,OAAQ,CACNuC,SAAUnL,OACRJ,mBACAkiB,UAAU,GACVre,gBAAe,EACfkhB,cACE,CAAC,KACH,IAAK/kB,EACH,MAAM,IAAIW,MACR,+DAIJ,IAgBIqI,EAhBA9H,EAAQygB,GAAY,mBAAoB3hB,GAAkB,GAE9D,IAAKkB,EAAO,CAGV,MAAMyd,EAAS,IAAIoD,gBAAgBC,OAAOC,SAASzhB,QACnDme,EAAOwF,IAAI,mBAAoBnkB,GAC/B2e,EAAOqG,OAAO,UACd9C,EAAQ3iB,SAAS6iB,IACfzD,EAAOsG,OAAO,SAAU7C,EAAO,UAE3B2B,EAAeG,WAAW,CAAE5jB,MAAOqe,IAEzCzd,EAAQygB,GAAY,mBAAoB3hB,GAAkB,EAC5D,CAKEgJ,EADE+b,EACOA,EAAW7jB,EAAM8H,QAEjB9H,EAAM8H,OAGjB,MAAMkc,EAAwBlc,EAAO/H,KAAI+H,IACvC,MAAMmc,EAAgB,CACpBnlB,iBAAkBkB,EAAMlB,oBACrBgJ,GAGL,cADOmc,EAAczjB,UACdyjB,CAAa,IAQtB1W,EAAAA,mBAAmB2W,kBACjBF,EACArhB,GAWF,MAAMwhB,EAAiBrc,EAAOtI,OAC9BsI,EAAOzJ,SAAQ,CAACyJ,EAAQf,KACtB,MAAMvG,EAAYsH,EAAOtH,UAAUT,KAAIma,IACrC,MAAMrJ,EAAM,IACPqJ,EAAS7P,SACZ2S,IAAK9C,EAAS8C,IACdhb,QAASkY,EAAS8C,OACflV,KACA9H,GAIL,cAFO6Q,EAAIrQ,iBACJqQ,EAAI/I,OACJ+I,CAAG,IA7Bd,IAAwBuT,IA+BP5jB,EA9Bf+M,EAAAA,mBAAmB8W,aAAaD,EAAsBzhB,GA+BlDoE,IAAUod,EAAiB,IAtBjB5W,EAAAA,mBAAmB+W,SAC/BxlB,EACA6D,GAEI4hB,UAAW,EAkBiC,GAClD,IAIRC,MAAO,CACLC,MAAOvlB,UACL,GAAyB,QAArBwlB,EAAQne,SAAoB,CAC9B,MAAMuZ,EAAUzU,EAAgBK,SAASwX,0BAA0BE,yBACnE,UACQzC,GACJ+D,EACA5E,EACAzU,EAAgBK,SAASkN,kBAE7B,CAAE,MAAOjZ,GACP,MAAMA,CACR,CACF,MACEC,QAAQ+jB,MAAM,yBAChB,GAGJ5hB,wBAAAA,CAAyBL,GACvB,MAAMgM,EAAShM,EAAWgM,OACpB5L,EAAW,GAEjB,OAAK4L,GAILhM,EAAWgM,OAAOrP,SAAQ6b,IACxB,MAAMyK,EAAiBzK,EAASyK,eAEhC,GAAIA,EAAiB,EACnB,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAgBhS,IAAK,CACvC,MAAM3Q,EAAU4a,GAAW,CACzB1C,WACA2C,MAAOlK,EACPmK,OAAQ2F,KAEV3gB,EAASvD,KAAKyD,EAChB,KACK,CACL,MAAMA,EAAU4a,GAAW,CAAE1C,WAAU4C,OAAQ2F,KAC/C3gB,EAASvD,KAAKyD,EAChB,KAGKF,GArBEA,CAsBX,EACA8iB,uBAAsBA,EAAC,SAAE1K,EAAQ,MAAE2C,KAChBD,GAAW,CAC1B1C,WACA2C,UAKJgI,qBAAsBA,EAAGpH,SAAQre,YAC/B,MAAM4d,EAAM5d,EAAMzB,IAAI,OACtB,OAAOygB,GAAOE,oBAAoB3gB,IAAIqf,EAAI,GAG9C,OAAO8H,EAAAA,GAAkB7c,OAAO4a,EAClC,CChkBA,SAZA,UAA8B,gBAACxX,IAC7B,MAAO,CACL,CACEnH,KAAM,KACN0D,KAAM,UACNmd,iBAAkBpC,GACTD,GAAmBC,EAAiBtX,IAInD,ECjBMnD,G,qEAAK8c,G,4BCFX,MAAMC,GAAU,CACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAClD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAClD,IAAK,IAAK,IAAK,KAEhB,IAAIphB,GAAI,IAAIohB,IACZA,GAAQ5mB,SAAS6mB,IACbD,GAAQ5mB,SAAS8mB,IACnBthB,GAAEtF,KAAK2mB,EAAWC,EAAS,GAC1B,IAGI,MAAMC,GAAW,IAAIvhB,ICP5B,MAEM7F,GAAS,CACbwZ,qBAAsB,iDACtBC,oBAAqB,4CACrB4N,sBAAuB,+CAGnBC,GAAqB1U,IACzB,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,MACH,OAAO,EACT,IAAK,KACH,OAAO,EACT,IAAK,GAEL,UAAK9E,EACH,OAAO,KAEX,OAAO8E,CAAC,EAGK,MAAM4F,GACnB+O,WAAAA,CAAYC,EAAgBpa,EAAiBb,GAC3Ckb,KAAKD,eAAiBA,EACtBC,KAAKC,UAAY,CAAC,EAClBD,KAAKE,QAAU,0CACfF,KAAKznB,OAASA,GACdynB,KAAKG,QAAU,KACfH,KAAK1e,MAAQ,KACb0e,KAAKI,UAAY,KACjBJ,KAAKzP,aAAe,KACpByP,KAAKxP,UAAY,KACjBwP,KAAKK,SAAW,KAChBL,KAAKM,WAAa,KAClBN,KAAKhS,KAAO,KACZgS,KAAKlM,gBAAkB,CAAC,EACxBkM,KAAKlb,iBAAmBA,EACxBkb,KAAKlY,mBAAqBA,EAAAA,mBAC1B9J,OAAOC,OAAO+hB,KAAMO,EAAAA,GACtB,CAEAC,4BAAAA,CAA6B/d,EAAIge,EAAYC,GAC3C,MAAM,gBAAEC,GAAoBX,KAAKD,eAAe9Z,SAC1C3E,EAAQ0e,KAAKlM,gBAAgBrR,GAC7Bme,EAAMtf,EAAQmf,EAAa,EAAI,EAAInf,EAAQmf,EAC3CxV,EAAM3J,EAAQof,EACdG,EAAWb,KAAKM,WAAWQ,WAAWriB,GAAiB,OAARA,IAC/CsiB,EAAef,KAAKM,WAAWQ,WAAWriB,GAAiB,MAARA,IAEnDuiB,EAAchB,KAAKhS,KAAKiT,MAAML,EAAM,EAAG3V,GACvCiW,EAAmBF,EAAYF,WAClCvT,GAAQA,EAAIwT,KAAkBte,IAE3B1D,EAAUiiB,EAAYG,OAAOD,EAAkB,GACrDF,EAAYI,QAAQriB,EAAQ,IAE5BiiB,EAAY7f,QAAO,CAACkgB,EAAS9T,IACpB8T,EAAQ9c,MAAK,KAClB,MAAMgT,EAAMhK,EAAIsT,GACV7I,EAAS,IAAIoD,gBAAgB,IAAM7D,EAAIyE,MAAM,KAAK,IAClD3iB,EAAmBioB,GAA8BtJ,GACvD,OAAO2I,EAAgBY,WACrBloB,EACA2e,EAAOwD,OAAO,UACf,KAEFvX,QAAQC,UACb,CAEAsd,yBAAAA,CAA0B/e,GACxB,MAAMnB,EAAQ0e,KAAKlM,gBAAgBrR,GACnCud,KAAKyB,eAAengB,GACpB0e,KAAKQ,6BAA6B/d,EAAI,EAAG,GAC3C,CAEAgf,cAAAA,CAAengB,GACb0e,KAAK1e,MAAQA,EACb,MAAMogB,EAAY1B,KAAKhS,KAAK1M,EAAQ,GACpC0e,KAAKxP,UAAYwP,KAAK2B,cAAcD,GACpC1B,KAAK4B,gBAAgBrpB,GAAOwZ,qBAC9B,CAEA,UAAMoL,GACJ,IACE,MAAM,0BAAEM,GAA8BuC,KAAKD,eAAe9Z,SAC1D+Z,KAAK6B,KAAOpE,EAA0BqE,UACtC,MAAM9J,EAAS,IAAIoD,gBAAgBC,OAAOC,SAASzhB,QAYnD,GAVIwhB,OAAOC,SAASyG,SAASC,WAAW,kBAItCC,GAAAA,YAAYC,iBACVC,GAAAA,MAAAA,OAAaC,0BACb,IAwPV,SAAsBrC,GACpB,MAAM/H,EAAS,IAAIoD,gBAAgBC,OAAOC,SAASzhB,QAC7CwoB,EAAmBf,GAA8BtJ,GAEjDsK,EAAkB,CAAC,iCACnB,oBACJC,EAAmB,kBACnBpP,EAAiB,0BACjBsK,EAAyB,gBACzBkD,EAAe,oBACf3pB,GACE+oB,EAAe9Z,SACboU,EAAUoD,EAA0BE,yBAEpC6E,EAA4BrP,EAAkB4I,kBACjDle,GACCA,EAAGxE,mBAAqBgpB,GACxBC,EAAgBpkB,SAASL,EAAG+e,eAE1B6F,EAAiBtP,EACpB4I,kBACEle,GACCA,EAAGxE,mBAAqBgpB,IACvBC,EAAgBpkB,SAASL,EAAG+e,eAEhC8F,SAAS7kB,GAAOA,EAAGoK,OAAOya,SAASC,GAAUA,EAAMpmB,YAOtD,GAyEF,SACEimB,EACA5c,GAEA,MAAM,oBAAE2c,GAAwB3c,EAAgBK,SAEhD,OAAOuc,EAA0BI,OAAO/kB,GACtC0kB,EAAoBM,gBAAgBhlB,EAAGzB,wBAE3C,CAvFmC0mB,CAC/BN,EACAzC,GAG4B,CAC5B,MAAMgD,EAAuB,GAgB7B,YAdAP,EAA0B5pB,SAASiF,IACZ0kB,EAAoBS,gCACvCnlB,EAAGzB,uBAEQxD,SAASoe,IAChB+L,EAAqB7kB,SAAS8Y,KAIlCiM,GAAAA,UAAAA,aAAAA,0BAAoDjM,GACpD+L,EAAqBjqB,KAAKke,GAAY,GACtC,GAIN,CAEA,MAAMkM,EAA2BA,IACxBT,EAAeG,OAAOrmB,GAAY4mB,GAAAA,MAAMC,mBAAmB7mB,KAGpE,IAAIjD,EAEJ,MAAM+pB,EAAoB5pB,UACxB,GAAIypB,IAA4B,CAC9B,MAAMI,EAAed,EAA0BloB,KAAIb,UACjDwC,EAAWsnB,yBACJtnB,EAAWunB,KAAK,CAAEnJ,qBAGrBpW,QAAQ+I,IAAIsW,GAElB,MAAMG,EAA4BjB,EAA0BloB,KAC1Db,eACQ8oB,EAAoBmB,yCACxB,UACAznB,EAAWG,uBACX,KAIN6H,QAAQ+I,IAAIyW,GAA2Blf,MAAK,KAC1C,MAAM,UAAE1N,EAAS,iBAAED,GAAqBI,EAAoB2sB,WACtDC,EAAiB/sB,EAAUqB,IAAItB,GAC/BitB,EAA6B1Q,EAAkB4I,kBAClDle,GACCA,EAAGyW,kCACHsP,EAAezrB,uBAAuB,KAI1CoqB,EAAoBuB,kCAClBD,EAA2B,GAAGznB,sBAC/B,IAGH9C,KACF,GAGE4pB,IACFG,MAEG/pB,eAAgBqnB,EAAgB5nB,UACjC4nB,EAAgBpoB,OAAOwrB,uBACvBV,GAGN,CA/VgBW,CAAahE,KAAKD,mBAIvB/H,EAAO9f,IAAI,WACd,OAAO8nB,KAAK4B,gBAAgBrpB,GAAOyZ,qBACrC,IAAKgG,EAAO9f,IAAI,aACd,OAAO8nB,KAAK4B,gBAAgBrpB,GAAOyZ,qBACrCgO,KAAKG,QAAUnI,EAAO9f,IAAI,WAC1B8nB,KAAKI,UAAYpI,EAAO9f,IAAI,aAG5B8nB,KAAKK,eAAiBL,KAAKiE,UAAU,EAAG,EAAGjE,KAAKG,QAAS,YAGzDH,KAAKM,kBAAoBN,KAAKiE,UAAU,EAAG,IAAI/iB,OAAO,GAGtD8e,KAAKhS,YAAcgS,KAAKiE,UAAU,EArHvB,MAqHqC/iB,OAChD8e,KAAKM,WAAaN,KAAKhS,KAAK,GAE5B,MAAM6S,EAAWb,KAAKM,WAAWQ,WAAWriB,GAAiB,OAARA,IACrDuhB,KAAKlM,gBAAkBkM,KAAKhS,KAAKiT,MAAM,GAAG9f,QAAO,CAAC+iB,EAAMC,EAAM7Y,KAC5D,MAAMiM,EAAM4M,EAAKtD,GAMjB,OADAqD,EAHyB5C,GADV,IAAIlG,gBAAgB,IAAM7D,EAAIyE,MAAM,KAAK,MAI/B1Q,EAAM,EACxB4Y,CAAI,GACV,CAAC,GAEJlE,KAAK1e,MAAQ0e,KAAKlM,gBAAgBwN,GAA8BtJ,IAGhE,MAAM9W,EAAS8e,KAAKK,SAASnf,OAAO,GAAG5G,KAAI,CAACif,EAAG6K,IAC7CpE,KAAKK,SAASnf,OAAO5G,KAAKiT,GAAQA,EAAI6W,OAElCC,EAASnjB,EAAO,GACtB8e,KAAKzP,aAAerP,EACjB+f,MAAM,GAAI,GACV3mB,KAAKgqB,GACGA,EAAInjB,QAAO,CAACiK,EAAK+Y,EAAM7Y,KAG5B,OAFA6Y,EAAOtE,GAAkBsE,GAEjBE,EAAO/Y,IACb,IAAK,WACH,IACM6Y,IAAM/Y,EAAIiZ,EAAO/Y,IAAQoE,KAAKlR,MAAM2lB,GAC1C,CAAE,MAAOxU,GACPxV,QAAQC,KAAK+pB,EAAMxU,EACrB,CACA,MACF,IAAK,QACHvE,EAAIiZ,EAAO/Y,IAAQE,OAAO2Y,GAC1B,MACF,QACE/Y,EAAIiZ,EAAO/Y,IAAQ6Y,EAEvB,OAAO/Y,CAAG,GACT,CAAC,KAELxN,QAAQ2N,GACAA,EAAIzH,OAEZnF,MAAK,CAACP,EAAGC,IAAMD,EAAEmmB,MAAQlmB,EAAEkmB,QAE9BvE,KAAKwB,0BAA0BF,GAA8BtJ,GAC/D,CAAE,MAAOrI,GACPxV,QAAQD,MAAMyV,GACdqQ,KAAK4B,gBAAgBrpB,GAAOyZ,oBAC9B,CACF,CAEA2P,aAAAA,CAAcnI,GACZ,OAAOwG,KAAKzP,aAAajW,KAAKiR,IAC5B,MAAMjK,EAAQ0e,KAAKM,WAAWQ,WAAWriB,GAASA,GAAQ8M,EAAI9M,OAC9D,IAAe,IAAX6C,EACF,OAAOue,GAAkBrG,EAAElY,GAC7B,GAEJ,CAEA,eAAM2iB,CACJrD,EACA3V,EACAkV,EAAUH,KAAKG,QACfC,EAAYJ,KAAKI,WAEjB,MACMoE,EAAW,iDAAgDrE,YAAkBC,KADpE,IAAGQ,OAAS3V,MAErBuP,QAAiBC,MAAM+J,EAAS,CACpCnK,QAAS,CACPoK,cAAe,UAAYzE,KAAK6B,KAAmB,gBAIvD,aAD2BrH,EAASG,MAEtC,CAGA+J,UAAAA,CAAWvE,EAASC,EAAWuE,EAAOzjB,GACpC,OAAO,IAAI+C,SAAQ,CAACC,EAAS9B,KAC3B,IAAIoiB,EAAW,iDAAgDrE,YAAkBC,KAAauE,kCAC9F,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAON,GAChBI,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAIG,iBACF,gBACA,UAAY/E,KAAK6B,KAAmB,cAEtC+C,EAAII,OAAS,KACO,KAAdJ,EAAIK,OACN/gB,IAEA9B,GACF,EAEFwiB,EAAIM,KACFxV,KAAKqN,UAAU,CACb4H,MAAQ,GAAEvE,KAAauE,IACvBQ,eAAgB,OAChBjkB,OAAQ,CAACA,KAEZ,GAEL,CAEA,eAAM+Q,CAAUzB,GACd,MAAMtP,EAAS8e,KAAKM,WAAWhmB,KAAK8qB,IAClC,MAAM9jB,EAAQ0e,KAAKzP,aAAauQ,WAAWvV,GAClC6Z,GAAW7Z,EAAI9M,OAExB,GAAI6C,EAAQ,EACV,OAAOkP,EAAUlP,GAGnB,GAAgB,eAAZ8jB,EAA0B,CAC5B,MAAMvD,EACJ7B,KAAKD,eAAe9Z,SAASwX,0BAA0BqE,UACzD,OAAOpS,KAAKqN,UAAU,CACpB1M,MAAOwR,EAAKwD,QAAQhV,MACpBD,QAASyR,EAAKwD,QAAQjV,QACtBrB,YAAaxQ,KAAKmI,OAEtB,CACA,OAAO,IAAI,IAIP4e,EAAmBtF,KAAKhS,KAAKgS,KAAK1e,MAAQ,GAAGhH,KAAI,CAACyE,EAASuC,IAC7C,OAAlBJ,EAAOI,GAAkBJ,EAAOI,GAASvC,IAY3C,OATAihB,KAAKhS,KAAKgS,KAAK1e,MAAQ,GAAKgkB,EAC5BtF,KAAKxP,UAAYA,QAEXwP,KAAK0E,WACT1E,KAAKG,QACLH,KAAKI,UACJ,IAAGJ,KAAK1e,SAASqe,GAASK,KAAKM,WAAWvmB,OAAS,KAAKimB,KAAK1e,QAC9DJ,GAEKA,CACT,CAEA+P,eAAAA,GACE,OAAO+O,KAAKzP,aAAeyP,KAAKzP,aAAe,IACjD,CAEAW,YAAAA,GACE,OAAO8O,KAAKxP,UAAYwP,KAAKxP,UAAY,IAC3C,CAEA,YAAMmB,CAAO4T,GACX,IACE,MAAM,kBACJpvB,EAAiB,uBACjBqvB,EAAsB,gBACtB7E,EAAe,oBACf8E,GACEzF,KAAKD,eAAe9Z,SAClByb,EAAY1B,KAAKhS,KAAKgS,KAAK1e,MAAQikB,EAAQ,GAC5C7D,IACHrG,OAAOC,SAASoK,KAAQ,0CAAyC1F,KAAKG,WAExE,MACM5I,EAAMmK,EADE1B,KAAKM,WAAWQ,WAAWriB,GAAiB,OAARA,KAE5CuZ,EAAS,IAAIoD,gBAAgB,IAAM7D,EAAIyE,MAAM,KAAK,IAClD3iB,EAAmBioB,GAA8BtJ,GACjDuD,EAAUvD,EAAOwD,OAAO,UACzBniB,IACHgiB,OAAOC,SAASoK,KAAQ,0CAAyC1F,KAAKG,WAExE,MAAM1pB,EAAaupB,KAAKlb,iBAAiBe,sBAAsB,SACzDpP,EAAWkO,SAAStC,OAAOuC,SAAS,CAAEvL,mBAAkBkiB,YAC9D,MAAM3hB,EAAU,CAACkO,EAAAA,mBAAmB+W,SAASxlB,IACvCssB,EACJH,EAAuBI,oBAAoB1O,SAASzU,GACtD+iB,EAAuBK,QACvBL,EAAuBM,IACrB,CACElsB,UACAmsB,YAAansB,EAAQ,GACrBjC,YAAaxB,EAAkBwd,uBAAuB/V,QACnD2N,GACQA,EAAIlS,mBAAqBA,KAItCssB,GAEoBF,EAAoBO,mBAC5BptB,SAASqtB,GACrBR,EAAoBtc,OAAO8c,EAAaxjB,MAG1C,MAAMyjB,EAAa,IAAI9K,gBAAgBC,OAAOC,SAASzhB,QACnDqsB,EAAWhuB,IAAI,qBACjBguB,EAAW1I,IAAI,oBAAqBnkB,GAEpC6sB,EAAW1I,IAAI,mBAAoBnkB,GAErC6sB,EAAW7H,OAAO,UAClB9C,EAAQ3iB,SAAS6iB,IACfyK,EAAW5H,OAAO,SAAU7C,EAAO,IAGrC,MAAM0K,EACJ9K,OAAOC,SAASoK,KAAK1J,MAAM,KAAK,GAAK,IAAMkK,EAAWvf,WACxD0U,OAAO+K,QAAQC,aAAa,CAAC,EAAG,KAAMF,GACtCnG,KAAKwB,0BAA0BnoB,GAC/BsnB,EAAgB2F,eAAejtB,EACjC,CAAE,MAAOsW,GACPxV,QAAQD,MAAMyV,EAChB,CACF,CAEA4W,OAAAA,GACEvG,KAAKG,QAAU,KACfH,KAAK1e,MAAQ,KACb0e,KAAKI,UAAY,KACjBJ,KAAKzP,aAAe,KACpByP,KAAKxP,UAAY,KACjBwP,KAAK4B,gBAAgBrpB,GAAOyZ,oBAC9B,EAuHF,SAASsP,GAA8BtJ,GAErC,OAAOA,EAAO9f,IAAI,sBAAwB8f,EAAO9f,IAAI,mBACvD,C,gBCvdO,MCiBDK,GAAS,CACXiuB,uBAAwB,sDAGb,MAAMC,GAKjB3G,WAAAA,CAAYC,GAAgB,KAJpBA,oBAAc,OACdE,eAAS,OACV1nB,YAAM,EAGTynB,KAAKD,eAAiBA,EACtBC,KAAKC,UAAY,CAAC,EAClBD,KAAKznB,OAASA,GACd8iB,OAAOqL,GAAKA,GACZ1oB,OAAOC,OAAO+hB,KAAMO,EAAAA,GACxB,CAEApD,IAAAA,GACEwJ,GAAAA,YAAuBzE,iBAAiB0E,GAAAA,OAAUxE,0BAA2BvpB,IAC3E,MAAM,uBAAE2sB,GAA2BxF,KAAKD,eAAe9Z,SACb,WAAvCuf,EAAuBtO,SAASzU,IAAiBud,KAAK6G,sBAAsBhuB,EAAI,GAEvF,CAEQguB,qBAAAA,CAAsBhuB,GAC5B,MAAM,uBAAE2sB,EAAsB,2BAAEsB,GAC9B9G,KAAKD,eAAe9Z,UAChB,QAAElH,EAAO,WAAEsB,GAAexH,EAAIkuB,OAC9BC,GAAiBC,EAAAA,GAAAA,mBAAkBloB,GACnCmoB,EAAWF,GAAgBE,SACjC,IAAKA,EAAU,OAEf,MAAM,SAAEC,EAAQ,OAAEC,GAAYF,EAA4BG,gBAC1D,IAAIC,EAOJ,GANIH,GAAUI,QAAUH,IACtBE,EAASH,GAAUI,OAEjBJ,GAAUK,OAASJ,IACrBE,EAASH,GAAUK,QAEhBF,EACH,OAGF,MAAMG,EACJX,EAA2BY,gBAAgBrnB,GAIvCsnB,EAHqBC,MAAMC,KAC/BrC,EAAuBsC,uBAAuB5mB,UAEE4f,WAC/CiH,GACCA,EAAW3rB,wBACXqrB,EAAapmB,aAAatE,KAAKX,wBAM7B4rB,EAHwBJ,MAAMC,KAClCrC,EAAuBsC,uBAAuBzc,QAEAsc,GAChD,IAAKK,EAAmB,OAExB,MAAMC,EAAYf,EAASgB,eACrBC,EAAaF,GAAWE,WACxBC,EAAaH,GAAWG,WAC9B,IAAKD,IAAeC,EAAY,OAMhC,MAAM,UAAEC,EAAS,WAAEC,EAAU,MAAEC,EAAK,OAAEpW,GAAWuU,GAAAA,MAAQ,KACvD,MAIM8B,EAJS9B,GAAAA,SAAY,IAAI+B,aAAaN,GAAa,CACvDC,EAAW,GACXA,EAAW,KAEOM,QAAQpB,GACtBqB,EAAYH,EAAKI,IAAI,GACrBC,EAAaL,EAAKI,IAAI,GAGtBE,EAAOH,EAAUI,SACjBC,EAAQL,EAAUM,UAAUF,SAASG,KAAK,GAAGC,IAAIR,EAAUla,MAC3D2a,EAAMP,EAAWE,SACjBM,EAASR,EACZI,UACAF,SACAG,KAAK,GACLC,IAAIN,EAAWpa,MAQlB,MAAO,CACL4Z,UANgBW,EAAMM,IAAIR,GAAMS,WAAW,GAO3CjB,WANiBe,EAAOC,IAAIF,GAAKG,WAAW,GAO5ChB,MANYI,EAAUla,KAOtB0D,OANa0W,EAAWpa,KAOzB,IAgBG+a,GAZoBtC,EAASuC,OAASvC,EAASwC,QAQzBrB,EAAYE,GAOd,SAAtBP,GACFd,EAASyC,eACP,CACEC,UAAW,CAACJ,EAAUA,GACtBK,iBAAkB,CAChBC,YAAa,CAAC,EAAG,IACjBC,WAAY,CAAC,EAAG,KAElBC,sBAAsB,IAExB,GAGsB,SAAtBhC,GACFd,EAASyC,eACP,CACEC,UAAW,CAACJ,EAAUA,GACtBK,iBAAkB,CAChBC,YAAa,CAAC,EAAG,IACjBC,WAAY,CAAC,EAAG,KAElBC,sBAAsB,IAGxB,GAGsB,QAAtBhC,GACFd,EAASyC,eACP,CACEC,UAAW,CAACJ,EAAUA,GACtBK,iBAAkB,CAChBC,YAAa,CAAC,EAAG,IACjBC,WAAY,CAAC,EAAG,KAElBC,sBAAsB,IAExB,GAGsB,QAAtBhC,GACFd,EAASyC,eACP,CACEC,UAAW,CAACJ,EAAUA,GACtBK,iBAAkB,CAChBC,YAAa,CAAC,EAAG,IACjBC,WAAY,CAAC,EAAG,KAElBC,sBAAsB,IAExB,EAGN,CAEAzD,OAAAA,GACA,CAEF,oBAAa0D,CAAeC,EAAgBC,GAC1C,MAAM,oBACJ5H,EAAmB,oBACnBvrB,EAAmB,2BACnB8vB,EAA0B,kBAC1B3T,GACE6M,KAAKD,eAAe9Z,SAElBggB,EAAe1D,EAAoBM,gBAAgBqH,GACnDE,EAAgBjX,EAAkBjX,mBAAmB+pB,EAAa7pB,uBACxE,GAA+B,QAA3BguB,EAActpB,SAChB,OAGF,MAAMupB,EACJpE,GAAcqE,mBAAmBrE,EAAa9jB,MAAMkoB,oBAItD,IAAIjC,EAAYmC,EAEhB,GAJAJ,EAAeA,GAAgBlE,EAAauE,mBAIxCH,EAAqB,CACvB,MAAM1H,EAAQQ,GAAAA,MAAMsH,SAASJ,EAAoBnpB,SAASwpB,OAAO7jB,QAC3D,KAAEmH,EAAI,QAAE8I,GAAY6L,EAC1ByF,EAAa,CAACtR,EAAS9I,EAAMqc,EAAoB5b,MACjD8b,EAAY5H,EAAMgI,cACpB,KAAO,CACL,MAAMC,EAASzH,GAAAA,MAAM0H,UAAUX,KAC5B9B,cAAewC,GAClBL,EAAYK,EAAOzC,UACrB,CAEA,MAAMK,EAAO9B,GAAAA,MAAQ,KACnB,IAAIoE,EAcJ,OAZEA,EADET,EACO3D,GAAAA,SAAY,IAAI+B,aAAa8B,GAAY,CAChDnC,EAAW,GACXA,EAAW,KAGJ1B,GAAAA,SAAY,IAAI+B,aAAa8B,GAAY,CAChDnC,EAAW,GACXA,EAAW,GACXA,EAAW,KAIR0C,EAAOC,MAAMZ,EAAa,IAG7Ba,QAAwBtE,GAAAA,WAAc8B,IAEtC,KAAEyC,EAAI,KAAEC,EAAI,KAAEC,EAAI,KAAEC,GAAS1E,GAAAA,MAAQ,KACzC,MAAM2E,EAAY3E,GAAAA,OAAU,SAAUsE,GACtCtE,GAAAA,QAAW8B,GACX9B,GAAAA,QAAWsE,GAEX,IAAIG,EAAO,EACTF,EAAO7C,EAAW,GAClBgD,EAAO,EACPF,EAAO9C,EAAW,GAgBpB,OAduB,IAAnBiD,EAAU5c,OACR4b,GACFc,EAAOE,EAAUC,OAAO,GAAG1K,MAAM2I,WAAW,GAC5C0B,EAAOI,EAAUC,OAAO,GAAGrgB,MAAMse,WAAW,GAC5C6B,EAAOC,EAAUC,OAAO,GAAG1K,MAAM2I,WAAW,GAC5C2B,EAAOG,EAAUC,OAAO,GAAGrgB,MAAMse,WAAW,KAE5C4B,EAAOE,EAAUC,OAAO,GAAG1K,MAAM2I,WAAW,GAC5C0B,EAAOI,EAAUC,OAAO,GAAGrgB,MAAMse,WAAW,GAC5C6B,EAAOC,EAAUC,OAAO,GAAG1K,MAAM2I,WAAW,GAC5C2B,EAAOG,EAAUC,OAAO,GAAGrgB,MAAMse,WAAW,KAIzC,CAAE0B,OAAMC,OAAMC,OAAMC,OAAM,IAG7B9W,EAAkC8V,EAAc9V,iCAChD,UAAEzd,EAAS,iBAAED,GAAqBI,EAAoB2sB,WACtD4H,EAA8D,GACpE10B,EAAU+B,SAASsuB,IACbA,EAAS/uB,uBAAuB+F,SAASoW,IAC3CiX,EAA0BzyB,KACxBguB,EAA2B0E,uBAAuBtE,EAAS7mB,YAE/D,IAGF,IAAIgoB,EAAY4C,EAAO,EAAIE,EACvB7C,EAAa4C,EAAO,EAAIE,EACxB7C,EAAQH,EAAW,GACnBjW,EAASiW,EAAW,GACxB,MAAMqD,EAAmBlD,EAAQpW,EAE3B4X,EAAa,EAChBkB,EAAOE,IAAS,EAAI5C,IACpB2C,EAAOE,IAAS,EAAIjZ,IAEjBuZ,EAAc,CAClBlS,EAAG6O,EAAYE,EACfoD,EAAGrD,EAAanW,GAWlB,GARAoZ,EAA0B3yB,SAASsuB,IACjC,MAAM0E,EAAoB1E,EAASuC,OAASvC,EAASwC,QAC/CmC,EAAkB,IAAKH,GAC7BI,GAAmBD,EAAiBJ,EAAkBG,GAEtDjC,GAAezC,EAAU2E,EAAiB9B,EAAW,KAGlDwB,EAA0BxxB,OAAQ,CACrC,MAAM6pB,EACJkD,EAA2B0E,uBAAuB50B,GAEpDm1B,GACEnI,EACAzQ,EACAuY,EACA3B,EACA0B,EAEJ,CACF,EAGF,MAAM9B,GAAiBA,CACrBzC,EACAwE,EACA3B,KAEA7C,EAASyC,eAAe,CACtBC,UAA6B,CAAC8B,EAAYlS,EAAGkS,EAAYC,GACzD9B,iBAAkB,CAAEE,aAAYD,YAA+B,CAAC,GAAK,OAEvE5C,EAAS8E,QAAQ,EAGbD,GAA4BA,CAChC7E,EACA/T,EACAuY,EACA3B,EACA0B,KAEA,MAAMG,EAAoB1E,EAASuC,OAASvC,EAASwC,QAE/CuC,EACJ/E,EAAS/kB,OAAS+pB,GAAAA,MAAAA,aAA0BC,MACxCxF,GAAAA,YACAO,EAASnoB,QACTqtB,EACJlF,EAAS/kB,OAAS+pB,GAAAA,MAAAA,aAA0BC,MACxCvF,GAAAA,OAAUxE,yBACVwE,GAAAA,OAAUyF,2BAEVC,EAAoBzzB,IACxB,MAAM0zB,EDjW4CC,EACpDnwB,EAAqB,GACrB8W,KAEA,MAAMsZ,EAAmBtZ,EAAkB4I,kBAAkBle,GAC3DA,EAAGoK,QAAQrM,MAAM+mB,GAAUtmB,EAAS6B,SAASykB,EAAMpmB,eACjD,GAEEmwB,EAA8BD,EAAiBtzB,kBACrD,OAAOga,EAAkB4I,kBACtBle,GAAOA,EAAG6uB,8BAAgCA,GAC5C,ECsVsCF,CACnC3zB,EAAIkuB,OAAO1qB,SACX8W,GAGF,IAAIwZ,EAA6B,EACjC,MAAMC,EAA+BA,OAE/BD,IAA+BJ,EAA6BxyB,SAE9D+xB,GAAmBJ,EAAaD,EAAkBG,GAClDjC,GAAezC,EAAUwE,EAAa3B,GAEtCpD,GAAAA,YAAuBkG,oBACrBC,GAAAA,MAAAA,OAAqBC,sBACrBH,GAEJ,EAGFjG,GAAAA,YAAuBzE,iBACrB4K,GAAAA,MAAAA,OAAqBC,sBACrBH,GAGFX,EAAaY,oBAAoBT,EAAWE,EAAiB,EAG/DL,EAAa/J,iBAAiBkK,EAAWE,EAAiB,EAGtDR,GAAqBA,CACzBJ,EACAD,EACAG,KASA,GAPIH,EAAmBG,IACrBF,EAAYlS,GAAKoS,EAAoBH,GAEnCA,EAAmBG,IACrBF,EAAYC,GAAKF,EAAmBG,GAGlCF,EAAYlS,EAAI,IAAOkS,EAAYC,EAAI,GACzC,OAKFD,EAAYlS,GAAKwT,GACjBtB,EAAYC,GAAKqB,EAAyB,E,gBCjZ5C,MAAM,WAAEC,IAAeC,GAAAA,SAUjBC,GAAe,CACnBpJ,uBAAwB,iDAGX,MAAMpD,GAanBb,WAAAA,CAAYla,EAAiBD,EAAiBb,GAAkB,KAZhEmb,eAAS,OACT1nB,YAAM,OACNwG,aAAO,OACC6G,qBAAe,OACfD,qBAAe,OACfb,sBAAgB,OAChBrO,gBAAU,OACVwG,aAAO,OACRmwB,kBAAY,OACZC,kBAAY,OACXC,yBAAmB,EAGzBtN,KAAKC,UAAY,CAAC,EAClBD,KAAKznB,OAAS40B,GACdnN,KAAKra,gBAAkBA,EACvBqa,KAAKlb,iBAAmBA,EACxBkb,KAAKpa,gBAAkBA,EACvBoa,KAAKoN,aAAe,KACpBpN,KAAKqN,aAAe,KACpBrN,KAAKsN,oBAAsB,IAAIxU,IAC/B9a,OAAOC,OAAO+hB,KAAMO,EAAAA,GACtB,CAEOpD,IAAAA,GAEL,MAAMoQ,EAAcvN,KAAKlb,iBAAiBe,sBAC1Cma,KAAKvpB,WAAa82B,EAAY,GAE9BtL,GAAAA,YAAYC,iBACV,yCACAlC,KAAKwN,8BAA8BroB,KAAK6a,OAGtC3E,QAAQoS,WAAWC,SAASC,UAC9BtS,QAAQoS,WAAWC,SAASC,WAAWppB,MAAMopB,IAC3CxzB,QAAQyzB,IACN,gBACiB,KAAjBD,EAASE,MACT,OACiB,KAAjBF,EAASG,MACT,OAEF9N,KAAKoN,aAAeO,EAASE,MAC7B7N,KAAKqN,aAAeM,EAASG,KAAK,IAKpCzS,QAAQoS,WAAWC,SAASK,WAC5B1S,QAAQoS,WAAWC,SAASljB,SAE5B6Q,QAAQoS,WAAWC,SAASK,YAAYxpB,MAAMypB,IACvCA,EAaH7zB,QAAQyzB,IACN,8DAbFvS,QAAQoS,WAAWC,SAASljB,UAAUjG,MAAMypB,IACtCA,EACF7zB,QAAQyzB,IACN,8DAGFzzB,QAAQyzB,IACN,2DAEJ,GAMJ,GAGN,CAEA,oBAAatH,CAAejtB,SACpB2mB,KAAKvpB,WAAWkO,SAAStC,OAAOuC,SAAS,CAAEvL,qBACjD,MAIMuf,EAJQ9Q,EAAAA,mBAAmB+W,SAASxlB,GACnBgJ,OAAOqgB,SAASuL,GACrCA,EAAMlzB,UAAU2nB,SAASjO,GAAaA,EAASlY,YAE3BjC,KAAKiC,GACzBA,EAAQyf,MAAM,KAAKiF,MAAM,GAAG/I,KAAK,OAG7BgW,EADUjB,KACS9J,MAAM+K,SAChB3U,KAAAA,KAAOX,EAAKte,KAAKid,GAAQ2W,EAAS,CAAE3W,WAC5C3e,SAAQa,UACb,MAAM0pB,QAAcgL,OAAOrJ,KAAKsJ,UACbjL,EAAM9X,QACpBzS,SAAQa,UACX,MAAMihB,QAAYyI,EAAMkL,MAAMjoB,EAAImR,IAAK,CACrC+W,YAAY,EACZC,cAAc,EACdC,cAAc,IAEhB,IAAI9T,EAAK,OACT,MAAM+T,EAAM,IAAIC,QAAQtoB,EAAImR,IAAK,CAC/B8C,QAAS,CACP,uBAAuB,IAAI9b,MAAOowB,cAClC,0BAA0B,IAAIpwB,MAAOowB,cACrC,uBAAwBvoB,EAAIiU,QAAQniB,IAAI,2BAGxCwiB,GACFyI,EAAMyL,IAAIH,EAAK/T,EACjB,GACA,GAEN,CAEA,gBAAa6G,CAAWloB,EAAkBkiB,OAAUlV,GAClD,MAAMic,EAAkB,CAAC,sCACnBtC,KAAKvpB,WAAWkO,SAAStC,OAAOuC,SAAS,CAC7CvL,mBACAkiB,YAEF,MACMlf,EADQyL,EAAAA,mBAAmB+W,SAASxlB,GACnBgJ,OACpBzE,QACEqwB,IAAW3L,EAAgBpkB,SAAS+vB,EAAMlzB,UAAU,GAAG6hB,eAEzD8F,SAASuL,GACRA,EAAMlzB,UAAU2nB,SAASjO,GAAaA,EAASlY,kBAE7C0H,QAAQ+I,IAAI,CAChBgT,KAAK6O,cAAcxyB,GACnB2jB,KAAK8O,cAAcz1B,IAEvB,CAEA,iBAAa01B,CAAY11B,EAAkBF,SACnC6mB,KAAKvpB,WAAWkO,SAAStC,OAAOuC,SAAS,CAAEvL,qBACjD,MACMgD,EADQyL,EAAAA,mBAAmB+W,SAASxlB,GACnBgJ,OACpBzE,QAAQqwB,GAAUA,EAAM90B,oBAAsBA,IAC9CupB,SAASuL,GACRA,EAAMlzB,UAAU2nB,SAASjO,GAAaA,EAASlY,YAEnDyjB,KAAK6O,cAAcxyB,EACrB,CAEA,mBAAawyB,CAAcxyB,GACzB,MAAM2yB,EAAkB,GAExB,SAASC,EAAY1yB,EAASU,GAC5B,MAAMokB,EAAU6N,GAAAA,YAAAA,kBAA8B3yB,EAASU,GAGvD,OAFA+xB,EAASl2B,KAAKuoB,GAEPA,EAAQ9c,MACZ4qB,IACCnP,KAAK4B,gBAAgB5B,KAAKznB,OAAOwrB,uBAAwB,CAAEoL,mBAAkB,IAE9Ej1B,IACCC,QAAQD,MAAMA,EAAM,GAG1B,CAEA,MACMk1B,EAAcjN,GAAAA,MAAAA,YAAkBkN,SAChCpyB,EAAU,CACdqyB,SAAU,CACRC,SAAS,GAEXC,SAAS,GAGXnzB,EAASzD,SAAS2D,IAChB,MAAMkzB,EAAoB,CAAElzB,WAC5BmzB,GAAAA,qBAAqBC,WACnBV,EAAY9pB,KAAK6a,KAAMzjB,EAASU,GAChCmyB,EACAK,EAda,EAgBd,UAGGxrB,QAAQ+I,IAAIgiB,EACpB,CAEA,mBAAaF,CAAczM,GACzB,MAAMC,EAAkB,CAAC,iCACnB,kBAAEnP,EAAiB,0BAAEyc,GACzB5P,KAAKpa,gBAAgBK,SAEjB1L,EAAQuN,EAAAA,mBAAmB+W,SAASwD,GACpChI,EAAUuV,EAA0BjS,yBACpCqR,EAAWz0B,EAAM8H,OAAO/H,KAAK2zB,IACjC,MAAM,YAAErR,EAAW,kBAAEzjB,EAAiB,IAAEoe,GAAQ0W,EAAMlzB,UAAU,GAChE,GAAIunB,EAAgBpkB,SAAS0e,GAAc,CACzC,MAAM,OAAEiT,EAAQtY,IAAKuY,GAAc/X,GAAAA,QAAQgY,aAAaxY,GACxD,GAAe,aAAXsY,EACF,OAAO9X,GAAAA,QAAQiY,eAAeF,EAAWvY,GAG3C,MAAMtb,EACJkX,EAAkBnL,wBAAwB7O,GAAmB,GAE/D,GAAI6mB,KAAKsN,oBAAoBp1B,IAAIqf,KAAStb,EAAWwY,SAASlY,QAC5D,OAGF,OAAOke,MAAMqV,EAAW,CAAEzV,YACvB9V,MAAMiW,GAAaA,EAAS6B,gBAC5B9X,MAAM0rB,GAAWlY,GAAAA,QAAQmY,YAAY/G,IAAI,IAAIgH,KAAK,CAACF,OACnD1rB,MAAM6rB,IACLpQ,KAAKsN,oBAAoB9P,IAAIjG,EAAK6Y,GAClCn0B,EAAWwY,SAASlY,QAAU6zB,EAC9Bn0B,EAAWwY,SAAS0C,WAAa,IAAMiZ,CAAO,GAEpD,WAGInsB,QAAQ+I,IAAIgiB,EACpB,CAEOqB,gBAAAA,CAAiBnU,EAAMjgB,GAC5B,MAAM,IAAEsb,EAAG,QAAEhb,GAAYN,EAAWlB,UAAU,GACxCq1B,EAAUrY,GAAAA,QAAQmY,YAAY/G,IAAIjN,GAKxC,GAJAjgB,EAAWwY,SAASlY,QAAU6zB,EAC9Bn0B,EAAWwY,SAAS0C,WAAa,IAAMiZ,EACvCpQ,KAAKsN,oBAAoB9P,IAAIjG,EAAK6Y,GAE9B7zB,GAASylB,WAAW,cAAe,CACrC,MAAQzK,IAAKjW,GAAUyW,GAAAA,QAAQgY,aAAaxzB,GAC5Cwb,GAAAA,QAAQmY,YAAY/mB,OAAO7H,EAC7B,CACF,CAEA,+BAAagvB,CAA0B55B,GACrC,MACM65B,SADqBlV,OAAO8S,OAAO9iB,QACM/Q,KAC5C8L,GAAQA,EAAI4V,MAAM,YAAY,GAAGA,MAAM,KAAK,KAE5BtlB,EAAkBkH,QAClC8b,IAA8D,IAAjD6W,EAA0BC,QAAQ9W,KAEvC9gB,SAAS8gB,IAClBsG,KAAKuB,WAAW7H,EAAS,GAE7B,CAOA,mCAAc8T,CAA8B30B,UACrBwiB,OAAO8S,OAAO9iB,QAC5BzS,SAAQa,UACb,IACE,MAAM0pB,QAAcgL,OAAOrJ,KAAKsJ,GAC1BqC,QAAUtN,EAAM9X,OAChBqlB,EAAaD,EAAE,GAAGpW,QAAQniB,IAAI,0BAC9By4B,EAAUF,EAAE,GAAGpW,QAAQniB,IAAI,uBAC3ByC,EAAOg2B,EAAU,IAAIpyB,KAAKoyB,GAAW,IAAIpyB,KACzCqyB,EAAU,IAAIryB,MAGD,cAAfmyB,GAFiBE,EAAUj2B,EAEkB,EADvB,QAExB0gB,OAAO8S,OAAO9P,OAAO+P,EAEzB,CAAE,MAAOyC,GACP12B,QAAQD,MAAM22B,EAChB,IAEJ,CAEOtK,OAAAA,GACLtE,GAAAA,YAAY4K,oBACV,yCACA7M,KAAKwN,8BAET,EClSF,MA6BA,GA7BsC5nB,IACpC,MAAM,oBAAE2c,EAAmB,kBAAEpP,GAAsBvN,EAAgBK,SAEnEsc,EAAoBxpB,UAClBwpB,EAAoBhqB,OAAOu4B,oBAC3B,EAAG7K,mBACD,IAAIhqB,EAAakX,EAAkBjX,mBACjC+pB,EAAa7pB,uBAGf,GAA4B,QAAxBH,EAAW6E,SACb,OAGF,MAAMiwB,EAAqBxO,EAAoByD,kBAAiB,GAAOjsB,OACjEi3B,EAAYD,EAAqB,EAAI,IAAMA,EAAqB,GAEhEryB,EAAQzC,EAAWyF,kBAAoB,YAAcsvB,EAC3D/K,EAAavnB,MAAQA,EAErB6jB,EAAoB0O,wBAClBhL,GACA,GACA,EACD,GAEJ,ECmBH,GA/BgC,CAI9BxjB,GAAE,GACFyuB,WAAAA,EAAY,gBAAEtrB,IACZurB,GAA6BvrB,EAC/B,EACAwrB,qBAAsBA,EAAGxrB,qBAChBwrB,GAAqB,CAAExrB,oBAEhCyrB,yBAAwB,GACxBC,eAAc,GACdC,kBAAiB,GACjBC,eAAAA,EAAgB,gBAAE5rB,EAAe,gBAAED,EAAe,iBAAEb,IC1BvC,IAA4Cib,ED2BvDna,EAAgB6rB,gBE3BL,SAAyC1R,EAAgBpa,EAAiBb,GACvF,MAAO,CACLrG,KAAM,sBACN+D,OAAQA,EAAGkvB,gBAAgB,CAAC,KACnB,IAAI3gB,GAAoBgP,EAAgBpa,EAAiBb,GAGtE,CFoBoCiM,CAAoBnL,EAAiBD,EAAiBb,IACtFc,EAAgB6rB,iBC5BuC1R,ED4BAna,EC3BlD,CACLnH,KAAM,yBACN+D,OAAQA,EAAGkvB,gBAAgB,CAAC,KACnB,IAAIjL,GAAuB1G,MDyBpCna,EAAgB6rB,gBG7BL,SAAiC7rB,EAAiBD,EAAiBb,GAChF,MAAO,CACLrG,KAAM,kBACN+D,OAAQA,EAAGkvB,gBAAgB,CAAC,KACnB,IAAI/Q,GAAgB/a,EAAiBD,EAAiBb,GAGnE,CHsBoC6b,CAAgB/a,EAAiBD,EAAiBb,IAElF,MAAM,uBAAE0gB,GAA2B5f,EAAgBK,SACnDuf,EAAuBmM,mBAAmB,mBAAoB,oBAAoB3Y,IAC1DA,EAA2B,oBAC7CA,EAAS/Q,QAAU+Q,EAAS4Y,QAAU,IAAI,IAAM,CAAC,GAC/B,kBAED,GAAGC,WAG5B,E","sources":["webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/utils/getImageSrcFromImageId.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/utils/requestDisplaySetCreationForStudy.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/utils/studyPanelUtilities.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/RatingSelector.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/GridSelector.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/Checkbox.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/Textarea.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/DisplayValue.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/fields/UserProfile.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/_shared/FormGeneratorComponent/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelForm/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelFormAndMeasurementTable/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelStudyBrowser/PanelStudyBrowser.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/panels/PanelStudyBrowser/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/getPanelModule.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/getViewportModule.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/getHangingProtocolModule.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/DicomWebDataSource/utils/getImageId.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/DicomWebDataSource/utils/getWADORSImageId.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/DicomJSONDataSource/index.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/getDataSourcesModule.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/id.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/GoogleSheetsService/utils.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/GoogleSheetsService/GoogleSheetsService.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/utils.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/CropDisplayAreaService/CropDisplayAreaService.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/CacheAPIService/CacheAPIService.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/utils/addSegmentationLabelModifier.ts","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/index.tsx","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/CropDisplayAreaService/index.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/GoogleSheetsService/index.js","webpack:///../../../../GradientExtensionsAndModes/extensions/ohif-gradienthealth-extension/src/services/CacheAPIService/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { utils } from '@ohif/core';\nimport {\n  StudyBrowser,\n  useImageViewer,\n  useViewportGrid,\n  Dialog,\n} from '@ohif/ui';\nimport { useNavigate } from 'react-router-dom';\n\nconst { formatDate } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowserTracking({\n  MeasurementService,\n  DisplaySetService,\n  UIDialogService,\n  UINotificationService,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}) {\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [\n    { activeViewportId, viewports, numCols, numRows },\n    viewportGridService,\n  ] = useViewportGrid();\n  const navigate=useNavigate()\n\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\n\n  const onDoubleClickThumbnailHandler = (displaySetInstanceUID) => {\n    viewportGridService.setDisplaySetsForViewport({\n      viewportId: activeViewportId,\n      displaySetInstanceUIDs: [displaySetInstanceUID],\n    });\n  };\n\n  const activeViewportDisplaySetInstanceUIDs =\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  const isSingleViewport = numCols === 1 && numRows === 1;\n\n  useEffect(() => {\n    const added = MeasurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = MeasurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const subscriptions = [];\n\n    [added, addedRaw].forEach((evt) => {\n      subscriptions.push(\n        MeasurementService.subscribe(evt, ({ source, measurement }) => {\n          const {\n            referenceSeriesUID: SeriesInstanceUID,\n            referenceStudyUID: StudyInstanceUID,\n          } = measurement;\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach((unsub) => {\n        unsub();\n      });\n    };\n  }, [MeasurementService, activeViewportId]);\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n  }, [StudyInstanceUIDs, dataSource, getStudiesForPatientByMRN, navigate]);\n\n  // ~~ Initial Thumbnails\n  useEffect(() => {\n    const currentDisplaySets = DisplaySetService.activeDisplaySets;\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = DisplaySetService.getDisplaySetByUID(\n        dSet.displaySetInstanceUID\n      );\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n      if (imageId) {\n        // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n        newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\n          imageId\n        );\n        setThumbnailImageSrcMap(prevState => {\n          return { ...prevState, ...newImageSrcEntry };\n        });\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [DisplaySetService, dataSource, getImageSrc]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    // TODO: Are we sure `activeDisplaySets` will always be accurate?\n    const currentDisplaySets = DisplaySetService.activeDisplaySets;\n    const mappedDisplaySets = _mapDisplaySets(\n      currentDisplaySets,\n      thumbnailImageSrcMap,\n      viewports,\n      isSingleViewport,\n      dataSource,\n      DisplaySetService,\n      UIDialogService,\n      UINotificationService\n    );\n\n    setDisplaySets(mappedDisplaySets);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    DisplaySetService.activeDisplaySets,\n    thumbnailImageSrcMap,\n    viewports,\n    dataSource,\n  ]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\n\n          const newImageSrcEntry = {};\n          const displaySet = DisplaySetService.getDisplaySetByUID(\n            displaySetInstanceUID\n          );\n\n          if (options.madeInClient) {\n            setJumpToDisplaySet(displaySetInstanceUID);\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (imageId) {\n            // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n            newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(\n              imageId\n            );\n            setThumbnailImageSrcMap(prevState => {\n              return { ...prevState, ...newImageSrcEntry };\n            });\n          }\n        });\n      }\n    );\n\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(\n          changedDisplaySets,\n          thumbnailImageSrcMap,\n          viewports,\n          isSingleViewport,\n          dataSource,\n          DisplaySetService,\n          UIDialogService,\n          UINotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n      SubscriptionDisplaySetsChanged.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    DisplaySetService,\n    dataSource,\n    getImageSrc,\n    thumbnailImageSrcMap,\n    viewports,\n  ]);\n\n  const tabs = _createStudyBrowserTabs(\n    StudyInstanceUIDs,\n    studyDisplayList,\n    displaySets\n  );\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(\n      StudyInstanceUID\n    );\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? [\n          ...expandedStudyInstanceUIDs.filter(\n            stdyUid => stdyUid !== StudyInstanceUID\n          ),\n        ]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(\n        DisplaySetService,\n        StudyInstanceUID,\n        madeInClient\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (jumpToDisplaySet) {\n      // Get element by displaySetInstanceUID\n      const displaySetInstanceUID = jumpToDisplaySet;\n      const element = document.getElementById(\n        `thumbnail-${displaySetInstanceUID}`\n      );\n\n      if (element && typeof element.scrollIntoView === 'function') {\n        // TODO: Any way to support IE here?\n        element.scrollIntoView({ behavior: 'smooth' });\n\n        setJumpToDisplaySet(null);\n      }\n    }\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\n\n  useEffect(() => {\n    if (!jumpToDisplaySet) {\n      return;\n    }\n\n    const displaySetInstanceUID = jumpToDisplaySet;\n    // Set the activeTabName and expand the study\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(\n      displaySetInstanceUID,\n      tabs\n    );\n    if (!thumbnailLocation) {\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\n\n      return;\n    }\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\n    setActiveTabName(tabName);\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    if (!studyExpanded) {\n      const updatedExpandedStudyInstanceUIDs = [\n        ...expandedStudyInstanceUIDs,\n        StudyInstanceUID,\n      ];\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n    }\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      activeTabName={activeTabName}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n      onClickThumbnail={() => {}}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\n    />\n  );\n}\n\nPanelStudyBrowserTracking.propTypes = {\n  MeasurementService: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    EVENTS: PropTypes.object.isRequired,\n  }).isRequired,\n  DisplaySetService: PropTypes.shape({\n    EVENTS: PropTypes.object.isRequired,\n    activeDisplaySets: PropTypes.arrayOf(PropTypes.object).isRequired,\n    getDisplaySetByUID: PropTypes.func.isRequired,\n    subscribe: PropTypes.func.isRequired,\n  }).isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowserTracking;\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(\n  displaySets,\n  thumbnailImageSrcMap,\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\n  isSingleViewport,\n  dataSource,\n  DisplaySetService,\n  UIDialogService,\n  UINotificationService\n) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n  displaySets.forEach(ds => {\n    const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n    const componentType = _getComponentType(ds.Modality);\n    const viewportIdentificator = isSingleViewport\n      ? []\n      : Object.values(viewports).reduce((acc, viewportData, index) => {\n          if (\n            viewportData?.displaySetInstanceUIDs?.includes(\n              ds.displaySetInstanceUID\n            )\n          ) {\n            acc.push(viewportData.viewportLabel);\n          }\n          return acc;\n        }, []);\n\n    const array =\n      componentType === 'thumbnailTracked'\n        ? thumbnailDisplaySets\n        : thumbnailNoImageDisplaySets;\n\n    const { displaySetInstanceUID } = ds;\n\n    const thumbnailProps = {\n      displaySetInstanceUID,\n      description: ds.SeriesDescription,\n      seriesNumber: String(ds.SeriesNumber),\n      modality: ds.Modality,\n      seriesDate: formatDate(ds.SeriesDate),\n      numInstances: ds.numImageFrames,\n      StudyInstanceUID: ds.StudyInstanceUID,\n      componentType,\n      imageSrc,\n      dragData: {\n        type: 'displayset',\n        displaySetInstanceUID,\n        // .. Any other data to pass\n      },\n      viewportIdentificator,\n    };\n\n    if (componentType === 'thumbnailNoImage') {\n      if (dataSource.reject && dataSource.reject.series) {\n        thumbnailProps.canReject = true;\n        thumbnailProps.onReject = () => {\n          UIDialogService.create({\n            id: 'ds-reject-sr',\n            centralize: true,\n            isDraggable: false,\n            showOverlay: true,\n            content: Dialog,\n            contentProps: {\n              title: 'Delete Report',\n              body: () => (\n                <div className=\"p-4 text-white bg-primary-dark\">\n                  <p>Are you sure you want to delete this report?</p>\n                  <p>This action cannot be undone.</p>\n                </div>\n              ),\n              actions: [\n                { id: 'cancel', text: 'Cancel', type: 'secondary' },\n                {\n                  id: 'yes',\n                  text: 'Yes',\n                  type: 'primary',\n                  classes: ['reject-yes-button'],\n                },\n              ],\n              onClose: () => UIDialogService.dismiss({ id: 'ds-reject-sr' }),\n              onShow: () => {\n                const yesButton = document.querySelector('.reject-yes-button');\n\n                yesButton.focus();\n              },\n              onSubmit: async ({ action }) => {\n                switch (action.id) {\n                  case 'yes':\n                    try {\n                      await dataSource.reject.series(\n                        ds.StudyInstanceUID,\n                        ds.SeriesInstanceUID\n                      );\n                      DisplaySetService.deleteDisplaySet(displaySetInstanceUID);\n                      UIDialogService.dismiss({ id: 'ds-reject-sr' });\n                      UINotificationService.show({\n                        title: 'Delete Report',\n                        message: 'Report deleted successfully',\n                        type: 'success',\n                      });\n                    } catch (error) {\n                      UIDialogService.dismiss({ id: 'ds-reject-sr' });\n                      UINotificationService.show({\n                        title: 'Delete Report',\n                        message: 'Failed to delete report',\n                        type: 'error',\n                      });\n                    }\n                    break;\n                  case 'cancel':\n                    UIDialogService.dismiss({ id: 'ds-reject-sr' });\n                    break;\n                }\n              },\n            },\n          });\n        };\n      } else {\n        thumbnailProps.canReject = false;\n      }\n    }\n\n    array.push(thumbnailProps);\n  });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = [\n  'SR',\n  'SEG',\n  'RTSTRUCT',\n  'RTPLAN',\n  'RTDOSE',\n];\n\nfunction _getComponentType(Modality) {\n  if (thumbnailNoImageModalities.includes(Modality)) {\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnailTracked';\n}\n\nconst _viewportLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n/**\n *\n * @param {string[]} primaryStudyInstanceUIDs\n * @param {object[]} studyDisplayList\n * @param {string} studyDisplayList.studyInstanceUid\n * @param {string} studyDisplayList.date\n * @param {string} studyDisplayList.description\n * @param {string} studyDisplayList.modalities\n * @param {number} studyDisplayList.numInstances\n * @param {object[]} displaySets\n * @returns tabs - The prop object expected by the StudyBrowser component\n */\nfunction _createStudyBrowserTabs(\n  primaryStudyInstanceUIDs,\n  studyDisplayList,\n  displaySets\n) {\n  const primaryStudies = [];\n  const recentStudies = [];\n  const allStudies = [];\n\n  // Iterate over each study...\n  studyDisplayList.forEach(study => {\n    // Find it's display sets\n    const displaySetsForStudy = displaySets.filter(\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\n    );\n\n    // Sort them\n    const sortedDisplaySetsForStudy = utils.sortBySeriesDate(\n      displaySetsForStudy\n    );\n\n    /* Sort by series number, then by series date\n      displaySetsForStudy.sort((a, b) => {\n        if (a.seriesNumber !== b.seriesNumber) {\n          return a.seriesNumber - b.seriesNumber;\n        }\n\n        const seriesDateA = Date.parse(a.seriesDate);\n        const seriesDateB = Date.parse(b.seriesDate);\n\n        return seriesDateA - seriesDateB;\n      });\n    */\n\n    // Map the study to it's tab/view representation\n    const tabStudy = Object.assign({}, study, {\n      displaySets: displaySetsForStudy,\n    });\n\n    // Add the \"tab study\" to the 'primary', 'recent', and/or 'all' tab group(s)\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\n      primaryStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    } else {\n      // TODO: Filter allStudies to dates within one year of current date\n      recentStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    }\n  });\n\n  // Newest first\n  const _byDate = (a, b) => {\n    const dateA = Date.parse(a);\n    const dateB = Date.parse(b);\n\n    return dateB - dateA;\n  };\n\n  const tabs = [\n    {\n      name: 'primary',\n      label: 'Primary',\n      studies: primaryStudies.sort((studyA, studyB) =>\n        _byDate(studyA.date, studyB.date)\n      ),\n    },\n    {\n      name: 'recent',\n      label: 'Recent',\n      studies: recentStudies.sort((studyA, studyB) =>\n        _byDate(studyA.date, studyB.date)\n      ),\n    },\n    {\n      name: 'all',\n      label: 'All',\n      studies: allStudies.sort((studyA, studyB) =>\n        _byDate(studyA.date, studyB.date)\n      ),\n    },\n  ];\n\n  return tabs;\n}\n\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\n  for (let t = 0; t < tabs.length; t++) {\n    const { studies } = tabs[t];\n\n    for (let s = 0; s < studies.length; s++) {\n      const { displaySets } = studies[s];\n\n      for (let d = 0; d < displaySets.length; d++) {\n        const displaySet = displaySets[d];\n\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\n          return {\n            tabName: tabs[t].name,\n            StudyInstanceUID: studies[s].studyInstanceUid,\n          };\n        }\n      }\n    }\n  }\n}\n","function getImageSrcFromImageId(cornerstone, imageId: string) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId })\n      .then(() => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\n\nexport default getImageSrcFromImageId;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  DisplaySetService,\n  StudyInstanceUID: string,\n  madeInClient: boolean\n) {\n  if (\n    DisplaySetService.activeDisplaySets.some(\n      (displaySet) => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import getImageSrcFromImageId from './getImageSrcFromImageId';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\nexport function createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nexport function getStudyForPatientUtility(extensionManager, datasource) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-default.utilityModule.common'\n  );\n\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\n  return getStudiesForPatientByMRN.bind(null, datasource);\n}\n\nexport function createRequestDisplaySetcreationFn(datasource) {\n  return requestDisplaySetCreationForStudy.bind(null, datasource);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\nimport { studyPanelUtilities } from '../utils';\n\nconst {\n  createGetImageSrcFromImageIdFn,\n  createRequestDisplaySetcreationFn,\n  getStudyForPatientUtility,\n} = studyPanelUtilities;\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowserTracking({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}) {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n\n  const _getStudiesForPatientByMRN = getStudyForPatientUtility(\n    extensionManager,\n    dataSource\n  );\n  const _getImageSrcFromImageId =\n    createGetImageSrcFromImageIdFn(extensionManager);\n  const _requestDisplaySetCreationForStudy =\n    createRequestDisplaySetcreationFn(dataSource);\n\n  return (\n    <PanelStudyBrowserTracking\n      MeasurementService={servicesManager.services.MeasurementService}\n      DisplaySetService={servicesManager.services.DisplaySetService}\n      UIDialogService={servicesManager.services.UIDialogService}\n      UINotificationService={servicesManager.services.UINotificationService}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\nWrappedPanelStudyBrowserTracking.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowserTracking;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StudySummary,\n  MeasurementTable,\n  Dialog,\n  Input,\n  useViewportGrid,\n} from '@ohif/ui';\nimport { DicomMetadataStore, utils } from '@ohif/core';\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nconst { downloadCSVReport } = utils;\nconst { formatDate } = utils;\n\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\n  key: undefined, //\n  date: undefined, // '07-Sep-2010',\n  modality: undefined, // 'CT',\n  description: undefined, // 'CHEST/ABD/PELVIS W CONTRAST',\n};\n\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }) {\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(\n    Date.now().toString()\n  );\n  const debouncedMeasurementChangeTimestamp = useDebounce(\n    measurementChangeTimestamp,\n    200\n  );\n  const {\n    MeasurementService,\n    UIDialogService,\n    DisplaySetService,\n  } = servicesManager.services;\n\n  const [displayStudySummary, setDisplayStudySummary] = useState(\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\n  );\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n\n  useEffect(() => {\n    const measurements = MeasurementService.getMeasurements();\n\n    const mappedMeasurements = measurements.map(m =>\n      _mapMeasurementToDisplay(\n        m,\n        MeasurementService.VALUE_TYPES,\n        DisplaySetService\n      )\n    );\n    setDisplayMeasurements(mappedMeasurements);\n    // eslint-ignore-next-line\n  }, [\n    MeasurementService,\n    debouncedMeasurementChangeTimestamp,\n  ]);\n\n\n  // ~~ DisplayStudySummary\n  useEffect(() => {\n    setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\n  }, [\n    displayStudySummary.key,\n  ]);\n\n  // TODO: Better way to consolidated, debounce, check on change?\n  // Are we exposing the right API for measurementService?\n  // This watches for ALL MeasurementService changes. It updates a timestamp,\n  // which is debounced. After a brief period of inactivity, this triggers\n  // a re-render where we grab up-to-date measurements\n  useEffect(() => {\n    const added = MeasurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = MeasurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const updated = MeasurementService.EVENTS.MEASUREMENT_UPDATED;\n    const removed = MeasurementService.EVENTS.MEASUREMENT_REMOVED;\n    const cleared = MeasurementService.EVENTS.MEASUREMENTS_CLEARED;\n    const subscriptions = [];\n\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\n      subscriptions.push(\n        MeasurementService.subscribe(evt, () => {\n          setMeasurementsUpdated(Date.now().toString());\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, [MeasurementService]);\n\n  async function exportReport() {\n    const measurements = MeasurementService.getMeasurements();\n    downloadCSVReport(measurements, MeasurementService);\n  }\n\n  const jumpToImage = ({ uid, isActive }) => {\n    MeasurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\n\n    onMeasurementItemClickHandler({ uid, isActive });\n  };\n\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\n    const measurement = MeasurementService.getMeasurement(uid);\n    jumpToImage({ uid, isActive });\n\n    const onSubmitHandler = ({ action, value }) => {\n      switch (action.id) {\n        case 'save': {\n          MeasurementService.update(\n            uid,\n            {\n              ...measurement,\n              ...value,\n            },\n            true\n          );\n        }\n      }\n      UIDialogService.dismiss({ id: 'enter-annotation' });\n    };\n\n    UIDialogService.create({\n      id: 'enter-annotation',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Enter your annotation',\n        noCloseButton: true,\n        value: { label: measurement.label || '' },\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              onSubmitHandler({ value, action: { id: 'save' } });\n            }\n          };\n          return (\n            <div className=\"p-4 bg-primary-dark\">\n              <Input\n                autoFocus\n                className=\"mt-2 bg-black border-primary-main\"\n                type=\"text\"\n                containerClassName=\"mr-2\"\n                value={value.label}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n              />\n            </div>\n          );\n        },\n        actions: [\n          // temp: swap button types until colors are updated\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n      },\n    });\n  };\n\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\n    if (!isActive) {\n      const measurements = [...displayMeasurements];\n      const measurement = measurements.find(m => m.uid === uid);\n\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\n      measurement.isActive = true;\n      setDisplayMeasurements(measurements);\n    }\n  };\n\n  const onMeasurementDeleteHandler = ({ uid }) => {\n    MeasurementService.remove(uid)\n  }\n\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\n    dm => dm.measurementType !== MeasurementService.VALUE_TYPES.POINT\n  );\n  const additionalFindings = displayMeasurements.filter(\n    dm => dm.measurementType === MeasurementService.VALUE_TYPES.POINT\n  );\n\n  return (\n    <>\n      <div\n        className=\"overflow-x-hidden overflow-y-auto invisible-scrollbar\"\n        data-cy={'trackedMeasurements-panel'}\n      >\n        {displayStudySummary.key && (\n          <StudySummary\n            date={formatDate(displayStudySummary.date)}\n            modality={displayStudySummary.modality}\n            description={displayStudySummary.description}\n          />\n        )}\n        <MeasurementTable\n          title=\"Measurements\"\n          amount={displayMeasurementsWithoutFindings.length}\n          data={displayMeasurementsWithoutFindings}\n          onClick={jumpToImage}\n          onEdit={onMeasurementItemEditHandler}\n          onDelete={onMeasurementDeleteHandler}\n        />\n        {additionalFindings.length !== 0 && (\n          <MeasurementTable\n            title=\"Additional Findings\"\n            amount={additionalFindings.length}\n            data={additionalFindings}\n            onClick={jumpToImage}\n            onDelete={onMeasurementDeleteHandler}\n            />\n        )}\n      </div>\n    </>\n  );\n}\n\nPanelMeasurementTableTracking.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      MeasurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\n// TODO: This could be a MeasurementService mapper\nfunction _mapMeasurementToDisplay(measurement, types, DisplaySetService) {\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\n\n  // TODO: We don't deal with multiframe well yet, would need to update\n  // This in OHIF-312 when we add FrameIndex to measurements.\n\n  const instance = DicomMetadataStore.getInstance(\n    referenceStudyUID,\n    referenceSeriesUID,\n    SOPInstanceUID\n  );\n\n  const displaySets = DisplaySetService.getDisplaySetsForSeries(\n    referenceSeriesUID\n  );\n\n  if (!displaySets[0] || !displaySets[0].images) {\n    throw new Error(\n      'The tracked measurements panel should only be tracking \"stack\" displaySets.'\n    );\n  }\n\n  const { displayText } = measurement;\n  return {\n    uid: measurement.uid,\n    label: measurement.label || '(empty)',\n    measurementType: measurement.type,\n    displayText: displayText || [],\n    isActive: false, // activeMeasurementItem === i + 1,\n  };\n}\n\nexport default PanelMeasurementTableTracking;\n","import * as React from 'react';\nimport Rating from '@mui/material/Rating';\nimport Paper from '@mui/material/Paper';\nimport StarIcon from '@mui/icons-material/Star';\nimport Typography from '@mui/material/Typography';\n\nexport default function RatingSelector({ formIndex, name, value, defaultValue, options, onChange }) {\n  const { labels, precision, max } = options\n\n  const getKeyFromValue = (v)=>{\n    if(v == null) return null\n\n    const obj = Object.keys(labels).map((key, idx)=>{\n      return {key: key, value: labels[key].value}\n    }).find((ele)=>{\n      return ele.value == v\n    })\n\n    if(obj) return Number(obj.key)\n    return null\n  }\n\n  const [val, setVal] = React.useState(value !== null ? getKeyFromValue(value): getKeyFromValue(defaultValue));  \n  const [hover, setHover] = React.useState(-1);\n\n  return (\n    <Paper className='p-2'>\n      <div>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          { name }\n        </Typography>\n        <Typography variant=\"h6\" component=\"div\">\n          { (val !== null || hover !== -1) ? labels[hover !== -1 ? hover : val].value : '?' }\n        </Typography>\n        <Typography variant=\"body2\">\n          { (val !== null || hover !== -1) ? labels[hover !== -1 ? hover : val].description : 'Please Select'}\n        </Typography>\n      </div>\n      <Rating\n        name=\"hover-feedback\"\n        value={val}\n        precision={precision}\n        max={max}\n        onChange={(event, newValue) => {\n          onChange({ formIndex: formIndex, value: newValue ? labels[newValue].value : newValue })\n          setVal(newValue);\n        }}\n        onChangeActive={(event, newHover) => {\n          setHover(newHover);\n        }}\n        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />}\n      />\n    </Paper>\n  );\n}\n","import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\n\nexport default function GridSelector({ formIndex, name, value, defaultValue, options, onChange }) {\n  const { labels, cols } = options\n  const [val, setVal] = React.useState(value !== null ? value : defaultValue);  \n  React.useEffect(()=>{\n    setVal(value !== null ? value : defaultValue)\n  }, [value])\n\n  return (\n    <Paper className='p-2'>\n      <div>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          { name }\n        </Typography>\n        <Typography variant=\"body2\" component=\"div\">\n          { Boolean(labels.find(ele=>(ele.value==val)))  ? labels.find(ele=>(ele.value==val)).description : '?' }\n        </Typography>\n      </div>\n      { \n        labels.reduce((all,one,i) => {\n           const ch = Math.floor(i/(cols || 3)); \n           all[ch] = [].concat((all[ch]||[]),one); \n           return all\n        }, []).map((chunk, idx) => {\n          return <RadioGroup\n            row\n            key={idx}\n            name=\"grid-select-row\"\n            value={val}\n            onChange={(event, newValue) => {\n              onChange({ formIndex: formIndex, value: newValue})\n              setVal(newValue);\n            }}\n          >\n            {\n              chunk.map((label, idx) => {\n                return <FormControlLabel key={idx} value={label.value} control={<Radio />} label={label.value} />\n              })\n            }\n          </RadioGroup>\n        })\n      }\n    </Paper>\n  );\n}","import * as React from 'react';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\nexport default function CheckboxLabels({formIndex, name, value, defaultValue, options, onChange}) {\n  \n  let checked\n  if(value !== null){\n    checked = Boolean(value)\n  } else {\n    checked = Boolean(defaultValue)\n    onChange({ formIndex: formIndex, value: checked })\n  }\n\n  return (\n    <Paper className='p-2'>\n        <FormGroup>\n            <FormControlLabel \n              control={\n                <Checkbox \n                    checked = { checked }\n                    onChange={ (evt)=> onChange({ formIndex: formIndex, value: evt.target.checked }) }\n                />\n              } \n              label={\n                <Typography variant=\"body2\" color=\"textSecondary\">{name}</Typography>\n              }/>\n        </FormGroup>\n    </Paper>\n  );\n}","import React, { useState, useMemo, useEffect } from 'react';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport debounce from 'lodash.debounce';\n\nexport default function Textarea({formIndex, name, value, defaultValue, options, onChange}) {\n  const [val, setVal] = useState(value ?? defaultValue ?? '');\n  const { rows } = options\n  const debouncedOnChange = useMemo(\n    () => debounce((formIndex, value) => {\n        onChange({formIndex, value})\n      }, 600), [onChange]\n  );\n\n  useEffect(() => {\n    setVal(value ?? defaultValue ?? '');\n  }, [value, defaultValue]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setVal(event.target.value);\n    debouncedOnChange(formIndex, event.target.value)\n  };\n\n  return (\n    <Paper className='p-2'>\n      <TextField\n        id=\"outlined-multiline-flexible\"\n        inputProps={{style: {fontSize: '0.75em'}}}\n        label={name}\n        multiline\n        rows={ rows }\n        value={val}\n        fullWidth={true}\n        margin={'dense'}\n        size={'small'}\n        onChange={handleChange}\n      />\n    </Paper>\n  );\n}","import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\nexport default function DisplayValue({formIndex, name, value, defaultValue, options}) {\n  return (\n    <Paper sx={{ display: 'flex' }} className='p-2'>\n        <Typography sx={{ fontSize: 14, marginRight: 1 }} color=\"text.secondary\" gutterBottom>\n          { name }:\n        </Typography>\n        <Typography variant=\"body2\" className=\"overflow-auto invisible-scrollbar\">\n          { value !== null ? value.toString() : defaultValue !== null ? defaultValue.toString() : '' } \n        </Typography>\n    </Paper>\n  );\n}","import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport CardHeader from '@mui/material/CardHeader';\nimport Avatar from '@mui/material/Avatar';\n\nfunction dhm(t) {\n    var cd = 24 * 60 * 60 * 1000,\n        ch = 60 * 60 * 1000,\n        d = Math.floor(t / cd),\n        h = Math.floor( (t - d * cd) / ch),\n        m = Math.round( (t - d * cd - h * ch) / 60000)\n  if( m === 60 ){\n    h++;\n    m = 0;\n  }\n  if( h === 24 ){\n    d++;\n    h = 0;\n  }\n  return [d, h, m]\n}\n\nexport default function UserProfile({value}) {\n    const getDateText = (lastUpdated) => {\n        const [days, hours, minutes] = dhm(Date.now() - lastUpdated)\n\n        if(days > 7){\n            return (new Date(lastUpdated)).toLocaleDateString('en-us', { year:\"numeric\", month:\"short\", day:\"numeric\"})\n        }\n        if(days > 2){\n            return `${days} days ago`\n        }\n        if(hours > 2){\n            return `${hours} hours ago`\n        }\n        if(minutes > 2){\n            return `${minutes} mins ago`\n        }\n        return `just now`\n    }\n\n    try{\n        value = JSON.parse(value)\n    } catch (e){\n        console.error(e, value)\n        value = null\n    }\n    \n    if(value){\n        return (\n            <Paper>\n                <CardHeader\n                    sx={{\n                        \"& .MuiCardHeader-content\": {\n                            overflow: \"hidden\"\n                        }\n                    }}\n                    avatar={\n                        <Avatar \n                            imgProps={{\n                                crossOrigin: \"anonymous\",\n                                referrerPolicy: \"no-referrer\"\n                            }}\n                            src={ value.picture }/>\n                    }\n                    title={ value.email }\n                    subheader={ `Updated ${getDateText(value.lastUpdated)}` }\n                />\n            </Paper>\n        );\n    }\n    return (\n        <Paper>\n            <CardHeader\n                sx={{\n                    \"& .MuiCardHeader-content\": {\n                        overflow: \"hidden\"\n                    }\n                }}\n                avatar={\n                    <Avatar/>\n                }\n                title={ '----' }\n                subheader={ `No last update` }\n            />\n        </Paper>\n    )\n}","import React from 'react';\nimport RatingSelector from './fields/RatingSelector'\nimport GridSelector from './fields/GridSelector'\nimport Checkbox from './fields/Checkbox'\nimport Textarea from './fields/Textarea'\nimport DisplayValue from './fields/DisplayValue'\nimport UserProfile from './fields/UserProfile'\n\nfunction FormGeneratorComponent({ formTemplate, formValue, setFormValue }) {\n  const onChangeHandler = ({formIndex, value}) => {\n    const newFormValue = [...formValue]\n    newFormValue[formIndex] = value\n    setFormValue([...newFormValue]);\n  }\n  \n  if(formTemplate){\n    // We assume a valid formTemplate\n    const inputs = formTemplate.map((ele, idx) => {\n      switch(ele.type) {\n        case 'checkbox':\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <Checkbox formIndex={idx} name={ele.name} options={ele.template} defaultValue={ele.defaultValue} value={formValue[idx]} onChange={onChangeHandler}/>\n            </div>\n          )\n        case 'rating':\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <RatingSelector formIndex={idx} name={ele.name} options={ele.template} defaultValue={ele.defaultValue} value={formValue[idx]} onChange={onChangeHandler}/>\n            </div>\n          )\n        case 'grid':\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <GridSelector formIndex={idx} name={ele.name} options={ele.template} defaultValue={ele.defaultValue} value={formValue[idx]} onChange={onChangeHandler}/>\n            </div>\n          )\n        case 'textarea':\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <Textarea formIndex={idx} name={ele.name} options={ele.template} defaultValue={ele.defaultValue} value={formValue[idx]} onChange={onChangeHandler}/>\n            </div>\n          )\n        case 'user_profile':\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <UserProfile value={formValue[idx]}/>\n            </div>\n          )\n        default:\n          return (\n            <div key={idx} className=\"p-2 bg-primary-dark\">\n              <DisplayValue formIndex={idx} name={ele.name} options={ele.template} defaultValue={ele.defaultValue} value={formValue[idx]}/>\n            </div>\n          )      \n      }\n    })\n\n    return (<div>\n      {inputs}\n    </div>)\n  }\n\n  return null\n}\n\nexport default FormGeneratorComponent;\n","import React, { useEffect, useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport FormGeneratorComponent from '../../_shared/FormGeneratorComponent';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport ArrowForward from '@mui/icons-material/ArrowForward';\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport debounce from 'lodash.debounce';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction PanelForm({ servicesManager, extensionManager }) {\n  const { GoogleSheetsService } = servicesManager.services\n  const [formTemplate, setFormTemplate] = useState(GoogleSheetsService.getFormTemplate());\n  const [formValue, setFormValue] = useState(GoogleSheetsService.getFormValue());\n  const [error, setError] = useState(false);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const [initLoading, setInitLoading] = useState(!Boolean(formValue && formTemplate));\n  const [loading, setLoading] = useState(false);\n  const onNext = ()=> GoogleSheetsService.getRow(1)\n  const onPrevious = ()=> GoogleSheetsService.getRow(-1)\n  const debouncedOnNext = useMemo(() => debounce(onNext, 300), []);\n  const debouncedOnPrevious = useMemo(() => debounce(onPrevious, 300), []);\n\n  useEffect(() => {\n    const subscriptions = [];\n    subscriptions.push(\n      GoogleSheetsService.subscribe(GoogleSheetsService.EVENTS.GOOGLE_SHEETS_CHANGE, () => {\n        setFirstLoad(true)\n        setFormValue(GoogleSheetsService.getFormValue())\n        setFormTemplate(GoogleSheetsService.getFormTemplate())\n        setInitLoading(false)\n      }).unsubscribe\n    );\n\n    subscriptions.push(\n      GoogleSheetsService.subscribe(GoogleSheetsService.EVENTS.GOOGLE_SHEETS_ERROR, () => {\n        setError(true)\n      }).unsubscribe\n    );\n    return () => { subscriptions.forEach(unsub=>unsub()) };\n  }, [GoogleSheetsService]);\n\n  useEffect(() => {\n    if(!firstLoad){\n      setLoading(true)\n      GoogleSheetsService.updateRow(formValue).then((values)=>{\n        setLoading(false)\n      })\n    }\n    setFirstLoad(false)\n  }, [formValue]);\n\n  if(error){\n    return (\n      <Paper sx={{ display: 'flex' }} className='p-2'>\n          <Typography sx={{ fontSize: 14, marginRight: 1 }} color=\"text.secondary\" gutterBottom>\n            { \"There was an error connecting to Google Sheets.\" }\n          </Typography>\n      </Paper>\n    )\n  }\n\n  if(!initLoading){\n    return (\n      <> \n        <div style={{color:\"white\", overflow: \"auto\"}}>\n            { loading ? <LinearProgress/> : <div style={{height: '4px'}}></div> }\n            <FormGeneratorComponent\n                formTemplate={formTemplate} \n                formValue={formValue}\n                setFormValue={setFormValue}/>\n        </div>\n        <div className=\"flex justify-center p-4\">\n          <Paper>\n            <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\n              <LoadingButton\n                loading={loading}\n                loadingPosition=\"start\"\n                startIcon={<ArrowBack />}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={debouncedOnPrevious}\n              >\n                Prev\n              </LoadingButton>\n              <LoadingButton\n                loading={loading}\n                loadingPosition=\"end\"\n                endIcon={<ArrowForward />}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={debouncedOnNext}\n              >\n                Next\n              </LoadingButton>\n            </ButtonGroup>\n          </Paper>\n        </div>\n      </>\n    )\n  }\n  \n  return <LinearProgress/>\n}\n\nPanelForm.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PanelForm;\n","import React from 'react';\nimport PanelForm from '../PanelForm'\nimport PanelMeasurementTableTracking from '../PanelMeasurementTableTracking';\nimport PropTypes from 'prop-types';\nimport Divider from '@mui/material/Divider';\n\nfunction PanelFormAndMeasurementTable({ servicesManager, extensionManager }) {\n    return (\n      <React.Fragment>\n          <div style={{height: \"150px\", overflowY: \"auto\"}}>\n            <PanelMeasurementTableTracking servicesManager={servicesManager} extensionManager={extensionManager}/>\n          </div>\n          <div className=\"m-2\">\n            <Divider style={{background: \"white\"}}/>\n          </div>\n          <PanelForm servicesManager={servicesManager} extensionManager={extensionManager}/>\n      </React.Fragment>\n    )\n}\n\nPanelFormAndMeasurementTable.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PanelFormAndMeasurementTable;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { StudyBrowser, useImageViewer, useViewportGrid } from '@ohif/ui';\nimport { utils } from '@ohif/core';\nimport { useNavigate } from 'react-router-dom';\n\nconst { sortStudyInstances, formatDate } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowser({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}) {\n  const { hangingProtocolService, displaySetService, uiNotificationService, GoogleSheetsService } =\n    servicesManager.services;\n  const navigate = useNavigate();\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [studyInstanceUIDs, setStudyInstanceUIDs] = useState([...StudyInstanceUIDs]);\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...studyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message: 'The selected display sets could not be added to the viewport.',\n        type: 'info',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  useEffect(() => {\n    setStudyInstanceUIDs([...StudyInstanceUIDs]);\n    setExpandedStudyInstanceUIDs([...StudyInstanceUIDs]);\n  }, [StudyInstanceUIDs]);\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    studyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n  }, [studyInstanceUIDs, dataSource, getStudiesForPatientByMRN, navigate]);\n\n  // // ~~ Initial Thumbnails\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (!imageId || displaySet?.unsupported) {\n        return;\n      }\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n\n      setThumbnailImageSrcMap(prevState => {\n        return { ...prevState, ...newImageSrcEntry };\n      });\n    });\n  }, [studyInstanceUIDs, dataSource, displaySetService, getImageSrc]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    // TODO: Are we sure `activeDisplaySets` will always be accurate?\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n    const mappedDisplaySets = _mapDisplaySets(currentDisplaySets, thumbnailImageSrcMap);\n    sortStudyInstances(mappedDisplaySets);\n\n    setDisplaySets(mappedDisplaySets);\n  }, [studyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n          if (displaySet?.unsupported) {\n            return;\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (!imageId) {\n            return;\n          }\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n          newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\n            imageId,\n            dSet.initialViewport\n          );\n\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        });\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n    };\n  }, [getImageSrc, dataSource, displaySetService]);\n\n  useEffect(() => {\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(changedDisplaySets, thumbnailImageSrcMap);\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          thumbnailImageSrcMap\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n  }, [studyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\n\n  useEffect(() => {\n    const { unsubscribe } = GoogleSheetsService.subscribe(\n      GoogleSheetsService.EVENTS.GOOGLE_SHEETS_CHANGE,\n      () => {\n        const newStudyInstanceUID = Object.entries(GoogleSheetsService.studyUIDToIndex).filter(\n          ([key, val]) => val === GoogleSheetsService.index\n        )[0][0];\n\n        if (!studyInstanceUIDs.includes(newStudyInstanceUID)) {\n          setStudyInstanceUIDs([newStudyInstanceUID]);\n          setExpandedStudyInstanceUIDs([newStudyInstanceUID]);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  });\n\n  const tabs = _createStudyBrowserTabs(studyInstanceUIDs, studyDisplayList, displaySets);\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? // eslint-disable-next-line prettier/prettier\n        [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  const activeDisplaySetInstanceUIDs = viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      servicesManager={servicesManager}\n      activeTabName={activeTabName}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeDisplaySetInstanceUIDs}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n    />\n  );\n}\n\nPanelStudyBrowser.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowser;\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(displaySets, thumbnailImageSrcMap) {\n  const thumbnailDisplaySets: any[] = [];\n  const thumbnailNoImageDisplaySets: any[] = [];\n\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n\n      const array =\n        componentType === 'thumbnail' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n      let seriesDescription = ds.SeriesDescription || '';\n      if (ds.Modality === 'SEG') {\n        const referencedDisplaySet = displaySets.find(\n          (displaySet) =>\n            displaySet.displaySetInstanceUID ===\n            ds.referencedDisplaySetInstanceUID\n        );\n\n        if (referencedDisplaySet) {\n          const { ViewPosition, ImageLaterality } =\n            referencedDisplaySet.instance;\n\n          if (ImageLaterality && ViewPosition) {\n            seriesDescription = seriesDescription.replace(\n              /^.* - Vessel/,\n              `${ImageLaterality} ${ViewPosition} - Vessel`\n            );\n          }\n        }\n      }\n\n      array.push({\n        displaySetInstanceUID: ds.displaySetInstanceUID,\n        description:seriesDescription ,\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: ds.SeriesDate,\n        seriesTime: ds.SeriesTime,\n        numInstances: ds.numImageFrames,\n        countIcon: ds.countIcon,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        messages: ds.messages,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID: ds.displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n      });\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    // TODO probably others.\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnail';\n}\n\n/**\n *\n * @param {string[]} primaryStudyInstanceUIDs\n * @param {object[]} studyDisplayList\n * @param {string} studyDisplayList.studyInstanceUid\n * @param {string} studyDisplayList.date\n * @param {string} studyDisplayList.description\n * @param {string} studyDisplayList.modalities\n * @param {number} studyDisplayList.numInstances\n * @param {object[]} displaySets\n * @returns tabs - The prop object expected by the StudyBrowser component\n */\nfunction _createStudyBrowserTabs(primaryStudyInstanceUIDs, studyDisplayList, displaySets) {\n  const primaryStudies = [];\n  const recentStudies = [];\n  const allStudies = [];\n\n  studyDisplayList.forEach(study => {\n    const displaySetsForStudy = displaySets.filter(\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\n    );\n    const tabStudy = Object.assign({}, study, {\n      displaySets: displaySetsForStudy,\n    });\n\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\n      primaryStudies.push(tabStudy);\n    } else {\n      // TODO: Filter allStudies to dates within one year of current date\n      recentStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    }\n  });\n\n  const tabs = [\n    {\n      name: 'primary',\n      label: 'Primary',\n      studies: primaryStudies,\n    },\n    {\n      name: 'recent',\n      label: 'Recent',\n      studies: recentStudies,\n    },\n    {\n      name: 'all',\n      label: 'All',\n      studies: allStudies,\n    },\n  ];\n\n  return tabs;\n}\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PanelStudyBrowser from './PanelStudyBrowser';\nimport { studyPanelUtilities } from '../utils';\n\nconst {\n  createGetImageSrcFromImageIdFn,\n  createRequestDisplaySetcreationFn,\n  getStudyForPatientUtility,\n} = studyPanelUtilities;\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowser({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}) {\n  // TODO: This should be made available a different way; route should have\n  // already determined our datasource\n  const dataSource = extensionManager.getDataSources()[0];\n  const _getStudiesForPatientByMRN = getStudyForPatientUtility(\n    extensionManager,\n    dataSource\n  );\n  const _getImageSrcFromImageId = useCallback(\n    createGetImageSrcFromImageIdFn(extensionManager),\n    []\n  );\n  const _requestDisplaySetCreationForStudy =\n    createRequestDisplaySetcreationFn(dataSource);\n\n  return (\n    <PanelStudyBrowser\n      servicesManager={servicesManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\nWrappedPanelStudyBrowser.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowser;\n","import {\n  PanelMeasurementTableTracking,\n  PanelStudyBrowserTracking,\n  PanelForm,\n  PanelFormAndMeasurementTable,\n  PanelStudyBrowser,\n} from './panels';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\nfunction getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}) {\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'group-layers',\n      iconLabel: 'Studies',\n      label: 'Studies',\n      component: PanelStudyBrowserTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'measurements',\n      iconName: 'list-bullets',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      component: PanelMeasurementTableTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'form',\n      iconName: 'list-bullets',\n      iconLabel: 'Form',\n      label: 'Form',\n      component: PanelForm.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'form-and-measurements',\n      iconName: 'list-bullets',\n      iconLabel: 'Form',\n      label: 'Form',\n      component: PanelFormAndMeasurementTable.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n    {\n      name: 'seriesList-without-tracking',\n      iconName: 'group-layers',\n      iconLabel: 'Studies',\n      label: 'Studies',\n      component: PanelStudyBrowser.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import React from 'react';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './viewports/GradientCornerstoneViewport'\n  );\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\nfunction getViewportModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}) {\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\n    return (\n      <OHIFCornerstoneViewport\n        servicesManager={servicesManager}\n        commandsManager={commandsManager}\n        extensionManager={extensionManager}\n        disableViewportOrientationMarkers={true}\n        {...props}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'cornerstone-gradient',\n      component: ExtendedOHIFCornerstoneTrackingViewport,\n    },\n  ];\n}\n\nexport default getViewportModule;\n","const breastProtocol = {\n    id: 'breast',\n    locked: true,\n    hasUpdatedPriorsInformation: false,\n    name: 'Breast',\n    createdDate: '2021-02-23T19:22:08.894Z',\n    modifiedDate: '2021-02-23T19:22:08.894Z',\n    availableTo: {},\n    editableBy: {},\n    protocolMatchingRules: [],\n    displaySetSelectors: {\n      LMLO: {\n        seriesMatchingRules: [{\n          \"weight\": 5,\n          \"attribute\": \"ImageLaterality\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"L\"\n            }\n          },\n          \"required\": false\n        }, {\n          \"weight\": 5,\n          \"attribute\": \"ViewCodeSequence\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R-10226\"\n            }\n          },\n          \"required\": false\n        }],\n      },\n      LCC: {\n        seriesMatchingRules: [{\n          \"weight\": 5,\n          \"attribute\": \"ImageLaterality\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"L\"\n            }\n          },\n          \"required\": false\n        }, {\n          \"weight\": 5,\n          \"attribute\": \"ViewCodeSequence\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R-10242\"\n            }\n          },\n          \"required\": false\n        }],\n      },\n      RMLO: {\n        seriesMatchingRules: [{\n          \"weight\": 5,\n          \"attribute\": \"ImageLaterality\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R\"\n            }\n          },\n          \"required\": false\n        }, {\n          \"weight\": 5,\n          \"attribute\": \"ViewCodeSequence\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R-10226\"\n            }\n          },\n          \"required\": false\n        }],\n      },\n      RCC: {\n        seriesMatchingRules: [{\n          \"weight\": 5,\n          \"attribute\": \"ImageLaterality\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R\"\n            }\n          },\n          \"required\": false\n        }, {\n          \"weight\": 5,\n          \"attribute\": \"ViewCodeSequence\",\n          \"constraint\": {\n            \"contains\": {\n              \"value\": \"R-10242\"\n            }\n          },\n          \"required\": false\n        }],\n      }\n    },\n    toolGroupIds: ['default'],\n    stages: [\n      {\n        id: 'breast-staging',\n        name: 'Breast Staging',\n        viewportStructure: {\n          type: 'grid',\n          properties: {\n            rows: 1,\n            columns: 4,\n          },\n        },\n        viewports: [\n          {\n            viewportOptions: {\n              toolGroupId: 'default',\n            },\n            displaySets: [{ id: 'RMLO' }],\n          },\n          {\n            viewportOptions: {\n              toolGroupId: 'default',\n            },\n            displaySets: [{ id: 'LMLO' }],\n          },\n          {\n            viewportOptions: {\n              toolGroupId: 'default',\n            },\n            displaySets: [{ id: 'RCC' }],\n          },\n          {\n            viewportOptions: {\n              toolGroupId: 'default',\n            },\n            displaySets: [{ id: 'LCC' }],\n          },\n        ],\n        createdDate: '2021-02-23T18:32:42.850Z',\n      },\n    ],\n    numberOfPriorsReferenced: -1,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: breastProtocol.id,\n      protocol: breastProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import getWADORSImageId from './getWADORSImageId';\n\nfunction buildInstanceWadoUrl(config, instance) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  const params = [];\n\n  params.push('requestType=WADO');\n  params.push(`studyUID=${StudyInstanceUID}`);\n  params.push(`seriesUID=${SeriesInstanceUID}`);\n  params.push(`objectUID=${SOPInstanceUID}`);\n  params.push('contentType=application/dicom');\n  params.push('transferSyntax=*');\n\n  const paramString = params.join('&');\n\n  return `${config.wadoUriRoot}?${paramString}`;\n}\n\n/**\n * Obtain an imageId for Cornerstone from an image instance\n *\n * @param instance\n * @param frame\n * @param thumbnail\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getImageId({\n  instance,\n  frame,\n  config,\n  thumbnail = false,\n}) {\n  if (!instance) {\n    return;\n  }\n\n  if (instance.url) {\n    return instance.url;\n  }\n\n  const renderingAttr = thumbnail ? 'thumbnailRendering' : 'imageRendering';\n\n  if (!config[renderingAttr] || config[renderingAttr] === 'wadouri') {\n    const wadouri = buildInstanceWadoUrl(config, instance);\n\n    let imageId = 'dicomweb:' + wadouri;\n    if (frame !== undefined) {\n      imageId += '&frame=' + frame;\n    }\n\n    return imageId;\n  } else {\n    return getWADORSImageId(instance, config, frame); // WADO-RS Retrieve Frame\n  }\n}\n","function buildInstanceWadoRsUri(instance, config) {\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\n  return `${config.wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}`;\n}\n\nfunction buildInstanceFrameWadoRsUri(instance, config, frame) {\n  const baseWadoRsUri = buildInstanceWadoRsUri(instance, config);\n\n  frame = frame || 1;\n\n  return `${baseWadoRsUri}/frames/${frame}`;\n}\n\n// function getWADORSImageUrl(instance, frame) {\n//   const wadorsuri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n//   if (!wadorsuri) {\n//     return;\n//   }\n\n//   // Use null to obtain an imageId which represents the instance\n//   if (frame === null) {\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, '');\n//   } else {\n//     // We need to sum 1 because WADO-RS frame number is 1-based\n//     frame = frame ? parseInt(frame) + 1 : 1;\n\n//     // Replaces /frame/1 by /frame/{frame}\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, `frames/${frame}`);\n//   }\n\n//   return wadorsuri;\n// }\n\n/**\n * Obtain an imageId for Cornerstone based on the WADO-RS scheme\n *\n * @param {object} instanceMetada metadata object (InstanceMetadata)\n * @param {(string\\|number)} [frame] the frame number\n * @returns {string} The imageId to be used by Cornerstone\n */\nexport default function getWADORSImageId(instance, config, frame) {\n  //const uri = getWADORSImageUrl(instance, frame);\n  const uri = buildInstanceFrameWadoRsUri(instance, config, frame);\n\n  if (!uri) {\n    return;\n  }\n\n  return `wadors:${uri}`;\n}\n","import dcmjs from 'dcmjs';\nimport pako from 'pako'\nimport {\n  DicomMetadataStore,\n  IWebApiDataSource,\n  utils,\n  errorHandler,\n  classes,\n} from '@ohif/core';\n\nimport getImageId from '../DicomWebDataSource/utils/getImageId';\nimport _ from 'lodash';\n\nconst metadataProvider = classes.MetadataProvider;\nconst { datasetToBlob } = dcmjs.data;\n\nconst mappings = {\n  studyInstanceUid: 'StudyInstanceUID',\n  patientId: 'PatientID',\n};\n\nlet _store = {\n  urls: [],\n  studyInstanceUIDMap: new Map(), // map of urls to array of study instance UIDs\n  // {\n  //   url: url1\n  //   studies: [Study1, Study2], // if multiple studies\n  // }\n  // {\n  //   url: url2\n  //   studies: [Study1],\n  // }\n  // }\n};\n\nconst getMetaDataByURL = url => {\n  return _store.urls.find(metaData => metaData.url === url);\n};\n\nconst getInstanceUrl = (url, prefix) => {\n  let modifiedUrl = prefix\n    ? url.replace(\n      'https://storage.googleapis.com',\n      `https://storage.googleapis.com/${prefix}`\n    )\n    : url;\n\n  const dicomwebRegex = /^dicomweb:/\n  modifiedUrl = modifiedUrl.includes(\":zip//\")\n    ? modifiedUrl.replace(dicomwebRegex, 'dicomzip:')\n    : modifiedUrl;\n\n  return modifiedUrl;\n}\n\nconst getMetadataFromRows = (rows, prefix, seriesuidArray) => {\n  // TODO: bq should not have dups\n  let filteredRows = rows.map(row => {\n    row.instances = _.uniqBy(row.instances, (x)=>x.url)\n    return row\n  });\n\n  if(!_.isEmpty(seriesuidArray)){\n    filteredRows = filteredRows.filter(row=>{\n      return seriesuidArray.includes(row.SeriesInstanceUID);\n    })\n  }\n\n  const rowsByStudy = Object.values(\n    filteredRows.reduce((rowsByStudy, row) => {\n      const studyuid = row['StudyInstanceUID'];\n      if (!rowsByStudy[studyuid]) rowsByStudy[studyuid] = [];\n      rowsByStudy[studyuid].push(row);\n      return rowsByStudy;\n    }, {})\n  );\n\n  const studies = rowsByStudy.map(rows => {\n    const studyNumInstances = rows.reduce((acc, row) => {\n      return acc + (parseInt(row['NumInstances']) || 0);\n    }, 0);\n\n    const series = rows.map(row => {\n      return {\n        SeriesInstanceUID: row['SeriesInstanceUID'],\n        Modality: row['Modality'],\n        SeriesDescription: row['SeriesDescription'] || 'No description',\n        StudyInstanceUID: row['StudyInstanceUID'],\n        SeriesNumber: row['SeriesNumber'],\n        SeriesTime: row['SeriesTime'],\n        NumInstances: isNaN(parseInt(row['NumInstances']))\n          ? 0\n          : parseInt(row['NumInstances']),\n        instances: row['instances'].map(instance => {\n          return {\n            metadata: instance.metadata,\n            url: getInstanceUrl(instance.url, prefix),\n          };\n        }),\n      };\n    });\n\n    return {\n      StudyInstanceUID: rows[0]['StudyInstanceUID'],\n      PatientName: rows[0]['PatientName'],\n      PatientSex: rows[0]['PatientSex'],\n      AccessionNumber: rows[0]['AccessionNumber'],\n      StudyDate: rows[0]['StudyDate'],\n      PatientID: rows[0]['PatientID'],\n      PatientWeight: rows[0]['PatientWeight'],\n      PatientAge: rows[0]['PatientAge'],\n      StudyDescription: rows[0]['StudyDescription'] || 'No description',\n      StudyTime: rows[0]['StudyTime'],\n      NumInstances: studyNumInstances,\n      Modalities: `[\"${rows[0]['Modality']}\"]`,\n      series: series,\n    };\n  });\n  return {\n    studies: studies,\n  };\n};\n\nconst getBigQueryRows = async (studyuids, seriesuid, access_token) => {\n  const projectId = 'gradient-health-search';\n  const query = `\n    SELECT TO_JSON_STRING(t) FROM (\n      SELECT\n        StudyInstanceUID,\n        SeriesInstanceUID,\n        PatientID,\n        StudyID,\n        Modality,\n        PatientName,\n        PatientSex,\n        AccessionNumber,\n        StudyDate,\n        PatientWeight,\n        PatientAge,\n        ParsedPatientAge,\n        StudyDescription,\n        StudyTime,\n        NumInstances,\n        SeriesDescription,\n        SeriesNumber\n        SeriesTime,\n        instances\n      FROM \\`gradient-health-search.radiology.all-viewer-links\\`\n      WHERE StudyInstanceUID IN (${studyuids.map(s => `'${s}'`).join(', ')})\n      ${seriesuid ? `AND SeriesInstanceUID = '${seriesuid}'` : ''}\n    ) as t\n  `;\n  const response = await fetch(\n    `https://bigquery.googleapis.com/bigquery/v2/projects/${projectId}/queries`,\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        query: query,\n        useLegacySql: false,\n        location: 'us-central1',\n        defaultDataset: {\n          datasetId: 'radiology',\n          projectId: 'gradient-health-search',\n        },\n      }),\n      headers: {\n        Authorization: 'Bearer ' + access_token,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  const data = await response.json();\n  if (data) {\n    return data?.rows.map(row => JSON.parse(row?.f?.[0]?.v));\n  } else {\n    return undefined;\n  }\n};\n\nconst filesFromStudyInstanceUID = async ({bucketName, prefix, studyuids, headers})=>{\n  const studyMetadata = studyuids.map(async (studyuid) => {\n    const folderPath = `${prefix}/studies/${studyuid}/series/`;\n    const delimiter = '/'\n    const apiUrl = `https://storage.googleapis.com/storage/v1/b/${bucketName}/o?prefix=${folderPath}&delimiter=${delimiter}`;\n    const response = await fetch(apiUrl, { headers });\n    const res = await response.json()\n    const files = res.items || [];\n    const folders = res.prefixes || [];\n    const series = folders.map(async (folderPath)=>{\n      const objectName = `${folderPath}metadata`;\n      const apiUrl = `https://storage.googleapis.com/storage/v1/b/${bucketName}/o/${encodeURIComponent(objectName)}?alt=media`;\n      const response = await fetch(apiUrl, { headers });\n      return response.json()\n    })\n    return Promise.all(series)\n  });\n  return await Promise.all(studyMetadata)\n}\n\nconst findStudies = (key, value) => {\n  let studies = [];\n  _store.urls.map(metaData => {\n    metaData.studies.map(aStudy => {\n      if (aStudy[key] === value) {\n        studies.push(aStudy);\n      }\n    });\n  });\n  return studies;\n};\n\nconst mapSegSeriesFromDataSet = (dataSet) => {\n  return {\n    Modality: dataSet.Modality,\n    SeriesInstanceUID: dataSet.SeriesInstanceUID,\n    SeriesDescription: dataSet.SeriesDescription,\n    SeriesNumber: Number(dataSet.SeriesNumber),\n    SeriesDate: dataSet.SeriesDate,\n    StudyInstanceUID: dataSet.StudyInstanceUID,\n    instances: [\n      {\n        metadata: {\n          FrameOfReferenceUID: dataSet.FrameOfReferenceUID,\n          SOPInstanceUID: dataSet.SOPInstanceUID,\n          SOPClassUID: dataSet.SOPClassUID,\n          ReferencedSeriesSequence: dataSet.ReferencedSeriesSequence,\n          SharedFunctionalGroupsSequence: dataSet.SharedFunctionalGroupsSequence,\n        },\n        url: dataSet.url,\n      }\n    ],\n  };\n};\n\nconst storeDicomSeg = async (naturalizedReport, headers, displaySetService) => {\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n  } = naturalizedReport;\n\n  const params = new URLSearchParams(window.location.search);\n  const buckets = params.getAll('bucket');\n  const bucket =\n    buckets[1] || buckets[0] || 'gradient-health-search-viewer-links';\n  const prefix = params.get('bucket-prefix') || 'dicomweb';\n  let segBucket = params.get('seg-bucket') || bucket\n  const segPrefix = params.get('seg-prefix') || prefix\n  const filteredDescription = SeriesDescription.replace(/[/]/g, '');\n\n  let fileName = `${segPrefix}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}/${encodeURIComponent(\n    filteredDescription\n  )}.dcm`;\n\n  const segDisplaySet = displaySetService.getDisplaySetsBy(\n    (ds) =>\n      ds.SeriesInstanceUID === SeriesInstanceUID &&\n      ds.instance.SOPInstanceUID === SOPInstanceUID\n  )[0];\n  if (segDisplaySet) {\n    const url = segDisplaySet.instance.url;\n    segBucket = url.split('https://storage.googleapis.com/')[1].split('/')[0];\n    fileName = url.split(`https://storage.googleapis.com/${segBucket}/`)[1];\n  }\n\n  const segUploadUri = `https://storage.googleapis.com/upload/storage/v1/b/${segBucket}/o?uploadType=media&name=${fileName}&contentEncoding=gzip`;\n  const blob = datasetToBlob(naturalizedReport);\n  const compressedFile = pako.gzip(await blob.arrayBuffer());\n\n  await fetch(segUploadUri, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/dicom',\n    },\n    body: compressedFile,\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      if (data.error) {\n        throw new Error(\n          `${data.error.code}: ${data.error.message}`\n        );\n      }\n\n      const segUri = `dicomweb:https://storage.googleapis.com/${segBucket}/${data.name}`;\n      // We are storing the imageId so that when naturalizedReport is made to displayset we can get url to DicomSeg file.\n      naturalizedReport.url = segUri\n      const segSeries = mapSegSeriesFromDataSet(naturalizedReport);\n      const compressedFile = pako.gzip(JSON.stringify(segSeries));\n\n      return fetch(\n        `https://storage.googleapis.com/upload/storage/v1/b/${segBucket}/o?uploadType=media&name=${segPrefix}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/metadata&contentEncoding=gzip`,\n        {\n          method: 'POST',\n          headers: {\n            ...headers,\n            'Content-Type': 'application/json',\n          },\n          body: compressedFile,\n        }\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.error) {\n            throw new Error(\n              `${data.error.code}: ${data.error.message}`\n            );\n          }\n        })\n        .catch((error) => {\n          throw new Error(error.message || 'Failed to store DicomSeg metadata')\n        })\n    })\n    .catch((error) => {\n      throw new Error(error.message || 'Failed to store DicomSeg file')\n    })\n};\n\nlet _dicomJsonConfig = null;\n\nfunction createDicomJSONApi(dicomJsonConfig, servicesManager) {\n  var { name, wadoRoot } = dicomJsonConfig;\n  const init = config => {\n    _dicomJsonConfig = config;\n    name = _dicomJsonConfig.name;\n    wadoRoot = _dicomJsonConfig.wadoRoot;\n  };\n\n  init(dicomJsonConfig);\n\n  const implementation = {\n    updateConfig: (dicomWebConfig) => {\n      init(dicomWebConfig);\n    },\n    initialize: async ({ params, query, url }) => {\n      if (!url) url = query.get('url');\n      if (!url) {\n        url = query.toString();\n        query.set('url', url);\n      }\n      let metaData = getMetaDataByURL(url);\n\n      // if we have already cached the data from this specific url\n      // We are only handling one StudyInstanceUID to run; however,\n      // all studies for patientID will be put in the correct tab\n      if (metaData) {\n        return metaData.studies.map(aStudy => {\n          return aStudy.StudyInstanceUID;\n        });\n      }\n\n      const buckets = query.getAll('bucket');\n      if (buckets.length === 0)\n        buckets.push('gradient-health-search-viewer-links');\n\n      const { UserAuthenticationService } = servicesManager.services;\n\n      const studyMetadata = [];\n      for (let i = 0; i < buckets.length; i++) {\n        const metadataPerBucket = await filesFromStudyInstanceUID({\n          bucketName: buckets[i],\n          prefix: query.get('bucket-prefix') || 'dicomweb',\n          studyuids: query.getAll('StudyInstanceUID'),\n          headers: UserAuthenticationService.getAuthorizationHeader(),\n        });\n\n        studyMetadata.push(...metadataPerBucket);\n      }\n\n      const data = getMetadataFromRows(\n        _.flatten(studyMetadata),\n        query.get('prefix'),\n        query.getAll('SeriesInstanceUID')\n      );\n\n      let StudyInstanceUID;\n      let SeriesInstanceUID;\n      data.studies.forEach(study => {\n        StudyInstanceUID = study.StudyInstanceUID;\n\n        study.series.forEach(series => {\n          SeriesInstanceUID = series.SeriesInstanceUID;\n\n          series.instances.forEach(instance => {\n            const { url: imageId, metadata: naturalizedDicom } = instance;\n\n            // Add imageId specific mapping to this data as the URL isn't necessarliy WADO-URI.\n            metadataProvider.addImageIdToUIDs(imageId, {\n              StudyInstanceUID,\n              SeriesInstanceUID,\n              SOPInstanceUID: naturalizedDicom.SOPInstanceUID,\n            });\n          });\n        });\n      });\n\n      _store.urls.push({\n        url,\n        studies: [...data.studies],\n      });\n\n      _store.studyInstanceUIDMap.set(\n        url,\n        data.studies.map(study => study.StudyInstanceUID)\n      );\n    },\n    query: {\n      studies: {\n        mapParams: () => { },\n        search: async param => {\n          const [key, value] = Object.entries(param)[0];\n          const mappedParam = mappings[key];\n\n          // todo: should fetch from dicomMetadataStore\n          const studies = findStudies(mappedParam, value);\n\n          return studies.map(aStudy => {\n            return {\n              accession: aStudy.AccessionNumber,\n              date: aStudy.StudyDate,\n              description: aStudy.StudyDescription,\n              instances: aStudy.NumInstances,\n              modalities: aStudy.Modalities,\n              mrn: aStudy.PatientID,\n              patientName: aStudy.PatientName,\n              studyInstanceUid: aStudy.StudyInstanceUID,\n              NumInstances: aStudy.NumInstances,\n              time: aStudy.StudyTime,\n            };\n          });\n        },\n        processResults: () => {\n          console.debug(' DICOMJson QUERY processResults');\n        },\n      },\n      series: {\n        // mapParams: mapParams.bind(),\n        search: () => {\n          console.debug(' DICOMJson QUERY SERIES SEARCH');\n        },\n      },\n      instances: {\n        search: () => {\n          console.debug(' DICOMJson QUERY instances SEARCH');\n        },\n      },\n    },\n    retrieve: {\n      directURL: params => {\n        console.debug('Not implemented', params)\n      },\n      series: {\n        metadata: async ({\n          StudyInstanceUID,\n          buckets = [],\n          madeInClient = false,\n          customSort,\n        } = {}) => {\n          if (!StudyInstanceUID) {\n            throw new Error(\n              'Unable to query for SeriesMetadata without StudyInstanceUID'\n            );\n          }\n\n          let study = findStudies('StudyInstanceUID', StudyInstanceUID)[0];\n\n          if (!study) {\n            // If the study is not found, initialize the study.\n            // If there is no buckets in the url default bucket will be used.\n            const params = new URLSearchParams(window.location.search);\n            params.set('StudyInstanceUID', StudyInstanceUID);\n            params.delete('bucket');\n            buckets.forEach((bucket) => {\n              params.append('bucket', bucket);\n            });\n            await implementation.initialize({ query: params });\n\n            study = findStudies('StudyInstanceUID', StudyInstanceUID)[0];\n          }\n\n          let series;\n\n          if (customSort) {\n            series = customSort(study.series);\n          } else {\n            series = study.series;\n          }\n\n          const seriesSummaryMetadata = series.map(series => {\n            const seriesSummary = {\n              StudyInstanceUID: study.StudyInstanceUID,\n              ...series,\n            };\n            delete seriesSummary.instances;\n            return seriesSummary;\n          });\n\n          // Async load series, store as retrieved\n          function storeInstances(naturalizedInstances) {\n            DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\n          }\n\n          DicomMetadataStore.addSeriesMetadata(\n            seriesSummaryMetadata,\n            madeInClient\n          );\n\n          function setSuccessFlag() {\n            const study = DicomMetadataStore.getStudy(\n              StudyInstanceUID,\n              madeInClient\n            );\n            study.isLoaded = true;\n          }\n\n          const numberOfSeries = series.length;\n          series.forEach((series, index) => {\n            const instances = series.instances.map(instance => {\n              const obj = {\n                ...instance.metadata,\n                url: instance.url,\n                imageId: instance.url,\n                ...series,\n                ...study,\n              };\n              delete obj.instances;\n              delete obj.series;\n              return obj;\n            });\n            storeInstances(instances);\n            if (index === numberOfSeries - 1) setSuccessFlag();\n          });\n        },\n      },\n    },\n    store: {\n      dicom: async (dataset) => {\n        if (dataset.Modality === 'SEG') {\n          const headers = servicesManager.services.UserAuthenticationService.getAuthorizationHeader()\n          try {\n            await storeDicomSeg(\n              dataset,\n              headers,\n              servicesManager.services.displaySetService\n            );\n          } catch (error) {\n            throw error\n          }\n        } else {\n          console.debug(' DICOMJson store dicom');\n        }\n      },\n    },\n    getImageIdsForDisplaySet(displaySet) {\n      const images = displaySet.images;\n      const imageIds = [];\n\n      if (!images) {\n        return imageIds;\n      }\n\n      displaySet.images.forEach(instance => {\n        const NumberOfFrames = instance.NumberOfFrames;\n\n        if (NumberOfFrames > 1) {\n          for (let i = 0; i < NumberOfFrames; i++) {\n            const imageId = getImageId({\n              instance,\n              frame: i,\n              config: _dicomJsonConfig,\n            });\n            imageIds.push(imageId);\n          }\n        } else {\n          const imageId = getImageId({ instance, config: _dicomJsonConfig });\n          imageIds.push(imageId);\n        }\n      });\n\n      return imageIds;\n    },\n    getImageIdsForInstance({ instance, frame }) {\n      const imageIds = getImageId({\n        instance,\n        frame,\n      });\n      return imageIds;\n    },\n\n    getStudyInstanceUIDs: ({ params, query }) => {\n      const url = query.get('url');\n      return _store.studyInstanceUIDMap.get(url);\n    },\n  };\n  return IWebApiDataSource.create(implementation);\n}\n\nexport { createDicomJSONApi };\n","// TODO: Pull in IWebClientApi from @ohif/core\n// TODO: Use constructor to create an instance of IWebClientApi\n// TODO: Use existing DICOMWeb configuration (previously, appConfig, to configure instance)\n\nimport { createDicomJSONApi } from './DicomJSONDataSource/index.js';\n\n/**\n *\n */\nfunction getDataSourcesModule({servicesManager}) {\n  return [\n    {\n      name: 'bq',\n      type: 'jsonApi',\n      createDataSource: dicomJsonConfig => {\n        return createDicomJSONApi(dicomJsonConfig, servicesManager);\n      },\n    },\n  ];\n}\n\nexport default getDataSourcesModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","const letters = [\n\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\",\n\t\"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\",\n\t\"W\", \"X\", \"Y\", \"Z\"\n]\nlet a = [...letters]\nletters.forEach((letter_1)=>{\n    letters.forEach((letter_2)=>{\n\t\ta.push(letter_1 + letter_2)\n\t})\n})\n\nexport const alphabet = [...a]\n\n// Return array of string values, or NULL if CSV string not well formed.\nexport function CSVtoArray(text) {\n    let p = '', row = [''], ret = [row], i = 0, r = 0, s = !0, l;\n    for (l of text) {\n        if ('\"' === l) {\n            if (s && l === p) row[i] += l;\n            s = !s;\n        } else if (',' === l && s) l = row[++i] = '';\n        else if ('\\n' === l && s) {\n            if ('\\r' === p) row[i] = row[i].slice(0, -1);\n            row = ret[++r] = [l = '']; i = 0;\n        } else row[i] += l;\n        p = l;\n    }\n    return ret;\n};\n\n","import { eventTarget, Enums, cache } from '@cornerstonejs/core';\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\nimport { DicomMetadataStore, pubSubServiceInterface } from '@ohif/core';\nimport { alphabet } from './utils';\n\nconst MAX_ROWS = 100000;\n\nconst EVENTS = {\n  GOOGLE_SHEETS_CHANGE: 'event::gradienthealth::GoogleSheets:FormChange',\n  GOOGLE_SHEETS_ERROR: 'event::gradienthealth::GoogleSheets:Error',\n  GOOGLE_SHEETS_DESTROY: 'event::gradienthealth::GoogleSheets:Destroy',\n};\n\nconst convertFormValues = (v) => {\n  switch (v) {\n    case 'TRUE':\n      return true;\n    case 'FALSE':\n      return false;\n    case 'YES':\n      return true;\n    case 'NO':\n      return false;\n    case '':\n      return null;\n    case undefined:\n      return null;\n  }\n  return v;\n};\n\nexport default class GoogleSheetsService {\n  constructor(serviceManager, commandsManager, extensionManager) {\n    this.serviceManager = serviceManager;\n    this.listeners = {};\n    this.api_key = 'AIzaSyDu5Rt54oHX1w3O5kZTARz7DClaxNjTpEs'; // This is our API key\n    this.EVENTS = EVENTS;\n    this.sheetId = null;\n    this.index = null;\n    this.sheetName = null;\n    this.formTemplate = null;\n    this.formValue = null;\n    this.settings = null;\n    this.formHeader = null;\n    this.rows = null;\n    this.studyUIDToIndex = {};\n    this.extensionManager = extensionManager;\n    this.DicomMetadataStore = DicomMetadataStore;\n    Object.assign(this, pubSubServiceInterface);\n  }\n\n  cacheNearbyStudyInstanceUIDs(id, bufferBack, bufferFront) {\n    const { CacheAPIService } = this.serviceManager.services;\n    const index = this.studyUIDToIndex[id];\n    const min = index - bufferBack < 2 ? 2 : index - bufferBack;\n    const max = index + bufferFront;\n    const urlIndex = this.formHeader.findIndex((name) => name == 'URL');\n    const studyIdIndex = this.formHeader.findIndex((name) => name == 'ID');\n\n    const rowsToCache = this.rows.slice(min - 1, max);\n    const indexOfCurrentId = rowsToCache.findIndex(\n      (row) => row[studyIdIndex] === id\n    );\n    const element = rowsToCache.splice(indexOfCurrentId, 1);\n    rowsToCache.unshift(element[0]); // making the current studyid as first element\n\n    rowsToCache.reduce((promise, row) => {\n      return promise.then(() => {\n        const url = row[urlIndex];\n        const params = new URLSearchParams('?' + url.split('?')[1]);\n        const StudyInstanceUID = getStudyInstanceUIDFromParams(params);\n        return CacheAPIService.cacheStudy(\n          StudyInstanceUID,\n          params.getAll('bucket')\n        );\n      });\n    }, Promise.resolve());\n  }\n\n  setFormByStudyInstanceUID(id) {\n    const index = this.studyUIDToIndex[id];\n    this.setFormByIndex(index);\n    this.cacheNearbyStudyInstanceUIDs(id, 2, 32);\n  }\n\n  setFormByIndex(index) {\n    this.index = index;\n    const rowValues = this.rows[index - 1]; // google sheets is 1-indexed\n    this.formValue = this.readFormValue(rowValues);\n    this._broadcastEvent(EVENTS.GOOGLE_SHEETS_CHANGE);\n  }\n\n  async init() {\n    try {\n      const { UserAuthenticationService } = this.serviceManager.services;\n      this.user = UserAuthenticationService.getUser();\n      const params = new URLSearchParams(window.location.search);\n\n      if (window.location.pathname.startsWith('/segmentation')) {\n        // Since sheet panel only used by segmentation and breast density mode,\n        // and breast density mode does not handles segmentation we are only loading\n        // segmentations in segmentation mode.\n        eventTarget.addEventListener(\n          Enums.Events.STACK_VIEWPORT_NEW_STACK,\n          () => loadSegFiles(this.serviceManager)\n        );\n      }\n\n      if (!params.get('sheetId'))\n        return this._broadcastEvent(EVENTS.GOOGLE_SHEETS_ERROR);\n      if (!params.get('sheetName'))\n        return this._broadcastEvent(EVENTS.GOOGLE_SHEETS_ERROR);\n      this.sheetId = params.get('sheetId');\n      this.sheetName = params.get('sheetName');\n\n      // Get settings config from sheets\n      this.settings = await this.readRange(1, 6, this.sheetId, 'Settings');\n\n      // Get values for current row from sheets\n      this.formHeader = (await this.readRange(1, 1)).values[0];\n\n      // TODO: Handle more than MAX_ROWS\n      this.rows = (await this.readRange(1, MAX_ROWS)).values;\n      this.formHeader = this.rows[0];\n\n      const urlIndex = this.formHeader.findIndex((name) => name == 'URL');\n      this.studyUIDToIndex = this.rows.slice(1).reduce((prev, curr, idx) => {\n        const url = curr[urlIndex];\n        const params = new URLSearchParams('?' + url.split('?')[1]);\n        const StudyInstanceUID = getStudyInstanceUIDFromParams(params);\n\n        // Google Sheets is 1-indexed and we ignore first row as header row thus + 2\n        prev[StudyInstanceUID] = idx + 2;\n        return prev;\n      }, {});\n\n      this.index = this.studyUIDToIndex[getStudyInstanceUIDFromParams(params)];\n\n      // Map formTemplate and formValue\n      const values = this.settings.values[0].map((_, colIndex) =>\n        this.settings.values.map((row) => row[colIndex])\n      );\n      const header = values[0];\n      this.formTemplate = values\n        .slice(1, -1)\n        .map((col) => {\n          return col.reduce((obj, curr, idx) => {\n            curr = convertFormValues(curr);\n\n            switch (header[idx]) {\n              case 'template':\n                try {\n                  if (curr) obj[header[idx]] = JSON.parse(curr);\n                } catch (e) {\n                  console.warn(curr, e);\n                }\n                break;\n              case 'order':\n                obj[header[idx]] = Number(curr);\n                break;\n              default:\n                obj[header[idx]] = curr;\n            }\n            return obj;\n          }, {});\n        })\n        .filter((ele) => {\n          return ele.show;\n        })\n        .sort((a, b) => a.order - b.order);\n\n      this.setFormByStudyInstanceUID(getStudyInstanceUIDFromParams(params));\n    } catch (e) {\n      console.error(e);\n      this._broadcastEvent(EVENTS.GOOGLE_SHEETS_ERROR);\n    }\n  }\n\n  readFormValue(x) {\n    return this.formTemplate.map((ele) => {\n      const index = this.formHeader.findIndex((name) => name == ele.name);\n      if (index !== -1) {\n        return convertFormValues(x[index]);\n      }\n    });\n  }\n\n  async readRange(\n    min,\n    max,\n    sheetId = this.sheetId,\n    sheetName = this.sheetName\n  ) {\n    const range = `A${min}:ZZ${max}`;\n    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetName}!${range}`;\n    const response = await fetch(baseUrl, {\n      headers: {\n        Authorization: 'Bearer ' + this.user['access_token'],\n      },\n    });\n    const responseJson = await response.json();\n    return responseJson;\n  }\n\n  // Must be XHR to avoid sheets CORS issue\n  writeRange(sheetId, sheetName, range, values) {\n    return new Promise((resolve, reject) => {\n      let baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetName}!${range}?valueInputOption=USER_ENTERED`;\n      var xhr = new XMLHttpRequest();\n      xhr.open('PUT', baseUrl);\n      xhr.setRequestHeader('Content-type', 'application/json');\n      xhr.setRequestHeader(\n        'Authorization',\n        'Bearer ' + this.user['access_token']\n      );\n      xhr.onload = () => {\n        if (xhr.status == 200) {\n          resolve();\n        } else {\n          reject();\n        }\n      };\n      xhr.send(\n        JSON.stringify({\n          range: `${sheetName}!${range}`,\n          majorDimension: 'ROWS',\n          values: [values],\n        })\n      );\n    });\n  }\n\n  async updateRow(formValue) {\n    const values = this.formHeader.map((colName) => {\n      const index = this.formTemplate.findIndex((ele) => {\n        return colName == ele.name;\n      });\n      if (index > 0) {\n        return formValue[index];\n      }\n\n      if (colName === 'Updated By') {\n        const user =\n          this.serviceManager.services.UserAuthenticationService.getUser();\n        return JSON.stringify({\n          email: user.profile.email,\n          picture: user.profile.picture,\n          lastUpdated: Date.now(),\n        });\n      }\n      return null;\n    });\n\n    // google sheets is 1-indexed, so take rows[index-1]\n    const updatedFormValue = this.rows[this.index - 1].map((element, index) =>\n      values[index] !== null ? values[index] : element\n    );\n\n    this.rows[this.index - 1] = updatedFormValue;\n    this.formValue = formValue\n\n    await this.writeRange(\n      this.sheetId,\n      this.sheetName,\n      `A${this.index}:${alphabet[this.formHeader.length - 1]}${this.index}`,\n      values\n    );\n    return values;\n  }\n\n  getFormTemplate() {\n    return this.formTemplate ? this.formTemplate : null;\n  }\n\n  getFormValue() {\n    return this.formValue ? this.formValue : null;\n  }\n\n  async getRow(delta) {\n    try {\n      const {\n        DisplaySetService,\n        HangingProtocolService,\n        CacheAPIService,\n        SegmentationService,\n      } = this.serviceManager.services;\n      const rowValues = this.rows[this.index + delta - 1];\n      if (!rowValues) {\n        window.location.href = `https://docs.google.com/spreadsheets/d/${this.sheetId}`;\n      }\n      const index = this.formHeader.findIndex((name) => name == 'URL');\n      const url = rowValues[index];\n      const params = new URLSearchParams('?' + url.split('?')[1]);\n      const StudyInstanceUID = getStudyInstanceUIDFromParams(params);\n      const buckets = params.getAll('bucket');\n      if (!StudyInstanceUID) {\n        window.location.href = `https://docs.google.com/spreadsheets/d/${this.sheetId}`;\n      }\n      const dataSource = this.extensionManager.getActiveDataSource()[0];\n      await dataSource.retrieve.series.metadata({ StudyInstanceUID, buckets });\n      const studies = [DicomMetadataStore.getStudy(StudyInstanceUID)];\n      const activeProtocolId =\n        HangingProtocolService.getActiveProtocol().protocol.id;\n      HangingProtocolService.reset();\n      HangingProtocolService.run(\n        {\n          studies,\n          activeStudy: studies[0],\n          displaySets: DisplaySetService.getActiveDisplaySets().filter(\n            (ele) => {\n              return ele.StudyInstanceUID === StudyInstanceUID;\n            }\n          ),\n        },\n        activeProtocolId\n      );\n      const segmentations = SegmentationService.getSegmentations();\n      segmentations.forEach((segmentation) =>\n        SegmentationService.remove(segmentation.id)\n      );\n\n      const nextParams = new URLSearchParams(window.location.search);\n      if (nextParams.get('StudyInstanceUIDs'))\n        nextParams.set('StudyInstanceUIDs', StudyInstanceUID);\n      else {\n        nextParams.set('StudyInstanceUID', StudyInstanceUID);\n      }\n      nextParams.delete('bucket');\n      buckets.forEach((bucket) => {\n        nextParams.append('bucket', bucket);\n      });\n\n      const nextURL =\n        window.location.href.split('?')[0] + '?' + nextParams.toString();\n      window.history.replaceState({}, null, nextURL);\n      this.setFormByStudyInstanceUID(StudyInstanceUID);\n      CacheAPIService.setViewedStudy(StudyInstanceUID);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  destroy() {\n    this.sheetId = null;\n    this.index = null;\n    this.sheetName = null;\n    this.formTemplate = null;\n    this.formValue = null;\n    this._broadcastEvent(EVENTS.GOOGLE_SHEETS_ERROR);\n  }\n}\n\nfunction loadSegFiles(serviceManager) {\n  const params = new URLSearchParams(window.location.search);\n  const studyInstanceUID = getStudyInstanceUIDFromParams(params);\n\n  const segSOPClassUIDs = ['1.2.840.10008.5.1.4.1.1.66.4'];\n  const {\n    segmentationService,\n    displaySetService,\n    UserAuthenticationService,\n    CacheAPIService,\n    viewportGridService\n  } = serviceManager.services;\n  const headers = UserAuthenticationService.getAuthorizationHeader();\n\n  const activeStudySegDisplaySets = displaySetService.getDisplaySetsBy(\n    (ds) =>\n      ds.StudyInstanceUID === studyInstanceUID &&\n      segSOPClassUIDs.includes(ds.SOPClassUID)\n  );\n  const nonSegImageIds = displaySetService\n    .getDisplaySetsBy(\n      (ds) =>\n        ds.StudyInstanceUID === studyInstanceUID &&\n        !segSOPClassUIDs.includes(ds.SOPClassUID)\n    )\n    .flatMap((ds) => ds.images.flatMap((image) => image.imageId));\n\n  const isAllSegmentationsLoaded = isAllSegmentationsOfSeriesLoaded(\n    activeStudySegDisplaySets,\n    serviceManager\n  );\n\n  if (isAllSegmentationsLoaded) {\n    const renderedToolGroupIds = [];\n\n    activeStudySegDisplaySets.forEach((ds) => {\n      const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(\n        ds.displaySetInstanceUID\n      );\n      toolGroupIds.forEach((toolGroupId) => {\n        if (renderedToolGroupIds.includes(toolGroupId)) {\n          return;\n        }\n\n        csToolsUtils.segmentation.triggerSegmentationRender(toolGroupId);\n        renderedToolGroupIds.push(toolGroupId);\n      });\n    });\n\n    return;\n  }\n\n  const isAllSeriesOfStudyCached = () => {\n    return nonSegImageIds.every((imageId) => cache.getImageLoadObject(imageId));\n  };\n\n  let unsubscribe;\n\n  const loadSegmentations = async () => {\n    if (isAllSeriesOfStudyCached()) {\n      const loadPromises = activeStudySegDisplaySets.map(async (displaySet) => {\n        displaySet.getReferenceDisplaySet();\n        return displaySet.load({ headers });\n      });\n\n      await Promise.all(loadPromises);\n\n      const addRepresentationPromises = activeStudySegDisplaySets.map(\n        async (displaySet) =>\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            'default',\n            displaySet.displaySetInstanceUID,\n            true\n          )\n      );\n\n      Promise.all(addRepresentationPromises).then(() => {\n        const { viewports, activeViewportId } = viewportGridService.getState();\n        const activeViewport = viewports.get(activeViewportId);\n        const segmentationsOfLoadedImage = displaySetService.getDisplaySetsBy(\n          (ds) =>\n            ds.referencedDisplaySetInstanceUID ===\n            activeViewport.displaySetInstanceUIDs[0]\n        );\n\n        // we are setting first segmentation of the image in the active viewport as active.\n        segmentationService.setActiveSegmentationForToolGroup(\n          segmentationsOfLoadedImage[0].displaySetInstanceUID\n        );\n      });\n      \n      unsubscribe?.();\n    }\n  };\n\n  if (isAllSeriesOfStudyCached()) {\n    loadSegmentations();\n  } else {\n    ({ unsubscribe } = CacheAPIService.subscribe(\n      CacheAPIService.EVENTS.IMAGE_CACHE_PREFETCHED,\n      loadSegmentations\n    ));\n  }\n}\n\nfunction isAllSegmentationsOfSeriesLoaded(\n  activeStudySegDisplaySets,\n  servicesManager\n) {\n  const { segmentationService } = servicesManager.services;\n\n  return activeStudySegDisplaySets.every((ds) =>\n    segmentationService.getSegmentation(ds.displaySetInstanceUID)\n  );\n}\n\nfunction getStudyInstanceUIDFromParams(params) {\n  // Breast OHIF dicomweb datasource uses StudyInstanceUIDs, but bq datasource uses StudyInstanceUID\n  return params.get('StudyInstanceUIDs') || params.get('StudyInstanceUID');\n}\n","export const getSegDisplaysetsOfReferencedImagesIds = (\n  imageIds: string[] = [],\n  displaySetService: any\n) => {\n  const loadedDisplaySet = displaySetService.getDisplaySetsBy((ds) =>\n    ds.images?.find((image) => imageIds.includes(image.imageId))\n  )?.[0];\n\n  const referencedSeriesInstanceUID = loadedDisplaySet.SeriesInstanceUID;\n  return displaySetService.getDisplaySetsBy(\n    (ds) => ds.referencedSeriesInstanceUID === referencedSeriesInstanceUID\n  );\n};\n","import { pubSubServiceInterface } from '@ohif/core';\nimport { \n    EVENTS as CS_EVENTS,\n    eventTarget as CornerstoneEventTarget,\n    getEnabledElement,\n    cache,\n    Enums as CSCORE_ENUMS\n} from '@cornerstonejs/core';\nimport { Enums as CSTOOLS_ENUMS } from '@cornerstonejs/tools';\n\nimport * as tf from '@tensorflow/tfjs';\nimport {\n  IStackViewport,\n  IVolumeViewport,\n} from '@cornerstonejs/core/dist/esm/types';\nimport { getSegDisplaysetsOfReferencedImagesIds } from '../utils';\n\nconst EVENTS = {\n    CROP_DISPLAY_AREA_INIT: 'event::gradienthealth::CropDisplayAreaService:init',\n};\n\nexport default class CropDisplayAreaService {\n    private serviceManager;\n    private listeners;\n    public EVENTS;\n\n    constructor(serviceManager) {\n        this.serviceManager = serviceManager;\n        this.listeners = {};\n        this.EVENTS = EVENTS;\n        window.tf = tf;\n        Object.assign(this, pubSubServiceInterface);\n    }\n\n    init(){\n      CornerstoneEventTarget.addEventListener(CS_EVENTS.STACK_VIEWPORT_NEW_STACK, (evt)=>{\n        const { HangingProtocolService } = this.serviceManager.services\n        if(HangingProtocolService.protocol.id === 'breast') this.handleBreastDensityHP(evt)\n      })\n    }\n\n    private handleBreastDensityHP(evt){\n      const { HangingProtocolService, cornerstoneViewportService } =\n        this.serviceManager.services;\n      const { element, viewportId } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const viewport = enabledElement?.viewport;\n      if (!viewport) return;\n\n      const { voiRange, invert } = (viewport as IStackViewport).getProperties();\n      let cutoff;\n      if (voiRange?.lower && !invert) {\n        cutoff = voiRange?.lower;\n      }\n      if (voiRange?.upper && invert) {\n        cutoff = voiRange?.upper;\n      }\n      if (!cutoff) {\n        return;\n      }\n\n      const viewportInfo =\n        cornerstoneViewportService.getViewportInfo(viewportId);\n      const matchedDisplaySets = Array.from(\n        HangingProtocolService.displaySetMatchDetails.values()\n      );\n      const matchedDisplaySetIndex = matchedDisplaySets.findIndex(\n        (displayset) =>\n          displayset.displaySetInstanceUID ===\n          viewportInfo.viewportData.data.displaySetInstanceUID\n      );\n\n      const matchedDisplaySetKeys = Array.from(\n        HangingProtocolService.displaySetMatchDetails.keys()\n      );\n      const matchedDisplaySet = matchedDisplaySetKeys[matchedDisplaySetIndex];\n      if (!matchedDisplaySet) return;\n\n      const imageData = viewport.getImageData();\n      const scalarData = imageData?.scalarData;\n      const dimensions = imageData?.dimensions;\n      if (!scalarData || !dimensions) return;\n\n      // probably will need to account for\n      // imageData.direction\n      // interesting that dim[1], dim[0] are reversed for vtk.js => tf.js\n      // assume this direction does not change\n      const { bboxWidth, bboxHeight, width, height } = tf.tidy(() => {\n        const tensor = tf.tensor2d(new Float32Array(scalarData), [\n          dimensions[1],\n          dimensions[0],\n        ]);\n        const mask = tensor.greater(cutoff); // get boolean\n        const widthBool = mask.any(0); // height?\n        const heightBool = mask.any(1); // width?\n\n        // get bbox\n        const left = widthBool.argMax();\n        const right = widthBool.reverse().argMax().mul(-1).add(widthBool.size);\n        const top = heightBool.argMax();\n        const bottom = heightBool\n          .reverse()\n          .argMax()\n          .mul(-1)\n          .add(heightBool.size);\n\n        // get percentage difference in width and height\n        const bboxWidth = right.sub(left).dataSync()[0];\n        const bboxHeight = bottom.sub(top).dataSync()[0];\n        const width = widthBool.size;\n        const height = heightBool.size;\n\n        return {\n          bboxWidth,\n          bboxHeight,\n          width,\n          height,\n        };\n      });\n\n      const bboxAspectRatio = bboxWidth / bboxHeight;\n      const canvasAspectRatio = viewport.sWidth / viewport.sHeight;\n      // console.log({bboxAspectRatio, canvasAspectRatio})\n      // if(bboxAspectRatio > canvasAspectRatio){\n      //   bboxWidth = canvasAspectRatio*bboxHeight\n      //   bboxAspectRatio = bboxWidth/bboxHeight\n      //   console.log('changed', {bboxAspectRatio, canvasAspectRatio})\n      // }\n\n      const bboxWidthPercentage = bboxWidth / width; // add buffer\n      const bboxHeightPercentage = bboxHeight / height;\n\n      // TODO do not hard code, pick the max between bboxwidth and aspect ratio height\n      const areaZoom = bboxWidthPercentage;\n      //const panAmount = (1 - areaZoom) / 2;\n\n      if (matchedDisplaySet === 'LMLO') {\n        viewport.setDisplayArea(\n          {\n            imageArea: [areaZoom, areaZoom],\n            imageCanvasPoint: {\n              canvasPoint: [0, 0.5],\n              imagePoint: [0, 0.5],\n            },\n            storeAsInitialCamera: true,\n          },\n          true\n        );\n      }\n      if (matchedDisplaySet === 'RMLO') {\n        viewport.setDisplayArea(\n          {\n            imageArea: [areaZoom, areaZoom],\n            imageCanvasPoint: {\n              canvasPoint: [1, 0.5],\n              imagePoint: [1, 0.5],\n            },\n            storeAsInitialCamera: true,\n          },\n\n          true\n        );\n      }\n      if (matchedDisplaySet === 'LCC') {\n        viewport.setDisplayArea(\n          {\n            imageArea: [areaZoom, areaZoom],\n            imageCanvasPoint: {\n              canvasPoint: [0, 0.5],\n              imagePoint: [0, 0.5],\n            },\n            storeAsInitialCamera: true,\n          },\n          true\n        );\n      }\n      if (matchedDisplaySet === 'RCC') {\n        viewport.setDisplayArea(\n          {\n            imageArea: [areaZoom, areaZoom],\n            imageCanvasPoint: {\n              canvasPoint: [1, 0.5],\n              imagePoint: [1, 0.5],\n            },\n            storeAsInitialCamera: true,\n          },\n          true\n          );\n        }\n    }\n\n    destroy() {\n    }\n\n  public async focusToSegment(segmentationId, segmentIndex) {\n    const {\n      segmentationService,\n      viewportGridService,\n      cornerstoneViewportService,\n      displaySetService,\n    } = this.serviceManager.services;\n\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segDisplayset = displaySetService.getDisplaySetByUID(segmentation.displaySetInstanceUID);\n    if (segDisplayset.Modality !== 'SEG') {\n      return;\n    }\n\n    const imageIdReferenceMap =\n      segmentation?.representationData[segmentation.type].imageIdReferenceMap;\n\n    segmentIndex = segmentIndex || segmentation.activeSegmentIndex;\n\n    let dimensions, pixelData;\n\n    if (imageIdReferenceMap) {\n      const image = cache.getImage(imageIdReferenceMap.values().next().value);\n      const { rows, columns } = image;\n      dimensions = [columns, rows, imageIdReferenceMap.size];\n      pixelData = image.getPixelData();\n    } else {\n      const volume = cache.getVolume(segmentationId);\n      ({ dimensions } = volume);\n      pixelData = volume.scalarData;\n    }\n\n    const mask = tf.tidy(() => {\n      let tensor;\n      if (imageIdReferenceMap) {\n        tensor = tf.tensor2d(new Float32Array(pixelData), [\n          dimensions[1],\n          dimensions[0],\n        ]);\n      } else {\n        tensor = tf.tensor3d(new Float32Array(pixelData), [\n          dimensions[2],\n          dimensions[0],\n          dimensions[1],\n        ]);\n      }\n\n      return tensor.equal(segmentIndex); // get boolean\n    });\n\n    const maskCoordinates = await tf.whereAsync(mask);\n\n    const { xMax, yMax, xMin, yMin } = tf.tidy(() => {\n      const transpose = tf.einsum('ij->ji', maskCoordinates);\n      tf.dispose(mask);\n      tf.dispose(maskCoordinates);\n\n      let xMin = 0,\n        xMax = dimensions[0],\n        yMin = 0,\n        yMax = dimensions[1];\n\n      if (transpose.size !== 0) {\n        if (imageIdReferenceMap) {\n          xMin = transpose.gather(1).min().dataSync()[0];\n          xMax = transpose.gather(1).max().dataSync()[0];\n          yMin = transpose.gather(0).min().dataSync()[0];\n          yMax = transpose.gather(0).max().dataSync()[0];\n        } else {\n          xMin = transpose.gather(2).min().dataSync()[0];\n          xMax = transpose.gather(2).max().dataSync()[0];\n          yMin = transpose.gather(1).min().dataSync()[0];\n          yMax = transpose.gather(1).max().dataSync()[0];\n        }\n      }\n\n      return { xMax, yMax, xMin, yMin };\n    });\n\n    const referencedDisplaySetInstanceUID = segDisplayset.referencedDisplaySetInstanceUID;\n    const { viewports, activeViewportId } = viewportGridService.getState();\n    const viewportsWithSegmentation: IStackViewport | IVolumeViewport = [];\n    viewports.forEach((viewport) => {\n      if (viewport.displaySetInstanceUIDs.includes(referencedDisplaySetInstanceUID)) {\n        viewportsWithSegmentation.push(\n          cornerstoneViewportService.getCornerstoneViewport(viewport.viewportId)\n        );\n      }\n    });\n\n    let bboxWidth = xMax + 1 - xMin;\n    let bboxHeight = yMax + 1 - yMin;\n    let width = dimensions[0];\n    let height = dimensions[1];\n    const imageAspectRatio = width / height;\n\n    const imagePoint = [\n      (xMax + xMin) / (2 * width),\n      (yMax + yMin) / (2 * height),\n    ] as [number, number];\n    const zoomFactors = {\n      x: bboxWidth / width,\n      y: bboxHeight / height,\n    };\n\n    viewportsWithSegmentation.forEach((viewport) => {\n      const canvasAspectRatio = viewport.sWidth / viewport.sHeight;\n      const zoomFactorsCopy = { ...zoomFactors };\n      correctZoomFactors(zoomFactorsCopy, imageAspectRatio, canvasAspectRatio);\n\n      setDisplayArea(viewport, zoomFactorsCopy, imagePoint);\n    });\n\n    if (!viewportsWithSegmentation.length) {\n      const activeViewport =\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n\n      handleFocusingForNewStack(\n        activeViewport,\n        displaySetService,\n        zoomFactors,\n        imagePoint,\n        imageAspectRatio\n      );\n    }\n  }\n}\n\nconst setDisplayArea = (\n  viewport: IStackViewport | IVolumeViewport,\n  zoomFactors: { x: number; y: number },\n  imagePoint: [number, number]\n) => {\n  viewport.setDisplayArea({\n    imageArea: <[number, number]>[zoomFactors.x, zoomFactors.y],\n    imageCanvasPoint: { imagePoint, canvasPoint: <[number, number]>[0.5, 0.5] },\n  });\n  viewport.render();\n};\n\nconst handleFocusingForNewStack = (\n  viewport: IStackViewport | IVolumeViewport,\n  displaySetService: any,\n  zoomFactors: { x: number; y: number },\n  imagePoint: [number, number],\n  imageAspectRatio: number\n) => {\n  const canvasAspectRatio = viewport.sWidth / viewport.sHeight;\n\n  const eventElement =\n    viewport.type === CSCORE_ENUMS.ViewportType.STACK\n      ? CornerstoneEventTarget\n      : viewport.element;\n  const eventName =\n    viewport.type === CSCORE_ENUMS.ViewportType.STACK\n      ? CS_EVENTS.STACK_VIEWPORT_NEW_STACK\n      : CS_EVENTS.VOLUME_VIEWPORT_NEW_VOLUME;\n\n  const newImageListener = (evt) => {\n    const segDisplaySetsOfLoadedSeries = getSegDisplaysetsOfReferencedImagesIds(\n      evt.detail.imageIds,\n      displaySetService\n    );\n\n    let segmentationsRenderedCount = 0;\n    const segmentationRenderedListener = () => {\n      if (\n        ++segmentationsRenderedCount === segDisplaySetsOfLoadedSeries.length\n      ) {\n        correctZoomFactors(zoomFactors, imageAspectRatio, canvasAspectRatio);\n        setDisplayArea(viewport, zoomFactors, imagePoint);\n\n        CornerstoneEventTarget.removeEventListener(\n          CSTOOLS_ENUMS.Events.SEGMENTATION_RENDERED,\n          segmentationRenderedListener\n        );\n      }\n    };\n\n    CornerstoneEventTarget.addEventListener(\n      CSTOOLS_ENUMS.Events.SEGMENTATION_RENDERED,\n      segmentationRenderedListener\n    );\n\n    eventElement.removeEventListener(eventName, newImageListener);\n  };\n\n  eventElement.addEventListener(eventName, newImageListener);\n};\n\nconst correctZoomFactors = (\n  zoomFactors: { x: number; y: number },\n  imageAspectRatio: number,\n  canvasAspectRatio: number\n) => {\n  if (imageAspectRatio < canvasAspectRatio) {\n    zoomFactors.x /= canvasAspectRatio / imageAspectRatio;\n  }\n  if (imageAspectRatio > canvasAspectRatio) {\n    zoomFactors.y /= imageAspectRatio / canvasAspectRatio;\n  }\n\n  if (zoomFactors.x > 0.8 || zoomFactors.y > 0.8) {\n    return;\n  }\n\n  const zoomOutPercentatage = 80;\n\n  zoomFactors.x /= zoomOutPercentatage / 100;\n  zoomFactors.y /= zoomOutPercentatage / 100;\n};","import { DicomMetadataStore, pubSubServiceInterface } from '@ohif/core';\nimport { internal, wadouri } from '@cornerstonejs/dicom-image-loader';\nconst { getOptions } = internal;\nimport _ from 'lodash';\nimport {\n  eventTarget,\n  EVENTS,\n  Enums,\n  imageLoader,\n  imageLoadPoolManager,\n} from '@cornerstonejs/core';\n\nconst LOCAL_EVENTS = {\n  IMAGE_CACHE_PREFETCHED: 'event::gradienthealth::image_cache_prefetched',\n};\n\nexport default class CacheAPIService {\n  listeners: { [key: string]: Function[] };\n  EVENTS: { [key: string]: string };\n  element: HTMLElement;\n  private servicesManager;\n  private commandsManager;\n  private extensionManager;\n  private dataSource;\n  private options;\n  public storageUsage;\n  public storageQuota;\n  private imageIdToFileUriMap;\n\n  constructor(servicesManager, commandsManager, extensionManager) {\n    this.listeners = {};\n    this.EVENTS = LOCAL_EVENTS;\n    this.commandsManager = commandsManager;\n    this.extensionManager = extensionManager;\n    this.servicesManager = servicesManager;\n    this.storageUsage = null;\n    this.storageQuota = null;\n    this.imageIdToFileUriMap = new Map();\n    Object.assign(this, pubSubServiceInterface);\n  }\n\n  public init() {\n    // Need to add event listener if datasource changes\n    const dataSources = this.extensionManager.getActiveDataSource();\n    this.dataSource = dataSources[0];\n\n    eventTarget.addEventListener(\n      'CORNERSTONE_CACHE_QUOTA_EXCEEDED_ERROR',\n      this.handleQuotaExceededWriteError.bind(this)\n    );\n\n    if (window?.navigator?.storage?.estimate) {\n      window?.navigator?.storage?.estimate().then((estimate) => {\n        console.log(\n          'Storage use: ',\n          estimate.usage * 1e-9,\n          ' of ',\n          estimate.quota * 1e-9,\n          ' GB'\n        );\n        this.storageUsage = estimate.usage;\n        this.storageQuota = estimate.quota;\n      });\n    }\n\n    if (\n      window?.navigator?.storage?.persisted &&\n      window?.navigator?.storage?.persist\n    ) {\n      window?.navigator?.storage?.persisted().then((persistent) => {\n        if (!persistent) {\n          window?.navigator?.storage?.persist().then((persistent) => {\n            if (persistent) {\n              console.log(\n                'Storage will not be cleared except by explicit user action'\n              );\n            } else {\n              console.log(\n                'Storage may be cleared by the UA under storage pressure.'\n              );\n            }\n          });\n        } else {\n          console.log(\n            'Storage will not be cleared except by explicit user action'\n          );\n        }\n      });\n    }\n  }\n\n  public async setViewedStudy(StudyInstanceUID) {\n    await this.dataSource.retrieve.series.metadata({ StudyInstanceUID });\n    const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const imageIds = study.series.flatMap((serie) =>\n      serie.instances.flatMap((instance) => instance.imageId)\n    );\n    const urls = imageIds.map((imageId) =>\n      imageId.split(':').slice(1).join(':')\n    );\n    const options = getOptions();\n    const getScope = options.cache.getScope;\n    const scopes = _.uniq(urls.map((url) => getScope({ url })));\n    scopes.forEach(async (scope) => {\n      const cache = await caches.open(scope);\n      const keys = await cache.keys();\n      keys.forEach(async (key) => {\n        const res = await cache.match(key.url, {\n          ignoreVary: true,\n          ignoreMethod: true,\n          ignoreSearch: true,\n        });\n        if(!res) return\n        const req = new Request(key.url, {\n          headers: {\n            'dicom-last-put-date': new Date().toUTCString(),\n            'dicom-last-viewed-date': new Date().toUTCString(),\n            'dicom-content-length': key.headers.get('dicom-content-length')\n          },\n        });\n        if (res) {\n          cache.put(req, res);\n        }\n      });\n    });\n  }\n\n  public async cacheStudy(StudyInstanceUID, buckets = undefined) {\n    const segSOPClassUIDs = ['1.2.840.10008.5.1.4.1.1.66.4'];\n    await this.dataSource.retrieve.series.metadata({\n      StudyInstanceUID,\n      buckets,\n    });\n    const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const imageIds = study.series\n      .filter(\n        (serie) => !segSOPClassUIDs.includes(serie.instances[0].SOPClassUID)\n      )\n      .flatMap((serie) =>\n        serie.instances.flatMap((instance) => instance.imageId)\n      );\n    await Promise.all([\n      this.cacheImageIds(imageIds),\n      this.cacheSegFiles(StudyInstanceUID),\n    ]);\n  }\n\n  public async cacheSeries(StudyInstanceUID, SeriesInstanceUID) {\n    await this.dataSource.retrieve.series.metadata({ StudyInstanceUID });\n    const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const imageIds = study.series\n      .filter((serie) => serie.SeriesInstanceUID === SeriesInstanceUID)\n      .flatMap((serie) =>\n        serie.instances.flatMap((instance) => instance.imageId)\n      );\n    this.cacheImageIds(imageIds);\n  }\n\n  public async cacheImageIds(imageIds) {\n    const promises: any[] = [];\n    \n    function sendRequest(imageId, options) {\n      const promise = imageLoader.loadAndCacheImage(imageId, options);\n      promises.push(promise);\n\n      return promise.then(\n        (imageLoadObject) => {\n          this._broadcastEvent(this.EVENTS.IMAGE_CACHE_PREFETCHED, { imageLoadObject });\n        },\n        (error) => {\n          console.error(error);\n        }\n      );\n    }\n\n    const priority = 0;\n    const requestType = Enums.RequestType.Prefetch;\n    const options = {\n      preScale: {\n        enabled: true,\n      },\n      useRGBA: true,\n    };\n\n    imageIds.forEach((imageId) => {\n      const additionalDetails = { imageId };\n      imageLoadPoolManager.addRequest(\n        sendRequest.bind(this, imageId, options),\n        requestType,\n        additionalDetails,\n        priority\n      );\n    });\n\n    await Promise.all(promises)\n  }\n\n  public async cacheSegFiles(studyInstanceUID) {\n    const segSOPClassUIDs = ['1.2.840.10008.5.1.4.1.1.66.4'];\n    const { displaySetService, userAuthenticationService } =\n      this.servicesManager.services;\n\n    const study = DicomMetadataStore.getStudy(studyInstanceUID);\n    const headers = userAuthenticationService.getAuthorizationHeader();\n    const promises = study.series.map((serie) => {\n      const { SOPClassUID, SeriesInstanceUID, url } = serie.instances[0];\n      if (segSOPClassUIDs.includes(SOPClassUID)) {\n        const { scheme, url: parsedUrl } = wadouri.parseImageId(url);\n        if (scheme === 'dicomzip') {\n          return wadouri.loadZipRequest(parsedUrl, url);\n        }\n\n        const displaySet =\n          displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n        if (this.imageIdToFileUriMap.get(url) === displaySet.instance.imageId) {\n          return;\n        }\n\n        return fetch(parsedUrl, { headers })\n          .then((response) => response.arrayBuffer())\n          .then((buffer) => wadouri.fileManager.add(new Blob([buffer])))\n          .then((fileUri) => {\n            this.imageIdToFileUriMap.set(url, fileUri);\n            displaySet.instance.imageId = fileUri;\n            displaySet.instance.getImageId = () => fileUri;\n          });\n      }\n    });\n\n    await Promise.all(promises);\n  }\n\n  public updateCachedFile(blob, displaySet) {\n    const { url, imageId } = displaySet.instances[0];\n    const fileUri = wadouri.fileManager.add(blob);\n    displaySet.instance.imageId = fileUri;\n    displaySet.instance.getImageId = () => fileUri;\n    this.imageIdToFileUriMap.set(url, fileUri);\n\n    if (imageId?.startsWith('dicomfile:')) {\n      const { url: index } = wadouri.parseImageId(imageId);\n      wadouri.fileManager.remove(index);\n    }\n  }\n\n  public async cacheMissingStudyImageIds(StudyInstanceUIDs) {\n    const existingKeys = await window.caches.keys();\n    const existingStudyInstanceUIDs = existingKeys.map(\n      (key) => key.split('studies/')[1].split('/')[0]\n    );\n    const newStudies = StudyInstanceUIDs.filter(\n      (studyuid) => existingStudyInstanceUIDs.indexOf(studyuid) === -1\n    );\n    newStudies.forEach((studyuid) => {\n      this.cacheStudy(studyuid);\n    });\n  }\n\n  /**\n   * Removes all cached images which have been seen.\n   * @param evt\n   * @returns\n   */\n  private async handleQuotaExceededWriteError(evt) {\n    const scopes = await window.caches.keys();\n    scopes.forEach(async (scope) => {\n      try {\n        const cache = await caches.open(scope);\n        const k = await cache.keys();\n        const lastViewed = k[0].headers.get('dicom-last-viewed-date');\n        const utctime = k[0].headers.get('dicom-last-put-date');\n        const date = utctime ? new Date(utctime) : new Date();\n        const timeNow = new Date();\n        const timeSincePut = timeNow - date;\n        const millisecondsInDay = 8.64e7;\n        if (lastViewed !== 'undefined' || timeSincePut > 7 * millisecondsInDay) {\n          window.caches.delete(scope);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  public destroy() {\n    eventTarget.removeEventListener(\n      'CORNERSTONE_CACHE_QUOTA_EXCEEDED_ERROR',\n      this.handleQuotaExceededWriteError\n    );\n  }\n}\n","const addSegmentationLabelModifier = (servicesManager) => {\n  const { segmentationService, displaySetService } = servicesManager.services;\n\n  segmentationService.subscribe(\n    segmentationService.EVENTS.SEGMENTATION_ADDED,\n    ({ segmentation }) => {\n      let displaySet = displaySetService.getDisplaySetByUID(\n        segmentation.displaySetInstanceUID\n      );\n\n      if (displaySet.Modality === 'SEG') {\n        return;\n      }\n\n      const segmentationsCount = segmentationService.getSegmentations(false).length;\n      const increment = segmentationsCount > 0 ? ' ' + segmentationsCount : '';\n\n      const label = displaySet.SeriesDescription + ' - Vessel' + increment;\n      segmentation.label = label;\n\n      segmentationService.addOrUpdateSegmentation(\n        segmentation,\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    }\n  );\n};\n\nexport default addSegmentationLabelModifier;\n","import getPanelModule from './getPanelModule';\nimport getViewportModule from './getViewportModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getDataSourcesModule from './getDataSourcesModule';\n\nimport { id } from './id.js';\nimport GoogleSheetsService from './services/GoogleSheetsService';\nimport CropDisplayAreaService from './services/CropDisplayAreaService';\nimport CacheAPIService from './services/CacheAPIService';\nimport addSegmentationLabelModifier from './utils/addSegmentationLabelModifier';\n\n// import { CornerstoneEventTarget } from '@cornerstonejs/core/CornerstoneEventTarget';\n// import { Events } from '@cornerstonejs/core/Events';\n\nconst gradientHealthExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  onModeEnter({ servicesManager}){\n    addSegmentationLabelModifier(servicesManager)\n  },\n  getDataSourcesModule: ({ servicesManager }) => {\n    return getDataSourcesModule({ servicesManager });\n  },\n  getHangingProtocolModule,\n  getPanelModule,\n  getViewportModule,\n  preRegistration({ servicesManager, commandsManager, extensionManager}) {\n    servicesManager.registerService(GoogleSheetsService(servicesManager, commandsManager, extensionManager));\n    servicesManager.registerService(CropDisplayAreaService(servicesManager));\n    servicesManager.registerService(CacheAPIService(servicesManager, commandsManager, extensionManager));\n\n    const { HangingProtocolService } = servicesManager.services;\n    HangingProtocolService.addCustomAttribute('ViewCodeSequence', 'ViewCodeSequence', metaData => {\n        const viewCodeSeq = metaData[\"ViewCodeSequence\"] ??\n        ((metaData.images || metaData.others || [])[0] || {})[\n          \"ViewCodeSequence\"\n        ];\n        return viewCodeSeq[0].CodeValue\n      }\n    );\n  },\n};\n\nexport default gradientHealthExtension;\n","import CropDisplayAreaService from './CropDisplayAreaService';\n\nexport default function CropDisplayAreaServiceWithServices(serviceManager) {\n  return {\n    name: 'CropDisplayAreaService',\n    create: ({ configuration = {} }) => {\n      return new CropDisplayAreaService(serviceManager);\n    },\n  }\n};\n","import GoogleSheetsService from './GoogleSheetsService.js';\n\nexport default function GoogleSheetsServiceWithServices(serviceManager, commandsManager, extensionManager) {\n  return {\n    name: 'GoogleSheetsService',\n    create: ({ configuration = {} }) => {\n      return new GoogleSheetsService(serviceManager, commandsManager, extensionManager);\n    },\n  }\n};\n","import CacheAPIService from './CacheAPIService';\n\nexport default function ExtendedCacheAPIService(servicesManager, commandsManager, extensionManager) {\n  return {\n    name: 'CacheAPIService',\n    create: ({ configuration = {} }) => {\n      return new CacheAPIService(servicesManager, commandsManager, extensionManager);\n    },\n  };\n}\n"],"names":["formatDate","utils","PanelStudyBrowserTracking","MeasurementService","DisplaySetService","UIDialogService","UINotificationService","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","StudyInstanceUIDs","useImageViewer","activeViewportId","viewports","numCols","numRows","viewportGridService","useViewportGrid","navigate","useNavigate","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","get","displaySetInstanceUIDs","isSingleViewport","useEffect","added","EVENTS","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","subscriptions","forEach","evt","push","subscribe","source","measurement","referenceSeriesUID","SeriesInstanceUID","referenceStudyUID","StudyInstanceUID","unsubscribe","unsub","sid","async","qidoForStudyUID","query","studies","search","studyInstanceUid","length","Error","qidoStudiesForPatient","error","console","warn","actuallyMappedStudies","map","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","find","it","fetchStudiesForPatient","activeDisplaySets","newImageSrcEntry","displaySet","getDisplaySetByUID","dSet","displaySetInstanceUID","imageIds","getImageIdsForDisplaySet","imageId","Math","floor","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","data","displaySetsAdded","options","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","tabs","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","filter","ds","tabStudy","sortBySeriesDate","Object","assign","includes","_byDate","a","b","dateA","Date","parse","name","label","sort","studyA","studyB","_createStudyBrowserTabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","t","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","React","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickThumbnail","onDoubleClickThumbnail","setDisplaySetsForViewport","viewportId","activeDisplaySetInstanceUIDs","propTypes","PropTypes","isRequired","thumbnailDisplaySets","thumbnailNoImageDisplaySets","imageSrc","componentType","Modality","thumbnailNoImageModalities","_getComponentType","viewportIdentificator","values","reduce","acc","viewportData","index","viewportLabel","array","thumbnailProps","SeriesDescription","seriesNumber","String","SeriesNumber","modality","seriesDate","SeriesDate","numImageFrames","dragData","type","reject","series","canReject","onReject","create","id","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","body","className","actions","text","classes","onClose","dismiss","onShow","querySelector","focus","onSubmit","action","deleteDisplaySet","show","message","cornerstone","Promise","resolve","canvas","createElement","utilities","loadImageToCanvas","then","toDataURL","catch","some","retrieve","metadata","createGetImageSrcFromImageIdFn","extensionManager","getModuleEntry","exports","getCornerstoneLibraries","getImageSrcFromImageId","bind","ex","getStudyForPatientUtility","datasource","utilityModule","createRequestDisplaySetcreationFn","studyPanelUtilities","WrappedPanelStudyBrowserTracking","commandsManager","servicesManager","getActiveDataSource","_getStudiesForPatientByMRN","_getImageSrcFromImageId","_requestDisplaySetCreationForStudy","services","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","key","undefined","PanelMeasurementTableTracking","viewportGrid","measurementChangeTimestamp","setMeasurementsUpdated","now","toString","debouncedMeasurementChangeTimestamp","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","mappedMeasurements","getMeasurements","m","types","SOPInstanceUID","DicomMetadataStore","getInstance","getDisplaySetsForSeries","images","displayText","uid","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","measurements","onMeasurementDeleteHandler","remove","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","StudySummary","MeasurementTable","amount","onClick","onEdit","onMeasurementItemEditHandler","getMeasurement","onSubmitHandler","update","noCloseButton","setValue","Input","autoFocus","containerClassName","onChange","event","persist","target","onKeyPress","onDelete","RatingSelector","formIndex","defaultValue","labels","precision","max","getKeyFromValue","v","obj","keys","idx","ele","Number","val","setVal","hover","setHover","Paper","Typography","sx","fontSize","color","gutterBottom","variant","component","Rating","newValue","onChangeActive","newHover","emptyIcon","StarIcon","style","opacity","GridSelector","cols","Boolean","all","one","i","ch","concat","chunk","RadioGroup","row","FormControlLabel","control","Radio","CheckboxLabels","checked","FormGroup","Checkbox","Textarea","rows","debouncedOnChange","useMemo","debounce","TextField","inputProps","multiline","fullWidth","margin","size","DisplayValue","display","marginRight","UserProfile","getDateText","lastUpdated","days","hours","minutes","cd","h","round","toLocaleDateString","year","month","day","JSON","e","CardHeader","overflow","avatar","Avatar","imgProps","crossOrigin","referrerPolicy","src","picture","email","subheader","formTemplate","formValue","setFormValue","onChangeHandler","newFormValue","inputs","template","PanelForm","GoogleSheetsService","setFormTemplate","getFormTemplate","getFormValue","setError","firstLoad","setFirstLoad","initLoading","setInitLoading","loading","setLoading","onNext","getRow","onPrevious","debouncedOnNext","debouncedOnPrevious","GOOGLE_SHEETS_CHANGE","GOOGLE_SHEETS_ERROR","updateRow","LinearProgress","height","FormGeneratorComponent","ButtonGroup","LoadingButton","loadingPosition","startIcon","ArrowBack","endIcon","ArrowForward","PanelFormAndMeasurementTable","overflowY","Divider","background","sortStudyInstances","PanelStudyBrowser","hangingProtocolService","displaySetService","uiNotificationService","studyInstanceUIDs","setStudyInstanceUIDs","unsupported","initialViewport","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","newStudyInstanceUID","entries","studyUIDToIndex","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","excludeFromThumbnailBrowser","seriesDescription","referencedDisplaySet","referencedDisplaySetInstanceUID","ViewPosition","ImageLaterality","instance","replace","seriesTime","SeriesTime","countIcon","messages","isHydratedForDerivedDisplaySet","isHydrated","WrappedPanelStudyBrowser","getDataSources","useCallback","iconName","iconLabel","Component","OHIFCornerstoneViewport","props","fallback","_extends","disableViewportOrientationMarkers","breastProtocol","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","protocolMatchingRules","displaySetSelectors","LMLO","seriesMatchingRules","LCC","RMLO","RCC","toolGroupIds","stages","viewportStructure","properties","columns","viewportOptions","toolGroupId","numberOfPriorsReferenced","protocol","getImageId","frame","config","thumbnail","url","renderingAttr","uri","baseWadoRsUri","wadoRoot","buildInstanceWadoRsUri","buildInstanceFrameWadoRsUri","getWADORSImageId","wadouri","params","paramString","join","wadoUriRoot","buildInstanceWadoUrl","metadataProvider","MetadataProvider","datasetToBlob","dcmjs","mappings","patientId","_store","urls","studyInstanceUIDMap","Map","getMetaDataByURL","metaData","getInstanceUrl","prefix","modifiedUrl","getMetadataFromRows","seriesuidArray","filteredRows","_","x","rowsByStudy","studyuid","studyNumInstances","parseInt","isNaN","PatientSex","PatientWeight","PatientAge","Modalities","filesFromStudyInstanceUID","bucketName","studyuids","headers","studyMetadata","apiUrl","response","fetch","res","json","items","prefixes","encodeURIComponent","folderPath","findStudies","aStudy","storeDicomSeg","naturalizedReport","URLSearchParams","window","location","buckets","getAll","bucket","segBucket","segPrefix","filteredDescription","fileName","segDisplaySet","getDisplaySetsBy","split","segUploadUri","blob","compressedFile","pako","arrayBuffer","method","code","segUri","segSeries","dataSet","FrameOfReferenceUID","SOPClassUID","ReferencedSeriesSequence","SharedFunctionalGroupsSequence","stringify","_dicomJsonConfig","createDicomJSONApi","dicomJsonConfig","init","implementation","updateConfig","dicomWebConfig","initialize","set","UserAuthenticationService","metadataPerBucket","getAuthorizationHeader","naturalizedDicom","addImageIdToUIDs","mapParams","param","mappedParam","processResults","debug","directURL","customSort","delete","append","seriesSummaryMetadata","seriesSummary","addSeriesMetadata","numberOfSeries","naturalizedInstances","addInstances","getStudy","isLoaded","store","dicom","dataset","NumberOfFrames","getImageIdsForInstance","getStudyInstanceUIDs","IWebApiDataSource","createDataSource","packageJson","letters","letter_1","letter_2","alphabet","GOOGLE_SHEETS_DESTROY","convertFormValues","constructor","serviceManager","this","listeners","api_key","sheetId","sheetName","settings","formHeader","pubSubServiceInterface","cacheNearbyStudyInstanceUIDs","bufferBack","bufferFront","CacheAPIService","min","urlIndex","findIndex","studyIdIndex","rowsToCache","slice","indexOfCurrentId","splice","unshift","promise","getStudyInstanceUIDFromParams","cacheStudy","setFormByStudyInstanceUID","setFormByIndex","rowValues","readFormValue","_broadcastEvent","user","getUser","pathname","startsWith","eventTarget","addEventListener","Enums","STACK_VIEWPORT_NEW_STACK","studyInstanceUID","segSOPClassUIDs","segmentationService","activeStudySegDisplaySets","nonSegImageIds","flatMap","image","every","getSegmentation","isAllSegmentationsOfSeriesLoaded","renderedToolGroupIds","getToolGroupIdsWithSegmentation","csToolsUtils","isAllSeriesOfStudyCached","cache","getImageLoadObject","loadSegmentations","loadPromises","getReferenceDisplaySet","load","addRepresentationPromises","addSegmentationRepresentationToToolGroup","getState","activeViewport","segmentationsOfLoadedImage","setActiveSegmentationForToolGroup","IMAGE_CACHE_PREFETCHED","loadSegFiles","readRange","prev","curr","colIndex","header","col","order","baseUrl","Authorization","writeRange","range","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","send","majorDimension","colName","profile","updatedFormValue","delta","HangingProtocolService","SegmentationService","href","activeProtocolId","getActiveProtocol","reset","run","activeStudy","getSegmentations","segmentation","nextParams","nextURL","history","replaceState","setViewedStudy","destroy","CROP_DISPLAY_AREA_INIT","CropDisplayAreaService","tf","CornerstoneEventTarget","CS_EVENTS","handleBreastDensityHP","cornerstoneViewportService","detail","enabledElement","getEnabledElement","viewport","voiRange","invert","getProperties","cutoff","lower","upper","viewportInfo","getViewportInfo","matchedDisplaySetIndex","Array","from","displaySetMatchDetails","displayset","matchedDisplaySet","imageData","getImageData","scalarData","dimensions","bboxWidth","bboxHeight","width","mask","Float32Array","greater","widthBool","any","heightBool","left","argMax","right","reverse","mul","add","top","bottom","sub","dataSync","areaZoom","sWidth","sHeight","setDisplayArea","imageArea","imageCanvasPoint","canvasPoint","imagePoint","storeAsInitialCamera","focusToSegment","segmentationId","segmentIndex","segDisplayset","imageIdReferenceMap","representationData","pixelData","activeSegmentIndex","getImage","next","getPixelData","volume","getVolume","tensor","equal","maskCoordinates","xMax","yMax","xMin","yMin","transpose","gather","viewportsWithSegmentation","getCornerstoneViewport","imageAspectRatio","zoomFactors","y","canvasAspectRatio","zoomFactorsCopy","correctZoomFactors","handleFocusingForNewStack","render","eventElement","CSCORE_ENUMS","STACK","eventName","VOLUME_VIEWPORT_NEW_VOLUME","newImageListener","segDisplaySetsOfLoadedSeries","getSegDisplaysetsOfReferencedImagesIds","loadedDisplaySet","referencedSeriesInstanceUID","segmentationsRenderedCount","segmentationRenderedListener","removeEventListener","CSTOOLS_ENUMS","SEGMENTATION_RENDERED","zoomOutPercentatage","getOptions","internal","LOCAL_EVENTS","storageUsage","storageQuota","imageIdToFileUriMap","dataSources","handleQuotaExceededWriteError","navigator","storage","estimate","log","usage","quota","persisted","persistent","serie","getScope","caches","scope","match","ignoreVary","ignoreMethod","ignoreSearch","req","Request","toUTCString","put","cacheImageIds","cacheSegFiles","cacheSeries","promises","sendRequest","imageLoader","imageLoadObject","requestType","Prefetch","preScale","enabled","useRGBA","additionalDetails","imageLoadPoolManager","addRequest","userAuthenticationService","scheme","parsedUrl","parseImageId","loadZipRequest","buffer","fileManager","Blob","fileUri","updateCachedFile","cacheMissingStudyImageIds","existingStudyInstanceUIDs","indexOf","k","lastViewed","utctime","timeNow","err","SEGMENTATION_ADDED","segmentationsCount","increment","addOrUpdateSegmentation","onModeEnter","addSegmentationLabelModifier","getDataSourcesModule","getHangingProtocolModule","getPanelModule","getViewportModule","preRegistration","registerService","configuration","addCustomAttribute","others","CodeValue"],"sourceRoot":""}