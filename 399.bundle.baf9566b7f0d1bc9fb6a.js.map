{"version":3,"file":"399.bundle.baf9566b7f0d1bc9fb6a.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts","webpack:///../../../node_modules/iota-array/iota.js","webpack:///../../../node_modules/is-buffer/index.js","webpack:///../../../node_modules/ndarray/ndarray.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    throw new Error('ReferencedSeriesSequence is missing for the SEG');\n  }\n\n  const referencedSeries = referencedSeriesSequence[0];\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({ extensionManager, servicesManager, segDisplaySet, headers }) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = dicomlabToRGB(data.RecommendedDisplayCIELabValue);\n    }\n  });\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationGroupTable } from '@ohif/ui';\nimport callInputDialog from './callInputDialog';\nimport { useAppConfig } from '@state';\nimport { useTranslation } from 'react-i18next';\n\nexport default function PanelSegmentation({ servicesManager, commandsManager }) {\n  const { segmentationService, uiDialogService } = servicesManager.services;\n  const [appConfig] = useAppConfig();\n  const disableEditing = appConfig?.disableEditing;\n\n  const { t } = useTranslation('PanelSegmentation');\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  const [isMinimized, setIsMinimized] = useState({});\n\n  const onToggleMinimizeSegmentation = useCallback(\n    id => {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [id]: !prevState[id],\n      }));\n    },\n    [setIsMinimized]\n  );\n\n  // Only expand the last segmentation added to the list and collapse the rest\n  useEffect(() => {\n    const lastSegmentationId = segmentations[segmentations.length - 1]?.id;\n    if (lastSegmentationId) {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [lastSegmentationId]: false,\n      }));\n    }\n  }, [segmentations, setIsMinimized]);\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegmentForSegmentation(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabelForSegmentation(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    // Todo: Implement color picker later\n    return;\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    // segmentationService.removeSegmentFromSegmentation(\n    //   segmentationId,\n    //   segmentIndex\n    // );\n    console.warn('not implemented yet');\n  };\n\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  return (\n    <div className=\"mt-1 flex min-h-0 flex-auto flex-col justify-between\">\n      {/* show segmentation table */}\n      {segmentations?.length ? (\n        <SegmentationGroupTable\n          title={t('Segmentations')}\n          showAddSegmentation={false}\n          segmentations={segmentations}\n          isMinimized={isMinimized}\n          activeSegmentationId={selectedSegmentationId || ''}\n          onSegmentationClick={onSegmentationClick}\n          onSegmentationDelete={onSegmentationDelete}\n          onSegmentationEdit={onSegmentationEdit}\n          onSegmentClick={onSegmentClick}\n          onSegmentEdit={onSegmentEdit}\n          disableEditing={disableEditing}\n          onSegmentColorClick={onSegmentColorClick}\n          onSegmentDelete={onSegmentDelete}\n          onToggleSegmentVisibility={onToggleSegmentVisibility}\n          onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n          onToggleMinimizeSegmentation={onToggleMinimizeSegmentation}\n          segmentationConfig={{ initialConfig: segmentationConfiguration }}\n          setRenderOutline={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n          }\n          setOutlineOpacityActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n          }\n          setRenderFill={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n          }\n          setRenderInactiveSegmentations={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderInactiveSegmentations',\n              value\n            )\n          }\n          setOutlineWidthActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n          }\n          setFillAlpha={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n          }\n          setFillAlphaInactive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n          }\n        />\n      ) : null}\n    </div>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","import { id } from './id';\nimport React from 'react';\n\nimport { Types } from '@ohif/core';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport hydrateSEGDisplaySet from './utils/_hydrateSEG';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule: ({ servicesManager, commandsManager, extensionManager }): Types.Panel[] => {\n    const wrappedPanelSegmentation = () => {\n      return (\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'panelSegmentation',\n        iconName: 'tab-segmentation',\n        iconLabel: 'Segmentation',\n        label: 'Segmentation',\n        component: wrappedPanelSegmentation,\n      },\n    ];\n  },\n\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\nexport { hydrateSEGDisplaySet };\n","async function _hydrateSEGDisplaySet({\n  segDisplaySet,\n  viewportId: targetViewportId,\n  servicesManager,\n}) {\n  const { segmentationService, hangingProtocolService, viewportGridService } =\n    servicesManager.services;\n\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await segmentationService.createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  segmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = viewportGridService.getState();\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    displaySetInstanceUID\n  );\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, viewportId) => {\n    if (targetViewportId === viewportId) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\n          // Used for segmentation hydration right now, since the logic to decide whether\n          // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\n          // so we need to re-render (force update via change of the needsRerendering) so that React\n          // does the diffing and decides we should render this again (although the id and element has not changed)\n          // so that the CornerstoneViewportService can decide whether to render the segmentation or not.\n          needsRerendering: true,\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  // Do the entire update at once\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nexport default _hydrateSEGDisplaySet;\n","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","Error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","_ref","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","_ref2","utilityModule","getModuleEntry","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","error","_load","_ref3","name","getDisplaySetsFromSeries","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","text","type","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","PanelSegmentation","commandsManager","appConfig","useAppConfig","disableEditing","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","isMinimized","setIsMinimized","onToggleMinimizeSegmentation","useCallback","prevState","useEffect","lastSegmentationId","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","setConfiguration","SegmentationGroupTable","showAddSegmentation","activeSegmentationId","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationEdit","segmentation","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegmentForSegmentation","toolGroupId","jumpToSegmentCenter","onSegmentEdit","segment","setSegmentLabelForSegmentation","onSegmentColorClick","onSegmentDelete","console","warn","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentationVisibility","toggleSegmentationVisibility","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","runCommand","isRequired","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","Component","OHIFCornerstoneSEGViewport","props","fallback","getPanelModule","iconName","iconLabel","component","wrappedPanelSegmentation","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule","viewportId","targetViewportId","hangingProtocolService","viewportGridService","hydrateSegmentation","getState","updatedViewports","getViewportsRequireUpdate","viewport","shouldRenderSegmentation","displaySetInstanceUIDs","needsRerendering","initialImageOptions","preset","setDisplaySetsForViewports","module","n","result","Array","obj","constructor","isBuffer","iota","hasTypedArrays","Float64Array","compare1st","a","b","order","stride","this","terms","abs","sort","compileConstructor","dtype","dimension","join","useGetters","code","Function","procedure","CACHED_CONSTRUCTORS","indices","args","index_str","shapeArg","strideArg","a_vars","c_vars","tShape","tStride","idx","shape","offset","undefined","ctor","array","d","sz","prototype","toString","call","isArray","arrayDType","ctor_list"],"sourceRoot":""}